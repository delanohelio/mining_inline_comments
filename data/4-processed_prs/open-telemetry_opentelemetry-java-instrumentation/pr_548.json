{"pr_number": 548, "pr_title": "Tutorial Section 2 [2/3]", "pr_createdAt": "2020-06-19T16:27:25Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548", "timeline": [{"oid": "b8f8a1b497a65eb2997f729e1859f1dede25ed50", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b8f8a1b497a65eb2997f729e1859f1dede25ed50", "message": "First section of the tutorial 1/3", "committedDate": "2020-06-12T19:03:51Z", "type": "commit"}, {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eb6fb4950d54ced866b91be25eb858d4ae48b308", "message": "Update README.md", "committedDate": "2020-06-12T21:23:10Z", "type": "commit"}, {"oid": "8eed0d09b53b9df337d37a3fa12d38560c948809", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8eed0d09b53b9df337d37a3fa12d38560c948809", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-14T19:31:39Z", "type": "commit"}, {"oid": "cd83e3f488c9373d71d17fed6cf29a8bf63f6462", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cd83e3f488c9373d71d17fed6cf29a8bf63f6462", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-15T13:58:16Z", "type": "commit"}, {"oid": "6ef70ad8fa9d37e02491838629fd5fcab2367cf0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6ef70ad8fa9d37e02491838629fd5fcab2367cf0", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-15T14:00:01Z", "type": "commit"}, {"oid": "fdffbcc99e98c83f5a69c20975bc95610b05787a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fdffbcc99e98c83f5a69c20975bc95610b05787a", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-15T14:03:49Z", "type": "commit"}, {"oid": "f80cfe1483c243215e26bfbe6f8f87746b7db3aa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f80cfe1483c243215e26bfbe6f8f87746b7db3aa", "message": "trask changes", "committedDate": "2020-06-15T14:36:58Z", "type": "commit"}, {"oid": "80c11c07dd18c05f6dc14e22e8034058a9d8d689", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/80c11c07dd18c05f6dc14e22e8034058a9d8d689", "message": "line space and general clean up", "committedDate": "2020-06-15T14:45:10Z", "type": "commit"}, {"oid": "e3602717f2019c37197aac7553adfa0be99e2d40", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e3602717f2019c37197aac7553adfa0be99e2d40", "message": "Merge branch 'master' into master", "committedDate": "2020-06-15T14:49:07Z", "type": "commit"}, {"oid": "96e34ab7a674aea5f08517a3142c35295349e06a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/96e34ab7a674aea5f08517a3142c35295349e06a", "message": "some more clean ups", "committedDate": "2020-06-15T21:04:43Z", "type": "commit"}, {"oid": "a1bdedec1b7c6f64ec7c6ad837f2432141d0a8bf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a1bdedec1b7c6f64ec7c6ad837f2432141d0a8bf", "message": "Merge branch 'master' into master", "committedDate": "2020-06-15T21:43:28Z", "type": "commit"}, {"oid": "297f928342832b075473caddccd2470d71c5963d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/297f928342832b075473caddccd2470d71c5963d", "message": "Merge branch 'master' into master", "committedDate": "2020-06-16T00:54:07Z", "type": "commit"}, {"oid": "7d49faf7b51c02a12a9c577812c41701b509921c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7d49faf7b51c02a12a9c577812c41701b509921c", "message": "fix name of build file", "committedDate": "2020-06-18T02:28:18Z", "type": "commit"}, {"oid": "44483c389d480c924b6fbad501715fe4e0560f96", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44483c389d480c924b6fbad501715fe4e0560f96", "message": "Section 2: Handler and ClientInterceptor Example", "committedDate": "2020-06-19T15:58:38Z", "type": "commit"}, {"oid": "7de24b5254a9a457bdf58bf28bd031b9457edb42", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7de24b5254a9a457bdf58bf28bd031b9457edb42", "message": "Merge branch 'master' into master", "committedDate": "2020-06-19T16:33:59Z", "type": "commit"}, {"oid": "cb0406a36c7fe9bda151a8d6163b445e157fb5f2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cb0406a36c7fe9bda151a8d6163b445e157fb5f2", "message": "fix failing default test by excluding data source autoconfig", "committedDate": "2020-06-19T19:12:32Z", "type": "commit"}, {"oid": "6c7719c63af286a8941ef8a9d81d1776619b512f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6c7719c63af286a8941ef8a9d81d1776619b512f", "message": "Merge branch 'master' of https://github.com/mabdinur/opentelemetry-java-instrumentation", "committedDate": "2020-06-19T19:13:17Z", "type": "commit"}, {"oid": "48ff54bfd9226f81e6ef79b932f2bc306640c394", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/48ff54bfd9226f81e6ef79b932f2bc306640c394", "message": "ws", "committedDate": "2020-06-19T19:15:00Z", "type": "commit"}, {"oid": "26e351b6afe811f783de7c319a9abfc6fdec4afe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/26e351b6afe811f783de7c319a9abfc6fdec4afe", "message": "format", "committedDate": "2020-06-19T20:35:31Z", "type": "commit"}, {"oid": "4c0d05a6ecf92b2db71a4c06ef2a8ad00667d8a3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4c0d05a6ecf92b2db71a4c06ef2a8ad00667d8a3", "message": "fix merge conflict", "committedDate": "2020-06-19T20:43:00Z", "type": "commit"}, {"oid": "6c924d5b9c63e3afd7eaf34d5cf326bdac2f5bdd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6c924d5b9c63e3afd7eaf34d5cf326bdac2f5bdd", "message": "run tests using java8", "committedDate": "2020-06-19T22:17:19Z", "type": "commit"}, {"oid": "b3a22653ccb6cf26d68063b9fbc3b1f56b5572b2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b3a22653ccb6cf26d68063b9fbc3b1f56b5572b2", "message": "spotless apply", "committedDate": "2020-06-19T22:38:54Z", "type": "commit"}, {"oid": "d993def4b5ffa252540b7b5ac385a0fcf52d3e3d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d993def4b5ffa252540b7b5ac385a0fcf52d3e3d", "message": "Merge branch 'master' into master", "committedDate": "2020-06-22T00:10:38Z", "type": "commit"}, {"oid": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/99afb1ad3338d338fb2d1007159e0021cdb69f98", "message": "Merge branch 'master' into master", "committedDate": "2020-06-22T17:20:53Z", "type": "commit"}, {"oid": "0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "message": "fix prehandle", "committedDate": "2020-06-23T03:04:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkyNDEzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443924130", "bodyText": "conventional ordering\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private final static tracerName = \"fooTracer\"; \n          \n          \n            \n               private static final tracerName = \"fooTracer\";", "author": "trask", "createdAt": "2020-06-23T02:21:02Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -114,7 +114,7 @@ import io.opentelemetry.exporters.logging.*;\n \n @Configuration\n public class OtelConfig {\n-   private static tracerName = \"fooTracer\"; \n+   private final static tracerName = \"fooTracer\"; ", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkyNTY4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443925681", "bodyText": "final on classes is not super common, so i'd leave off of this example code\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class HttpUtils {\n          \n          \n            \n            public class HttpUtils {", "author": "trask", "createdAt": "2020-06-23T02:27:07Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -237,7 +239,7 @@ import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.Tracer;\n \n @Component\n-public class HttpUtils {\n+public final class HttpUtils {", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNjI4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443936280", "bodyText": "I think this reads better:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Here we will create RestControllers for `FirstService` and `SecondService`.\n          \n          \n            \n            Here we will create REST controllers for `FirstService` and `SecondService`.", "author": "trask", "createdAt": "2020-06-23T03:09:19Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -144,7 +144,7 @@ OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n        \n ### Project Background\n \n-Here we will create rest controllers for `FirstService` and `SecondService`.\n+Here we will create RestControllers for `FirstService` and `SecondService`.", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNjM2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443936369", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n          \n          \n            \n            In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and SecondService controllers in a span.", "author": "trask", "createdAt": "2020-06-23T03:09:42Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,323 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. ", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNjUzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443936531", "bodyText": "two alternate suggestions here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Setup FirstService and SecondService\n          \n          \n            \n            ### Set up FirstService and SecondService\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Setup FirstService and SecondService\n          \n          \n            \n            ### Setup for FirstService and SecondService", "author": "trask", "createdAt": "2020-06-23T03:10:24Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,323 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNjg5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443936894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n          \n          \n            \n            Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation).", "author": "trask", "createdAt": "2020-06-23T03:11:59Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,323 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). ", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNzY1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443937651", "bodyText": "these imports aren't used\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import io.opentelemetry.context.Scope;\n          \n          \n            \n            import io.opentelemetry.trace.Span;\n          \n          \n            \n            import io.opentelemetry.trace.Tracer;", "author": "trask", "createdAt": "2020-06-23T03:15:19Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,323 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzODA3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443938073", "bodyText": "no need to add span context to the response header\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n          \n          \n            \n            The preHandle method starts a span for each request. This implementation is shown below:", "author": "trask", "createdAt": "2020-06-23T03:17:13Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,323 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    ", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzODE3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443938176", "bodyText": "no need to add span context to the response header\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n          \n          \n            \n                     new HttpTextFormat.Setter<HttpServletResponse>() {\n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void set(HttpServletResponse response, String key, String value) {\n          \n          \n            \n                           response.addHeader(key, value);\n          \n          \n            \n                        }\n          \n          \n            \n                     };", "author": "trask", "createdAt": "2020-06-23T03:17:38Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,323 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzODI5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443938299", "bodyText": "no need to add span context to the response header\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);", "author": "trask", "createdAt": "2020-06-23T03:18:10Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,323 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+     \n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzODU4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443938582", "bodyText": "it looks like this Scope is never closed?", "author": "trask", "createdAt": "2020-06-23T03:19:24Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,323 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+     \n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);", "originalCommit": "99afb1ad3338d338fb2d1007159e0021cdb69f98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMjE2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r444632162", "bodyText": "this is important to address because the scope is bound to ThreadLocal and so will leak, and if/when that thread is reused it will have wrong/old span bound to it", "author": "trask", "createdAt": "2020-06-24T04:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzODU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3Nzc1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r444977756", "bodyText": "Interesting. I noticed that the HandlerInterceptor.postHandle is not called when an unhandled exception is thrown. So I moved this code to afterCompletion but that doesn't address this threading issue. Would you recommend implementing a Serverlet Filter instead of a HandlerInterceptor to wrap controllers in a span?", "author": "mabdinur", "createdAt": "2020-06-24T15:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzODU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445074189", "bodyText": "servlet filter sounds good \ud83d\udc4d", "author": "trask", "createdAt": "2020-06-24T18:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzODU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MDYyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443940622", "bodyText": "would it be better to end the span in afterCompletion?", "author": "trask", "createdAt": "2020-06-23T03:27:56Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,324 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}", "originalCommit": "0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMzA0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r444633041", "bodyText": "bumping this, it seems github is hiding a couple of conversations even though they aren't marked resolved", "author": "trask", "createdAt": "2020-06-24T04:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MDYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MTA4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443941082", "bodyText": "for consistency with the other fields\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               HttpUtils httpUtils;\n          \n          \n            \n               private HttpUtils httpUtils;", "author": "trask", "createdAt": "2020-06-23T03:30:04Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,324 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}\n+   \n+   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+      Span parentSpan = TracingContextUtils.getSpan(context);\n+\n+      if (parentSpan.getContext().isValid()) {\n+         return  tracer.spanBuilder(request.getRequestURI()).setParent(parentSpan).startSpan();\n+      }\n+\n+      Span span = tracer.spanBuilder(request.getRequestURI()).startSpan();\n+      span.addEvent(\"Parent Span Not Found\");\n+\n+      return span;\n+   }\n+}\n+\n+```\n+\n+The final step is to register an instance of the ControllerTraceInterceptor:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n+\n+@Component\n+public class InterceptorConfig extends WebMvcConfigurationSupport {\n+\n+   @Autowired\n+   ControllerTraceInterceptor controllerTraceInterceptor;\n+\n+   @Override\n+   public void addInterceptors(InterceptorRegistry registry) {\n+      registry.addInterceptor(controllerTraceInterceptor);\n+   }\n+}\n+```\n+\n+Now your SecondService application is complete. Create the FirstService application using the instructions below and then run your distributed service!\n+\n+### Instrumentation of Receiving Service: FirstService\n+\n+Ensure the main method in FirstServiceApplication is defined. This will be the entry point to the FirstService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Create a RestController for FirstService. This controller will send a request to SecondService and then return the response to the client:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\t\n+   @Autowired\n+   private RestTemplate restTemplate;\n+\n+   @Autowired\n+   HttpUtils httpUtils;", "originalCommit": "0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MTMyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443941324", "bodyText": "constants are typically static and final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static String SECOND_SERVICE_URL = \"http://localhost:8081/time\";\n          \n          \n            \n               private static final String SECOND_SERVICE_URL = \"http://localhost:8081/time\";", "author": "trask", "createdAt": "2020-06-23T03:31:03Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,324 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}\n+   \n+   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+      Span parentSpan = TracingContextUtils.getSpan(context);\n+\n+      if (parentSpan.getContext().isValid()) {\n+         return  tracer.spanBuilder(request.getRequestURI()).setParent(parentSpan).startSpan();\n+      }\n+\n+      Span span = tracer.spanBuilder(request.getRequestURI()).startSpan();\n+      span.addEvent(\"Parent Span Not Found\");\n+\n+      return span;\n+   }\n+}\n+\n+```\n+\n+The final step is to register an instance of the ControllerTraceInterceptor:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n+\n+@Component\n+public class InterceptorConfig extends WebMvcConfigurationSupport {\n+\n+   @Autowired\n+   ControllerTraceInterceptor controllerTraceInterceptor;\n+\n+   @Override\n+   public void addInterceptors(InterceptorRegistry registry) {\n+      registry.addInterceptor(controllerTraceInterceptor);\n+   }\n+}\n+```\n+\n+Now your SecondService application is complete. Create the FirstService application using the instructions below and then run your distributed service!\n+\n+### Instrumentation of Receiving Service: FirstService\n+\n+Ensure the main method in FirstServiceApplication is defined. This will be the entry point to the FirstService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Create a RestController for FirstService. This controller will send a request to SecondService and then return the response to the client:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\t\n+   @Autowired\n+   private RestTemplate restTemplate;\n+\n+   @Autowired\n+   HttpUtils httpUtils;\n+\n+   private static String SECOND_SERVICE_URL = \"http://localhost:8081/time\";", "originalCommit": "0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MTU5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443941593", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As seen in the setup of SecondService, create implement the TraceInterceptor interface to wrap requests to the SecondServiceController in a span. Then register this new handler by extending the HandlerInterceptor. In effect, we will be taking a copy of the InterceptorConfig.java and ControllerTraceInterceptor.java defined in SecondService and adding it to FirstService. These files are referenced [here](#create-controller-interceptor).\n          \n          \n            \n            As seen in the setup of SecondService, implement the TraceInterceptor interface to wrap requests to the SecondServiceController in a span. Then register this new handler by extending the HandlerInterceptor. In effect, we will be taking a copy of the InterceptorConfig.java and ControllerTraceInterceptor.java defined in SecondService and adding it to FirstService. These files are referenced [here](#create-controller-interceptor).", "author": "trask", "createdAt": "2020-06-23T03:32:20Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,324 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}\n+   \n+   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+      Span parentSpan = TracingContextUtils.getSpan(context);\n+\n+      if (parentSpan.getContext().isValid()) {\n+         return  tracer.spanBuilder(request.getRequestURI()).setParent(parentSpan).startSpan();\n+      }\n+\n+      Span span = tracer.spanBuilder(request.getRequestURI()).startSpan();\n+      span.addEvent(\"Parent Span Not Found\");\n+\n+      return span;\n+   }\n+}\n+\n+```\n+\n+The final step is to register an instance of the ControllerTraceInterceptor:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n+\n+@Component\n+public class InterceptorConfig extends WebMvcConfigurationSupport {\n+\n+   @Autowired\n+   ControllerTraceInterceptor controllerTraceInterceptor;\n+\n+   @Override\n+   public void addInterceptors(InterceptorRegistry registry) {\n+      registry.addInterceptor(controllerTraceInterceptor);\n+   }\n+}\n+```\n+\n+Now your SecondService application is complete. Create the FirstService application using the instructions below and then run your distributed service!\n+\n+### Instrumentation of Receiving Service: FirstService\n+\n+Ensure the main method in FirstServiceApplication is defined. This will be the entry point to the FirstService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Create a RestController for FirstService. This controller will send a request to SecondService and then return the response to the client:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\t\n+   @Autowired\n+   private RestTemplate restTemplate;\n+\n+   @Autowired\n+   HttpUtils httpUtils;\n+\n+   private static String SECOND_SERVICE_URL = \"http://localhost:8081/time\";\n+\n+   @GetMapping\n+   public String firstTracedMethod() {\n+\n+      ResponseEntity<String> response =\n+            restTemplate.exchange(SECOND_SERVICE_URL, HttpMethod.GET, null, String.class);\n+      String secondServiceTime = response.getBody();\n+\n+      return \"Second Service says: \" + secondServiceTime;\n+\n+   }\n+}\n+```\n+\n+As seen in the setup of SecondService, create implement the TraceInterceptor interface to wrap requests to the SecondServiceController in a span. Then register this new handler by extending the HandlerInterceptor. In effect, we will be taking a copy of the InterceptorConfig.java and ControllerTraceInterceptor.java defined in SecondService and adding it to FirstService. These files are referenced [here](#create-controller-interceptor).", "originalCommit": "0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MTg3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443941876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To propagate the span context from FirstService to SecondService we must inject the trace id and trace state into the outgoing request header. In section 1 this was done using the helper class HttpUtils. In this section, we will implement the ClientHttpRequestInterceptor interface and register this interceptor in our application. \n          \n          \n            \n            To propagate the span context from FirstService to SecondService we must inject the trace parent and trace state into the outgoing request header. In section 1 this was done using the helper class HttpUtils. In this section, we will implement the ClientHttpRequestInterceptor interface and register this interceptor in our application.", "author": "trask", "createdAt": "2020-06-23T03:33:31Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,324 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}\n+   \n+   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+      Span parentSpan = TracingContextUtils.getSpan(context);\n+\n+      if (parentSpan.getContext().isValid()) {\n+         return  tracer.spanBuilder(request.getRequestURI()).setParent(parentSpan).startSpan();\n+      }\n+\n+      Span span = tracer.spanBuilder(request.getRequestURI()).startSpan();\n+      span.addEvent(\"Parent Span Not Found\");\n+\n+      return span;\n+   }\n+}\n+\n+```\n+\n+The final step is to register an instance of the ControllerTraceInterceptor:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n+\n+@Component\n+public class InterceptorConfig extends WebMvcConfigurationSupport {\n+\n+   @Autowired\n+   ControllerTraceInterceptor controllerTraceInterceptor;\n+\n+   @Override\n+   public void addInterceptors(InterceptorRegistry registry) {\n+      registry.addInterceptor(controllerTraceInterceptor);\n+   }\n+}\n+```\n+\n+Now your SecondService application is complete. Create the FirstService application using the instructions below and then run your distributed service!\n+\n+### Instrumentation of Receiving Service: FirstService\n+\n+Ensure the main method in FirstServiceApplication is defined. This will be the entry point to the FirstService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Create a RestController for FirstService. This controller will send a request to SecondService and then return the response to the client:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\t\n+   @Autowired\n+   private RestTemplate restTemplate;\n+\n+   @Autowired\n+   HttpUtils httpUtils;\n+\n+   private static String SECOND_SERVICE_URL = \"http://localhost:8081/time\";\n+\n+   @GetMapping\n+   public String firstTracedMethod() {\n+\n+      ResponseEntity<String> response =\n+            restTemplate.exchange(SECOND_SERVICE_URL, HttpMethod.GET, null, String.class);\n+      String secondServiceTime = response.getBody();\n+\n+      return \"Second Service says: \" + secondServiceTime;\n+\n+   }\n+}\n+```\n+\n+As seen in the setup of SecondService, create implement the TraceInterceptor interface to wrap requests to the SecondServiceController in a span. Then register this new handler by extending the HandlerInterceptor. In effect, we will be taking a copy of the InterceptorConfig.java and ControllerTraceInterceptor.java defined in SecondService and adding it to FirstService. These files are referenced [here](#create-controller-interceptor).\n+\n+#### Create Client Http Request Interceptor\n+\n+Next, we will configure the ClientHttpRequestInterceptor to intercept all client HTTP requests made using RestTemplate.\n+\n+To propagate the span context from FirstService to SecondService we must inject the trace id and trace state into the outgoing request header. In section 1 this was done using the helper class HttpUtils. In this section, we will implement the ClientHttpRequestInterceptor interface and register this interceptor in our application. ", "originalCommit": "0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MjEzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443942133", "bodyText": "this span is not ended", "author": "trask", "createdAt": "2020-06-23T03:34:39Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,324 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}\n+   \n+   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+      Span parentSpan = TracingContextUtils.getSpan(context);\n+\n+      if (parentSpan.getContext().isValid()) {\n+         return  tracer.spanBuilder(request.getRequestURI()).setParent(parentSpan).startSpan();\n+      }\n+\n+      Span span = tracer.spanBuilder(request.getRequestURI()).startSpan();\n+      span.addEvent(\"Parent Span Not Found\");\n+\n+      return span;\n+   }\n+}\n+\n+```\n+\n+The final step is to register an instance of the ControllerTraceInterceptor:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n+\n+@Component\n+public class InterceptorConfig extends WebMvcConfigurationSupport {\n+\n+   @Autowired\n+   ControllerTraceInterceptor controllerTraceInterceptor;\n+\n+   @Override\n+   public void addInterceptors(InterceptorRegistry registry) {\n+      registry.addInterceptor(controllerTraceInterceptor);\n+   }\n+}\n+```\n+\n+Now your SecondService application is complete. Create the FirstService application using the instructions below and then run your distributed service!\n+\n+### Instrumentation of Receiving Service: FirstService\n+\n+Ensure the main method in FirstServiceApplication is defined. This will be the entry point to the FirstService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Create a RestController for FirstService. This controller will send a request to SecondService and then return the response to the client:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\t\n+   @Autowired\n+   private RestTemplate restTemplate;\n+\n+   @Autowired\n+   HttpUtils httpUtils;\n+\n+   private static String SECOND_SERVICE_URL = \"http://localhost:8081/time\";\n+\n+   @GetMapping\n+   public String firstTracedMethod() {\n+\n+      ResponseEntity<String> response =\n+            restTemplate.exchange(SECOND_SERVICE_URL, HttpMethod.GET, null, String.class);\n+      String secondServiceTime = response.getBody();\n+\n+      return \"Second Service says: \" + secondServiceTime;\n+\n+   }\n+}\n+```\n+\n+As seen in the setup of SecondService, create implement the TraceInterceptor interface to wrap requests to the SecondServiceController in a span. Then register this new handler by extending the HandlerInterceptor. In effect, we will be taking a copy of the InterceptorConfig.java and ControllerTraceInterceptor.java defined in SecondService and adding it to FirstService. These files are referenced [here](#create-controller-interceptor).\n+\n+#### Create Client Http Request Interceptor\n+\n+Next, we will configure the ClientHttpRequestInterceptor to intercept all client HTTP requests made using RestTemplate.\n+\n+To propagate the span context from FirstService to SecondService we must inject the trace id and trace state into the outgoing request header. In section 1 this was done using the helper class HttpUtils. In this section, we will implement the ClientHttpRequestInterceptor interface and register this interceptor in our application. \n+\n+Include the two classes below to your FirstService project to add this functionality:\n+\n+\n+```java\n+\n+import java.io.IOException;\n+\n+import io.grpc.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpRequest;\n+\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.stereotype.Component;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class RestTemplateHeaderModifierInterceptor implements ClientHttpRequestInterceptor {\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   private static final HttpTextFormat.Setter<HttpRequest> setter =\n+         new HttpTextFormat.Setter<HttpRequest>() {\n+            @Override\n+            public void set(HttpRequest carrier, String key, String value) {\n+               carrier.getHeaders().set(key, value);\n+            }\n+         };\n+\n+\n+   @Override\n+   public ClientHttpResponse intercept(HttpRequest request, byte[] body,\n+         ClientHttpRequestExecution execution) throws IOException {\n+\n+      Span currentSpan = tracer.getCurrentSpan();", "originalCommit": "0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyNTg2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r444325862", "bodyText": "I can see why this can be a bit cryptic but I started the span in ControllerTraceInterceptor.preHandle (line 442) and I end the span in ControllerTraceInterceptor.postHandle (line 454). currentSpan is opened and closed by the Controller Interceptor. Here I wrap each request in one span and I add events to this span in other parts of the application. I do not create sub spans with in a rest controller. In the RestTemplate interceptor defined above, I get the controller span from the tracer and I add an event. Although I'm not sure if this approach follows best practices for tracing or if I'm missing something here. Please advise and thanks again for your help.", "author": "mabdinur", "createdAt": "2020-06-23T15:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MjEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMDIwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r444630209", "bodyText": "oh yes, i missed that you are not creating a new span here\nya, best practice is to create a new span here (with kind Span.Kind.CLIENT), instead of adding an event \ud83d\udc4d", "author": "trask", "createdAt": "2020-06-24T03:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MjEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0MjUyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r443942523", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  List<ClientHttpRequestInterceptor> interceptors = restTemplate.getInterceptors();\n          \n          \n            \n                  if (interceptors.isEmpty()) {\n          \n          \n            \n                     interceptors = new ArrayList<>();\n          \n          \n            \n                  }\n          \n          \n            \n                  interceptors.add(restTemplateHeaderModifierInterceptor);\n          \n          \n            \n                  restTemplate.setInterceptors(interceptors);\n          \n          \n            \n                  restTemplate.getInterceptors().add(restTemplateHeaderModifierInterceptor);", "author": "trask", "createdAt": "2020-06-23T03:36:20Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,324 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and Second Service controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Setup FirstService and SecondService\n+\n+Using the earlier instructions [create two example projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the RestController below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the RestController is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. The postHandle method closes the span and adds the span context to the response header. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   private static final HttpTextFormat.Setter<HttpServletResponse> setter =\n+         new HttpTextFormat.Setter<HttpServletResponse>() {\n+            @Override\n+            public void set(HttpServletResponse response, String key, String value) {\n+               response.addHeader(key, value);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), response, setter);\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}\n+   \n+   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+      Span parentSpan = TracingContextUtils.getSpan(context);\n+\n+      if (parentSpan.getContext().isValid()) {\n+         return  tracer.spanBuilder(request.getRequestURI()).setParent(parentSpan).startSpan();\n+      }\n+\n+      Span span = tracer.spanBuilder(request.getRequestURI()).startSpan();\n+      span.addEvent(\"Parent Span Not Found\");\n+\n+      return span;\n+   }\n+}\n+\n+```\n+\n+The final step is to register an instance of the ControllerTraceInterceptor:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n+\n+@Component\n+public class InterceptorConfig extends WebMvcConfigurationSupport {\n+\n+   @Autowired\n+   ControllerTraceInterceptor controllerTraceInterceptor;\n+\n+   @Override\n+   public void addInterceptors(InterceptorRegistry registry) {\n+      registry.addInterceptor(controllerTraceInterceptor);\n+   }\n+}\n+```\n+\n+Now your SecondService application is complete. Create the FirstService application using the instructions below and then run your distributed service!\n+\n+### Instrumentation of Receiving Service: FirstService\n+\n+Ensure the main method in FirstServiceApplication is defined. This will be the entry point to the FirstService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Create a RestController for FirstService. This controller will send a request to SecondService and then return the response to the client:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\t\n+   @Autowired\n+   private RestTemplate restTemplate;\n+\n+   @Autowired\n+   HttpUtils httpUtils;\n+\n+   private static String SECOND_SERVICE_URL = \"http://localhost:8081/time\";\n+\n+   @GetMapping\n+   public String firstTracedMethod() {\n+\n+      ResponseEntity<String> response =\n+            restTemplate.exchange(SECOND_SERVICE_URL, HttpMethod.GET, null, String.class);\n+      String secondServiceTime = response.getBody();\n+\n+      return \"Second Service says: \" + secondServiceTime;\n+\n+   }\n+}\n+```\n+\n+As seen in the setup of SecondService, create implement the TraceInterceptor interface to wrap requests to the SecondServiceController in a span. Then register this new handler by extending the HandlerInterceptor. In effect, we will be taking a copy of the InterceptorConfig.java and ControllerTraceInterceptor.java defined in SecondService and adding it to FirstService. These files are referenced [here](#create-controller-interceptor).\n+\n+#### Create Client Http Request Interceptor\n+\n+Next, we will configure the ClientHttpRequestInterceptor to intercept all client HTTP requests made using RestTemplate.\n+\n+To propagate the span context from FirstService to SecondService we must inject the trace id and trace state into the outgoing request header. In section 1 this was done using the helper class HttpUtils. In this section, we will implement the ClientHttpRequestInterceptor interface and register this interceptor in our application. \n+\n+Include the two classes below to your FirstService project to add this functionality:\n+\n+\n+```java\n+\n+import java.io.IOException;\n+\n+import io.grpc.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpRequest;\n+\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.stereotype.Component;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class RestTemplateHeaderModifierInterceptor implements ClientHttpRequestInterceptor {\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   private static final HttpTextFormat.Setter<HttpRequest> setter =\n+         new HttpTextFormat.Setter<HttpRequest>() {\n+            @Override\n+            public void set(HttpRequest carrier, String key, String value) {\n+               carrier.getHeaders().set(key, value);\n+            }\n+         };\n+\n+\n+   @Override\n+   public ClientHttpResponse intercept(HttpRequest request, byte[] body,\n+         ClientHttpRequestExecution execution) throws IOException {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"client_http\", \"inject\");\n+      currentSpan.addEvent(\"Request sent to SecondService\");\n+\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), request, setter);\n+\n+      ClientHttpResponse response = execution.execute(request, body);\n+\n+      return response;\n+   }\n+}\n+\n+```\n+\n+```java\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Configuration\n+public class RestClientConfig {\n+\n+   @Autowired\n+   RestTemplateHeaderModifierInterceptor restTemplateHeaderModifierInterceptor;\n+\n+   @Bean\n+   public RestTemplate restTemplate() {\n+      RestTemplate restTemplate = new RestTemplate();\n+\n+      List<ClientHttpRequestInterceptor> interceptors = restTemplate.getInterceptors();\n+      if (interceptors.isEmpty()) {\n+         interceptors = new ArrayList<>();\n+      }\n+      interceptors.add(restTemplateHeaderModifierInterceptor);\n+      restTemplate.setInterceptors(interceptors);", "originalCommit": "0b27f2c9a2ce013c6b80118d7e4ca962e720bc27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea9d7e753a851f8e56a1f2dda9467be6f7731080", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ea9d7e753a851f8e56a1f2dda9467be6f7731080", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T14:09:14Z", "type": "commit"}, {"oid": "98d5575720eaa56d69d3f637e395de8dd8225940", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/98d5575720eaa56d69d3f637e395de8dd8225940", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T14:09:27Z", "type": "commit"}, {"oid": "44c5cd2cba665425c542ee8c81364a8b7a5bfeb6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44c5cd2cba665425c542ee8c81364a8b7a5bfeb6", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T14:21:09Z", "type": "commit"}, {"oid": "10c817ebe55f67299eca2154090190a6c359c73f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/10c817ebe55f67299eca2154090190a6c359c73f", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T14:26:46Z", "type": "commit"}, {"oid": "9d5f176114a7daaef322b5e0ac82e4d5cfd14960", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9d5f176114a7daaef322b5e0ac82e4d5cfd14960", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T14:28:04Z", "type": "commit"}, {"oid": "ad81e74fdde17bda642ef58cc402ec32a579765c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad81e74fdde17bda642ef58cc402ec32a579765c", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T15:23:00Z", "type": "commit"}, {"oid": "3856341a0f32fa352a6dd9d177f3c114c3ab0551", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3856341a0f32fa352a6dd9d177f3c114c3ab0551", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T15:23:29Z", "type": "commit"}, {"oid": "9502371ebe183b78476de10fad2799566bcd55d9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9502371ebe183b78476de10fad2799566bcd55d9", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T15:23:48Z", "type": "commit"}, {"oid": "8d9441e808f62a39ccf7d2c160e698066772dda6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8d9441e808f62a39ccf7d2c160e698066772dda6", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T15:24:05Z", "type": "commit"}, {"oid": "c97c14d42c9de863c2cef5e161c362cae2869cf3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c97c14d42c9de863c2cef5e161c362cae2869cf3", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T15:24:19Z", "type": "commit"}, {"oid": "d6bfd58874cd61051e9240a89595c54712fccf16", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d6bfd58874cd61051e9240a89595c54712fccf16", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T15:26:39Z", "type": "commit"}, {"oid": "3a150cc91bb8661e5944d79a7c5f9d13a701b44f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3a150cc91bb8661e5944d79a7c5f9d13a701b44f", "message": "some edits", "committedDate": "2020-06-23T15:28:18Z", "type": "commit"}, {"oid": "fda5b248e2db2fd979096d902ed380f35e34dc6d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fda5b248e2db2fd979096d902ed380f35e34dc6d", "message": "Merge branch 'master' of https://github.com/mabdinur/opentelemetry-java-instrumentation", "committedDate": "2020-06-23T15:28:25Z", "type": "commit"}, {"oid": "253ce96da7b02f5a840acde36bbff9db1fc09dd9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/253ce96da7b02f5a840acde36bbff9db1fc09dd9", "message": "Merge branch 'master' into master", "committedDate": "2020-06-23T15:32:53Z", "type": "commit"}, {"oid": "0678c1beddb1e176d526c1b2d6ab5e893ccd193c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0678c1beddb1e176d526c1b2d6ab5e893ccd193c", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T16:32:11Z", "type": "commit"}, {"oid": "20103fe115dd1338adaa2f97bc8321342add3e93", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/20103fe115dd1338adaa2f97bc8321342add3e93", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T16:32:28Z", "type": "commit"}, {"oid": "d1ec04ac0fe67b99b57d31748167aad2ca062c8a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d1ec04ac0fe67b99b57d31748167aad2ca062c8a", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T16:33:07Z", "type": "commit"}, {"oid": "9562c85d762f9163f533bc69ec9f092324d6ef21", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9562c85d762f9163f533bc69ec9f092324d6ef21", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-23T16:38:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMDc5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r444630793", "bodyText": "also good to set span kind: .setKind(Span.Kind.SERVER)", "author": "trask", "createdAt": "2020-06-24T03:58:18Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,306 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}\n+   \n+   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+      Span parentSpan = TracingContextUtils.getSpan(context);\n+\n+      if (parentSpan.getContext().isValid()) {\n+         return  tracer.spanBuilder(request.getRequestURI()).setParent(parentSpan).startSpan();", "originalCommit": "9562c85d762f9163f533bc69ec9f092324d6ef21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMTIyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r444631222", "bodyText": "same as above: .setKind(Span.Kind.SERVER)", "author": "trask", "createdAt": "2020-06-24T03:59:51Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,306 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Interceptors\n+\n+In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Interceptor\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+import org.springframework.web.servlet.ModelAndView;\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+@Component\n+public class ControllerTraceInterceptor implements HandlerInterceptor {\n+\n+   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n+         new HttpTextFormat.Getter<HttpServletRequest>() {\n+            public String get(HttpServletRequest req, String key) {\n+               return req.getHeader(key);\n+            }\n+         };\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Override\n+   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n+         throws Exception {\n+      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+          .extract(Context.current(), request, getter);\n+      Span span = createSpanWithParent(request, context);\n+      span.setAttribute(\"handler\", \"pre\");\n+      tracer.withSpan(span);\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+         ModelAndView modelAndView) throws Exception {\n+\n+      Span currentSpan = tracer.getCurrentSpan();\n+      currentSpan.setAttribute(\"handler\", \"post\");\n+      currentSpan.end();\n+   }\n+\n+   @Override\n+   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n+         Object handler, Exception exception) throws Exception {}\n+   \n+   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+      Span parentSpan = TracingContextUtils.getSpan(context);\n+\n+      if (parentSpan.getContext().isValid()) {\n+         return  tracer.spanBuilder(request.getRequestURI()).setParent(parentSpan).startSpan();\n+      }\n+\n+      Span span = tracer.spanBuilder(request.getRequestURI()).startSpan();", "originalCommit": "9562c85d762f9163f533bc69ec9f092324d6ef21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6f8254e9e6acffc6ad5fbb6617471d13471d6f1c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6f8254e9e6acffc6ad5fbb6617471d13471d6f1c", "message": "add span kinds to server and client spans", "committedDate": "2020-06-24T15:17:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MzA2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445073063", "bodyText": "Context.current() here is going to refer to the parent span, b/c you haven't put currentSpan into scope, e.g. using tracer.withSpan(currentSpan)\nthe problem with this, is that then downstream server span will not have the correct parent", "author": "trask", "createdAt": "2020-06-24T17:58:40Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -593,16 +594,19 @@ public class RestTemplateHeaderModifierInterceptor implements ClientHttpRequestI\n    @Override\n    public ClientHttpResponse intercept(HttpRequest request, byte[] body,\n          ClientHttpRequestExecution execution) throws IOException {\n-\n-      Span currentSpan = tracer.getCurrentSpan();\n-      currentSpan.setAttribute(\"client_http\", \"inject\");\n-      currentSpan.addEvent(\"Request sent to SecondService\");\n-\n-      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), request, setter);\n-\n-      ClientHttpResponse response = execution.execute(request, body);\n-\n-      return response;\n+      \n+      String spanName = request.getMethodValue() +  \" \" + request.getURI().toString();\n+      Span currentSpan = tracer.spanBuilder(spanName).setSpanKind(Span.Kind.CLIENT).startSpan();\n+      \n+      try {\n+        OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), request, setter);", "originalCommit": "6f8254e9e6acffc6ad5fbb6617471d13471d6f1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNTQwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445305409", "bodyText": "I added tracer.withSpan(currentSpan) to the try block", "author": "mabdinur", "createdAt": "2020-06-25T04:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MzA2Mw=="}], "type": "inlineReview"}, {"oid": "2254d4ac91a11bd957111adf77d017aafe2d15e8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2254d4ac91a11bd957111adf77d017aafe2d15e8", "message": "add withspan to client interceptor", "committedDate": "2020-06-25T02:02:40Z", "type": "commit"}, {"oid": "d6da8d5489e41d4ce6f00d83b1098c164d13d0bf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d6da8d5489e41d4ce6f00d83b1098c164d13d0bf", "message": "use filters instead of interceptors in mvc controllers", "committedDate": "2020-06-25T04:47:38Z", "type": "commit"}, {"oid": "fa8f9191e698243ef4dc83cedc6f4248f708a18a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa8f9191e698243ef4dc83cedc6f4248f708a18a", "message": "use filters instead of interceptors in mvc controllers", "committedDate": "2020-06-25T04:47:51Z", "type": "commit"}, {"oid": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a3e906fbc09444ecacceb3e8d61397fb98690d67", "message": "Merge branch 'master' into master", "committedDate": "2020-06-25T04:51:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDMzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445854335", "bodyText": "need to close the scope, e.g.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                     tracer.withSpan(currentSpan);\n          \n          \n            \n                  try (Scope scope = tracer.withSpan(currentSpan)) {", "author": "trask", "createdAt": "2020-06-25T21:40:45Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,274 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Filters\n+\n+In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Filter\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+@Component\n+public class ControllerFilter implements Filter {\n+  \n+  @Autowired\n+  Tracer tracer;\n+  \n+  private final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());\n+\n+  private final HttpTextFormat.Getter<HttpServletRequest> GETTER =\n+      new HttpTextFormat.Getter<HttpServletRequest>() {\n+        public String get(HttpServletRequest req, String key) {\n+          return req.getHeader(key);\n+        }\n+      };\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    LOG.info(\"start doFilter\");\n+    \n+    HttpServletRequest req = (HttpServletRequest) request;\n+    Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+        .extract(Context.current(), req, GETTER);\n+    Span currentSpan = createSpanWithParent(req, context);\n+    try {\n+      tracer.withSpan(currentSpan);\n+      currentSpan.addEvent(\"dofilter\");\n+      chain.doFilter(req, response);\n+    }finally {\n+      LOG.info(\"end doFilter\");\n+      currentSpan.end();\n+    }\n+    \n+  }\n+  \n+  private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+    Span parentSpan = TracingContextUtils.getSpan(context);\n+    Span.Builder spanBuilder = tracer.spanBuilder(request.getRequestURI()).setSpanKind(Span.Kind.SERVER);\n+    \n+    if (parentSpan.getContext().isValid()) {\n+      return spanBuilder.setParent(parentSpan).startSpan();\n+    }\n+\n+    Span span = spanBuilder.startSpan();\n+    span.addEvent(\"Parent Span Not Found\");\n+\n+    return span;\n+  }\n+}\n+}\n+\n+```\n+\n+Now your SecondService application is complete. Create the FirstService application using the instructions below and then run your distributed service!\n+\n+### Instrumentation of Receiving Service: FirstService\n+\n+Ensure the main method in FirstServiceApplication is defined. This will be the entry point to the FirstService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Create a REST controller for FirstService. This controller will send a request to SecondService and then return the response to the client:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\t\n+   @Autowired\n+   private RestTemplate restTemplate;\n+\n+   @Autowired\n+   private HttpUtils httpUtils;\n+\n+   private static final String SECOND_SERVICE_URL = \"http://localhost:8081/time\";\n+\n+   @GetMapping\n+   public String firstTracedMethod() {\n+\n+      ResponseEntity<String> response =\n+            restTemplate.exchange(SECOND_SERVICE_URL, HttpMethod.GET, null, String.class);\n+      String secondServiceTime = response.getBody();\n+\n+      return \"Second Service says: \" + secondServiceTime;\n+\n+   }\n+}\n+```\n+\n+As seen in the setup of SecondService, implement the javax serverlet filter interface to wrap requests to the SecondServiceController in a span. In effect, we will be taking a copy of the [ControllerFilter.java](#create-controller-filter) file defined in SecondService and adding it to FirstService.\n+\n+#### Create Client Http Request Interceptor\n+\n+Next, we will configure the ClientHttpRequestInterceptor to intercept all client HTTP requests made using RestTemplate.\n+\n+To propagate the span context from FirstService to SecondService we must inject the trace parent and trace state into the outgoing request header. In section 1 this was done using the helper class HttpUtils. In this section, we will implement the ClientHttpRequestInterceptor interface and register this interceptor in our application. \n+\n+Include the two classes below to your FirstService project to add this functionality:\n+\n+\n+```java\n+\n+import java.io.IOException;\n+\n+import io.grpc.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpRequest;\n+\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.stereotype.Component;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class RestTemplateInterceptor implements ClientHttpRequestInterceptor {\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   private static final HttpTextFormat.Setter<HttpRequest> setter =\n+         new HttpTextFormat.Setter<HttpRequest>() {\n+            @Override\n+            public void set(HttpRequest carrier, String key, String value) {\n+               carrier.getHeaders().set(key, value);\n+            }\n+         };\n+\n+\n+   @Override\n+   public ClientHttpResponse intercept(HttpRequest request, byte[] body,\n+         ClientHttpRequestExecution execution) throws IOException {\n+      \n+      String spanName = request.getMethodValue() +  \" \" + request.getURI().toString();\n+      Span currentSpan = tracer.spanBuilder(spanName).setSpanKind(Span.Kind.CLIENT).startSpan();\n+      \n+      try {\n+         tracer.withSpan(currentSpan);", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDYyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445854620", "bodyText": "need to close the scope, e.g.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  tracer.withSpan(currentSpan);\n          \n          \n            \n                  try (Scope scope = tracer.withSpan(currentSpan)) {", "author": "trask", "createdAt": "2020-06-25T21:41:22Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,274 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Filters\n+\n+In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Filter\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+@Component\n+public class ControllerFilter implements Filter {\n+  \n+  @Autowired\n+  Tracer tracer;\n+  \n+  private final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());\n+\n+  private final HttpTextFormat.Getter<HttpServletRequest> GETTER =\n+      new HttpTextFormat.Getter<HttpServletRequest>() {\n+        public String get(HttpServletRequest req, String key) {\n+          return req.getHeader(key);\n+        }\n+      };\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    LOG.info(\"start doFilter\");\n+    \n+    HttpServletRequest req = (HttpServletRequest) request;\n+    Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+        .extract(Context.current(), req, GETTER);\n+    Span currentSpan = createSpanWithParent(req, context);\n+    try {\n+      tracer.withSpan(currentSpan);", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NTEzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445855133", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. \n          \n          \n            \n            In this section, we will implement the javax Servlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span.", "author": "trask", "createdAt": "2020-06-25T21:42:40Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -345,9 +345,9 @@ Run FirstService and SecondService from command line or using an IDE. The end po\n \n Congrats, we just created a distributed service with OpenTelemetry!\n \n-## Manual Instrumentation using Handlers and Interceptors\n+## Manual Instrumentation using Handlers and Filters\n \n-In this section, we will implement the Spring HandlerInerceptor interface to wrap all requests to FirstService and SecondService controllers in a span. \n+In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. ", "originalCommit": "fa8f9191e698243ef4dc83cedc6f4248f708a18a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NTg3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445855877", "bodyText": "is this extra }, or maybe indentation issue?", "author": "trask", "createdAt": "2020-06-25T21:44:26Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -395,102 +395,65 @@ public class SecondServiceController {\n }\n ```\n \n-#### Create Controller Interceptor\n+#### Create Controller Filter\n \n Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n \n The preHandle method starts a span for each request. This implementation is shown below:    \n \n ```java\n \n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.web.servlet.HandlerInterceptor;\n-import org.springframework.web.servlet.ModelAndView;\n-import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.context.propagation.HttpTextFormat;\n-import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n-import io.opentelemetry.trace.TracingContextUtils;\n-\n @Component\n-public class ControllerTraceInterceptor implements HandlerInterceptor {\n-\n-   private static final HttpTextFormat.Getter<HttpServletRequest> getter =\n-         new HttpTextFormat.Getter<HttpServletRequest>() {\n-            public String get(HttpServletRequest req, String key) {\n-               return req.getHeader(key);\n-            }\n-         };\n-\n-   @Autowired\n-   private Tracer tracer;\n-\n-   @Override\n-   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n-         throws Exception {\n-      Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n-          .extract(Context.current(), request, getter);\n-      Span span = createSpanWithParent(request, context);\n-      span.addEvent(\"controller handler pre\");\n-      tracer.withSpan(span);\n-\n-      return true;\n-   }\n+public class ControllerFilter implements Filter {\n+  \n+  @Autowired\n+  Tracer tracer;\n+  \n+  private final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());\n \n-   @Override\n-   public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n-         ModelAndView modelAndView) throws Exception {}\n+  private final HttpTextFormat.Getter<HttpServletRequest> GETTER =\n+      new HttpTextFormat.Getter<HttpServletRequest>() {\n+        public String get(HttpServletRequest req, String key) {\n+          return req.getHeader(key);\n+        }\n+      };\n \n-   @Override\n-   public void afterCompletion(HttpServletRequest request, HttpServletResponse response,\n-         Object handler, Exception exception) throws Exception {\n-     \n-      Span currentSpan = tracer.getCurrentSpan();\n-      currentSpan.addEvent(\"controller post\");\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    LOG.info(\"start doFilter\");\n+    \n+    HttpServletRequest req = (HttpServletRequest) request;\n+    Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+        .extract(Context.current(), req, GETTER);\n+    Span currentSpan = createSpanWithParent(req, context);\n+    try {\n+      tracer.withSpan(currentSpan);\n+      currentSpan.addEvent(\"dofilter\");\n+      chain.doFilter(req, response);\n+    }finally {\n+      LOG.info(\"end doFilter\");\n       currentSpan.end();\n-   }\n-   \n-   private Span createSpanWithParent(HttpServletRequest request, Context context) {\n-      Span parentSpan = TracingContextUtils.getSpan(context);\n-      Span.Builder spanBuilder = tracer.spanBuilder(request.getRequestURI()).setSpanKind(Span.Kind.SERVER);\n-      \n-      if (parentSpan.getContext().isValid()) {\n-        return spanBuilder.setParent(parentSpan).startSpan();\n-      }\n+    }\n+    \n+  }\n   \n-      Span span = spanBuilder.startSpan();\n-      span.addEvent(\"Parent Span Not Found\");\n-\n-      return span;\n+  private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+    Span parentSpan = TracingContextUtils.getSpan(context);\n+    Span.Builder spanBuilder = tracer.spanBuilder(request.getRequestURI()).setSpanKind(Span.Kind.SERVER);\n+    \n+    if (parentSpan.getContext().isValid()) {\n+      return spanBuilder.setParent(parentSpan).startSpan();\n     }\n-}\n-\n-```\n-\n-The final step is to register an instance of the ControllerTraceInterceptor:\n \n-```java\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n-import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n+    Span span = spanBuilder.startSpan();\n+    span.addEvent(\"Parent Span Not Found\");\n \n-@Component\n-public class InterceptorConfig extends WebMvcConfigurationSupport {\n-\n-   @Autowired\n-   ControllerTraceInterceptor controllerTraceInterceptor;\n-\n-   @Override\n-   public void addInterceptors(InterceptorRegistry registry) {\n-      registry.addInterceptor(controllerTraceInterceptor);\n-   }\n+    return span;\n+  }\n }\n+}\n+", "originalCommit": "fa8f9191e698243ef4dc83cedc6f4248f708a18a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyMzM0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r447023341", "bodyText": "Good catch. It's an extra bracket. I removed it", "author": "mabdinur", "createdAt": "2020-06-29T14:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NTk2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445855964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As seen in the setup of SecondService, implement the javax serverlet filter interface to wrap requests to the SecondServiceController in a span. In effect, we will be taking a copy of the [ControllerFilter.java](#create-controller-filter) file defined in SecondService and adding it to FirstService.\n          \n          \n            \n            As seen in the setup of SecondService, implement the javax servlet filter interface to wrap requests to the SecondServiceController in a span. In effect, we will be taking a copy of the [ControllerFilter.java](#create-controller-filter) file defined in SecondService and adding it to FirstService.", "author": "trask", "createdAt": "2020-06-25T21:44:38Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -548,7 +511,7 @@ public class FirstServiceController {\n }\n ```\n \n-As seen in the setup of SecondService, implement the TraceInterceptor interface to wrap requests to the SecondServiceController in a span. Then register this new handler by extending the HandlerInterceptor. In effect, we will be taking a copy of the InterceptorConfig.java and ControllerTraceInterceptor.java defined in SecondService and adding it to FirstService. These files are referenced [here](#create-controller-interceptor).\n+As seen in the setup of SecondService, implement the javax serverlet filter interface to wrap requests to the SecondServiceController in a span. In effect, we will be taking a copy of the [ControllerFilter.java](#create-controller-filter) file defined in SecondService and adding it to FirstService.", "originalCommit": "fa8f9191e698243ef4dc83cedc6f4248f708a18a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NzMyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445857329", "bodyText": "since this is example, maybe better to stick with canonical usage, e.g.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Span parentSpan = TracingContextUtils.getSpan(context);\n          \n          \n            \n                Span.Builder spanBuilder = tracer.spanBuilder(request.getRequestURI()).setSpanKind(Span.Kind.SERVER);\n          \n          \n            \n                \n          \n          \n            \n                if (parentSpan.getContext().isValid()) {\n          \n          \n            \n                  return spanBuilder.setParent(parentSpan).startSpan();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                Span span = spanBuilder.startSpan();\n          \n          \n            \n                span.addEvent(\"Parent Span Not Found\");\n          \n          \n            \n            \n          \n          \n            \n                return span;\n          \n          \n            \n                return tracer.spanBuilder(request.getRequestURI()).setSpanKind(Span.Kind.SERVER).startSpan();", "author": "trask", "createdAt": "2020-06-25T21:47:38Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,274 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Filters\n+\n+In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Filter\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+@Component\n+public class ControllerFilter implements Filter {\n+  \n+  @Autowired\n+  Tracer tracer;\n+  \n+  private final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());\n+\n+  private final HttpTextFormat.Getter<HttpServletRequest> GETTER =\n+      new HttpTextFormat.Getter<HttpServletRequest>() {\n+        public String get(HttpServletRequest req, String key) {\n+          return req.getHeader(key);\n+        }\n+      };\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    LOG.info(\"start doFilter\");\n+    \n+    HttpServletRequest req = (HttpServletRequest) request;\n+    Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+        .extract(Context.current(), req, GETTER);\n+    Span currentSpan = createSpanWithParent(req, context);\n+    try {\n+      tracer.withSpan(currentSpan);\n+      currentSpan.addEvent(\"dofilter\");\n+      chain.doFilter(req, response);\n+    }finally {\n+      LOG.info(\"end doFilter\");\n+      currentSpan.end();\n+    }\n+    \n+  }\n+  \n+  private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+    Span parentSpan = TracingContextUtils.getSpan(context);\n+    Span.Builder spanBuilder = tracer.spanBuilder(request.getRequestURI()).setSpanKind(Span.Kind.SERVER);\n+    \n+    if (parentSpan.getContext().isValid()) {\n+      return spanBuilder.setParent(parentSpan).startSpan();\n+    }\n+\n+    Span span = spanBuilder.startSpan();\n+    span.addEvent(\"Parent Span Not Found\");\n+\n+    return span;", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1ODMxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445858315", "bodyText": "and then common for static fields to be at top of class\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final HttpTextFormat.Getter<HttpServletRequest> GETTER =\n          \n          \n            \n              private static final HttpTextFormat.Getter<HttpServletRequest> GETTER =", "author": "trask", "createdAt": "2020-06-25T21:49:50Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,274 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Filters\n+\n+In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Filter\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+@Component\n+public class ControllerFilter implements Filter {\n+  \n+  @Autowired\n+  Tracer tracer;\n+  \n+  private final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());\n+\n+  private final HttpTextFormat.Getter<HttpServletRequest> GETTER =", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1ODMzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445858332", "bodyText": "and then common for static fields to be at top of class\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());\n          \n          \n            \n              private static final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());", "author": "trask", "createdAt": "2020-06-25T21:49:52Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,274 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Filters\n+\n+In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Filter\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+@Component\n+public class ControllerFilter implements Filter {\n+  \n+  @Autowired\n+  Tracer tracer;\n+  \n+  private final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1OTc1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445859758", "bodyText": "common for static fields to be at top of class", "author": "trask", "createdAt": "2020-06-25T21:53:13Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,274 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Filters\n+\n+In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Filter\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+@Component\n+public class ControllerFilter implements Filter {\n+  \n+  @Autowired\n+  Tracer tracer;\n+  \n+  private final Logger LOG = Logger.getLogger(ControllerFilter.class.getName());\n+\n+  private final HttpTextFormat.Getter<HttpServletRequest> GETTER =\n+      new HttpTextFormat.Getter<HttpServletRequest>() {\n+        public String get(HttpServletRequest req, String key) {\n+          return req.getHeader(key);\n+        }\n+      };\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    LOG.info(\"start doFilter\");\n+    \n+    HttpServletRequest req = (HttpServletRequest) request;\n+    Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+        .extract(Context.current(), req, GETTER);\n+    Span currentSpan = createSpanWithParent(req, context);\n+    try {\n+      tracer.withSpan(currentSpan);\n+      currentSpan.addEvent(\"dofilter\");\n+      chain.doFilter(req, response);\n+    }finally {\n+      LOG.info(\"end doFilter\");\n+      currentSpan.end();\n+    }\n+    \n+  }\n+  \n+  private Span createSpanWithParent(HttpServletRequest request, Context context) {\n+    Span parentSpan = TracingContextUtils.getSpan(context);\n+    Span.Builder spanBuilder = tracer.spanBuilder(request.getRequestURI()).setSpanKind(Span.Kind.SERVER);\n+    \n+    if (parentSpan.getContext().isValid()) {\n+      return spanBuilder.setParent(parentSpan).startSpan();\n+    }\n+\n+    Span span = spanBuilder.startSpan();\n+    span.addEvent(\"Parent Span Not Found\");\n+\n+    return span;\n+  }\n+}\n+}\n+\n+```\n+\n+Now your SecondService application is complete. Create the FirstService application using the instructions below and then run your distributed service!\n+\n+### Instrumentation of Receiving Service: FirstService\n+\n+Ensure the main method in FirstServiceApplication is defined. This will be the entry point to the FirstService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Create a REST controller for FirstService. This controller will send a request to SecondService and then return the response to the client:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\t\n+   @Autowired\n+   private RestTemplate restTemplate;\n+\n+   @Autowired\n+   private HttpUtils httpUtils;\n+\n+   private static final String SECOND_SERVICE_URL = \"http://localhost:8081/time\";", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mjc1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445862758", "bodyText": "i think the names \"Receiving Service\" and \"Client Service\" are not too clear\ni like the idea of trying to give them more descriptive names, instead of FirstService and SecondService though\nmaybe MainService / TimeService?\nor FrontService / TimeService ?", "author": "trask", "createdAt": "2020-06-25T22:00:18Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -153,7 +153,7 @@ Here we will create rest controllers for `FirstService` and `SecondService`.\n \n Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n \n-### FirstService\n+### Instrumentation of Receiving Service: FirstService", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNjMyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r447026322", "bodyText": "MainService and TimeService sounds good", "author": "mabdinur", "createdAt": "2020-06-29T14:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mjc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjAyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445866023", "bodyText": "common for static fields to be at top of class", "author": "trask", "createdAt": "2020-06-25T22:08:48Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -188,27 +188,29 @@ import HttpUtils;\n @RestController\n @RequestMapping(value = \"/message\")\n public class FirstServiceController {\n+   private static int requestCount = 1;\n+   \n    @Autowired\n    private Tracer tracer;\n \n    @Autowired\n-   HttpUtils httpUtils;\n+   private HttpUtils httpUtils;\n \n-   private static String secondServiceUrl = \"http://localhost:8081/time\";\n+   private static final String SECOND_SERVICE_URL = \"http://localhost:8081/time\";", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NzI2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r445867269", "bodyText": "i forget, does this get automatically picked up by Spring, do we need to define a url mapping for it?", "author": "trask", "createdAt": "2020-06-25T22:11:52Z", "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -340,6 +341,274 @@ After running Jaeger locally, navigate to the url below. Make sure to refresh th\n \n Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. \n \n-***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.secondServiceUrl. ***\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***\n \n Congrats, we just created a distributed service with OpenTelemetry!\n+\n+## Manual Instrumentation using Handlers and Filters\n+\n+In this section, we will implement the javax Serverlet Filter interface to wrap all requests to FirstService and SecondService controllers in a span. \n+\n+We will also use the RestTemplate HTTP client to send requests from FirstService to SecondService. To propagate the trace in this request we will also implement the ClientHttpRequestInterceptor interface. This implementation is only required for projects that send outbound requests. In this example it is only required for FirstService. \n+\n+### Set up FirstService and SecondService\n+\n+Using the earlier instructions [create two spring projects](#create-two-spring-projects) and add the required [dependencies and configurations](#setup-for-manual-instrumentation). \n+\n+### Instrumentation of Client Service: SecondService\n+\n+Ensure the main method in SecondServiceApplication is defined. This will be the entry point to the SecondService project. This file should be created by the Spring Boot project initializer.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+Add the REST controller below to your SecondService project. This controller will return a string when SecondServiceController.secondTracedMethod is called:\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String secondTracedMethod() {\n+      return \"It's time to get a watch\";\n+   }\n+}\n+```\n+\n+#### Create Controller Filter\n+\n+Add the class below to wrap all requests to the SecondServiceController in a span. This class will call the preHandle method before the REST controller is entered and the postHandle method after a response is created. \n+\n+The preHandle method starts a span for each request. This implementation is shown below:    \n+\n+```java\n+\n+@Component\n+public class ControllerFilter implements Filter {", "originalCommit": "a3e906fbc09444ecacceb3e8d61397fb98690d67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyMTk0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/548#discussion_r447021942", "bodyText": "It gets picked up automatically and it's applied to all REST controllers", "author": "mabdinur", "createdAt": "2020-06-29T14:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NzI2OQ=="}], "type": "inlineReview"}, {"oid": "b524f63797fad567f3e6a54373356f42865d39d6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b524f63797fad567f3e6a54373356f42865d39d6", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-26T04:24:03Z", "type": "commit"}, {"oid": "94c037c712ff4c9873ff32ddf075078f0d08d546", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/94c037c712ff4c9873ff32ddf075078f0d08d546", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-26T04:24:19Z", "type": "commit"}, {"oid": "fafc074c845f466120bd623abfa8743d7173c54c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fafc074c845f466120bd623abfa8743d7173c54c", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-26T04:24:34Z", "type": "commit"}, {"oid": "74ab5b86bb2710190abf06187fb8317cff507a93", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/74ab5b86bb2710190abf06187fb8317cff507a93", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-26T04:24:44Z", "type": "commit"}, {"oid": "1cda69693836768e491745bb99792e0758f849d8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1cda69693836768e491745bb99792e0758f849d8", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-26T04:25:31Z", "type": "commit"}, {"oid": "343a83514fcaee3d1dcf2669a954afc7d9f2924f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/343a83514fcaee3d1dcf2669a954afc7d9f2924f", "message": "changed service names and scopes of fields", "committedDate": "2020-06-29T14:55:15Z", "type": "commit"}, {"oid": "af7d8594b2fd5a2a6e025ebe70aa768523175aa8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/af7d8594b2fd5a2a6e025ebe70aa768523175aa8", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-06-29T14:56:10Z", "type": "commit"}, {"oid": "34478e89a681f14565f3e7c38542a36dbcd1b644", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/34478e89a681f14565f3e7c38542a36dbcd1b644", "message": "move static to the top", "committedDate": "2020-06-29T14:58:08Z", "type": "commit"}, {"oid": "f74aec35b8ae0faa79d777750521a8145396f581", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f74aec35b8ae0faa79d777750521a8145396f581", "message": "fixed headers", "committedDate": "2020-06-29T15:01:35Z", "type": "commit"}, {"oid": "737b6712e8ba0151725a9a37cdf23a1402970023", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/737b6712e8ba0151725a9a37cdf23a1402970023", "message": "fixed try blocks", "committedDate": "2020-06-29T16:09:23Z", "type": "commit"}, {"oid": "830e8022add45b2e0c9e1e667612e0028129093b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/830e8022add45b2e0c9e1e667612e0028129093b", "message": "rename second pass", "committedDate": "2020-06-29T21:07:18Z", "type": "commit"}]}