{"pr_number": 1384, "pr_title": "Update to latest SDK snapshot", "pr_createdAt": "2020-10-14T08:16:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384", "timeline": [{"oid": "ed94c3490986ffe6bbda7f95654e942d419b1486", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed94c3490986ffe6bbda7f95654e942d419b1486", "message": "Update to latest SDK snapshot", "committedDate": "2020-10-14T08:14:25Z", "type": "commit"}, {"oid": "2caf9ab95e82e6c98fe02c4ba10bf343a6453af0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2caf9ab95e82e6c98fe02c4ba10bf343a6453af0", "message": "Use published snapshot", "committedDate": "2020-10-15T04:00:09Z", "type": "commit"}, {"oid": "0893848642a65072a220557d90fb435ca6ab59e0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0893848642a65072a220557d90fb435ca6ab59e0", "message": "Fixes", "committedDate": "2020-10-16T06:23:40Z", "type": "commit"}, {"oid": "d4aee92914efc08d0d5d50307dd47dd79f64b8cd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4aee92914efc08d0d5d50307dd47dd79f64b8cd", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into sdk-snapshot-20201014", "committedDate": "2020-10-16T06:34:59Z", "type": "commit"}, {"oid": "44fa57a71c0455ffe2b6a165a805812d922d9ee2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44fa57a71c0455ffe2b6a165a805812d922d9ee2", "message": "Cleans", "committedDate": "2020-10-16T07:07:34Z", "type": "commit"}, {"oid": "b67952a027db38b67b50776bce7b220f90fe357d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b67952a027db38b67b50776bce7b220f90fe357d", "message": "spotless", "committedDate": "2020-10-16T07:08:27Z", "type": "commit"}, {"oid": "bc711f4bb585acf0cc634d4ad1a81096009667cb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc711f4bb585acf0cc634d4ad1a81096009667cb", "message": "Most", "committedDate": "2020-10-19T06:26:17Z", "type": "commit"}, {"oid": "2f65de9f3c5ca808e4e13103825fb943cacee677", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2f65de9f3c5ca808e4e13103825fb943cacee677", "message": "Clean", "committedDate": "2020-10-20T04:21:36Z", "type": "commit"}, {"oid": "96fa65b68770435300c966cdc26120f06a02a4e9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/96fa65b68770435300c966cdc26120f06a02a4e9", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into sdk-snapshot-20201014", "committedDate": "2020-10-21T04:46:01Z", "type": "commit"}, {"oid": "39b0a854053c7817dc78f0df332fdee3c5634571", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/39b0a854053c7817dc78f0df332fdee3c5634571", "message": "Merge", "committedDate": "2020-10-21T04:49:08Z", "type": "commit"}, {"oid": "6a048388aba735cc91f223f83f0d367181cf48fb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6a048388aba735cc91f223f83f0d367181cf48fb", "message": "Temporarily remove context interop", "committedDate": "2020-10-21T04:59:23Z", "type": "commit"}, {"oid": "52bb59a8043d4cc6a393eb3c3996fa8feeb3d94b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/52bb59a8043d4cc6a393eb3c3996fa8feeb3d94b", "message": "WIP", "committedDate": "2020-10-21T07:49:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MjQ4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r509062482", "bodyText": "@trask Not being able to get this instrumentation of a static interface method to kick in", "author": "anuraaga", "createdAt": "2020-10-21T07:50:36Z", "path": "instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/SpanInstrumentation.java", "diffHunk": "@@ -23,25 +22,25 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class DefaultSpanInstrumentation extends AbstractInstrumentation {\n+public class SpanInstrumentation extends AbstractInstrumentation {\n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return named(\"application.io.opentelemetry.trace.DefaultSpan\");\n+    return named(\"application.io.opentelemetry.trace.Span\");\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     return Collections.singletonMap(\n-        isMethod().and(isPublic()).and(isStatic()).and(named(\"create\")),\n-        DefaultSpanInstrumentation.class.getName() + \"$CreateAdvice\");\n+        isMethod().and(isPublic()).and(isStatic()).and(named(\"wrap\")),", "originalCommit": "52bb59a8043d4cc6a393eb3c3996fa8feeb3d94b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "776cf4e5ef697a3c83827583d1c703b22a145b08", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/776cf4e5ef697a3c83827583d1c703b22a145b08", "message": "Prepare for intercepting propagated span", "committedDate": "2020-10-22T06:16:32Z", "type": "commit"}, {"oid": "b8281009b9d19f871354c411f80564806678d7ce", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b8281009b9d19f871354c411f80564806678d7ce", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into sdk-snapshot-20201014", "committedDate": "2020-10-22T06:16:42Z", "type": "commit"}, {"oid": "5c518db020afc5d7739e27ac58899ae4a5cf5c64", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5c518db020afc5d7739e27ac58899ae4a5cf5c64", "message": "Bump SDK", "committedDate": "2020-10-22T06:30:55Z", "type": "commit"}, {"oid": "bbc238cfcb3fb0d53a760dbd5197ad64ff264396", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bbc238cfcb3fb0d53a760dbd5197ad64ff264396", "message": "IDE updates", "committedDate": "2020-10-22T06:43:25Z", "type": "commit"}, {"oid": "30126418693044ad9e4f3b2625fa9b3aae99780a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/30126418693044ad9e4f3b2625fa9b3aae99780a", "message": "Lots", "committedDate": "2020-10-22T07:26:50Z", "type": "commit"}, {"oid": "147235082c44772122c7445734803bbeec921e87", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/147235082c44772122c7445734803bbeec921e87", "message": "compileJava", "committedDate": "2020-10-22T07:34:40Z", "type": "commit"}, {"oid": "36886bca9a70e546b05f53ad18596f322228b3d3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/36886bca9a70e546b05f53ad18596f322228b3d3", "message": "Done?", "committedDate": "2020-10-23T14:05:16Z", "type": "commit"}, {"oid": "728fc6cddea397f4f9295d2f37db9b1a7643a7c2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/728fc6cddea397f4f9295d2f37db9b1a7643a7c2", "message": "bar", "committedDate": "2020-10-23T14:19:00Z", "type": "commit"}, {"oid": "728fc6cddea397f4f9295d2f37db9b1a7643a7c2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/728fc6cddea397f4f9295d2f37db9b1a7643a7c2", "message": "bar", "committedDate": "2020-10-23T14:19:00Z", "type": "forcePushed"}, {"oid": "345d5eb290182d924e8bff2debf43b009c5fe56b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/345d5eb290182d924e8bff2debf43b009c5fe56b", "message": "Spot", "committedDate": "2020-10-23T14:27:18Z", "type": "commit"}, {"oid": "9f01672d274bc7a9fd715a3ddebad143f5e66804", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f01672d274bc7a9fd715a3ddebad143f5e66804", "message": "drugs", "committedDate": "2020-10-23T14:44:09Z", "type": "commit"}, {"oid": "ac885914ba62789fcd33b32f1cd1413d84e7d420", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac885914ba62789fcd33b32f1cd1413d84e7d420", "message": "Groovy--", "committedDate": "2020-10-23T15:03:20Z", "type": "commit"}, {"oid": "2e76d11eb3bc53bef3c1e163220f0de1474ec7fb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e76d11eb3bc53bef3c1e163220f0de1474ec7fb", "message": "green for me", "committedDate": "2020-10-24T03:24:12Z", "type": "commit"}, {"oid": "3111863a7287ffcbf7986e26c9362949bf9c25b9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3111863a7287ffcbf7986e26c9362949bf9c25b9", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into sdk-snapshot-20201014\n\n\u0001 Conflicts:\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/DbCassandraSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/DbHbaseSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/DbMongodbSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/DbMssqlSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/DbRedisSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/DbSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/FaasHttpSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/FaasPubsubSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/GrpcClientSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/GrpcServerSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/HttpClientSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/HttpServerSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/HttpSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/IdentitySpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/MessagingConsumerSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/MessagingConsumerSynchronousSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/MessagingProducerSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/MessagingProducerSynchronousSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/MessagingSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/NetworkSpan.java\n\u0001\tinstrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/typedspan/RpcSpan.java", "committedDate": "2020-10-24T03:30:38Z", "type": "commit"}, {"oid": "98c4128cbc8a133bcf4120db4cec3cc16d9f68f1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/98c4128cbc8a133bcf4120db4cec3cc16d9f68f1", "message": "Spot", "committedDate": "2020-10-24T03:32:18Z", "type": "commit"}, {"oid": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/61842c85d8484576eefd2eb2ab512d08e1f66b18", "message": "Remove grpc import", "committedDate": "2020-10-24T03:34:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwNTQxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511305419", "bodyText": "I like named \ud83d\udc4d", "author": "trask", "createdAt": "2020-10-24T04:07:10Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/ClientDecorator.java", "diffHunk": "@@ -5,31 +5,30 @@\n \n package io.opentelemetry.instrumentation.api.decorator;\n \n-import io.grpc.Context;\n-import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Span.Kind;\n import io.opentelemetry.trace.Tracer;\n-import io.opentelemetry.trace.TracingContextUtils;\n \n @Deprecated\n public abstract class ClientDecorator extends BaseDecorator {\n \n   // Keeps track of the client span in a subtree corresponding to a client request.\n   // Visible for testing\n-  static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n-      Context.key(\"opentelemetry-trace-auto-client-span-key\");\n+  static final ContextKey<Span> CONTEXT_CLIENT_SPAN_KEY =\n+      ContextKey.named(\"opentelemetry-trace-auto-client-span-key\");", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwNzQ2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511307461", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assert io.opentelemetry.trace.Span.fromContext(Context.current()) == internal\n          \n          \n            \n                assert Span.fromContext(Context.current()) == internal", "author": "trask", "createdAt": "2020-10-24T04:11:51Z", "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/decorator/ClientDecoratorTest.groovy", "diffHunk": "@@ -65,16 +64,16 @@ class ClientDecoratorTest extends BaseDecoratorTest {\n   def \"test getOrCreateSpan internal after client span\"() {\n     setup:\n     def client = ClientDecorator.getOrCreateSpan(\"existing\", TRACER)\n-    def scope = ContextUtils.withScopedContext(ClientDecorator.currentContextWith(client))\n+    def scope = ClientDecorator.currentContextWith(client).makeCurrent()\n \n     when:\n     def internal = TRACER.spanBuilder(\"internal\").setSpanKind(Span.Kind.INTERNAL).startSpan()\n     def scope2 = TracingContextUtils.currentContextWith(internal)\n \n     then:\n-    assert internal.getContext().isValid()\n-    assert ClientDecorator.CONTEXT_CLIENT_SPAN_KEY.get(Context.current()) == client\n-    assert TracingContextUtils.getSpan(Context.current()) == internal\n+    assert internal.getSpanContext().isValid()\n+    assert Context.current().get(ClientDecorator.CONTEXT_CLIENT_SPAN_KEY) == client\n+    assert io.opentelemetry.trace.Span.fromContext(Context.current()) == internal", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwODE0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511308144", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assert io.opentelemetry.trace.Span.fromContext(context) == span\n          \n          \n            \n                assert Span.fromContext(context) == span", "author": "trask", "createdAt": "2020-10-24T04:13:29Z", "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/decorator/ClientDecoratorTest.groovy", "diffHunk": "@@ -89,8 +88,8 @@ class ClientDecoratorTest extends BaseDecoratorTest {\n     def context = ClientDecorator.currentContextWith(span)\n \n     then:\n-    assert ClientDecorator.CONTEXT_CLIENT_SPAN_KEY.get(context) == span\n-    assert TracingContextUtils.getSpan(context) == span\n+    assert context.get(ClientDecorator.CONTEXT_CLIENT_SPAN_KEY) == span\n+    assert io.opentelemetry.trace.Span.fromContext(context) == span", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxMDY3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511310677", "bodyText": "I'm also ok with dropping Scala 2.11 support (now or in future), it looks like the last 2.11 maintenance release was 3 years ago\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              val TRACER: Tracer = Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")\n          \n          \n            \n              // Java8Bridge is needed in order to support Scala 2.11 which targets Java 6 bytecode\n          \n          \n            \n              val TRACER: Tracer = Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")", "author": "trask", "createdAt": "2020-10-24T04:18:58Z", "path": "instrumentation/akka-context-propagation-2.5/src/test/scala/AkkaActors.scala", "diffHunk": "@@ -7,13 +7,15 @@ import akka.actor.{Actor, ActorLogging, ActorRef, ActorSystem, Props}\n import akka.pattern.ask\n import akka.util.Timeout\n import io.opentelemetry.OpenTelemetry\n+import io.opentelemetry.context.Context\n+import io.opentelemetry.javaagent.instrumentation.api.Java8Bridge\n import io.opentelemetry.trace.Tracer\n \n import scala.concurrent.duration._\n \n // ! == send-message\n object AkkaActors {\n-  val TRACER: Tracer = OpenTelemetry.getTracer(\"io.opentelemetry.auto\")\n+  val TRACER: Tracer = Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxMzE3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511313179", "bodyText": "i like the new api, that this can be chained, e.g. (no need to change here, just appreciating the new API)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Context context = Context.current().with(span);\n          \n          \n            \n                context = context.with(CONTEXT_CLIENT_SPAN_KEY, span);\n          \n          \n            \n                return context.makeCurrent();\n          \n          \n            \n                return Context.current().with(span).with(CONTEXT_CLIENT_SPAN_KEY, span).makeCurrent();", "author": "trask", "createdAt": "2020-10-24T04:24:35Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/javaagent/instrumentation/awssdk/v1_11/AwsSdkClientTracer.java", "diffHunk": "@@ -68,9 +65,9 @@ public Span startSpan(Request<?> request, RequestMeta requestMeta) {\n    */\n   @Override\n   public Scope startScope(Span span, Request<?> request) {\n-    Context context = withSpan(span, Context.current());\n-    context = context.withValue(CONTEXT_CLIENT_SPAN_KEY, span);\n-    return withScopedContext(context);\n+    Context context = Context.current().with(span);\n+    context = context.with(CONTEXT_CLIENT_SPAN_KEY, span);\n+    return context.makeCurrent();", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxMzU1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511313554", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                !io.opentelemetry.trace.Span.current().getSpanContext().isValid()\n          \n          \n            \n                !Span.current().getSpanContext().isValid()", "author": "trask", "createdAt": "2020-10-24T04:25:19Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/test_before_1_11_106/groovy/AWS0ClientTest.groovy", "diffHunk": "@@ -199,7 +200,7 @@ class AWS0ClientTest extends AgentTestRunner {\n     client.getObject(\"someBucket\", \"someKey\")\n \n     then:\n-    !TEST_TRACER.getCurrentSpan().getContext().isValid()\n+    !io.opentelemetry.trace.Span.current().getSpanContext().isValid()", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxNTkxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511315914", "bodyText": "a few unneeded fully qualified names in this class (intellij groovy refactoring? \ud83d\ude22)", "author": "trask", "createdAt": "2020-10-24T04:30:07Z", "path": "instrumentation/grpc-1.5/testing/src/main/groovy/io/opentelemetry/instrumentation/grpc/v1_5/AbstractGrpcTest.groovy", "diffHunk": "@@ -312,7 +311,7 @@ abstract class AbstractGrpcTest extends InstrumentationSpecification {\n           responseObserver.onError(new AssertionError((Object) \"context not preserved\"))\n           return\n         }\n-        if (!TracingContextUtils.getSpan(Context.current()).getContext().isValid()) {\n+        if (!io.opentelemetry.trace.Span.fromContext(io.opentelemetry.context.Context.current()).getSpanContext().isValid()) {", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0MDg4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511540889", "bodyText": "Thanks for finding them - yeah Groovy refactoring is painful \ud83d\ude3f  Particularly amazing is using the tooltip to replace qualified import only replaces one locations not all \ud83d\ude2e", "author": "anuraaga", "createdAt": "2020-10-25T03:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxNTkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxODE1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511318159", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  def parentSpan = io.opentelemetry.trace.Span.current()\n          \n          \n            \n                  def parentSpan = Span.current()", "author": "trask", "createdAt": "2020-10-24T04:34:23Z", "path": "instrumentation/http-url-connection/src/test/groovy/HttpUrlConnectionTest.groovy", "diffHunk": "@@ -28,9 +28,9 @@ class HttpUrlConnectionTest extends HttpClientTest {\n       connection.setRequestProperty(\"Connection\", \"close\")\n       connection.useCaches = true\n       connection.connectTimeout = CONNECT_TIMEOUT_MS\n-      def parentSpan = TEST_TRACER.getCurrentSpan()\n+      def parentSpan = io.opentelemetry.trace.Span.current()", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxODc1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511318754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assert io.opentelemetry.trace.Span.current() == parentSpan\n          \n          \n            \n                  assert Span.current() == parentSpan", "author": "trask", "createdAt": "2020-10-24T04:35:36Z", "path": "instrumentation/http-url-connection/src/test/groovy/HttpUrlConnectionTest.groovy", "diffHunk": "@@ -28,9 +28,9 @@ class HttpUrlConnectionTest extends HttpClientTest {\n       connection.setRequestProperty(\"Connection\", \"close\")\n       connection.useCaches = true\n       connection.connectTimeout = CONNECT_TIMEOUT_MS\n-      def parentSpan = TEST_TRACER.getCurrentSpan()\n+      def parentSpan = io.opentelemetry.trace.Span.current()\n       def stream = connection.inputStream\n-      assert TEST_TRACER.getCurrentSpan() == parentSpan\n+      assert io.opentelemetry.trace.Span.current() == parentSpan", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxODgyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511318824", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assert io.opentelemetry.trace.Span.current() != null\n          \n          \n            \n                  assert Span.current() != null", "author": "trask", "createdAt": "2020-10-24T04:35:51Z", "path": "instrumentation/http-url-connection/src/test/groovy/UrlConnectionTest.groovy", "diffHunk": "@@ -19,7 +19,7 @@ class UrlConnectionTest extends AgentTestRunner {\n       URLConnection connection = url.openConnection()\n       connection.setConnectTimeout(10000)\n       connection.setReadTimeout(10000)\n-      assert TEST_TRACER.getCurrentSpan() != null\n+      assert io.opentelemetry.trace.Span.current() != null", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxODkwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511318904", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  def parentSpan = io.opentelemetry.trace.Span.current()\n          \n          \n            \n                  def parentSpan = Span.current()", "author": "trask", "createdAt": "2020-10-24T04:36:02Z", "path": "instrumentation/http-url-connection/src/test/groovy/HttpUrlConnectionUseCachesFalseTest.groovy", "diffHunk": "@@ -18,9 +18,9 @@ class HttpUrlConnectionUseCachesFalseTest extends HttpClientTest {\n       connection.setRequestProperty(\"Connection\", \"close\")\n       connection.useCaches = false\n       connection.connectTimeout = CONNECT_TIMEOUT_MS\n-      def parentSpan = TEST_TRACER.getCurrentSpan()\n+      def parentSpan = io.opentelemetry.trace.Span.current()", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxODk2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511318963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assert io.opentelemetry.trace.Span.current() == parentSpan\n          \n          \n            \n                  assert Span.current() == parentSpan", "author": "trask", "createdAt": "2020-10-24T04:36:12Z", "path": "instrumentation/http-url-connection/src/test/groovy/HttpUrlConnectionUseCachesFalseTest.groovy", "diffHunk": "@@ -18,9 +18,9 @@ class HttpUrlConnectionUseCachesFalseTest extends HttpClientTest {\n       connection.setRequestProperty(\"Connection\", \"close\")\n       connection.useCaches = false\n       connection.connectTimeout = CONNECT_TIMEOUT_MS\n-      def parentSpan = TEST_TRACER.getCurrentSpan()\n+      def parentSpan = io.opentelemetry.trace.Span.current()\n       def stream = connection.inputStream\n-      assert TEST_TRACER.getCurrentSpan() == parentSpan\n+      assert io.opentelemetry.trace.Span.current() == parentSpan", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxOTgxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511319814", "bodyText": "does Kotlin also compile to Java 6/7 bytecode?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              val tracer: Tracer = Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")\n          \n          \n            \n              // Java8Bridge is needed in order to support Kotlin <version> which targets Java <version> bytecode\n          \n          \n            \n              val tracer: Tracer = Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")", "author": "trask", "createdAt": "2020-10-24T04:46:44Z", "path": "instrumentation/kotlin-coroutines/src/test/kotlin/KotlinCoroutineTests.kt", "diffHunk": "@@ -26,7 +26,7 @@ import kotlinx.coroutines.withTimeout\n import kotlinx.coroutines.yield\n \n class KotlinCoroutineTests(private val dispatcher: CoroutineDispatcher) {\n-  val tracer: Tracer = OpenTelemetry.getTracer(\"io.opentelemetry.auto\")\n+  val tracer: Tracer = Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0MTA3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511541075", "bodyText": "Yeah Kotlin by default is Java 6 https://kotlinlang.org/docs/reference/faq.html#which-versions-of-jvm-does-kotlin-target", "author": "anuraaga", "createdAt": "2020-10-25T03:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxOTgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxOTk1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511319952", "bodyText": "just checking that this rename was intentional?", "author": "trask", "createdAt": "2020-10-24T04:49:10Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/javaagent/instrumentation/netty/v3_8/ChannelTraceContext.java", "diffHunk": "@@ -49,7 +49,7 @@ public void setClientParentContext(Context clientParentContext) {\n     this.clientParentContext = clientParentContext;\n   }\n \n-  public Context getContext() {\n+  public Context getSpanContext() {", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0MTA5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511541094", "bodyText": "\ud83d\ude31", "author": "anuraaga", "createdAt": "2020-10-25T03:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMxOTk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDM5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511320399", "bodyText": "oh this is clever \ud83d\udc4d", "author": "trask", "createdAt": "2020-10-24T04:54:41Z", "path": "instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/ContextInstrumentation.java", "diffHunk": "@@ -25,35 +25,46 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class GrpcContextInstrumentation extends AbstractInstrumentation {\n+public class ContextInstrumentation extends AbstractInstrumentation {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return named(\"application.io.grpc.Context\");\n+    return named(\"application.io.opentelemetry.context.Context\");\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n     transformers.put(\n         isMethod().and(isPublic()).and(isStatic()).and(named(\"current\")).and(takesArguments(0)),\n-        GrpcContextInstrumentation.class.getName() + \"$CurrentAdvice\");\n+        ContextInstrumentation.class.getName() + \"$CurrentAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"makeCurrent\")).and(takesArguments(0)),\n+        ContextInstrumentation.class.getName() + \"$MakeCurrentAdvice\");\n     return transformers;\n   }\n \n   public static class CurrentAdvice {\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(@Advice.Return Context applicationContext) {\n-      ContextStore<Context, io.grpc.Context> contextStore =\n-          InstrumentationContext.get(Context.class, io.grpc.Context.class);\n-      contextStore.put(applicationContext, io.grpc.Context.current());\n+      ContextStore<Context, io.opentelemetry.context.Context> contextStore =\n+          InstrumentationContext.get(Context.class, io.opentelemetry.context.Context.class);\n+      contextStore.put(applicationContext, io.opentelemetry.context.Context.current());\n     }\n+  }\n \n-    // this is to make muzzle think we need ContextUtils to make sure we do not apply this\n-    // instrumentation when ContextUtils would not work\n-    public static Object muzzleCheck() {\n-      return ContextUtils.class;\n+  public static class MakeCurrentAdvice {\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void methodExit(\n+        @Advice.This Context applicationContext,\n+        @Advice.Return(readOnly = false) Scope applicationScope) {\n+      ContextStore<Context, io.opentelemetry.context.Context> contextStore =\n+          InstrumentationContext.get(Context.class, io.opentelemetry.context.Context.class);\n+      io.opentelemetry.context.Scope agentScope =\n+          contextStore.get(applicationContext).makeCurrent();\n+      applicationScope = agentScope::close;", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDQ5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511320498", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-10-24T04:55:57Z", "path": "instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/SpanInstrumentation.java", "diffHunk": "@@ -23,25 +22,33 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class DefaultSpanInstrumentation extends AbstractInstrumentation {\n+public class SpanInstrumentation extends AbstractInstrumentation {\n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return named(\"application.io.opentelemetry.trace.DefaultSpan\");\n+    return named(\"application.io.opentelemetry.trace.PropagatedSpan\");\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     return Collections.singletonMap(\n-        isMethod().and(isPublic()).and(isStatic()).and(named(\"create\")),\n-        DefaultSpanInstrumentation.class.getName() + \"$CreateAdvice\");\n+        isMethod().and(isStatic()).and(named(\"create\")),\n+        SpanInstrumentation.class.getName() + \"$CreateAdvice\");\n   }\n \n   public static class CreateAdvice {\n-    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n-    public static void methodExit(@Advice.Return(readOnly = false) Span applicationSpan) {\n+    // We replace the return value completely so don't need to call the method.", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDU0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511320541", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          io.opentelemetry.trace.Span.wrap(Bridging.toAgent(applicationSpanContext)));\n          \n          \n            \n                          Span.wrap(Bridging.toAgent(applicationSpanContext)));", "author": "trask", "createdAt": "2020-10-24T04:56:29Z", "path": "instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/SpanInstrumentation.java", "diffHunk": "@@ -23,25 +22,33 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class DefaultSpanInstrumentation extends AbstractInstrumentation {\n+public class SpanInstrumentation extends AbstractInstrumentation {\n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return named(\"application.io.opentelemetry.trace.DefaultSpan\");\n+    return named(\"application.io.opentelemetry.trace.PropagatedSpan\");\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     return Collections.singletonMap(\n-        isMethod().and(isPublic()).and(isStatic()).and(named(\"create\")),\n-        DefaultSpanInstrumentation.class.getName() + \"$CreateAdvice\");\n+        isMethod().and(isStatic()).and(named(\"create\")),\n+        SpanInstrumentation.class.getName() + \"$CreateAdvice\");\n   }\n \n   public static class CreateAdvice {\n-    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n-    public static void methodExit(@Advice.Return(readOnly = false) Span applicationSpan) {\n+    // We replace the return value completely so don't need to call the method.\n+    @Advice.OnMethodEnter(skipOn = Advice.OnDefaultValue.class)\n+    public static boolean methodEnter() {\n+      return false;\n+    }\n+\n+    @Advice.OnMethodExit\n+    public static void methodExit(\n+        @Advice.Argument(0) SpanContext applicationSpanContext,\n+        @Advice.Return(readOnly = false) Span applicationSpan) {\n       applicationSpan =\n           Bridging.toApplication(\n-              DefaultSpan.create(Bridging.toAgent(applicationSpan.getContext())));\n+              io.opentelemetry.trace.Span.wrap(Bridging.toAgent(applicationSpanContext)));", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0MTE1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511541152", "bodyText": "This isn't groovy :) think this is correct, we always import \"application\" types", "author": "anuraaga", "createdAt": "2020-10-25T03:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0MTQxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511541416", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-10-25T03:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDYzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511320637", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Span.Builder setParent(application.io.opentelemetry.context.Context applicationContext) {\n          \n          \n            \n                public Span.Builder setParent(Context applicationContext) {", "author": "trask", "createdAt": "2020-10-24T04:58:03Z", "path": "instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/trace/ApplicationSpan.java", "diffHunk": "@@ -137,17 +137,17 @@ public boolean equals(Object other) {\n     private static final Logger log = LoggerFactory.getLogger(Builder.class);\n \n     private final io.opentelemetry.trace.Span.Builder agentBuilder;\n-    private final ContextStore<Context, io.grpc.Context> contextStore;\n+    private final ContextStore<Context, io.opentelemetry.context.Context> contextStore;\n \n     Builder(\n         io.opentelemetry.trace.Span.Builder agentBuilder,\n-        ContextStore<Context, io.grpc.Context> contextStore) {\n+        ContextStore<Context, io.opentelemetry.context.Context> contextStore) {\n       this.agentBuilder = agentBuilder;\n       this.contextStore = contextStore;\n     }\n \n     @Override\n-    public Span.Builder setParent(Context applicationContext) {\n+    public Span.Builder setParent(application.io.opentelemetry.context.Context applicationContext) {", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMDkwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511320905", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SpanContext spanContext = io.opentelemetry.trace.Span.fromContext(context).getSpanContext();\n          \n          \n            \n                    SpanContext spanContext = Span.fromContext(context).getSpanContext();", "author": "trask", "createdAt": "2020-10-24T05:01:50Z", "path": "instrumentation/rmi/src/main/java/io/opentelemetry/javaagent/instrumentation/rmi/context/server/ContextDispatcher.java", "diffHunk": "@@ -51,7 +50,7 @@ public void dispatch(Remote obj, RemoteCall call) throws IOException {\n       ContextPayload payload = ContextPayload.read(in);\n       if (payload != null) {\n         Context context = extract(payload, GETTER);\n-        SpanContext spanContext = getSpan(context).getContext();\n+        SpanContext spanContext = io.opentelemetry.trace.Span.fromContext(context).getSpanContext();", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTExNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511321114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")\n          \n          \n            \n                // Java8Bridge is needed in order to support Scala 2.11 which targets Java 6 bytecode\n          \n          \n            \n                Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")", "author": "trask", "createdAt": "2020-10-24T05:04:43Z", "path": "instrumentation/scala-concurrent/src/slickTest/scala/SlickUtils.scala", "diffHunk": "@@ -12,7 +13,7 @@ import scala.concurrent.{Await, Future}\n \n class SlickUtils {\n   val TRACER: Tracer =\n-    OpenTelemetry.getTracerProvider.get(\"io.opentelemetry.auto\")\n+    Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTE4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511321187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")\n          \n          \n            \n                // Java8Bridge is needed in order to support Scala 2.11 which targets Java 6 bytecode\n          \n          \n            \n                Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")", "author": "trask", "createdAt": "2020-10-24T05:05:19Z", "path": "instrumentation/scala-concurrent/src/test/scala/ScalaConcurrentTests.scala", "diffHunk": "@@ -14,14 +15,15 @@ import scala.concurrent.{Await, Future, Promise}\n \n class ScalaConcurrentTests {\n   val TRACER: Tracer =\n-    OpenTelemetry.getTracerProvider.get(\"io.opentelemetry.auto\")\n+    Java8Bridge.getGlobalTracer(\"io.opentelemetry.auto\")", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMTcxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511321712", "bodyText": "too verbose?\nthough I think verbosity is ok for something confusing like this\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class Java8Bridge {\n          \n          \n            \n            public final class Java8BytecodeBridge {", "author": "trask", "createdAt": "2020-10-24T05:12:02Z", "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/Java8Bridge.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * A helper for accessing methods that rely on Java 8 bytecode such as static interface methods. In\n+ * instrumentation, we may need to call these methods in code that is inlined into an instrumented\n+ * class, however many times the instrumented class has been compiled to a previous version of\n+ * bytecode and we cannot inline Java 8 method calls.\n+ */\n+public final class Java8Bridge {", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMjExMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511322111", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * bytecode and we cannot inline Java 8 method calls.\n          \n          \n            \n             * bytecode and so we cannot inline calls to static interface methods, as those were not supported prior to Java 8\n          \n          \n            \n             * and will lead to a class verification error.", "author": "trask", "createdAt": "2020-10-24T05:16:44Z", "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/Java8Bridge.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * A helper for accessing methods that rely on Java 8 bytecode such as static interface methods. In\n+ * instrumentation, we may need to call these methods in code that is inlined into an instrumented\n+ * class, however many times the instrumented class has been compiled to a previous version of\n+ * bytecode and we cannot inline Java 8 method calls.", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyMjE0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1384#discussion_r511322149", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A helper for accessing methods that rely on Java 8 bytecode such as static interface methods. In\n          \n          \n            \n             * A helper for accessing methods that rely on new Java 8 bytecode features such as calling a static interface method. In", "author": "trask", "createdAt": "2020-10-24T05:17:21Z", "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/Java8Bridge.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * A helper for accessing methods that rely on Java 8 bytecode such as static interface methods. In", "originalCommit": "61842c85d8484576eefd2eb2ab512d08e1f66b18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f3a6227fd1d076907babcad475cdc6c11c847897", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f3a6227fd1d076907babcad475cdc6c11c847897", "message": "Scrub", "committedDate": "2020-10-25T03:25:39Z", "type": "commit"}]}