{"pr_number": 75, "pr_title": "Refactored servlet instrumentation and dependents", "pr_createdAt": "2020-01-21T18:17:51Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75", "timeline": [{"oid": "4487df9afb16ae10e69e5e6aef6fecd2bcbe356c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4487df9afb16ae10e69e5e6aef6fecd2bcbe356c", "message": "Refactored servlet-2", "committedDate": "2020-01-17T16:32:57Z", "type": "commit"}, {"oid": "85148df050ad17e83dbaff079bea50742c492710", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/85148df050ad17e83dbaff079bea50742c492710", "message": "Servlet instrumentation WIP", "committedDate": "2020-01-17T21:06:56Z", "type": "commit"}, {"oid": "1033ec3e6650b9fa5d2004237cdc7c569b3b5d08", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1033ec3e6650b9fa5d2004237cdc7c569b3b5d08", "message": "Formatting", "committedDate": "2020-01-18T03:31:13Z", "type": "commit"}, {"oid": "e40f805dd99410a49b7ec544008e3a6a49bd02c3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e40f805dd99410a49b7ec544008e3a6a49bd02c3", "message": "Finished refactoring of spring-webmvc", "committedDate": "2020-01-18T03:59:01Z", "type": "commit"}, {"oid": "198c763b22d6bb44dc34dc668e9017923a19a454", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/198c763b22d6bb44dc34dc668e9017923a19a454", "message": "Formatting", "committedDate": "2020-01-18T03:59:45Z", "type": "commit"}, {"oid": "33a6f03bfda8c6e379fdae5c553f58103d3c94d7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/33a6f03bfda8c6e379fdae5c553f58103d3c94d7", "message": "Refactored reactor-core", "committedDate": "2020-01-18T16:31:41Z", "type": "commit"}, {"oid": "df6cac5d72a2c70b2c834e24f954fa4707877374", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df6cac5d72a2c70b2c834e24f954fa4707877374", "message": "Refactored spring-webflux", "committedDate": "2020-01-18T17:35:25Z", "type": "commit"}, {"oid": "c656c9febf733efff40dcc0b93eaf9889e34abe2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c656c9febf733efff40dcc0b93eaf9889e34abe2", "message": "Merge and cleaned up servlet instrumentation", "committedDate": "2020-01-20T13:37:57Z", "type": "commit"}, {"oid": "47b00a4411ffdb520631756f32465edf419d383c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/47b00a4411ffdb520631756f32465edf419d383c", "message": "Added merged files", "committedDate": "2020-01-20T15:13:31Z", "type": "commit"}, {"oid": "092d623496e9a486de361c95c7b37ac585b5e067", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/092d623496e9a486de361c95c7b37ac585b5e067", "message": "Merge remote-tracking branch 'upstream/master' into prydin-instr-refactor-3", "committedDate": "2020-01-20T15:13:53Z", "type": "commit"}, {"oid": "c01deb0fcd13bf06a1d74b95825077f9511e761e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c01deb0fcd13bf06a1d74b95825077f9511e761e", "message": "Fixed agent_tooling testing to work with refactored code", "committedDate": "2020-01-21T15:48:12Z", "type": "commit"}, {"oid": "5db5cd812872f21ddda17afbe767638aa319982c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5db5cd812872f21ddda17afbe767638aa319982c", "message": "Removed some debug printlns", "committedDate": "2020-01-21T18:12:20Z", "type": "commit"}, {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "message": "Added helperClasses to reactor-core instrumentation", "committedDate": "2020-01-21T19:24:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzOTk4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369239983", "bodyText": "Can you check your Intellij formatting settings?", "author": "trask", "createdAt": "2020-01-21T20:59:54Z", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoInstrumentation.java", "diffHunk": "@@ -10,13 +18,6 @@\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n-import com.google.auto.service.AutoService;\n-import io.opentelemetry.auto.tooling.Instrumenter;\n-import java.util.Map;\n-import net.bytebuddy.description.method.MethodDescription;\n-import net.bytebuddy.description.type.TypeDescription;\n-import net.bytebuddy.matcher.ElementMatcher;", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MDYwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369240605", "bodyText": "Can you check your Intellij formatting settings?", "author": "trask", "createdAt": "2020-01-21T21:01:23Z", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "diffHunk": "@@ -1,12 +1,12 @@\n package io.opentelemetry.auto.instrumentation.reactor.core;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n+import io.opentelemetry.auto.instrumentation.api.SpanScopePair;\n+import io.opentelemetry.trace.Span;\n import net.bytebuddy.asm.Advice;\n import reactor.core.CoreSubscriber;\n \n+import static io.opentelemetry.auto.instrumentation.reactor.core.ReactorCoreDecorator.TRACER;", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MTg5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369241897", "bodyText": "getScope() is never null here", "author": "trask", "createdAt": "2020-01-21T21:04:17Z", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "diffHunk": "@@ -18,26 +18,26 @@\n public class FluxAndMonoSubscribeAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope methodEnter(\n+  public static SpanScopePair methodEnter(\n       @Advice.Argument(0) final CoreSubscriber subscriber, @Advice.This final Object thiz) {\n-    final AgentSpan span =\n+    final Span span =\n         subscriber\n             .currentContext()\n             .getOrDefault(ReactorCoreAdviceUtils.PUBLISHER_CONTEXT_KEY, null);\n     if (span != null) {\n-      return activateSpan(span, false);\n+      return new SpanScopePair(span, TRACER.withSpan(span));\n     }\n     return null;\n   }\n \n   @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n   public static void methodExit(\n-      @Advice.Enter final AgentScope scope, @Advice.Thrown final Throwable throwable) {\n+      @Advice.Enter final SpanScopePair scope, @Advice.Thrown final Throwable throwable) {\n     if (throwable != null) {\n-      ReactorCoreAdviceUtils.finishSpanIfPresent(scope.span(), throwable);\n+      ReactorCoreAdviceUtils.finishSpanIfPresent(scope.getSpan(), throwable);\n     }\n-    if (scope != null) {\n-      scope.close();\n+    if (scope != null && scope.getScope() != null) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MjE0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369242148", "bodyText": "Can you check your Intellij formatting settings?", "author": "trask", "createdAt": "2020-01-21T21:04:49Z", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreAdviceUtils.java", "diffHunk": "@@ -12,18 +10,23 @@\n import reactor.core.publisher.Mono;\n import reactor.util.context.Context;\n \n+import java.util.function.Function;\n+\n+import static io.opentelemetry.auto.instrumentation.reactor.core.ReactorCoreDecorator.DECORATE;\n+import static reactor.core.publisher.Operators.lift;", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NTExMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369245110", "bodyText": "Not needed with above change", "author": "trask", "createdAt": "2020-01-21T21:11:46Z", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreDecorator.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.opentelemetry.auto.instrumentation.reactor.core;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.api.SpanTypes;\n+import io.opentelemetry.auto.decorator.BaseDecorator;\n+import io.opentelemetry.trace.Tracer;\n+\n+public class ReactorCoreDecorator extends BaseDecorator {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzNDg5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369534896", "bodyText": "The ReactorCoreDecoratorended up being needed anyway, since other parts of the code were referring to the Tracer and putting it in the decorator avoids muzzling problems.", "author": "prydin", "createdAt": "2020-01-22T12:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NTI3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369245277", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DECORATE.addThrowable(span, throwable);\n          \n          \n            \n                    BaseDecorator.addThrowable(span, throwable);\n          \n      \n    \n    \n  \n\nand then decorator is not needed", "author": "trask", "createdAt": "2020-01-21T21:12:12Z", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreAdviceUtils.java", "diffHunk": "@@ -39,16 +42,16 @@\n   }\n \n   public static void finishSpanIfPresent(final Context context, final Throwable throwable) {\n-    finishSpanIfPresent(context.getOrDefault(PUBLISHER_CONTEXT_KEY, (AgentSpan) null), throwable);\n+    finishSpanIfPresent(context.getOrDefault(PUBLISHER_CONTEXT_KEY, (Span) null), throwable);\n   }\n \n-  public static void finishSpanIfPresent(final AgentSpan span, final Throwable throwable) {\n+  public static void finishSpanIfPresent(final Span span, final Throwable throwable) {\n     if (span != null) {\n       if (throwable != null) {\n-        span.setError(true);\n-        span.addThrowable(throwable);\n+        span.setStatus(Status.UNKNOWN);\n+        DECORATE.addThrowable(span, throwable);", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NjMxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369246314", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final boolean hasActiveTrace = current != null && current.getContext().isValid();\n          \n          \n            \n                final boolean hasActiveTrace = current.getContext().isValid();\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "author": "trask", "createdAt": "2020-01-21T21:14:46Z", "path": "java-agent/instrumentation/servlet/request-2/src/main/java/io/opentelemetry/auto/instrumentation/servlet2/Servlet2Advice.java", "diffHunk": "@@ -24,13 +23,14 @@\n public class Servlet2Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n+  public static SpanScopePair onEnter(\n       @Advice.This final Object servlet,\n       @Advice.Argument(0) final ServletRequest request,\n       @Advice.Argument(value = 1, readOnly = false, typing = Assigner.Typing.DYNAMIC)\n           ServletResponse response) {\n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTg5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369741895", "bodyText": "\u2b06\ufe0f", "author": "trask", "createdAt": "2020-01-22T18:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NjMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NzQ1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369247458", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  System.out.println(\"---------------------- Span attr: \" + spanAttr);", "author": "trask", "createdAt": "2020-01-21T21:17:21Z", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "diffHunk": "@@ -65,13 +70,18 @@ public static boolean enter(\n \n       final ServletRequest request = context.getRequest();\n       final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof AgentSpan) {\n+      System.out.println(\"---------------------- Span attr: \" + spanAttr);", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NzU4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369247584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.out.println(\"------------------- Request: \" + request);", "author": "trask", "createdAt": "2020-01-21T21:17:39Z", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "diffHunk": "@@ -65,13 +70,18 @@ public static boolean enter(\n \n       final ServletRequest request = context.getRequest();\n       final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof AgentSpan) {\n+      System.out.println(\"---------------------- Span attr: \" + spanAttr);\n+      if (spanAttr instanceof Span) {\n         request.removeAttribute(SPAN_ATTRIBUTE);\n-        final AgentSpan span = (AgentSpan) spanAttr;\n+        final Span span = (Span) spanAttr;\n         // Override propagation headers by injecting attributes from the current span\n         // into the new request\n+        System.out.println(\"------------------- Request: \" + request);", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NzY0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369247648", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      System.out.println(\"------------ Injecting attributes\");", "author": "trask", "createdAt": "2020-01-21T21:17:48Z", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "diffHunk": "@@ -65,13 +70,18 @@ public static boolean enter(\n \n       final ServletRequest request = context.getRequest();\n       final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof AgentSpan) {\n+      System.out.println(\"---------------------- Span attr: \" + spanAttr);\n+      if (spanAttr instanceof Span) {\n         request.removeAttribute(SPAN_ATTRIBUTE);\n-        final AgentSpan span = (AgentSpan) spanAttr;\n+        final Span span = (Span) spanAttr;\n         // Override propagation headers by injecting attributes from the current span\n         // into the new request\n+        System.out.println(\"------------------- Request: \" + request);\n         if (request instanceof HttpServletRequest) {\n-          propagate().inject(span, (HttpServletRequest) request, SETTER);\n+          Servlet3Decorator.TRACER\n+              .getHttpTextFormat()\n+              .inject(span.getContext(), (HttpServletRequest) request, SETTER);\n+          System.out.println(\"------------ Injecting attributes\");", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0ODM3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369248378", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final boolean hasActiveTrace = current != null && current.getContext().isValid();\n          \n          \n            \n                final boolean hasActiveTrace = current.getContext().isValid();\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "author": "trask", "createdAt": "2020-01-21T21:19:28Z", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "diffHunk": "@@ -24,52 +22,54 @@\n public class Servlet3Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n-      @Advice.This final Object servlet,\n-      @Advice.Argument(0) final ServletRequest request,\n-      @Advice.Argument(1) final ServletResponse response) {\n+  public static SpanScopePair onEnter(\n+      @Advice.This final Object servlet, @Advice.Argument(0) final ServletRequest request) {\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0ODc5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369248798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                new Exception().printStackTrace();", "author": "trask", "createdAt": "2020-01-21T21:20:30Z", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "diffHunk": "@@ -24,52 +22,54 @@\n public class Servlet3Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n-      @Advice.This final Object servlet,\n-      @Advice.Argument(0) final ServletRequest request,\n-      @Advice.Argument(1) final ServletResponse response) {\n+  public static SpanScopePair onEnter(\n+      @Advice.This final Object servlet, @Advice.Argument(0) final ServletRequest request) {\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();\n+    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof Span;\n \n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n     final boolean invalidRequest = !(request instanceof HttpServletRequest);\n     if (invalidRequest || (hasActiveTrace && hasServletTrace)) {\n       // Tracing might already be applied by the FilterChain.  If so ignore this.\n       return null;\n     }\n \n+    new Exception().printStackTrace();", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0OTIwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369249209", "bodyText": "Accidentally removed?", "author": "trask", "createdAt": "2020-01-21T21:21:30Z", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "diffHunk": "@@ -24,52 +22,54 @@\n public class Servlet3Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n-      @Advice.This final Object servlet,\n-      @Advice.Argument(0) final ServletRequest request,\n-      @Advice.Argument(1) final ServletResponse response) {\n+  public static SpanScopePair onEnter(\n+      @Advice.This final Object servlet, @Advice.Argument(0) final ServletRequest request) {\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();\n+    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof Span;\n \n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n     final boolean invalidRequest = !(request instanceof HttpServletRequest);\n     if (invalidRequest || (hasActiveTrace && hasServletTrace)) {\n       // Tracing might already be applied by the FilterChain.  If so ignore this.\n       return null;\n     }\n \n+    new Exception().printStackTrace();\n     final HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+    final Span.Builder builder = TRACER.spanBuilder(\"servlet.request\");\n+    try {\n+      final SpanContext extractedContext =\n+          TRACER.getHttpTextFormat().extract((HttpServletRequest) request, GETTER);\n+      builder.setParent(extractedContext);\n+    } catch (final IllegalArgumentException e) {\n+      // Couldn't extract a context. We should treat this as a root span. '\n+      builder.setNoParent();\n+    }\n \n-    // For use by HttpServletResponseInstrumentation:\n-    InstrumentationContext.get(HttpServletResponse.class, HttpServletRequest.class)\n-        .put((HttpServletResponse) response, httpServletRequest);", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDk4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369340980", "bodyText": "Looks like a merging mistake.", "author": "prydin", "createdAt": "2020-01-22T02:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0OTIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MDU2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369250566", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (TRACER.getCurrentSpan() == null || !TRACER.getCurrentSpan().getContext().isValid()) {\n          \n          \n            \n                  if (!TRACER.getCurrentSpan().getContext().isValid()) {\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "author": "trask", "createdAt": "2020-01-21T21:24:38Z", "path": "java-agent/instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/filter/FilterInstrumentation.java", "diffHunk": "@@ -59,30 +57,32 @@ public boolean defaultEnabled() {\n   public static class FilterAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope start(@Advice.This final Filter filter) {\n-      if (activeSpan() == null) {\n+    public static SpanScopePair start(@Advice.This final Filter filter) {\n+      if (TRACER.getCurrentSpan() == null || !TRACER.getCurrentSpan().getContext().isValid()) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MDkzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369250935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (TRACER.getCurrentSpan() == null || !TRACER.getCurrentSpan().getContext().isValid()) {\n          \n          \n            \n                  if (!TRACER.getCurrentSpan().getContext().isValid()) {\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "author": "trask", "createdAt": "2020-01-21T21:25:29Z", "path": "java-agent/instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/http/HttpServletInstrumentation.java", "diffHunk": "@@ -67,31 +65,33 @@ public boolean defaultEnabled() {\n   public static class HttpServletAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope start(@Advice.Origin final Method method) {\n+    public static SpanScopePair start(@Advice.Origin final Method method) {\n \n-      if (activeSpan() == null) {\n+      if (TRACER.getCurrentSpan() == null || !TRACER.getCurrentSpan().getContext().isValid()) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTY1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369251657", "bodyText": "Check Intellij settings", "author": "trask", "createdAt": "2020-01-21T21:27:06Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/SpringWebfluxHttpClientDecorator.java", "diffHunk": "@@ -1,20 +1,24 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.client;\n \n+import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.decorator.HttpClientDecorator;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n-import java.net.URI;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n \n+import java.net.URI;", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTgwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369251800", "bodyText": "Check Intellij settings", "author": "trask", "createdAt": "2020-01-21T21:27:26Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -1,22 +1,19 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.client;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.propagate;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.startSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.client.HttpHeadersInjectAdapter.SETTER;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n-import io.opentelemetry.auto.instrumentation.api.AgentTracer;\n import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import org.springframework.web.reactive.function.client.ExchangeFunction;\n import reactor.core.CoreSubscriber;\n import reactor.core.publisher.Mono;\n import reactor.util.context.Context;\n \n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.HttpHeadersInjectAdapter.SETTER;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.TRACER;", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NDIwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369254207", "bodyText": "Not needed if TRACER::getCurrentSpan is used below", "author": "trask", "createdAt": "2020-01-21T21:32:48Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -28,26 +25,33 @@ public TracingClientResponseMono(\n     this.exchangeFunction = exchangeFunction;\n   }\n \n+  private static Span getCurrentSpan() {\n+    return TRACER.getCurrentSpan();\n+  }\n+", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MzE2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369343164", "bodyText": "I was planning for that method to do more but ended up not needing it...", "author": "prydin", "createdAt": "2020-01-22T02:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NDIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NDQwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369254404", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    context.<Span>getOrEmpty(Span.class).orElseGet(TracingClientResponseMono::getCurrentSpan);\n          \n          \n            \n                    context.<Span>getOrEmpty(Span.class).orElseGet(TRACER::getCurrentSpan);\n          \n      \n    \n    \n  \n\nthen static method above is not needed", "author": "trask", "createdAt": "2020-01-21T21:33:11Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -28,26 +25,33 @@ public TracingClientResponseMono(\n     this.exchangeFunction = exchangeFunction;\n   }\n \n+  private static Span getCurrentSpan() {\n+    return TRACER.getCurrentSpan();\n+  }\n+\n   @Override\n   public void subscribe(final CoreSubscriber<? super ClientResponse> subscriber) {\n     final Context context = subscriber.currentContext();\n-    final AgentSpan parentSpan =\n-        context.<AgentSpan>getOrEmpty(AgentSpan.class).orElseGet(AgentTracer::activeSpan);\n+    final Span parentSpan =\n+        context.<Span>getOrEmpty(Span.class).orElseGet(TracingClientResponseMono::getCurrentSpan);", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTYwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369255601", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  builder.setNoParent(); // TODO: Should we explicitly remove the parent here?\n          \n      \n    \n    \n  \n\nI don't think so, since this is a client request", "author": "trask", "createdAt": "2020-01-21T21:36:07Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -28,26 +25,33 @@ public TracingClientResponseMono(\n     this.exchangeFunction = exchangeFunction;\n   }\n \n+  private static Span getCurrentSpan() {\n+    return TRACER.getCurrentSpan();\n+  }\n+\n   @Override\n   public void subscribe(final CoreSubscriber<? super ClientResponse> subscriber) {\n     final Context context = subscriber.currentContext();\n-    final AgentSpan parentSpan =\n-        context.<AgentSpan>getOrEmpty(AgentSpan.class).orElseGet(AgentTracer::activeSpan);\n+    final Span parentSpan =\n+        context.<Span>getOrEmpty(Span.class).orElseGet(TracingClientResponseMono::getCurrentSpan);\n \n-    final AgentSpan span;\n+    final Span.Builder builder = TRACER.spanBuilder(\"http.request\");\n     if (parentSpan != null) {\n-      span = startSpan(\"http.request\", parentSpan.context());\n+      builder.setParent(parentSpan);\n     } else {\n-      span = startSpan(\"http.request\");\n+      builder.setNoParent(); // TODO: Should we explicitly remove the parent here?", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTg5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369255896", "bodyText": "Check Intellij settings", "author": "trask", "createdAt": "2020-01-21T21:36:46Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -1,56 +1,60 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.client;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.noopSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n-import java.util.concurrent.atomic.AtomicReference;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n import org.reactivestreams.Subscription;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import reactor.core.CoreSubscriber;\n import reactor.util.context.Context;\n \n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.TRACER;", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzE3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369257177", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (final Scope scope = TRACER.withSpan(span)) {\n          \n          \n            \n                try (final Scope scope = TRACER.withSpan(parentSpan)) {", "author": "trask", "createdAt": "2020-01-21T21:39:45Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +64,51 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NTE0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369345144", "bodyText": "Yikes! Good catch!", "author": "prydin", "createdAt": "2020-01-22T02:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzI2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369257268", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (final Scope scope = TRACER.withSpan(span)) {\n          \n          \n            \n                try (final Scope scope = TRACER.withSpan(parentSpan)) {", "author": "trask", "createdAt": "2020-01-21T21:39:59Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +64,51 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {\n \n       subscriber.onNext(clientResponse);\n     }\n   }\n \n   @Override\n   public void onError(final Throwable throwable) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onError(span, throwable);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NTA3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369745070", "bodyText": "\u2b06\ufe0f", "author": "trask", "createdAt": "2020-01-22T19:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzM2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369257362", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (final Scope scope = TRACER.withSpan(span)) {\n          \n          \n            \n                try (final Scope scope = TRACER.withSpan(parentSpan)) {", "author": "trask", "createdAt": "2020-01-21T21:40:12Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +64,51 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {\n \n       subscriber.onNext(clientResponse);\n     }\n   }\n \n   @Override\n   public void onError(final Throwable throwable) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onError(span, throwable);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {\n \n       subscriber.onError(throwable);\n     }\n   }\n \n   @Override\n   public void onComplete() {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1Nzg3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369257870", "bodyText": "Yes, I believe this is the correct translation to mimic existing behavior", "author": "trask", "createdAt": "2020-01-21T21:41:19Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -1,56 +1,60 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.client;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.noopSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n-import java.util.concurrent.atomic.AtomicReference;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n import org.reactivestreams.Subscription;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import reactor.core.CoreSubscriber;\n import reactor.util.context.Context;\n \n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.TRACER;\n+\n public class TracingClientResponseSubscriber implements CoreSubscriber<ClientResponse> {\n \n   private final CoreSubscriber<? super ClientResponse> subscriber;\n   private final ClientRequest clientRequest;\n   private final Context context;\n-  private final AtomicReference<AgentSpan> spanRef;\n-  private final AgentSpan parentSpan;\n+  private final AtomicReference<Span> spanRef;\n+  private final Span parentSpan;\n \n   public TracingClientResponseSubscriber(\n       final CoreSubscriber<? super ClientResponse> subscriber,\n       final ClientRequest clientRequest,\n       final Context context,\n-      final AgentSpan span,\n-      final AgentSpan parentSpan) {\n+      final Span span,\n+      final Span parentSpan) {\n     this.subscriber = subscriber;\n     this.clientRequest = clientRequest;\n     this.context = context;\n     spanRef = new AtomicReference<>(span);\n-    this.parentSpan = parentSpan == null ? noopSpan() : parentSpan;\n+    this.parentSpan =\n+        parentSpan == null\n+            ? DefaultSpan.getInvalid()\n+            : parentSpan; // TODO: Should we use DefaultSpan here?", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1ODA0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369258040", "bodyText": "Check Intellij settings", "author": "trask", "createdAt": "2020-01-21T21:41:43Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "diffHunk": "@@ -1,57 +1,56 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.server;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activeSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.startSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n+import io.opentelemetry.auto.instrumentation.api.SpanScopePair;\n import io.opentelemetry.auto.instrumentation.reactor.core.ReactorCoreAdviceUtils;\n-import java.util.function.Function;\n+import io.opentelemetry.trace.Span;\n import net.bytebuddy.asm.Advice;\n import org.reactivestreams.Publisher;\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n \n+import java.util.function.Function;\n+\n+import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.TRACER;", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1ODMyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369258324", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (parentSpan != null && parentSpan.getContext().isValid()) {\n          \n          \n            \n                if (parentSpan.getContext().isValid()) {\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "author": "trask", "createdAt": "2020-01-21T21:42:19Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "diffHunk": "@@ -1,57 +1,56 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.server;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activeSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.startSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n+import io.opentelemetry.auto.instrumentation.api.SpanScopePair;\n import io.opentelemetry.auto.instrumentation.reactor.core.ReactorCoreAdviceUtils;\n-import java.util.function.Function;\n+import io.opentelemetry.trace.Span;\n import net.bytebuddy.asm.Advice;\n import org.reactivestreams.Publisher;\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n \n+import java.util.function.Function;\n+\n+import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.TRACER;\n+\n /**\n  * This is 'top level' advice for Webflux instrumentation. This handles creating and finishing\n  * Webflux span.\n  */\n public class DispatcherHandlerAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope methodEnter(@Advice.Argument(0) final ServerWebExchange exchange) {\n+  public static SpanScopePair methodEnter(@Advice.Argument(0) final ServerWebExchange exchange) {\n     // Unfortunately Netty EventLoop is not instrumented well enough to attribute all work to the\n     // right things so we have to store span in request itself. We also store parent (netty's) span\n     // so we could update resource name.\n-    final AgentSpan parentSpan = activeSpan();\n-    if (parentSpan != null) {\n+    final Span parentSpan = TRACER.getCurrentSpan();\n+    if (parentSpan != null && parentSpan.getContext().isValid()) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1OTc0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369259744", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (span != null && exception != null) {\n          \n          \n            \n                  if (span.getContext().isValid() && exception != null) {", "author": "trask", "createdAt": "2020-01-21T21:45:41Z", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -92,12 +92,13 @@ private void muzzleCheck(final HandlerMethod method) {\n   public static class ErrorHandlerAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static void nameResource(@Advice.Argument(3) final Exception exception) {\n-      final AgentSpan span = activeSpan();\n+      final Span span = TRACER.getCurrentSpan();\n       if (span != null && exception != null) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MTIzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369261237", "bodyText": "Remove", "author": "trask", "createdAt": "2020-01-21T21:48:56Z", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -63,39 +62,45 @@ public HandlerAdapterInstrumentation() {\n   }\n \n   public static class ControllerAdvice {\n-\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope nameResourceAndStartSpan(\n+    public static SpanScopePair nameResourceAndStartSpan(\n         @Advice.Argument(0) final HttpServletRequest request,\n         @Advice.Argument(2) final Object handler) {\n       // Name the parent span based on the matching pattern\n       final Object parentSpan = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (parentSpan instanceof AgentSpan) {\n-        DECORATE.onRequest((AgentSpan) parentSpan, request);\n+      System.out.println(\"++++++++++++++++++++++++++++ Attribute names: \");\n+      for (final Enumeration<String> e = request.getAttributeNames(); e.hasMoreElements(); ) {\n+        final String s = e.nextElement();\n+        System.out.println(s + \" \" + request.getAttribute(s));\n+      }", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MTQzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369261430", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (TRACER.getCurrentSpan() == null) {\n          \n          \n            \n                  if (!TRACER.getCurrentSpan().isValid()) {", "author": "trask", "createdAt": "2020-01-21T21:49:24Z", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -63,39 +62,45 @@ public HandlerAdapterInstrumentation() {\n   }\n \n   public static class ControllerAdvice {\n-\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope nameResourceAndStartSpan(\n+    public static SpanScopePair nameResourceAndStartSpan(\n         @Advice.Argument(0) final HttpServletRequest request,\n         @Advice.Argument(2) final Object handler) {\n       // Name the parent span based on the matching pattern\n       final Object parentSpan = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (parentSpan instanceof AgentSpan) {\n-        DECORATE.onRequest((AgentSpan) parentSpan, request);\n+      System.out.println(\"++++++++++++++++++++++++++++ Attribute names: \");\n+      for (final Enumeration<String> e = request.getAttributeNames(); e.hasMoreElements(); ) {\n+        final String s = e.nextElement();\n+        System.out.println(s + \" \" + request.getAttribute(s));\n+      }\n+      if (parentSpan instanceof Span) {\n+        DECORATE.onRequest((Span) parentSpan, request);\n       }\n \n-      if (activeSpan() == null) {\n+      if (TRACER.getCurrentSpan() == null) {", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2NDA0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369264041", "bodyText": "// We want to capture the stacktrace, but that doesn't mean it should be an error.\n// We rely on a decorator to set the error state based on response code. (5xx -> error)\nBaseDecorator.addThrowable(span, exception);\n\nThis will track the exception without calling setError", "author": "trask", "createdAt": "2020-01-21T21:55:19Z", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -92,12 +92,13 @@ private void muzzleCheck(final HandlerMethod method) {\n   public static class ErrorHandlerAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static void nameResource(@Advice.Argument(3) final Exception exception) {\n-      final AgentSpan span = activeSpan();\n+      final Span span = TRACER.getCurrentSpan();\n       if (span != null && exception != null) {\n         DECORATE.onError(span, exception);\n         // We want to capture the stacktrace, but that doesn't mean it should be an error.\n         // We rely on a decorator to set the error state based on response code. (5xx -> error)\n-        span.setError(false);\n+        // span.setError(false); // TODO: Is this needed? Doesn't seem to be a similar method in\n+        // OpenTelemetry!", "originalCommit": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6219ea55ae116dc4a210419be54e69cc1ceadc17", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6219ea55ae116dc4a210419be54e69cc1ceadc17", "message": "Addressed maintainer comments", "committedDate": "2020-01-22T12:37:49Z", "type": "commit"}, {"oid": "848aee260a892dd1f15538abea4cbb391e956680", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/848aee260a892dd1f15538abea4cbb391e956680", "message": "Fixed negated contidion", "committedDate": "2020-01-22T15:37:49Z", "type": "commit"}, {"oid": "18832230cbc7d15f1afcb3315125e60132e6fda5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/18832230cbc7d15f1afcb3315125e60132e6fda5", "message": "Merge branch 'master' into prydin-instr-refactor-3", "committedDate": "2020-01-22T18:26:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMTIxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369711211", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (spanAndScope.getScope() != null) {\n          \n          \n            \n                if (spanAndScope != null) {", "author": "trask", "createdAt": "2020-01-22T17:52:39Z", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "diffHunk": "@@ -18,26 +18,26 @@\n public class FluxAndMonoSubscribeAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope methodEnter(\n+  public static SpanScopePair methodEnter(\n       @Advice.Argument(0) final CoreSubscriber subscriber, @Advice.This final Object thiz) {\n-    final AgentSpan span =\n+    final Span span =\n         subscriber\n             .currentContext()\n             .getOrDefault(ReactorCoreAdviceUtils.PUBLISHER_CONTEXT_KEY, null);\n     if (span != null) {\n-      return activateSpan(span, false);\n+      return new SpanScopePair(span, TRACER.withSpan(span));\n     }\n     return null;\n   }\n \n   @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n   public static void methodExit(\n-      @Advice.Enter final AgentScope scope, @Advice.Thrown final Throwable throwable) {\n+      @Advice.Enter final SpanScopePair spanAndScope, @Advice.Thrown final Throwable throwable) {\n     if (throwable != null) {\n-      ReactorCoreAdviceUtils.finishSpanIfPresent(scope.span(), throwable);\n+      ReactorCoreAdviceUtils.finishSpanIfPresent(spanAndScope.getSpan(), throwable);\n     }\n-    if (scope != null) {\n-      scope.close();\n+    if (spanAndScope.getScope() != null) {", "originalCommit": "848aee260a892dd1f15538abea4cbb391e956680", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MzcxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369743717", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  builder.setNoParent();", "author": "trask", "createdAt": "2020-01-22T18:59:11Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -31,23 +28,25 @@ public TracingClientResponseMono(\n   @Override\n   public void subscribe(final CoreSubscriber<? super ClientResponse> subscriber) {\n     final Context context = subscriber.currentContext();\n-    final AgentSpan parentSpan =\n-        context.<AgentSpan>getOrEmpty(AgentSpan.class).orElseGet(AgentTracer::activeSpan);\n+    final Span parentSpan = context.<Span>getOrEmpty(Span.class).orElseGet(TRACER::getCurrentSpan);\n \n-    final AgentSpan span;\n+    final Span.Builder builder = TRACER.spanBuilder(\"http.request\");\n     if (parentSpan != null) {\n-      span = startSpan(\"http.request\", parentSpan.context());\n+      builder.setParent(parentSpan);\n     } else {\n-      span = startSpan(\"http.request\");\n+      builder.setNoParent();", "originalCommit": "18832230cbc7d15f1afcb3315125e60132e6fda5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDc4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369744785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        : parentSpan; // TODO: Should we use DefaultSpan here?\n          \n          \n            \n                        : parentSpan;\n          \n      \n    \n    \n  \n\nI think ok to remove this TODO", "author": "trask", "createdAt": "2020-01-22T19:01:14Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -18,39 +18,42 @@\n   private final CoreSubscriber<? super ClientResponse> subscriber;\n   private final ClientRequest clientRequest;\n   private final Context context;\n-  private final AtomicReference<AgentSpan> spanRef;\n-  private final AgentSpan parentSpan;\n+  private final AtomicReference<Span> spanRef;\n+  private final Span parentSpan;\n \n   public TracingClientResponseSubscriber(\n       final CoreSubscriber<? super ClientResponse> subscriber,\n       final ClientRequest clientRequest,\n       final Context context,\n-      final AgentSpan span,\n-      final AgentSpan parentSpan) {\n+      final Span span,\n+      final Span parentSpan) {\n     this.subscriber = subscriber;\n     this.clientRequest = clientRequest;\n     this.context = context;\n     spanRef = new AtomicReference<>(span);\n-    this.parentSpan = parentSpan == null ? noopSpan() : parentSpan;\n+    this.parentSpan =\n+        parentSpan == null\n+            ? DefaultSpan.getInvalid()\n+            : parentSpan; // TODO: Should we use DefaultSpan here?", "originalCommit": "18832230cbc7d15f1afcb3315125e60132e6fda5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NjIyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369746220", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DECORATE.onError(span, exception);\n          \n      \n    \n    \n  \n\ncalling onError will setStatus(UNKNOWN)", "author": "trask", "createdAt": "2020-01-22T19:04:16Z", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -92,12 +92,12 @@ private void muzzleCheck(final HandlerMethod method) {\n   public static class ErrorHandlerAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static void nameResource(@Advice.Argument(3) final Exception exception) {\n-      final AgentSpan span = activeSpan();\n-      if (span != null && exception != null) {\n+      final Span span = TRACER.getCurrentSpan();\n+      if (span.getContext().isValid() && exception != null) {\n         DECORATE.onError(span, exception);", "originalCommit": "18832230cbc7d15f1afcb3315125e60132e6fda5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be36ee60ab6780d519badbfd9dc5af5634adb336", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/be36ee60ab6780d519badbfd9dc5af5634adb336", "message": "Update java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-22T19:51:58Z", "type": "commit"}, {"oid": "63702da96c7469020493d6bdd16821dfd168fc7c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63702da96c7469020493d6bdd16821dfd168fc7c", "message": "Update java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-22T19:52:11Z", "type": "commit"}, {"oid": "a7ad13aef12094fd02c567165f53f82a467d37a3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a7ad13aef12094fd02c567165f53f82a467d37a3", "message": "Update java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-22T19:53:14Z", "type": "commit"}, {"oid": "10f09aa451c469da5a96c51dc3954f89aeb88867", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/10f09aa451c469da5a96c51dc3954f89aeb88867", "message": "Update java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-22T19:54:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NTU2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369795560", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final boolean hasActiveTrace = current != null && current.getContext().isValid();\n          \n          \n            \n                final boolean hasActiveTrace = current.getContext().isValid();", "author": "trask", "createdAt": "2020-01-22T20:50:49Z", "path": "java-agent/instrumentation/servlet/request-2/src/main/java/io/opentelemetry/auto/instrumentation/servlet2/Servlet2Advice.java", "diffHunk": "@@ -24,13 +23,14 @@\n public class Servlet2Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n+  public static SpanScopePair onEnter(\n       @Advice.This final Object servlet,\n       @Advice.Argument(0) final ServletRequest request,\n       @Advice.Argument(value = 1, readOnly = false, typing = Assigner.Typing.DYNAMIC)\n           ServletResponse response) {\n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();", "originalCommit": "10f09aa451c469da5a96c51dc3954f89aeb88867", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NTcwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369795700", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (final Scope scope = TRACER.withSpan(span)) {\n          \n          \n            \n                try (final Scope scope = TRACER.withSpan(parentSpan)) {", "author": "trask", "createdAt": "2020-01-22T20:51:08Z", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +63,50 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n-\n+    try (final Scope scope = TRACER.withSpan(parentSpan)) {\n       subscriber.onNext(clientResponse);\n     }\n   }\n \n   @Override\n   public void onError(final Throwable throwable) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onError(span, throwable);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "originalCommit": "10f09aa451c469da5a96c51dc3954f89aeb88867", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "722a6cdded5d3dc4810a3dd536acf0f5161681a4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/722a6cdded5d3dc4810a3dd536acf0f5161681a4", "message": "Update java-agent/instrumentation/servlet/request-2/src/main/java/io/opentelemetry/auto/instrumentation/servlet2/Servlet2Advice.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-22T20:53:25Z", "type": "commit"}, {"oid": "9213e075f062d626c54aef723f56719a01989881", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9213e075f062d626c54aef723f56719a01989881", "message": "Update java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-22T20:53:34Z", "type": "commit"}]}