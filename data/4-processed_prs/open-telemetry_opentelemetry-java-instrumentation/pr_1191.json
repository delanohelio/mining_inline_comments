{"pr_number": 1191, "pr_title": "Enhance AWS DynamoDB instrumentation", "pr_createdAt": "2020-09-10T20:55:44Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191", "timeline": [{"oid": "b4f9300cba92ffcea219ba9b0b280978ca0e4cfc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b4f9300cba92ffcea219ba9b0b280978ca0e4cfc", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-11T08:05:51Z", "type": "forcePushed"}, {"oid": "fa02b6eebf6f025eef6e016c1cd0a2065a34cfaf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa02b6eebf6f025eef6e016c1cd0a2065a34cfaf", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-11T09:40:28Z", "type": "forcePushed"}, {"oid": "564ff3d6fcaba26c33801a571da691e85d4c3abd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/564ff3d6fcaba26c33801a571da691e85d4c3abd", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-11T20:49:21Z", "type": "forcePushed"}, {"oid": "03d962f5d9d4c87bdba43e22b37b51838fd6413e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/03d962f5d9d4c87bdba43e22b37b51838fd6413e", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-11T21:18:55Z", "type": "forcePushed"}, {"oid": "7abefe076c48af332040d15952249994fd61a270", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7abefe076c48af332040d15952249994fd61a270", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-11T21:49:06Z", "type": "forcePushed"}, {"oid": "679a294a6e759439c7e6a9de386a32029ff0f4c1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/679a294a6e759439c7e6a9de386a32029ff0f4c1", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-11T22:10:58Z", "type": "forcePushed"}, {"oid": "72cedb57a358a045e2852fdef019f474253fb80f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72cedb57a358a045e2852fdef019f474253fb80f", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-14T06:31:33Z", "type": "forcePushed"}, {"oid": "f5cf635bac6809a155af495dddbddeea0a5c791d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5cf635bac6809a155af495dddbddeea0a5c791d", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-14T07:14:24Z", "type": "forcePushed"}, {"oid": "82390835b5158c0a3918176ea0e24309a7302677", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/82390835b5158c0a3918176ea0e24309a7302677", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-14T12:07:04Z", "type": "forcePushed"}, {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ef807b89bbe7f86620706826af6442303ad85d9a", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-14T12:28:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487873572", "bodyText": "Why this was extracted from AwsSdkClientTracer?", "author": "iNikem", "createdAt": "2020-09-14T12:30:24Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/SpanFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+\n+public class SpanFactory {", "originalCommit": "ef807b89bbe7f86620706826af6442303ad85d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5MzYwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487993603", "bodyText": "Separation of concerns / testability. Although I have not added a unit test, I'd be much easier now.", "author": "kubawach", "createdAt": "2020-09-14T14:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxODkyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488018928", "bodyText": "All other Tracers do create spans. If you extract that from them, what will remain? :)", "author": "iNikem", "createdAt": "2020-09-14T15:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNzk4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488027989", "bodyText": "Pure tracing code ;) I don't have any other explanation for this refactoring apart from object oriented design principles :)", "author": "kubawach", "createdAt": "2020-09-14T15:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0Njc4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488346781", "bodyText": "I sort of agree that extracting this class doesn't seem to have huge bang for buck and makes this instrumentation significantly different from many of our other tracers. But it's ok too. Let's make sure all the new classes are package private instead of public", "author": "anuraaga", "createdAt": "2020-09-15T02:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4MzQ0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488383448", "bodyText": "I still think I disagree with this refactoring atm. We are still in the process of migrating from old Decorators to new Tracers and of unifying their usage. Introducing one more pattern of structuring and using tracers will only impede that unification.\nSorry to be a party pooper, but I would ask to move it back :)", "author": "iNikem", "createdAt": "2020-09-15T04:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyOTM0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488429347", "bodyText": "No problem with that.", "author": "kubawach", "createdAt": "2020-09-15T06:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NTM0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487875347", "bodyText": "I don't see how this test differs from the previous one", "author": "iNikem", "createdAt": "2020-09-14T12:33:21Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy", "diffHunk": "@@ -73,6 +80,106 @@ abstract class AbstractAws2ClientTest extends InstrumentationSpecification {\n \n   abstract void configureSdkClient(SdkClientBuilder builder)\n \n+  def \"send DynamoDB #operation request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    response.class.simpleName.startsWith(operation)\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def \"send DynamoDB #operation async request with builder #builder.class.getName() mocked response\"() {", "originalCommit": "ef807b89bbe7f86620706826af6442303ad85d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5NDcxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487994711", "bodyText": "My bad - copy/paste!", "author": "kubawach", "createdAt": "2020-09-14T14:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NTM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTk5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487885995", "bodyText": "can we get db.user?", "author": "iNikem", "createdAt": "2020-09-14T12:50:24Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy", "diffHunk": "@@ -73,6 +80,106 @@ abstract class AbstractAws2ClientTest extends InstrumentationSpecification {\n \n   abstract void configureSdkClient(SdkClientBuilder builder)\n \n+  def \"send DynamoDB #operation request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    response.class.simpleName.startsWith(operation)\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def \"send DynamoDB #operation async request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def assertDynamoDbRequest(service, operation, path, method, requestId) {\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName \"$service.$operation\"\n+          spanKind CLIENT\n+          errored false\n+          parent()\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" server.address.port\n+            \"${SemanticAttributes.HTTP_URL.key()}\" { it.startsWith(\"${server.address}${path}\") }\n+            \"${SemanticAttributes.HTTP_METHOD.key()}\" \"$method\"\n+            \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" 200\n+            \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" { it.startsWith(\"aws-sdk-java/\") }\n+            \"aws.service\" \"$service\"\n+            \"aws.operation\" \"${operation}\"\n+            \"aws.agent\" \"java-aws-sdk\"\n+            \"aws.requestId\" \"$requestId\"\n+            \"aws.table.name\" \"sometable\"\n+            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"dynamodb\"\n+            \"${SemanticAttributes.DB_NAME.key()}\" \"sometable\"\n+            \"${SemanticAttributes.DB_OPERATION.key()}\" \"${operation}\"", "originalCommit": "ef807b89bbe7f86620706826af6442303ad85d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwOTQxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488009413", "bodyText": "I don't think so. Client is (usually) configured with AWS access key (id / value) that does not say anything about a particular user.", "author": "kubawach", "createdAt": "2020-09-14T15:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxODEzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488018136", "bodyText": "can access key id be used as username? I am not sure how sensitive this info is.", "author": "iNikem", "createdAt": "2020-09-14T15:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyODg3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488028879", "bodyText": "In general it can - the AWS AccessKeyId is used in Presigned URLs, API requests etc. Therefore it's usually AFAIK not considered as a secret / sensitive piece of data. @anuraaga any word on this?", "author": "kubawach", "createdAt": "2020-09-14T15:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0OTIwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488349203", "bodyText": "The access key ID is an ID of the key itself, but not of the IAM role which is closer to what a user is in a MySQL DB. While it could be mapped to a user by resolving the key ID through IAM API or something, I think in general the key ID isn't really useful for tracing and would leave it out.", "author": "anuraaga", "createdAt": "2020-09-15T02:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4Njc3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487886772", "bodyText": "Can we set https://github.com/open-telemetry/opentelemetry-specification/blob/bc272ab52869df2145065d55300d721ff008e34b/specification/trace/semantic_conventions/span-general.md#nettransport-attribute ?", "author": "iNikem", "createdAt": "2020-09-14T12:51:32Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy", "diffHunk": "@@ -73,6 +80,106 @@ abstract class AbstractAws2ClientTest extends InstrumentationSpecification {\n \n   abstract void configureSdkClient(SdkClientBuilder builder)\n \n+  def \"send DynamoDB #operation request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    response.class.simpleName.startsWith(operation)\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def \"send DynamoDB #operation async request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def assertDynamoDbRequest(service, operation, path, method, requestId) {\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName \"$service.$operation\"\n+          spanKind CLIENT\n+          errored false\n+          parent()\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" server.address.port\n+            \"${SemanticAttributes.HTTP_URL.key()}\" { it.startsWith(\"${server.address}${path}\") }", "originalCommit": "ef807b89bbe7f86620706826af6442303ad85d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwMjI2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488002261", "bodyText": "Good question! What do you think about adding it to (generic HTTP tracer base class) - HttpClientTracer ? This way all HTTP based tracers would set \"IP.TCP\".", "author": "kubawach", "createdAt": "2020-09-14T15:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4Njc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxOTIwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488019204", "bodyText": "That is a good idea", "author": "iNikem", "createdAt": "2020-09-14T15:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4Njc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyODE2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488028169", "bodyText": "Will do :)", "author": "kubawach", "createdAt": "2020-09-14T15:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4Njc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4OTUwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487889507", "bodyText": "IF you want to rename it, this AwsSdkHttpClientTracer will be better name. It follows the general (loose) guideline of class name being <Library>HttpClientTracer extends HttpClientTracer", "author": "iNikem", "createdAt": "2020-09-14T12:55:37Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/HttpAwsSdkClientTracer.java", "diffHunk": "@@ -18,20 +18,17 @@\n \n import io.opentelemetry.context.propagation.TextMapPropagator.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Span.Kind;\n-import io.opentelemetry.trace.Tracer;\n-import io.opentelemetry.trace.TracingContextUtils;\n import io.opentelemetry.trace.attributes.SemanticAttributes;\n import java.net.URI;\n import software.amazon.awssdk.http.SdkHttpHeaders;\n import software.amazon.awssdk.http.SdkHttpRequest;\n import software.amazon.awssdk.http.SdkHttpResponse;\n \n-final class AwsSdkClientTracer\n+final class HttpAwsSdkClientTracer", "originalCommit": "ef807b89bbe7f86620706826af6442303ad85d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MDAyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487890023", "bodyText": "@anuraaga do you (at AWS I mean) have plans for formalising AWS SDK semantic convention in Otel spec?", "author": "iNikem", "createdAt": "2020-09-14T12:56:23Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();\n+\n+  private Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;\n+  }\n+\n+  private Map<String, String> mapFieldToAttribute() {\n+    Map<String, String> result = new HashMap<>();\n+    result.put(\"QueueUrl\", \"aws.queue.url\");\n+    result.put(\"Bucket\", \"aws.bucket.name\");\n+    result.put(\"QueueName\", \"aws.queue.name\");\n+    result.put(\"StreamName\", \"aws.stream.name\");\n+    result.put(\"TableName\", \"aws.table.name\");\n+    return result;\n+  }\n \n   TracingExecutionInterceptor(Kind kind) {\n-    this.kind = kind;\n+    this.spanFactory = new SpanFactory(kind);\n+  }\n+\n+  private Optional<SdkRequestDecorator> decorator(ExecutionAttributes executionAttributes) {\n+    RequestType type = getTypeFromAttributes(executionAttributes);\n+    return Optional.ofNullable(decoratorsMap.get(type));\n+  }\n+\n+  private RequestType getTypeFromAttributes(ExecutionAttributes executionAttributes) {\n+    return executionAttributes.getAttribute(REQUEST_TYPE_ATTRIBUTE);\n   }\n \n   @Override\n   public void beforeExecution(\n       Context.BeforeExecution context, ExecutionAttributes executionAttributes) {\n-    Span span = TRACER.getOrCreateSpan(spanName(executionAttributes), AwsSdk.tracer());\n+    Span span = spanFactory.forExecutionAttributes(executionAttributes);\n     executionAttributes.putAttribute(SPAN_ATTRIBUTE, span);\n+    ofSdkRequest(context.request())\n+        .ifPresent(rt -> executionAttributes.putAttribute(REQUEST_TYPE_ATTRIBUTE, rt));\n   }\n \n   @Override\n   public void afterMarshalling(\n       Context.AfterMarshalling context, ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    Span span = getSpanFromAttributes(executionAttributes);\n     if (span != null) {\n       TRACER.onRequest(span, context.httpRequest());\n-      onSdkRequest(span, context.request());\n-      onAttributes(span, executionAttributes);\n+      decorator(executionAttributes)\n+          .ifPresent(dec -> dec.decorate(span, context.request(), executionAttributes));\n+      decorateWithGenericRequestData(span, context.request());\n+      decorateWithExAttributesData(span, executionAttributes);\n     }\n   }\n \n+  private void decorateWithGenericRequestData(Span span, SdkRequest request) {\n+\n+    ofSdkRequest(request)\n+        .ifPresent(\n+            type -> {\n+              for (String field : type.getFields()) {\n+                request\n+                    .getValueForField(field, String.class)\n+                    .ifPresent(val -> span.setAttribute(fieldToAttribute.get(field), val));\n+              }\n+            });\n+  }\n+\n+  private void decorateWithExAttributesData(Span span, ExecutionAttributes attributes) {\n+\n+    String awsServiceName = attributes.getAttribute(SdkExecutionAttribute.SERVICE_NAME);\n+    String awsOperation = attributes.getAttribute(SdkExecutionAttribute.OPERATION_NAME);\n+\n+    span.setAttribute(\"aws.agent\", COMPONENT_NAME);", "originalCommit": "ef807b89bbe7f86620706826af6442303ad85d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NDMyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488344329", "bodyText": "Yeah I've started writing a markdown doc for it but need to finish it \ud83d\ude05 This one in particular should probably be deleted since it overlaps with the InstrumentationLibraryInfo but that's for a separate PR", "author": "anuraaga", "createdAt": "2020-09-15T02:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MDAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3MzM2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488473366", "bodyText": "It has already been here (not my change) so I'll resolve the conversation until we have a semantic convention in place :)", "author": "kubawach", "createdAt": "2020-09-15T08:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MDAyMw=="}], "type": "inlineReview"}, {"oid": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-14T15:13:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTkxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488345915", "bodyText": "Let's just return the nullable value instead of Optional, we don't really use that pattern in this or the Java SDK repo. It could be a good time to add a dependency on checker framework annotations which we haven't done here yet for @Nullable", "author": "anuraaga", "createdAt": "2020-09-15T02:32:44Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();\n+\n+  private Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;\n+  }\n+\n+  private Map<String, String> mapFieldToAttribute() {\n+    Map<String, String> result = new HashMap<>();\n+    result.put(\"QueueUrl\", \"aws.queue.url\");\n+    result.put(\"Bucket\", \"aws.bucket.name\");\n+    result.put(\"QueueName\", \"aws.queue.name\");\n+    result.put(\"StreamName\", \"aws.stream.name\");\n+    result.put(\"TableName\", \"aws.table.name\");\n+    return result;\n+  }\n \n   TracingExecutionInterceptor(Kind kind) {\n-    this.kind = kind;\n+    this.spanFactory = new SpanFactory(kind);\n+  }\n+\n+  private Optional<SdkRequestDecorator> decorator(ExecutionAttributes executionAttributes) {", "originalCommit": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTU2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488379560", "bodyText": "I don't know if there is any performance difference, but other than that I would prefer Optional. But indeed, it should then be a global decision for the sake of consistency.", "author": "iNikem", "createdAt": "2020-09-15T04:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTIyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488385226", "bodyText": "There's a small performance difference - I think Optional can still make sense for public APIs where users may not have tooling to deal with @Nullable (though Optional works poorly with other JVM languages like Kotlin / Scala so still not great...), for our private methods, we should just do what we can at compile time at compile time :) https://github.com/uber/NullAway", "author": "anuraaga", "createdAt": "2020-09-15T04:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4ODExMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488388112", "bodyText": "fwiw, I also prefer null + @Nullable + compile-time tooling #499 (comment)", "author": "trask", "createdAt": "2020-09-15T05:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2Mjg1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488462850", "bodyText": "Before we decide against Optionals everywhere besides module / component public API, there are few things we need to consider:\n\nit's already, at least in the AWS SDK interfacing part - eg getValueForField returns Optionals - ie inside AWS SDK tracing code it's consistent with the SDK itself\nthere is possible performance difference (invokedynamic for functional calls vs cmpz for plain-old NULL check) but IMO it's offset greatly by readability (no explicit branch) and additional safeguard (optional clearly says - beware, this might be null)\nI mostly agree with @iNikem comments regarding introduction of static type check - results might get ignored easily (if not failing the build upon a problem) - or will take a lot of effort to get the build running after introduction (if failing the build)\nout of my experience Optionals work better than static code checkers - for example if we break the checker (remove it accidentally, lib is broken etc) the code will become vulnerable, language construct will stay till it's manually removed / chaged\nremoving Optionals now will be unsafe as null check is not implemented in the project yet", "author": "kubawach", "createdAt": "2020-09-15T07:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4NjMzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488486334", "bodyText": "We surely shouldn't add nullness checking without having it fail the build. I went ahead and sent #1203 finally to allow adding nullaway to modules.\n\nit's already, at least in the AWS SDK interfacing part - eg getValueForField returns Optionals - ie inside AWS SDK tracing code it's consistent with the SDK itself\n\nIt's more important for us to have consistency within our codebase than following the library patterns, unless there is a very specific use case. For example, I think our codebase becomes less consistent / maintainable for its authors if we prefer Optional in aws sdk instrumentation and Nullable in armeria instrumentation because of the library choices\n\nit's offset greatly by readability (no explicit branch) and additional safeguard (optional clearly says - beware, this might be null)\n\nReadability argument is personal opinion I guess, but I find a small if statement to generally be at least as readable as a lambda. I don't think there's a difference in safeguardness when we have the checker in place (IntelliJ is excellent at highlighting usages of Nullable without check too)\n\nfor example if we break the checker\n\nI feel this is true of all our tooling - if we break shadowJar configuration, agent doesn't work, etc. I've had great experience with static checking myself. So I'd like to be confident in our tooling as a whole :-D", "author": "anuraaga", "createdAt": "2020-09-15T08:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0NjI0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488546244", "bodyText": "I merged #1203 in case you want to use it :) Otherwise I'm happy to add the checking later. But would be nice to stick with nullable here, I think that PR also shows the overwhelming use of it already in our codebase", "author": "anuraaga", "createdAt": "2020-09-15T10:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjMzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488346337", "bodyText": "Let's make the constant-type things static", "author": "anuraaga", "createdAt": "2020-09-15T02:34:08Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();", "originalCommit": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2NjQ2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488466463", "bodyText": "Done (with relevant name change).", "author": "kubawach", "createdAt": "2020-09-15T08:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjM2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488346367", "bodyText": "unmodifiableMap for both", "author": "anuraaga", "createdAt": "2020-09-15T02:34:16Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();\n+\n+  private Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;", "originalCommit": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2NzM1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488467358", "bodyText": "Not sure about that. Maps are private, not exposed to external (not leaking), unmod view will definitely add some CPU cycles (delegating methods). Don't see benefit here (it would be different if the map was exposed or leaking).", "author": "kubawach", "createdAt": "2020-09-15T08:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0Nzg3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488347877", "bodyText": "Ditto", "author": "anuraaga", "createdAt": "2020-09-15T02:39:43Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/db/DbRequestDecorator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2.db;\n+\n+import static java.util.Optional.ofNullable;\n+\n+import io.opentelemetry.instrumentation.awssdk.v2_2.SdkRequestDecorator;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.util.Optional;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+\n+public final class DbRequestDecorator implements SdkRequestDecorator {\n+\n+  @Override\n+  public void decorate(Span span, SdkRequest sdkRequest, ExecutionAttributes attributes) {\n+\n+    span.setAttribute(SemanticAttributes.DB_SYSTEM.key(), \"dynamodb\");\n+    // decorate with TableName as db.name (DynamoDB equivalent - not for batch)\n+    sdkRequest\n+        .getValueForField(\"TableName\", String.class)\n+        .ifPresent(val -> span.setAttribute(SemanticAttributes.DB_NAME.key(), val));\n+\n+    operation(attributes)\n+        .ifPresent(\n+            operation -> span.setAttribute(SemanticAttributes.DB_OPERATION.key(), operation));\n+  }\n+\n+  private Optional<String> operation(ExecutionAttributes attributes) {", "originalCommit": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3Mzg4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488473883", "bodyText": "Yep, perfectly possible to get a null here ;)", "author": "kubawach", "createdAt": "2020-09-15T08:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0Nzg3Nw=="}], "type": "inlineReview"}, {"oid": "3b4b1723d058b0116f68e1e3f02cf489840b5455", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b4b1723d058b0116f68e1e3f02cf489840b5455", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T10:16:26Z", "type": "forcePushed"}, {"oid": "7c3642f82998bcf71fe4a7018bd5484850fce85a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c3642f82998bcf71fe4a7018bd5484850fce85a", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T10:16:53Z", "type": "forcePushed"}, {"oid": "46768a004bcdb4ffb837f2989b9a17d54f31490c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/46768a004bcdb4ffb837f2989b9a17d54f31490c", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T10:32:04Z", "type": "forcePushed"}, {"oid": "7ad864318dd44a9802817c77c70366e06eb0879d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7ad864318dd44a9802817c77c70366e06eb0879d", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T11:01:05Z", "type": "forcePushed"}, {"oid": "2d04b13a39289b52c47deef777ff5b8701acbf13", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2d04b13a39289b52c47deef777ff5b8701acbf13", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T11:39:26Z", "type": "forcePushed"}, {"oid": "2a77061f4266b8da42311b9e4e398a7c2db389ad", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2a77061f4266b8da42311b9e4e398a7c2db389ad", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T12:07:36Z", "type": "forcePushed"}, {"oid": "4473f2afcbb3ac39fdea84787dd824c37a063332", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4473f2afcbb3ac39fdea84787dd824c37a063332", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T12:41:41Z", "type": "forcePushed"}, {"oid": "f16cb9b0ea0f8b81c315d335b7a518a480bb92cf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f16cb9b0ea0f8b81c315d335b7a518a480bb92cf", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T13:59:30Z", "type": "forcePushed"}, {"oid": "d1b9d1634ef7af2aa6086b429cccc4ee7341af2a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d1b9d1634ef7af2aa6086b429cccc4ee7341af2a", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T14:16:42Z", "type": "forcePushed"}, {"oid": "d5d39d10dac1283938b2315da0944069108321d7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d5d39d10dac1283938b2315da0944069108321d7", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-15T19:15:29Z", "type": "forcePushed"}, {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-16T08:34:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMzEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r489303106", "bodyText": "This comment currently does not make sense here.", "author": "iNikem", "createdAt": "2020-09-16T09:37:55Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,131 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n+  private static final Map<RequestType, SdkRequestDecorator> TYPE_TO_DECORATOR = mapDecorators();\n+  private static final Map<String, String> FIELD_TO_ATTRIBUTE = mapFieldToAttribute();\n+\n+  private static Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;\n+  }\n+\n+  private static Map<String, String> mapFieldToAttribute() {\n+    Map<String, String> result = new HashMap<>();\n+    result.put(\"QueueUrl\", \"aws.queue.url\");\n+    result.put(\"Bucket\", \"aws.bucket.name\");\n+    result.put(\"QueueName\", \"aws.queue.name\");\n+    result.put(\"StreamName\", \"aws.stream.name\");\n+    result.put(\"TableName\", \"aws.table.name\");\n+    return result;\n+  }\n+\n   private final Kind kind;\n \n   TracingExecutionInterceptor(Kind kind) {\n     this.kind = kind;\n   }\n \n+  @Nullable\n+  private SdkRequestDecorator decorator(ExecutionAttributes executionAttributes) {\n+    RequestType type = getTypeFromAttributes(executionAttributes);\n+    return TYPE_TO_DECORATOR.get(type);\n+  }\n+\n+  private RequestType getTypeFromAttributes(ExecutionAttributes executionAttributes) {\n+    return executionAttributes.getAttribute(REQUEST_TYPE_ATTRIBUTE);\n+  }\n+\n   @Override\n   public void beforeExecution(\n       Context.BeforeExecution context, ExecutionAttributes executionAttributes) {\n-    Span span = TRACER.getOrCreateSpan(spanName(executionAttributes), AwsSdk.tracer());\n+    Span span = TRACER.getOrCreateSpan(spanName(executionAttributes), AwsSdk.tracer(), kind);\n     executionAttributes.putAttribute(SPAN_ATTRIBUTE, span);\n+    ofSdkRequest(context.request())\n+        .ifPresent(rt -> executionAttributes.putAttribute(REQUEST_TYPE_ATTRIBUTE, rt));\n   }\n \n   @Override\n   public void afterMarshalling(\n       Context.AfterMarshalling context, ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    Span span = getSpanFromAttributes(executionAttributes);\n     if (span != null) {\n       TRACER.onRequest(span, context.httpRequest());\n-      onSdkRequest(span, context.request());\n-      onAttributes(span, executionAttributes);\n+      SdkRequestDecorator decorator = decorator(executionAttributes);\n+      if (decorator != null) {\n+        decorator.decorate(span, context.request(), executionAttributes);\n+      }\n+      decorateWithGenericRequestData(span, context.request());\n+      decorateWithExAttributesData(span, executionAttributes);\n     }\n   }\n \n+  private void decorateWithGenericRequestData(Span span, SdkRequest request) {\n+\n+    ofSdkRequest(request)\n+        .ifPresent(\n+            type -> {\n+              for (String field : type.getFields()) {\n+                request\n+                    .getValueForField(field, String.class)\n+                    .ifPresent(val -> span.setAttribute(FIELD_TO_ATTRIBUTE.get(field), val));\n+              }\n+            });\n+  }\n+\n+  private void decorateWithExAttributesData(Span span, ExecutionAttributes attributes) {\n+\n+    String awsServiceName = attributes.getAttribute(SdkExecutionAttribute.SERVICE_NAME);\n+    String awsOperation = attributes.getAttribute(SdkExecutionAttribute.OPERATION_NAME);\n+\n+    span.setAttribute(\"aws.agent\", COMPONENT_NAME);\n+    span.setAttribute(\"aws.service\", awsServiceName);\n+    span.setAttribute(\"aws.operation\", awsOperation);\n+  }\n+\n   @Override\n   public void afterExecution(\n       Context.AfterExecution context, ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    Span span = getSpanFromAttributes(executionAttributes);\n     if (span != null) {\n-      executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n+      clearAttributes(executionAttributes);\n       TRACER.afterExecution(span, context.httpRequest());\n       onSdkResponse(span, context.response());\n       TRACER.end(span, context.httpResponse());\n     }\n   }\n \n+  // Not overriding the super.  Should call both with each type of response.", "originalCommit": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMzY4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r489303684", "bodyText": "SemanticAttributes.DB_SYSTEM.set(span, \"dynamodb\") makes it easier to find non-semantic attributes in the future", "author": "iNikem", "createdAt": "2020-09-16T09:38:56Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/db/DbRequestDecorator.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2.db;\n+\n+import io.opentelemetry.instrumentation.awssdk.v2_2.SdkRequestDecorator;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+\n+public final class DbRequestDecorator implements SdkRequestDecorator {\n+\n+  @Override\n+  public void decorate(Span span, SdkRequest sdkRequest, ExecutionAttributes attributes) {\n+\n+    span.setAttribute(SemanticAttributes.DB_SYSTEM.key(), \"dynamodb\");", "originalCommit": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyMjM4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r489322382", "bodyText": "Let's switch to Nullable here too", "author": "anuraaga", "createdAt": "2020-09-16T10:09:34Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/RequestType.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import java.util.Optional;\n+import software.amazon.awssdk.core.SdkRequest;\n+\n+public enum RequestType {\n+  S3(\"S3Request\", \"Bucket\"),\n+  SQS(\"SqsRequest\", \"QueueUrl\", \"QueueName\"),\n+  Kinesis(\"KinesisRequest\", \"StreamName\"),\n+  DynamoDB(\"DynamoDbRequest\", \"TableName\");\n+\n+  private final String requestClass;\n+  private final String[] fields;\n+\n+  private RequestType(String requestClass, String... fields) {\n+    this.requestClass = requestClass;\n+    this.fields = fields;\n+  }\n+\n+  public String[] getFields() {\n+    return fields;\n+  }\n+\n+  public static Optional<RequestType> ofSdkRequest(SdkRequest request) {\n+    // exact request class should be 1st level child of request type\n+    String typeName =\n+        (request.getClass().getSuperclass() == null\n+                ? request.getClass()\n+                : request.getClass().getSuperclass())\n+            .getSimpleName();\n+    for (RequestType type : values()) {\n+      if (type.requestClass.equals(typeName)) {\n+        return Optional.of(type);", "originalCommit": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyMjQ2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r489322462", "bodyText": "Can you make all the new classes package-private instead of public?", "author": "anuraaga", "createdAt": "2020-09-16T10:09:43Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/RequestType.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import java.util.Optional;\n+import software.amazon.awssdk.core.SdkRequest;\n+\n+public enum RequestType {", "originalCommit": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/93bc5b39a9462c6f555488bcb67ee530fe48ba9d", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-16T12:34:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1NDEwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r490054100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static RequestType ofSdkRequest(SdkRequest request) {\n          \n          \n            \n              static RequestType ofSdkRequest(SdkRequest request) {", "author": "anuraaga", "createdAt": "2020-09-17T08:11:26Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/RequestType.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import software.amazon.awssdk.core.SdkRequest;\n+\n+enum RequestType {\n+  S3(\"S3Request\", \"Bucket\"),\n+  SQS(\"SqsRequest\", \"QueueUrl\", \"QueueName\"),\n+  Kinesis(\"KinesisRequest\", \"StreamName\"),\n+  DynamoDB(\"DynamoDbRequest\", \"TableName\");\n+\n+  private final String requestClass;\n+  private final String[] fields;\n+\n+  RequestType(String requestClass, String... fields) {\n+    this.requestClass = requestClass;\n+    this.fields = fields;\n+  }\n+\n+  public String[] getFields() {\n+    return fields;\n+  }\n+\n+  @Nullable\n+  public static RequestType ofSdkRequest(SdkRequest request) {", "originalCommit": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1NDg5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r490054892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public String[] getFields() {\n          \n          \n            \n              String[] getFields() {", "author": "anuraaga", "createdAt": "2020-09-17T08:12:44Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/RequestType.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import software.amazon.awssdk.core.SdkRequest;\n+\n+enum RequestType {\n+  S3(\"S3Request\", \"Bucket\"),\n+  SQS(\"SqsRequest\", \"QueueUrl\", \"QueueName\"),\n+  Kinesis(\"KinesisRequest\", \"StreamName\"),\n+  DynamoDB(\"DynamoDbRequest\", \"TableName\");\n+\n+  private final String requestClass;\n+  private final String[] fields;\n+\n+  RequestType(String requestClass, String... fields) {\n+    this.requestClass = requestClass;\n+    this.fields = fields;\n+  }\n+\n+  public String[] getFields() {", "originalCommit": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4425f036b95420f4b64453faa7ed947c63d7fa01", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4425f036b95420f4b64453faa7ed947c63d7fa01", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-17T08:17:18Z", "type": "forcePushed"}, {"oid": "b3853b07fd77518815a98045d420eba2d7d4eb3c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b3853b07fd77518815a98045d420eba2d7d4eb3c", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-17T09:02:40Z", "type": "forcePushed"}, {"oid": "1e896083fc53f45c801e2a0a6c29d4e113bbb741", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e896083fc53f45c801e2a0a6c29d4e113bbb741", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-17T16:37:57Z", "type": "commit"}, {"oid": "1e896083fc53f45c801e2a0a6c29d4e113bbb741", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e896083fc53f45c801e2a0a6c29d4e113bbb741", "message": "Enhance AWS DynamoDB instrumentation", "committedDate": "2020-09-17T16:37:57Z", "type": "forcePushed"}]}