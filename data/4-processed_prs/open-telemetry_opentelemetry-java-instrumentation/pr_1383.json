{"pr_number": 1383, "pr_title": "Add server interceptor to end in javaagent because they are run in re\u2026", "pr_createdAt": "2020-10-14T06:16:07Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1383", "timeline": [{"oid": "3f4e70dd80be427917b3fede01e3cff8a5280af6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3f4e70dd80be427917b3fede01e3cff8a5280af6", "message": "Add server interceptor to end in javaagent because they are run in reverse order.", "committedDate": "2020-10-14T06:15:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQyNjY0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1383#discussion_r504426645", "bodyText": "This was wrong in my previous change, naturally just like TracingServerInterceptor, any interceptor that modifies context must use Contexts.interceptCall to make sure it's propagated.", "author": "anuraaga", "createdAt": "2020-10-14T06:17:28Z", "path": "instrumentation/grpc-1.5/testing/src/main/groovy/io/opentelemetry/instrumentation/grpc/v1_5/AbstractGrpcTest.groovy", "diffHunk": "@@ -323,25 +324,26 @@ abstract class AbstractGrpcTest extends InstrumentationSpecification {\n     def port = PortUtils.randomOpenPort()\n     Server server\n     server = configureServer(ServerBuilder.forPort(port)\n-      .addService(greeter))\n+      .addService(greeter)\n       .intercept(new ServerInterceptor() {\n         @Override\n         <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n-          def ctx = Context.current().withValue(key, \"meow\")\n-          def oldCtx = ctx.attach()", "originalCommit": "3f4e70dd80be427917b3fede01e3cff8a5280af6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQyNzA2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1383#discussion_r504427065", "bodyText": "Incidentally this is much easier when context is mutable :)", "author": "anuraaga", "createdAt": "2020-10-14T06:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQyNjY0NQ=="}], "type": "inlineReview"}]}