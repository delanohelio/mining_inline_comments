{"pr_number": 553, "pr_title": "Merge changes from dd-trace-java 0.55.0", "pr_createdAt": "2020-06-20T23:54:14Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553", "timeline": [{"oid": "93718f9771be83753268619d016ba24c732b8000", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/93718f9771be83753268619d016ba24c732b8000", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)", "committedDate": "2020-06-21T00:32:28Z", "type": "forcePushed"}, {"oid": "c04c02bc1a70f387d6b0897d478258a605d4b757", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c04c02bc1a70f387d6b0897d478258a605d4b757", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)", "committedDate": "2020-06-21T00:39:02Z", "type": "forcePushed"}, {"oid": "d6fbc9f8844be8ccd0dea7c18280cae15f68431f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d6fbc9f8844be8ccd0dea7c18280cae15f68431f", "message": "fixup! Circleci config cleanup (DataDog/dd-trace-java#1564)", "committedDate": "2020-06-21T00:56:01Z", "type": "forcePushed"}, {"oid": "17dadfc637687f8ac3715b64861f9927f3facbb2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17dadfc637687f8ac3715b64861f9927f3facbb2", "message": "fixup! Circleci config cleanup (DataDog/dd-trace-java#1564)", "committedDate": "2020-06-21T00:56:59Z", "type": "forcePushed"}, {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/802cfd24ded0eae871ebe80284f86931c9426ae3", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)", "committedDate": "2020-06-21T01:05:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5MzU5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443193593", "bodyText": "I think it is better idea to put such common properties into project source code: https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties", "author": "iNikem", "createdAt": "2020-06-21T08:03:46Z", "path": ".circleci/config.yml", "diffHunk": "@@ -13,7 +13,11 @@ cache_keys: &cache_keys\n     # Rev the version when the cache gets too big\n     - trace-java-v1-{{ .Branch }}-{{ .Revision }}\n     - trace-java-v1-{{ .Branch }}\n-    # - dd-trace-java-v1-\n+\n+parameters:\n+  gradle_flags:\n+    type: string\n+    default: \"--build-cache --parallel --stacktrace --no-daemon\"", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NDM3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443864376", "bodyText": "see https://github.com/DataDog/dd-trace-java/pull/1607/files, coming in v0.56.0 merge \ud83d\ude04", "author": "trask", "createdAt": "2020-06-22T22:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5MzU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5MzgxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443193810", "bodyText": "our default java is 11, so running test will use java11, not 8", "author": "iNikem", "createdAt": "2020-06-21T08:06:29Z", "path": ".circleci/config.yml", "diffHunk": "@@ -239,40 +209,39 @@ jobs:\n \n \n workflows:\n-  version: 2\n   build_test_deploy:\n     jobs:\n       - build:\n           filters:\n             tags:\n               only: /.*/\n-      - test_7:\n-          requires:\n-            - build\n-          filters:\n-            tags:\n-              only: /.*/\n-      - test_8:\n-          requires:\n-            - build\n-          filters:\n-            tags:\n-              only: /.*/\n-      - test_latest:\n+\n+      - default_test_job:\n           requires:\n             - build\n+          prefixTestTask: true\n+          name: test_<< matrix.testTask >>\n+          matrix:\n+            parameters:\n+              testTask: [\"7\", \"11\", \"14\"]\n           filters:\n             tags:\n               only: /.*/\n-      - test_11:\n+\n+      - default_test_job:\n           requires:\n             - build\n+          name: test_8\n+          testTask: test jacocoTestReport jacocoTestCoverageVerification", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NDU0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443864548", "bodyText": "fixed", "author": "trask", "createdAt": "2020-06-22T22:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5MzgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDA3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194072", "bodyText": "Field shadowing is a bad thing", "author": "iNikem", "createdAt": "2020-06-21T08:10:19Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -88,25 +97,71 @@ public static void addThrowable(final Span span, final Throwable throwable) {\n    * reference. Anonymous classes are named based on their parent.\n    */\n   public String spanNameForMethod(final Method method) {\n-    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+    return spanNameForMethod(method.getDeclaringClass(), method);\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   *\n+   * @param method the method to get the name from, nullable\n+   * @return the span name from the class and method\n+   */\n+  public String spanNameForMethod(final Class<?> clazz, final Method method) {\n+    return spanNameForMethod(clazz, null == method ? null : method.getName());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   *\n+   * @param methodName the name of the method to get the name from, nullable\n+   * @return the span name from the class and method\n+   */\n+  public String spanNameForMethod(final Class<?> clazz, final String methodName) {\n+    ClassName cn = CLASS_NAMES.get(clazz);\n+    return null == methodName ? cn.getName() : cn.getMethodName(methodName);\n   }\n \n   /**\n    * This method is used to generate an acceptable span (operation) name based on a given class\n    * reference. Anonymous classes are named based on their parent.\n    */\n-  public String spanNameForClass(final Class clazz) {\n-    if (!clazz.isAnonymousClass()) {\n-      return clazz.getSimpleName();\n+  public String spanNameForClass(final Class<?> clazz) {\n+    String simpleName = clazz.getSimpleName();\n+    return simpleName.isEmpty() ? CLASS_NAMES.get(clazz).getName() : simpleName;\n+  }\n+\n+  private static class ClassName {\n+    private final String name;\n+    private final ConcurrentHashMap<String, String> methodNames = new ConcurrentHashMap<>(1);\n+\n+    private ClassName(String name) {\n+      this.name = name;\n     }\n-    String className = clazz.getName();\n-    if (clazz.getPackage() != null) {\n-      final String pkgName = clazz.getPackage().getName();\n-      if (!pkgName.isEmpty()) {\n-        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+\n+    public String getName() {\n+      return name;\n+    }\n+\n+    public String getMethodName(String name) {\n+      String methodName = methodNames.get(name);\n+      if (null == methodName) {\n+        methodName = this.name + \".\" + name;", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2ODc4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443868785", "bodyText": "fixed", "author": "trask", "createdAt": "2020-06-22T22:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDE0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194143", "bodyText": "So much changes in this class, new methods, but no changed/new tests?", "author": "iNikem", "createdAt": "2020-06-21T08:11:21Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -29,10 +29,19 @@\n import java.lang.reflect.Method;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutionException;\n \n public abstract class BaseDecorator {\n \n+  private static final ClassValue<ClassName> CLASS_NAMES =", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2ODY3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443868673", "bodyText": "BaseDecorator is heavily tested by instrumentation tests", "author": "trask", "createdAt": "2020-06-22T22:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDM0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194341", "bodyText": "throw UnsupportedOperationException?", "author": "iNikem", "createdAt": "2020-06-21T08:14:14Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -167,4 +143,67 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>The caller MUST call hasNext() before calling next().\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      Iterator<TypeDescription.Generic> it = null;\n+      try {\n+        it = typeDefinition.getInterfaces().iterator();\n+      } catch (Exception e) {\n+        logException(typeDefinition, e);\n+      }\n+      this.it = it;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (null != it && it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;\n+        } catch (Exception e) {\n+          logException(typeDefinition, e);\n+          return false;\n+        }\n+      }\n+      return false;\n+    }\n+\n+    @Override\n+    public TypeDefinition next() {\n+      return next;\n+    }\n+\n+    @Override\n+    public void remove() {}", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2ODg1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443868850", "bodyText": "done", "author": "trask", "createdAt": "2020-06-22T22:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDcyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194728", "bodyText": "I think this need explanation", "author": "iNikem", "createdAt": "2020-06-21T08:18:13Z", "path": "build.gradle", "diffHunk": "@@ -55,3 +55,14 @@ allprojects {\n     jvmArgs \"-XX:ErrorFile=/tmp/hs_err_pid%p.log\"\n   }\n }\n+\n+task writeMuzzleTasksToFile {", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MzUwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443573509", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            task writeMuzzleTasksToFile {\n          \n          \n            \n            // Writes tasks to file allowing us to leverage CircleCI's file based task parallelization\n          \n          \n            \n            task writeMuzzleTasksToFile {", "author": "devinsba", "createdAt": "2020-06-22T13:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NDczOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443864739", "bodyText": "done", "author": "trask", "createdAt": "2020-06-22T22:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDc3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194772", "bodyText": "headers names are wrong", "author": "iNikem", "createdAt": "2020-06-21T08:18:51Z", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpClientRedirectInstrumentation.java", "diffHunk": "@@ -73,12 +73,23 @@ private static void onAfterExecute(\n       if (redirect == null) {\n         return;\n       }\n-\n-      for (final Header header : original.getAllHeaders()) {\n-        final String name = header.getName().toLowerCase();\n-        if (name.equals(\"traceparent\")) {\n-          if (!redirect.containsHeader(header.getName())) {\n-            redirect.setHeader(header.getName(), header.getValue());\n+      // Apache HttpClient 4.0.1+ copies headers from original to redirect only\n+      // if redirect headers are empty. Because we add headers\n+      // \"x-datadog-\" and \"x-b3-\" to redirect: it means redirect headers never", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2OTA4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443869085", "bodyText": "fixed", "author": "trask", "createdAt": "2020-06-22T22:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTU3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443195577", "bodyText": "Maybe instead of creating a whole new module just for one test, put it with all others but guard with spock.lang.Requires check for current java version?", "author": "iNikem", "createdAt": "2020-06-21T08:28:40Z", "path": "instrumentation/java-concurrent/java-completablefuture/java-completablefuture.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NjA4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443866084", "bodyText": "i'm not sure how that would work? wouldn't these tests fail to compile if they are in a module that targets Java 7?\nmaybe another reason to abandon Java 7 for instrumentation tests?", "author": "trask", "createdAt": "2020-06-22T22:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2Mzc2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443963761", "bodyText": "I am not sure. We compile everything with java11, test\u2019s bytecode will be 7 but it will use a class absent from java7 sdk. If Spock will run it only on 8+ everything should work.\nBut at least I think we have to document why this separate module exists. Then we will remember to merge it back when/if we abandon java7", "author": "iNikem", "createdAt": "2020-06-23T05:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk4NjU0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443986543", "bodyText": "oh what you are suggesting works because it's groovy, so it isn't subject to javac --release 7 restrictions \ud83d\ude2d\ni will implement your suggestion \ud83d\udc4d", "author": "trask", "createdAt": "2020-06-23T06:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk4NzY4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443987682", "bodyText": "done", "author": "trask", "createdAt": "2020-06-23T06:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r444000727", "bodyText": "Aaa! I was wrong in my line of thought, -release 7 would break my suggestion indeed. But anyway, all good that ends good", "author": "iNikem", "createdAt": "2020-06-23T06:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443195840", "bodyText": "Does not look right to me. Passing span name as statement?", "author": "iNikem", "createdAt": "2020-06-21T08:31:25Z", "path": "instrumentation/rediscala-1.8/src/main/java/io/opentelemetry/auto/instrumentation/rediscala/RediscalaInstrumentation.java", "diffHunk": "@@ -83,10 +83,10 @@ public RediscalaInstrumentation() {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static SpanWithScope onEnter(@Advice.Argument(0) final RedisCommand cmd) {\n-      final Span span =\n-          TRACER.spanBuilder(cmd.getClass().getName()).setSpanKind(CLIENT).startSpan();\n+      String statement = DECORATE.spanNameForClass(cmd.getClass());\n+      final Span span = TRACER.spanBuilder(statement).setSpanKind(CLIENT).startSpan();\n       DECORATE.afterStart(span);\n-      DECORATE.onStatement(span, cmd.getClass().getName());\n+      DECORATE.onStatement(span, statement);", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NzEwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443867107", "bodyText": "can u explain your concern here?", "author": "trask", "createdAt": "2020-06-22T22:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk4NDA0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443984045", "bodyText": "Old code passed cmd.getClass().getName() to onStatement method. Ok, looks good: using class name for RedisCommand subclass as query string.\nNew code calls DECORATE.spanNameForClass and decides to pass this to onStatement method. Does not look good: using span name (which can change in future) as query string?", "author": "iNikem", "createdAt": "2020-06-23T06:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk4NTcwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443985705", "bodyText": "from https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md:\n\nSpan name should be set to low cardinality value representing the statement executed on the database\n\nin this case the statement is already low cardinality, so it serves for both span name and statement.\ni'm not clear on what you'd like to change here, can you propose a specific change?", "author": "trask", "createdAt": "2020-06-23T06:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMjQ4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r444002485", "bodyText": "I propose to pass cmd.getClass().getName() to DECORATE.onStatement method instead of the result of the DECOREATE.spanNameForClass().\nLook at it this way: does DECORATE.onStatement(span, DECOREATE.spanNameForClass(cmd)) make sense to you? Question is not in cardinality, question is in semantics. onStatement expects to receive the equivalent of database query. Span name can be changed at any moment and may be completely different from database query.", "author": "iNikem", "createdAt": "2020-06-23T06:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNzI3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r444437276", "bodyText": "Span name can be changed at any moment\n\nnot without breaking our tests\nwhy would we calculate the same value twice, when we can calculate it once and use it in two places?", "author": "trask", "createdAt": "2020-06-23T18:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDI5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r444454299", "bodyText": "So you are Ok with DECORATE.onStatement(span, DECOREATE.spanNameForClass(cmd))? For me this code is currently passing span name as a db query. It just happens atm that they have the same value, but this is accidental.\nTechnically this code is right now correct, so I will not object to this PR. But this \"homonym\" will bite us in the future, I am sure :)", "author": "iNikem", "createdAt": "2020-06-23T19:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MTkwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r444471902", "bodyText": "will your concern go away once we migrate to the new DatabaseClientTracer (where you've made the spanName / statement separation more clear)?", "author": "trask", "createdAt": "2020-06-23T19:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MDAwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r444480003", "bodyText": "Hm, in fact I believe yes :)", "author": "iNikem", "createdAt": "2020-06-23T20:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTk3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443195976", "bodyText": "Old name was better :)", "author": "iNikem", "createdAt": "2020-06-21T08:33:06Z", "path": "java-agent/src/main/java/io/opentelemetry/auto/bootstrap/AgentBootstrap.java", "diffHunk": "@@ -71,24 +73,26 @@ public static void agentmain(final String agentArgs, final Instrumentation inst)\n       startMethod.invoke(null, inst, bootstrapURL);\n     } catch (final Throwable ex) {\n       // Don't rethrow.  We don't have a log manager here, so just print.\n+      System.err.println(\"ERROR \" + thisClass.getName());\n       ex.printStackTrace();\n     }\n   }\n \n   private static synchronized URL installBootstrapJar(final Instrumentation inst)\n       throws IOException, URISyntaxException {\n-    URL bootstrapURL = null;\n+    URL ddJavaAgentJarURL = null;", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg1NDUwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443854501", "bodyText": "Even worse thing is that I created 3rd name for the same var. It also called bootstrapJarLocation :\nhttps://github.com/DataDog/dd-trace-java/blob/03ec987180f3f79bb355690ac080c344e9bee906/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/DatadogClassLoader.java#L31 which I think is better.\nI think it should be one name for this var across all methods.\nPlease help me which name to choose:\n\nbootstrapURL\nbootstrapJarLocation\nddJavaAgentJarURL\nsomething else ?", "author": "lpriima", "createdAt": "2020-06-22T22:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3MTc1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443871752", "bodyText": "i like ddJavaAgentJarURL, i think it is very descriptive. i did fix it just now to remove the dd prefix in this repo. @iNikem was that your concern?", "author": "trask", "createdAt": "2020-06-22T23:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2NDAwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443964005", "bodyText": "Yes, dd was my problem :)", "author": "iNikem", "createdAt": "2020-06-23T05:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjAwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443196000", "bodyText": "Why is this better than AgentBootstrap.class?", "author": "iNikem", "createdAt": "2020-06-21T08:33:30Z", "path": "java-agent/src/main/java/io/opentelemetry/auto/bootstrap/AgentBootstrap.java", "diffHunk": "@@ -55,6 +56,7 @@\n  * </ul>\n  */\n public class AgentBootstrap {\n+  private static final Class<?> thisClass = MethodHandles.lookup().lookupClass();", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NjYyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443576628", "bodyText": "Looks like it could be either: https://github.com/DataDog/dd-trace-java/pull/1561/files#r437482125", "author": "devinsba", "createdAt": "2020-06-22T13:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODg0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443578840", "bodyText": "I argue that AgentBootstrap.class is much easier to understand.", "author": "iNikem", "createdAt": "2020-06-22T14:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NDk0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443874946", "bodyText": "done", "author": "trask", "createdAt": "2020-06-22T23:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443196518", "bodyText": "I don't understand what this test does and how it is related to changes in AgentBootstrap. Extra documentation maybe?", "author": "iNikem", "createdAt": "2020-06-21T08:39:08Z", "path": "java-agent/src/test/groovy/io/opentelemetry/auto/AgentLoadedIntoBootstrapTest.groovy", "diffHunk": "@@ -31,4 +33,23 @@ class AgentLoadedIntoBootstrapTest extends Specification {\n       , [:]\n       , true) == 0\n   }\n+\n+  def \"AgentBootstrap is loaded not from dd-java-agent.jar\"() {", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3Njk2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443576964", "bodyText": "PR that added this change: DataDog/dd-trace-java#1561", "author": "devinsba", "createdAt": "2020-06-22T13:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MTcyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443581722", "bodyText": "I still don't understand. AgentBootstrap was changed to throw a RuntimException if it detects that it is being loaded from the unknown jar. Test seems to create some new jar, runs it and verifies that exit code is 0. Does not make sense to me. It should throw an exception, right? If not, then at least one developer (me) got confused by this test :) Thus, it needs explanation.", "author": "iNikem", "createdAt": "2020-06-22T14:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NDkyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443754927", "bodyText": "You are right: it might be confusing.\nThe actual condition check of this test here:\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553/files#diff-c9d742d3b84ae27c73d8b33c042b0c0cR20\nTest is checking that application level class was not loaded by bootstrap classloader. Check for exit code 0, means app exits w/o throwing that exception in user code.\nNo exception and exit code 0 in test, because we don't crash user app, if user wrongly packed (https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553/files#diff-81978fbee285440c149c08f06b126fe8R40) our AgentBootstrap (and maybe some other dd agent classes) into their own \"uber.jar\" (fat jar). We just disable dd agent with ERROR log in this case, and keep user app running.", "author": "lpriima", "createdAt": "2020-06-22T18:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NDc5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443764797", "bodyText": "So, any chance somebody of original authors could provide better name/docs/comments for this test?", "author": "iNikem", "createdAt": "2020-06-22T19:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MTE0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443841148", "bodyText": "Sure. What you think would be the better name for this test?", "author": "lpriima", "createdAt": "2020-06-22T21:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NDI2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443874263", "bodyText": "done, please review\nbtw, @lpriima thx for adding this guard! i had to troubleshoot a really weird error earlier this year, it did not exhibit itself as NPE like here, but ended up being same issue where customer had bundled our agent into their uber jar", "author": "trask", "createdAt": "2020-06-22T23:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2MDA3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443960073", "bodyText": "That happens several times with us as well. We got NPEs on de-referencing classloader of random application classes around user code.", "author": "lpriima", "createdAt": "2020-06-23T04:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzU2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443843569", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Class<?> thisClass = MethodHandles.lookup().lookupClass();\n          \n          \n            \n              private static final Class<?> thisClass = AgentBootstrap.class;", "author": "lpriima", "createdAt": "2020-06-22T21:44:35Z", "path": "java-agent/src/main/java/io/opentelemetry/auto/bootstrap/AgentBootstrap.java", "diffHunk": "@@ -55,6 +56,7 @@\n  * </ul>\n  */\n public class AgentBootstrap {\n+  private static final Class<?> thisClass = MethodHandles.lookup().lookupClass();", "originalCommit": "802cfd24ded0eae871ebe80284f86931c9426ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg1MDAzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443850030", "bodyText": "I want gradle formatter to do that for me.", "author": "lpriima", "createdAt": "2020-06-22T22:00:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2OTgzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443869837", "bodyText": "done", "author": "trask", "createdAt": "2020-06-22T22:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NzY4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443877683", "bodyText": "Created #559 for this TODO", "author": "trask", "createdAt": "2020-06-22T23:24:57Z", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpClientRedirectInstrumentation.java", "diffHunk": "@@ -73,12 +73,24 @@ private static void onAfterExecute(\n       if (redirect == null) {\n         return;\n       }\n-\n-      for (final Header header : original.getAllHeaders()) {\n-        final String name = header.getName().toLowerCase();\n-        if (name.equals(\"traceparent\")) {\n-          if (!redirect.containsHeader(header.getName())) {\n-            redirect.setHeader(header.getName(), header.getValue());\n+      // TODO this only handles W3C headers", "originalCommit": "b05d97710a8be44dccb52c4a62445f4c1e972038", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f5446ade085fc47cb5dbd713511c31be9603013f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5446ade085fc47cb5dbd713511c31be9603013f", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)", "committedDate": "2020-06-23T06:28:17Z", "type": "forcePushed"}, {"oid": "88c14dcab238902ef710c32231b690d5d4ccee3c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/88c14dcab238902ef710c32231b690d5d4ccee3c", "message": "Add some tests for Java CompletableFuture (DataDog/dd-trace-java#1546)", "committedDate": "2020-06-23T21:08:44Z", "type": "commit"}, {"oid": "da15d0de641a738fde0c6bd0b9491b0695a1e7f9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/da15d0de641a738fde0c6bd0b9491b0695a1e7f9", "message": "ApacheHttpClientRedirectInstrumentation copy headers from original request to redirect if original redirect headers were empty (DataDog/dd-trace-java#1539)", "committedDate": "2020-06-23T21:08:44Z", "type": "commit"}, {"oid": "459c291bca96241e17a64c8f282ba766d93f17f8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/459c291bca96241e17a64c8f282ba766d93f17f8", "message": "Allow the mock http server get assigned a transient port (DataDog/dd-trace-java#1540)\n\nThis change should eradicate the spurious test failures due to port conflicts - at least for the profiling smoke tests.", "committedDate": "2020-06-23T21:08:44Z", "type": "commit"}, {"oid": "74cd2fdd3d839b89f4d02747170aa065ff20b8b8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/74cd2fdd3d839b89f4d02747170aa065ff20b8b8", "message": "Split muzzle across multiple executors (DataDog/dd-trace-java#1549)", "committedDate": "2020-06-23T21:08:44Z", "type": "commit"}, {"oid": "07c64f15e1f03ea88379d4edb6d354e78cbf259b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/07c64f15e1f03ea88379d4edb6d354e78cbf259b", "message": "Update play-2.6 instrumentation to support Play version 2.8.x (DataDog/dd-trace-java#1521)", "committedDate": "2020-06-23T21:08:44Z", "type": "commit"}, {"oid": "cbbf870c2e2d233f7750552efec3342ebc8dbf5d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cbbf870c2e2d233f7750552efec3342ebc8dbf5d", "message": "Fix future cancelation (DataDog/dd-trace-java#1555)", "committedDate": "2020-06-23T21:08:44Z", "type": "commit"}, {"oid": "a25298556224237a6f7a808d9b741f5401212e28", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a25298556224237a6f7a808d9b741f5401212e28", "message": "Cache span names derived from class and method names (DataDog/dd-trace-java#1562)", "committedDate": "2020-06-23T21:08:44Z", "type": "commit"}, {"oid": "3dbbbda4a8099c65600564f89938fa42baacb3dc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3dbbbda4a8099c65600564f89938fa42baacb3dc", "message": "Disable agent if we may append wrong jar to bootclasspath (DataDog/dd-trace-java#1561)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "cbf04b0b157262e2d5bf0646a2aad7756f5802cf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cbf04b0b157262e2d5bf0646a2aad7756f5802cf", "message": "Circleci config cleanup (DataDog/dd-trace-java#1564)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "d668b07ae686973668270ce0a0ef5544f16c339f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d668b07ae686973668270ce0a0ef5544f16c339f", "message": "Create context store map at most once (DataDog/dd-trace-java#1570)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "f628f02de6300a5e8b32ddf3d26661c0c1c3a0b9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f628f02de6300a5e8b32ddf3d26661c0c1c3a0b9", "message": "Do not attempt to instrument websocket upgrade handlers (DataDog/dd-trace-java#1567)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "c072bcd1fad562cf74c328b09423cfcb2b789a83", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c072bcd1fad562cf74c328b09423cfcb2b789a83", "message": "Avoid creating new strings prior to jar lookup (DataDog/dd-trace-java#1580)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "bc7a3626edbd4b7bb9b8e5e19351d11e76a11d88", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc7a3626edbd4b7bb9b8e5e19351d11e76a11d88", "message": "Iterate type interfaces without materialising a list during super type matching (DataDog/dd-trace-java#1578)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "0fad25116513b5bcdfd3969050cf04ee34ac8f81", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0fad25116513b5bcdfd3969050cf04ee34ac8f81", "message": "Introduce matcher for membership of a set of names (DataDog/dd-trace-java#1583)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "2af04f792f8fd7f5070d1de3f02ad45032ceefb3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2af04f792f8fd7f5070d1de3f02ad45032ceefb3", "message": "BaseDecorator shouldn't rely on $ in class names (DataDog/dd-trace-java#1585)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "4e836f1c72e5ca77e4397f3429b6a681dd685634", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e836f1c72e5ca77e4397f3429b6a681dd685634", "message": "Replace remaining named disjunctions with namedOneOf or namedNoneOf (DataDog/dd-trace-java#1584)", "committedDate": "2020-06-23T21:08:45Z", "type": "commit"}, {"oid": "84d4e2498983c6a7d6c7a5fa855d25033baf0f23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84d4e2498983c6a7d6c7a5fa855d25033baf0f23", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)", "committedDate": "2020-06-23T21:08:46Z", "type": "commit"}, {"oid": "84d4e2498983c6a7d6c7a5fa855d25033baf0f23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84d4e2498983c6a7d6c7a5fa855d25033baf0f23", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)", "committedDate": "2020-06-23T21:08:46Z", "type": "forcePushed"}]}