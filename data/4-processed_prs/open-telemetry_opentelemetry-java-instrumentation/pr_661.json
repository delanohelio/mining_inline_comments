{"pr_number": 661, "pr_title": "Add spring-autoconfigure project", "pr_createdAt": "2020-07-10T16:27:55Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661", "timeline": [{"oid": "7c8db39b2ea3fc17a777554e364d818634c5312c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c8db39b2ea3fc17a777554e364d818634c5312c", "message": "spotless apply and remove spring-webmvc project", "committedDate": "2020-07-10T16:57:59Z", "type": "forcePushed"}, {"oid": "becfcd446878fa47313d7653b20f658378c5f1d9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/becfcd446878fa47313d7653b20f658378c5f1d9", "message": "disable bootJar", "committedDate": "2020-07-10T17:38:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxNjE3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453816172", "bodyText": "Remove", "author": "mabdinur", "createdAt": "2020-07-13T17:35:29Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/helpers/PropertiesBase.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.helpers;\n+\n+public class PropertiesBase {", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxOTk4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453819981", "bodyText": "recommend not having this extra parent class just for 1 property atm.  reconsider if there are more OpenTelemetry specific common properties, in which case, also rename this to something like OpenTelemetryBaseProperties", "author": "saturnism", "createdAt": "2020-07-13T17:42:08Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/helpers/PropertiesBase.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.helpers;\n+\n+public class PropertiesBase {", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMDMxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453820315", "bodyText": "consistency httpclient or httpclients", "author": "saturnism", "createdAt": "2020-07-13T17:42:44Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/HttpClientProperties.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients;\n+\n+import io.opentelemetry.instrumentation.spring.autoconfigure.helpers.PropertiesBase;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Loads opentelemetry.trace.httpclients.enabled from application.properties <br>\n+ * Sets default value to true if the configuration does not exist\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.httpclients\")\n+public final class HttpClientProperties extends PropertiesBase {}", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMzM5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453823394", "bodyText": "consider a more unique name for the method name (which translates to the name of the bean itself). Or, use additional annotation to rename the bean name.", "author": "saturnism", "createdAt": "2020-07-13T17:47:47Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.HttpClientProperties;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.client.RestTemplate;\n+\n+/** Configures RestTemplateBeanPostProcessor bean */\n+@Configuration\n+@ConditionalOnClass(RestTemplate.class)\n+@EnableConfigurationProperties(HttpClientProperties.class)\n+@ConditionalOnProperty(prefix = \"opentelemetry.trace.httpclients\", name = \"enabled\")\n+public class RestTemplateAutoConfiguration {\n+\n+  @Autowired private Tracer tracer;\n+\n+  @Bean\n+  public RestTemplateBeanPostProcessor restTemplateBeanPostProcessor() {", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0NTc5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454745794", "bodyText": "I added the prefix otel to all bean names", "author": "mabdinur", "createdAt": "2020-07-15T02:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMzM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyNDgzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453824830", "bodyText": "avoid autowire.", "author": "saturnism", "createdAt": "2020-07-13T17:50:11Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.HttpClientProperties;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/** Configures RestTemplateBeanPostProcessor bean */\n+@Configuration\n+@ConditionalOnClass(WebClient.class)\n+@EnableConfigurationProperties(HttpClientProperties.class)\n+@ConditionalOnProperty(prefix = \"opentelemetry.trace.httpclients\", name = \"enabled\")\n+public class WebClientAutoConfiguration {\n+\n+  @Autowired private Tracer tracer;", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyNTQ3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453825477", "bodyText": "either use constructor injection, or, inject directly in via method argument if not always used.", "author": "saturnism", "createdAt": "2020-07-13T17:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyNDgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyNjkyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453826921", "bodyText": "check if RestTemplateInterceptor is already in the list, add if not - just in case a user added the interceptor somewhere else.", "author": "saturnism", "createdAt": "2020-07-13T17:53:47Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.httpclients.RestTemplateInterceptor;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * BeanProcessor Implementation inspired by: <br>\n+ *\n+ * @see <a href=\n+ *     \"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">\n+ *     spring-cloud-sleuth-core </a>\n+ */\n+public final class RestTemplateBeanPostProcessor implements BeanPostProcessor {\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateBeanPostProcessor(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public Object postProcessAfterInitialization(Object bean, String beanName) {\n+    if (bean instanceof RestTemplate) {\n+      RestTemplate restTemplate = (RestTemplate) bean;\n+      restTemplate.getInterceptors().add(new RestTemplateInterceptor(tracer));", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyNzk0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453827940", "bodyText": "clean up java doc. use multiline even if it's just one line, so\n/**\n ....\n  */", "author": "saturnism", "createdAt": "2020-07-13T17:55:39Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/webmvc/WebMVCFilterAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.webmvc;\n+\n+import io.opentelemetry.instrumentation.springwebmvc.WebMVCTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/** Configures WebMVCFilter bean <br> */", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0NzE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454747189", "bodyText": "I made this change but it was reversed after my commit. We use the gradle spotless plugin to format code in this repository and I think this is the default format for single line java docs. I'll look in to this tho", "author": "mabdinur", "createdAt": "2020-07-15T02:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyNzk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyODM2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453828364", "bodyText": "Inspired by <a href=\"...\">Spring Cloud Sleuth</a>", "author": "saturnism", "createdAt": "2020-07-13T17:56:17Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * Inspired by: <br>", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyOTQxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453829415", "bodyText": "avoid <br> in javadoc. if need to use new paragraph, use <p>", "author": "saturnism", "createdAt": "2020-07-13T17:57:57Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.httpclients.RestTemplateInterceptor;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * BeanProcessor Implementation inspired by: <br>", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMDg2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r453830865", "bodyText": "add the context annotation processor to produce autocompletion json. see video.", "author": "saturnism", "createdAt": "2020-07-13T18:00:32Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -0,0 +1,41 @@\n+plugins {\n+  id 'org.springframework.boot' version '2.3.0.RELEASE'\n+  id 'io.spring.dependency-management' version '1.0.9.RELEASE'\n+}\n+\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.instrumentation.spring'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'\n+\n+bootJar {\n+  enabled = false\n+}\n+\n+dependencies {\n+  implementation 'org.springframework.boot:spring-boot-autoconfigure'\n+  implementation 'org.springframework.boot:spring-boot-starter-aop'\n+  \n+  testImplementation('org.springframework.boot:spring-boot-starter-test') {\n+    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n+  }\n+  ", "originalCommit": "361b3664a1e9ae1552cd2b4366f64b2fb63ee68c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e2bda6999edeb827ad1a1d7a7c887c324a4b0f3b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e2bda6999edeb827ad1a1d7a7c887c324a4b0f3b", "message": "remove starter and update settings.gradle", "committedDate": "2020-07-13T18:57:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MDcyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454090722", "bodyText": "Something is off-with the javadoc. You're starting an empty paragraph, perhaps instead of  closing the last one.", "author": "udekel", "createdAt": "2020-07-14T04:21:51Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/EnableOpenTelemetryTracing.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Auto-configures OpenTelemetry instrumentation\n+ *\n+ * <p>Enables OpenTelemetry Tracing in spring applications by completing a component scan\n+ *\n+ * <p>", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MzQ2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454493463", "bodyText": "it doesn't feel like there is a use of breaking this into 2 lines.  Can it simply be:\nAuto-configures OpenTelemetry. Enables Open Telementry Tracing in Spring applications by \ncompleting a component scan", "author": "saturnism", "createdAt": "2020-07-14T16:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MDcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMzA4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r455133085", "bodyText": "Fixed", "author": "mabdinur", "createdAt": "2020-07-15T15:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MDcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454091099", "bodyText": "Here and elsewhere, use {@link className} when referring to a differnt class, and something like {@code} when referring to code that is not a link as in the second paragraph.", "author": "udekel", "createdAt": "2020-07-14T04:23:18Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Create an io.opentelemetry.trace.Tracer bean", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTUzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454091536", "bodyText": "FYI that the recommended Google style is to always use curly braces in a condition, see:\nhttps://google.github.io/styleguide/javaguide.html#s4.1.1-braces-always-used", "author": "udekel", "createdAt": "2020-07-14T04:25:06Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Create an io.opentelemetry.trace.Tracer bean\n+ *\n+ * <p>If TracerProperties.loggingExporterIsEnabled=True: Create a simple span processor using the\n+ * LoggingSpanExporter\n+ */\n+@Configuration\n+@EnableConfigurationProperties(TracerProperties.class)\n+public class TracerAutoConfiguration {\n+\n+  @Autowired TracerProperties tracerProperties;\n+\n+  @Bean\n+  public Tracer tracer() throws Exception {\n+    Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n+    setLoggingExporter();\n+    return tracer;\n+  }\n+\n+  private void setLoggingExporter() {\n+    if (!tracerProperties.isLoggingExporterIsEnabled()) return;", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5Mzc2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454493769", "bodyText": "use google-java-format?", "author": "saturnism", "createdAt": "2020-07-14T16:42:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTc4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454091781", "bodyText": "[Suggestion] Matter of preferences, but why not either name the field tracerName, or use the parameter with the same name so it is simply\nthis.foo=foo?", "author": "udekel", "createdAt": "2020-07-14T04:25:56Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Loads opentelemetry.trace.tracer.name and opentelemetry.trace.tracer.loggingExporterIsEnabled\n+ * from application.properties\n+ *\n+ * <p>Sets the default values if the configurations do not exist\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.tracer\")\n+public final class TracerProperties {\n+\n+  private String name = \"otel-spring-tracer\";\n+  private boolean loggingExporterIsEnabled = true;\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(String tracerName) {", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MzkyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454493925", "bodyText": "+1", "author": "saturnism", "createdAt": "2020-07-14T16:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTk5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454091996", "bodyText": "[Suggestion] Consider a public constant for DEFAULT_TRACER_NAME, and then refer to it when you say \"sets the default value\" as \"sets the default value to {@link #...}", "author": "udekel", "createdAt": "2020-07-14T04:26:46Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Loads opentelemetry.trace.tracer.name and opentelemetry.trace.tracer.loggingExporterIsEnabled\n+ * from application.properties\n+ *\n+ * <p>Sets the default values if the configurations do not exist\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.tracer\")\n+public final class TracerProperties {\n+\n+  private String name = \"otel-spring-tracer\";", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MjI4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454092281", "bodyText": "[Suggestion] Consider returning on the !case immediately, since that's likely the common case.\nThen the rest is not nested.", "author": "udekel", "createdAt": "2020-07-14T04:27:49Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.httpclients.RestTemplateInterceptor;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * BeanProcessor Implementation inspired by:\n+ *\n+ * @see <a href=\n+ *     \"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">\n+ *     spring-cloud-sleuth-core </a>\n+ */\n+public final class RestTemplateBeanPostProcessor implements BeanPostProcessor {\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateBeanPostProcessor(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public Object postProcessAfterInitialization(Object bean, String beanName) {\n+    if (bean instanceof RestTemplate) {\n+      RestTemplate restTemplate = (RestTemplate) bean;\n+      addRestTemplateInterceptorIfNotPresent(restTemplate);\n+\n+      return restTemplate;\n+    }\n+    return bean;", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MjQ2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454092460", "bodyText": "[Suggestion] Merge this to get rid of the temporary.", "author": "udekel", "createdAt": "2020-07-14T04:28:30Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.httpclients.RestTemplateInterceptor;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * BeanProcessor Implementation inspired by:\n+ *\n+ * @see <a href=\n+ *     \"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">\n+ *     spring-cloud-sleuth-core </a>\n+ */\n+public final class RestTemplateBeanPostProcessor implements BeanPostProcessor {\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateBeanPostProcessor(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public Object postProcessAfterInitialization(Object bean, String beanName) {\n+    if (bean instanceof RestTemplate) {\n+      RestTemplate restTemplate = (RestTemplate) bean;\n+      addRestTemplateInterceptorIfNotPresent(restTemplate);\n+\n+      return restTemplate;\n+    }\n+    return bean;\n+  }\n+\n+  private void addRestTemplateInterceptorIfNotPresent(RestTemplate restTemplate) {\n+\n+    List<ClientHttpRequestInterceptor> restTemplateInterceptors = restTemplate.getInterceptors();\n+    boolean noneMatch = noneMatchRestTemplateInterceptor(restTemplateInterceptors);\n+    if (noneMatch) {\n+      restTemplateInterceptors.add(0, new RestTemplateInterceptor(tracer));", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5Mjc0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454092744", "bodyText": "[Suggestion]\nAre you targettng Java 8+?\nIf so, you can simply do:\nreturn functions.stream().noneMatch(foo -> foo instanceof RestTemplateInterceptor)", "author": "udekel", "createdAt": "2020-07-14T04:29:34Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.httpclients.RestTemplateInterceptor;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * BeanProcessor Implementation inspired by:\n+ *\n+ * @see <a href=\n+ *     \"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">\n+ *     spring-cloud-sleuth-core </a>\n+ */\n+public final class RestTemplateBeanPostProcessor implements BeanPostProcessor {\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateBeanPostProcessor(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public Object postProcessAfterInitialization(Object bean, String beanName) {\n+    if (bean instanceof RestTemplate) {\n+      RestTemplate restTemplate = (RestTemplate) bean;\n+      addRestTemplateInterceptorIfNotPresent(restTemplate);\n+\n+      return restTemplate;\n+    }\n+    return bean;\n+  }\n+\n+  private void addRestTemplateInterceptorIfNotPresent(RestTemplate restTemplate) {\n+\n+    List<ClientHttpRequestInterceptor> restTemplateInterceptors = restTemplate.getInterceptors();\n+    boolean noneMatch = noneMatchRestTemplateInterceptor(restTemplateInterceptors);\n+    if (noneMatch) {\n+      restTemplateInterceptors.add(0, new RestTemplateInterceptor(tracer));\n+    }\n+  }\n+\n+  private boolean noneMatchRestTemplateInterceptor(List<ClientHttpRequestInterceptor> functions) {\n+    for (ClientHttpRequestInterceptor function : functions) {\n+      if (function instanceof RestTemplateInterceptor) {\n+        return false;\n+      }\n+    }\n+    return true;", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5Mjk2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454092967", "bodyText": "You should still have a summary fragment describing what the class is.\nThe inspired-by part should be a paragraph.", "author": "udekel", "createdAt": "2020-07-14T04:30:18Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * Inspired by: <a\n+ * href=\"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">Spring\n+ * Cloud Sleuth</a>", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MzA3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454093076", "bodyText": "[Question] Do you need to override this, since it's the default behaviour?", "author": "udekel", "createdAt": "2020-07-14T04:30:41Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * Inspired by: <a\n+ * href=\"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">Spring\n+ * Cloud Sleuth</a>\n+ */\n+final class WebClientBeanPostProcessor implements BeanPostProcessor {\n+\n+  private final Tracer tracer;\n+\n+  public WebClientBeanPostProcessor(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzOTk2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r455139965", "bodyText": "Actually this is the default behavior of postProcessBeforeInitialization. The default implementation of this method is to return the bean object and that's what I do here. This override is a leftover from when I was experimenting with java 7. Since java 8 has default implementations for interfaces this is now unnecessary. I'll remove this override in my next commit.", "author": "mabdinur", "createdAt": "2020-07-15T15:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MzA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MzQwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454093402", "bodyText": "[Note] The name of this method is consumer, doesn't it return a functor that will do this addition, rather than actually add itself? If so, the name should probably reflect that instead of representing the imperative.", "author": "udekel", "createdAt": "2020-07-14T04:31:59Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * Inspired by: <a\n+ * href=\"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">Spring\n+ * Cloud Sleuth</a>\n+ */\n+final class WebClientBeanPostProcessor implements BeanPostProcessor {\n+\n+  private final Tracer tracer;\n+\n+  public WebClientBeanPostProcessor(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public Object postProcessBeforeInitialization(Object bean, String beanName) {\n+    return bean;\n+  }\n+\n+  @Override\n+  public Object postProcessAfterInitialization(Object bean, String beanName) {\n+    if (bean instanceof WebClient) {\n+      WebClient webClient = (WebClient) bean;\n+      return wrapBuilder(webClient.mutate()).build();\n+    } else if (bean instanceof WebClient.Builder) {\n+      WebClient.Builder webClientBuilder = (WebClient.Builder) bean;\n+      return wrapBuilder(webClientBuilder);\n+    }\n+    return bean;\n+  }\n+\n+  private WebClient.Builder wrapBuilder(WebClient.Builder webClientBuilder) {\n+    return webClientBuilder.filters(addWebClientFilterFunctionIfNotPresent());\n+  }\n+\n+  private Consumer<List<ExchangeFilterFunction>> addWebClientFilterFunctionIfNotPresent() {", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MzUxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454093512", "bodyText": "Fold using noneMatch if you can use Java 7. I think you can also make this static.", "author": "udekel", "createdAt": "2020-07-14T04:32:24Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * Inspired by: <a\n+ * href=\"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">Spring\n+ * Cloud Sleuth</a>\n+ */\n+final class WebClientBeanPostProcessor implements BeanPostProcessor {\n+\n+  private final Tracer tracer;\n+\n+  public WebClientBeanPostProcessor(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public Object postProcessBeforeInitialization(Object bean, String beanName) {\n+    return bean;\n+  }\n+\n+  @Override\n+  public Object postProcessAfterInitialization(Object bean, String beanName) {\n+    if (bean instanceof WebClient) {\n+      WebClient webClient = (WebClient) bean;\n+      return wrapBuilder(webClient.mutate()).build();\n+    } else if (bean instanceof WebClient.Builder) {\n+      WebClient.Builder webClientBuilder = (WebClient.Builder) bean;\n+      return wrapBuilder(webClientBuilder);\n+    }\n+    return bean;\n+  }\n+\n+  private WebClient.Builder wrapBuilder(WebClient.Builder webClientBuilder) {\n+    return webClientBuilder.filters(addWebClientFilterFunctionIfNotPresent());\n+  }\n+\n+  private Consumer<List<ExchangeFilterFunction>> addWebClientFilterFunctionIfNotPresent() {\n+    return functions -> {\n+      boolean noneMatch = noneMatchWebClientTracingFilter(functions);\n+      if (noneMatch) {\n+        WebClientTracingFilter.addFilter(functions, tracer);\n+      }\n+    };\n+  }\n+\n+  private boolean noneMatchWebClientTracingFilter(List<ExchangeFilterFunction> functions) {\n+    for (ExchangeFilterFunction function : functions) {", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MzkwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454163905", "bodyText": "Do you think it's possible (or even a good idea) to recognize our standard system properties in the spring config instead of redefining? e.g.,\nota:\n  exporter: logging\n\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation#logging-exporter", "author": "anuraaga", "createdAt": "2020-07-14T07:39:06Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Loads opentelemetry.trace.tracer.name and opentelemetry.trace.tracer.loggingExporterIsEnabled\n+ * from application.properties\n+ *\n+ * <p>Sets the default values if the configurations do not exist\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.tracer\")\n+public final class TracerProperties {\n+\n+  private String name = \"otel-spring-tracer\";\n+  private boolean loggingExporterIsEnabled = true;\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(String tracerName) {\n+    this.name = tracerName;\n+  }\n+\n+  public boolean isLoggingExporterIsEnabled() {", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5ODYxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r455498615", "bodyText": "Here's the branch that contains a rough draft for exporter support (it currently has LoggingExporter and JaegerExporter).\nInstead of setting system properties this approach uses the properties set in the resources/application.properties file.\nThe proposed key is:\nopentelemetry:\n  exporter: \n     type:  logging (or jaeger or otlp or zipkin)", "author": "mabdinur", "createdAt": "2020-07-16T04:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MzkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5OTA4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r455499083", "bodyText": "What do you think?", "author": "mabdinur", "createdAt": "2020-07-16T04:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MzkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2NTM2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454165364", "bodyText": "This should describe the semantics, not the implementation behavior (it's obvious based on line 26). It would be more helpful if this clearly described what it's configuring, I guess Configuration for the tracing instrumentation of HTTP clients.", "author": "anuraaga", "createdAt": "2020-07-14T07:41:53Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/HttpClientsProperties.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Loads opentelemetry.trace.httpclients.enabled from application.properties", "originalCommit": "e86cbce9dbe5688bc49919c5f9505f218a7c3178", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NDIxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454494215", "bodyText": "+1", "author": "saturnism", "createdAt": "2020-07-14T16:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2NTM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MjQ0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454492444", "bodyText": "can the tracer and deocrator be passed in via constructor?", "author": "saturnism", "createdAt": "2020-07-14T16:40:41Z", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/SpringWebfluxHttpClientDecorator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebflux.client;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import java.util.List;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ClientResponse;\n+\n+class SpringWebfluxHttpClientDecorator extends HttpClientDecorator<ClientRequest, ClientResponse> {\n+\n+  public static final Tracer TRACER =", "originalCommit": "37c6205bbf412fe0e15f21f3531e6caf106ad420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5MTA3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r455191070", "bodyText": "Most (all?) of the HttpClientDecorators define a static Tracer. However this tracer isn't used in the decorators instead this field is referenced by other classes.\nHere's an example:\nGrpcClientDecorator declares a static tracer. This static tracer is not used by the decorator. Instead it's referenced and used in TracingClientInterceptor.\nLike in the gRPC example you do not need to use the static Tracer defined in SpringWebfluxHttpClientDecorator you can supply your own tracer. Also since this tracer isn't directly used in the class it doesn't make sense to pass it in via a constructor. It might make more sense to just declare this tracer in the one place it's used WebClientTracingFilter but this would go against existing conventions.\nI believe @nikita has a pull request that removes HttpServerDecorators and replaces with a HttpServerTracer. I could create a pull request that does something similar for HttpClientDecorator but that would be a pretty significant change that would touch 100+ files. Here's Nikita's change for reference:  #701", "author": "mabdinur", "createdAt": "2020-07-15T16:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MjQ0NA=="}], "type": "inlineReview"}, {"oid": "01cc02ce79a58b9041649fcc63f8d270ba9524d3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/01cc02ce79a58b9041649fcc63f8d270ba9524d3", "message": "requested changes 1", "committedDate": "2020-07-15T15:48:20Z", "type": "forcePushed"}, {"oid": "adaaa8262ea42f55dbc11cf6cf64d4f59b7d3608", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/adaaa8262ea42f55dbc11cf6cf64d4f59b7d3608", "message": "add autoconfigure project", "committedDate": "2020-07-16T15:05:29Z", "type": "commit"}, {"oid": "bec84be709a20e441f836957db94fae84e917b83", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bec84be709a20e441f836957db94fae84e917b83", "message": "spotless apply and remove spring-webmvc project", "committedDate": "2020-07-16T15:05:29Z", "type": "commit"}, {"oid": "e0d3ee93a7152f4108b97b20de32b712bc8ca456", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e0d3ee93a7152f4108b97b20de32b712bc8ca456", "message": "disable bootJar", "committedDate": "2020-07-16T15:05:29Z", "type": "commit"}, {"oid": "07d3a458ace7eaa747c396d0a3e33f0a86fba6da", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/07d3a458ace7eaa747c396d0a3e33f0a86fba6da", "message": "add starter and webclient", "committedDate": "2020-07-16T15:05:30Z", "type": "commit"}, {"oid": "aee3831655ceea2c8902d7bace561e50459ac3da", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/aee3831655ceea2c8902d7bace561e50459ac3da", "message": "remove starter and update settings.gradle", "committedDate": "2020-07-16T15:10:39Z", "type": "commit"}, {"oid": "4f2806e95f79e6ec72db8c81215fe75fa016677d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4f2806e95f79e6ec72db8c81215fe75fa016677d", "message": "add back springwebflux", "committedDate": "2020-07-16T15:14:25Z", "type": "commit"}, {"oid": "cf81b07984da2c71162103ac0644f0d6e8e2a3bb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cf81b07984da2c71162103ac0644f0d6e8e2a3bb", "message": "clean up", "committedDate": "2020-07-16T15:14:33Z", "type": "commit"}, {"oid": "5df7e3189c8c7f8f9ad8e96b51a4266652791b20", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5df7e3189c8c7f8f9ad8e96b51a4266652791b20", "message": "format", "committedDate": "2020-07-16T15:14:33Z", "type": "commit"}, {"oid": "6256b27c8a23769b2fbcd9d960125eb9caf121f7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6256b27c8a23769b2fbcd9d960125eb9caf121f7", "message": "add annotation processor", "committedDate": "2020-07-16T15:14:33Z", "type": "commit"}, {"oid": "872633b601cb46be98c18b822c3325f6abcb0b6b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/872633b601cb46be98c18b822c3325f6abcb0b6b", "message": "fix p tags", "committedDate": "2020-07-16T15:14:33Z", "type": "commit"}, {"oid": "9cddaaf674c198d157ae309c577a910edad86b31", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9cddaaf674c198d157ae309c577a910edad86b31", "message": "Update TracerAutoConfiguration.java", "committedDate": "2020-07-16T15:14:33Z", "type": "commit"}, {"oid": "bbec5c964d6703e54e51699a84e945f64f46ef05", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bbec5c964d6703e54e51699a84e945f64f46ef05", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-07-16T15:14:34Z", "type": "commit"}, {"oid": "ba0e065626708e81cade3da6cfe5c041c4430ed3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ba0e065626708e81cade3da6cfe5c041c4430ed3", "message": "requested changes 1", "committedDate": "2020-07-16T15:14:34Z", "type": "commit"}, {"oid": "53ef5c96c2a366d46ed630f471a013fd692711f3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/53ef5c96c2a366d46ed630f471a013fd692711f3", "message": "fix typo", "committedDate": "2020-07-16T15:14:34Z", "type": "commit"}, {"oid": "53ef5c96c2a366d46ed630f471a013fd692711f3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/53ef5c96c2a366d46ed630f471a013fd692711f3", "message": "fix typo", "committedDate": "2020-07-16T15:14:34Z", "type": "forcePushed"}, {"oid": "31e44d684c27c96044aed524b16541f23b1edec1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/31e44d684c27c96044aed524b16541f23b1edec1", "message": "reset webflux changes to master", "committedDate": "2020-07-16T15:17:56Z", "type": "commit"}, {"oid": "bf107e6f560926d29fcc9b9b6fd58674bf893470", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bf107e6f560926d29fcc9b9b6fd58674bf893470", "message": "ws", "committedDate": "2020-07-16T15:18:40Z", "type": "commit"}, {"oid": "113052509617846435e6625fafc465fa050ec3f7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/113052509617846435e6625fafc465fa050ec3f7", "message": "add matchIfMissing", "committedDate": "2020-07-16T15:24:17Z", "type": "commit"}, {"oid": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "message": "format", "committedDate": "2020-07-17T00:04:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456197099", "bodyText": "What do you think about making this compileOnly, and adding @ConditionalClass(<the exporter class>) to the configuration class. Then it would only get configured if users add the logging exporter to their classpath. And then we could do similar approach for OTLP, Jaeger and Zipkin exporters.\nThis is how Spring Boot Actuator auto configures micrometer registries that user has on their classpath, e.g. checkout https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/newrelic/NewRelicMetricsExportAutoConfiguration.java#L54\nThis doesn't need to be done in this PR certainly, just an idea for future stuff.", "author": "trask", "createdAt": "2020-07-17T03:24:51Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -0,0 +1,41 @@\n+plugins {\n+  id 'org.springframework.boot' version '2.3.0.RELEASE'\n+  id 'io.spring.dependency-management' version '1.0.9.RELEASE'\n+}\n+\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'\n+\n+bootJar {\n+  enabled = false\n+}\n+\n+dependencies {\n+  implementation 'org.springframework.boot:spring-boot-autoconfigure'\n+  implementation \"org.springframework.boot:spring-boot-autoconfigure-processor\"\n+  \n+  testImplementation('org.springframework.boot:spring-boot-starter-test') {\n+    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n+  }\n+  \n+  implementation 'org.springframework.boot:spring-boot-starter-web'\n+  implementation project(':instrumentation-core:spring:spring-webmvc-3.1')\n+  implementation project(':instrumentation-core:spring:spring-web-3.1')\n+  \n+  implementation 'org.springframework.boot:spring-boot-starter-webflux'\n+  implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n+  \n+  api deps.opentelemetryApi \n+  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MzUxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456483518", "bodyText": "I have this pr that added exporter support to this project. I'll make this change there https://github.com/mabdinur/opentelemetry-java-instrumentation/pull/5/files", "author": "mabdinur", "createdAt": "2020-07-17T14:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMjQ0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456202442", "bodyText": "and two other places \"Open Telemetry\" --> \"OpenTelemetry\"\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Auto-configures OpenTelemetry. Enables Open Telementry Tracing in Spring applications by\n          \n          \n            \n             * Auto-configures OpenTelemetry. Enables OpenTelementry Tracing in Spring applications by", "author": "trask", "createdAt": "2020-07-17T03:47:14Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/EnableOpenTelemetryTracing.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Auto-configures OpenTelemetry. Enables Open Telementry Tracing in Spring applications by", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNTkyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456205926", "bodyText": "Also I would remove by completing a component scan it's obvious from the annotatinos", "author": "anuraaga", "createdAt": "2020-07-17T04:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMjQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMjg5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456202895", "bodyText": "I think change property from tracerName to name.\nThis seems more natural to me:\nopentelemetry.trace.tracer.name\ncompared to:\nopentelemetry.trace.tracer.tracerName", "author": "trask", "createdAt": "2020-07-17T03:49:28Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for OpenTelemetry Tracer\n+ *\n+ * <p>Configures LoggingExporter and sets default tracer name\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.tracer\")\n+public final class TracerProperties {\n+\n+  private String tracerName = \"otel-spring-tracer\";\n+  private boolean loggingExporterEnabled = true;\n+\n+  public String getTracerName() {", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMzkwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456203909", "bodyText": "this would allow users to bring their own Tracer\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Tracer tracer() throws Exception {\n          \n          \n            \n              @ConditionalOnMissingBean\n          \n          \n            \n              public Tracer tracer() throws Exception {", "author": "trask", "createdAt": "2020-07-17T03:54:03Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Create an {@link io.opentelemetry.trace.Tracer} bean\n+ *\n+ * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n+ * using the LoggingSpanExporter\n+ */\n+@Configuration\n+@EnableConfigurationProperties(TracerProperties.class)\n+public class TracerAutoConfiguration {\n+\n+  @Autowired TracerProperties tracerProperties;\n+\n+  @Bean\n+  public Tracer tracer() throws Exception {", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NTIyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456155221", "bodyText": "Processor should be annotationProcessor not implementation", "author": "anuraaga", "createdAt": "2020-07-17T00:42:22Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -0,0 +1,41 @@\n+plugins {\n+  id 'org.springframework.boot' version '2.3.0.RELEASE'\n+  id 'io.spring.dependency-management' version '1.0.9.RELEASE'\n+}\n+\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'\n+\n+bootJar {\n+  enabled = false\n+}\n+\n+dependencies {\n+  implementation 'org.springframework.boot:spring-boot-autoconfigure'\n+  implementation \"org.springframework.boot:spring-boot-autoconfigure-processor\"", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjAwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206005", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Create an {@link io.opentelemetry.trace.Tracer} bean\n          \n          \n            \n             * Create an {@link io.opentelemetry.trace.Tracer}.", "author": "anuraaga", "createdAt": "2020-07-17T04:03:04Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Create an {@link io.opentelemetry.trace.Tracer} bean", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjIyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206229", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configures RestTemplateBeanPostProcessor bean */\n          \n          \n            \n            /** Configures {@link RestTemplate} for tracing. */", "author": "anuraaga", "createdAt": "2020-07-17T04:04:03Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.HttpClientsProperties;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.client.RestTemplate;\n+\n+/** Configures RestTemplateBeanPostProcessor bean */", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjI2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206263", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Configuration for the tracing instrumentation of HTTP clients\n          \n          \n            \n             * Configuration for the tracing instrumentation of HTTP clients.", "author": "anuraaga", "createdAt": "2020-07-17T04:04:12Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/HttpClientsProperties.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for the tracing instrumentation of HTTP clients", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjMwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206303", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * does not exist in application context\n          \n          \n            \n             * does not exist in application context.", "author": "anuraaga", "createdAt": "2020-07-17T04:04:26Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/HttpClientsProperties.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for the tracing instrumentation of HTTP clients\n+ *\n+ * <p>Sets default value of opentelemetry.trace.httpclients.enabled to true if the configuration\n+ * does not exist in application context", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjM4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206389", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Adds Open Telemetry instrumentation to RestTemplate beans after initialization */\n          \n          \n            \n            /** Adds Open Telemetry instrumentation to {@link RestTemplate} upon initialization. */", "author": "anuraaga", "createdAt": "2020-07-17T04:04:50Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.httpclients.RestTemplateInterceptor;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.web.client.RestTemplate;\n+\n+/** Adds Open Telemetry instrumentation to RestTemplate beans after initialization */", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjU1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configures RestTemplateBeanPostProcessor bean */\n          \n          \n            \n            /** Configures {@link WebClient} for tracing. */", "author": "anuraaga", "createdAt": "2020-07-17T04:05:26Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.HttpClientsProperties;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/** Configures RestTemplateBeanPostProcessor bean */", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjcxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206713", "bodyText": "I don't think we need this sort of javadoc on private classes, but we can merge them into the autoconfiguration classes.", "author": "anuraaga", "createdAt": "2020-07-17T04:06:12Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * Adds Open Telemetry instrumentation to WebClient beans after initialization", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjczNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public WebClientBeanPostProcessor(Tracer tracer) {\n          \n          \n            \n              WebClientBeanPostProcessor(Tracer tracer) {", "author": "anuraaga", "createdAt": "2020-07-17T04:06:20Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.webclient;\n+\n+import io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * Adds Open Telemetry instrumentation to WebClient beans after initialization\n+ *\n+ * <p>Inspired by: <a\n+ * href=\"https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientAutoConfiguration.java\">Spring\n+ * Cloud Sleuth</a>\n+ */\n+final class WebClientBeanPostProcessor implements BeanPostProcessor {\n+\n+  private final Tracer tracer;\n+\n+  public WebClientBeanPostProcessor(Tracer tracer) {", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjgwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206809", "bodyText": "Beleive this can be package private", "author": "anuraaga", "createdAt": "2020-07-17T04:06:45Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.httpclients.resttemplate;\n+\n+import io.opentelemetry.instrumentation.spring.httpclients.RestTemplateInterceptor;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.web.client.RestTemplate;\n+\n+/** Adds Open Telemetry instrumentation to RestTemplate beans after initialization */\n+public final class RestTemplateBeanPostProcessor implements BeanPostProcessor {", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjkwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r456206904", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configures WebMVCFilter bean */\n          \n          \n            \n            /** Configures {@link WebMVCFilter} for tracing. */", "author": "anuraaga", "createdAt": "2020-07-17T04:07:13Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/webmvc/WebMVCFilterAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.webmvc;\n+\n+import io.opentelemetry.instrumentation.springwebmvc.WebMVCTracingFilter;\n+import io.opentelemetry.trace.Tracer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/** Configures WebMVCFilter bean */", "originalCommit": "e43188b8a84e963a375b4222ec05eb8d1d3fa9f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1b62c9c835a4b6e8c9d97c616e25dec7df70af9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f1b62c9c835a4b6e8c9d97c616e25dec7df70af9", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-17T05:27:11Z", "type": "commit"}, {"oid": "6614592e6935f04c1aeeff00c0f504705c097aee", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6614592e6935f04c1aeeff00c0f504705c097aee", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/EnableOpenTelemetryTracing.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-17T14:13:07Z", "type": "commit"}, {"oid": "56d249e08dcd2afb6c01864f5fe54ebe2b5f60a9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/56d249e08dcd2afb6c01864f5fe54ebe2b5f60a9", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientAutoConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-17T14:16:41Z", "type": "commit"}, {"oid": "e1ef1ad4eb365cd2141cdf04e089aaa5e4368850", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1ef1ad4eb365cd2141cdf04e089aaa5e4368850", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-17T14:38:43Z", "type": "commit"}, {"oid": "75d08c2e421f540c5ad72d41c9be03df911213bc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/75d08c2e421f540c5ad72d41c9be03df911213bc", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateAutoConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-17T14:42:22Z", "type": "commit"}, {"oid": "b00bbff7f1c2443942b5cb390ece1cac61f273d1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b00bbff7f1c2443942b5cb390ece1cac61f273d1", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/webclient/WebClientBeanPostProcessor.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-17T14:42:35Z", "type": "commit"}, {"oid": "adb18424e0b512629f91e6b8a736d5cdc638ccea", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/adb18424e0b512629f91e6b8a736d5cdc638ccea", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/webmvc/WebMVCFilterAutoConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-17T14:45:12Z", "type": "commit"}, {"oid": "36cf1f5846b08015aeee534e68869ec88fd0049a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/36cf1f5846b08015aeee534e68869ec88fd0049a", "message": "clean up java docs and properties", "committedDate": "2020-07-17T14:51:45Z", "type": "commit"}, {"oid": "3a9059cfe3f21b64e83beb9d246daf04a73917de", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3a9059cfe3f21b64e83beb9d246daf04a73917de", "message": "clean up and format", "committedDate": "2020-07-17T15:00:19Z", "type": "commit"}, {"oid": "63d7b278fa0e48c5c677b9913afcd4fe682ee62d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63d7b278fa0e48c5c677b9913afcd4fe682ee62d", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/HttpClientsProperties.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-17T15:01:03Z", "type": "commit"}, {"oid": "883a06d2a04efa7c2060ff3bbe6089a4fa4459e5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/883a06d2a04efa7c2060ff3bbe6089a4fa4459e5", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-07-17T15:07:18Z", "type": "commit"}, {"oid": "389dd7ea6dc8a2d7607317882d1d62d8f0bb5465", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/389dd7ea6dc8a2d7607317882d1d62d8f0bb5465", "message": "change annotationprocessor", "committedDate": "2020-07-17T15:21:15Z", "type": "commit"}, {"oid": "5cd531e2a827684f328913e426669623d0cec2b6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5cd531e2a827684f328913e426669623d0cec2b6", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/HttpClientsProperties.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-17T15:45:36Z", "type": "commit"}, {"oid": "871f72123362fddb341e12f152a10da78780318b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/871f72123362fddb341e12f152a10da78780318b", "message": "Update RestTemplateAutoConfiguration.java", "committedDate": "2020-07-17T17:05:51Z", "type": "commit"}]}