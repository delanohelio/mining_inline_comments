{"pr_number": 115, "pr_title": "Experimental Jaeger integration", "pr_createdAt": "2020-01-31T18:54:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115", "timeline": [{"oid": "4bddf7e54f9387680dc33dab05987670128d340e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4bddf7e54f9387680dc33dab05987670128d340e", "message": "Added simple exporter and config framework", "committedDate": "2020-01-31T14:28:23Z", "type": "commit"}, {"oid": "b3adf03bcff0456b1f440ec1fd44992f0656b491", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b3adf03bcff0456b1f440ec1fd44992f0656b491", "message": "First working version", "committedDate": "2020-01-31T18:42:43Z", "type": "commit"}, {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/55faebd22cc54cb9fd460beaed95a9860d1f4b50", "message": "Updated README", "committedDate": "2020-01-31T18:46:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzMzkzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373633938", "bodyText": "thank you for adding a real README!!", "author": "trask", "createdAt": "2020-01-31T18:58:24Z", "path": "README.md", "diffHunk": "@@ -1,2 +1,41 @@\n-# opentelemetry-auto-instr-java\n-Auto-Instrumentation for Java (per OTEP 0001)\n+# OpenTelemetry Automatic Java Agent\n+\n+## Notice - Work in Progress!\n+*This project is still in the early phases of development and is not yet stable.* You are welcome to experiment with it, \n+but we strongly discourage any production use!\n+\n+## Introduction\n+This project uses a technique known as bytecode instrumentation to add tracing to a Java program.\n+Simply put, we provide an agent that can be attached to any Java program and dynamically adds code to enable tracing. \n+\n+## Using the agent\n+As mentioned above, this project is in a very early phase of development and not yet stable. \n+However, you can try it on your Java program by following these instructions.\n+\n+### Prerequisites\n+* Java 8 to Java 11 \n+* Gradle 6.0\n+* Jaeger 1.16\n+* Git (reasonably current version)\n+\n+### Downloading and building\n+```git clone https://github.com/open-telemetry/opentelemetry-auto-instr-java.git```\n+\n+```gradle assemble```\n+\n+### Running \n+The instrumentation agent is enabled using the -javaagent flag to the JVM. Configuration parameters are passed \n+as Java system properties (-D flags) or as environment variables. This is an example of how to run\n+the agent on a java program:\n+\n+```java -javaagent:$OTHOME/java-agent/build/libs/java-agent-0.1.0-SNAPSHOT.jar -Dota.exporter=jaeger -Dota.jaeger.host=localhost -Dota.jaeger.port=14250 -Dota.jaeger.service=shopping -jar myprogram.jar```\n+\n+#### Configuration parameters (subject to change!)\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n+ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+ota.jaeger.service | OTA_JAEGER_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n+\n+These parameter names are very likely to change over time, so please check back here when trying out a new version!", "originalCommit": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNDM1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373634357", "bodyText": "i like the ota abbreviation", "author": "trask", "createdAt": "2020-01-31T18:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzMzkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNTQ0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373635443", "bodyText": "check out io.opentelemetry.auto.api.Config in case there is overlap with this", "author": "trask", "createdAt": "2020-01-31T19:01:57Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/config/AgentConfig.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.auto.config;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class AgentConfig {\n+  private static ConfigProvider defaultProvider =\n+      new StackedConfigProvider(\n+          new SystemPropertyConfigProvider(), new EnvironmentConfigProvider());\n+\n+  public static ConfigProvider getDefault() {\n+    return defaultProvider;\n+  }\n+\n+  @VisibleForTesting\n+  protected static void setDefault(final ConfigProvider provider) {\n+    defaultProvider = provider;\n+  }\n+\n+  public static class EnvironmentConfigProvider implements ConfigProvider {\n+    @Override\n+    public String get(final String key) {\n+      return System.getenv(key.toUpperCase().replace(\".\", \"_\"));\n+    }\n+  }\n+\n+  public static class StackedConfigProvider implements ConfigProvider {\n+    private final List<ConfigProvider> children;\n+\n+    public StackedConfigProvider(final List<ConfigProvider> children) {\n+      this.children = children;\n+    }\n+\n+    public StackedConfigProvider(final ConfigProvider... providers) {\n+      this(Arrays.asList(providers));\n+    }\n+\n+    @Override\n+    public String get(final String key) {\n+      for (final ConfigProvider cp : children) {\n+        final String value = cp.get(key);\n+        if (value != null) {\n+          return value;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  public static class SystemPropertyConfigProvider implements ConfigProvider {\n+    @Override\n+    public String get(final String key) {\n+      return System.getProperty(key);\n+    }\n+  }\n+}", "originalCommit": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNzM3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373637376", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (host == null) {\n          \n          \n            \n                if (ipStr == null) {", "author": "trask", "createdAt": "2020-01-31T19:06:41Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/exporter/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.opentelemetry.auto.tooling.exporter;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.config.AgentConfig;\n+import io.opentelemetry.auto.config.ConfigProvider;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+\n+  private static final String HOST_CONFIG = \"ota.jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"ota.jaeger.port\";\n+\n+  private static final String SERVICE = \"ota.jaeger.service\";\n+\n+  @Override\n+  public SpanExporter newExporter() throws ExporterConfigException {\n+    final ConfigProvider config = AgentConfig.getDefault();\n+    final String host = config.get(HOST_CONFIG);\n+    if (host == null) {\n+      throw new ExporterConfigException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final String ipStr = config.get(PORT_CONFIG);\n+    if (host == null) {", "originalCommit": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNTY3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373705679", "bodyText": "Done.", "author": "prydin", "createdAt": "2020-01-31T22:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNzM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzODEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373638106", "bodyText": "i think clearer to isolate this try catch just around the parseInt", "author": "trask", "createdAt": "2020-01-31T19:08:25Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/exporter/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.opentelemetry.auto.tooling.exporter;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.config.AgentConfig;\n+import io.opentelemetry.auto.config.ConfigProvider;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+\n+  private static final String HOST_CONFIG = \"ota.jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"ota.jaeger.port\";\n+\n+  private static final String SERVICE = \"ota.jaeger.service\";\n+\n+  @Override\n+  public SpanExporter newExporter() throws ExporterConfigException {\n+    final ConfigProvider config = AgentConfig.getDefault();\n+    final String host = config.get(HOST_CONFIG);\n+    if (host == null) {\n+      throw new ExporterConfigException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final String ipStr = config.get(PORT_CONFIG);\n+    if (host == null) {\n+      throw new ExporterConfigException(PORT_CONFIG + \" must be specified\");\n+    }\n+    String service = config.get(SERVICE);\n+    if (service == null) {\n+      service = \"(unknown)\";\n+    }\n+    try {\n+      final int port = Integer.parseInt(ipStr);\n+      final ManagedChannel jaegerChannel =\n+          ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n+      return JaegerGrpcSpanExporter.newBuilder()\n+          .setServiceName(service)\n+          .setChannel(jaegerChannel)\n+          .setDeadline(30000)\n+          .build();\n+    } catch (final NumberFormatException e) {", "originalCommit": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzODcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373638727", "bodyText": "check out io.opentelemetry.auto.api.ConfigTest in case there is overlap with this", "author": "trask", "createdAt": "2020-01-31T19:09:55Z", "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/test/ConfigTest.groovy", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.opentelemetry.auto.test\n+\n+import io.opentelemetry.auto.config.AgentConfig\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+\n+class ConfigTest extends AgentSpecification {", "originalCommit": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzOTA3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373639073", "bodyText": "is this needed?", "author": "trask", "createdAt": "2020-01-31T19:10:46Z", "path": "instrumentation/ratpack-1.4/ratpack-1.4.gradle", "diffHunk": "@@ -31,6 +31,14 @@ testSets {\n dependencies {\n   main_java8CompileOnly group: 'io.ratpack', name: 'ratpack-core', version: '1.4.0'\n \n+  main_java8CompileOnly(group: 'com.google.guava', name: 'guava') {\n+    version {\n+      // force to use ratpack's guava version, otherwise it uses later version brought in by :agent-tooling\n+      strictly '20.0'\n+    }\n+  }\n+\n+", "originalCommit": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNTU4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373705581", "bodyText": "No it's not! :)", "author": "prydin", "createdAt": "2020-01-31T22:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzOTA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MTcyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373641728", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Java 8 to Java 11 \n          \n          \n            \n            * Java 8 for building (Java 7 to Java 13 are supported at runtime)", "author": "trask", "createdAt": "2020-01-31T19:16:46Z", "path": "README.md", "diffHunk": "@@ -1,2 +1,41 @@\n-# opentelemetry-auto-instr-java\n-Auto-Instrumentation for Java (per OTEP 0001)\n+# OpenTelemetry Automatic Java Agent\n+\n+## Notice - Work in Progress!\n+*This project is still in the early phases of development and is not yet stable.* You are welcome to experiment with it, \n+but we strongly discourage any production use!\n+\n+## Introduction\n+This project uses a technique known as bytecode instrumentation to add tracing to a Java program.\n+Simply put, we provide an agent that can be attached to any Java program and dynamically adds code to enable tracing. \n+\n+## Using the agent\n+As mentioned above, this project is in a very early phase of development and not yet stable. \n+However, you can try it on your Java program by following these instructions.\n+\n+### Prerequisites\n+* Java 8 to Java 11 ", "originalCommit": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1Nzc0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373657746", "bodyText": "using the existing Config class, can this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final String exporter = config.get(EXPORTER);\n          \n          \n            \n                  final String exporter = Config.getSettingFromEnvironment(EXPORTER);", "author": "trask", "createdAt": "2020-01-31T19:53:46Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -2,21 +2,46 @@\n \n import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.api.Config;\n+import io.opentelemetry.auto.config.AgentConfig;\n+import io.opentelemetry.auto.config.ConfigProvider;\n import io.opentelemetry.auto.instrumentation.api.AgentTracer;\n+import io.opentelemetry.auto.tooling.exporter.ExporterConfigException;\n+import io.opentelemetry.auto.tooling.exporter.ExporterRegistry;\n+import io.opentelemetry.auto.tooling.exporter.SpanExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n import io.opentelemetry.trace.Tracer;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class TracerInstaller {\n+  private static final String EXPORTER = \"ota.exporter\";\n+\n   /** Register agent tracer if no agent tracer is already registered. */\n   public static synchronized void installAgentTracer() {\n     if (Config.get().isTraceEnabled()) {\n+      // Try to create an exporter\n+      final ConfigProvider config = AgentConfig.getDefault();\n+      final String exporter = config.get(EXPORTER);", "originalCommit": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f13397720754410279bfc9c45e25fa0606e40a16", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f13397720754410279bfc9c45e25fa0606e40a16", "message": "Changes according to @trask suggestions", "committedDate": "2020-01-31T22:04:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNzkzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373707936", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String EXPORTER = \"exporter\";", "author": "trask", "createdAt": "2020-01-31T22:10:23Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -15,14 +13,14 @@\n \n @Slf4j\n public class TracerInstaller {\n-  private static final String EXPORTER = \"ota.exporter\";\n+  private static final String EXPORTER = \"exporter\";", "originalCommit": "f13397720754410279bfc9c45e25fa0606e40a16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwOTA2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373709063", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                exporter = properties.getProperty(EXPORTER, null);\n          \n          \n            \n                exporter = properties.getProperty(EXPORTER, parent.exporter);", "author": "trask", "createdAt": "2020-01-31T22:13:55Z", "path": "trace-api/src/main/java/io/opentelemetry/auto/api/Config.java", "diffHunk": "@@ -157,6 +163,8 @@\n \n   // Read order: Properties -> Parent\n   private Config(final Properties properties, final Config parent) {\n+    exporter = properties.getProperty(EXPORTER, null);", "originalCommit": "f13397720754410279bfc9c45e25fa0606e40a16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwOTEyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373709124", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                serviceName = properties.getProperty(SERVICE, \"(unknown)\");\n          \n          \n            \n                serviceName = properties.getProperty(SERVICE, parent.serviceName);", "author": "trask", "createdAt": "2020-01-31T22:14:08Z", "path": "trace-api/src/main/java/io/opentelemetry/auto/api/Config.java", "diffHunk": "@@ -157,6 +163,8 @@\n \n   // Read order: Properties -> Parent\n   private Config(final Properties properties, final Config parent) {\n+    exporter = properties.getProperty(EXPORTER, null);\n+    serviceName = properties.getProperty(SERVICE, \"(unknown)\");", "originalCommit": "f13397720754410279bfc9c45e25fa0606e40a16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwOTI3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373709270", "bodyText": "default value is already applied in Config", "author": "trask", "createdAt": "2020-01-31T22:14:38Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/exporter/JaegerExporterFactory.java", "diffHunk": "@@ -2,45 +2,42 @@\n \n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n-import io.opentelemetry.auto.config.AgentConfig;\n-import io.opentelemetry.auto.config.ConfigProvider;\n+import io.opentelemetry.auto.api.Config;\n import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n import io.opentelemetry.sdk.trace.export.SpanExporter;\n \n public class JaegerExporterFactory implements SpanExporterFactory {\n \n-  private static final String HOST_CONFIG = \"ota.jaeger.host\";\n+  private static final String HOST_CONFIG = \"jaeger.host\";\n \n-  private static final String PORT_CONFIG = \"ota.jaeger.port\";\n-\n-  private static final String SERVICE = \"ota.jaeger.service\";\n+  private static final String PORT_CONFIG = \"jaeger.port\";\n \n   @Override\n   public SpanExporter newExporter() throws ExporterConfigException {\n-    final ConfigProvider config = AgentConfig.getDefault();\n-    final String host = config.get(HOST_CONFIG);\n+    final String host = Config.getSettingFromEnvironment(HOST_CONFIG, null);\n     if (host == null) {\n       throw new ExporterConfigException(HOST_CONFIG + \" must be specified\");\n     }\n-    final String ipStr = config.get(PORT_CONFIG);\n-    if (host == null) {\n+    final String ipStr = Config.getSettingFromEnvironment(PORT_CONFIG, null);\n+    if (ipStr == null) {\n       throw new ExporterConfigException(PORT_CONFIG + \" must be specified\");\n     }\n-    String service = config.get(SERVICE);\n+    String service = Config.get().getServiceName();\n     if (service == null) {\n       service = \"(unknown)\";\n     }", "originalCommit": "f13397720754410279bfc9c45e25fa0606e40a16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac2a738b40781d1236bc17abcaadbe81f785c011", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac2a738b40781d1236bc17abcaadbe81f785c011", "message": "Update README.md\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-31T22:17:06Z", "type": "commit"}, {"oid": "a012028abcf20955562b292c8a759cea95ea3503", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a012028abcf20955562b292c8a759cea95ea3503", "message": "Update trace-api/src/main/java/io/opentelemetry/auto/api/Config.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-31T22:17:59Z", "type": "commit"}, {"oid": "1252494fbc0df6fe5967e9e0b6d61695a3ea03ab", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1252494fbc0df6fe5967e9e0b6d61695a3ea03ab", "message": "Update trace-api/src/main/java/io/opentelemetry/auto/api/Config.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-31T22:18:06Z", "type": "commit"}, {"oid": "13de69e1a696518485f34231025f591bafa4e412", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/13de69e1a696518485f34231025f591bafa4e412", "message": "Update agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-31T22:18:14Z", "type": "commit"}, {"oid": "42186fc98a160a3771d8ffca0bcbd5512cadcb47", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42186fc98a160a3771d8ffca0bcbd5512cadcb47", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-auto-instr-java into prydin-jaeger", "committedDate": "2020-01-31T22:18:42Z", "type": "commit"}, {"oid": "e3bf8e700d5dca14f7d7fefcbb9f5ac7269a3c29", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e3bf8e700d5dca14f7d7fefcbb9f5ac7269a3c29", "message": "Merge branch 'prydin-jaeger' of https://github.com/prydin/opentelemetry-auto-instr-java into prydin-jaeger", "committedDate": "2020-01-31T22:50:50Z", "type": "commit"}, {"oid": "3553e53c69aedf19d69e8a752cd0d815cef676a6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3553e53c69aedf19d69e8a752cd0d815cef676a6", "message": "Fixed prefix in test", "committedDate": "2020-01-31T23:30:35Z", "type": "commit"}, {"oid": "26445b6d5c173ad4e23d3cb79148caecaa8ff8a2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/26445b6d5c173ad4e23d3cb79148caecaa8ff8a2", "message": "Adjusted tests for new property prefix", "committedDate": "2020-02-01T02:11:47Z", "type": "commit"}, {"oid": "a91bae9bf7957c2098a2ed708e914f06f6e90b64", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a91bae9bf7957c2098a2ed708e914f06f6e90b64", "message": "Changes to README", "committedDate": "2020-02-01T12:50:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NzM2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373797360", "bodyText": "this isn't needed, default value is already applied in Config", "author": "trask", "createdAt": "2020-02-01T19:25:50Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/exporter/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.opentelemetry.auto.tooling.exporter;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.api.Config;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+\n+  private static final String HOST_CONFIG = \"jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"jaeger.port\";\n+\n+  @Override\n+  public SpanExporter newExporter() throws ExporterConfigException {\n+    final String host = Config.getSettingFromEnvironment(HOST_CONFIG, null);\n+    if (host == null) {\n+      throw new ExporterConfigException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final String ipStr = Config.getSettingFromEnvironment(PORT_CONFIG, null);\n+    if (ipStr == null) {\n+      throw new ExporterConfigException(PORT_CONFIG + \" must be specified\");\n+    }\n+    String service = Config.get().getServiceName();\n+    if (service == null) {\n+      service = \"(unknown)\";\n+    }", "originalCommit": "a91bae9bf7957c2098a2ed708e914f06f6e90b64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d77f95ada98f68e478f34dc23c897cadfc9480e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6d77f95ada98f68e478f34dc23c897cadfc9480e", "message": "Removed redundant null-checking", "committedDate": "2020-02-01T19:55:55Z", "type": "commit"}]}