{"pr_number": 329, "pr_title": "Jetty-based benchmark for memory usage", "pr_createdAt": "2020-04-16T15:49:59Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329", "timeline": [{"oid": "19fc7a6870de0cb988914c979c7d3f928bde425d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/19fc7a6870de0cb988914c979c7d3f928bde425d", "message": "Jetty-based benchmark for memory usage", "committedDate": "2020-04-16T15:38:53Z", "type": "commit"}, {"oid": "cb9ffd6494593c7667809c906084705ece6d6b7d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cb9ffd6494593c7667809c906084705ece6d6b7d", "message": "Fix formatting", "committedDate": "2020-04-16T16:13:48Z", "type": "commit"}, {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/623be2af263ce74e31d1d39c3c575f483c16003f", "message": "Fix headers", "committedDate": "2020-04-16T16:40:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MDEwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409840100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",\n          \n      \n    \n    \n  \n\nIs this accidental duplicate?", "author": "trask", "createdAt": "2020-04-16T20:50:24Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/HttpBenchmark.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import io.opentelemetry.benchmark.classes.HttpClass;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.util.component.AbstractLifeCycle;\n+import org.openjdk.jmh.annotations.*;\n+\n+public class HttpBenchmark {\n+\n+  @State(Scope.Benchmark)\n+  public static class BenchmarkState {\n+    @Setup(Level.Trial)\n+    public void doSetup() {\n+      try {\n+        jettyServer = new HttpClass().buildJettyServer();\n+        jettyServer.start();\n+        // Make sure it's actually running\n+        while (!AbstractLifeCycle.STARTED.equals(jettyServer.getState())) {\n+          Thread.sleep(500);\n+        }\n+      } catch (Exception e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    @TearDown(Level.Trial)\n+    public void doTearDown() {\n+      try {\n+        jettyServer.stop();\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      } finally {\n+        jettyServer.destroy();\n+      }\n+    }\n+\n+    HttpClass http = new HttpClass();\n+    Server jettyServer;\n+  }\n+\n+  @Benchmark\n+  public void testMakingRequest(BenchmarkState state) {\n+    state.http.executeRequest();\n+  }\n+\n+  @Fork(\n+      jvmArgsAppend = {\n+        \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",\n+        \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",", "originalCommit": "623be2af263ce74e31d1d39c3c575f483c16003f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4ODA5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409888093", "bodyText": "This is cool, I hadn't seen custom profiler before.", "author": "trask", "createdAt": "2020-04-16T22:36:24Z", "path": "benchmark/benchmark.gradle", "diffHunk": "@@ -25,6 +30,7 @@ jmh {\n \n //  profilers = ['stack:lines=5;detailLine=true;period=5;excludePackages=true']\n   // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]\n+  profilers = ['io.opentelemetry.benchmark.UsedMemoryProfiler', 'gc']", "originalCommit": "623be2af263ce74e31d1d39c3c575f483c16003f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTE4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409889183", "bodyText": "Can you use Intellij settings from https://github.com/open-telemetry/opentelemetry-auto-instr-java/blob/master/CONTRIBUTING.md#intellij-idea?", "author": "trask", "createdAt": "2020-04-16T22:39:17Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.openjdk.jmh.*;", "originalCommit": "623be2af263ce74e31d1d39c3c575f483c16003f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTk5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409889996", "bodyText": "The special character (middot?) worries me a little, but I should really stop being afraid of unicode, so let's keep it \ud83d\udc4d", "author": "trask", "createdAt": "2020-04-16T22:41:32Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.openjdk.jmh.*;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+import org.openjdk.jmh.profile.*;\n+import org.openjdk.jmh.results.*;\n+\n+public class UsedMemoryProfiler implements InternalProfiler {\n+  private long totalHeapBefore;\n+  private long usedHeapBefore;\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Used memory heap profiler\";\n+  }\n+\n+  @Override\n+  public void beforeIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams) {\n+    System.gc();\n+    System.runFinalization();\n+\n+    totalHeapBefore = Runtime.getRuntime().totalMemory();\n+    usedHeapBefore = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+  }\n+\n+  @Override\n+  public Collection<? extends Result> afterIteration(\n+      BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n+\n+    long totalHeap = Runtime.getRuntime().totalMemory();\n+    long usedHeap = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+\n+    Collection<ScalarResult> results = new ArrayList<>();\n+    results.add(\n+        new ScalarResult(\"\u00b7heap.total.before\", totalHeapBefore, \"bytes\", AggregationPolicy.AVG));", "originalCommit": "623be2af263ce74e31d1d39c3c575f483c16003f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyNzk3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r410227979", "bodyText": "I added it only because I saw it being used in JMH profiler's output, but I am not a huge fan of it either. Actually I think it is going to be cleaner without it. Also, I removed the \"change\" ones, since they might be confusing (they are just taken by subtracting two measurements, gc profiler is much cleaner in this regards)", "author": "pmm-sumo", "createdAt": "2020-04-17T13:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MDg0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409890845", "bodyText": "Should we bubble up the exception instead of catch/log? Would it fail the test? (is that good?)", "author": "trask", "createdAt": "2020-04-16T22:43:52Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      try {\n+        Thread.sleep(10);\n+      } catch (Exception e) {\n+      }\n+      resp.setContentType(\"application/json\");\n+      resp.setStatus(HttpServletResponse.SC_OK);\n+      resp.getWriter().println(\"{ \\\"status\\\": \\\"ok\\\"}\");\n+    }\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      doGet(req, resp);\n+    }\n+  }\n+\n+  private HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();\n+\n+  public void executeRequest() {\n+    String url = \"http://localhost:\" + port + contextPath;\n+\n+    try {\n+      HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(url));\n+      request.setThrowExceptionOnExecuteError(false);\n+      request.execute();\n+    } catch (Exception ex) {\n+      ex.printStackTrace();", "originalCommit": "623be2af263ce74e31d1d39c3c575f483c16003f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzNzQ3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r410237478", "bodyText": "I think it's going to be cleaner if we go the bubble up path", "author": "pmm-sumo", "createdAt": "2020-04-17T13:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MDg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MTM4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409891385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public void init(final ServletConfig config) throws ServletException {\n          \n          \n            \n                  super.init(config);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nLooks like this can be removed", "author": "trask", "createdAt": "2020-04-16T22:45:29Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+", "originalCommit": "623be2af263ce74e31d1d39c3c575f483c16003f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MTcyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409891722", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n          \n          \n            \n                    throws ServletException, IOException {\n          \n          \n            \n                  doGet(req, resp);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nLooks like this can be removed", "author": "trask", "createdAt": "2020-04-16T22:46:18Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      try {\n+        Thread.sleep(10);\n+      } catch (Exception e) {\n+      }\n+      resp.setContentType(\"application/json\");\n+      resp.setStatus(HttpServletResponse.SC_OK);\n+      resp.getWriter().println(\"{ \\\"status\\\": \\\"ok\\\"}\");\n+    }\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      doGet(req, resp);\n+    }", "originalCommit": "623be2af263ce74e31d1d39c3c575f483c16003f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "561e44e4cf48d20f559f3b6e40504bf60cc319b9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/561e44e4cf48d20f559f3b6e40504bf60cc319b9", "message": "Remove unnecessary code\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-04-17T09:55:53Z", "type": "commit"}, {"oid": "1312abc197c07b668b79975d79b82245d2f416b6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1312abc197c07b668b79975d79b82245d2f416b6", "message": "Remove unnecessary code\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-04-17T09:56:16Z", "type": "commit"}, {"oid": "83e023a656d27643ea1f03cd46e304b0f91b219b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/83e023a656d27643ea1f03cd46e304b0f91b219b", "message": "Remove unnecessary code\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-04-17T09:56:35Z", "type": "commit"}, {"oid": "2fb6811e88ab869e6a8bcd1b0b8c9f3d2791aaed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2fb6811e88ab869e6a8bcd1b0b8c9f3d2791aaed", "message": "Formatting and code cleanup", "committedDate": "2020-04-17T13:51:40Z", "type": "commit"}, {"oid": "6344a6bd77e2880f6dc9ce3f33dbb3b5edb69a0b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6344a6bd77e2880f6dc9ce3f33dbb3b5edb69a0b", "message": "Formatting fix", "committedDate": "2020-04-17T14:35:43Z", "type": "commit"}, {"oid": "fae90946299b9249d50096bcddff1028f2a03292", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fae90946299b9249d50096bcddff1028f2a03292", "message": "Merge branch 'master' into memory-churn-benchmark", "committedDate": "2020-04-17T16:13:05Z", "type": "commit"}]}