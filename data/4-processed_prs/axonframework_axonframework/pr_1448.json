{"pr_number": 1448, "pr_title": "Axon Micrometer with Tags/Dimensions", "pr_createdAt": "2020-06-15T08:21:18Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1448", "timeline": [{"oid": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "url": "https://github.com/AxonFramework/AxonFramework/commit/7c3e4119c23d259c50db8f55fae62978f9c37ee2", "message": "Metric names enriched with tag key/value pairs. Dimensionality is introduced\n\nAll Axon monitors have been changed to use tags which enables `dimensionality`.\nBefore this change, the axon-micrometer was `hierarchical`, which means it only supported a flat metric names.", "committedDate": "2020-06-14T21:17:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMTY4Mw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440031683", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a capacity monitor with the default system clock\n          \n          \n            \n                 * Creates a capacity monitor with the default system clock.", "author": "smcvb", "createdAt": "2020-06-15T09:02:39Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/CapacityMonitor.java", "diffHunk": "@@ -61,15 +70,43 @@ public static CapacityMonitor buildMonitor(String meterNamePrefix, MeterRegistry\n      *\n      * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n      * @param meterRegistry   The meter registry used to create and register the meters\n+     * @param tagsBuilder     The function used to construct the list of micrometer tags, based on the ingested message\n+     * @return the created capacity monitor\n+     */\n+    public static CapacityMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry,\n+                                               Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+        return buildMonitor(meterNamePrefix, meterRegistry, 10, TimeUnit.MINUTES, tagsBuilder);\n+    }\n+\n+    /**\n+     * Creates a capacity monitor with the default system clock", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMTc1Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440031752", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a capacity monitor with the default system clock\n          \n          \n            \n                 * Creates a capacity monitor with the default system clock.", "author": "smcvb", "createdAt": "2020-06-15T09:02:47Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/CapacityMonitor.java", "diffHunk": "@@ -61,15 +70,43 @@ public static CapacityMonitor buildMonitor(String meterNamePrefix, MeterRegistry\n      *\n      * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n      * @param meterRegistry   The meter registry used to create and register the meters\n+     * @param tagsBuilder     The function used to construct the list of micrometer tags, based on the ingested message\n+     * @return the created capacity monitor\n+     */\n+    public static CapacityMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry,\n+                                               Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+        return buildMonitor(meterNamePrefix, meterRegistry, 10, TimeUnit.MINUTES, tagsBuilder);\n+    }\n+\n+    /**\n+     * Creates a capacity monitor with the default system clock\n+     *\n+     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n+     * @param meterRegistry   The meter registry used to create and register the meters\n      * @param window          The length of the window to measure the capacity over\n      * @param timeUnit        The temporal unit of the time window\n-     * @return the created capacity monitor\n+     * @return the created capacity monitor (with the default tag `payloadType`)\n      */\n     public static CapacityMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry, long window,\n                                                TimeUnit timeUnit) {\n         return buildMonitor(meterNamePrefix, meterRegistry, window, timeUnit, Clock.SYSTEM);\n     }\n \n+    /**\n+     * Creates a capacity monitor with the default system clock", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNjc2Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440036762", "bodyText": "If my mind serves me right, you can do a putIfAbsent on the timeWindowedDurationMeasurementsMap too, like so:\nreturn timeWindowedDurationMeasurementsMap.putIfAbsent(key, new SlidingTimeWindowReservoir(window, timeUnit, clock));", "author": "smcvb", "createdAt": "2020-06-15T09:11:30Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/CapacityMonitor.java", "diffHunk": "@@ -79,26 +116,87 @@ public static CapacityMonitor buildMonitor(String meterNamePrefix, MeterRegistry\n      * @param window          The length of the window to measure the capacity over\n      * @param timeUnit        The temporal unit of the time window\n      * @param clock           The clock used to measure the process time per message\n-     * @return the created capacity monitor\n+     * @return the created capacity monitor (with the default tag `payloadType`)\n      */\n     public static CapacityMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry, long window,\n                                                TimeUnit timeUnit, Clock clock) {\n-        CapacityMonitor capacityMonitor = new CapacityMonitor(window, timeUnit, clock);\n-        meterRegistry.gauge(meterNamePrefix + \".capacity\", capacityMonitor, CapacityMonitor::calculateCapacity);\n-        return capacityMonitor;\n+\n+        return new CapacityMonitor(window, timeUnit, clock, meterNamePrefix, meterRegistry);\n     }\n \n+    /**\n+     * Creates a capacity monitor with the given time window. Uses the provided clock\n+     * to measure process time per message.\n+     *\n+     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n+     * @param meterRegistry   The meter registry used to create and register the meters\n+     * @param window          The length of the window to measure the capacity over\n+     * @param timeUnit        The temporal unit of the time window\n+     * @param clock           The clock used to measure the process time per message\n+     * @param tagsBuilder     The function used to construct the list of micrometer tags, based on the ingested message\n+     * @return the created capacity monitor\n+     */\n+    public static CapacityMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry, long window,\n+                                               TimeUnit timeUnit, Clock clock,\n+                                               Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+\n+        return new CapacityMonitor(window, timeUnit, clock, meterNamePrefix, meterRegistry, tagsBuilder);\n+    }\n+\n+\n+    private CapacityMonitor(long window, TimeUnit timeUnit, Clock clock, String meterNamePrefix,\n+                            MeterRegistry meterRegistry) {\n+        this(window,\n+             timeUnit,\n+             clock,\n+             meterNamePrefix,\n+             meterRegistry,\n+             message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName()));\n+    }\n \n-    private CapacityMonitor(long window, TimeUnit timeUnit, Clock clock) {\n-        this.timeWindowedDurationMeasurements = new SlidingTimeWindowReservoir(window, timeUnit, clock);\n+    private CapacityMonitor(long window, TimeUnit timeUnit, Clock clock, String meterNamePrefix,\n+                            MeterRegistry meterRegistry,\n+                            Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+        this.timeWindowedDurationMeasurementsMap = new ConcurrentHashMap<>();\n         this.timeUnit = timeUnit;\n         this.clock = clock;\n         this.window = window;\n+        this.meterNamePrefix = meterNamePrefix;\n+        this.meterRegistry = meterRegistry;\n+        this.tagsBuilder = tagsBuilder;\n+    }\n+\n+    private SlidingTimeWindowReservoir createIfAbsent(String meterNamePrefix, Tags tags, long window, TimeUnit timeUnit,\n+                                                      Clock clock) {\n+        String key = meterNamePrefix + tags.stream()\n+                                           .map(tag -> tag.getKey() + tag.getValue())\n+                                           .reduce(String::concat)\n+                                           .orElse(\"\");\n+        SlidingTimeWindowReservoir value;\n+        if ((value = timeWindowedDurationMeasurementsMap.get(key)) == null) {", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MTMyNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440091324", "bodyText": "will give it a try Steven, thanks!\nTo give more context behind this map: The metrics in Micrometer is uniquely identified by the combination of the metrics name and tags (key-value). This map is introduced in order to have an independent SlidingTimeWindowReservoir for each metrics/meter.", "author": "idugalic", "createdAt": "2020-06-15T10:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNjc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzOTM1OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440039358", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates an event processor latency monitor\n          \n          \n            \n                 * Creates an event processor latency monitor.", "author": "smcvb", "createdAt": "2020-06-15T09:15:50Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/EventProcessorLatencyMonitor.java", "diffHunk": "@@ -46,19 +65,36 @@ private EventProcessorLatencyMonitor() {\n      * @return the created event processor latency monitor\n      */\n     public static EventProcessorLatencyMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry) {\n-        EventProcessorLatencyMonitor eventProcessorLatencyMonitor = new EventProcessorLatencyMonitor();\n-        Gauge.builder(meterNamePrefix + \".latency\",\n-                      eventProcessorLatencyMonitor,\n-                      EventProcessorLatencyMonitor::calculateLatency).register(meterRegistry);\n-        return eventProcessorLatencyMonitor;\n+        return new EventProcessorLatencyMonitor(meterNamePrefix, meterRegistry);\n+    }\n+\n+    /**\n+     * Creates an event processor latency monitor", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MzAzMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440043031", "bodyText": "When deprecating a method it should be clear in the javadoc what method/logic should replace this one.", "author": "smcvb", "createdAt": "2020-06-15T09:21:50Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/GlobalMetricRegistry.java", "diffHunk": "@@ -118,6 +127,7 @@ public Configurer registerWithConfigurer(Configurer configurer) {\n      * @param name the name under which the EventProcessor should be registered to the registry\n      * @return MessageMonitor to monitor the behavior of an EventProcessor", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MTg0Ng==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440091846", "bodyText": "Yes, the initial idea is to use registerEventProcessor(String name, Function<Message<?>, Iterable> tagsBuilder) instead. I would be fine by removing @deprecated as well.", "author": "idugalic", "createdAt": "2020-06-15T10:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MzAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NzMwOA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440047308", "bodyText": "Understand you're doing this, but I don't think this is overly ideal...\nWhat about we add a toggle in the GlobalMetricRegistry to use dimensions yes/no?\nSo by default, we'd use the old approach, and only if somebody builds a new GlobalMetricRegistry(metricRegistry, {yes-to-dimensions!}) will this dimension logic be added? That way, users can switch it on for the command, event and query bus too through the GlobalMetricRegistry.\nGoing a step further by looking at spring auto configuration, this could be a property to be set on an application.properties/application.yml, making it even easier. Adding this could be done on the MetricsProperties class, but first a subclass Micrometer should be added to specify the config is for Micrometer only.\nWhat do you think?", "author": "smcvb", "createdAt": "2020-06-15T09:29:13Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/GlobalMetricRegistry.java", "diffHunk": "@@ -94,7 +97,13 @@ public Configurer registerWithConfigurer(Configurer configurer) {\n      */\n     public MessageMonitor<? extends Message<?>> registerComponent(Class<?> componentType, String componentName) {\n         if (EventProcessor.class.isAssignableFrom(componentType)) {\n-            return registerEventProcessor(componentName);\n+            // TODO This will introduce a breaking change on the metrics API level, as it will change the name of the metrics.\n+            // The name of the metrics is fixed to \"eventProcessor\" now, and the processor name is not part/prefix of the metrics name any more. It is a meter tag/dimension now.\n+            return registerEventProcessor(EVENT_PROCESSOR_METRICS_NAME,", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3Nzc4NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440077784", "bodyText": "hmm, I guess we can externalize the property to handle this. Please note that this is the only place we are not backward compatible with the metrics API level. Here, we are changing the name of the event processor metrics. For example, the old names were: MyProcessorName1.ingestedCounter ,  MyProcessorName2.ingestedCounter. The new metrics: eventProcessor.ingestedCounter{processorType=MyProcessorName1}, eventProcessor.ingestedCounter{processorType=MyProcessorName2} The thing is that the name-prefix of these metrics is general/fixed now with eventProcessor and the name of the processor is a Tag/Dimension now. So, this externalized property can mark if you want to use old hierarchical names of the event processor metrics, or you use the processor name as a Tag/Dimension (which should be a default, in my opinion, there is more power in it).", "author": "idugalic", "createdAt": "2020-06-15T10:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NzMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2Mjc5NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r441762795", "bodyText": "GlobalMetricRegistry.registerWithConfigurerWithDefaultTags has been added to enable usage of Tags/Dimensions. This is backward compatible. MetricsProperties is altered by adding axon.metrics.micrometer.dimensional property to mark if Dimensions/Tags should be used or not. By default, Dimensions/Tags are NOT used.", "author": "idugalic", "createdAt": "2020-06-17T18:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NzMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMTEwMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r442831101", "bodyText": "Awesome work @idugalic!", "author": "smcvb", "createdAt": "2020-06-19T13:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NzMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0Nzg0MQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440047841", "bodyText": "Any reasons why you aren't providing the tagsBuilder to the EventProcessorLatencyMonitor#buildMonitor method?", "author": "smcvb", "createdAt": "2020-06-15T09:30:07Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/GlobalMetricRegistry.java", "diffHunk": "@@ -133,6 +143,33 @@ public Configurer registerWithConfigurer(Configurer configurer) {\n         return new MultiMessageMonitor<>(monitors);\n     }\n \n+    /**\n+     * Registers new metrics to the registry to monitor an {@link EventProcessor}. The monitor will be registered with\n+     * the registry under the given {@code name}. The returned {@link MessageMonitor} can be installed\n+     * on the event processor to initiate the monitoring.\n+     *\n+     * @param name        The name under which the EventProcessor should be registered to the registry\n+     * @param tagsBuilder The function used to construct the list of micrometer tags, based on the ingested message\n+     * @return The messageMonitor to monitor the behavior of an EventProcessor\n+     */\n+    public MessageMonitor<? super EventMessage<?>> registerEventProcessor(String name,\n+                                                                          Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+        MessageTimerMonitor messageTimerMonitor = MessageTimerMonitor.buildMonitor(name, registry, tagsBuilder);\n+        EventProcessorLatencyMonitor eventProcessorLatencyMonitor = EventProcessorLatencyMonitor.buildMonitor(name,", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NDM5OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440094399", "bodyText": "ahh, good catch. No reason :)", "author": "idugalic", "createdAt": "2020-06-15T10:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0Nzg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0ODMzNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440048334", "bodyText": "Are these needed to be public? If not, I'd suggest to make them private. If yes, than they need javadoc.", "author": "smcvb", "createdAt": "2020-06-15T09:30:55Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/MessageCountingMonitor.java", "diffHunk": "@@ -29,45 +33,69 @@\n  */\n public class MessageCountingMonitor implements MessageMonitor<Message<?>> {\n \n-    private final Counter ingestedCounter;\n-    private final Counter successCounter;\n-    private final Counter failureCounter;\n-    private final Counter processedCounter;\n-    private final Counter ignoredCounter;\n-\n-    private MessageCountingMonitor(Counter ingestedCounter, Counter successCounter, Counter failureCounter,\n-                                   Counter processedCounter, Counter ignoredCounter) {\n-        this.ingestedCounter = ingestedCounter;\n-        this.successCounter = successCounter;\n-        this.failureCounter = failureCounter;\n-        this.processedCounter = processedCounter;\n-        this.ignoredCounter = ignoredCounter;\n+    public static final String INGESTED_COUNTER = \".ingestedCounter\";", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4MzcyMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440083723", "bodyText": "private is fine. It will be changed", "author": "idugalic", "createdAt": "2020-06-15T10:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0ODMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MDA2MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440050060", "bodyText": "At first I thought \"why are you creating new Counters all the time?\", but than I read the javadoc and noticed the MeterRegistery will return an existing one if present.", "author": "smcvb", "createdAt": "2020-06-15T09:34:00Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/MessageCountingMonitor.java", "diffHunk": "@@ -29,45 +33,69 @@\n  */\n public class MessageCountingMonitor implements MessageMonitor<Message<?>> {\n \n-    private final Counter ingestedCounter;\n-    private final Counter successCounter;\n-    private final Counter failureCounter;\n-    private final Counter processedCounter;\n-    private final Counter ignoredCounter;\n-\n-    private MessageCountingMonitor(Counter ingestedCounter, Counter successCounter, Counter failureCounter,\n-                                   Counter processedCounter, Counter ignoredCounter) {\n-        this.ingestedCounter = ingestedCounter;\n-        this.successCounter = successCounter;\n-        this.failureCounter = failureCounter;\n-        this.processedCounter = processedCounter;\n-        this.ignoredCounter = ignoredCounter;\n+    public static final String INGESTED_COUNTER = \".ingestedCounter\";\n+    public static final String SUCCESS_COUNTER = \".successCounter\";\n+    public static final String FAILURE_COUNTER = \".failureCounter\";\n+    public static final String PROCESSED_COUNTER = \".processedCounter\";\n+    public static final String IGNORED_COUNTER = \".ignoredCounter\";\n+\n+    private final String meterNamePrefix;\n+    private final MeterRegistry meterRegistry;\n+    private final Function<Message<?>, Iterable<Tag>> tagsBuilder;\n+\n+    private MessageCountingMonitor(String meterNamePrefix, MeterRegistry meterRegistry) {\n+\n+        this(meterNamePrefix,\n+             meterRegistry,\n+             message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName()));\n+    }\n+\n+\n+    private MessageCountingMonitor(String meterNamePrefix, MeterRegistry meterRegistry,\n+                                   Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+        this.meterNamePrefix = meterNamePrefix;\n+        this.meterRegistry = meterRegistry;\n+        this.tagsBuilder = tagsBuilder;\n     }\n \n     /**\n      * Creates a message counting monitor\n      *\n      * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n      * @param meterRegistry   The meter registry used to create and register the meters\n-     * @return the message counting monitor\n+     * @return the message counting monitor (with the default tag `payloadType`)\n      */\n     public static MessageCountingMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry) {\n-        Counter ingestedCounter = meterRegistry.counter(meterNamePrefix + \".ingestedCounter\");\n-        Counter successCounter = meterRegistry.counter(meterNamePrefix + \".successCounter\");\n-        Counter failureCounter = meterRegistry.counter(meterNamePrefix + \".failureCounter\");\n-        Counter processedCounter = meterRegistry.counter(meterNamePrefix + \".processedCounter\");\n-        Counter ignoredCounter = meterRegistry.counter(meterNamePrefix + \".ignoredCounter\");\n-\n-        return new MessageCountingMonitor(ingestedCounter,\n-                                          successCounter,\n-                                          failureCounter,\n-                                          processedCounter,\n-                                          ignoredCounter);\n+\n+        return new MessageCountingMonitor(meterNamePrefix, meterRegistry);\n+    }\n+\n+    /**\n+     * Creates a message counting monitor\n+     *\n+     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n+     * @param meterRegistry   The meter registry used to create and register the meters\n+     * @param tagsBuilder     The function used to construct the list of micrometer tags, based on the ingested message\n+     * @return the message counting monitor\n+     */\n+    public static MessageCountingMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry,\n+                                                      Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+\n+        return new MessageCountingMonitor(meterNamePrefix, meterRegistry, tagsBuilder);\n     }\n \n     @Override\n     public MonitorCallback onMessageIngested(Message<?> message) {\n+\n+        Iterable<Tag> tags = tagsBuilder.apply(message);\n+        Counter ingestedCounter = meterRegistry.counter(meterNamePrefix + INGESTED_COUNTER, tags);", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NDM4Ng==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440084386", "bodyText": "Yes, MeterRegistery is taking care of this for us. Which is very nice actually. Enables this approach in general.", "author": "idugalic", "createdAt": "2020-06-15T10:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MDA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MTUxOA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440051518", "bodyText": "Might be nice to reference the micrometer Tag class in the javadoc, as now it might be rather ambiguous what's meant with \"tag\".\nThus something like so:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the message timer monitor (with the default tag `payloadType`)\n          \n          \n            \n                 * @return the message timer monitor (with the default {@link Tag} `payloadType`)\n          \n      \n    \n    \n  \n\nDoing this at all the other spots where the Tag class is referenced would be good too I think.", "author": "smcvb", "createdAt": "2020-06-15T09:36:36Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/MessageTimerMonitor.java", "diffHunk": "@@ -34,18 +37,18 @@\n  */\n public class MessageTimerMonitor implements MessageMonitor<Message<?>> {\n \n-    private final Timer allTimer;\n-    private final Timer successTimer;\n-    private final Timer failureTimer;\n-    private final Timer ignoredTimer;\n+    private final String meterNamePrefix;\n+    private final MeterRegistry meterRegistry;\n+    private final Function<Message<?>, Iterable<Tag>> tagsBuilder;\n+\n     private final Clock clock;\n \n     /**\n      * Creates a message timer monitor\n      *\n      * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n      * @param meterRegistry   The meter registry used to create and register the meters\n-     * @return the message timer monitor\n+     * @return the message timer monitor (with the default tag `payloadType`)", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NDczMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440084733", "bodyText": "Agreed", "author": "idugalic", "createdAt": "2020-06-15T10:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MTUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1NTY5Mw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440055693", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a message timer monitor\n          \n          \n            \n                 * Creates a message timer monitor.", "author": "smcvb", "createdAt": "2020-06-15T09:43:41Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/MessageTimerMonitor.java", "diffHunk": "@@ -56,36 +59,78 @@ public static MessageTimerMonitor buildMonitor(String meterNamePrefix, MeterRegi\n      *\n      * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n      * @param meterRegistry   The meter registry used to create and register the meters\n-     * @param clock           The clock used to measure the process time per message\n+     * @param tagsBuilder     The function used to construct the list of micrometer tags, based on the ingested message\n      * @return the message timer monitor\n      */\n+    public static MessageTimerMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry,\n+                                                   Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+        return buildMonitor(meterNamePrefix, meterRegistry, Clock.SYSTEM, tagsBuilder);\n+    }\n+\n+    /**\n+     * Creates a message timer monitor", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1NTc2MQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440055761", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a message timer monitor\n          \n          \n            \n                 * Creates a message timer monitor.", "author": "smcvb", "createdAt": "2020-06-15T09:43:47Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/MessageTimerMonitor.java", "diffHunk": "@@ -56,36 +59,78 @@ public static MessageTimerMonitor buildMonitor(String meterNamePrefix, MeterRegi\n      *\n      * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n      * @param meterRegistry   The meter registry used to create and register the meters\n-     * @param clock           The clock used to measure the process time per message\n+     * @param tagsBuilder     The function used to construct the list of micrometer tags, based on the ingested message\n      * @return the message timer monitor\n      */\n+    public static MessageTimerMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry,\n+                                                   Function<Message<?>, Iterable<Tag>> tagsBuilder) {\n+        return buildMonitor(meterNamePrefix, meterRegistry, Clock.SYSTEM, tagsBuilder);\n+    }\n+\n+    /**\n+     * Creates a message timer monitor\n+     *\n+     * @param meterNamePrefix The prefix for the meter name that will be created in the given meterRegistry\n+     * @param meterRegistry   The meter registry used to create and register the meters\n+     * @param clock           The clock used to measure the process time per message\n+     * @return the message timer monitor (with the default tag `payloadType`)\n+     */\n     public static MessageTimerMonitor buildMonitor(String meterNamePrefix, MeterRegistry meterRegistry, Clock clock) {\n-        Timer allTimer = buildTimer(meterNamePrefix, \"allTimer\", meterRegistry);\n-        Timer successTimer = buildTimer(meterNamePrefix, \"successTimer\", meterRegistry);\n-        Timer failureTimer = buildTimer(meterNamePrefix, \"failureTimer\", meterRegistry);\n-        Timer ignoredTimer = buildTimer(meterNamePrefix, \"ignoredTimer\", meterRegistry);\n-        return new MessageTimerMonitor(allTimer, successTimer, failureTimer, ignoredTimer, clock);\n+        return new MessageTimerMonitor(meterNamePrefix, meterRegistry, clock);\n     }\n \n-    private static Timer buildTimer(String meterNamePrefix, String timerName, MeterRegistry meterRegistry) {\n+    /**\n+     * Creates a message timer monitor", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MzAyMg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440063022", "bodyText": "Missing javadoc on this class altogether.", "author": "smcvb", "createdAt": "2020-06-15T09:56:13Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/TagsUtil.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.axonframework.micrometer;\n+", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MzI2MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440063260", "bodyText": "The deprecation reason should be explained, as well as what's replacing it. Please add that to the javadoc with the @deprecated tag.", "author": "smcvb", "createdAt": "2020-06-15T09:56:37Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/PayloadTypeMessageMonitorWrapper.java", "diffHunk": "@@ -32,11 +32,11 @@\n  * MessageMonitor}.\n  *\n  * @param <T> The type of the MessageMonitor created for every payload type.Must implement both {@link MessageMonitor}\n- *\n  * @author Steven van Beelen\n  * @author Marijn van Zelst\n  * @since 4.1\n  */\n+@Deprecated", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NzI2Ng==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440087266", "bodyText": "Yes. The thing here is that we do not need this wrapper any more. The new/changed monitors (CapacityMonitor, CountingMonitor,...) are registering metrics on onMessageIngested method. We are able to create and register  custom metrics in our configuration in a simpler way by using this monitors directlly. I plan to update the Ref Guide for this.", "author": "idugalic", "createdAt": "2020-06-15T10:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MzI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2NTI0OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440065249", "bodyText": "Isn't there still value in the single and multi threaded capacity test?", "author": "smcvb", "createdAt": "2020-06-15T10:00:10Z", "path": "metrics-micrometer/src/test/java/org/axonframework/micrometer/CapacityMonitorTest.java", "diffHunk": "@@ -36,39 +38,50 @@\n class CapacityMonitorTest {\n \n     @Test\n-    void testSingleThreadedCapacity() {\n+    void testCapacity() {", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNDI3OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r441134278", "bodyText": "Not sure why this test method was named testSingleThreadedCapacity  and the one below testMultithreadedCapacity", "author": "idugalic", "createdAt": "2020-06-16T20:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2NTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxMzY1Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r443413652", "bodyText": "I am guessing it was because of the provided properties the single threaded test did?", "author": "smcvb", "createdAt": "2020-06-22T08:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2NTI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNzc2Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r440017762", "bodyText": "Should we do this? It will break some Grafana Dashboards, but make sense to have processor names as tags/dimensions.", "author": "idugalic", "createdAt": "2020-06-15T08:39:35Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/GlobalMetricRegistry.java", "diffHunk": "@@ -94,7 +97,13 @@ public Configurer registerWithConfigurer(Configurer configurer) {\n      */\n     public MessageMonitor<? extends Message<?>> registerComponent(Class<?> componentType, String componentName) {\n         if (EventProcessor.class.isAssignableFrom(componentType)) {\n-            return registerEventProcessor(componentName);\n+            // TODO This will introduce a breaking change on the metrics API level, as it will change the name of the metrics.\n+            // The name of the metrics is fixed to \"eventProcessor\" now, and the processor name is not part/prefix of the metrics name any more. It is a meter tag/dimension now.\n+            return registerEventProcessor(EVENT_PROCESSOR_METRICS_NAME,", "originalCommit": "7c3e4119c23d259c50db8f55fae62978f9c37ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46862d9171f216f1dcc4befe7d4083f8d48a9289", "url": "https://github.com/AxonFramework/AxonFramework/commit/46862d9171f216f1dcc4befe7d4083f8d48a9289", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/CapacityMonitor.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-16T12:09:58Z", "type": "commit"}, {"oid": "8b13115371779cdbe44c878839e26fc90a208290", "url": "https://github.com/AxonFramework/AxonFramework/commit/8b13115371779cdbe44c878839e26fc90a208290", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/CapacityMonitor.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-16T12:10:21Z", "type": "commit"}, {"oid": "2b01ea41c82b009fda5fd18fa10ca6be64dc5089", "url": "https://github.com/AxonFramework/AxonFramework/commit/2b01ea41c82b009fda5fd18fa10ca6be64dc5089", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/EventProcessorLatencyMonitor.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-16T12:10:54Z", "type": "commit"}, {"oid": "67f6a05c71eaf4dab0a435cedc7dd1dd3bb46a77", "url": "https://github.com/AxonFramework/AxonFramework/commit/67f6a05c71eaf4dab0a435cedc7dd1dd3bb46a77", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/MessageTimerMonitor.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-16T12:12:42Z", "type": "commit"}, {"oid": "23e9a05864282d1986bab56353350503ae4cd8d1", "url": "https://github.com/AxonFramework/AxonFramework/commit/23e9a05864282d1986bab56353350503ae4cd8d1", "message": "Linking Micrometer Tag type in JavaDoc", "committedDate": "2020-06-16T12:23:19Z", "type": "commit"}, {"oid": "c582b9fe9ef50f287ef403772e3347362cd8a3c7", "url": "https://github.com/AxonFramework/AxonFramework/commit/c582b9fe9ef50f287ef403772e3347362cd8a3c7", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/MessageTimerMonitor.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-16T12:24:14Z", "type": "commit"}, {"oid": "ebeda5eeda5fafdb32b1353089feeae41824aa46", "url": "https://github.com/AxonFramework/AxonFramework/commit/ebeda5eeda5fafdb32b1353089feeae41824aa46", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/MessageTimerMonitor.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-16T12:24:32Z", "type": "commit"}, {"oid": "b4c12e6fb2657b85e034fa3988ec0133e31a035a", "url": "https://github.com/AxonFramework/AxonFramework/commit/b4c12e6fb2657b85e034fa3988ec0133e31a035a", "message": "Marked as deprecated: GlobalMetricRegistry.registerEventProcessor(String) and PayloadTypeMessageMonitorWrapper", "committedDate": "2020-06-16T19:39:39Z", "type": "commit"}, {"oid": "fcdb903e56e63212378d5f681d9c8ece0451dbbc", "url": "https://github.com/AxonFramework/AxonFramework/commit/fcdb903e56e63212378d5f681d9c8ece0451dbbc", "message": "Restricting modifier on static fields to private", "committedDate": "2020-06-16T19:54:42Z", "type": "commit"}, {"oid": "e16661e500bbc82671861947282082df6690e16a", "url": "https://github.com/AxonFramework/AxonFramework/commit/e16661e500bbc82671861947282082df6690e16a", "message": "Added JavaDoc", "committedDate": "2020-06-16T20:03:17Z", "type": "commit"}, {"oid": "c457387acee7a46a71c213ac72e4d8bc921274dc", "url": "https://github.com/AxonFramework/AxonFramework/commit/c457387acee7a46a71c213ac72e4d8bc921274dc", "message": "Fixed issue: EventProcessorLatencyMonitor was built without TagsBuilder", "committedDate": "2020-06-16T20:08:27Z", "type": "commit"}, {"oid": "cdbd41df37d3b9a5c4f2fe428cc9affa8d1f60bb", "url": "https://github.com/AxonFramework/AxonFramework/commit/cdbd41df37d3b9a5c4f2fe428cc9affa8d1f60bb", "message": "Switched to `putIfAbsent`", "committedDate": "2020-06-16T20:37:45Z", "type": "commit"}, {"oid": "982f2ea09c98e5dd37123feb97dda28226776c30", "url": "https://github.com/AxonFramework/AxonFramework/commit/982f2ea09c98e5dd37123feb97dda28226776c30", "message": "Added private constructor to hide the implicit public one", "committedDate": "2020-06-16T21:10:09Z", "type": "commit"}, {"oid": "be3e1a7221e0f86df57bd1bac9c1acdb6afd0b2a", "url": "https://github.com/AxonFramework/AxonFramework/commit/be3e1a7221e0f86df57bd1bac9c1acdb6afd0b2a", "message": "Externalized property to mark if the Micrometer tags will be used (false by default).\n\nBy default, tags are not used for backward compatibility reasons.", "committedDate": "2020-06-17T18:29:32Z", "type": "commit"}, {"oid": "b513e6cf2787f7decf2e92bee8ed20bcdd9a11d8", "url": "https://github.com/AxonFramework/AxonFramework/commit/b513e6cf2787f7decf2e92bee8ed20bcdd9a11d8", "message": "Fixed Java Doc", "committedDate": "2020-06-17T18:36:16Z", "type": "commit"}, {"oid": "9c0552f14d7eaf433b7794f60ef58e8537203b0d", "url": "https://github.com/AxonFramework/AxonFramework/commit/9c0552f14d7eaf433b7794f60ef58e8537203b0d", "message": "Configured module to use tags/dimensions based on the property/parameter", "committedDate": "2020-06-17T19:18:44Z", "type": "commit"}, {"oid": "960c7ea256a7486dcb4b29c3ad8f7c4a6118de9f", "url": "https://github.com/AxonFramework/AxonFramework/commit/960c7ea256a7486dcb4b29c3ad8f7c4a6118de9f", "message": "Added more tests for `GlobalMetricRegistry`", "committedDate": "2020-06-18T08:59:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyNzY2NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r442827664", "bodyText": "Nit: Might it be reasonable to add the following to the TagsUtil?:\npublic static final Function<Message<?>, Tag> PAYLOAD_TYPE_TAGGER = message > Tags.of(PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName());\nHaving some of these functions on the TagsUtil class would make it easier for users to pick and choose from the defaults we have. If they'd now want to set up their own monitor with the defaults we have, they'll have to provide this line too.\nMinor improvement of course, not that big a deal.", "author": "smcvb", "createdAt": "2020-06-19T13:03:06Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/GlobalMetricRegistry.java", "diffHunk": "@@ -110,12 +129,55 @@ public Configurer registerWithConfigurer(Configurer configurer) {\n         return NoOpMessageMonitor.instance();\n     }\n \n+    /**\n+     * Registers new metrics to the registry to monitor a component of given {@code type}. The monitor will be\n+     * registered with the registry under the given {@code name} and the default set of Micrometer {@link Tag}s.\n+     * The default set of Micrometer {@link Tag}s includes the 'message payload type' and additionally the 'processor\n+     * name'\n+     * for the event processors.\n+     * The returned {@link MessageMonitor} can be installed on the component to initiate the monitoring.\n+     *\n+     * @param componentType The type of component to register\n+     * @param componentName The name under which the component should be registered to the registry\n+     * @return MessageMonitor (with Micrometer {@link Tag}s/dimensions enabled) to monitor the behavior of a given type\n+     *\n+     * @throws IllegalArgumentException if the component type is not recognized\n+     */\n+    public MessageMonitor<? extends Message<?>> registerComponentWithDefaultTags(Class<?> componentType,\n+                                                                                 String componentName) {\n+        if (EventProcessor.class.isAssignableFrom(componentType)) {\n+            return registerEventProcessor(EVENT_PROCESSOR_METRICS_NAME,\n+                                          message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG,\n+                                                             message.getPayloadType().getSimpleName(),\n+                                                             TagsUtil.PROCESSOR_NAME_TAG,\n+                                                             componentName));\n+        }\n+        if (CommandBus.class.isAssignableFrom(componentType)) {\n+            return registerCommandBus(componentName,\n+                                      message -> Tags", "originalCommit": "960c7ea256a7486dcb4b29c3ad8f7c4a6118de9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1NDIyNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r443454224", "bodyText": "Done", "author": "idugalic", "createdAt": "2020-06-22T10:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyNzY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyOTIzMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r442829231", "bodyText": "Nit: might be nice to deviate a little with the documentation compared to the registerEventBus(String) method, by for example doing the following:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Registers new metrics to the registry to monitor an {@link EventBus}. The monitor will be registered with the\n          \n          \n            \n                 * Registers new metrics to the registry to monitor an {@link EventBus} using {@link Tag}s through the given {@code tagsBuilder}. The monitor will be registered with the", "author": "smcvb", "createdAt": "2020-06-19T13:06:10Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/GlobalMetricRegistry.java", "diffHunk": "@@ -148,30 +239,78 @@ public Configurer registerWithConfigurer(Configurer configurer) {\n         return new MultiMessageMonitor<>(Arrays.asList(messageCountingMonitor, messageTimerMonitor));\n     }\n \n+    /**\n+     * Registers new metrics to the registry to monitor an {@link EventBus}. The monitor will be registered with the", "originalCommit": "960c7ea256a7486dcb4b29c3ad8f7c4a6118de9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyOTUxMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r442829513", "bodyText": "I'd expect a similar adjustment to the other registration methods which add the tagsBuilder parameter.", "author": "smcvb", "createdAt": "2020-06-19T13:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyOTIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzM5NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r442833394", "bodyText": "I believe this is purely deprecated because of the use of Tags right?\nSo, I would expect something like this.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @deprecated As of release 4.4, replaced by specific monitors {@link MessageCountingMonitor}, {@link CapacityMonitor},\n          \n          \n            \n             * {@link EventProcessorLatencyMonitor}, {@link MessageCountingMonitor} that can be used to register meters on Axon\n          \n          \n            \n             * components directly.\n          \n          \n            \n             * @deprecated As of release 4.4, replaced by using {@link Tag}s on the monitor implementations.\n          \n          \n            \n             * Use {@link org.axonframework.micrometer.GlobalMetricRegistry#registerWithConfigurerWithDefaultTags(Configurer) to achieve the same behavior as this implementation.", "author": "smcvb", "createdAt": "2020-06-19T13:14:48Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/PayloadTypeMessageMonitorWrapper.java", "diffHunk": "@@ -32,11 +32,14 @@\n  * MessageMonitor}.\n  *\n  * @param <T> The type of the MessageMonitor created for every payload type.Must implement both {@link MessageMonitor}\n- *\n  * @author Steven van Beelen\n  * @author Marijn van Zelst\n  * @since 4.1\n+ * @deprecated As of release 4.4, replaced by specific monitors {@link MessageCountingMonitor}, {@link CapacityMonitor},\n+ * {@link EventProcessorLatencyMonitor}, {@link MessageCountingMonitor} that can be used to register meters on Axon\n+ * components directly.", "originalCommit": "960c7ea256a7486dcb4b29c3ad8f7c4a6118de9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwNTMxNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r443405316", "bodyText": "Yes, correct. No need for the PayloadTypeMessageMonitorWrapper.java any more", "author": "idugalic", "createdAt": "2020-06-22T08:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzY3Mw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r442833673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * metrics.\n          \n          \n            \n             */\n          \n          \n            \n             * metrics.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Ivan Dugalic\n          \n          \n            \n             * @since 4.4\n          \n          \n            \n             */", "author": "smcvb", "createdAt": "2020-06-19T13:15:23Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/TagsUtil.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.axonframework.micrometer;\n+\n+/**\n+ * Utility class for micrometer tag management.\n+ * <p>\n+ * Contains 'static final' fields which represent the micrometer tag KEY that should be consistent across different\n+ * metrics.\n+ */", "originalCommit": "960c7ea256a7486dcb4b29c3ad8f7c4a6118de9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNDA1OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r442834058", "bodyText": "Don't forget to honor yourself for adding this feature ;-)", "author": "smcvb", "createdAt": "2020-06-19T13:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzgxOA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r442833818", "bodyText": "However boring, constants also require javadoc.", "author": "smcvb", "createdAt": "2020-06-19T13:15:40Z", "path": "metrics-micrometer/src/main/java/org/axonframework/micrometer/TagsUtil.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.axonframework.micrometer;\n+\n+/**\n+ * Utility class for micrometer tag management.\n+ * <p>\n+ * Contains 'static final' fields which represent the micrometer tag KEY that should be consistent across different\n+ * metrics.\n+ */\n+public class TagsUtil {\n+\n+    private TagsUtil() {\n+    }\n+\n+    public static final String PAYLOAD_TYPE_TAG = \"payloadType\";", "originalCommit": "960c7ea256a7486dcb4b29c3ad8f7c4a6118de9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxOTYzMg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1448#discussion_r443419632", "bodyText": "agreed", "author": "idugalic", "createdAt": "2020-06-22T09:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzgxOA=="}], "type": "inlineReview"}, {"oid": "743fc4117b3119c310587190d6e45d3276c4a4cc", "url": "https://github.com/AxonFramework/AxonFramework/commit/743fc4117b3119c310587190d6e45d3276c4a4cc", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/PayloadTypeMessageMonitorWrapper.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-22T08:43:52Z", "type": "commit"}, {"oid": "b5c639e1bace2a7d789dd99b63ef2953a85dd74d", "url": "https://github.com/AxonFramework/AxonFramework/commit/b5c639e1bace2a7d789dd99b63ef2953a85dd74d", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/GlobalMetricRegistry.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-22T08:50:11Z", "type": "commit"}, {"oid": "e690f3d91379db631b647f4e0512bb46aec26670", "url": "https://github.com/AxonFramework/AxonFramework/commit/e690f3d91379db631b647f4e0512bb46aec26670", "message": "JavaDoc enhanced for the newly added public methods and constants", "committedDate": "2020-06-22T09:09:23Z", "type": "commit"}, {"oid": "9ef54cd64022348f5909d8658c83b8a66924e046", "url": "https://github.com/AxonFramework/AxonFramework/commit/9ef54cd64022348f5909d8658c83b8a66924e046", "message": "Update metrics-micrometer/src/main/java/org/axonframework/micrometer/TagsUtil.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-06-22T09:10:52Z", "type": "commit"}, {"oid": "d0d96a28cbc6039391eb4202395a5c3b5121a30e", "url": "https://github.com/AxonFramework/AxonFramework/commit/d0d96a28cbc6039391eb4202395a5c3b5121a30e", "message": "Added helper functions for creating micrometer tags based on the message ingested. Added author.", "committedDate": "2020-06-22T10:08:43Z", "type": "commit"}]}