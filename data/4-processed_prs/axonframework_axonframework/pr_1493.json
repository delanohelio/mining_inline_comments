{"pr_number": 1493, "pr_title": "Fixed infinite looping issue when tracking from a SequenceEventStorageEngine", "pr_createdAt": "2020-08-19T18:19:12Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1493", "timeline": [{"oid": "588d0096e2a5817a96a3f4baef9cc1760d01a906", "url": "https://github.com/AxonFramework/AxonFramework/commit/588d0096e2a5817a96a3f4baef9cc1760d01a906", "message": "Fixed infinite looping issue when tracking from a SequenceEventStorageEngine\n\nResolves #1491", "committedDate": "2020-08-19T18:16:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwMTAxMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1493#discussion_r473601013", "bodyText": "I don't understand this assumption. Isn't the point of the historic storage that some events will come from the historic, and some. events from the active store? At least this is the case in our production system.", "author": "ovstetun", "createdAt": "2020-08-20T05:19:51Z", "path": "integrationtests/src/test/java/org/axonframework/integrationtests/eventhandling/TrackingEventProcessorTest.java", "diffHunk": "@@ -224,6 +251,44 @@ void tearDown() {\n         eventBus.shutDown();\n     }\n \n+    @Test\n+    void testSequenceEventStorageReceivesEachEventOnlyOnce() throws Exception {\n+        InMemoryEventStorageEngine historic = new InMemoryEventStorageEngine();\n+        InMemoryEventStorageEngine active = new InMemoryEventStorageEngine();\n+        SequenceEventStorageEngine sequenceEventStorageEngine = new SequenceEventStorageEngine(historic, active);\n+\n+        EmbeddedEventStore sequenceEventBus = EmbeddedEventStore.builder().storageEngine(sequenceEventStorageEngine).build();\n+\n+        initProcessor(TrackingEventProcessorConfiguration.forSingleThreadedProcessing()\n+                                                         .andEventAvailabilityTimeout(100, TimeUnit.MILLISECONDS),\n+                      b -> {\n+                          b.messageSource(sequenceEventBus);\n+                          return b;\n+                      });\n+\n+        historic.appendEvents(createEvent(AGGREGATE, 1L, \"message1\"), createEvent(AGGREGATE, 2L, \"message2\"));\n+        // to make sure tracking tokens match, we need to append the same number of events in the active store", "originalCommit": "588d0096e2a5817a96a3f4baef9cc1760d01a906", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxMDc5OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1493#discussion_r473610799", "bodyText": "That's absolutely correct. In practice, the events are usually in either historic, or the active storage, and only occasionally/temporarily in both.\nHowever, the tokens returned from the storage engines must continue from one into the next. That means your historic storage will take the globalIndex from the events that the activeStorage has assigned to it. The in-memory storage doesn't support that, so we need to add some 'placeholder' events to make sure the index matches.", "author": "abuijze", "createdAt": "2020-08-20T05:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwMTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxNDc1OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1493#discussion_r473614759", "bodyText": "I did a bit of digging here, and now understand what happens. The first two events from the active storage are not read in playback. Maybe it would be better as documentation to have these two with a different payload and check that only the expected messages are received in the handler?", "author": "ovstetun", "createdAt": "2020-08-20T05:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwMTAxMw=="}], "type": "inlineReview"}, {"oid": "f7d8f2b70ac663d8ec0ac7d6e5d4d79121fa4c19", "url": "https://github.com/AxonFramework/AxonFramework/commit/f7d8f2b70ac663d8ec0ac7d6e5d4d79121fa4c19", "message": "Added concept of offset to InMemoryEventStorageEngine to support its use in SequenceEventStorageEngine", "committedDate": "2020-08-20T09:35:13Z", "type": "commit"}]}