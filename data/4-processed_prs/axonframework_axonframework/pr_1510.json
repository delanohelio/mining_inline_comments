{"pr_number": 1510, "pr_title": "Snapshotter optimization", "pr_createdAt": "2020-09-17T12:56:35Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1510", "timeline": [{"oid": "bcbba2a17dd0c092b00583972a735d23a851368d", "url": "https://github.com/AxonFramework/AxonFramework/commit/bcbba2a17dd0c092b00583972a735d23a851368d", "message": "As a snapshot trigger definition I want to count Domain Event Messages only.", "committedDate": "2020-09-16T14:39:13Z", "type": "commit"}, {"oid": "73167745a36832f1716d35ea06a35ec1e0104b9c", "url": "https://github.com/AxonFramework/AxonFramework/commit/73167745a36832f1716d35ea06a35ec1e0104b9c", "message": "Schedule at most one snapshot per aggregate type id per UOW.", "committedDate": "2020-09-17T12:53:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNTgzMg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490225832", "bodyText": "I would change this testcase and include 2 variants.\nMove the \"verify\" code outside of the onCommit. It's unreliable to put assertions there. If the UoW is rolled back, the test passes.\nOne variant should do a UOW Commit, and the other a rollback. In case of the commit there is an invocation, in case of rollback, there isn't", "author": "abuijze", "createdAt": "2020-09-17T13:03:10Z", "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/EventCountSnapshotTriggerDefinitionTest.java", "diffHunk": "@@ -70,24 +70,45 @@ void tearDown() {\n     }\n \n     @Test\n-    void testSnapshotterTriggeredOnUnitOfWorkCommit() {\n+    void testSnapshotterTriggeredOnUnitOfWorkCleanup() {\n         SnapshotTrigger trigger = testSubject.prepareTrigger(aggregate.rootType());\n-        GenericDomainEventMessage<String> msg = new GenericDomainEventMessage<>(\"type\", aggregateIdentifier, (long) 0,\n+        GenericDomainEventMessage<String> msg = new GenericDomainEventMessage<>(\"type\", aggregateIdentifier, 0,\n                                                                                 \"Mock contents\", MetaData.emptyInstance());\n         trigger.eventHandled(msg);\n         trigger.eventHandled(msg);\n         trigger.eventHandled(msg);\n         trigger.eventHandled(msg);\n \n         verify(mockSnapshotter, never()).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n+        CurrentUnitOfWork.get()\n+                         .onCommit(uow -> verify(mockSnapshotter, never())\n+                                 .scheduleSnapshot(aggregate.rootType(), aggregateIdentifier));\n         CurrentUnitOfWork.commit();\n         verify(mockSnapshotter).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n     }\n \n+    @Test\n+    void testSnapshotterTriggeredOnUnitOfWorkCommit() {\n+        SnapshotTrigger trigger = testSubject.prepareTrigger(aggregate.rootType());\n+        GenericDomainEventMessage<String> msg = new GenericDomainEventMessage<>(\"type\", aggregateIdentifier, 0,\n+                                                                                \"Mock contents\", MetaData.emptyInstance());\n+        trigger.initializationFinished();\n+        trigger.eventHandled(msg);\n+        trigger.eventHandled(msg);\n+        trigger.eventHandled(msg);\n+        trigger.eventHandled(msg);\n+\n+        verify(mockSnapshotter, never()).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n+        CurrentUnitOfWork.get()\n+                         .onCommit(uow -> verify(mockSnapshotter)\n+                                 .scheduleSnapshot(aggregate.rootType(), aggregateIdentifier));\n+        CurrentUnitOfWork.commit();", "originalCommit": "73167745a36832f1716d35ea06a35ec1e0104b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNzA0Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490227042", "bodyText": "This blocks multiple invocations from the same unit of work, but will not prevent different UoW to trigger the creation of a snapshot....", "author": "abuijze", "createdAt": "2020-09-17T13:04:59Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/AbstractSnapshotter.java", "diffHunk": "@@ -64,14 +70,23 @@ protected AbstractSnapshotter(Builder builder) {\n \n     @Override\n     public void scheduleSnapshot(Class<?> aggregateType, String aggregateIdentifier) {\n-        if (CurrentUnitOfWork.isStarted()) {\n+        if (CurrentUnitOfWork.isStarted() && CurrentUnitOfWork.get().phase().isBefore(UnitOfWork.Phase.COMMIT)) {\n             CurrentUnitOfWork.get().afterCommit(u -> doScheduleSnapshot(aggregateType, aggregateIdentifier));\n         } else {\n             doScheduleSnapshot(aggregateType, aggregateIdentifier);\n         }\n     }\n \n     private void doScheduleSnapshot(Class<?> aggregateType, String aggregateIdentifier) {\n+        if (CurrentUnitOfWork.isStarted()) {", "originalCommit": "73167745a36832f1716d35ea06a35ec1e0104b9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0MjMwNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490242305", "bodyText": "That is correct. However, is it possible to have several UoWs triggering a snapshot on the same Aggregate? (Aggregate is locked until UoW cleans up).", "author": "m1l4n54v1c", "createdAt": "2020-09-17T13:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNzA0Mg=="}], "type": "inlineReview"}, {"oid": "209f9053c35c623d3ad3cdae8ed391036ed6c94f", "url": "https://github.com/AxonFramework/AxonFramework/commit/209f9053c35c623d3ad3cdae8ed391036ed6c94f", "message": "Added a test for rolling back a UoW.", "committedDate": "2020-09-17T13:47:36Z", "type": "commit"}, {"oid": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f", "url": "https://github.com/AxonFramework/AxonFramework/commit/481f7fb76c67110d8b35f9ebf421ce1211c5c26f", "message": "Implemented concurrent snapshot prevention", "committedDate": "2020-09-17T14:28:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5MzMwNw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490893307", "bodyText": "I think this method should be private.", "author": "smcvb", "createdAt": "2020-09-18T11:44:30Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/AbstractSnapshotter.java", "diffHunk": "@@ -205,6 +264,32 @@ public void run() {\n                 }\n             }\n         }\n+\n+        public Runnable andFinally(Runnable r) {", "originalCommit": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxODcwNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r491018704", "bodyText": "I disagree. This method is intended to be invoked from outside this class. It happens to be an inner class right now, but there is bo real reason why not to make this a public utility class. In that case, a private method wouldn't work.", "author": "abuijze", "createdAt": "2020-09-18T15:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5MzMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1MTY4Nw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r491051687", "bodyText": "Through GitHub code folding magic, I completely missed this method was part of the SilentTask class...mea culpa.\nI agree with you @abuijze, this should stay public, thanks for correcting me.", "author": "smcvb", "createdAt": "2020-09-18T16:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5MzMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5NTM1NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490895354", "bodyText": "Nit: wouldn't hurt to adjust the class level javadoc to specify both angles when a snapshot can be created.\nThus, firstly because during applying the threshold is reached, and secondly when the threshold is reached during initialization.", "author": "smcvb", "createdAt": "2020-09-18T11:48:53Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/EventCountSnapshotTriggerDefinition.java", "diffHunk": "@@ -76,24 +78,30 @@ public EventCountSnapshotTrigger(Snapshotter snapshotter, Class<?> aggregateType\n \n         @Override\n         public void eventHandled(EventMessage<?> msg) {\n-            if (++counter >= threshold && msg instanceof DomainEventMessage) {\n+            if (msg instanceof DomainEventMessage && ++counter >= threshold) {\n                 if (CurrentUnitOfWork.isStarted()) {\n-                    CurrentUnitOfWork.get().onPrepareCommit(\n-                            u -> scheduleSnapshot((DomainEventMessage) msg));\n+                    if (initialized) {", "originalCommit": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5ODI1OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490898259", "bodyText": "Nit: wouldn't it be beneficial to state this should only occur if the snapshot is triggered in the pre-apply phase? Thus, prior before the aggregate has been initialized? Because, only then will we we invoke this onCleanUp", "author": "smcvb", "createdAt": "2020-09-18T11:54:49Z", "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/EventCountSnapshotTriggerDefinitionTest.java", "diffHunk": "@@ -84,10 +103,26 @@ void testSnapshotterTriggeredOnUnitOfWorkCommit() {\n         verify(mockSnapshotter).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n     }\n \n+    @Test\n+    void testSnapshotterTriggeredOnUnitOfWorkRollback() {", "originalCommit": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5OTM4NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490899385", "bodyText": "Does make the trigger.initializationFinished(); weird for me right now...so might be have a misconception here. Please tell me if I am wrong on the matter.", "author": "smcvb", "createdAt": "2020-09-18T11:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5ODI1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcyNDEwNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r492724105", "bodyText": "Alright, I've only just now noticed the verify twice expect it never() to happen. That was what I was missing here. No stress!", "author": "smcvb", "createdAt": "2020-09-22T13:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5ODI1OQ=="}], "type": "inlineReview"}, {"oid": "a0a9cfb33b4ed3cd0e79ddb77cd257d7cd08e2bd", "url": "https://github.com/AxonFramework/AxonFramework/commit/a0a9cfb33b4ed3cd0e79ddb77cd257d7cd08e2bd", "message": "Disregard staged events for a rolled-back unit of work", "committedDate": "2020-09-22T12:01:09Z", "type": "commit"}, {"oid": "9fcd375858097b6e918be92520a0293ebb509084", "url": "https://github.com/AxonFramework/AxonFramework/commit/9fcd375858097b6e918be92520a0293ebb509084", "message": "Expand javadoc\n\nExpand the javadoc to include specifics about when a snapshot will be\ntriggered in case initialization of the aggregate hasn't completely yet\n\n#1510", "committedDate": "2020-09-22T13:09:17Z", "type": "commit"}, {"oid": "f1410c3c434e2c285262d5920d6018283eff2a42", "url": "https://github.com/AxonFramework/AxonFramework/commit/f1410c3c434e2c285262d5920d6018283eff2a42", "message": "Rename and add test case\n\nRename the rollback test case to specify it'll never occur.\nAdditionally, add another test which switches to scenario, albeit quite\nsimilar to the testSnapshotterTriggeredOnUnitOfWorkCleanup() test case\n\n#1510", "committedDate": "2020-09-22T13:18:24Z", "type": "commit"}]}