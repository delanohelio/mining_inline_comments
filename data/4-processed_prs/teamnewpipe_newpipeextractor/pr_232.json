{"pr_number": 232, "pr_title": "Bandcamp support", "pr_createdAt": "2020-01-03T09:15:46Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232", "timeline": [{"oid": "c9e9953bb085a1231817b9d29675587d10d92470", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c9e9953bb085a1231817b9d29675587d10d92470", "message": "[Bandcamp] Fix channel link handler factory", "committedDate": "2020-12-22T19:02:53Z", "type": "commit"}, {"oid": "78c2113094527dfcf806bbcc76b8d16ae30b0eba", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/78c2113094527dfcf806bbcc76b8d16ae30b0eba", "message": "Merge remote-tracking branch 'origin/dev' into bandcamp", "committedDate": "2021-01-15T20:49:58Z", "type": "commit"}, {"oid": "07570554b6a6ecdfc395901a9c827a583a00d1d5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/07570554b6a6ecdfc395901a9c827a583a00d1d5", "message": "Fix build and optimize imports", "committedDate": "2021-01-15T20:55:40Z", "type": "commit"}, {"oid": "e062c8cb0d5136c10b156ec91bf428599b3024bf", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e062c8cb0d5136c10b156ec91bf428599b3024bf", "message": "Merge branch 'dev' into bandcamp", "committedDate": "2021-02-15T21:09:41Z", "type": "commit"}, {"oid": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "message": "Code improvements", "committedDate": "2021-02-15T21:45:17Z", "type": "commit"}, {"oid": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "message": "Code improvements", "committedDate": "2021-02-15T21:45:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYxNjgwNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576616805", "bodyText": "@TobiGr @Stypox Do we really want this license line in every file?", "author": "XiangRongLin", "createdAt": "2021-02-16T08:03:09Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk1NDE2MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576954161", "bodyText": "I don't know. I think they should either be in every file of the project or in none. I'd go with the latter since I don't see how they are useful and they are just a burden to maintain up-to-date.", "author": "Stypox", "createdAt": "2021-02-16T16:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYxNjgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY2MTY1MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r577661651", "bodyText": "When code is not licensed, you are by default not allowed to use it. Therefore, the GNU GPL recommends to explicitly grant the license at the beginning of each file, making it extra clear that you are allowed to use it. Here I kept it extra short so that it only takes one line.", "author": "fynngodau", "createdAt": "2021-02-17T14:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYxNjgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODY2NjEwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r578666103", "bodyText": "I'd also keep the license.", "author": "TobiGr", "createdAt": "2021-02-18T18:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYxNjgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYxOTk2NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576619964", "bodyText": "This is not specific to bandcamp is it? Meaning other services could theoretically use it and it should go to ExtractorHelper", "author": "XiangRongLin", "createdAt": "2021-02-16T08:08:54Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampExtractorHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import com.grack.nanojson.JsonWriter;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.utils.Utils;\n+\n+import java.io.IOException;\n+import java.time.DateTimeException;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+public class BandcampExtractorHelper {\n+\n+    /**\n+     * <p>Get an attribute of a web page as JSON\n+     *\n+     * <p>Originally a part of bandcampDirect.</p>\n+     *\n+     * @param html     The HTML where the JSON we're looking for is stored inside a\n+     *                 variable inside some JavaScript block\n+     * @param variable Name of the variable\n+     * @return The JsonObject stored in the variable with this name\n+     */\n+    public static JsonObject getJsonData(final String html, final String variable)\n+            throws JsonParserException, ArrayIndexOutOfBoundsException {\n+        final Document document = Jsoup.parse(html);\n+        final String json = document.getElementsByAttribute(variable).attr(variable);\n+        return JsonParser.object().from(json);\n+    }", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzQxOTgyNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r577419824", "bodyText": "I'd move this to JsonUtils", "author": "TobiGr", "createdAt": "2021-02-17T08:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYxOTk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY2NTQzNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r577665435", "bodyText": "I'm not sure how well this would transfer to other websites\u2026 I don't know whether this is a common way of giving the JavaScript some data, but there are certainly many others as well. Bandcamp also used to do it differently.", "author": "fynngodau", "createdAt": "2021-02-17T14:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYxOTk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTgwMzIzMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r579803230", "bodyText": "Moved. In case Bandcamp changes something, we can have a look again. But it is not bad to have such a method in our Utils.", "author": "TobiGr", "createdAt": "2021-02-21T12:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYxOTk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyMTA2MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576621061", "bodyText": "Same here, it should go to Utils. Maybe you can even adjust the join method there", "author": "XiangRongLin", "createdAt": "2021-02-16T08:10:55Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampExtractorHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import com.grack.nanojson.JsonWriter;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.utils.Utils;\n+\n+import java.io.IOException;\n+import java.time.DateTimeException;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+public class BandcampExtractorHelper {\n+\n+    /**\n+     * <p>Get an attribute of a web page as JSON\n+     *\n+     * <p>Originally a part of bandcampDirect.</p>\n+     *\n+     * @param html     The HTML where the JSON we're looking for is stored inside a\n+     *                 variable inside some JavaScript block\n+     * @param variable Name of the variable\n+     * @return The JsonObject stored in the variable with this name\n+     */\n+    public static JsonObject getJsonData(final String html, final String variable)\n+            throws JsonParserException, ArrayIndexOutOfBoundsException {\n+        final Document document = Jsoup.parse(html);\n+        final String json = document.getElementsByAttribute(variable).attr(variable);\n+        return JsonParser.object().from(json);\n+    }\n+\n+    /**\n+     * Translate all these parameters together to the URL of the corresponding album or track\n+     * using the mobile api\n+     */\n+    public static String getStreamUrlFromIds(final long bandId, final long itemId, final String itemType)\n+            throws ParsingException {\n+\n+        try {\n+            final String jsonString = NewPipe.getDownloader().get(\n+                    \"https://bandcamp.com/api/mobile/22/tralbum_details?band_id=\" + bandId\n+                            + \"&tralbum_id=\" + itemId + \"&tralbum_type=\" + itemType.substring(0, 1))\n+                    .responseBody();\n+\n+            return JsonParser.object().from(jsonString).getString(\"bandcamp_url\").replace(\"http://\", \"https://\");\n+\n+        } catch (final JsonParserException | ReCaptchaException | IOException e) {\n+            throw new ParsingException(\"Ids could not be translated to URL\", e);\n+        }\n+\n+    }\n+\n+    /**\n+     * Concatenate all non-null and non-empty strings together while separating them using\n+     * the comma parameter\n+     */\n+    public static String smartConcatenate(final String[] strings, final String comma) {\n+        final StringBuilder result = new StringBuilder();\n+\n+        // Remove empty strings\n+        final ArrayList<String> list = new ArrayList<>(Arrays.asList(strings));\n+        for (int i = list.size() - 1; i >= 0; i--) {\n+            if (Utils.isNullOrEmpty(list.get(i)) || list.get(i).equals(\"null\")) {\n+                list.remove(i);\n+            }\n+        }\n+\n+        // Append remaining strings to result\n+        for (int i = 0; i < list.size(); i++) {\n+            result.append(list.get(i));\n+\n+            if (i != list.size() - 1) {\n+                // This is not the last iteration yet\n+                result.append(comma);\n+            }\n+\n+        }\n+\n+        return String.valueOf(result);\n+    }", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc5NTUzMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r579795533", "bodyText": "Moved, fixed and added tests for this method", "author": "TobiGr", "createdAt": "2021-02-21T11:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyMTA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyMzA2OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576623069", "bodyText": "why is this empty", "author": "XiangRongLin", "createdAt": "2021-02-16T08:14:45Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampFeaturedExtractor.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.kiosk.KioskExtractor;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.playlist.PlaylistInfoItem;\n+import org.schabi.newpipe.extractor.playlist.PlaylistInfoItemsCollector;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampFeaturedExtractor extends KioskExtractor<PlaylistInfoItem> {\n+\n+    public static final String KIOSK_FEATURED = \"Featured\";\n+    public static final String FEATURED_API_URL = \"https://bandcamp.com/api/mobile/24/bootstrap_data\";\n+\n+    public BandcampFeaturedExtractor(final StreamingService streamingService, final ListLinkHandler listLinkHandler,\n+                                     final String kioskId) {\n+        super(streamingService, listLinkHandler, kioskId);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+\n+    }", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODUyNjU4Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r588526587", "bodyText": "Can the reason for why its empty be added here", "author": "XiangRongLin", "createdAt": "2021-03-05T17:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyMzA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODU4MTI1Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r588581253", "bodyText": "it is not empty anymore. i moved some of the code which was falsely placed in getInitialPage()", "author": "TobiGr", "createdAt": "2021-03-05T18:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyMzA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyMzI5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576623297", "bodyText": "no printing stacktrace", "author": "XiangRongLin", "createdAt": "2021-02-16T08:15:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampFeaturedExtractor.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.kiosk.KioskExtractor;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.playlist.PlaylistInfoItem;\n+import org.schabi.newpipe.extractor.playlist.PlaylistInfoItemsCollector;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampFeaturedExtractor extends KioskExtractor<PlaylistInfoItem> {\n+\n+    public static final String KIOSK_FEATURED = \"Featured\";\n+    public static final String FEATURED_API_URL = \"https://bandcamp.com/api/mobile/24/bootstrap_data\";\n+\n+    public BandcampFeaturedExtractor(final StreamingService streamingService, final ListLinkHandler listLinkHandler,\n+                                     final String kioskId) {\n+        super(streamingService, listLinkHandler, kioskId);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return KIOSK_FEATURED;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<PlaylistInfoItem> getInitialPage() throws IOException, ExtractionException {\n+\n+        final PlaylistInfoItemsCollector c = new PlaylistInfoItemsCollector(getServiceId());\n+\n+        try {\n+\n+\n+            final JsonObject json = JsonParser.object().from(\n+                    getDownloader().post(\n+                            FEATURED_API_URL, null, \"{\\\"platform\\\":\\\"\\\",\\\"version\\\":0}\".getBytes()\n+                    ).responseBody()\n+            );\n+\n+            final JsonArray featuredStories = json.getObject(\"feed_content\")\n+                    .getObject(\"stories\")\n+                    .getArray(\"featured\");\n+\n+            for (int i = 0; i < featuredStories.size(); i++) {\n+                final JsonObject featuredStory = featuredStories.getObject(i);\n+\n+                if (featuredStory.isNull(\"album_title\")) {\n+                    // Is not an album, ignore\n+                    continue;\n+                }\n+\n+                c.commit(new BandcampPlaylistInfoItemFeaturedExtractor(featuredStory));\n+            }\n+\n+            return new InfoItemsPage<>(c, null);\n+        } catch (final JsonParserException e) {\n+            e.printStackTrace();", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyNDA3Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576624072", "bodyText": "same here, why empty", "author": "XiangRongLin", "createdAt": "2021-02-16T08:16:28Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampRadioExtractor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.InfoItemsCollector;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.kiosk.KioskExtractor;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampRadioExtractor extends KioskExtractor<InfoItem> {\n+\n+    public static final String KIOSK_RADIO = \"Radio\";\n+    public static final String RADIO_API_URL = \"https://bandcamp.com/api/bcweekly/1/list\";\n+\n+    public BandcampRadioExtractor(final StreamingService streamingService, final ListLinkHandler linkHandler,\n+                                  final String kioskId) {\n+        super(streamingService, linkHandler, kioskId);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+\n+    }", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyNDE1Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576624153", "bodyText": "same here", "author": "XiangRongLin", "createdAt": "2021-02-16T08:16:38Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampRadioExtractor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.InfoItemsCollector;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.kiosk.KioskExtractor;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampRadioExtractor extends KioskExtractor<InfoItem> {\n+\n+    public static final String KIOSK_RADIO = \"Radio\";\n+    public static final String RADIO_API_URL = \"https://bandcamp.com/api/bcweekly/1/list\";\n+\n+    public BandcampRadioExtractor(final StreamingService streamingService, final ListLinkHandler linkHandler,\n+                                  final String kioskId) {\n+        super(streamingService, linkHandler, kioskId);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return KIOSK_RADIO;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<InfoItem> getInitialPage() throws IOException, ExtractionException {\n+        final InfoItemsCollector c = new StreamInfoItemsCollector(getServiceId());\n+\n+        try {\n+\n+            final JsonObject json = JsonParser.object().from(\n+                    getDownloader().get(\n+                            RADIO_API_URL\n+                    ).responseBody()\n+            );\n+\n+            final JsonArray radioShows = json.getArray(\"results\");\n+\n+            for (int i = 0; i < radioShows.size(); i++) {\n+                final JsonObject radioShow = radioShows.getObject(i);\n+\n+                c.commit(\n+                        new BandcampRadioInfoItemExtractor(radioShow)\n+                );\n+            }\n+\n+        } catch (final JsonParserException e) {\n+            e.printStackTrace();", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyNTgzMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576625831", "bodyText": "final List<String> tags = new ArrayList<>();\nWork with interface not implementation", "author": "XiangRongLin", "createdAt": "2021-02-16T08:19:23Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampStreamExtractor.java", "diffHunk": "@@ -0,0 +1,335 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParserException;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.MetaInfo;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.*;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper.getImageUrl;\n+\n+public class BandcampStreamExtractor extends StreamExtractor {\n+\n+    private JsonObject albumJson;\n+    private JsonObject current;\n+    private Document document;\n+\n+    public BandcampStreamExtractor(final StreamingService service, final LinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+        final String html = downloader.get(getLinkHandler().getUrl()).responseBody();\n+        document = Jsoup.parse(html);\n+        albumJson = getAlbumInfoJson(html);\n+        current = albumJson.getObject(\"current\");\n+\n+        if (albumJson.getArray(\"trackinfo\").size() > 1) {\n+            // In this case, we are actually viewing an album page!\n+            throw new ExtractionException(\"Page is actually an album, not a track\");\n+        }\n+    }\n+\n+    /**\n+     * Get the JSON that contains album's metadata from page\n+     *\n+     * @param html Website\n+     * @return Album metadata JSON\n+     * @throws ParsingException In case of a faulty website\n+     */\n+    public static JsonObject getAlbumInfoJson(final String html) throws ParsingException {\n+        try {\n+            return BandcampExtractorHelper.getJsonData(html, \"data-tralbum\");\n+        } catch (final JsonParserException e) {\n+            throw new ParsingException(\"Faulty JSON; page likely does not contain album data\", e);\n+        } catch (final ArrayIndexOutOfBoundsException e) {\n+            throw new ParsingException(\"JSON does not exist\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return current.getString(\"title\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        final String[] parts = getUrl().split(\"/\");\n+        // https: (/) (/) * .bandcamp.com (/) and leave out the rest\n+        return \"https://\" + parts[2] + \"/\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return albumJson.getString(\"url\").replace(\"http://\", \"https://\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderName() {\n+        return albumJson.getString(\"artist\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {\n+        return current.getString(\"publish_date\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() throws ParsingException {\n+        return BandcampExtractorHelper.parseDate(getTextualUploadDate());\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        if (albumJson.isNull(\"art_id\")) return \"\";\n+        else return getImageUrl(albumJson.getLong(\"art_id\"), true);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        try {\n+            return document.getElementsByClass(\"band-photo\").first().attr(\"src\");\n+        } catch (final NullPointerException e) {\n+            return \"\";\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelName() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelAvatarUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Description getDescription() {\n+        final String s = BandcampExtractorHelper.smartConcatenate(\n+                new String[]{\n+                        current.getString(\"about\"),\n+                        current.getString(\"lyrics\"),\n+                        current.getString(\"credits\")\n+                }, \"\\n\\n\"\n+        );\n+        return new Description(s, Description.PLAIN_TEXT);\n+    }\n+\n+    @Override\n+    public int getAgeLimit() {\n+        return NO_AGE_LIMIT;\n+    }\n+\n+    @Override\n+    public long getLength() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getTimeStamp() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getViewCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getLikeCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getDislikeCount() {\n+        return -1;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getDashMpdUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getHlsUrl() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<AudioStream> getAudioStreams() {\n+        final List<AudioStream> audioStreams = new ArrayList<>();\n+\n+        audioStreams.add(new AudioStream(\n+                albumJson.getArray(\"trackinfo\").getObject(0)\n+                        .getObject(\"file\").getString(\"mp3-128\"),\n+                MediaFormat.MP3, 128\n+        ));\n+        return audioStreams;\n+    }\n+\n+    @Override\n+    public List<VideoStream> getVideoStreams() {\n+        return Collections.EMPTY_LIST;\n+    }\n+\n+    @Override\n+    public List<VideoStream> getVideoOnlyStreams() {\n+        return Collections.EMPTY_LIST;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<SubtitlesStream> getSubtitlesDefault() {\n+        return new ArrayList<>();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<SubtitlesStream> getSubtitles(MediaFormat format) {\n+        return new ArrayList<>();\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() {\n+        return StreamType.AUDIO_STREAM;\n+    }\n+\n+    @Override\n+    public StreamInfoItemsCollector getRelatedStreams() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getErrorMessage() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getHost() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getPrivacy() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getCategory() {\n+        // Get first tag from html, which is the artist's Genre\n+        return document\n+                .getElementsByClass(\"tralbum-tags\").first()\n+                .getElementsByClass(\"tag\").first().text();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getLicence() {\n+\n+        int license = current.getInt(\"license_type\");\n+\n+        // Tests resulted in this mapping of ints to licence: https://cloud.disroot.org/s/ZTWBxbQ9fKRmRWJ/preview\n+\n+        switch (license) {\n+            case 1:\n+                return \"All rights reserved \u00a9\";\n+            case 2:\n+                return \"CC BY-NC-ND 3.0\";\n+            case 3:\n+                return \"CC BY-NC-SA 3.0\";\n+            case 4:\n+                return \"CC BY-NC 3.0\";\n+            case 5:\n+                return \"CC BY-ND 3.0\";\n+            case 6:\n+                return \"CC BY 3.0\";\n+            case 8:\n+                return \"CC BY-SA 3.0\";\n+            default:\n+                return \"Unknown\";\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Locale getLanguageInfo() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<String> getTags() {\n+        final Elements tagElements = document.getElementsByAttributeValue(\"itemprop\", \"keywords\");\n+\n+        final ArrayList<String> tags = new ArrayList<>();", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyNzY4Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576627687", "bodyText": "I found 3 ways with which you return an empty list. chose number 1 or 3\n\nCollections.emptyList()\nnew ArrayList<>()\nCollections.EMPTY_LIST", "author": "XiangRongLin", "createdAt": "2021-02-16T08:22:26Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampRadioStreamExtractor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.jsoup.Jsoup;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ContentNotSupportedException;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper.getImageUrl;\n+\n+public class BandcampRadioStreamExtractor extends BandcampStreamExtractor {\n+\n+    private JsonObject showInfo;\n+\n+    public BandcampRadioStreamExtractor(final StreamingService service, final LinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    static JsonObject query(final int id) throws ParsingException {\n+        try {\n+            return JsonParser.object().from(\n+                    NewPipe.getDownloader().get(\"https://bandcamp.com/api/bcweekly/1/get?id=\" + id).responseBody()\n+            );\n+        } catch (final IOException | ReCaptchaException | JsonParserException e) {\n+            throw new ParsingException(\"could not get show data\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+        showInfo = query(Integer.parseInt(getId()));\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return showInfo.getString(\"subtitle\"); // \"audio_title\" is a boring title\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderUrl() throws ContentNotSupportedException {\n+        throw new ContentNotSupportedException(\"Fan pages are not supported\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return getLinkHandler().getUrl();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderName() {\n+        return Jsoup.parse(showInfo.getString(\"image_caption\"))\n+                .getElementsByTag(\"a\").first().text();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {\n+        return showInfo.getString(\"published_date\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return getImageUrl(showInfo.getLong(\"show_image_id\"), false);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        return \"https://bandcamp.com/img/buttons/bandcamp-button-circle-whitecolor-512.png\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Description getDescription() {\n+        return new Description(showInfo.getString(\"desc\"), Description.PLAIN_TEXT);\n+    }\n+\n+    @Override\n+    public long getLength() {\n+        return showInfo.getLong(\"audio_duration\");\n+    }\n+\n+    @Override\n+    public List<AudioStream> getAudioStreams() {\n+        final ArrayList<AudioStream> list = new ArrayList<>();\n+        final JsonObject streams = showInfo.getObject(\"audio_stream\");\n+\n+        if (streams.has(\"opus-lo\")) {\n+            list.add(new AudioStream(\n+                    streams.getString(\"opus-lo\"),\n+                    MediaFormat.OPUS, 100\n+            ));\n+        }\n+        if (streams.has(\"mp3-128\")) {\n+            list.add(new AudioStream(\n+                    streams.getString(\"mp3-128\"),\n+                    MediaFormat.MP3, 128\n+            ));\n+        }\n+\n+        return list;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getLicence() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getCategory() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<String> getTags() {\n+        return new ArrayList<>();\n+    }", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk1Mjg0OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576952849", "bodyText": "The correct one is the first one", "author": "Stypox", "createdAt": "2021-02-16T16:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyNzY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyOTE2NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576629164", "bodyText": "https://bandcamp.com This appears very often in the code. Can you create a single constant for it, so that one if they ever change their name, we only have to change one field and not every file", "author": "XiangRongLin", "createdAt": "2021-02-16T08:24:28Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampSuggestionExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.suggestion.SuggestionExtractor;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BandcampSuggestionExtractor extends SuggestionExtractor {\n+\n+    private static final String AUTOCOMPLETE_URL = \"https://bandcamp.com/api/fuzzysearch/1/autocomplete?q=\";", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc5MTczOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r579791738", "bodyText": "Done", "author": "TobiGr", "createdAt": "2021-02-21T11:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyOTE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyOTM4OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576629388", "bodyText": "same here", "author": "XiangRongLin", "createdAt": "2021-02-16T08:24:51Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampSuggestionExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.suggestion.SuggestionExtractor;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BandcampSuggestionExtractor extends SuggestionExtractor {\n+\n+    private static final String AUTOCOMPLETE_URL = \"https://bandcamp.com/api/fuzzysearch/1/autocomplete?q=\";\n+    public BandcampSuggestionExtractor(final StreamingService service) {\n+        super(service);\n+    }\n+\n+    @Override\n+    public List<String> suggestionList(final String query) throws IOException, ExtractionException {\n+        final Downloader downloader = NewPipe.getDownloader();\n+\n+        try {\n+            final JsonObject fuzzyResults = JsonParser.object().from(\n+                    downloader.get(AUTOCOMPLETE_URL + URLEncoder.encode(query, \"UTF-8\")).responseBody()\n+            );\n+\n+            final JsonArray jsonArray = fuzzyResults.getObject(\"auto\")\n+                    .getArray(\"results\");\n+\n+            final ArrayList<String> suggestions = new ArrayList<>();\n+\n+            for (final Object fuzzyResult : jsonArray) {\n+                final String res = ((JsonObject) fuzzyResult).getString(\"name\");\n+\n+                if (!suggestions.contains(res)) suggestions.add(res);\n+            }\n+\n+            return suggestions;\n+        } catch (final JsonParserException e) {\n+            e.printStackTrace();", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYyOTQyNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576629425", "bodyText": "same here, list instead of arraylist", "author": "XiangRongLin", "createdAt": "2021-02-16T08:24:55Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampSuggestionExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.suggestion.SuggestionExtractor;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BandcampSuggestionExtractor extends SuggestionExtractor {\n+\n+    private static final String AUTOCOMPLETE_URL = \"https://bandcamp.com/api/fuzzysearch/1/autocomplete?q=\";\n+    public BandcampSuggestionExtractor(final StreamingService service) {\n+        super(service);\n+    }\n+\n+    @Override\n+    public List<String> suggestionList(final String query) throws IOException, ExtractionException {\n+        final Downloader downloader = NewPipe.getDownloader();\n+\n+        try {\n+            final JsonObject fuzzyResults = JsonParser.object().from(\n+                    downloader.get(AUTOCOMPLETE_URL + URLEncoder.encode(query, \"UTF-8\")).responseBody()\n+            );\n+\n+            final JsonArray jsonArray = fuzzyResults.getObject(\"auto\")\n+                    .getArray(\"results\");\n+\n+            final ArrayList<String> suggestions = new ArrayList<>();", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjYzMDQ1MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r576630451", "bodyText": "write comments more objectivly and not like you are talking to someone", "author": "XiangRongLin", "createdAt": "2021-02-16T08:26:34Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/streaminfoitem/BandcampStreamInfoItemExtractor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors.streaminfoitem;\n+\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Implements methods that return a constant value for better readability in\n+ * subclasses.\n+ */\n+public abstract class BandcampStreamInfoItemExtractor implements StreamInfoItemExtractor {\n+    private final String uploaderUrl;\n+\n+    public BandcampStreamInfoItemExtractor(final String uploaderUrl) {\n+        this.uploaderUrl = uploaderUrl;\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() {\n+        return StreamType.AUDIO_STREAM;\n+    }\n+\n+    @Override\n+    public long getViewCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        return uploaderUrl;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() {\n+        return null;\n+    }\n+\n+    /**\n+     * There are no ads just like that, duh\n+     */", "originalCommit": "5bf9fddba930fb0555b5ec77221bf6faa00d79e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16973126a0b2c68f5cfbfad2618f8248ff11e654", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/16973126a0b2c68f5cfbfad2618f8248ff11e654", "message": "Use Collections.emptyList() instead of Collections.EMPTY_LIST or new ArrayList()", "committedDate": "2021-02-16T19:25:48Z", "type": "commit"}, {"oid": "54b8e54f8007df6e6820a5f9d42f4bd6e141c9c2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/54b8e54f8007df6e6820a5f9d42f4bd6e141c9c2", "message": "Fix potential NPE", "committedDate": "2021-02-16T19:59:13Z", "type": "commit"}, {"oid": "54aa5b3042b1f4cc53a06d78ef9aac4be6996a4a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/54aa5b3042b1f4cc53a06d78ef9aac4be6996a4a", "message": "Use propper structure in KioskExtractors\n\nMade BandCampRadioExtractor a Kiosk which holds StreamInfoItems and not InfoItems.", "committedDate": "2021-02-16T20:09:42Z", "type": "commit"}, {"oid": "98268e351c06d30009965bd2698246cff6a2a405", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/98268e351c06d30009965bd2698246cff6a2a405", "message": "Move radio URL check into a function", "committedDate": "2021-02-19T12:35:44Z", "type": "commit"}, {"oid": "fa61b864f20e756156be96a4b073f871b3b1c785", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fa61b864f20e756156be96a4b073f871b3b1c785", "message": "Code improvements", "committedDate": "2021-02-19T12:37:24Z", "type": "commit"}, {"oid": "91e9309486dfd52276306ff8034edae790cdfbd3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/91e9309486dfd52276306ff8034edae790cdfbd3", "message": "Merge remote-tracking branch 'origin/dev' into bandcamp", "committedDate": "2021-02-19T12:37:45Z", "type": "commit"}, {"oid": "02920fafa88b3cdba4f4f94ca11c4ebdee52554b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/02920fafa88b3cdba4f4f94ca11c4ebdee52554b", "message": "Add isUploaderVerified()", "committedDate": "2021-02-19T14:51:23Z", "type": "commit"}, {"oid": "ea120a463725bdddf22577888f85dd42c7d82db2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ea120a463725bdddf22577888f85dd42c7d82db2", "message": "remove print stacktrace\n\nuse interface", "committedDate": "2021-02-19T23:23:45Z", "type": "commit"}, {"oid": "ea120a463725bdddf22577888f85dd42c7d82db2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ea120a463725bdddf22577888f85dd42c7d82db2", "message": "remove print stacktrace\n\nuse interface", "committedDate": "2021-02-19T23:23:45Z", "type": "forcePushed"}, {"oid": "adde4332d1f21220f18d5b0079210a733324f203", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/adde4332d1f21220f18d5b0079210a733324f203", "message": "Code improvements", "committedDate": "2021-02-20T22:58:54Z", "type": "commit"}, {"oid": "c07db80ef068f885ca10709551e4591bd385cdac", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c07db80ef068f885ca10709551e4591bd385cdac", "message": "Add BASE_URL and BASE_API_URL to BandcampExtractorHelper", "committedDate": "2021-02-21T11:15:45Z", "type": "commit"}, {"oid": "b9e8ee8450c5222c80d42af59d1e9f197766be87", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b9e8ee8450c5222c80d42af59d1e9f197766be87", "message": "Rename BandcampExtractorHelper.smartConcatenate(String[], String) to Utils.nonEmptyAndNullJoin(String, String[])", "committedDate": "2021-02-21T11:35:14Z", "type": "commit"}, {"oid": "70814dcfefbc6eaae9aa88a9190d3fa582b0376b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/70814dcfefbc6eaae9aa88a9190d3fa582b0376b", "message": "Fix Utils.nonEmptyAndNullJoin\n\nWhen using the index here, it the index needs to be decremented once an element is removed. To cirecumvent this, the native Collections.removeIf() method is used.", "committedDate": "2021-02-21T11:51:47Z", "type": "commit"}, {"oid": "a1688fe9534983b27899bbdf685f99ff6f25d4c9", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a1688fe9534983b27899bbdf685f99ff6f25d4c9", "message": "Move BandcampExtractorHelper.getJsonData(String, String) to JsonUtils", "committedDate": "2021-02-21T12:51:12Z", "type": "commit"}, {"oid": "22fa131922a4de9f99e29c099e4fcd2c1054a8fa", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/22fa131922a4de9f99e29c099e4fcd2c1054a8fa", "message": "Merge branch 'dev' into bandcamp", "committedDate": "2021-03-05T18:45:37Z", "type": "commit"}, {"oid": "a579337c9a4d317f2c8f247201a57de11c9e196e", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a579337c9a4d317f2c8f247201a57de11c9e196e", "message": "Bandcamp service with support for streams and searches", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "43dc3c3d4c44de432ed0adb1483f284bd1055449", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/43dc3c3d4c44de432ed0adb1483f284bd1055449", "message": "Return empty kiosk list instead of null", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "80d67e22b7185596968e907b942b1f0f5acbc502", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/80d67e22b7185596968e907b942b1f0f5acbc502", "message": "Return mp3-128 audio stream [experimental]", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "c3d127ccd934c2cd6e8baedd9bce08e200aabe2e", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c3d127ccd934c2cd6e8baedd9bce08e200aabe2e", "message": "Bandcamp audio stream test and fix", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "5281456899db32ffff9362202a72bad430d1f70c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5281456899db32ffff9362202a72bad430d1f70c", "message": "Bandcamp channel link handler factory", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "a42c77425dfc5165a75546a1b9822789d3623de2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a42c77425dfc5165a75546a1b9822789d3623de2", "message": "Bandcamp channel extractor (ignoring everything but tracks)", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "7730eb2ea13011b275296d24469623709c08f1f8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7730eb2ea13011b275296d24469623709c08f1f8", "message": "Bandcamp channel extractor: enforce https when getting banner url", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "d5cdc20be16e966fe3f3b5c60f26499bca046be3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d5cdc20be16e966fe3f3b5c60f26499bca046be3", "message": "Bandcmap channel extractor: fix getting banner url", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "91c0ec7ceabf643f67234c23d4a70b76f9e6ed82", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/91c0ec7ceabf643f67234c23d4a70b76f9e6ed82", "message": "Bandcamp stream extractor: catch NullPointerException", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "794ca5eeaea99e3152278e562de5bca5851611c0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/794ca5eeaea99e3152278e562de5bca5851611c0", "message": "Bandcamp channel extractor: handel nonexistent images better", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "d05b14ae48e3c82e8cbe671d5a7cd7133f4c9fd4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d05b14ae48e3c82e8cbe671d5a7cd7133f4c9fd4", "message": "Add channels (artists) to search results", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "ba700bfb3e05752ea2e55ed57ce6973d0258a0e7", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ba700bfb3e05752ea2e55ed57ce6973d0258a0e7", "message": "Add bandcamp playlists (albums)", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "655df356a2b7c407211e3f1d05974ce5f5dd3d2d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/655df356a2b7c407211e3f1d05974ce5f5dd3d2d", "message": "Various improvements concerning bandcamp playlists", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "e12ddaef7f7ab8c447df2310490e5a37d23bd84a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e12ddaef7f7ab8c447df2310490e5a37d23bd84a", "message": "Bandcamp playlist and search extractors: better and more tests", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "ce2a88e56ff2e7c819429b8fff55f20775a5706d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ce2a88e56ff2e7c819429b8fff55f20775a5706d", "message": "Add bandcamp search suggestion extractor", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "9b16baffb7438af1f3b79f365cdc01a2a32dadbc", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9b16baffb7438af1f3b79f365cdc01a2a32dadbc", "message": "Bandcamp search: multiple pages", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "13e4908b832e042141c3d8577b3cec4e69ee27d0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/13e4908b832e042141c3d8577b3cec4e69ee27d0", "message": "Bandcamp search extractor: read track count from result page", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "db02850d4f899e2226e2fcc99dd39bbcb70b0091", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/db02850d4f899e2226e2fcc99dd39bbcb70b0091", "message": "Bandcamp playlist extractor: support playlists with just one stream", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "13ef11e9c8a1c60aaf8e68b63ad2fb88723569f9", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/13ef11e9c8a1c60aaf8e68b63ad2fb88723569f9", "message": "Bandcamp featured kiosk", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "808c8aa0872ef0bee4d8d042dc5d772babfde154", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/808c8aa0872ef0bee4d8d042dc5d772babfde154", "message": "Add bandcamp weekly kiosk\n\nUnfortunately a little messy", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "f0d36dfa7eb1b35b99c6c593d4e6e247868e09fe", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f0d36dfa7eb1b35b99c6c593d4e6e247868e09fe", "message": "Bandcamp radio: proper name, date shortened", "committedDate": "2020-01-03T11:28:49Z", "type": "commit"}, {"oid": "46e1f3922c8869db7bef79573c5f86dde3ab9b4f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/46e1f3922c8869db7bef79573c5f86dde3ab9b4f", "message": "Refuse to load bandcamp playlists without content", "committedDate": "2020-01-03T11:32:22Z", "type": "commit"}, {"oid": "46e1f3922c8869db7bef79573c5f86dde3ab9b4f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/46e1f3922c8869db7bef79573c5f86dde3ab9b4f", "message": "Refuse to load bandcamp playlists without content", "committedDate": "2020-01-03T11:32:22Z", "type": "forcePushed"}, {"oid": "ba967f1a1520f7fadded3b6bfd67c4da0f188c2b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ba967f1a1520f7fadded3b6bfd67c4da0f188c2b", "message": "Workaround enourmous load times for long bandcamp playlists\n\nAdditionally, get cover art from json instead of html", "committedDate": "2020-01-03T12:17:04Z", "type": "commit"}, {"oid": "7b5702bdc2a84a37f158b41bbfe7f708507ea10d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7b5702bdc2a84a37f158b41bbfe7f708507ea10d", "message": "Add bandcamp to list of supported services in README", "committedDate": "2020-01-11T15:32:45Z", "type": "commit"}, {"oid": "623e6a8c63147ede1dabad7272049ec973ee1848", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/623e6a8c63147ede1dabad7272049ec973ee1848", "message": "Merge branch 'dev' into dev", "committedDate": "2020-01-17T21:37:42Z", "type": "commit"}, {"oid": "36a316eea52d0c93a07cbcf1ea86d91cef53b5d5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/36a316eea52d0c93a07cbcf1ea86d91cef53b5d5", "message": "Merge branch 'dev' into dev", "committedDate": "2020-02-08T08:43:13Z", "type": "commit"}, {"oid": "b78f78801778e16ae8809ccb9b9c0ca1cb4c98e6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b78f78801778e16ae8809ccb9b9c0ca1cb4c98e6", "message": "Merge branch 'dev' into dev", "committedDate": "2020-03-17T17:03:14Z", "type": "commit"}, {"oid": "a1523eb293acbf074b51972b272b901f7bc9144f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a1523eb293acbf074b51972b272b901f7bc9144f", "message": "Update Bandcamp service to latest interface changes", "committedDate": "2020-03-17T19:40:25Z", "type": "commit"}, {"oid": "5c0a03328a0901ea4f551d1d602753aa4893c977", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5c0a03328a0901ea4f551d1d602753aa4893c977", "message": "Merge 'origin/dev' into dev", "committedDate": "2020-04-19T12:26:51Z", "type": "commit"}, {"oid": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9c239371f4cb8b781827a06eaa827e0b328f89b4", "message": "Change nanojson dependency to @wb9688's fork", "committedDate": "2020-04-19T12:29:39Z", "type": "commit"}, {"oid": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9c239371f4cb8b781827a06eaa827e0b328f89b4", "message": "Change nanojson dependency to @wb9688's fork", "committedDate": "2020-04-19T12:29:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwMTc5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411401796", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - bandcamp\n          \n          \n            \n            - Bandcamp", "author": "wb9688", "createdAt": "2020-04-20T14:00:36Z", "path": "README.md", "diffHunk": "@@ -42,6 +42,7 @@ The following sites are currently supported:\n - SoundCloud\n - MediaCCC\n - PeerTube (no P2P)\n+- bandcamp", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwMjY1Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411402657", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                implementation 'com.github.wb9688:nanojson:1d9e1aea9049fc9f85e68b43ba39fe7be1c1f751'\n          \n          \n            \n                implementation 'org.jsoup:jsoup:1.9.2'\n          \n          \n            \n                implementation 'org.mozilla:rhino:1.7.7.1'\n          \n          \n            \n                implementation 'com.github.spotbugs:spotbugs-annotations:3.1.0'\n          \n          \n            \n                implementation 'org.nibor.autolink:autolink:0.8.0'\n          \n          \n            \n                implementation 'org.json:json:20190722'\n          \n          \n            \n                implementation 'com.github.TeamNewPipe:nanojson:1d9e1aea9049fc9f85e68b43ba39fe7be1c1f751'\n          \n          \n            \n                implementation 'org.jsoup:jsoup:1.9.2'\n          \n          \n            \n                implementation 'org.mozilla:rhino:1.7.7.1'\n          \n          \n            \n                implementation 'com.github.spotbugs:spotbugs-annotations:3.1.0'\n          \n          \n            \n                implementation 'org.nibor.autolink:autolink:0.8.0'\n          \n      \n    \n    \n  \n\nAlso, don't forget to change it in timeago-parser/build.gradle as well, plus move the remaining code from org.json to nanojson.", "author": "wb9688", "createdAt": "2020-04-20T14:01:41Z", "path": "extractor/build.gradle", "diffHunk": "@@ -1,11 +1,14 @@\n+\n+\n dependencies {\n     implementation project(':timeago-parser')\n \n-    implementation 'com.grack:nanojson:1.1'\n+    implementation 'com.github.wb9688:nanojson:1d9e1aea9049fc9f85e68b43ba39fe7be1c1f751'\n     implementation 'org.jsoup:jsoup:1.9.2'\n     implementation 'org.mozilla:rhino:1.7.7.1'\n     implementation 'com.github.spotbugs:spotbugs-annotations:3.1.0'\n     implementation 'org.nibor.autolink:autolink:0.8.0'\n+    implementation 'org.json:json:20190722'", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0OTExMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411649113", "bodyText": "plus move the remaining code from org.json to nanojson.\n\nI'm fairly sure I already did this, I must have scrambled things up somehow. I commited the commit again as b100b98.", "author": "fynngodau", "createdAt": "2020-04-20T19:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwMjY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MDc5MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411650790", "bodyText": "I'm pretty sure you did that indeed.", "author": "wb9688", "createdAt": "2020-04-20T19:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwMjY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwMjk2Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411402962", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final BandcampService bandcamp;\n          \n          \n            \n                public static final BandcampService Bandcamp;", "author": "wb9688", "createdAt": "2020-04-20T14:02:02Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/ServiceList.java", "diffHunk": "@@ -39,6 +40,7 @@ private ServiceList() {\n     public static final SoundcloudService SoundCloud;\n     public static final MediaCCCService MediaCCC;\n     public static final PeertubeService PeerTube;\n+    public static final BandcampService bandcamp;", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwNjA3Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411406077", "bodyText": "Generate that JSON in a proper way, i.e. using JsonWriter.", "author": "wb9688", "createdAt": "2020-04-20T14:05:54Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampChannelExtractor.java", "diffHunk": "@@ -0,0 +1,167 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.jsoup.Jsoup;\n+import org.schabi.newpipe.extractor.InfoItemsCollector;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampChannelExtractor extends ChannelExtractor {\n+\n+    private JSONObject channelInfo;\n+\n+    public BandcampChannelExtractor(StreamingService service, ListLinkHandler linkHandler) throws ParsingException {\n+        super(service, linkHandler);\n+\n+        channelInfo = getArtistDetails(getId());\n+    }\n+\n+    /**\n+     * Fetch artist details from mobile endpoint.\n+     * <a href=https://notabug.org/fynngodau/bandcampDirect/wiki/rewindBandcamp+%E2%80%93+Fetching+artist+details>\n+     * I once took a moment to note down how it works.</a>\n+     */\n+    public static JSONObject getArtistDetails(String id) throws ParsingException {\n+        try {\n+            return\n+                    new JSONObject(\n+                            NewPipe.getDownloader().post(\n+                                    \"https://bandcamp.com/api/mobile/22/band_details\",\n+                                    null,\n+                                    (\"{\\\"band_id\\\":\\\"\" + id + \"\\\"}\").getBytes()", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwNzQzNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411407435", "bodyText": "Don't fetch anything in the constructor. Do that in onFetchPage().", "author": "wb9688", "createdAt": "2020-04-20T14:07:41Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampChannelExtractor.java", "diffHunk": "@@ -0,0 +1,167 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.jsoup.Jsoup;\n+import org.schabi.newpipe.extractor.InfoItemsCollector;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampChannelExtractor extends ChannelExtractor {\n+\n+    private JSONObject channelInfo;\n+\n+    public BandcampChannelExtractor(StreamingService service, ListLinkHandler linkHandler) throws ParsingException {\n+        super(service, linkHandler);\n+\n+        channelInfo = getArtistDetails(getId());", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMTAyNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411411025", "bodyText": "You shouldn't do a lot of stuff here, but in the appropriate InfoItemExtractors as far as that's possible. This code here should be reduced to something like:\n            final Element resultInfo = searchResult.getElementsByClass(\"result-info\").first();\n\n            final String type = resultInfo.getElementsByClass(\"itemtype\").first().text();\n            \n            switch (type) {\n                default:\n                    continue;\n                case \"FAN\":\n                    //collector.commit Channel (?) with heading, url, image\n                    break;\n                case \"ARTIST\":\n                    collector.commit(new BandcampChannelInfoItemExtractor(resultInfo));\n                    break;\n                case \"ALBUM\":\n                    collector.commit(new BandcampPlaylistInfoItemExtractor(resultInfo));\n                    break;\n                case \"TRACK\":\n                    collector.commit(new BandcampStreamInfoItemExtractor(resultInfo));\n                    break;\n            }", "author": "wb9688", "createdAt": "2020-04-20T14:12:13Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampSearchExtractor.java", "diffHunk": "@@ -0,0 +1,139 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.linkhandler.SearchQueryHandler;\n+import org.schabi.newpipe.extractor.search.InfoItemsSearchCollector;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampSearchExtractor extends SearchExtractor {\n+\n+    public BandcampSearchExtractor(StreamingService service, SearchQueryHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public String getSearchSuggestion() {\n+        return null;\n+    }\n+\n+    @Override\n+    public InfoItemsPage<InfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+        // okay apparently this is where we DOWNLOAD the page and then COMMIT its ENTRIES to an INFOITEMPAGE\n+        String html = getDownloader().get(pageUrl).responseBody();\n+\n+        InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n+\n+\n+        Document d = Jsoup.parse(html);\n+\n+        Elements searchResultsElements = d.getElementsByClass(\"searchresult\");\n+\n+        for (Element searchResult :\n+                searchResultsElements) {\n+\n+            Element resultInfo = searchResult.getElementsByClass(\"result-info\").first();\n+\n+            String type = resultInfo\n+                    .getElementsByClass(\"itemtype\").first().text();\n+\n+            String image = null;\n+            Element img = searchResult.getElementsByClass(\"art\").first()\n+                    .getElementsByTag(\"img\").first();\n+            if (img != null) {\n+                image = img.attr(\"src\");\n+            }\n+\n+            String heading = resultInfo.getElementsByClass(\"heading\").text();\n+\n+            String subhead = resultInfo.getElementsByClass(\"subhead\").text();\n+\n+            String url = resultInfo.getElementsByClass(\"itemurl\").text();\n+\n+            switch (type) {\n+                default:\n+                    continue;\n+                case \"FAN\":\n+                    //collector.commit Channel (?) with heading, url, image\n+                    break;\n+\n+                case \"ARTIST\":\n+                    collector.commit(new BandcampChannelInfoItemExtractor(heading, url, image, subhead));\n+                    break;\n+\n+                case \"ALBUM\":\n+                    String artist = subhead.split(\" by\")[0];\n+                    String length = resultInfo.getElementsByClass(\"length\").text();\n+                    int tracks = Integer.parseInt(length.split(\" track\")[0]);\n+                    collector.commit(new BandcampPlaylistInfoItemExtractor(heading, artist, url, image, tracks));\n+                    break;\n+\n+                case \"TRACK\":\n+                    String[] splitBy = subhead.split(\" by\");\n+                    String artist1 = null;\n+                    if (splitBy.length > 1) {\n+                        artist1 = subhead.split(\" by\")[1];\n+                    }\n+                    collector.commit(new BandcampStreamInfoItemExtractor(heading, url, image, artist1));\n+                    break;\n+            }", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3MTc2OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411671768", "bodyText": "Like this? 2139c58 (Oh, that broke a thing)\n8209959\nI don't think this improves the code quality as the code is now duplicate.", "author": "fynngodau", "createdAt": "2020-04-20T20:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwMTA5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r415401096", "bodyText": "Not like that. It seems like you get the data in significantly different ways sometimes. I'll take a look soon.", "author": "wb9688", "createdAt": "2020-04-26T21:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4OTc1Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r421489756", "bodyText": "@fynngodau: The idea is that you'll have a class like the following:\npackage org.schabi.newpipe.extractor.services.bandcamp.extractors;\n\nimport org.jsoup.nodes.Element;\nimport org.schabi.newpipe.extractor.channel.ChannelInfoItemExtractor;\nimport org.schabi.newpipe.extractor.exceptions.ParsingException;\n\npublic class BandcampChannelInfoItemExtractor implements ChannelInfoItemExtractor {\n    private final Element searchResult;\n    private final Element resultInfo;\n\n    public BandcampChannelInfoItemExtractor(final Element searchResult) {\n        this.searchResult = searchResult;\n        resultInfo = searchResult.getElementsByClass(\"result-info\").first();\n    }\n\n    @Override\n    public String getName() throws ParsingException {\n        return resultInfo.getElementsByClass(\"heading\").text();\n    }\n\n    @Override\n    public String getUrl() throws ParsingException {\n        return resultInfo.getElementsByClass(\"itemurl\").text();\n    }\n\n    @Override\n    public String getThumbnailUrl() throws ParsingException {\n        return searchResult.getElementsByClass(\"art\").first().getElementsByTag(\"img\").first();\n    }\n\n    @Override\n    public String getDescription() {\n        return resultInfo.getElementsByClass(\"subhead\").text();\n    }\n\n    @Override\n    public long getSubscriberCount() {\n        return -1;\n    }\n\n    @Override\n    public long getStreamCount() {\n        return -1;\n    }\n}", "author": "wb9688", "createdAt": "2020-05-07T13:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAxOTc4Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r430019783", "bodyText": "@wb9688: I changed the BandcampChannelInfoItemExtractor as you suggested, as well as the other InfoItem classes, in 692b2d0. I hope it is what you had in mind.", "author": "fynngodau", "createdAt": "2020-05-25T16:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMTAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNDI0MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411414240", "bodyText": "Not needed with our nanojson fork", "author": "wb9688", "createdAt": "2020-04-20T14:16:09Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampStreamExtractor.java", "diffHunk": "@@ -0,0 +1,318 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.*;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampChannelExtractor.getImageUrl;\n+\n+public class BandcampStreamExtractor extends StreamExtractor {\n+\n+    private JSONObject albumJson;\n+    private JSONObject current;\n+    private Document document;\n+\n+    public BandcampStreamExtractor(StreamingService service, LinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        String html = downloader.get(getLinkHandler().getUrl()).responseBody();\n+        document = Jsoup.parse(html);\n+        albumJson = getAlbumInfoJson(html);\n+        current = albumJson.getJSONObject(\"current\");\n+\n+        if (albumJson.getJSONArray(\"trackinfo\").length() > 1) {\n+            // In this case, we are actually viewing an album page!\n+            throw new ExtractionException(\"Page is actually an album, not a track\");\n+        }\n+    }\n+\n+    /**\n+     * Get the JSON that contains album's metadata from page\n+     *\n+     * @param html Website\n+     * @return Album metadata JSON\n+     * @throws ParsingException In case of a faulty website\n+     */\n+    public static JSONObject getAlbumInfoJson(String html) throws ParsingException {\n+        try {\n+            return BandcampExtractorHelper.getJSONFromJavaScriptVariables(html, \"TralbumData\");\n+        } catch (JSONException e) {\n+            throw new ParsingException(\"Faulty JSON; page likely does not contain album data\", e);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new ParsingException(\"JSON does not exist\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return current.getString(\"title\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        String[] parts = getUrl().split(\"/\");\n+        // https: (/) (/) * .bandcamp.com (/) and leave out the rest\n+        return \"https://\" + parts[2] + \"/\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return albumJson.getString(\"url\").replace(\"http://\", \"https://\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderName() throws ParsingException {\n+        return albumJson.getString(\"artist\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() throws ParsingException {\n+        return current.getString(\"release_date\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        if (albumJson.isNull(\"art_id\")) return \"\";\n+        else return getImageUrl(albumJson.getLong(\"art_id\"), true);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        try {\n+            return document.getElementsByClass(\"band-photo\").first().attr(\"src\");\n+        } catch (NullPointerException e) {\n+            return \"\";\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Description getDescription() {\n+        String s = BandcampExtractorHelper.smartConcatenate(\n+                new String[]{\n+                        getStringOrNull(current, \"about\"),\n+                        getStringOrNull(current, \"lyrics\"),\n+                        getStringOrNull(current, \"credits\")\n+                }, \"\\n\\n\"\n+        );\n+        return new Description(s, Description.PLAIN_TEXT);\n+    }\n+\n+    /**\n+     * Avoid exceptions like \"<code>JSONObject[\"about\"] not a string.</code>\" and instead just return null.\n+     * This is for the case that the actual JSON has something like <code>\"about\": null</code>.\n+     */\n+    private String getStringOrNull(JSONObject jsonObject, String value) {\n+        try {\n+            return jsonObject.getString(value);\n+        } catch (JSONException e) {\n+            return null;\n+        }\n+    }", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNDcyMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411414723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return 0;\n          \n          \n            \n                    return NO_AGE_LIMIT;", "author": "wb9688", "createdAt": "2020-04-20T14:16:45Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampStreamExtractor.java", "diffHunk": "@@ -0,0 +1,318 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.*;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampChannelExtractor.getImageUrl;\n+\n+public class BandcampStreamExtractor extends StreamExtractor {\n+\n+    private JSONObject albumJson;\n+    private JSONObject current;\n+    private Document document;\n+\n+    public BandcampStreamExtractor(StreamingService service, LinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        String html = downloader.get(getLinkHandler().getUrl()).responseBody();\n+        document = Jsoup.parse(html);\n+        albumJson = getAlbumInfoJson(html);\n+        current = albumJson.getJSONObject(\"current\");\n+\n+        if (albumJson.getJSONArray(\"trackinfo\").length() > 1) {\n+            // In this case, we are actually viewing an album page!\n+            throw new ExtractionException(\"Page is actually an album, not a track\");\n+        }\n+    }\n+\n+    /**\n+     * Get the JSON that contains album's metadata from page\n+     *\n+     * @param html Website\n+     * @return Album metadata JSON\n+     * @throws ParsingException In case of a faulty website\n+     */\n+    public static JSONObject getAlbumInfoJson(String html) throws ParsingException {\n+        try {\n+            return BandcampExtractorHelper.getJSONFromJavaScriptVariables(html, \"TralbumData\");\n+        } catch (JSONException e) {\n+            throw new ParsingException(\"Faulty JSON; page likely does not contain album data\", e);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new ParsingException(\"JSON does not exist\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return current.getString(\"title\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        String[] parts = getUrl().split(\"/\");\n+        // https: (/) (/) * .bandcamp.com (/) and leave out the rest\n+        return \"https://\" + parts[2] + \"/\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return albumJson.getString(\"url\").replace(\"http://\", \"https://\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderName() throws ParsingException {\n+        return albumJson.getString(\"artist\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() throws ParsingException {\n+        return current.getString(\"release_date\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        if (albumJson.isNull(\"art_id\")) return \"\";\n+        else return getImageUrl(albumJson.getLong(\"art_id\"), true);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        try {\n+            return document.getElementsByClass(\"band-photo\").first().attr(\"src\");\n+        } catch (NullPointerException e) {\n+            return \"\";\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Description getDescription() {\n+        String s = BandcampExtractorHelper.smartConcatenate(\n+                new String[]{\n+                        getStringOrNull(current, \"about\"),\n+                        getStringOrNull(current, \"lyrics\"),\n+                        getStringOrNull(current, \"credits\")\n+                }, \"\\n\\n\"\n+        );\n+        return new Description(s, Description.PLAIN_TEXT);\n+    }\n+\n+    /**\n+     * Avoid exceptions like \"<code>JSONObject[\"about\"] not a string.</code>\" and instead just return null.\n+     * This is for the case that the actual JSON has something like <code>\"about\": null</code>.\n+     */\n+    private String getStringOrNull(JSONObject jsonObject, String value) {\n+        try {\n+            return jsonObject.getString(value);\n+        } catch (JSONException e) {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public int getAgeLimit() throws ParsingException {\n+        return 0;", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzIxOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411417219", "bodyText": "No need for the throws ParsingException then", "author": "wb9688", "createdAt": "2020-04-20T14:19:52Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampStreamInfoItemExtractor.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+public class BandcampStreamInfoItemExtractor implements StreamInfoItemExtractor {\n+\n+    private String title;\n+    private String url;\n+    private String cover;\n+    private String artist;\n+    private long duration;\n+    private StreamingService service;\n+\n+    public BandcampStreamInfoItemExtractor(String title, String url, String artist, long duration, StreamingService service) {\n+        this(title, url, null, artist, duration);\n+        this.service = service;\n+    }\n+\n+    public BandcampStreamInfoItemExtractor(String title, String url, String cover, String artist) {\n+        this(title, url, cover, artist, -1);\n+    }\n+\n+    public BandcampStreamInfoItemExtractor(String title, String url, String cover, String artist, long duration) {\n+        this.title = title;\n+        this.url = url;\n+        this.cover = cover;\n+        this.artist = artist;\n+        this.duration = duration;\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() {\n+        return StreamType.AUDIO_STREAM;\n+    }\n+\n+    @Override\n+    public long getDuration() {\n+        return duration;\n+    }\n+\n+    @Override\n+    public long getViewCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        return artist;\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {\n+        return null; // TODO\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return title;\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return url;\n+    }\n+\n+    /**\n+     * There is no guarantee that every track of an album has the same cover art, so it needs to be fetched\n+     * per-track if in playlist view\n+     */\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        if (cover != null) return cover;\n+        else {\n+            try {\n+                StreamExtractor extractor = service.getStreamExtractor(getUrl());\n+                extractor.fetchPage();\n+                return extractor.getThumbnailUrl();\n+            } catch (ExtractionException | IOException e) {\n+                throw new ParsingException(\"could not download cover art location\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * There are no ads just like that, duh\n+     */\n+    @Override\n+    public boolean isAd() throws ParsingException {", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzkyNw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411417927", "bodyText": "Can't you use for (Object item : jsonArray)?", "author": "wb9688", "createdAt": "2020-04-20T14:20:49Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampSuggestionExtractor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.suggestion.SuggestionExtractor;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampSearchQueryHandlerFactory.CHARSET_UTF_8;\n+\n+public class BandcampSuggestionExtractor extends SuggestionExtractor {\n+\n+    private static final String AUTOCOMPLETE_URL = \"https://bandcamp.com/api/fuzzysearch/1/autocomplete?q=\";\n+    public BandcampSuggestionExtractor(StreamingService service) {\n+        super(service);\n+    }\n+\n+    @Override\n+    public List<String> suggestionList(String query) throws IOException, ExtractionException {\n+        Downloader downloader = NewPipe.getDownloader();\n+\n+        JSONObject fuzzyResults = new JSONObject(\n+                downloader.get(AUTOCOMPLETE_URL + URLEncoder.encode(query, CHARSET_UTF_8)).responseBody()\n+        );\n+\n+        JSONArray jsonArray = fuzzyResults.getJSONObject(\"auto\")\n+                .getJSONArray(\"results\");\n+\n+        ArrayList<String> suggestions = new ArrayList<>();\n+\n+        for (int i = 0; i < jsonArray.length(); i++) {", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4MzAyNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411683024", "bodyText": "No, I can't; it would have to be for (JsonObject item : jsonArray) (because I then want to get a String from this JsonObject) and that is not possible because the Json parser doesn't know of what kind its array is.\nThis is as if I would replace getObject(i) with get(i), which returns an Object as well, not a JsonObject.", "author": "fynngodau", "createdAt": "2020-04-20T20:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzOTE5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411939191", "bodyText": "For YouTube, we do for (Object item : jsonArray) everywhere and just downcast i.e. item to a JsonObject", "author": "wb9688", "createdAt": "2020-04-21T07:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwMDM5NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r415400394", "bodyText": "I changed it (9bc7a47); I do think the way I did is cleaner, but there's no need to argue about it\u2026", "author": "fynngodau", "createdAt": "2020-04-26T21:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMDc1Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411420756", "bodyText": "I think you should still just return the actual ID in getId()", "author": "wb9688", "createdAt": "2020-04-20T14:24:15Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/linkHandler/BandcampPlaylistLinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,31 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.linkHandler;\n+\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandlerFactory;\n+\n+import java.util.List;\n+\n+/**\n+ * Just as with streams, the album ids are essentially useless for us.\n+ */", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4OTE1Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411689153", "bodyText": "This would require querying the page, which I think would be better to avoid because the ID is not necessary.", "author": "fynngodau", "createdAt": "2020-04-20T21:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMDc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTMyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411421329", "bodyText": "There's no need to do this stuff\u2026", "author": "wb9688", "createdAt": "2020-04-20T14:24:59Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/linkHandler/BandcampPlaylistLinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,31 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.linkHandler;\n+\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandlerFactory;\n+\n+import java.util.List;\n+\n+/**\n+ * Just as with streams, the album ids are essentially useless for us.\n+ */\n+public class BandcampPlaylistLinkHandlerFactory extends ListLinkHandlerFactory {\n+    @Override\n+    public String getId(String url) throws ParsingException {\n+        return getUrl(url);\n+    }\n+\n+    @Override\n+    public String getUrl(String url, List<String> contentFilter, String sortFilter) throws ParsingException {\n+        if (url.endsWith(\"/\"))\n+            url = url.substring(0, url.length() - 1);\n+        url = url.replace(\"http://\", \"https://\").toLowerCase();\n+        return url;", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4OTE1OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411689159", "bodyText": "I wrote this because I thought that in order for album URLs to work as IDs, they would always have to look the same, so that asking for the ID of the same URL twice would have to always yield the same result", "author": "fynngodau", "createdAt": "2020-04-20T21:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwMDc0Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r415400746", "bodyText": "YouTube channel IDs also aren't always the same. AFAIK we don't store IDs anywhere in NP, just URLs", "author": "wb9688", "createdAt": "2020-04-26T21:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNDc0Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r430024743", "bodyText": "Okay, I removed \"URL cleanup\" with e08256e.", "author": "fynngodau", "createdAt": "2020-05-25T17:18:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzA0NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411423045", "bodyText": "No need for these variables", "author": "wb9688", "createdAt": "2020-04-20T14:27:06Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/linkHandler/BandcampSearchQueryHandlerFactory.java", "diffHunk": "@@ -0,0 +1,31 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.linkHandler;\n+\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.SearchQueryHandlerFactory;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.util.List;\n+\n+public class BandcampSearchQueryHandlerFactory extends SearchQueryHandlerFactory {\n+\n+    private static final String SEARCH_URL = \"https://bandcamp.com/search?q=\";\n+\n+    public static final String CHARSET_UTF_8 = \"UTF-8\";", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzMzNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411423336", "bodyText": "Use a <p>", "author": "wb9688", "createdAt": "2020-04-20T14:27:30Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/linkHandler/BandcampStreamLinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.linkHandler;\n+\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n+\n+/**\n+ * Tracks don't have standalone ids, they are always in combination with the band id.\n+ * That's why id = url. Instead, URLs are cleaned up so that they always look the same.\n+ * <br/><br/>\n+ * Radio (bandcamp weekly) shows do have ids.\n+ */\n+public class BandcampStreamLinkHandlerFactory extends LinkHandlerFactory {\n+\n+\n+    /**\n+     * @see BandcampStreamLinkHandlerFactory\n+     */\n+    @Override\n+    public String getId(String url) throws ParsingException {\n+        if (url.matches(\"https?://bandcamp\\\\.com/\\\\?show=\\\\d+\")) {\n+            return url.split(\"bandcamp.com/\\\\?show=\")[1];\n+        } else\n+            return getUrl(url);\n+    }\n+\n+    /**\n+     * Clean up url\n+     * @see BandcampStreamLinkHandlerFactory\n+     */\n+    @Override\n+    public String getUrl(String input) {\n+        if (input.matches(\"\\\\d+\"))\n+            return \"https://bandcamp.com/?show=\" + input;\n+        if (input.endsWith(\"/\"))\n+            input = input.substring(0, input.length() - 1);\n+        input = input.replace(\"http://\", \"https://\").toLowerCase();\n+        return input;\n+    }\n+\n+    /**\n+     * Sometimes, the root page of an artist is also an album or track\n+     * page. In that case, it is assumed that one actually wants to open\n+     * the profile and not the track it has set as the default one.\n+     * <br/><br/>Urls are expected to be in this format to account for", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTU0Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411425542", "bodyText": "You should test all the public methods of a ChannelExtractor, and not call BandcampChannelExtractor directly.", "author": "wb9688", "createdAt": "2020-04-20T14:30:16Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampChannelExtractorTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampChannelExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.bandcamp;\n+\n+public class BandcampChannelExtractorTest {\n+\n+    private static BandcampChannelExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampChannelExtractor) bandcamp\n+                .getChannelExtractor(\"https://zachbenson.bandcamp.com/\");\n+    }\n+\n+    @Test\n+    public void testImageUrl() {\n+        assertEquals(\"https://f4.bcbits.com/img/a2405652335_10.jpg\", BandcampChannelExtractor.getImageUrl(2405652335L, true));\n+        assertEquals(\"https://f4.bcbits.com/img/17433693_10.jpg\", BandcampChannelExtractor.getImageUrl(17433693L, false));\n+    }\n+\n+    @Test\n+    public void testTranslateIdsToUrl() throws ParsingException {\n+        assertEquals(\"https://zachbenson.bandcamp.com/album/covers\", BandcampExtractorHelper.getStreamUrlFromIds(2862267535L, 2063639444L, \"album\"));\n+        // TODO write more test cases\n+    }\n+\n+    @Test\n+    public void testLength() throws ParsingException {\n+        assertTrue(extractor.getInitialPage().getItems().size() > 2);\n+    }\n+\n+    @Test\n+    public void testGetBannerUrl() throws ParsingException {\n+        // Why is this picture in png format when all other pictures are jpg?\n+        assertTrue(extractor.getBannerUrl().endsWith(\".png\"));\n+    }\n+\n+    @Test\n+    public void testGetNoAvatar() throws ExtractionException {\n+        assertEquals(\"\", bandcamp.getChannelExtractor(\"https://powertothequeerkids.bandcamp.com/\").getAvatarUrl());\n+    }\n+\n+    @Test\n+    public void testGetNoBanner() throws ExtractionException {\n+        assertEquals(\"\", bandcamp.getChannelExtractor(\"https://powertothequeerkids.bandcamp.com/\").getBannerUrl());\n+    }\n+}", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1Nzc2NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435157765", "bodyText": "I have BandcampChannelExtractorTest implement BaseChannelExtractorTest since 89b0639.", "author": "fynngodau", "createdAt": "2020-06-04T10:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTgzMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411425832", "bodyText": "Shouldn't be public", "author": "wb9688", "createdAt": "2020-04-20T14:30:39Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampChannelExtractor.java", "diffHunk": "@@ -0,0 +1,167 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.jsoup.Jsoup;\n+import org.schabi.newpipe.extractor.InfoItemsCollector;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampChannelExtractor extends ChannelExtractor {\n+\n+    private JSONObject channelInfo;\n+\n+    public BandcampChannelExtractor(StreamingService service, ListLinkHandler linkHandler) throws ParsingException {\n+        super(service, linkHandler);\n+\n+        channelInfo = getArtistDetails(getId());\n+    }\n+\n+    /**\n+     * Fetch artist details from mobile endpoint.\n+     * <a href=https://notabug.org/fynngodau/bandcampDirect/wiki/rewindBandcamp+%E2%80%93+Fetching+artist+details>\n+     * I once took a moment to note down how it works.</a>\n+     */\n+    public static JSONObject getArtistDetails(String id) throws ParsingException {", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5NjU5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411696596", "bodyText": "I need to access this method in BandcampChannelLinkHandlerFactory to execute the same request in order to retrieve the URL from an ID.", "author": "fynngodau", "createdAt": "2020-04-20T21:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzNzgyMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411937822", "bodyText": "Then put it in BandcampParsingHelper. An Extractor just isn't the place for that", "author": "wb9688", "createdAt": "2020-04-21T07:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwMTE1OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r415401158", "bodyText": "Okay, I moved this method as well as getImageUrl(long, boolean) to the BandcampExtractorHelper class", "author": "fynngodau", "createdAt": "2020-04-26T21:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTg5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411425896", "bodyText": "Shouldn't be public", "author": "wb9688", "createdAt": "2020-04-20T14:30:44Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampChannelExtractor.java", "diffHunk": "@@ -0,0 +1,167 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.jsoup.Jsoup;\n+import org.schabi.newpipe.extractor.InfoItemsCollector;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampChannelExtractor extends ChannelExtractor {\n+\n+    private JSONObject channelInfo;\n+\n+    public BandcampChannelExtractor(StreamingService service, ListLinkHandler linkHandler) throws ParsingException {\n+        super(service, linkHandler);\n+\n+        channelInfo = getArtistDetails(getId());\n+    }\n+\n+    /**\n+     * Fetch artist details from mobile endpoint.\n+     * <a href=https://notabug.org/fynngodau/bandcampDirect/wiki/rewindBandcamp+%E2%80%93+Fetching+artist+details>\n+     * I once took a moment to note down how it works.</a>\n+     */\n+    public static JSONObject getArtistDetails(String id) throws ParsingException {\n+        try {\n+            return\n+                    new JSONObject(\n+                            NewPipe.getDownloader().post(\n+                                    \"https://bandcamp.com/api/mobile/22/band_details\",\n+                                    null,\n+                                    (\"{\\\"band_id\\\":\\\"\" + id + \"\\\"}\").getBytes()\n+                            ).responseBody()\n+                    );\n+        } catch (IOException | ReCaptchaException e) {\n+            throw new ParsingException(\"Could not download band details\", e);\n+        }\n+    }\n+\n+    /**\n+     * @param id    The image ID\n+     * @param album Whether this is the cover of an album\n+     * @return Url of image with this ID in size 10 which is 1200x1200 (we could also choose size 0\n+     * but we don't want something as large as 3460x3460 here, do we?)\n+     */\n+    public static String getImageUrl(long id, boolean album) {", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzM5MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411427390", "bodyText": "You should test all public methods of a KioskExtractor", "author": "wb9688", "createdAt": "2020-04-20T14:32:36Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampFeaturedExtractorTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampFeaturedExtractor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.bandcamp;\n+\n+/**\n+ * Tests for {@link BandcampFeaturedExtractor}\n+ */\n+public class BandcampFeaturedExtractorTest {\n+\n+    private static BandcampFeaturedExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() throws ExtractionException, IOException {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampFeaturedExtractor) bandcamp\n+                .getKioskList().getDefaultKioskExtractor();\n+    }\n+\n+    @Test\n+    public void testFeaturedCount() throws ExtractionException, IOException {\n+        List<InfoItem> list = extractor.getInitialPage().getItems();\n+        assertTrue(list.size() > 1);\n+    }\n+\n+}", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5OTg0Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411699846", "bodyText": "What else is there to test? getPage(String) and getNextPageUrl() return null, getId() and getName() return the same value, namely \"Featured\".", "author": "fynngodau", "createdAt": "2020-04-20T21:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODg5Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411428892", "bodyText": "You should test all public methods of a PlaylistExtractor, and test only one channel per (sub)class.", "author": "wb9688", "createdAt": "2020-04-20T14:34:31Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ContentNotAvailableException;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampPlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ServiceList.bandcamp;\n+\n+/**\n+ * Tests for {@link BandcampPlaylistExtractor}\n+ */\n+public class BandcampPlaylistExtractorTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+    }\n+\n+    /**\n+     * Test whether playlists contain the correct amount of items\n+     */\n+    @Test\n+    public void testCount() throws ExtractionException, IOException {\n+        PlaylistExtractor extractor = bandcamp.getPlaylistExtractor(\"https://macbenson.bandcamp.com/album/coming-of-age\");\n+        extractor.fetchPage();\n+\n+        assertEquals(5, extractor.getStreamCount());\n+    }\n+\n+    /**\n+     * Tests whether different stream thumbnails (track covers) get loaded correctly\n+     */\n+    @Test\n+    public void testDifferentTrackCovers() throws ExtractionException, IOException {\n+        PlaylistExtractor extractor = bandcamp.getPlaylistExtractor(\"https://zachbensonarchive.bandcamp.com/album/results-of-boredom\");\n+        extractor.fetchPage();\n+\n+        List<StreamInfoItem> l = extractor.getInitialPage().getItems();\n+        assertEquals(extractor.getThumbnailUrl(), l.get(0).getThumbnailUrl());\n+        assertNotEquals(extractor.getThumbnailUrl(), l.get(5).getThumbnailUrl());\n+    }\n+\n+    /**\n+     * Tests that no attempt to load every track's cover individually is made\n+     */\n+    @Test(timeout = 10000L)\n+    public void testDifferentTrackCoversDuration() throws ExtractionException, IOException {\n+        PlaylistExtractor extractor = bandcamp.getPlaylistExtractor(\"https://infiniteammo.bandcamp.com/album/night-in-the-woods-vol-1-at-the-end-of-everything\");\n+        extractor.fetchPage();\n+\n+        /* All tracks in this album have the same cover art, but I don't know any albums with more than 10 tracks\n+         * that has at least one track with a cover art different from the rest.\n+         */\n+        List<StreamInfoItem> l = extractor.getInitialPage().getItems();\n+        assertEquals(extractor.getThumbnailUrl(), l.get(0).getThumbnailUrl());\n+        assertEquals(extractor.getThumbnailUrl(), l.get(5).getThumbnailUrl());\n+    }\n+\n+    /**\n+     * Test playlists with locked content\n+     */\n+    @Test(expected = ContentNotAvailableException.class)\n+    public void testLockedContent() throws ExtractionException, IOException {\n+        PlaylistExtractor extractor = bandcamp.getPlaylistExtractor(\"https://billwurtz.bandcamp.com/album/high-enough\");\n+        extractor.fetchPage();\n+    }\n+\n+    /**\n+     * Test playlist with just one track\n+     */\n+    @Test\n+    public void testSingleStreamPlaylist() throws ExtractionException, IOException {\n+        PlaylistExtractor extractor = bandcamp.getPlaylistExtractor(\"https://zachjohnson1.bandcamp.com/album/endless\");\n+        extractor.fetchPage();\n+\n+        assertEquals(1, extractor.getStreamCount());\n+\n+    }\n+}", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNzY4Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411717687", "bodyText": "Is this how you imagine these tests to be? f71bd29", "author": "fynngodau", "createdAt": "2020-04-20T21:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyOTMzNw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411429337", "bodyText": "You should test all public methods of a KioskExtractor", "author": "wb9688", "createdAt": "2020-04-20T14:35:07Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampRadioExtractorTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioExtractor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.bandcamp;\n+\n+/**\n+ * Tests for {@link BandcampRadioExtractor}\n+ */\n+public class BandcampRadioExtractorTest {\n+\n+    private static BandcampRadioExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() throws ExtractionException, IOException {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampRadioExtractor) bandcamp\n+                .getKioskList()\n+                .getExtractorById(\"Radio\", null);\n+    }\n+\n+    @Test\n+    public void testRadioCount() throws ExtractionException, IOException {\n+        List<InfoItem> list = bandcamp.getKioskList().getExtractorById(\"Radio\", null).getInitialPage().getItems();\n+        assertTrue(list.size() > 300);\n+    }\n+}", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzExMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411433110", "bodyText": "You should test all public methods of a StreamExtractor", "author": "wb9688", "createdAt": "2020-04-20T14:39:57Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampRadioStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioStreamExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ServiceList.bandcamp;\n+\n+public class BandcampRadioStreamExtractorTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+    }\n+\n+    @Test\n+    public void testGettingCorrectStreamExtractor() throws ExtractionException {\n+        assertTrue(bandcamp.getStreamExtractor(\"https://bandcamp.com/?show=3\") instanceof BandcampRadioStreamExtractor);\n+        assertFalse(bandcamp.getStreamExtractor(\"https://zachbenson.bandcamp.com/track/deflated\") instanceof BandcampRadioStreamExtractor);\n+    }\n+\n+    @Test\n+    public void testExtracting() throws ExtractionException, IOException {\n+        BandcampRadioStreamExtractor e = (BandcampRadioStreamExtractor) bandcamp.getStreamExtractor(\"https://bandcamp.com/?show=230\");\n+        e.fetchPage();\n+        assertEquals(\"Sound Movements\", e.getName());\n+        assertEquals(\"Andrew Jervis\", e.getUploaderName());\n+    }\n+}", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1NTU5Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435155593", "bodyText": "I added more tests to BandcampRadioStreamExtractorTests in e98bff8.", "author": "fynngodau", "createdAt": "2020-06-04T10:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDI5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411434297", "bodyText": "Remove this test. It should be handled by returning false in onAcceptUrl() in the appropriate LinkHandler", "author": "wb9688", "createdAt": "2020-04-20T14:41:22Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.bandcamp;\n+\n+public class BandcampStreamExtractorTest {\n+\n+    private static BandcampStreamExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampStreamExtractor) bandcamp\n+                .getStreamExtractor(\"https://zachbenson.bandcamp.com/track/kitchen\");\n+        extractor.fetchPage();\n+    }\n+\n+    @Test(expected = ExtractionException.class)\n+    public void testAlbum() throws ExtractionException {\n+        bandcamp.getStreamExtractor(\"https://zachbenson.bandcamp.com/album/prom\");\n+    }", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNTE4MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411435181", "bodyText": "See above", "author": "wb9688", "createdAt": "2020-04-20T14:42:32Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.bandcamp;\n+\n+public class BandcampStreamExtractorTest {\n+\n+    private static BandcampStreamExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampStreamExtractor) bandcamp\n+                .getStreamExtractor(\"https://zachbenson.bandcamp.com/track/kitchen\");\n+        extractor.fetchPage();\n+    }\n+\n+    @Test(expected = ExtractionException.class)\n+    public void testAlbum() throws ExtractionException {\n+        bandcamp.getStreamExtractor(\"https://zachbenson.bandcamp.com/album/prom\");\n+    }\n+\n+    @Test\n+    public void testServiceId() {\n+    }\n+\n+    @Test\n+    public void testName() throws ParsingException {\n+        assertEquals(\"kitchen\", extractor.getName());\n+    }\n+\n+    @Test\n+    public void testUrl() throws ParsingException {\n+        assertEquals(\"https://zachbenson.bandcamp.com/track/kitchen\", extractor.getUrl());\n+    }\n+\n+    @Test\n+    public void testArtistUrl() throws ParsingException {\n+        assertEquals(\"https://zachbenson.bandcamp.com/\", extractor.getUploaderUrl());\n+    }\n+\n+    @Test\n+    public void testDescription() {\n+        assertEquals(831, extractor.getDescription().getContent().length());\n+    }\n+\n+    @Test\n+    public void testArtistProfilePicture() {\n+        String url = extractor.getUploaderAvatarUrl();\n+        assertTrue(url.contains(\"://f4.bcbits.com/img/\") && url.endsWith(\".jpg\"));\n+    }\n+\n+    @Test\n+    public void testNoArtistProfilePicture() throws ExtractionException {\n+        assertEquals(\"\", bandcamp.getStreamExtractor(\"https://powertothequeerkids.bandcamp.com/track/human-nature\").getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    public void testAudioStream() {\n+        assertTrue(extractor.getAudioStreams().get(0).getUrl().contains(\"bcbits.com/stream\"));\n+        assertEquals(1, extractor.getAudioStreams().size());\n+    }\n+\n+    @Test(expected = ParsingException.class)\n+    public void testInvalidUrl() throws ExtractionException {\n+        bandcamp.getStreamExtractor(\"https://bandcamp.com\");\n+    }", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjEzNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411436136", "bodyText": "Please implement this test in a similar way as YoutubeSearchExtractorTest currently does", "author": "wb9688", "createdAt": "2020-04-20T14:43:45Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampSearchExtractorTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.playlist.PlaylistInfoItem;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampChannelInfoItemExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampPlaylistInfoItemExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampSearchExtractor;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.bandcamp;\n+\n+/**\n+ * Test for {@link BandcampSearchExtractor}\n+ */\n+public class BandcampSearchExtractorTest {\n+\n+    private static BandcampSearchExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+\n+    }\n+\n+    /**\n+     * Tests whether searching bandcamp for \"best friend's basement\" returns\n+     * the accordingly named song by Zach Benson\n+     */\n+    @Test\n+    public void testStreamSearch() throws ExtractionException, IOException {\n+        SearchExtractor extractor = bandcamp.getSearchExtractor(\"best friend's basement\");\n+\n+        ListExtractor.InfoItemsPage<InfoItem> page = extractor.getInitialPage();\n+        InfoItem bestFriendsBasement = page.getItems().get(0);\n+\n+        // The track by Zach Benson should be the first result, no?\n+        assertEquals(\"Best Friend's Basement\", bestFriendsBasement.getName());\n+        assertTrue(bestFriendsBasement.getThumbnailUrl().endsWith(\".jpg\"));\n+        assertTrue(bestFriendsBasement.getThumbnailUrl().contains(\"f4.bcbits.com/img/\"));\n+        assertEquals(InfoItem.InfoType.STREAM, bestFriendsBasement.getInfoType());\n+    }\n+\n+    /**\n+     * Tests whether searching bandcamp for \"C418\" returns the artist's profile\n+     */\n+    @Test\n+    public void testChannelSearch() throws ExtractionException, IOException {\n+        SearchExtractor extractor = bandcamp.getSearchExtractor(\"C418\");\n+        InfoItem c418 = extractor.getInitialPage()\n+                .getItems().get(0);\n+\n+        // C418's artist profile should be the first result, no?\n+        assertEquals(\"C418\", c418.getName());\n+        assertTrue(c418.getThumbnailUrl().endsWith(\".jpg\"));\n+        assertTrue(c418.getThumbnailUrl().contains(\"f4.bcbits.com/img/\"));\n+        assertEquals(\"https://c418.bandcamp.com\", c418.getUrl());\n+\n+    }\n+\n+    /**\n+     * Tests whether searching bandcamp for \"minecraft volume alpha\" returns the corresponding album\n+     */\n+    @Test\n+    public void testAlbumSearch() throws ExtractionException, IOException {\n+        SearchExtractor extractor = bandcamp.getSearchExtractor(\"minecraft volume alpha\");\n+        InfoItem minecraft = extractor.getInitialPage()\n+                .getItems().get(0);\n+\n+        // Minecraft volume alpha should be the first result, no?\n+        assertEquals(\"Minecraft - Volume Alpha\", minecraft.getName());\n+        assertTrue(minecraft.getThumbnailUrl().endsWith(\".jpg\"));\n+        assertTrue(minecraft.getThumbnailUrl().contains(\"f4.bcbits.com/img/\"));\n+        assertEquals(\"https://c418.bandcamp.com/album/minecraft-volume-alpha\", minecraft.getUrl());\n+\n+        // Verify that playlist tracks counts get extracted correctly\n+        assertEquals(24, ((PlaylistInfoItem) minecraft).getStreamCount());\n+\n+    }\n+\n+    /**\n+     * Tests searches with multiple pages\n+     */\n+    @Test\n+    public void testMultiplePages() throws ExtractionException, IOException {\n+        // A query practically guaranteed to have the maximum amount of pages\n+        SearchExtractor extractor = bandcamp.getSearchExtractor(\"e\");\n+\n+        assertEquals(\"https://bandcamp.com/search?q=e&page=2\", extractor.getInitialPage().getNextPageUrl());\n+\n+        assertEquals(\"https://bandcamp.com/search?q=e&page=3\", extractor.getPage(extractor.getNextPageUrl()).getNextPageUrl());\n+    }\n+}", "originalCommit": "9c239371f4cb8b781827a06eaa827e0b328f89b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNzc4OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r411707788", "bodyText": "Should I remove my existing tests?", "author": "fynngodau", "createdAt": "2020-04-20T21:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1ODg3MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435158870", "bodyText": "See 8f6c00f", "author": "fynngodau", "createdAt": "2020-06-04T10:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjEzNg=="}], "type": "inlineReview"}, {"oid": "51eeff6638934bae36158596b53d82782cc2b394", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/51eeff6638934bae36158596b53d82782cc2b394", "message": "Bandcamp capitalization\n\nCo-Authored-By: wb9688 <46277131+wb9688@users.noreply.github.com>", "committedDate": "2020-04-20T19:40:54Z", "type": "forcePushed"}, {"oid": "b100b9873ff1e6177ad53510ad4b39dd92a78ff7", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b100b9873ff1e6177ad53510ad4b39dd92a78ff7", "message": "Bandcmap: Use nanojson fork instead of org.json", "committedDate": "2020-04-20T19:53:04Z", "type": "commit"}, {"oid": "b100b9873ff1e6177ad53510ad4b39dd92a78ff7", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b100b9873ff1e6177ad53510ad4b39dd92a78ff7", "message": "Bandcmap: Use nanojson fork instead of org.json", "committedDate": "2020-04-20T19:53:04Z", "type": "forcePushed"}, {"oid": "c133190c53ab9df70d3a809fd94c6e59dbba73fc", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c133190c53ab9df70d3a809fd94c6e59dbba73fc", "message": "Bandcamp capitalization", "committedDate": "2020-04-20T19:55:35Z", "type": "commit"}, {"oid": "67de0285e155f41c6810305b8dfe135da20086df", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/67de0285e155f41c6810305b8dfe135da20086df", "message": "Bandcamp: Generate query JSON in a proper way", "committedDate": "2020-04-20T20:03:29Z", "type": "commit"}, {"oid": "433d72c26a9b96527ab02bc7827bb8534f53ae0b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/433d72c26a9b96527ab02bc7827bb8534f53ae0b", "message": "Depend on nanojson fork in timeago-parser", "committedDate": "2020-04-20T20:04:10Z", "type": "commit"}, {"oid": "00c03330596b00b2c6246cc29b5dccd84df1d7d5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/00c03330596b00b2c6246cc29b5dccd84df1d7d5", "message": "Bandcamp: Fetch channelInfo in onFetchPage", "committedDate": "2020-04-20T20:41:44Z", "type": "commit"}, {"oid": "82099592c72fff0f5aac77e0cd8d5b67269ff70c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/82099592c72fff0f5aac77e0cd8d5b67269ff70c", "message": "Bandcamp: Move code from SearchExtractor to InfoItemExtractors", "committedDate": "2020-04-20T20:44:35Z", "type": "commit"}, {"oid": "965bce00cf61fb06513b6bbbc79e352dde828956", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/965bce00cf61fb06513b6bbbc79e352dde828956", "message": "Bandcamp stream extractor: return NO_AGE_LIMIT", "committedDate": "2020-04-20T20:44:45Z", "type": "commit"}, {"oid": "965bce00cf61fb06513b6bbbc79e352dde828956", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/965bce00cf61fb06513b6bbbc79e352dde828956", "message": "Bandcamp stream extractor: return NO_AGE_LIMIT", "committedDate": "2020-04-20T20:44:45Z", "type": "forcePushed"}, {"oid": "9201e0d3ea40dbbe0ae5e9e3d713365125e823c6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9201e0d3ea40dbbe0ae5e9e3d713365125e823c6", "message": "Don't declare exceptions that can't actually be thrown", "committedDate": "2020-04-20T20:46:54Z", "type": "commit"}, {"oid": "10ae3db1184036e79c311583a3a0f2a6af5df6ad", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/10ae3db1184036e79c311583a3a0f2a6af5df6ad", "message": "Bandcamp javadoc: Replace br tags with p tags", "committedDate": "2020-04-20T21:03:12Z", "type": "commit"}, {"oid": "f18451fb32f448d74041c56a125d658a5c81b11a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f18451fb32f448d74041c56a125d658a5c81b11a", "message": "Bandcamp channel extractor: package-private access for internal methods", "committedDate": "2020-04-20T21:07:40Z", "type": "forcePushed"}, {"oid": "8c70dab8c5fe978d74b381bdc92915222bd928ea", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8c70dab8c5fe978d74b381bdc92915222bd928ea", "message": "Bandcamp search query handler factory: inline variable", "committedDate": "2020-04-20T21:11:16Z", "type": "commit"}, {"oid": "648198ffa19298b423599cc4429139a1df336ea5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/648198ffa19298b423599cc4429139a1df336ea5", "message": "Bandcamp channel extractor: package-private access for internal methods", "committedDate": "2020-04-20T21:11:21Z", "type": "forcePushed"}, {"oid": "b5e251c82fdd61ba1187d5615364065f55212a75", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b5e251c82fdd61ba1187d5615364065f55212a75", "message": "Bandcamp channel extractor: package-private access for getImageUrl(\u2026)", "committedDate": "2020-04-20T21:12:43Z", "type": "commit"}, {"oid": "b5e251c82fdd61ba1187d5615364065f55212a75", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b5e251c82fdd61ba1187d5615364065f55212a75", "message": "Bandcamp channel extractor: package-private access for getImageUrl(\u2026)", "committedDate": "2020-04-20T21:12:43Z", "type": "forcePushed"}, {"oid": "5009d9f53b762af578b5b0cd4b932869e62c6c7a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5009d9f53b762af578b5b0cd4b932869e62c6c7a", "message": "Bandcamp tests: remove certain tests", "committedDate": "2020-04-20T21:25:00Z", "type": "commit"}, {"oid": "f71bd29d58be131bb3783607a3395251fdb4cd29", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f71bd29d58be131bb3783607a3395251fdb4cd29", "message": "Bandcamp playlist extractor: add more tests", "committedDate": "2020-04-20T21:52:12Z", "type": "commit"}, {"oid": "9bc7a470abb3189b45d147b6f09ceb54338bf1d5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9bc7a470abb3189b45d147b6f09ceb54338bf1d5", "message": "Replace fori with foreach loop", "committedDate": "2020-04-26T21:02:14Z", "type": "commit"}, {"oid": "a3e8e1c70ed60d3b2e622d4b50eb461d289e9601", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a3e8e1c70ed60d3b2e622d4b50eb461d289e9601", "message": "Bandcamp: move own methods to helper class", "committedDate": "2020-04-26T21:05:56Z", "type": "commit"}, {"oid": "e7b046db9d441e7bbd2ae49336cd623817ade212", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e7b046db9d441e7bbd2ae49336cd623817ade212", "message": "Merge remote-tracking branch 'origin/dev' into dev", "committedDate": "2020-04-26T21:12:43Z", "type": "commit"}, {"oid": "fff21caa87dfe6fcac5edee14a222d18e5d68618", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fff21caa87dfe6fcac5edee14a222d18e5d68618", "message": "Fix Bandcamp no avatar test\n\nI own the bandcamp artist account called \"NewPipeExtractorTest\", so it\nshouldn't break again.", "committedDate": "2020-05-25T16:53:10Z", "type": "commit"}, {"oid": "692b2d06f48d469f965b74093c14060a77f6c555", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/692b2d06f48d469f965b74093c14060a77f6c555", "message": "Bandcamp: read info item data in place and not in advance", "committedDate": "2020-05-25T16:53:15Z", "type": "commit"}, {"oid": "e08256ebc6ac71f3d1b3d94db1f81359e3e69cb9", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e08256ebc6ac71f3d1b3d94db1f81359e3e69cb9", "message": "Remove \"url cleanup\" in Bandcamp link handlers", "committedDate": "2020-05-25T17:17:27Z", "type": "commit"}, {"oid": "89b0639faa9948befa7f8c651a21e3d2e415b826", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/89b0639faa9948befa7f8c651a21e3d2e415b826", "message": "New Bandcamp tests for channel extractor", "committedDate": "2020-05-25T18:22:23Z", "type": "commit"}, {"oid": "dd955c7f0c6920c47ee6d732c75463aaaa28aab8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/dd955c7f0c6920c47ee6d732c75463aaaa28aab8", "message": "Merge branch 'origin/dev' into dev", "committedDate": "2020-06-03T19:13:40Z", "type": "commit"}, {"oid": "9fa9d920a9e17b7703bed8fde5cd4db4be8705aa", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9fa9d920a9e17b7703bed8fde5cd4db4be8705aa", "message": "Bandcamp: Implement new methods required due to interface changes", "committedDate": "2020-06-03T19:35:11Z", "type": "commit"}, {"oid": "3940138fc51306c9ad9010e5776f313bf5d919e8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3940138fc51306c9ad9010e5776f313bf5d919e8", "message": "Fix Bandcamp capitalization in one more spot", "committedDate": "2020-06-03T20:41:27Z", "type": "commit"}, {"oid": "de776561b0eeff079f614a97a2ecf1f46c6a1581", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/de776561b0eeff079f614a97a2ecf1f46c6a1581", "message": "Bandcamp: fix loading uploader from streams in search", "committedDate": "2020-06-04T10:02:18Z", "type": "commit"}, {"oid": "8f6c00f8d81d16de1b2f08a72452ebc5ad03c88c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8f6c00f8d81d16de1b2f08a72452ebc5ad03c88c", "message": "Use default test in BandcampSearchExtractorTest", "committedDate": "2020-06-04T10:12:20Z", "type": "commit"}, {"oid": "e98bff8ae96f498987add5fbd182385f0d9899a2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e98bff8ae96f498987add5fbd182385f0d9899a2", "message": "Improved Bandcamp radio stream extractor tests", "committedDate": "2020-06-04T10:30:53Z", "type": "commit"}, {"oid": "6822fe3dc8c1502c7dd83d0a0dcd6154ce505cfd", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6822fe3dc8c1502c7dd83d0a0dcd6154ce505cfd", "message": "Bandcamp: Get Stream upload date", "committedDate": "2020-06-04T11:03:16Z", "type": "commit"}, {"oid": "1be20ceeec6a06aa1030f3912545428e2137397c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1be20ceeec6a06aa1030f3912545428e2137397c", "message": "Bandcamp: parse date", "committedDate": "2020-06-04T12:09:21Z", "type": "commit"}, {"oid": "34b6928124bd0860061deea2e38cbd24dd40085c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/34b6928124bd0860061deea2e38cbd24dd40085c", "message": "Don't print stacktrace before throwing new exception", "committedDate": "2020-06-04T12:25:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMTYxOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435231619", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (list.get(i) == null || list.get(i).isEmpty() || list.get(i).equals(\"null\")) {\n          \n          \n            \n                        if (Utils.isNullOrEmpty(list.get(i)) || list.get(i).equals(\"null\")) {", "author": "B0pol", "createdAt": "2020-06-04T12:57:21Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampExtractorHelper.java", "diffHunk": "@@ -0,0 +1,144 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import com.grack.nanojson.JsonWriter;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+public class BandcampExtractorHelper {\n+\n+    /**\n+     * <p>Get JSON behind <code>var $variable = </code> out of web page</p>\n+     *\n+     * <p>Originally a part of bandcampDirect.</p>\n+     *\n+     * @param html     The HTML where the JSON we're looking for is stored inside a\n+     *                 variable inside some JavaScript block\n+     * @param variable Name of the variable\n+     * @return The JsonObject stored in the variable with this name\n+     */\n+    public static JsonObject getJSONFromJavaScriptVariables(String html, String variable) throws JsonParserException, ArrayIndexOutOfBoundsException, ParsingException {\n+\n+        String[] part = html.split(\"var \" + variable + \" = \");\n+\n+        String firstHalfGone = part[1];\n+\n+        firstHalfGone = firstHalfGone.replaceAll(\"\\\" \\\\+ \\\"\", \"\");\n+\n+        int position = -1;\n+        int level = 0;\n+        for (char character : firstHalfGone.toCharArray()) {\n+            position++;\n+\n+            switch (character) {\n+                case '{':\n+                    level++;\n+                    continue;\n+                case '}':\n+                    level--;\n+                    if (level == 0) {\n+                        return JsonParser.object().from(firstHalfGone.substring(0, position + 1)\n+                                .replaceAll(\" {4}//.+\", \"\") // Remove \"for the curious\" in JSON\n+                                .replaceAll(\"// xxx: note - don't internationalize this variable\", \"\") // Remove this comment\n+                        );\n+                    }\n+            }\n+        }\n+\n+        throw new ParsingException(\"Unexpected HTML: JSON never ends\");\n+    }\n+\n+    /**\n+     * Translate all these parameters together to the URL of the corresponding album or track\n+     * using the mobile api\n+     */\n+    public static String getStreamUrlFromIds(long bandId, long itemId, String itemType) throws ParsingException {\n+\n+        try {\n+            String jsonString = NewPipe.getDownloader().get(\n+                    \"https://bandcamp.com/api/mobile/22/tralbum_details?band_id=\" + bandId\n+                            + \"&tralbum_id=\" + itemId + \"&tralbum_type=\" + itemType.substring(0, 1))\n+                    .responseBody();\n+\n+            return JsonParser.object().from(jsonString).getString(\"bandcamp_url\").replace(\"http://\", \"https://\");\n+\n+        } catch (JsonParserException | ReCaptchaException | IOException e) {\n+            throw new ParsingException(\"Ids could not be translated to URL\", e);\n+        }\n+\n+    }\n+\n+    /**\n+     * Concatenate all non-null and non-empty strings together while separating them using\n+     * the comma parameter\n+     */\n+    public static String smartConcatenate(String[] strings, String comma) {\n+        StringBuilder result = new StringBuilder();\n+\n+        // Remove empty strings\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(strings));\n+        for (int i = list.size() - 1; i >= 0; i--) {\n+            if (list.get(i) == null || list.get(i).isEmpty() || list.get(i).equals(\"null\")) {", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjg4NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435232885", "bodyText": "Use the real date and compare if they are equal, not only the day\nSee the same youtube test", "author": "B0pol", "createdAt": "2020-06-04T12:59:23Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+public class BandcampStreamExtractorTest {\n+\n+    private static BandcampStreamExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampStreamExtractor) Bandcamp\n+                .getStreamExtractor(\"https://zachbenson.bandcamp.com/track/kitchen\");\n+        extractor.fetchPage();\n+    }\n+\n+    @Test\n+    public void testServiceId() {\n+    }\n+\n+    @Test\n+    public void testName() throws ParsingException {\n+        assertEquals(\"kitchen\", extractor.getName());\n+    }\n+\n+    @Test\n+    public void testUrl() throws ParsingException {\n+        assertEquals(\"https://zachbenson.bandcamp.com/track/kitchen\", extractor.getUrl());\n+    }\n+\n+    @Test\n+    public void testArtistUrl() throws ParsingException {\n+        assertEquals(\"https://zachbenson.bandcamp.com/\", extractor.getUploaderUrl());\n+    }\n+\n+    @Test\n+    public void testDescription() {\n+        assertEquals(831, extractor.getDescription().getContent().length());\n+    }\n+\n+    @Test\n+    public void testArtistProfilePicture() {\n+        String url = extractor.getUploaderAvatarUrl();\n+        assertTrue(url.contains(\"://f4.bcbits.com/img/\") && url.endsWith(\".jpg\"));\n+    }\n+\n+    @Test\n+    public void testUploadDate() throws ParsingException {\n+        assertEquals(270, extractor.getUploadDate().date().get(Calendar.DAY_OF_YEAR));", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxODAxNw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435418017", "bodyText": "I did it like this: e6ecd91\nThis should also demonstrate that the \"GMT\" gets parsed correctly.", "author": "fynngodau", "createdAt": "2020-06-04T17:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMzczMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435233732", "bodyText": "you should not do this, the content can change and 1 character less or more will break the change. You should test with Description.getContent().contains(\"Something that will probably never be edited\");", "author": "B0pol", "createdAt": "2020-06-04T13:00:25Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+public class BandcampStreamExtractorTest {\n+\n+    private static BandcampStreamExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampStreamExtractor) Bandcamp\n+                .getStreamExtractor(\"https://zachbenson.bandcamp.com/track/kitchen\");\n+        extractor.fetchPage();\n+    }\n+\n+    @Test\n+    public void testServiceId() {\n+    }\n+\n+    @Test\n+    public void testName() throws ParsingException {\n+        assertEquals(\"kitchen\", extractor.getName());\n+    }\n+\n+    @Test\n+    public void testUrl() throws ParsingException {\n+        assertEquals(\"https://zachbenson.bandcamp.com/track/kitchen\", extractor.getUrl());\n+    }\n+\n+    @Test\n+    public void testArtistUrl() throws ParsingException {\n+        assertEquals(\"https://zachbenson.bandcamp.com/\", extractor.getUploaderUrl());\n+    }\n+\n+    @Test\n+    public void testDescription() {\n+        assertEquals(831, extractor.getDescription().getContent().length());", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNDM2OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435234368", "bodyText": "useless comment imo", "author": "B0pol", "createdAt": "2020-06-04T13:01:23Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampSuggestionExtractorTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampSuggestionExtractor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+/**\n+ * Tests for {@link BandcampSuggestionExtractor}\n+ */\n+public class BandcampSuggestionExtractorTest {\n+\n+    private static BandcampSuggestionExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampSuggestionExtractor) Bandcamp.getSuggestionExtractor();\n+    }\n+\n+    @Test\n+    public void testSearchExample() throws IOException, ExtractionException {\n+        List<String> c418 = extractor.suggestionList(\"c418\");\n+\n+        // When looking for c418, one should find C418", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNDYxNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435234616", "bodyText": "definitely useless comment", "author": "B0pol", "createdAt": "2020-06-04T13:01:42Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampStreamLinkHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampStreamLinkHandlerFactory;\n+\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Test for {@link BandcampStreamLinkHandlerFactory}\n+ */\n+public class BandcampStreamLinkHandlerFactoryTest {\n+\n+    private static BandcampStreamLinkHandlerFactory linkHandler;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        linkHandler = new BandcampStreamLinkHandlerFactory();\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+    }\n+\n+    @Test\n+    public void testGetRadioUrl() {\n+        assertEquals(\"https://bandcamp.com/?show=1\", linkHandler.getUrl(\"1\"));\n+    }\n+\n+    @Test\n+    public void testGetRadioId() throws ParsingException {\n+        assertEquals(\"2\", linkHandler.getId(\"https://bandcamp.com/?show=2\"));\n+    }\n+\n+    @Test\n+    public void testAcceptUrl() throws ParsingException {\n+        // Tests expecting false\n+        assertFalse(linkHandler.acceptUrl(\"http://interovgm.com/releases/\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://interovgm.com/releases\"));\n+        assertFalse(linkHandler.acceptUrl(\"http://zachbenson.bandcamp.com\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://bandcamp.com\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://zachbenson.bandcamp.com/\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://powertothequeerkids.bandcamp.com/album/power-to-the-queer-kids\"));\n+\n+        // Tests expecting true", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNDY5Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435234693", "bodyText": "definitely useless comment", "author": "B0pol", "createdAt": "2020-06-04T13:01:48Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampStreamLinkHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampStreamLinkHandlerFactory;\n+\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Test for {@link BandcampStreamLinkHandlerFactory}\n+ */\n+public class BandcampStreamLinkHandlerFactoryTest {\n+\n+    private static BandcampStreamLinkHandlerFactory linkHandler;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        linkHandler = new BandcampStreamLinkHandlerFactory();\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+    }\n+\n+    @Test\n+    public void testGetRadioUrl() {\n+        assertEquals(\"https://bandcamp.com/?show=1\", linkHandler.getUrl(\"1\"));\n+    }\n+\n+    @Test\n+    public void testGetRadioId() throws ParsingException {\n+        assertEquals(\"2\", linkHandler.getId(\"https://bandcamp.com/?show=2\"));\n+    }\n+\n+    @Test\n+    public void testAcceptUrl() throws ParsingException {\n+        // Tests expecting false", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNTE3NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435235175", "bodyText": "add test for this", "author": "B0pol", "createdAt": "2020-06-04T13:02:31Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+public class BandcampStreamExtractorTest {\n+\n+    private static BandcampStreamExtractor extractor;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (BandcampStreamExtractor) Bandcamp\n+                .getStreamExtractor(\"https://zachbenson.bandcamp.com/track/kitchen\");\n+        extractor.fetchPage();\n+    }\n+\n+    @Test\n+    public void testServiceId() {", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNjg3MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435236870", "bodyText": "remove it as you are testing nothing here. Especially when you are not using inheritance that would make it mandatory.", "author": "B0pol", "createdAt": "2020-06-04T13:05:13Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampRadioStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioStreamExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+public class BandcampRadioStreamExtractorTest {\n+\n+    private static StreamExtractor e;\n+\n+    private static final String SHOW_URL = \"https://bandcamp.com/?show=230\";\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException, ExtractionException {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        e = Bandcamp.getStreamExtractor(SHOW_URL);\n+        e.fetchPage();\n+    }\n+\n+    @Test\n+    public void testGettingCorrectStreamExtractor() throws ExtractionException {\n+        assertTrue(Bandcamp.getStreamExtractor(\"https://bandcamp.com/?show=3\") instanceof BandcampRadioStreamExtractor);\n+        assertFalse(Bandcamp.getStreamExtractor(\"https://zachbenson.bandcamp.com/track/deflated\") instanceof BandcampRadioStreamExtractor);\n+    }\n+\n+    @Test\n+    public void testGetName() throws ParsingException {\n+        assertEquals(\"Sound Movements\", e.getName());\n+    }\n+\n+    @Test\n+    public void testGetUploaderUrl() {\n+    }\n+\n+    @Test\n+    public void testGetUrl() throws ParsingException {\n+        assertEquals(SHOW_URL, e.getUrl());\n+    }\n+\n+    @Test\n+    public void testGetUploaderName() throws ParsingException {\n+        assertEquals(\"Andrew Jervis\", e.getUploaderName());\n+    }\n+\n+    @Test\n+    public void testGetTextualUploadDate() throws ParsingException {\n+        assertEquals(\"16 May 2017\", e.getTextualUploadDate());\n+    }\n+\n+    @Test\n+    public void testUploadDate() throws ParsingException {\n+        assertEquals(136, e.getUploadDate().date().get(Calendar.DAY_OF_YEAR));\n+    }\n+\n+    @Test\n+    public void testGetThumbnailUrl() throws ParsingException {\n+        assertTrue(e.getThumbnailUrl().contains(\"bcbits.com/img\"));\n+    }\n+\n+    @Test\n+    public void testGetUploaderAvatarUrl() throws ParsingException {\n+        assertTrue(e.getUploaderAvatarUrl().contains(\"bandcamp-button\"));\n+\n+    }\n+\n+    @Test\n+    public void testGetDescription() throws ParsingException {\n+        assertEquals(\"Featuring special guests Nick Hakim and Elbows, plus fresh cuts from Eddie Palmieri, KRS One, Ladi6, and Moonchild.\", e.getDescription().getContent());\n+\n+    }\n+\n+    @Test\n+    public void testGetLength() throws ParsingException {\n+        assertEquals(5619, e.getLength());\n+    }\n+\n+    @Test\n+    public void testGetAudioStreams() throws ExtractionException, IOException {\n+        assertEquals(2, e.getAudioStreams().size());\n+    }\n+\n+    @Test\n+    public void testGetLicence() throws ParsingException {\n+        assertEquals(\"\", e.getLicence());", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNjk2OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435236969", "bodyText": "same, remove this useless test", "author": "B0pol", "createdAt": "2020-06-04T13:05:23Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampRadioStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioStreamExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+public class BandcampRadioStreamExtractorTest {\n+\n+    private static StreamExtractor e;\n+\n+    private static final String SHOW_URL = \"https://bandcamp.com/?show=230\";\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException, ExtractionException {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        e = Bandcamp.getStreamExtractor(SHOW_URL);\n+        e.fetchPage();\n+    }\n+\n+    @Test\n+    public void testGettingCorrectStreamExtractor() throws ExtractionException {\n+        assertTrue(Bandcamp.getStreamExtractor(\"https://bandcamp.com/?show=3\") instanceof BandcampRadioStreamExtractor);\n+        assertFalse(Bandcamp.getStreamExtractor(\"https://zachbenson.bandcamp.com/track/deflated\") instanceof BandcampRadioStreamExtractor);\n+    }\n+\n+    @Test\n+    public void testGetName() throws ParsingException {\n+        assertEquals(\"Sound Movements\", e.getName());\n+    }\n+\n+    @Test\n+    public void testGetUploaderUrl() {\n+    }\n+\n+    @Test\n+    public void testGetUrl() throws ParsingException {\n+        assertEquals(SHOW_URL, e.getUrl());\n+    }\n+\n+    @Test\n+    public void testGetUploaderName() throws ParsingException {\n+        assertEquals(\"Andrew Jervis\", e.getUploaderName());\n+    }\n+\n+    @Test\n+    public void testGetTextualUploadDate() throws ParsingException {\n+        assertEquals(\"16 May 2017\", e.getTextualUploadDate());\n+    }\n+\n+    @Test\n+    public void testUploadDate() throws ParsingException {\n+        assertEquals(136, e.getUploadDate().date().get(Calendar.DAY_OF_YEAR));\n+    }\n+\n+    @Test\n+    public void testGetThumbnailUrl() throws ParsingException {\n+        assertTrue(e.getThumbnailUrl().contains(\"bcbits.com/img\"));\n+    }\n+\n+    @Test\n+    public void testGetUploaderAvatarUrl() throws ParsingException {\n+        assertTrue(e.getUploaderAvatarUrl().contains(\"bandcamp-button\"));\n+\n+    }\n+\n+    @Test\n+    public void testGetDescription() throws ParsingException {\n+        assertEquals(\"Featuring special guests Nick Hakim and Elbows, plus fresh cuts from Eddie Palmieri, KRS One, Ladi6, and Moonchild.\", e.getDescription().getContent());\n+\n+    }\n+\n+    @Test\n+    public void testGetLength() throws ParsingException {\n+        assertEquals(5619, e.getLength());\n+    }\n+\n+    @Test\n+    public void testGetAudioStreams() throws ExtractionException, IOException {\n+        assertEquals(2, e.getAudioStreams().size());\n+    }\n+\n+    @Test\n+    public void testGetLicence() throws ParsingException {\n+        assertEquals(\"\", e.getLicence());\n+    }\n+\n+    @Test\n+    public void testGetCategory() throws ParsingException {\n+        assertEquals(\"\", e.getCategory());", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNzA3NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435237074", "bodyText": "same, remove this useless test", "author": "B0pol", "createdAt": "2020-06-04T13:05:33Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampRadioStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioStreamExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+public class BandcampRadioStreamExtractorTest {\n+\n+    private static StreamExtractor e;\n+\n+    private static final String SHOW_URL = \"https://bandcamp.com/?show=230\";\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException, ExtractionException {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        e = Bandcamp.getStreamExtractor(SHOW_URL);\n+        e.fetchPage();\n+    }\n+\n+    @Test\n+    public void testGettingCorrectStreamExtractor() throws ExtractionException {\n+        assertTrue(Bandcamp.getStreamExtractor(\"https://bandcamp.com/?show=3\") instanceof BandcampRadioStreamExtractor);\n+        assertFalse(Bandcamp.getStreamExtractor(\"https://zachbenson.bandcamp.com/track/deflated\") instanceof BandcampRadioStreamExtractor);\n+    }\n+\n+    @Test\n+    public void testGetName() throws ParsingException {\n+        assertEquals(\"Sound Movements\", e.getName());\n+    }\n+\n+    @Test\n+    public void testGetUploaderUrl() {\n+    }\n+\n+    @Test\n+    public void testGetUrl() throws ParsingException {\n+        assertEquals(SHOW_URL, e.getUrl());\n+    }\n+\n+    @Test\n+    public void testGetUploaderName() throws ParsingException {\n+        assertEquals(\"Andrew Jervis\", e.getUploaderName());\n+    }\n+\n+    @Test\n+    public void testGetTextualUploadDate() throws ParsingException {\n+        assertEquals(\"16 May 2017\", e.getTextualUploadDate());\n+    }\n+\n+    @Test\n+    public void testUploadDate() throws ParsingException {\n+        assertEquals(136, e.getUploadDate().date().get(Calendar.DAY_OF_YEAR));\n+    }\n+\n+    @Test\n+    public void testGetThumbnailUrl() throws ParsingException {\n+        assertTrue(e.getThumbnailUrl().contains(\"bcbits.com/img\"));\n+    }\n+\n+    @Test\n+    public void testGetUploaderAvatarUrl() throws ParsingException {\n+        assertTrue(e.getUploaderAvatarUrl().contains(\"bandcamp-button\"));\n+\n+    }\n+\n+    @Test\n+    public void testGetDescription() throws ParsingException {\n+        assertEquals(\"Featuring special guests Nick Hakim and Elbows, plus fresh cuts from Eddie Palmieri, KRS One, Ladi6, and Moonchild.\", e.getDescription().getContent());\n+\n+    }\n+\n+    @Test\n+    public void testGetLength() throws ParsingException {\n+        assertEquals(5619, e.getLength());\n+    }\n+\n+    @Test\n+    public void testGetAudioStreams() throws ExtractionException, IOException {\n+        assertEquals(2, e.getAudioStreams().size());\n+    }\n+\n+    @Test\n+    public void testGetLicence() throws ParsingException {\n+        assertEquals(\"\", e.getLicence());\n+    }\n+\n+    @Test\n+    public void testGetCategory() throws ParsingException {\n+        assertEquals(\"\", e.getCategory());\n+    }\n+\n+    @Test\n+    public void testGetTags() throws ParsingException {\n+        assertEquals(0, e.getTags().size());", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNzIwNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435237206", "bodyText": "test this", "author": "B0pol", "createdAt": "2020-06-04T13:05:45Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampRadioStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioStreamExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+public class BandcampRadioStreamExtractorTest {\n+\n+    private static StreamExtractor e;\n+\n+    private static final String SHOW_URL = \"https://bandcamp.com/?show=230\";\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException, ExtractionException {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        e = Bandcamp.getStreamExtractor(SHOW_URL);\n+        e.fetchPage();\n+    }\n+\n+    @Test\n+    public void testGettingCorrectStreamExtractor() throws ExtractionException {\n+        assertTrue(Bandcamp.getStreamExtractor(\"https://bandcamp.com/?show=3\") instanceof BandcampRadioStreamExtractor);\n+        assertFalse(Bandcamp.getStreamExtractor(\"https://zachbenson.bandcamp.com/track/deflated\") instanceof BandcampRadioStreamExtractor);\n+    }\n+\n+    @Test\n+    public void testGetName() throws ParsingException {\n+        assertEquals(\"Sound Movements\", e.getName());\n+    }\n+\n+    @Test\n+    public void testGetUploaderUrl() {", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNzM5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435237397", "bodyText": "remove this useless comment", "author": "B0pol", "createdAt": "2020-06-04T13:06:03Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampPlaylistLinkHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampPlaylistLinkHandlerFactory;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampStreamLinkHandlerFactory;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test for {@link BandcampPlaylistLinkHandlerFactory}\n+ */\n+public class BandcampPlaylistLinkHandlerFactoryTest {\n+\n+    private static BandcampPlaylistLinkHandlerFactory linkHandler;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        linkHandler = new BandcampPlaylistLinkHandlerFactory();\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+    }\n+\n+    @Test\n+    public void testAcceptUrl() throws ParsingException {\n+        // Tests expecting false\n+        assertFalse(linkHandler.acceptUrl(\"http://interovgm.com/releases/\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://interovgm.com/releases\"));\n+        assertFalse(linkHandler.acceptUrl(\"http://zachbenson.bandcamp.com\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://bandcamp.com\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://zachbenson.bandcamp.com/\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://zachbenson.bandcamp.com/track/kitchen\"));\n+        assertFalse(linkHandler.acceptUrl(\"https://interovgm.com/track/title\"));\n+\n+        // Tests expecting true", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNzQyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435237429", "bodyText": "remove this useless comment", "author": "B0pol", "createdAt": "2020-06-04T13:06:07Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampPlaylistLinkHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampPlaylistLinkHandlerFactory;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampStreamLinkHandlerFactory;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test for {@link BandcampPlaylistLinkHandlerFactory}\n+ */\n+public class BandcampPlaylistLinkHandlerFactoryTest {\n+\n+    private static BandcampPlaylistLinkHandlerFactory linkHandler;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        linkHandler = new BandcampPlaylistLinkHandlerFactory();\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+    }\n+\n+    @Test\n+    public void testAcceptUrl() throws ParsingException {\n+        // Tests expecting false", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNzg2OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435237868", "bodyText": "remove this useless comment", "author": "B0pol", "createdAt": "2020-06-04T13:06:50Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampFeaturedLinkHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampFeaturedLinkHandlerFactory;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Tests for {@link BandcampFeaturedLinkHandlerFactory}\n+ */\n+public class BandcampFeaturedLinkHandlerFactoryTest {\n+\n+    private static BandcampFeaturedLinkHandlerFactory linkHandler;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        linkHandler = new BandcampFeaturedLinkHandlerFactory();\n+    }\n+\n+\n+    @Test\n+    public void testAcceptUrl() throws ParsingException {\n+        // Tests expecting true\n+        assertTrue(linkHandler.acceptUrl(\"https://bandcamp.com/?show=1\"));\n+        assertTrue(linkHandler.acceptUrl(\"http://bandcamp.com/?show=2\"));\n+        assertTrue(linkHandler.acceptUrl(\"https://bandcamp.com/api/mobile/24/bootstrap_data\"));\n+        assertTrue(linkHandler.acceptUrl(\"https://bandcamp.com/api/bcweekly/1/list\"));\n+\n+        // Tests expecting false", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNzkwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435237903", "bodyText": "remove this useless comment", "author": "B0pol", "createdAt": "2020-06-04T13:06:53Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampFeaturedLinkHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampFeaturedLinkHandlerFactory;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Tests for {@link BandcampFeaturedLinkHandlerFactory}\n+ */\n+public class BandcampFeaturedLinkHandlerFactoryTest {\n+\n+    private static BandcampFeaturedLinkHandlerFactory linkHandler;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        linkHandler = new BandcampFeaturedLinkHandlerFactory();\n+    }\n+\n+\n+    @Test\n+    public void testAcceptUrl() throws ParsingException {\n+        // Tests expecting true", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzOTQyOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435239428", "bodyText": "remove this useless comment", "author": "B0pol", "createdAt": "2020-06-04T13:09:20Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampChannelLinkHandlerFactory;\n+\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test for {@link BandcampChannelLinkHandlerFactory}\n+ */\n+public class BandcampChannelLinkHandlerFactoryTest {\n+    private static BandcampChannelLinkHandlerFactory linkHandler;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        linkHandler = new BandcampChannelLinkHandlerFactory();\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+    }\n+\n+    @Test\n+    public void testAcceptUrl() throws ParsingException {\n+        // Tests expecting true\n+        assertTrue(linkHandler.acceptUrl(\"http://interovgm.com/releases/\"));\n+        assertTrue(linkHandler.acceptUrl(\"https://interovgm.com/releases\"));\n+        assertTrue(linkHandler.acceptUrl(\"http://zachbenson.bandcamp.com\"));\n+        assertTrue(linkHandler.acceptUrl(\"https://zachbenson.bandcamp.com/\"));\n+\n+        // Tests expecting false", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzOTQ4Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435239483", "bodyText": "remove this useless comment", "author": "B0pol", "createdAt": "2020-06-04T13:09:25Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.BandcampChannelLinkHandlerFactory;\n+\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test for {@link BandcampChannelLinkHandlerFactory}\n+ */\n+public class BandcampChannelLinkHandlerFactoryTest {\n+    private static BandcampChannelLinkHandlerFactory linkHandler;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        linkHandler = new BandcampChannelLinkHandlerFactory();\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+    }\n+\n+    @Test\n+    public void testAcceptUrl() throws ParsingException {\n+        // Tests expecting true", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MTY1Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435241657", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return \"Unknown license (internal ID \" + license + \")\";\n          \n          \n            \n                            return \"Unknown\";", "author": "B0pol", "createdAt": "2020-06-04T13:12:45Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampStreamExtractor.java", "diffHunk": "@@ -0,0 +1,335 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParserException;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.*;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper.getImageUrl;\n+\n+public class BandcampStreamExtractor extends StreamExtractor {\n+\n+    private JsonObject albumJson;\n+    private JsonObject current;\n+    private Document document;\n+\n+    public BandcampStreamExtractor(StreamingService service, LinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        String html = downloader.get(getLinkHandler().getUrl()).responseBody();\n+        document = Jsoup.parse(html);\n+        albumJson = getAlbumInfoJson(html);\n+        current = albumJson.getObject(\"current\");\n+\n+        if (albumJson.getArray(\"trackinfo\").size() > 1) {\n+            // In this case, we are actually viewing an album page!\n+            throw new ExtractionException(\"Page is actually an album, not a track\");\n+        }\n+    }\n+\n+    /**\n+     * Get the JSON that contains album's metadata from page\n+     *\n+     * @param html Website\n+     * @return Album metadata JSON\n+     * @throws ParsingException In case of a faulty website\n+     */\n+    public static JsonObject getAlbumInfoJson(String html) throws ParsingException {\n+        try {\n+            return BandcampExtractorHelper.getJSONFromJavaScriptVariables(html, \"TralbumData\");\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Faulty JSON; page likely does not contain album data\", e);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new ParsingException(\"JSON does not exist\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return current.getString(\"title\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        String[] parts = getUrl().split(\"/\");\n+        // https: (/) (/) * .bandcamp.com (/) and leave out the rest\n+        return \"https://\" + parts[2] + \"/\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return albumJson.getString(\"url\").replace(\"http://\", \"https://\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderName() {\n+        return albumJson.getString(\"artist\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {\n+        return current.getString(\"publish_date\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() throws ParsingException {\n+        try {\n+            Date date = new SimpleDateFormat(\"dd MMM yyyy HH:mm:ss zzz\", Locale.ENGLISH).parse(getTextualUploadDate());\n+            Calendar calendar = Calendar.getInstance();\n+            calendar.setTime(date);\n+            return new DateWrapper(calendar, false);\n+        } catch (ParseException e) {\n+            throw new ParsingException(\"Could not extract date\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        if (albumJson.isNull(\"art_id\")) return \"\";\n+        else return getImageUrl(albumJson.getLong(\"art_id\"), true);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        try {\n+            return document.getElementsByClass(\"band-photo\").first().attr(\"src\");\n+        } catch (NullPointerException e) {\n+            return \"\";\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelName() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelAvatarUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Description getDescription() {\n+        String s = BandcampExtractorHelper.smartConcatenate(\n+                new String[]{\n+                        current.getString(\"about\"),\n+                        current.getString(\"lyrics\"),\n+                        current.getString(\"credits\")\n+                }, \"\\n\\n\"\n+        );\n+        return new Description(s, Description.PLAIN_TEXT);\n+    }\n+\n+    @Override\n+    public int getAgeLimit() {\n+        return NO_AGE_LIMIT;\n+    }\n+\n+    @Override\n+    public long getLength() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getTimeStamp() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getViewCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getLikeCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getDislikeCount() {\n+        return -1;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getDashMpdUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getHlsUrl() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<AudioStream> getAudioStreams() {\n+        List<AudioStream> audioStreams = new ArrayList<>();\n+\n+        audioStreams.add(new AudioStream(\n+                albumJson.getArray(\"trackinfo\").getObject(0)\n+                        .getObject(\"file\").getString(\"mp3-128\"),\n+                MediaFormat.MP3, 128\n+        ));\n+        return audioStreams;\n+    }\n+\n+    @Override\n+    public List<VideoStream> getVideoStreams() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<VideoStream> getVideoOnlyStreams() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<SubtitlesStream> getSubtitlesDefault() {\n+        return new ArrayList<>();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<SubtitlesStream> getSubtitles(MediaFormat format) {\n+        return new ArrayList<>();\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() {\n+        return StreamType.AUDIO_STREAM;\n+    }\n+\n+    @Override\n+    public StreamInfoItem getNextStream() {\n+        return null;\n+    }\n+\n+    @Override\n+    public StreamInfoItemsCollector getRelatedStreams() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getErrorMessage() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getHost() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getPrivacy() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getCategory() {\n+        // Get first tag from html, which is the artist's Genre\n+        return document.getElementsByAttributeValue(\"itemprop\", \"keywords\").first().text();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getLicence() {\n+\n+        int license = current.getInt(\"license_type\");\n+\n+        // Tests resulted in this mapping of ints to licence: https://cloud.disroot.org/s/ZTWBxbQ9fKRmRWJ/preview\n+\n+        switch (license) {\n+            case 1:\n+                return \"All rights reserved \u00a9\";\n+            case 2:\n+                return \"CC BY-NC-ND 3.0\";\n+            case 3:\n+                return \"CC BY-NC-SA 3.0\";\n+            case 4:\n+                return \"CC BY-NC 3.0\";\n+            case 5:\n+                return \"CC BY-ND 3.0\";\n+            case 8:\n+                return \"CC BY-SA 3.0\";\n+            case 6:\n+                return \"CC BY 3.0\";\n+            default:\n+                return \"Unknown license (internal ID \" + license + \")\";", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NDM4NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435244385", "bodyText": "where did you find this screenshot (I don't mean with the numbers at the left, but the original one).\nYou don't know about 7? it's weird they have jumped it", "author": "B0pol", "createdAt": "2020-06-04T13:16:46Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampStreamExtractor.java", "diffHunk": "@@ -0,0 +1,335 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParserException;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.*;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper.getImageUrl;\n+\n+public class BandcampStreamExtractor extends StreamExtractor {\n+\n+    private JsonObject albumJson;\n+    private JsonObject current;\n+    private Document document;\n+\n+    public BandcampStreamExtractor(StreamingService service, LinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        String html = downloader.get(getLinkHandler().getUrl()).responseBody();\n+        document = Jsoup.parse(html);\n+        albumJson = getAlbumInfoJson(html);\n+        current = albumJson.getObject(\"current\");\n+\n+        if (albumJson.getArray(\"trackinfo\").size() > 1) {\n+            // In this case, we are actually viewing an album page!\n+            throw new ExtractionException(\"Page is actually an album, not a track\");\n+        }\n+    }\n+\n+    /**\n+     * Get the JSON that contains album's metadata from page\n+     *\n+     * @param html Website\n+     * @return Album metadata JSON\n+     * @throws ParsingException In case of a faulty website\n+     */\n+    public static JsonObject getAlbumInfoJson(String html) throws ParsingException {\n+        try {\n+            return BandcampExtractorHelper.getJSONFromJavaScriptVariables(html, \"TralbumData\");\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Faulty JSON; page likely does not contain album data\", e);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new ParsingException(\"JSON does not exist\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return current.getString(\"title\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        String[] parts = getUrl().split(\"/\");\n+        // https: (/) (/) * .bandcamp.com (/) and leave out the rest\n+        return \"https://\" + parts[2] + \"/\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return albumJson.getString(\"url\").replace(\"http://\", \"https://\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderName() {\n+        return albumJson.getString(\"artist\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {\n+        return current.getString(\"publish_date\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() throws ParsingException {\n+        try {\n+            Date date = new SimpleDateFormat(\"dd MMM yyyy HH:mm:ss zzz\", Locale.ENGLISH).parse(getTextualUploadDate());\n+            Calendar calendar = Calendar.getInstance();\n+            calendar.setTime(date);\n+            return new DateWrapper(calendar, false);\n+        } catch (ParseException e) {\n+            throw new ParsingException(\"Could not extract date\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        if (albumJson.isNull(\"art_id\")) return \"\";\n+        else return getImageUrl(albumJson.getLong(\"art_id\"), true);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        try {\n+            return document.getElementsByClass(\"band-photo\").first().attr(\"src\");\n+        } catch (NullPointerException e) {\n+            return \"\";\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelName() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelAvatarUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Description getDescription() {\n+        String s = BandcampExtractorHelper.smartConcatenate(\n+                new String[]{\n+                        current.getString(\"about\"),\n+                        current.getString(\"lyrics\"),\n+                        current.getString(\"credits\")\n+                }, \"\\n\\n\"\n+        );\n+        return new Description(s, Description.PLAIN_TEXT);\n+    }\n+\n+    @Override\n+    public int getAgeLimit() {\n+        return NO_AGE_LIMIT;\n+    }\n+\n+    @Override\n+    public long getLength() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getTimeStamp() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getViewCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getLikeCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getDislikeCount() {\n+        return -1;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getDashMpdUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getHlsUrl() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<AudioStream> getAudioStreams() {\n+        List<AudioStream> audioStreams = new ArrayList<>();\n+\n+        audioStreams.add(new AudioStream(\n+                albumJson.getArray(\"trackinfo\").getObject(0)\n+                        .getObject(\"file\").getString(\"mp3-128\"),\n+                MediaFormat.MP3, 128\n+        ));\n+        return audioStreams;\n+    }\n+\n+    @Override\n+    public List<VideoStream> getVideoStreams() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<VideoStream> getVideoOnlyStreams() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<SubtitlesStream> getSubtitlesDefault() {\n+        return new ArrayList<>();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<SubtitlesStream> getSubtitles(MediaFormat format) {\n+        return new ArrayList<>();\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() {\n+        return StreamType.AUDIO_STREAM;\n+    }\n+\n+    @Override\n+    public StreamInfoItem getNextStream() {\n+        return null;\n+    }\n+\n+    @Override\n+    public StreamInfoItemsCollector getRelatedStreams() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getErrorMessage() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getHost() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getPrivacy() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getCategory() {\n+        // Get first tag from html, which is the artist's Genre\n+        return document.getElementsByAttributeValue(\"itemprop\", \"keywords\").first().text();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getLicence() {\n+\n+        int license = current.getInt(\"license_type\");\n+\n+        // Tests resulted in this mapping of ints to licence: https://cloud.disroot.org/s/ZTWBxbQ9fKRmRWJ/preview", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5MDc5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435390796", "bodyText": "It's a screenshot you can take with a bandcamp artist account when opening the preferences of a track. These are the only options you can select, I don't know a way to get 7.", "author": "fynngodau", "createdAt": "2020-06-04T16:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NDM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NDY0Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435244647", "bodyText": "use lexographical order please", "author": "B0pol", "createdAt": "2020-06-04T13:17:06Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampStreamExtractor.java", "diffHunk": "@@ -0,0 +1,335 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParserException;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.*;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper.getImageUrl;\n+\n+public class BandcampStreamExtractor extends StreamExtractor {\n+\n+    private JsonObject albumJson;\n+    private JsonObject current;\n+    private Document document;\n+\n+    public BandcampStreamExtractor(StreamingService service, LinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        String html = downloader.get(getLinkHandler().getUrl()).responseBody();\n+        document = Jsoup.parse(html);\n+        albumJson = getAlbumInfoJson(html);\n+        current = albumJson.getObject(\"current\");\n+\n+        if (albumJson.getArray(\"trackinfo\").size() > 1) {\n+            // In this case, we are actually viewing an album page!\n+            throw new ExtractionException(\"Page is actually an album, not a track\");\n+        }\n+    }\n+\n+    /**\n+     * Get the JSON that contains album's metadata from page\n+     *\n+     * @param html Website\n+     * @return Album metadata JSON\n+     * @throws ParsingException In case of a faulty website\n+     */\n+    public static JsonObject getAlbumInfoJson(String html) throws ParsingException {\n+        try {\n+            return BandcampExtractorHelper.getJSONFromJavaScriptVariables(html, \"TralbumData\");\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Faulty JSON; page likely does not contain album data\", e);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new ParsingException(\"JSON does not exist\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return current.getString(\"title\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        String[] parts = getUrl().split(\"/\");\n+        // https: (/) (/) * .bandcamp.com (/) and leave out the rest\n+        return \"https://\" + parts[2] + \"/\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return albumJson.getString(\"url\").replace(\"http://\", \"https://\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderName() {\n+        return albumJson.getString(\"artist\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {\n+        return current.getString(\"publish_date\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() throws ParsingException {\n+        try {\n+            Date date = new SimpleDateFormat(\"dd MMM yyyy HH:mm:ss zzz\", Locale.ENGLISH).parse(getTextualUploadDate());\n+            Calendar calendar = Calendar.getInstance();\n+            calendar.setTime(date);\n+            return new DateWrapper(calendar, false);\n+        } catch (ParseException e) {\n+            throw new ParsingException(\"Could not extract date\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        if (albumJson.isNull(\"art_id\")) return \"\";\n+        else return getImageUrl(albumJson.getLong(\"art_id\"), true);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        try {\n+            return document.getElementsByClass(\"band-photo\").first().attr(\"src\");\n+        } catch (NullPointerException e) {\n+            return \"\";\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelName() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelAvatarUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Description getDescription() {\n+        String s = BandcampExtractorHelper.smartConcatenate(\n+                new String[]{\n+                        current.getString(\"about\"),\n+                        current.getString(\"lyrics\"),\n+                        current.getString(\"credits\")\n+                }, \"\\n\\n\"\n+        );\n+        return new Description(s, Description.PLAIN_TEXT);\n+    }\n+\n+    @Override\n+    public int getAgeLimit() {\n+        return NO_AGE_LIMIT;\n+    }\n+\n+    @Override\n+    public long getLength() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getTimeStamp() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getViewCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getLikeCount() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getDislikeCount() {\n+        return -1;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getDashMpdUrl() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getHlsUrl() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<AudioStream> getAudioStreams() {\n+        List<AudioStream> audioStreams = new ArrayList<>();\n+\n+        audioStreams.add(new AudioStream(\n+                albumJson.getArray(\"trackinfo\").getObject(0)\n+                        .getObject(\"file\").getString(\"mp3-128\"),\n+                MediaFormat.MP3, 128\n+        ));\n+        return audioStreams;\n+    }\n+\n+    @Override\n+    public List<VideoStream> getVideoStreams() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<VideoStream> getVideoOnlyStreams() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<SubtitlesStream> getSubtitlesDefault() {\n+        return new ArrayList<>();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public List<SubtitlesStream> getSubtitles(MediaFormat format) {\n+        return new ArrayList<>();\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() {\n+        return StreamType.AUDIO_STREAM;\n+    }\n+\n+    @Override\n+    public StreamInfoItem getNextStream() {\n+        return null;\n+    }\n+\n+    @Override\n+    public StreamInfoItemsCollector getRelatedStreams() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getErrorMessage() {\n+        return null;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getHost() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getPrivacy() {\n+        return \"\";\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getCategory() {\n+        // Get first tag from html, which is the artist's Genre\n+        return document.getElementsByAttributeValue(\"itemprop\", \"keywords\").first().text();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getLicence() {\n+\n+        int license = current.getInt(\"license_type\");\n+\n+        // Tests resulted in this mapping of ints to licence: https://cloud.disroot.org/s/ZTWBxbQ9fKRmRWJ/preview\n+\n+        switch (license) {\n+            case 1:\n+                return \"All rights reserved \u00a9\";\n+            case 2:\n+                return \"CC BY-NC-ND 3.0\";\n+            case 3:\n+                return \"CC BY-NC-SA 3.0\";\n+            case 4:\n+                return \"CC BY-NC 3.0\";\n+            case 5:\n+                return \"CC BY-ND 3.0\";\n+            case 8:", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NjUxMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435246513", "bodyText": "why? isn't it because #279 is not yet implemented?", "author": "B0pol", "createdAt": "2020-06-04T13:19:50Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampSearchExtractor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.linkhandler.SearchQueryHandler;\n+import org.schabi.newpipe.extractor.search.InfoItemsSearchCollector;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.streaminfoitem.BandcampPlaylistStreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.streaminfoitem.BandcampSearchStreamInfoItemExtractor;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class BandcampSearchExtractor extends SearchExtractor {\n+\n+    public BandcampSearchExtractor(StreamingService service, SearchQueryHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public String getSearchSuggestion() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isCorrectedSearch() {\n+        return false;\n+    }\n+\n+    @Override\n+    public InfoItemsPage<InfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+        // okay apparently this is where we DOWNLOAD the page and then COMMIT its ENTRIES to an INFOITEMPAGE\n+        String html = getDownloader().get(pageUrl).responseBody();\n+\n+        InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n+\n+\n+        Document d = Jsoup.parse(html);\n+\n+        Elements searchResultsElements = d.getElementsByClass(\"searchresult\");\n+\n+        for (Element searchResult :\n+                searchResultsElements) {\n+\n+            String type = searchResult.getElementsByClass(\"result-info\").first()\n+                    .getElementsByClass(\"itemtype\").first().text();\n+\n+            switch (type) {\n+                default:\n+                    continue;\n+                case \"FAN\":\n+                    // don't display fan results", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5MjUxMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435392510", "bodyText": "I wrote above:\n\nFan pages\nAre extra work because they look different and don't really provide a lot of value I think\n\nA fan page is a collection of items that a user (fan) has bought. It doesn't really make sense to implement them to me, and it might mislead users to think that a fan is the creator of the items in their account.", "author": "fynngodau", "createdAt": "2020-06-04T16:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NjUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NzI0NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435247244", "bodyText": "implement it", "author": "B0pol", "createdAt": "2020-06-04T13:20:51Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampRadioInfoItemExtractor.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper.getImageUrl;\n+\n+public class BandcampRadioInfoItemExtractor implements StreamInfoItemExtractor {\n+\n+    private JsonObject show;\n+\n+    public BandcampRadioInfoItemExtractor(JsonObject radioShow) {\n+        show = radioShow;\n+    }\n+\n+    @Override\n+    public long getDuration() {\n+        /* Duration is only present in the more detailed information that has to be queried separately.\n+         * Because the servers would probably not like over 300 queries every time someone opens the kiosk,\n+         * we're just providing 0 here.\n+         */\n+        //return query(show.getInt(\"id\")).getLong(\"audio_duration\");\n+        return 0;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {\n+        return show.getString(\"date\").replace(\" 00:00:00 GMT\", \"\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DateWrapper getUploadDate() {\n+        return null;", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NzM4MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435247380", "bodyText": "where is getUploadDate() ?", "author": "B0pol", "createdAt": "2020-06-04T13:21:05Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampRadioStreamExtractor.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.jsoup.Jsoup;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper.getImageUrl;\n+\n+public class BandcampRadioStreamExtractor extends BandcampStreamExtractor {\n+\n+    private JsonObject showInfo;\n+    private LinkHandler linkHandler;\n+\n+    public BandcampRadioStreamExtractor(StreamingService service, LinkHandler linkHandler) {\n+        super(service, linkHandler);\n+        this.linkHandler = linkHandler;\n+    }\n+\n+    static JsonObject query(int id) throws ParsingException {\n+        try {\n+            return JsonParser.object().from(\n+                    NewPipe.getDownloader().get(\"https://bandcamp.com/api/bcweekly/1/get?id=\" + id).responseBody()\n+            );\n+        } catch (IOException | ReCaptchaException | JsonParserException e) {\n+            throw new ParsingException(\"could not get show data\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        showInfo = query(Integer.parseInt(getId()));\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return showInfo.getString(\"subtitle\"); // \"audio_title\" is a boring title\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderUrl() {\n+        return Jsoup.parse(showInfo.getString(\"image_caption\"))\n+                .getElementsByTag(\"a\").first().attr(\"href\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return linkHandler.getUrl();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUploaderName() {\n+        return Jsoup.parse(showInfo.getString(\"image_caption\"))\n+                .getElementsByTag(\"a\").first().text();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getTextualUploadDate() {", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5MzY1OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435393658", "bodyText": "BandcampStreamExtractor is the superclass of BancampRadioStreamExtractor. It implements getUploadDate(), which uses the getTextualUploadDate() method to get the text date and parses it. The code would be the same for BandcampStreamExtractor as well as BancampRadioStreamExtractor, so I did not duplicate it.", "author": "fynngodau", "createdAt": "2020-06-04T16:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NzM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MjEzNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435252136", "bodyText": "remove this line", "author": "B0pol", "createdAt": "2020-06-04T13:27:37Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampExtractorHelper.java", "diffHunk": "@@ -0,0 +1,144 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import com.grack.nanojson.JsonWriter;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+public class BandcampExtractorHelper {\n+\n+    /**\n+     * <p>Get JSON behind <code>var $variable = </code> out of web page</p>\n+     *\n+     * <p>Originally a part of bandcampDirect.</p>\n+     *\n+     * @param html     The HTML where the JSON we're looking for is stored inside a\n+     *                 variable inside some JavaScript block\n+     * @param variable Name of the variable\n+     * @return The JsonObject stored in the variable with this name\n+     */\n+    public static JsonObject getJSONFromJavaScriptVariables(String html, String variable) throws JsonParserException, ArrayIndexOutOfBoundsException, ParsingException {\n+\n+        String[] part = html.split(\"var \" + variable + \" = \");\n+\n+        String firstHalfGone = part[1];\n+\n+        firstHalfGone = firstHalfGone.replaceAll(\"\\\" \\\\+ \\\"\", \"\");\n+\n+        int position = -1;\n+        int level = 0;\n+        for (char character : firstHalfGone.toCharArray()) {\n+            position++;\n+\n+            switch (character) {\n+                case '{':\n+                    level++;\n+                    continue;\n+                case '}':\n+                    level--;\n+                    if (level == 0) {\n+                        return JsonParser.object().from(firstHalfGone.substring(0, position + 1)\n+                                .replaceAll(\" {4}//.+\", \"\") // Remove \"for the curious\" in JSON\n+                                .replaceAll(\"// xxx: note - don't internationalize this variable\", \"\") // Remove this comment\n+                        );\n+                    }\n+            }\n+        }\n+\n+        throw new ParsingException(\"Unexpected HTML: JSON never ends\");\n+    }\n+\n+    /**\n+     * Translate all these parameters together to the URL of the corresponding album or track\n+     * using the mobile api\n+     */\n+    public static String getStreamUrlFromIds(long bandId, long itemId, String itemType) throws ParsingException {\n+\n+        try {\n+            String jsonString = NewPipe.getDownloader().get(\n+                    \"https://bandcamp.com/api/mobile/22/tralbum_details?band_id=\" + bandId\n+                            + \"&tralbum_id=\" + itemId + \"&tralbum_type=\" + itemType.substring(0, 1))\n+                    .responseBody();\n+\n+            return JsonParser.object().from(jsonString).getString(\"bandcamp_url\").replace(\"http://\", \"https://\");\n+\n+        } catch (JsonParserException | ReCaptchaException | IOException e) {\n+            throw new ParsingException(\"Ids could not be translated to URL\", e);\n+        }\n+\n+    }\n+\n+    /**\n+     * Concatenate all non-null and non-empty strings together while separating them using\n+     * the comma parameter\n+     */\n+    public static String smartConcatenate(String[] strings, String comma) {\n+        StringBuilder result = new StringBuilder();\n+\n+        // Remove empty strings\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(strings));\n+        for (int i = list.size() - 1; i >= 0; i--) {\n+            if (list.get(i) == null || list.get(i).isEmpty() || list.get(i).equals(\"null\")) {\n+                list.remove(i);\n+            }\n+        }\n+\n+        // Append remaining strings to result\n+        for (int i = 0; i < list.size(); i++) {\n+            String string = list.get(i);\n+            result.append(string);\n+\n+            if (i != list.size() - 1) {\n+                // This is not the last iteration yet\n+                result.append(comma);\n+            }\n+\n+        }\n+\n+        return String.valueOf(result);\n+    }\n+\n+    /**\n+     * Fetch artist details from mobile endpoint.\n+     * <a href=https://notabug.org/fynngodau/bandcampDirect/wiki/rewindBandcamp+%E2%80%93+Fetching+artist+details>\n+     * I once took a moment to note down how it works.</a>", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyNTgyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435425829", "bodyText": "Which line? It's supposed to be a link, it needs to contain some text\u2026", "author": "fynngodau", "createdAt": "2020-06-04T17:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3MjE1Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r529272153", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * I once took a moment to note down how it works.</a>\n          \n          \n            \n                 * More technical info.</a>", "author": "TobiGr", "createdAt": "2020-11-24T08:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MjEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1NjU4OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435256589", "bodyText": "getSupportedCountries() is not overriden. For featured tracks, is there no personnalization based on countries?", "author": "B0pol", "createdAt": "2020-06-04T13:33:52Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.comments.CommentsExtractor;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.kiosk.KioskExtractor;\n+import org.schabi.newpipe.extractor.kiosk.KioskList;\n+import org.schabi.newpipe.extractor.linkhandler.*;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.*;\n+import org.schabi.newpipe.extractor.services.bandcamp.linkHandler.*;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n+import org.schabi.newpipe.extractor.suggestion.SuggestionExtractor;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.AUDIO;\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampFeaturedExtractor.FEATURED_API_URL;\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampFeaturedExtractor.KIOSK_FEATURED;\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioExtractor.KIOSK_RADIO;\n+import static org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioExtractor.RADIO_API_URL;\n+\n+public class BandcampService extends StreamingService {", "originalCommit": "34b6928124bd0860061deea2e38cbd24dd40085c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NTM0NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r435395345", "bodyText": "Not that I knew about it, no. Featured tracks are also manually selected by Bandcamp staff and not automatically generated as far as I know.", "author": "fynngodau", "createdAt": "2020-06-04T16:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1NjU4OQ=="}], "type": "inlineReview"}, {"oid": "ea49202f64e11198a959a51c396b4bbd68370acb", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ea49202f64e11198a959a51c396b4bbd68370acb", "message": "Don't display internal license id\n\nCo-authored-by: bopol <bopol@e.email>", "committedDate": "2020-06-04T16:26:58Z", "type": "commit"}, {"oid": "27e7aad159c9081b6af2b84430a6f50bc01ab987", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/27e7aad159c9081b6af2b84430a6f50bc01ab987", "message": "Bandcamp: Improve code style", "committedDate": "2020-06-04T17:04:25Z", "type": "commit"}, {"oid": "e6ecd919297ef9f75a67834c5b9a519113c0c7bb", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e6ecd919297ef9f75a67834c5b9a519113c0c7bb", "message": "Bandcamp: Test full date", "committedDate": "2020-06-04T17:12:10Z", "type": "commit"}, {"oid": "0950a955775aca216099f0bc9cba6d38b27fac5a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0950a955775aca216099f0bc9cba6d38b27fac5a", "message": "Fix for testing wrong object for null or empty", "committedDate": "2020-06-04T17:16:08Z", "type": "commit"}, {"oid": "8fa81537c0befa7664a69114b80b989716578fd3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8fa81537c0befa7664a69114b80b989716578fd3", "message": "Better bandcamp stream extractor description test", "committedDate": "2020-06-04T17:17:51Z", "type": "commit"}, {"oid": "52103ac61fb84a6fe7bfade499baebd3e360303a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/52103ac61fb84a6fe7bfade499baebd3e360303a", "message": "Remove \"useless\" comments", "committedDate": "2020-06-04T17:27:13Z", "type": "commit"}, {"oid": "4dd9540782a3c3bb831a87a12aa3d7cb25e16e0e", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4dd9540782a3c3bb831a87a12aa3d7cb25e16e0e", "message": "Bandcamp license switch order", "committedDate": "2020-06-04T17:27:39Z", "type": "commit"}, {"oid": "e13f341a458f7bc8b6a7d54026a415f8758eff07", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e13f341a458f7bc8b6a7d54026a415f8758eff07", "message": "Bandcamp stream extractor: test service id", "committedDate": "2020-06-04T17:29:37Z", "type": "commit"}, {"oid": "9a555d97e5fcd4c0a74a77014ab53f7a82ef6b3a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9a555d97e5fcd4c0a74a77014ab53f7a82ef6b3a", "message": "Remove useless bandcamp tests", "committedDate": "2020-06-04T17:31:01Z", "type": "commit"}, {"oid": "39b55b5b42d39dabf0f2cedc463e002bbc254ca8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/39b55b5b42d39dabf0f2cedc463e002bbc254ca8", "message": "Bandcamp radio stream extractor: test uploader url", "committedDate": "2020-06-04T17:32:19Z", "type": "commit"}, {"oid": "96de834b676e26d0813ff4816f88fbbce78e5f49", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/96de834b676e26d0813ff4816f88fbbce78e5f49", "message": "Bandcamp: parse date from radio info item", "committedDate": "2020-06-04T17:36:58Z", "type": "commit"}, {"oid": "c12ef3a02d4d607e93dfe82737ddd7890380c422", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c12ef3a02d4d607e93dfe82737ddd7890380c422", "message": "Merge TNP/dev into fynngodau/dev", "committedDate": "2020-08-02T14:43:04Z", "type": "commit"}, {"oid": "932d094d6ab85ab4c439e1df07c53a312fe35c2e", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/932d094d6ab85ab4c439e1df07c53a312fe35c2e", "message": "Upgrade featured playlist urls to https", "committedDate": "2020-08-02T14:55:18Z", "type": "commit"}, {"oid": "cfe88a74c1a9eb692ba4f5c1281a47dd04755f5b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cfe88a74c1a9eb692ba4f5c1281a47dd04755f5b", "message": "Throw ContentNotSupportedException when opening radio uploader channel", "committedDate": "2020-08-09T08:07:49Z", "type": "commit"}, {"oid": "81b5e7cf3d22015d58ef4817ec687048473dcebe", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/81b5e7cf3d22015d58ef4817ec687048473dcebe", "message": "Fix extractor", "committedDate": "2020-10-08T15:56:03Z", "type": "commit"}, {"oid": "6bc7e3420ea0b75be8c15d4a77da4cf9406958fe", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6bc7e3420ea0b75be8c15d4a77da4cf9406958fe", "message": "Merge TNP/dev into fynngodau/dev", "committedDate": "2020-11-19T20:32:08Z", "type": "commit"}, {"oid": "186936d04151d5d8030a46acbc0376560149f387", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/186936d04151d5d8030a46acbc0376560149f387", "message": "Various changes regarding tests", "committedDate": "2020-11-19T21:33:52Z", "type": "commit"}, {"oid": "8c369b0f79d3ea01bf97a7d8f71f49d9c31b056d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8c369b0f79d3ea01bf97a7d8f71f49d9c31b056d", "message": "Rephrase link in javadoc\n\nCo-authored-by: Tobias Groza <TobiGr@users.noreply.github.com>", "committedDate": "2020-11-24T13:01:31Z", "type": "commit"}, {"oid": "99e7ef013efa6b1da489262cba6f7d7e141e2d4e", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/99e7ef013efa6b1da489262cba6f7d7e141e2d4e", "message": "[Bandcamp] Apply small changes to code formatting and style\n\nMake variables final when possible\nRemove unused imports\nImprove code formatting", "committedDate": "2020-11-24T13:13:31Z", "type": "commit"}, {"oid": "c91e21b37c9e17e0fc7f01d0aab45074a677df86", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c91e21b37c9e17e0fc7f01d0aab45074a677df86", "message": "[Bandcamp] Tests - Add finals and improve code formatting", "committedDate": "2020-11-24T13:13:31Z", "type": "commit"}, {"oid": "be562b84365a9b74ce0708cae53972aade36bfaf", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/be562b84365a9b74ce0708cae53972aade36bfaf", "message": "Change tests", "committedDate": "2020-11-27T15:48:40Z", "type": "commit"}, {"oid": "04dd3d4d3266d3b2cf2d8afca8518209431c17aa", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/04dd3d4d3266d3b2cf2d8afca8518209431c17aa", "message": "Rework link handlers to correctly accept external websites", "committedDate": "2020-12-05T14:08:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODI2NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r542918265", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final Date date = new SimpleDateFormat(\"dd MMM yyyy HH:mm:ss zzz\", Locale.ENGLISH).parse(textDate);\n          \n          \n            \n                        final Calendar calendar = Calendar.getInstance();\n          \n          \n            \n                        calendar.setTime(date);\n          \n          \n            \n                        return new DateWrapper(calendar, false);\n          \n          \n            \n                        final OffsetDateTime offsetDateTime = OffsetDateTime.parse(textDate, DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm:ss zzz\"));\n          \n          \n            \n                        return new DateWrapper(offsetDateTime, false);", "author": "Isira-Seneviratne", "createdAt": "2020-12-14T23:21:08Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/extractors/BandcampExtractorHelper.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import com.grack.nanojson.JsonWriter;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.utils.Utils;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+\n+public class BandcampExtractorHelper {\n+\n+    /**\n+     * <p>Get an attribute of a web page as JSON\n+     *\n+     * <p>Originally a part of bandcampDirect.</p>\n+     *\n+     * @param html     The HTML where the JSON we're looking for is stored inside a\n+     *                 variable inside some JavaScript block\n+     * @param variable Name of the variable\n+     * @return The JsonObject stored in the variable with this name\n+     */\n+    public static JsonObject getJsonData(final String html, final String variable)\n+            throws JsonParserException, ArrayIndexOutOfBoundsException {\n+        final Document document = Jsoup.parse(html);\n+        final String json = document.getElementsByAttribute(variable).attr(variable);\n+        return JsonParser.object().from(json);\n+    }\n+\n+    /**\n+     * Translate all these parameters together to the URL of the corresponding album or track\n+     * using the mobile api\n+     */\n+    public static String getStreamUrlFromIds(final long bandId, final long itemId, final String itemType)\n+            throws ParsingException {\n+\n+        try {\n+            final String jsonString = NewPipe.getDownloader().get(\n+                    \"https://bandcamp.com/api/mobile/22/tralbum_details?band_id=\" + bandId\n+                            + \"&tralbum_id=\" + itemId + \"&tralbum_type=\" + itemType.substring(0, 1))\n+                    .responseBody();\n+\n+            return JsonParser.object().from(jsonString).getString(\"bandcamp_url\").replace(\"http://\", \"https://\");\n+\n+        } catch (final JsonParserException | ReCaptchaException | IOException e) {\n+            throw new ParsingException(\"Ids could not be translated to URL\", e);\n+        }\n+\n+    }\n+\n+    /**\n+     * Concatenate all non-null and non-empty strings together while separating them using\n+     * the comma parameter\n+     */\n+    public static String smartConcatenate(final String[] strings, final String comma) {\n+        final StringBuilder result = new StringBuilder();\n+\n+        // Remove empty strings\n+        final ArrayList<String> list = new ArrayList<>(Arrays.asList(strings));\n+        for (int i = list.size() - 1; i >= 0; i--) {\n+            if (Utils.isNullOrEmpty(list.get(i)) || list.get(i).equals(\"null\")) {\n+                list.remove(i);\n+            }\n+        }\n+\n+        // Append remaining strings to result\n+        for (int i = 0; i < list.size(); i++) {\n+            result.append(list.get(i));\n+\n+            if (i != list.size() - 1) {\n+                // This is not the last iteration yet\n+                result.append(comma);\n+            }\n+\n+        }\n+\n+        return String.valueOf(result);\n+    }\n+\n+    /**\n+     * Fetch artist details from mobile endpoint.\n+     * <a href=https://notabug.org/fynngodau/bandcampDirect/wiki/rewindBandcamp+%E2%80%93+Fetching+artist+details>\n+     * More technical info.</a>\n+     */\n+    public static JsonObject getArtistDetails(String id) throws ParsingException {\n+        try {\n+            return\n+                    JsonParser.object().from(\n+                            NewPipe.getDownloader().post(\n+                                    \"https://bandcamp.com/api/mobile/22/band_details\",\n+                                    null,\n+                                    JsonWriter.string()\n+                                            .object()\n+                                            .value(\"band_id\", id)\n+                                            .end()\n+                                            .done()\n+                                            .getBytes()\n+                            ).responseBody()\n+                    );\n+        } catch (final IOException | ReCaptchaException | JsonParserException e) {\n+            throw new ParsingException(\"Could not download band details\", e);\n+        }\n+    }\n+\n+    /**\n+     * @param id    The image ID\n+     * @param album Whether this is the cover of an album\n+     * @return Url of image with this ID in size 10 which is 1200x1200 (we could also choose size 0\n+     * but we don't want something as large as 3460x3460 here, do we?)\n+     */\n+    public static String getImageUrl(final long id, final boolean album) {\n+        return \"https://f4.bcbits.com/img/\" + (album ? 'a' : \"\") + id + \"_10.jpg\";\n+    }\n+\n+    /**\n+     * @return <code>true</code> if the given url looks like it comes from a bandcamp custom domain\n+     * or if it comes from bandcamp.com itself\n+     */\n+    public static boolean isSupportedDomain(final String url) throws ParsingException {\n+\n+        // Accept all bandcamp.com URLs\n+        if (url.toLowerCase().matches(\"https?://.+\\\\.bandcamp\\\\.com(/.*)?\")) return true;\n+\n+        try {\n+            // Accept all other URLs if they contain a <meta> tag that says they are generated by bandcamp\n+            return Jsoup.parse(\n+                    NewPipe.getDownloader().get(url).responseBody()\n+            )\n+                    .getElementsByAttributeValue(\"name\", \"generator\")\n+                    .attr(\"content\").equals(\"Bandcamp\");\n+        } catch (IOException | ReCaptchaException e) {\n+            throw new ParsingException(\"Could not determine whether URL is custom domain \" +\n+                    \"(not available? network error?)\");\n+        }\n+    }\n+\n+    static DateWrapper parseDate(final String textDate) throws ParsingException {\n+        try {\n+            final Date date = new SimpleDateFormat(\"dd MMM yyyy HH:mm:ss zzz\", Locale.ENGLISH).parse(textDate);\n+            final Calendar calendar = Calendar.getInstance();\n+            calendar.setTime(date);\n+            return new DateWrapper(calendar, false);", "originalCommit": "04dd3d4d3266d3b2cf2d8afca8518209431c17aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyMDc2Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r543720766", "bodyText": "Good catch. But that won't accept 10 Mar 2019 23:00:42 GMT or 16 May 2017 00:00:00 GMT", "author": "TobiGr", "createdAt": "2020-12-15T22:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0MDU4Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r546140587", "bodyText": "Setting the locale the US solves the parsing issue.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final Date date = new SimpleDateFormat(\"dd MMM yyyy HH:mm:ss zzz\", Locale.ENGLISH).parse(textDate);\n          \n          \n            \n                        final Calendar calendar = Calendar.getInstance();\n          \n          \n            \n                        calendar.setTime(date);\n          \n          \n            \n                        return new DateWrapper(calendar, false);\n          \n          \n            \n                        final OffsetDateTime offsetDateTime = OffsetDateTime.parse(\n          \n          \n            \n                            textDate, DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm:ss zzz\", Locale.US));\n          \n          \n            \n                        return new DateWrapper(offsetDateTime, false);\n          \n      \n    \n    \n  \n\nBut, now I get this:\nCrash log\nText '16 May 2017 00:00:00 GMT' could not be parsed: Unable to obtain OffsetDateTime from TemporalAccessor: {InstantSeconds=1494892800},ISO,GMT resolved to 2017-05-16T00:00 of type java.time.format.Parsed\njava.time.format.DateTimeParseException: Text '16 May 2017 00:00:00 GMT' could not be parsed: Unable to obtain OffsetDateTime from TemporalAccessor: {InstantSeconds=1494892800},ISO,GMT resolved to 2017-05-16T00:00 of type java.time.format.Parsed\n\tat java.time.format.DateTimeFormatter.createError(DateTimeFormatter.java:1920)\n\tat java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1855)\n\tat java.time.OffsetDateTime.parse(OffsetDateTime.java:402)\n\tat org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper.parseDate(BandcampExtractorHelper.java:152)\n\tat org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampStreamExtractor.getUploadDate(BandcampStreamExtractor.java:106)\n\tat org.schabi.newpipe.extractor.services.bandcamp.BandcampRadioStreamExtractorTest.testUploadDate(BandcampRadioStreamExtractorTest.java:88)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\n\tat org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175)\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157)\n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.time.DateTimeException: Unable to obtain OffsetDateTime from TemporalAccessor: {InstantSeconds=1494892800},ISO,GMT resolved to 2017-05-16T00:00 of type java.time.format.Parsed\n\tat java.time.OffsetDateTime.from(OffsetDateTime.java:370)\n\tat java.time.format.Parsed.query(Parsed.java:226)\n\tat java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1851)\n\t... 55 more\nCaused by: java.time.DateTimeException: Unable to obtain ZoneOffset from TemporalAccessor: {InstantSeconds=1494892800},ISO,GMT resolved to 2017-05-16T00:00 of type java.time.format.Parsed\n\tat java.time.ZoneOffset.from(ZoneOffset.java:348)\n\tat java.time.OffsetDateTime.from(OffsetDateTime.java:359)\n\t... 57 more\n\n\nThe ZoneOffset cannot be obtained. @Isira-Seneviratne Any idea?", "author": "TobiGr", "createdAt": "2020-12-18T23:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1NzYzOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r546157639", "bodyText": "Using ZonedDateTime instead of OffsetDateTime works, and the locale doesn't need to be set to US.\nThe ZonedDateTime can be converted using toOffsetDateTime().", "author": "Isira-Seneviratne", "createdAt": "2020-12-19T00:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1ODE4NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r546158185", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final Date date = new SimpleDateFormat(\"dd MMM yyyy HH:mm:ss zzz\", Locale.ENGLISH).parse(textDate);\n          \n          \n            \n                        final Calendar calendar = Calendar.getInstance();\n          \n          \n            \n                        calendar.setTime(date);\n          \n          \n            \n                        return new DateWrapper(calendar, false);\n          \n          \n            \n                        final ZonedDateTime zonedDateTime = ZonedDateTime.parse(textDate, DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm:ss zzz\"));\n          \n          \n            \n                        return new DateWrapper(zonedDateTime.toOffsetDateTime(), false);", "author": "Isira-Seneviratne", "createdAt": "2020-12-19T00:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxNzc1Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r546217757", "bodyText": "Thanks for the help!\nAre you located in an English speaking country? When running the method without setting the locale to ENGLISH or any English-speaking country, the month cannot be parsed. I implemented your suggestions in 74b46fe", "author": "TobiGr", "createdAt": "2020-12-19T09:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4MzU1OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r547583559", "bodyText": "Yeah, I'm in Sri Lanka.", "author": "Isira-Seneviratne", "createdAt": "2020-12-23T01:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyMTMyNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r543721324", "bodyText": "date() is deprecated", "author": "TobiGr", "createdAt": "2020-12-15T22:06:28Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/bandcamp/BandcampRadioStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.schabi.newpipe.extractor.services.bandcamp;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ContentNotSupportedException;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampRadioStreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ServiceList.Bandcamp;\n+\n+public class BandcampRadioStreamExtractorTest {\n+\n+    private static StreamExtractor e;\n+\n+    private static final String SHOW_URL = \"https://bandcamp.com/?show=230\";\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException, ExtractionException {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        e = Bandcamp.getStreamExtractor(SHOW_URL);\n+        e.fetchPage();\n+    }\n+\n+    @Test\n+    public void testGettingCorrectStreamExtractor() throws ExtractionException {\n+        assertTrue(Bandcamp.getStreamExtractor(\"https://bandcamp.com/?show=3\") instanceof BandcampRadioStreamExtractor);\n+        assertFalse(Bandcamp.getStreamExtractor(\"https://zachbenson.bandcamp.com/track/deflated\")\n+                instanceof BandcampRadioStreamExtractor);\n+    }\n+\n+    @Test\n+    public void testGetName() throws ParsingException {\n+        assertEquals(\"Sound Movements\", e.getName());\n+    }\n+\n+    @Test(expected = ContentNotSupportedException.class)\n+    public void testGetUploaderUrl() throws ParsingException {\n+        e.getUploaderUrl();\n+    }\n+\n+    @Test\n+    public void testGetUrl() throws ParsingException {\n+        assertEquals(SHOW_URL, e.getUrl());\n+    }\n+\n+    @Test\n+    public void testGetUploaderName() throws ParsingException {\n+        assertEquals(\"Andrew Jervis\", e.getUploaderName());\n+    }\n+\n+    @Test\n+    public void testGetTextualUploadDate() throws ParsingException {\n+        assertEquals(\"16 May 2017 00:00:00 GMT\", e.getTextualUploadDate());\n+    }\n+\n+    @Test\n+    public void testUploadDate() throws ParsingException {\n+        final Calendar expectedCalendar = Calendar.getInstance();\n+\n+        // 16 May 2017 00:00:00 GMT\n+        expectedCalendar.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+        expectedCalendar.setTimeInMillis(0);\n+        expectedCalendar.set(2017, Calendar.MAY, 16);\n+\n+        assertEquals(expectedCalendar.getTimeInMillis(), e.getUploadDate().date().getTimeInMillis());", "originalCommit": "04dd3d4d3266d3b2cf2d8afca8518209431c17aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "df16a8646fb971242a6cbc8b2aaae3baba36b415", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/df16a8646fb971242a6cbc8b2aaae3baba36b415", "message": "[Bandcamp] Improve radio stream extractor test", "committedDate": "2020-12-18T22:15:59Z", "type": "commit"}, {"oid": "df16a8646fb971242a6cbc8b2aaae3baba36b415", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/df16a8646fb971242a6cbc8b2aaae3baba36b415", "message": "[Bandcamp] Improve radio stream extractor test", "committedDate": "2020-12-18T22:15:59Z", "type": "forcePushed"}, {"oid": "116e921d6cc25b70416337634df4a6da1b3e2817", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/116e921d6cc25b70416337634df4a6da1b3e2817", "message": "Merge remote-tracking branch 'origin/dev' into bandcamp", "committedDate": "2020-12-18T23:26:11Z", "type": "commit"}, {"oid": "74b46fed2d36da002b612fb8952cdd22f19ba8aa", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/74b46fed2d36da002b612fb8952cdd22f19ba8aa", "message": "[Bandcamp] Fix deprecation in parseDate helper function", "committedDate": "2020-12-19T09:40:21Z", "type": "commit"}, {"oid": "50903730b13e1b60e297f11047cfbd3dc13fd9c7", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/50903730b13e1b60e297f11047cfbd3dc13fd9c7", "message": "[Bandcamp] Fix accepting HTTP URLs", "committedDate": "2020-12-22T07:53:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMjY2MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r547122661", "bodyText": "This accepts links like https://daily.bandcamp.com/best-of-2020/bandcamp-daily-staffers-on-their-favorite-albums-of-2020", "author": "TobiGr", "createdAt": "2020-12-22T07:54:18Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/bandcamp/linkHandler/BandcampChannelLinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Created by Fynn Godau 2019, licensed GNU GPL version 3 or later\n+\n+package org.schabi.newpipe.extractor.services.bandcamp.linkHandler;\n+\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandlerFactory;\n+import org.schabi.newpipe.extractor.services.bandcamp.extractors.BandcampExtractorHelper;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Artist do have IDs that are useful\n+ */\n+public class BandcampChannelLinkHandlerFactory extends ListLinkHandlerFactory {\n+\n+\n+    @Override\n+    public String getId(final String url) throws ParsingException {\n+        try {\n+            final String response = NewPipe.getDownloader().get(url).responseBody();\n+\n+            // Use band data embedded in website to extract ID\n+            final JsonObject bandData = BandcampExtractorHelper.getJsonData(response, \"data-band\");\n+\n+            return String.valueOf(bandData.getLong(\"id\"));\n+\n+        } catch (final IOException | ReCaptchaException | ArrayIndexOutOfBoundsException | JsonParserException e) {\n+            throw new ParsingException(\"Download failed\", e);\n+        }\n+    }\n+\n+    /**\n+     * Uses the mobile endpoint as a \"translator\" from id to url\n+     */\n+    @Override\n+    public String getUrl(final String id, final List<String> contentFilter, final String sortFilter)\n+            throws ParsingException {\n+        try {\n+            return BandcampExtractorHelper.getArtistDetails(id)\n+                    .getString(\"bandcamp_url\")\n+                    .replace(\"http://\", \"https://\");\n+        } catch (final NullPointerException e) {\n+            throw new ParsingException(\"JSON does not contain URL (invalid id?) or is otherwise invalid\", e);\n+        }\n+\n+    }\n+\n+    /**\n+     * Accepts only pages that do not lead to an album or track. Supports external pages.\n+     */\n+    @Override\n+    public boolean onAcceptUrl(final String url) throws ParsingException {\n+\n+        // Exclude URLs that lead to a track or album\n+        if (url.matches(\".*/(album|track)/.*\")) return false;", "originalCommit": "50903730b13e1b60e297f11047cfbd3dc13fd9c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjU0Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/232#discussion_r547452542", "bodyText": "I fixed it with c9e9953.", "author": "fynngodau", "createdAt": "2020-12-22T19:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMjY2MQ=="}], "type": "inlineReview"}]}