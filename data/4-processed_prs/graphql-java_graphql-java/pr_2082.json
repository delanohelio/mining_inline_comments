{"pr_number": 2082, "pr_title": "post processing on schema directive wiring afterr schema is build", "pr_createdAt": "2020-10-25T07:05:21Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2082", "timeline": [{"oid": "77b91ca5fca313bf1a0c8b24a88527db81f7c945", "url": "https://github.com/graphql-java/graphql-java/commit/77b91ca5fca313bf1a0c8b24a88527db81f7c945", "message": "Starting PR for post processing on schema directive wiring", "committedDate": "2020-10-25T07:03:22Z", "type": "commit"}, {"oid": "b993ef636aa432efed517d8e3973cac5777f0ad6", "url": "https://github.com/graphql-java/graphql-java/commit/b993ef636aa432efed517d8e3973cac5777f0ad6", "message": "use correct changeNode method", "committedDate": "2020-10-25T08:41:02Z", "type": "commit"}, {"oid": "d27b2924fec8295f0dde6b0f02aa337c0a748218", "url": "https://github.com/graphql-java/graphql-java/commit/d27b2924fec8295f0dde6b0f02aa337c0a748218", "message": "consider GraphQLTypeReference too", "committedDate": "2020-10-25T09:24:45Z", "type": "commit"}, {"oid": "fa96def35422e867bc9fb36ca2dfd569dcb64936", "url": "https://github.com/graphql-java/graphql-java/commit/fa96def35422e867bc9fb36ca2dfd569dcb64936", "message": "consider schema description and schema directives when transforming schema", "committedDate": "2020-10-25T09:43:21Z", "type": "commit"}, {"oid": "933117e21082674dabd56f9198092a4c481ba707", "url": "https://github.com/graphql-java/graphql-java/commit/933117e21082674dabd56f9198092a4c481ba707", "message": "Merge remote-tracking branch 'origin/master' into schema-directive-wiring-is-performed-after-schema-is-built", "committedDate": "2020-10-29T09:26:33Z", "type": "commit"}, {"oid": "cc818fe6629515a5ffbce28c8e2b65dbfceedad7", "url": "https://github.com/graphql-java/graphql-java/commit/cc818fe6629515a5ffbce28c8e2b65dbfceedad7", "message": "Schema directive wiring now happens in the post processing step - not as each element is built", "committedDate": "2020-10-29T11:00:17Z", "type": "commit"}, {"oid": "be916493d00f09d810ce3f32045de580b858333b", "url": "https://github.com/graphql-java/graphql-java/commit/be916493d00f09d810ce3f32045de580b858333b", "message": "We cant shortcut this", "committedDate": "2020-10-29T11:07:17Z", "type": "commit"}, {"oid": "41a391b90d787991713c4465915674581ec2cab6", "url": "https://github.com/graphql-java/graphql-java/commit/41a391b90d787991713c4465915674581ec2cab6", "message": "Imports not used", "committedDate": "2020-10-29T21:23:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NjI4Mg==", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r514576282", "bodyText": "prevent IDEA warnings on generics", "author": "bbakerman", "createdAt": "2020-10-29T21:23:56Z", "path": "src/main/java/graphql/schema/idl/SchemaDirectiveWiringEnvironment.java", "diffHunk": "@@ -129,6 +129,6 @@\n      *\n      * @throws graphql.AssertException if there is not field in context at the time of the directive wiring callback\n      */\n-    GraphQLFieldDefinition setFieldDataFetcher(DataFetcher newDataFetcher);\n+    GraphQLFieldDefinition setFieldDataFetcher(DataFetcher<?> newDataFetcher);", "originalCommit": "be916493d00f09d810ce3f32045de580b858333b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NzA3Mg==", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r514577072", "bodyText": "the schema directive wiring code makes an assumption we have a SDL AST definition behind it - so it's SDL only", "author": "bbakerman", "createdAt": "2020-10-29T21:25:23Z", "path": "src/main/java/graphql/schema/idl/SchemaDirectiveWiringSchemaGeneratorPostProcessing.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package graphql.schema.idl;\n+\n+import graphql.Internal;\n+import graphql.language.NamedNode;\n+import graphql.schema.GraphQLCodeRegistry;\n+import graphql.schema.GraphQLEnumType;\n+import graphql.schema.GraphQLInputObjectType;\n+import graphql.schema.GraphQLInterfaceType;\n+import graphql.schema.GraphQLNamedType;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLScalarType;\n+import graphql.schema.GraphQLSchema;\n+import graphql.schema.GraphQLSchemaElement;\n+import graphql.schema.GraphQLTypeVisitorStub;\n+import graphql.schema.GraphQLUnionType;\n+import graphql.schema.SchemaTransformer;\n+import graphql.util.TraversalControl;\n+import graphql.util.TraverserContext;\n+import graphql.util.TreeTransformerUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static graphql.util.TraversalControl.CONTINUE;\n+\n+@Internal\n+class SchemaDirectiveWiringSchemaGeneratorPostProcessing implements SchemaGeneratorPostProcessing {\n+\n+    private final SchemaGeneratorDirectiveHelper generatorDirectiveHelper = new SchemaGeneratorDirectiveHelper();\n+    private final TypeDefinitionRegistry typeRegistry;\n+    private final RuntimeWiring runtimeWiring;\n+    private final GraphQLCodeRegistry.Builder codeRegistryBuilder;\n+    private final Map<String, Object> directiveBehaviourContext = new HashMap<>();\n+\n+\n+    public SchemaDirectiveWiringSchemaGeneratorPostProcessing(TypeDefinitionRegistry typeRegistry, RuntimeWiring runtimeWiring, GraphQLCodeRegistry.Builder codeRegistryBuilder) {\n+        this.typeRegistry = typeRegistry;\n+        this.runtimeWiring = runtimeWiring;\n+        this.codeRegistryBuilder = codeRegistryBuilder;\n+    }\n+\n+\n+    @Override\n+    public GraphQLSchema process(GraphQLSchema originalSchema) {\n+        GraphQLSchema newSchema = SchemaTransformer.transformSchema(originalSchema, new Visitor());\n+        return newSchema.transform(builder -> {\n+            // they could have changed the code registry so rebuild it\n+            GraphQLCodeRegistry codeRegistry = this.codeRegistryBuilder.build();\n+            builder.codeRegistry(codeRegistry);\n+        });\n+    }\n+\n+    public class Visitor extends GraphQLTypeVisitorStub {\n+\n+        private SchemaGeneratorDirectiveHelper.Parameters mkBehaviourParams() {\n+            return new SchemaGeneratorDirectiveHelper.Parameters(typeRegistry, runtimeWiring, directiveBehaviourContext, codeRegistryBuilder);\n+        }\n+\n+        private TraversalControl changOrContinue(GraphQLSchemaElement node, GraphQLSchemaElement newNode, TraverserContext<GraphQLSchemaElement> context) {\n+            if (node != newNode) {\n+                TreeTransformerUtil.changeNode(context, newNode);\n+            }\n+            return CONTINUE;\n+        }\n+\n+        private boolean isIntrospectionType(GraphQLNamedType type) {\n+            return type.getName().startsWith(\"__\");\n+        }\n+\n+        private <T extends GraphQLNamedType> boolean notSuitable(T node, Function<T, NamedNode<?>> suitableFunc) {\n+            if (isIntrospectionType(node)) {\n+                return true;\n+            }\n+            NamedNode<?> definition = suitableFunc.apply(node);", "originalCommit": "be916493d00f09d810ce3f32045de580b858333b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4MDUyMA==", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r514580520", "bodyText": "do we need to restrict it? Is it bad that we restrict it?", "author": "andimarek", "createdAt": "2020-10-29T21:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NzA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMTMzNg==", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r523201336", "bodyText": "We don't want any one tweaking introspection types I think", "author": "bbakerman", "createdAt": "2020-11-13T20:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NzA3Mg=="}], "type": "inlineReview"}, {"oid": "f95d7929cdabc30eb225124b2246d6890bfb23c1", "url": "https://github.com/graphql-java/graphql-java/commit/f95d7929cdabc30eb225124b2246d6890bfb23c1", "message": "Reordered the schema callbacks to reflect the old days behavior", "committedDate": "2020-10-29T21:27:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODgwMA==", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r514578800", "bodyText": "I changed this so that IF the node did not change, we just return the old node - slight optimisation in tree building", "author": "bbakerman", "createdAt": "2020-10-29T21:28:32Z", "path": "src/main/java/graphql/schema/idl/SchemaGeneratorDirectiveHelper.java", "diffHunk": "@@ -133,16 +134,19 @@ private GraphqlElementParentTree buildRuntimeTree(GraphQLSchemaElement... elemen\n         }).collect(toList());\n     }\n \n-    private List<GraphQLFieldDefinition> wireFields(GraphQLFieldsContainer fieldsContainer, NamedNode fieldsContainerNode, Parameters params) {\n+    private List<GraphQLFieldDefinition> wireFields(GraphQLFieldsContainer fieldsContainer, NamedNode<?> fieldsContainerNode, Parameters params) {\n         return fieldsContainer.getFieldDefinitions().stream().map(fieldDefinition -> {\n \n             // and for each argument in the fieldDefinition run the wiring for them - and note that they can change\n+            List<GraphQLArgument> startingArgs = fieldDefinition.getArguments();\n             List<GraphQLArgument> newArgs = wireArguments(fieldDefinition, fieldsContainer, fieldsContainerNode, params, fieldDefinition);\n \n-            // they may have changed the arguments to the fieldDefinition so reflect that\n-            fieldDefinition = fieldDefinition.transform(builder -> builder.clearArguments().arguments(newArgs));\n+            if (isNotTheSameObjects(startingArgs, newArgs)) {", "originalCommit": "be916493d00f09d810ce3f32045de580b858333b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5844e32592fe3708a557767041261e2dd493f881", "url": "https://github.com/graphql-java/graphql-java/commit/5844e32592fe3708a557767041261e2dd493f881", "message": "Proper clean up", "committedDate": "2020-10-29T21:31:10Z", "type": "commit"}, {"oid": "01033bd7620b083abcd240b007887857f7be6121", "url": "https://github.com/graphql-java/graphql-java/commit/01033bd7620b083abcd240b007887857f7be6121", "message": "Merged master", "committedDate": "2020-11-10T10:02:13Z", "type": "commit"}]}