{"pr_number": 1779, "pr_title": "Issue #1768 ExecutionInput: allow to set value a top level", "pr_createdAt": "2020-01-29T17:54:18Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/1779", "timeline": [{"oid": "51ab7e32892f827affa047987b74a808eb90030e", "url": "https://github.com/graphql-java/graphql-java/commit/51ab7e32892f827affa047987b74a808eb90030e", "message": "ExecutionInput: allow to set value a top level", "committedDate": "2020-01-29T17:52:19Z", "type": "commit"}, {"oid": "04982cc3966223d4cbb6d7888ab943664a0818f0", "url": "https://github.com/graphql-java/graphql-java/commit/04982cc3966223d4cbb6d7888ab943664a0818f0", "message": "ExecutionInput: fix tests", "committedDate": "2020-01-31T18:08:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NjM4MQ==", "url": "https://github.com/graphql-java/graphql-java/pull/1779#discussion_r373896381", "bodyText": "can you remove the reference to the issue number? thanks", "author": "andimarek", "createdAt": "2020-02-03T01:47:56Z", "path": "src/test/groovy/graphql/Issue1768.groovy", "diffHunk": "@@ -0,0 +1,81 @@\n+package graphql\n+\n+import graphql.schema.DataFetcher\n+import graphql.schema.GraphQLObjectType\n+import graphql.schema.GraphQLSchema\n+import graphql.schema.GraphQLSchemaElement\n+import graphql.schema.GraphQLTypeVisitorStub\n+import graphql.schema.SchemaTransformer\n+import graphql.schema.idl.NaturalEnumValuesProvider\n+import graphql.util.TraversalControl\n+import graphql.util.TraverserContext\n+import graphql.util.TreeTransformerUtil\n+import spock.lang.Specification\n+\n+import static graphql.schema.idl.RuntimeWiring.newRuntimeWiring\n+import static graphql.schema.idl.TypeRuntimeWiring.newTypeWiring\n+\n+class Issue1768 extends Specification {\n+\n+    static enum ThreadSort {\n+        NEWEST_FIRST,\n+        OLDEST_FIRST,\n+        MOST_COMMENTS_FIRST\n+    }\n+\n+    def \"#1768 check if the old behavior is not broken\" () {\n+        def spec = '''\n+            type Query {\n+                dummy: String                \n+            }\n+            '''\n+        GraphQL graphql = TestUtil.graphQL(spec, [Query: [dummy: (DataFetcher<String>) { null }]]).build()\n+\n+        when:\n+        ExecutionResult result = graphql.execute {\n+            it.query(\" { dummy } \")\n+        }\n+\n+        then:\n+        result.data.dummy == null\n+\n+    }\n+    def \"#1768 test if local context is set for top level\"() {", "originalCommit": "04982cc3966223d4cbb6d7888ab943664a0818f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NjQyMg==", "url": "https://github.com/graphql-java/graphql-java/pull/1779#discussion_r373896422", "bodyText": "same here, please remove the reference to the issue", "author": "andimarek", "createdAt": "2020-02-03T01:48:10Z", "path": "src/test/groovy/graphql/Issue1768.groovy", "diffHunk": "@@ -0,0 +1,81 @@\n+package graphql\n+\n+import graphql.schema.DataFetcher\n+import graphql.schema.GraphQLObjectType\n+import graphql.schema.GraphQLSchema\n+import graphql.schema.GraphQLSchemaElement\n+import graphql.schema.GraphQLTypeVisitorStub\n+import graphql.schema.SchemaTransformer\n+import graphql.schema.idl.NaturalEnumValuesProvider\n+import graphql.util.TraversalControl\n+import graphql.util.TraverserContext\n+import graphql.util.TreeTransformerUtil\n+import spock.lang.Specification\n+\n+import static graphql.schema.idl.RuntimeWiring.newRuntimeWiring\n+import static graphql.schema.idl.TypeRuntimeWiring.newTypeWiring\n+\n+class Issue1768 extends Specification {\n+\n+    static enum ThreadSort {\n+        NEWEST_FIRST,\n+        OLDEST_FIRST,\n+        MOST_COMMENTS_FIRST\n+    }\n+\n+    def \"#1768 check if the old behavior is not broken\" () {\n+        def spec = '''\n+            type Query {\n+                dummy: String                \n+            }\n+            '''\n+        GraphQL graphql = TestUtil.graphQL(spec, [Query: [dummy: (DataFetcher<String>) { null }]]).build()\n+\n+        when:\n+        ExecutionResult result = graphql.execute {\n+            it.query(\" { dummy } \")\n+        }\n+\n+        then:\n+        result.data.dummy == null\n+\n+    }\n+    def \"#1768 test if local context is set for top level\"() {\n+        def spec = '''\n+            type Query {\n+                dummy: String                \n+            }\n+            '''\n+        GraphQL graphql = TestUtil.graphQL(spec, [Query: [dummy: (DataFetcher<String>) { (String) it.localContext }]]).build()\n+\n+        when:\n+        ExecutionResult result = graphql.execute {\n+            it.localContext(\"test\").query(\" { dummy } \")\n+        }\n+\n+        then:\n+        result.data.dummy == \"test\"\n+    }\n+    def \"#1768 test if the top local context gets transferred to the next level\"() {", "originalCommit": "04982cc3966223d4cbb6d7888ab943664a0818f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}