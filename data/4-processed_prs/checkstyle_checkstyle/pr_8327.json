{"pr_number": 8327, "pr_title": " Issue #7103: Add support for Java 14 text block syntax", "pr_createdAt": "2020-06-19T17:27:51Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8327", "timeline": [{"oid": "6f38a732a67ede948ad87145c19234c699b76615", "url": "https://github.com/checkstyle/checkstyle/commit/6f38a732a67ede948ad87145c19234c699b76615", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-19T17:58:21Z", "type": "forcePushed"}, {"oid": "1ddcc02892b9737d02a2dcfd8ef01afecddb6f6b", "url": "https://github.com/checkstyle/checkstyle/commit/1ddcc02892b9737d02a2dcfd8ef01afecddb6f6b", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-19T19:44:15Z", "type": "forcePushed"}, {"oid": "58b3feea7c9906085e7e7de6ce24954da308c136", "url": "https://github.com/checkstyle/checkstyle/commit/58b3feea7c9906085e7e7de6ce24954da308c136", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-25T12:22:29Z", "type": "forcePushed"}, {"oid": "fe8979298d8cfd7a82c700fc08ecc8cbd4f18226", "url": "https://github.com/checkstyle/checkstyle/commit/fe8979298d8cfd7a82c700fc08ecc8cbd4f18226", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-25T13:40:06Z", "type": "forcePushed"}, {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "url": "https://github.com/checkstyle/checkstyle/commit/fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-25T21:16:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExOTc0Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446119742", "bodyText": "Is there another way/ location to exclude this?  Certainly there must be other printed AST text files with line length over 100, but I didn't see any evidence of them being excluded in ant-phase-verify.xml.", "author": "nmancus1", "createdAt": "2020-06-26T11:10:46Z", "path": "config/ant-phase-verify.xml", "diffHunk": "@@ -114,6 +114,9 @@\n           <!-- Do not validate possible source code remnants after regression testing -->\n           <exclude name=\".ci-temp/**/*\"/>\n \n+          <!-- line length must exceed 100 chars to compare printed AST -->\n+          <exclude name=\"**/InputJava14TextBlocks.txt\"/>", "originalCommit": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3MDkxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446170918", "bodyText": "Since the second lexer pushes to the token stream before the TEXT_BLOCK_BEGIN token is returned from the main lexer, we are using the exclude operator to initially not link the AST for TEXT_BLOCK_CONTENT to the textBlock rule so that we can construct the correct form of the AST in the action on line 1737.", "author": "nmancus1", "createdAt": "2020-06-26T13:04:42Z", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -1646,6 +1652,14 @@ lambdaBody\n     |    statement)\n     ;\n \n+textBlock\n+    :   !c:TEXT_BLOCK_CONTENT", "originalCommit": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3NjYzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446176631", "bodyText": "I am getting complaints from both IDEA and TeamCity about this:  JUnit test method testImpossibleExceptionsJava14TextBlockLexer() contains no assertions which I understand, but why don't the existing tests (see here) cause this warning?", "author": "nmancus1", "createdAt": "2020-06-26T13:15:45Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -246,6 +262,30 @@ public void testImpossibleValid() throws Exception {\n                 '4', '4', '.', '4', 'P', '4', 'D', ';');\n     }\n \n+    @Test\n+    public void testImpossibleExceptionsJava14TextBlockLexer() throws Exception {\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mSTD_ESC\", '\\\\', '*', (char) 0xFFFF);\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mONE_DOUBLE_QUOTE\", '\"', '\"');\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mNEWLINE\", '*');\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mTEXT_BLOCK_CONTENT\", (char) 0xFFFF);\n+    }\n+\n+    @Test\n+    public void testImpossibleValidJava14TextBlockLexer() throws Exception {", "originalCommit": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTI5MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446509290", "bodyText": "This means either there is a suppression in the config, or somewhere it is specified that AssertGeneratedJavaLexer.verifyFail is an assertion method.\nA quick search finds these rules:\nhttps://github.com/checkstyle/checkstyle/blob/master/config/pmd-test.xml#L182\nhttps://github.com/checkstyle/checkstyle/blob/master/config/intellij-idea-inspections.xml#L4618\n(the list may be incomplete)", "author": "pbludov", "createdAt": "2020-06-27T10:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3NjYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODE1MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446178150", "bodyText": "I would like to know a better way to reuse the existing code (see here) .  Should I make AssertGeneratedJavaLexer.java not final, then extend it, or should I refactor AssertGeneratedJavaLexer.java to work with the new lexer, too?", "author": "nmancus1", "createdAt": "2020-06-26T13:18:41Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -267,6 +307,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGeneratedJava14TextBlockLexer", "originalCommit": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMTQ4OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446511489", "bodyText": "This class is final simply because there was no reason not to make it final before. If you need to re-factor this to support the grammar for text blocks, then go ahead.", "author": "pbludov", "createdAt": "2020-06-27T10:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1MzM1NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r449653355", "bodyText": "After re-examining this, since each class must be a descendant of it's respective lexer, and an interface for these seems like overkill, I am going to leave this as it is.", "author": "nmancus1", "createdAt": "2020-07-03T16:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODE1MA=="}], "type": "inlineReview"}, {"oid": "5d567766023f7701bd33b3d71e5284f8ddb7b63f", "url": "https://github.com/checkstyle/checkstyle/commit/5d567766023f7701bd33b3d71e5284f8ddb7b63f", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-26T13:37:33Z", "type": "forcePushed"}, {"oid": "f3a26fa7627d5e1739b042aba9de2a7275136f1f", "url": "https://github.com/checkstyle/checkstyle/commit/f3a26fa7627d5e1739b042aba9de2a7275136f1f", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-02T17:32:28Z", "type": "forcePushed"}, {"oid": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "url": "https://github.com/checkstyle/checkstyle/commit/42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-03T04:31:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTE2MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r449551160", "bodyText": "@pbludov I have added this line, which suppresses the warning locally, but TeamCity is still failing.  Any ideas?", "author": "nmancus1", "createdAt": "2020-07-03T12:11:47Z", "path": "config/intellij-idea-inspections.xml", "diffHunk": "@@ -4616,6 +4616,8 @@\n     ,com.google.checkstyle.test.base.AbstractModuleTestSupport,verify.*, ,\n     ,com.puppycrawl.tools.checkstyle.internal.TestUtil,assert.*, ,\n     ,com.puppycrawl.tools.checkstyle.grammar.AstRegressionTest.AssertGeneratedJavaLexer,verify.*, ,\n+    ,com.puppycrawl.tools.checkstyle.grammar.AstRegressionTest.AssertGeneratedTextBlockLexer,", "originalCommit": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4OTA2NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r449589064", "bodyText": "This may be due to the line break. The IDEA configuration file is intended for machine reading, not for humans. If this is true, rewrite it as a single line and add an exception to check for the line length.", "author": "pbludov", "createdAt": "2020-07-03T13:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTE2MA=="}], "type": "inlineReview"}, {"oid": "9f2c2bc45861bb94569bfdd72410b5a8ae29ec3c", "url": "https://github.com/checkstyle/checkstyle/commit/9f2c2bc45861bb94569bfdd72410b5a8ae29ec3c", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-03T13:46:00Z", "type": "forcePushed"}, {"oid": "4f1d2821a2406448bff3590d9beb7af826b96143", "url": "https://github.com/checkstyle/checkstyle/commit/4f1d2821a2406448bff3590d9beb7af826b96143", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-03T14:24:43Z", "type": "forcePushed"}, {"oid": "463d86026a0241f07b4218fe029c0269baa40afe", "url": "https://github.com/checkstyle/checkstyle/commit/463d86026a0241f07b4218fe029c0269baa40afe", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-03T15:31:40Z", "type": "forcePushed"}, {"oid": "69a99159cfdaeec3777d8874f5ec551555f4af82", "url": "https://github.com/checkstyle/checkstyle/commit/69a99159cfdaeec3777d8874f5ec551555f4af82", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-15T00:57:01Z", "type": "forcePushed"}, {"oid": "f1123ee94c17133cc1768fb77f9a570d20850f23", "url": "https://github.com/checkstyle/checkstyle/commit/f1123ee94c17133cc1768fb77f9a570d20850f23", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-15T11:13:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1ODM1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r460858354", "bodyText": "Should @since tag be here? We agreed to tag new tokens.", "author": "pbludov", "createdAt": "2020-07-27T12:37:01Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3595,6 +3595,93 @@\n     public static final int RECORD_DEF =\n             GeneratedJavaTokenTypes.RECORD_DEF;\n \n+    /**\n+     * Beginning of a Java 14 Text Block literal,\n+     * delimited by three double quotes.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     *         String hello = \"\"\"\n+     *                 Hello, world!\n+     *                 \"\"\";\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * |--VARIABLE_DEF\n+     * |   |--MODIFIERS\n+     * |   |--TYPE\n+     * |   |   `--IDENT (String)\n+     * |   |--IDENT (hello)\n+     * |   |--ASSIGN (=)\n+     * |   |   `--EXPR\n+     * |   |       `--TEXT_BLOCK_LITERAL_BEGIN (\"\"\")\n+     * |   |           |--TEXT_BLOCK_CONTENT (\\n                Hello, world!\\n                    )\n+     * |   |           `--TEXT_BLOCK_LITERAL_END (\"\"\")\n+     * |   `--SEMI (;)\n+     * </pre>\n+     *\n+     */", "originalCommit": "f1123ee94c17133cc1768fb77f9a570d20850f23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3MTkzNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r460871934", "bodyText": "Updated.", "author": "nmancus1", "createdAt": "2020-07-27T13:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1ODM1NA=="}], "type": "inlineReview"}, {"oid": "e27e59547c184a54feb938bd3b51e9070d251e52", "url": "https://github.com/checkstyle/checkstyle/commit/e27e59547c184a54feb938bd3b51e9070d251e52", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-27T12:55:56Z", "type": "forcePushed"}, {"oid": "66a26bf641b0704374b188710187b6b5dcdce494", "url": "https://github.com/checkstyle/checkstyle/commit/66a26bf641b0704374b188710187b6b5dcdce494", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-28T11:54:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NTU1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461645554", "bodyText": "I would rather do no coverage for such hard to catch code and and bump percentage in config.\nwe keep percentage in coverage for generated code only to see diff of coverage on new grammar update and probably discuss what could be covered by real inputs.\nWe do not need to have test on generated code of ANTLR, it is by definition the most trusty code in our code base.\nin addition  we always work on javac compiled sources, so we do not care how code works on incomplete/non-compilable java code", "author": "romani", "createdAt": "2020-07-28T14:52:52Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGeneratedTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGeneratedTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGeneratedTextBlockLexer instance =\n+                    new AssertGeneratedTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,", "originalCommit": "66a26bf641b0704374b188710187b6b5dcdce494", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NzE3MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461657171", "bodyText": "ok, looks like @rnveach  was a person who introduced such asserts - 5123ab3 .\nok, lets keep it.", "author": "romani", "createdAt": "2020-07-28T15:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NTU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MjU3MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461652570", "bodyText": "please move this update in separate issue, as we will need test is separately, Check tests need to be updated.", "author": "romani", "createdAt": "2020-07-28T15:01:09Z", "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -2515,6 +2515,8 @@ public native void myTest(); // violation\n                 STRING_LITERAL</a>\n                 , <a href=\"apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CHAR_LITERAL\">\n                 CHAR_LITERAL</a>\n+                , <a href=\"apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#TEXT_BLOCK_CONTENT\">\n+                TEXT_BLOCK_CONTENT</a>", "originalCommit": "66a26bf641b0704374b188710187b6b5dcdce494", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyODM3Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461728373", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-07-28T16:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MjU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxMDM3Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462310372", "bodyText": "Please share link to issue where you plan to do this.", "author": "romani", "createdAt": "2020-07-29T13:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MjU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NTE2Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462345167", "bodyText": "#8576", "author": "nmancus1", "createdAt": "2020-07-29T14:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MjU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1OTI2Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461659262", "bodyText": "this worries me .... we did a lot to keep this file on leash\nlets change name of inner class to AssertGenTextBlockLexer or AssertGeneratedTextLexer something similar to avoid this suppression.", "author": "romani", "createdAt": "2020-07-28T15:10:30Z", "path": "config/ant-phase-verify.xml", "diffHunk": "@@ -119,6 +119,10 @@\n           <!-- Exclude because printed AST has line length > 100 characters -->\n           <exclude name=\"**/InputJava14InstanceofWithPatternMatchingAST.txt\"/>\n           <exclude name=\"**/InputJava14Records.txt\"/>\n+          <exclude name=\"**/InputJava14TextBlocks.txt\"/>\n+\n+          <!-- line length must be over 100 chars to properly suppress warnings -->\n+          <exclude name=\"**/intellij-idea-inspections.xml\"/>", "originalCommit": "66a26bf641b0704374b188710187b6b5dcdce494", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyODQ2Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461728463", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-07-28T16:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1OTI2Mg=="}], "type": "inlineReview"}, {"oid": "279498c02b67ff95a42a68befe4606c2052d4bd6", "url": "https://github.com/checkstyle/checkstyle/commit/279498c02b67ff95a42a68befe4606c2052d4bd6", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-28T16:42:31Z", "type": "forcePushed"}, {"oid": "e98190ab57157814ea4838697df1759d9a1542cf", "url": "https://github.com/checkstyle/checkstyle/commit/e98190ab57157814ea4838697df1759d9a1542cf", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-29T14:58:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462676317", "bodyText": "Shouldn't we specify what is the escape character, which is \\?", "author": "rnveach", "createdAt": "2020-07-30T01:12:11Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3724,6 +3724,96 @@\n     public static final int COMPACT_CTOR_DEF =\n             GeneratedJavaTokenTypes.COMPACT_CTOR_DEF;\n \n+    /**\n+     * Beginning of a Java 14 Text Block literal,\n+     * delimited by three double quotes.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     *         String hello = \"\"\"\n+     *                 Hello, world!\n+     *                 \"\"\";\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * |--VARIABLE_DEF\n+     * |   |--MODIFIERS\n+     * |   |--TYPE\n+     * |   |   `--IDENT (String)\n+     * |   |--IDENT (hello)\n+     * |   |--ASSIGN (=)\n+     * |   |   `--EXPR\n+     * |   |       `--TEXT_BLOCK_LITERAL_BEGIN (\"\"\")\n+     * |   |           |--TEXT_BLOCK_CONTENT (\\n                Hello, world!\\n                    )\n+     * |   |           `--TEXT_BLOCK_LITERAL_END (\"\"\")\n+     * |   `--SEMI (;)\n+     * </pre>\n+     *\n+     * @since 8.36\n+     */\n+    public static final int TEXT_BLOCK_LITERAL_BEGIN =\n+            GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_BEGIN;\n+\n+    /**\n+     * Content (text) of a Java 14 text block. This is a\n+     * sequence of (possibly escaped) characters.", "originalCommit": "e98190ab57157814ea4838697df1759d9a1542cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MzM3Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462753377", "bodyText": "Good point. Fixed.", "author": "nmancus1", "createdAt": "2020-07-30T06:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NjI5Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463176292", "bodyText": "Note this escape goes directly to my other review item remaining. Maybe the error is in possibly escaped and should always be escaped.", "author": "rnveach", "createdAt": "2020-07-30T18:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxMTE0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463611149", "bodyText": "From JLS: The use of the escape sequences \\\" and \\n is permitted in a text block, but not necessary or recommended.", "author": "nmancus1", "createdAt": "2020-07-31T13:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzOTc1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463639758", "bodyText": "We should mention that we substitude invisible '\\n' (in linux single char symbol) with \\n (2 chars).\nBy means of this we increase length of String object.\n.... stop ...\nCan we put in actual String symbol as is ? (single char)\nis it a nuance of you AST printer that we need show content in single line and Printer is doing escapes ?\nIf this is a problems of AST printer - IT IS NOT a problem at all. Nobody care about our AST printer, nobody use it except for us in some cases.", "author": "romani", "createdAt": "2020-07-31T14:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0NDY5Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463644693", "bodyText": "Can we put in actual String symbol as is\n\nDo you mean in the AST? Or in the content of a text block?", "author": "nmancus1", "createdAt": "2020-07-31T14:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0ODUyNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463648527", "bodyText": "Also: \n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\n    \n    \n        Lines 225 to 235\n      in\n      8e82c6c\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Replace all control chars with escaped symbols. \n        \n\n        \n          \n                * \n        \n\n        \n          \n                * @param text the String to process. \n        \n\n        \n          \n                * @return the processed String with all control chars escaped. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               private static String escapeAllControlChars(String text) { \n        \n\n        \n          \n                   final String textWithoutNewlines = NEWLINE.matcher(text).replaceAll(\"\\\\\\\\n\"); \n        \n\n        \n          \n                   final String textWithoutReturns = RETURN.matcher(textWithoutNewlines).replaceAll(\"\\\\\\\\r\"); \n        \n\n        \n          \n                   return TAB.matcher(textWithoutReturns).replaceAll(\"\\\\\\\\t\"); \n        \n\n        \n          \n               }", "author": "nmancus1", "createdAt": "2020-07-31T14:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1NDk3OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463654979", "bodyText": "Please prove that size of String object in AST that contains all values from text block is not bigger than in java runtime.", "author": "romani", "createdAt": "2020-07-31T14:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2OTAyOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463669028", "bodyText": "The compiler removes all of the preceding whitespace, and we do not:\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n\u279c  text-blocks-grammar cat TestClass.java                             \npublic class TestClass {\n\n\tpublic static void main(String... args) {\n\n\t\tString s1 = \"\"\"\n                \\\\n\"\"\";\n\t\tString s2 = \"\"\"\n                \\n\"\"\";\n\t\tString s3 = \"\"\"\n                \\\\\"\"\";\n\n\t\tString s4 = \"\"\"\n                \\u000D\"\"\";\n\t\tString s5 = \"\"\"\n                \\n\"\"\";\n\t\tString s6 = \"\"\"\n                \\n\n                  \"\"\";\n\t\tSystem.out.println(\"Length of s1: \" + s1.length());\n\t\tSystem.out.println(\"Length of s2: \" + s2.length());\n\t\tSystem.out.println(\"Length of s3: \" + s3.length());\n\t\tSystem.out.println(\"Length of s4: \" + s4.length());\n\t\tSystem.out.println(\"Length of s5: \" + s5.length());\n\t\tSystem.out.println(\"Length of s6: \" + s6.length());\n\n\t}\n}\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/java --enable-preview TestClass\nLength of s1: 2\nLength of s2: 1\nLength of s3: 1\nLength of s4: 1\nLength of s5: 1\nLength of s6: 2\n\n\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|   `--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> TestClass [1:13]\n`--OBJBLOCK -> OBJBLOCK [1:23]\n    |--LCURLY -> { [1:23]\n    |--METHOD_DEF -> METHOD_DEF [3:1]\n    |   |--MODIFIERS -> MODIFIERS [3:1]\n    |   |   |--LITERAL_PUBLIC -> public [3:1]\n    |   |   `--LITERAL_STATIC -> static [3:8]\n    |   |--TYPE -> TYPE [3:15]\n    |   |   `--LITERAL_VOID -> void [3:15]\n    |   |--IDENT -> main [3:20]\n    |   |--LPAREN -> ( [3:24]\n    |   |--PARAMETERS -> PARAMETERS [3:25]\n    |   |   `--PARAMETER_DEF -> PARAMETER_DEF [3:25]\n    |   |       |--MODIFIERS -> MODIFIERS [3:25]\n    |   |       |--TYPE -> TYPE [3:25]\n    |   |       |   `--IDENT -> String [3:25]\n    |   |       |--ELLIPSIS -> ... [3:31]\n    |   |       `--IDENT -> args [3:35]\n    |   |--RPAREN -> ) [3:39]\n    |   `--SLIST -> { [3:41]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [5:2]\n    |       |   |--MODIFIERS -> MODIFIERS [5:2]\n    |       |   |--TYPE -> TYPE [5:2]\n    |       |   |   `--IDENT -> String [5:2]\n    |       |   |--IDENT -> s1 [5:9]\n    |       |   `--ASSIGN -> = [5:12]\n    |       |       `--EXPR -> EXPR [5:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [5:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\\\n [5:17]\nresult of node.getText().length: 20\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [6:19]\n    |       |--SEMI -> ; [6:22]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [7:2]\n    |       |   |--MODIFIERS -> MODIFIERS [7:2]\n    |       |   |--TYPE -> TYPE [7:2]\n    |       |   |   `--IDENT -> String [7:2]\n    |       |   |--IDENT -> s2 [7:9]\n    |       |   `--ASSIGN -> = [7:12]\n    |       |       `--EXPR -> EXPR [7:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [7:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\n [7:17]\nresult of node.getText().length: 19\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [8:18]\n    |       |--SEMI -> ; [8:21]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [9:2]\n    |       |   |--MODIFIERS -> MODIFIERS [9:2]\n    |       |   |--TYPE -> TYPE [9:2]\n    |       |   |   `--IDENT -> String [9:2]\n    |       |   |--IDENT -> s3 [9:9]\n    |       |   `--ASSIGN -> = [9:12]\n    |       |       `--EXPR -> EXPR [9:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [9:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\\\ [9:17]\nresult of node.getText().length: 19\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [10:18]\n    |       |--SEMI -> ; [10:21]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [12:2]\n    |       |   |--MODIFIERS -> MODIFIERS [12:2]\n    |       |   |--TYPE -> TYPE [12:2]\n    |       |   |   `--IDENT -> String [12:2]\n    |       |   |--IDENT -> s4 [12:9]\n    |       |   `--ASSIGN -> = [12:12]\n    |       |       `--EXPR -> EXPR [12:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [12:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\u000D [12:17]\nresult of node.getText().length: 23\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [13:22]\n    |       |--SEMI -> ; [13:25]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [14:2]\n    |       |   |--MODIFIERS -> MODIFIERS [14:2]\n    |       |   |--TYPE -> TYPE [14:2]\n    |       |   |   `--IDENT -> String [14:2]\n    |       |   |--IDENT -> s5 [14:9]\n    |       |   `--ASSIGN -> = [14:12]\n    |       |       `--EXPR -> EXPR [14:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [14:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\n [14:17]\nresult of node.getText().length: 19\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [15:18]\n    |       |--SEMI -> ; [15:21]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [16:2]\n    |       |   |--MODIFIERS -> MODIFIERS [16:2]\n    |       |   |--TYPE -> TYPE [16:2]\n    |       |   |   `--IDENT -> String [16:2]\n    |       |   |--IDENT -> s6 [16:9]\n    |       |   `--ASSIGN -> = [16:12]\n    |       |       `--EXPR -> EXPR [16:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [16:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\n\\n                   [16:17]\nresult of node.getText().length: 38\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [18:18]\n......", "author": "nmancus1", "createdAt": "2020-07-31T15:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3Mjc4MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463672781", "bodyText": "Consider this too:\n  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n\u279c  text-blocks-grammar cat TestClass.java\npublic class TestClass {\n\n\tpublic static void main(String... args) {\n\nString s1 = \"\"\"\n\\\\n\"\"\";\nString s2 = \"\"\"\n\\n\"\"\";\nString s3 = \"\"\"\n\\\\\"\"\";\n\nString s4 = \"\"\"\n\\u000D\"\"\";\nString s5 = \"\"\"\n\\n\"\"\";\nString s6 = \"\"\"\n\\n\n\"\"\";\n\tSystem.out.println(\"Length of s1: \" + s1.length());\n\tSystem.out.println(\"Length of s2: \" + s2.length());\n\tSystem.out.println(\"Length of s3: \" + s3.length());\n\tSystem.out.println(\"Length of s4: \" + s4.length());\n\tSystem.out.println(\"Length of s5: \" + s5.length());\n\tSystem.out.println(\"Length of s6: \" + s6.length());\n\n\t}\n}\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/java --enable-preview TestClass\nLength of s1: 2\nLength of s2: 1\nLength of s3: 1\nLength of s4: 1\nLength of s5: 1\nLength of s6: 2\n\n\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|   `--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> TestClass [1:13]\n`--OBJBLOCK -> OBJBLOCK [1:23]\n    |--LCURLY -> { [1:23]\n    |--METHOD_DEF -> METHOD_DEF [3:1]\n    |   |--MODIFIERS -> MODIFIERS [3:1]\n    |   |   |--LITERAL_PUBLIC -> public [3:1]\n    |   |   `--LITERAL_STATIC -> static [3:8]\n    |   |--TYPE -> TYPE [3:15]\n    |   |   `--LITERAL_VOID -> void [3:15]\n    |   |--IDENT -> main [3:20]\n    |   |--LPAREN -> ( [3:24]\n    |   |--PARAMETERS -> PARAMETERS [3:25]\n    |   |   `--PARAMETER_DEF -> PARAMETER_DEF [3:25]\n    |   |       |--MODIFIERS -> MODIFIERS [3:25]\n    |   |       |--TYPE -> TYPE [3:25]\n    |   |       |   `--IDENT -> String [3:25]\n    |   |       |--ELLIPSIS -> ... [3:31]\n    |   |       `--IDENT -> args [3:35]\n    |   |--RPAREN -> ) [3:39]\n    |   `--SLIST -> { [3:41]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [5:0]\n    |       |   |--MODIFIERS -> MODIFIERS [5:0]\n    |       |   |--TYPE -> TYPE [5:0]\n    |       |   |   `--IDENT -> String [5:0]\n    |       |   |--IDENT -> s1 [5:7]\n    |       |   `--ASSIGN -> = [5:10]\n    |       |       `--EXPR -> EXPR [5:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [5:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\\\n [5:15]\nresult of node.getText().length: 4\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [6:3]\n    |       |--SEMI -> ; [6:6]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [7:0]\n    |       |   |--MODIFIERS -> MODIFIERS [7:0]\n    |       |   |--TYPE -> TYPE [7:0]\n    |       |   |   `--IDENT -> String [7:0]\n    |       |   |--IDENT -> s2 [7:7]\n    |       |   `--ASSIGN -> = [7:10]\n    |       |       `--EXPR -> EXPR [7:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [7:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\n [7:15]\nresult of node.getText().length: 3\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [8:2]\n    |       |--SEMI -> ; [8:5]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [9:0]\n    |       |   |--MODIFIERS -> MODIFIERS [9:0]\n    |       |   |--TYPE -> TYPE [9:0]\n    |       |   |   `--IDENT -> String [9:0]\n    |       |   |--IDENT -> s3 [9:7]\n    |       |   `--ASSIGN -> = [9:10]\n    |       |       `--EXPR -> EXPR [9:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [9:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\\\ [9:15]\nresult of node.getText().length: 3\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [10:2]\n    |       |--SEMI -> ; [10:5]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [12:0]\n    |       |   |--MODIFIERS -> MODIFIERS [12:0]\n    |       |   |--TYPE -> TYPE [12:0]\n    |       |   |   `--IDENT -> String [12:0]\n    |       |   |--IDENT -> s4 [12:7]\n    |       |   `--ASSIGN -> = [12:10]\n    |       |       `--EXPR -> EXPR [12:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [12:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\u000D [12:15]\nresult of node.getText().length: 7\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [13:6]\n    |       |--SEMI -> ; [13:9]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [14:0]\n    |       |   |--MODIFIERS -> MODIFIERS [14:0]\n    |       |   |--TYPE -> TYPE [14:0]\n    |       |   |   `--IDENT -> String [14:0]\n    |       |   |--IDENT -> s5 [14:7]\n    |       |   `--ASSIGN -> = [14:10]\n    |       |       `--EXPR -> EXPR [14:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [14:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\n [14:15]\nresult of node.getText().length: 3\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [15:2]\n    |       |--SEMI -> ; [15:5]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [16:0]\n    |       |   |--MODIFIERS -> MODIFIERS [16:0]\n    |       |   |--TYPE -> TYPE [16:0]\n    |       |   |   `--IDENT -> String [16:0]\n    |       |   |--IDENT -> s6 [16:7]\n    |       |   `--ASSIGN -> = [16:10]\n    |       |       `--EXPR -> EXPR [16:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [16:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\n\\n [16:15]\nresult of node.getText().length: 4\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [18:0]\n......", "author": "nmancus1", "createdAt": "2020-07-31T15:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MzcwMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463673703", "bodyText": "So, we aren't miscounting the actual line terminators, but our length is not accurate due to counting the whitespace preceding the text.", "author": "nmancus1", "createdAt": "2020-07-31T15:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MjUwNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463682504", "bodyText": "It is good that keep spaces !!!!\nWe care about source file as text , not in what it result after compilation ( compiler remove a lot of stuff from source code, it is grey area). We might change this in future if there be bug demand.", "author": "romani", "createdAt": "2020-07-31T15:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462679166", "bodyText": "Class name is GeneratedTextBlockLexer", "author": "rnveach", "createdAt": "2020-07-30T01:23:12Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGenTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGenTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGenTextBlockLexer instance =\n+                    new AssertGenTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,\n+                    boolean.class);\n+            boolean exception;\n+\n+            try {\n+                method.invoke(instance, true);\n+                exception = false;\n+            }\n+            catch (InvocationTargetException ex) {\n+                if (expectPass) {\n+                    throw ex;\n+                }\n+\n+                final Class<?> clss = ex.getTargetException().getClass();\n+                if (clss != NoViableAltForCharException.class\n+                        && clss != SemanticException.class) {\n+                    throw ex;\n+                }\n+                exception = true;\n+            }\n+\n+            if (expectPass) {\n+                assertFalse(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName", "originalCommit": "e98190ab57157814ea4838697df1759d9a1542cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MzMwOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462753309", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-07-30T06:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE5Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462679192", "bodyText": "same.", "author": "rnveach", "createdAt": "2020-07-30T01:23:19Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGenTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGenTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGenTextBlockLexer instance =\n+                    new AssertGenTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,\n+                    boolean.class);\n+            boolean exception;\n+\n+            try {\n+                method.invoke(instance, true);\n+                exception = false;\n+            }\n+            catch (InvocationTargetException ex) {\n+                if (expectPass) {\n+                    throw ex;\n+                }\n+\n+                final Class<?> clss = ex.getTargetException().getClass();\n+                if (clss != NoViableAltForCharException.class\n+                        && clss != SemanticException.class) {\n+                    throw ex;\n+                }\n+                exception = true;\n+            }\n+\n+            if (expectPass) {\n+                assertFalse(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName\n+                        + \" resulted in an exception\");\n+            }\n+            else {\n+                assertTrue(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName", "originalCommit": "e98190ab57157814ea4838697df1759d9a1542cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MzI4Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462753282", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-07-30T06:00:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462679856", "bodyText": "Why aren't these double escaped? If a newline is printed as \\n, it seems to me \\ should be printed as \\\\.\nThis seems like an issue to me.", "author": "rnveach", "createdAt": "2020-07-30T01:25:47Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14TextBlocks.txt", "diffHunk": "@@ -0,0 +1,277 @@\n+CLASS_DEF -> CLASS_DEF [3:0]\n+|--MODIFIERS -> MODIFIERS [3:0]\n+|   `--LITERAL_PUBLIC -> public [3:0]\n+|--LITERAL_CLASS -> class [3:7]\n+|--IDENT -> InputJava14TextBlocks [3:13]\n+`--OBJBLOCK -> OBJBLOCK [4:0]\n+    |--LCURLY -> { [4:0]\n+    |--VARIABLE_DEF -> VARIABLE_DEF [5:4]\n+    |   |--MODIFIERS -> MODIFIERS [5:4]\n+    |   |   |--LITERAL_PRIVATE -> private [5:4]\n+    |   |   |--LITERAL_STATIC -> static [5:12]\n+    |   |   `--FINAL -> final [5:19]\n+    |   |--TYPE -> TYPE [5:25]\n+    |   |   `--IDENT -> CharSequence [5:25]\n+    |   |--IDENT -> type [5:38]\n+    |   |--ASSIGN -> = [5:43]\n+    |   |   `--EXPR -> EXPR [5:45]\n+    |   |       `--STRING_LITERAL -> \"type\" [5:45]\n+    |   `--SEMI -> ; [5:51]\n+    |--STATIC_INIT -> STATIC_INIT [7:4]\n+    |   `--SLIST -> { [7:11]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [8:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [8:8]\n+    |       |   |--TYPE -> TYPE [8:8]\n+    |       |   |   `--IDENT -> String [8:8]\n+    |       |   |--IDENT -> doubleQuotes [8:15]\n+    |       |   `--ASSIGN -> = [8:28]\n+    |       |       `--EXPR -> EXPR [8:30]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [8:30]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \"\"\\n                 [8:33]\n+    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [10:16]\n+    |       |--SEMI -> ; [10:19]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [11:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [11:8]\n+    |       |   |--TYPE -> TYPE [11:8]\n+    |       |   |   `--IDENT -> String [11:8]\n+    |       |   |--IDENT -> oneDoubleQuote [11:15]\n+    |       |   `--ASSIGN -> = [11:30]\n+    |       |       `--EXPR -> EXPR [11:32]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [11:32]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \"\\n                \"\\n                 [11:35]\n+    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [14:16]\n+    |       |--SEMI -> ; [14:19]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [15:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [15:8]\n+    |       |   |--TYPE -> TYPE [15:8]\n+    |       |   |   `--IDENT -> String [15:8]\n+    |       |   |--IDENT -> empty [15:15]\n+    |       |   `--ASSIGN -> = [15:21]\n+    |       |       `--EXPR -> EXPR [15:23]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [15:23]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                 [15:26]\n+    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [16:16]\n+    |       |--SEMI -> ; [16:19]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [17:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [17:8]\n+    |       |   |--TYPE -> TYPE [17:8]\n+    |       |   |   `--IDENT -> String [17:8]\n+    |       |   |--IDENT -> oneSingleQuote [17:15]\n+    |       |   `--ASSIGN -> = [17:30]\n+    |       |       `--EXPR -> EXPR [17:32]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [17:32]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                '\\n                 [17:35]\n+    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [19:16]\n+    |       |--SEMI -> ; [19:19]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [20:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [20:8]\n+    |       |   |--TYPE -> TYPE [20:8]\n+    |       |   |   `--IDENT -> String [20:8]\n+    |       |   |--IDENT -> escape [20:15]\n+    |       |   `--ASSIGN -> = [20:22]\n+    |       |       `--EXPR -> EXPR [20:24]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [20:24]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                <html>\\u000D\\u000A\\n\\n                    <body>\\u000D\\u000A\\n\\n                        <p>Hello, world</p>\\u000D\\u000A\\n\\n                    </body>\\u000D\\u000A\\n\\n                </html>\\u000D\\u000A\\n                 [20:27]", "originalCommit": "e98190ab57157814ea4838697df1759d9a1542cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc0NTcxNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462745714", "bodyText": "I'm not sure that I follow.\n\nIf a newline is printed as \\n\n\nBoth the text block characters and escape sequences are being printed exactly how the content is written in the java file, except for one exception; the actual line terminators ( \\n in this case) are being added to the \"end\" of each line.\n\nit seems to me \\ should be printed as \\\\\n\nI don't understand why we should add an additional \\, can you explain?\nMaybe this will aid in our discussion:\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n\n\u279c  text-blocks-grammar cat TestClass.java\npublic class TestClass {\n\tString escape1 = \"<html>\\\\u000D\\\\u000A\\n\" +\n\t\t\t\"           <body>\\\\u000D\\\\u000A\\n\" +\n\t\t\t\"               <p>Hello, world</p>\\\\u000D\\\\u000A\\n\" +\n\t\t\t\"           </body>\\\\u000D\\\\u000A\\n\" +\n\t\t\t\"       </html>\\\\u000D\\\\u000A\";\n\n\tString escape2 = \"\"\"\n                      <html>\\u000D\\u000A\\n\n                          <body>\\u000D\\u000A\\n\n                              <p>Hello, world</p>\\u000D\\u000A\\n\n                          </body>\\u000D\\u000A\\n\n                      </html>\\u000D\\u000A\"\"\";\n}\n                                                                                                                            \n\u279c  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -t TestClass.java\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|   `--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> TestClass [1:13]\n`--OBJBLOCK -> OBJBLOCK [1:23]\n    |--LCURLY -> { [1:23]\n    |--VARIABLE_DEF -> VARIABLE_DEF [2:1]\n    |   |--MODIFIERS -> MODIFIERS [2:1]\n    |   |--TYPE -> TYPE [2:1]\n    |   |   `--IDENT -> String [2:1]\n    |   |--IDENT -> escape1 [2:8]\n    |   |--ASSIGN -> = [2:16]\n    |   |   `--EXPR -> EXPR [5:40]\n    |   |       `--PLUS -> + [5:40]\n    |   |           |--PLUS -> + [4:56]\n    |   |           |   |--PLUS -> + [3:39]\n    |   |           |   |   |--PLUS -> + [2:43]\n    |   |           |   |   |   |--STRING_LITERAL -> \"<html>\\\\u000D\\\\u000A\\n\" [2:18]\n    |   |           |   |   |   `--STRING_LITERAL -> \"           <body>\\\\u000D\\\\u000A\\n\" [3:3]\n    |   |           |   |   `--STRING_LITERAL -> \"               <p>Hello, world</p>\\\\u000D\\\\u000A\\n\" [4:3]\n    |   |           |   `--STRING_LITERAL -> \"           </body>\\\\u000D\\\\u000A\\n\" [5:3]\n    |   |           `--STRING_LITERAL -> \"       </html>\\\\u000D\\\\u000A\" [6:3]\n    |   `--SEMI -> ; [6:33]\n    |--VARIABLE_DEF -> VARIABLE_DEF [8:1]\n    |   |--MODIFIERS -> MODIFIERS [8:1]\n    |   |--TYPE -> TYPE [8:1]\n    |   |   `--IDENT -> String [8:1]\n    |   |--IDENT -> escape2 [8:8]\n    |   |--ASSIGN -> = [8:16]\n    |   |   `--EXPR -> EXPR [8:18]\n    |   |       `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [8:18]\n    |   |           |--TEXT_BLOCK_CONTENT -> \\n                      <html>\\u000D\\u000A\\n\\n                          <body>\\u000D\\u000A\\n\\n                              <p>Hello, world</p>\\u000D\\u000A\\n\\n                          </body>\\u000D\\u000A\\n\\n                      </html>\\u000D\\u000A [8:21]\n    |   |           `--TEXT_BLOCK_LITERAL_END -> \"\"\" [13:41]\n    |   `--SEMI -> ; [13:44]\n    `--RCURLY -> } [14:0]\n\n\n\nFor fun, even though this won't compile, Checkstyle will print the AST:\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n14 errors\n\n\u279c  text-blocks-grammar cat TestClass.java\npublic class TestClass {\n\tString escape1 = \"<html>\\u000D\\u000A\\n\" +\n\t\t\t\"           <body>\\u000D\\u000A\\n\" +\n\t\t\t\"               <p>Hello, world</p>\\u000D\\u000A\\n\" +\n\t\t\t\"           </body>\\u000D\\u000A\\n\" +\n\t\t\t\"       </html>\\u000D\\u000A\";\n\n\tString escape2 = \"\"\"\n                      <html>\\u000D\\u000A\\n\n                          <body>\\u000D\\u000A\\n\n                              <p>Hello, world</p>\\u000D\\u000A\\n\n                          </body>\\u000D\\u000A\\n\n                      </html>\\u000D\\u000A\"\"\";\n}\n                                                                                                                           \n\u279c  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -t TestClass.java\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|   `--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> TestClass [1:13]\n`--OBJBLOCK -> OBJBLOCK [1:23]\n    |--LCURLY -> { [1:23]\n    |--VARIABLE_DEF -> VARIABLE_DEF [2:1]\n    |   |--MODIFIERS -> MODIFIERS [2:1]\n    |   |--TYPE -> TYPE [2:1]\n    |   |   `--IDENT -> String [2:1]\n    |   |--IDENT -> escape1 [2:8]\n    |   |--ASSIGN -> = [2:16]\n    |   |   `--EXPR -> EXPR [5:38]\n    |   |       `--PLUS -> + [5:38]\n    |   |           |--PLUS -> + [4:54]\n    |   |           |   |--PLUS -> + [3:37]\n    |   |           |   |   |--PLUS -> + [2:41]\n    |   |           |   |   |   |--STRING_LITERAL -> \"<html>\\u000D\\u000A\\n\" [2:18]\n    |   |           |   |   |   `--STRING_LITERAL -> \"           <body>\\u000D\\u000A\\n\" [3:3]\n    |   |           |   |   `--STRING_LITERAL -> \"               <p>Hello, world</p>\\u000D\\u000A\\n\" [4:3]\n    |   |           |   `--STRING_LITERAL -> \"           </body>\\u000D\\u000A\\n\" [5:3]\n    |   |           `--STRING_LITERAL -> \"       </html>\\u000D\\u000A\" [6:3]\n    |   `--SEMI -> ; [6:31]\n    |--VARIABLE_DEF -> VARIABLE_DEF [8:1]\n    |   |--MODIFIERS -> MODIFIERS [8:1]\n    |   |--TYPE -> TYPE [8:1]\n    |   |   `--IDENT -> String [8:1]\n    |   |--IDENT -> escape2 [8:8]\n    |   |--ASSIGN -> = [8:16]\n    |   |   `--EXPR -> EXPR [8:18]\n    |   |       `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [8:18]\n    |   |           |--TEXT_BLOCK_CONTENT -> \\n                      <html>\\u000D\\u000A\\n\\n                          <body>\\u000D\\u000A\\n\\n                              <p>Hello, world</p>\\u000D\\u000A\\n\\n                          </body>\\u000D\\u000A\\n\\n                      </html>\\u000D\\u000A [8:21]\n    |   |           `--TEXT_BLOCK_LITERAL_END -> \"\"\" [13:41]\n    |   `--SEMI -> ; [13:44]\n    `--RCURLY -> } [14:0]", "author": "nmancus1", "createdAt": "2020-07-30T05:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTE5NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463175194", "bodyText": "Sorry for the confusion, my point was content in the AST.\nWe escaped special characters. \\n, \\r, etc.. I would expect everything to follow this escaping even single \\ as it will make parsing by others easier.\nIf someone put in String s = \"\"\"\\\\\"\"\"; I would expect the AST to to say TEXT_BLOCK_CONTENT -> \\\\.\nThis would make it universally clear that all \\s are escape characters for the first instance seen.\nImagine if someone put in String s = \"\"\"\\\\n\"\"\";. As you have your AST generating now, it would say TEXT_BLOCK_CONTENT -> \\n. How would we parse this then? By your other rules this would mean the string is purely a new line, and wouldn't be parsed as actual text characters \\ and n.\nWe should escape all \\ text seen in the contents.", "author": "rnveach", "createdAt": "2020-07-30T18:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjY5NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463192695", "bodyText": "Imagine if someone put in String s = \"\"\"\\\\n\"\"\";\n\nNote, this is not allowed.  You must have a newline after the opening delimiter.   I'm not sure if that matters in this context, but I just wanted to point that out.   Here is some more output to consider:\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n\n\u279c  text-blocks-grammar cat TestClass.java \npublic class TestClass {\n\n\tString s1 = \"\"\"\n            \\\\n\"\"\";\n\tString s2 = \"\"\"\n            \\n\"\"\";\n\tString s3 = \"\"\"\n            \\\\\"\"\";\n\tString s4 = \"\\\\n\";\n\tString s5 = \"\\n\";\n\tString s6 = \"\\\\\";\n}\n                                                                                                                           \n \u279c  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -t TestClass.java\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|   `--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> TestClass [1:13]\n`--OBJBLOCK -> OBJBLOCK [1:23]\n    |--LCURLY -> { [1:23]\n    |--VARIABLE_DEF -> VARIABLE_DEF [3:1]\n    |   |--MODIFIERS -> MODIFIERS [3:1]\n    |   |--TYPE -> TYPE [3:1]\n    |   |   `--IDENT -> String [3:1]\n    |   |--IDENT -> s1 [3:8]\n    |   |--ASSIGN -> = [3:11]\n    |   |   `--EXPR -> EXPR [3:13]\n    |   |       `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [3:13]\n    |   |           |--TEXT_BLOCK_CONTENT -> \\n            \\\\n [3:16]\n    |   |           `--TEXT_BLOCK_LITERAL_END -> \"\"\" [4:15]\n    |   `--SEMI -> ; [4:18]\n    |--VARIABLE_DEF -> VARIABLE_DEF [5:1]\n    |   |--MODIFIERS -> MODIFIERS [5:1]\n    |   |--TYPE -> TYPE [5:1]\n    |   |   `--IDENT -> String [5:1]\n    |   |--IDENT -> s2 [5:8]\n    |   |--ASSIGN -> = [5:11]\n    |   |   `--EXPR -> EXPR [5:13]\n    |   |       `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [5:13]\n    |   |           |--TEXT_BLOCK_CONTENT -> \\n            \\n [5:16]\n    |   |           `--TEXT_BLOCK_LITERAL_END -> \"\"\" [6:14]\n    |   `--SEMI -> ; [6:17]\n    |--VARIABLE_DEF -> VARIABLE_DEF [7:1]\n    |   |--MODIFIERS -> MODIFIERS [7:1]\n    |   |--TYPE -> TYPE [7:1]\n    |   |   `--IDENT -> String [7:1]\n    |   |--IDENT -> s3 [7:8]\n    |   |--ASSIGN -> = [7:11]\n    |   |   `--EXPR -> EXPR [7:13]\n    |   |       `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [7:13]\n    |   |           |--TEXT_BLOCK_CONTENT -> \\n            \\\\ [7:16]\n    |   |           `--TEXT_BLOCK_LITERAL_END -> \"\"\" [8:14]\n    |   `--SEMI -> ; [8:17]\n    |--VARIABLE_DEF -> VARIABLE_DEF [9:1]\n    |   |--MODIFIERS -> MODIFIERS [9:1]\n    |   |--TYPE -> TYPE [9:1]\n    |   |   `--IDENT -> String [9:1]\n    |   |--IDENT -> s4 [9:8]\n    |   |--ASSIGN -> = [9:11]\n    |   |   `--EXPR -> EXPR [9:13]\n    |   |       `--STRING_LITERAL -> \"\\\\n\" [9:13]\n    |   `--SEMI -> ; [9:18]\n    |--VARIABLE_DEF -> VARIABLE_DEF [10:1]\n    |   |--MODIFIERS -> MODIFIERS [10:1]\n    |   |--TYPE -> TYPE [10:1]\n    |   |   `--IDENT -> String [10:1]\n    |   |--IDENT -> s5 [10:8]\n    |   |--ASSIGN -> = [10:11]\n    |   |   `--EXPR -> EXPR [10:13]\n    |   |       `--STRING_LITERAL -> \"\\n\" [10:13]\n    |   `--SEMI -> ; [10:17]\n    |--VARIABLE_DEF -> VARIABLE_DEF [11:1]\n    |   |--MODIFIERS -> MODIFIERS [11:1]\n    |   |--TYPE -> TYPE [11:1]\n    |   |   `--IDENT -> String [11:1]\n    |   |--IDENT -> s6 [11:8]\n    |   |--ASSIGN -> = [11:11]\n    |   |   `--EXPR -> EXPR [11:13]\n    |   |       `--STRING_LITERAL -> \"\\\\\" [11:13]\n    |   `--SEMI -> ; [11:17]\n    `--RCURLY -> } [12:0]", "author": "nmancus1", "createdAt": "2020-07-30T18:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NTY1OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463195659", "bodyText": "The above strings, printed:\n/home/nick/.jdks/openjdk-14.0.1/bin/java --enable-preview -javaagent:/home/nick/.local/share/JetBrains/Toolbox/apps/IDEA-C/ch-0/201.8538.31/lib/idea_rt.jar=46221:/home/nick/.local/share/JetBrains/Toolbox/apps/IDEA-C/ch-0/201.8538.31/bin -Dfile.encoding=UTF-8 -classpath /home/nick/Desktop/full-record-grammar/out/production/check-updates TestClass\nTextBlocks:\n\\n\n\n\n\\\nString literals:\n\\n\n\n\n\\", "author": "nmancus1", "createdAt": "2020-07-30T18:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNDkyMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463634923", "bodyText": "parser should not escape anything, all should be as is in file. Yes, we have hard choice with invisible \"\\n\" symbol that we should make visible in result string.\n@nmancus1 , please create simple use cases in input file\nString s = \"\"\"\n                     \\u000D\"\"\"\nString s1 = \"\"\"\n                     \\n\"\"\"\nString s2 = \"\"\"\n                     \\n\n                  \"\"\"\n\nand lets look on AST,\nno matter what we will decide, this are good inputs to stay forever.", "author": "romani", "createdAt": "2020-07-31T14:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNjI5OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463636298", "bodyText": "it seems to me \\ should be printed as \\\n\nplease add also this to inputs.\nWe should not escape anything (only invisible '\\n' is excpetion)", "author": "romani", "createdAt": "2020-07-31T14:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1MjUwMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463652503", "bodyText": "Inputs are updated.", "author": "nmancus1", "createdAt": "2020-07-31T14:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng=="}], "type": "inlineReview"}, {"oid": "2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "url": "https://github.com/checkstyle/checkstyle/commit/2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-30T05:59:48Z", "type": "forcePushed"}, {"oid": "5dde91171e358c940e8dc2542dead994f65df420", "url": "https://github.com/checkstyle/checkstyle/commit/5dde91171e358c940e8dc2542dead994f65df420", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-31T14:30:55Z", "type": "forcePushed"}, {"oid": "471e597f36396fa77447c31ef60cff70e3b430cf", "url": "https://github.com/checkstyle/checkstyle/commit/471e597f36396fa77447c31ef60cff70e3b430cf", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-31T14:43:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1OTY5OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463659698", "bodyText": "looks good, I really hope visualization of \"\\n\" if issue (by design) of our AST printer, and I agree it is confusing, but it is ok.\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [161:19]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\u000D [161:22]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [162:22]\n\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [163:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\n [163:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [164:18]\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [165:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\n\\n                 [165:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [167:16]\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [168:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\\\n                 [168:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [170:16]", "author": "romani", "createdAt": "2020-07-31T14:54:44Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14TextBlocks.java", "diffHunk": "@@ -84,4 +156,17 @@ public String getEscapedSpaces() {\n             line 2\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\\s\n             \"\"\";\n     }\n+\n+    void lineTerminators() {\n+        String s = \"\"\"\n+                \\u000D\"\"\";\n+        String s1 = \"\"\"\n+                \\n\"\"\";\n+        String s2 = \"\"\"\n+                \\n\n+                \"\"\";\n+        String s3 = \"\"\"\n+                \\\n+                \"\"\";", "originalCommit": "471e597f36396fa77447c31ef60cff70e3b430cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "893151e903514ca017ea26eca008253ec1fe1f69", "url": "https://github.com/checkstyle/checkstyle/commit/893151e903514ca017ea26eca008253ec1fe1f69", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-31T17:15:00Z", "type": "commit"}, {"oid": "893151e903514ca017ea26eca008253ec1fe1f69", "url": "https://github.com/checkstyle/checkstyle/commit/893151e903514ca017ea26eca008253ec1fe1f69", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-31T17:15:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMzExMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463733113", "bodyText": "@romani @rnveach is there anything else I can show here?\nInput file: https://github.com/checkstyle/checkstyle/pull/8327/files#diff-8d67fe819d47f9a4758b17f98b092100", "author": "nmancus1", "createdAt": "2020-07-31T17:18:34Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinterTest.java", "diffHunk": "@@ -154,4 +155,28 @@ public void testAstTreeSingleLineComments() throws Exception {\n                 JavaParser.Options.WITH_COMMENTS);\n     }\n \n+    @Test\n+    public void testTextBlocksEscapesAreOneChar() throws Exception {\n+        final String inputFilename = \"InputAstTreeStringPrinterTextBlocksEscapesAreOneChar.java\";\n+        final DetailAST ast = JavaParser.parseFile(\n+                new File(getNonCompilablePath(inputFilename)), JavaParser.Options.WITHOUT_COMMENTS);\n+\n+        final DetailAST objectBlockNode = ast.findFirstToken(TokenTypes.OBJBLOCK);\n+        final DetailAST variableDefNode = objectBlockNode.findFirstToken(TokenTypes.VARIABLE_DEF);\n+        final DetailAST textBlockContentNode =\n+                variableDefNode.findFirstToken(TokenTypes.ASSIGN)\n+                        .findFirstToken(TokenTypes.EXPR)\n+                        .getFirstChild()\n+                        .findFirstToken(TokenTypes.TEXT_BLOCK_CONTENT);\n+\n+        final String textBlockContent = textBlockContentNode.getText();\n+\n+        assertThat(\"Text block content contains \\\"\\\\n\\\" as substring\",\n+                textBlockContent.contains(\"\\\\n\"), is(false));\n+        assertThat(\"Text block content line terminator is counted as one character\",\n+                textBlockContent.length(), is(1));\n+        assertThat(\"Text block content contains only a line terminator\",\n+                textBlockContent.matches(\"\\n\"), is(true));\n+    }", "originalCommit": "893151e903514ca017ea26eca008253ec1fe1f69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNjU4Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463806587", "bodyText": "I am satisfied.\n\\n is escaping of AST printer.", "author": "romani", "createdAt": "2020-07-31T20:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMzExMw=="}], "type": "inlineReview"}]}