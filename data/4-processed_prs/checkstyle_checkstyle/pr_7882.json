{"pr_number": 7882, "pr_title": "Issue #6988: Sort XPath Results in Document Order", "pr_createdAt": "2020-03-17T15:10:29Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/7882", "timeline": [{"oid": "9a59bcef22a298d2cea76d34bc07b73f602c9870", "url": "https://github.com/checkstyle/checkstyle/commit/9a59bcef22a298d2cea76d34bc07b73f602c9870", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-17T17:03:42Z", "type": "forcePushed"}, {"oid": "d4692760829471270e7e16258d957e282bc2dc2e", "url": "https://github.com/checkstyle/checkstyle/commit/d4692760829471270e7e16258d957e282bc2dc2e", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-17T23:50:34Z", "type": "forcePushed"}, {"oid": "8f299ad249e59706cc2e2194d053d88ca5bafb4a", "url": "https://github.com/checkstyle/checkstyle/commit/8f299ad249e59706cc2e2194d053d88ca5bafb4a", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-18T00:06:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTkyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394729922", "bodyText": "@gaurabdg @timurt How often is compareOrder called for different queries? Is it a big impact that we have to calculate the depth each time it is called?", "author": "rnveach", "createdAt": "2020-03-19T01:02:54Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -81,6 +81,23 @@ public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst)\n         createChildren();\n     }\n \n+    /**\n+     * Compares current object with specified for order.\n+     * @param other another {@code NodeInfo} object\n+     * @return number representing order of current object to specified one\n+     */\n+    @Override\n+    public int compareOrder(NodeInfo other) {", "originalCommit": "8f299ad249e59706cc2e2194d053d88ca5bafb4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MzgyMw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394793823", "bodyText": "@rnveach I can kind of cache the depth value for each node, as the two compared nodes least common ancestor is very near(because this ordering is required for xpath queries for nearby nodes mostly)  and will save a lot of computations.", "author": "gaurabdg", "createdAt": "2020-03-19T05:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5Njk4MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394896981", "bodyText": "Done", "author": "gaurabdg", "createdAt": "2020-03-19T09:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzOTUwMw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r395039503", "bodyText": "So I was right with my concern that it is called many times for 1 query?\nI don't want to create more caches if they aren't really needed.", "author": "rnveach", "createdAt": "2020-03-19T13:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1OTQzNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r395059435", "bodyText": "Yes, it will be called for each xpath result ordering", "author": "gaurabdg", "createdAt": "2020-03-19T14:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODc2OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r403438769", "bodyText": "The order of cousins will be wrong. Consider\nCLASS_DEF\n   METHOD_DEF1\n       VARIABLE_DEF1-1\n       VARIABLE_DEF1-2\n   METHOD_DEF2\n       VARIABLE_DEF2-1\n       VARIABLE_DEF2-2\n\nThe list of nodes for the xpath \"//VARIABLE_DEF\" will be VARIABLE_DEF1-1, VARIABLE_DEF2-1,VARIABLE_DEF2-2,VARIABLE_DEF1-2.\nWe still need some sort of recursion here. When the depth is different, the result is clear.\nWhen the depth matches, there should be a check for order for the parent nodes (in case both nodes do not belong to the same parent).", "author": "pbludov", "createdAt": "2020-04-04T07:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMDAzNA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394730034", "bodyText": "Shouldn't this line be part of if (other != null) {?", "author": "rnveach", "createdAt": "2020-03-19T01:03:18Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -81,6 +81,23 @@ public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst)\n         createChildren();\n     }\n \n+    /**\n+     * Compares current object with specified for order.\n+     * @param other another {@code NodeInfo} object\n+     * @return number representing order of current object to specified one\n+     */\n+    @Override\n+    public int compareOrder(NodeInfo other) {\n+        int result = 0;\n+        if (other != null) {\n+            result = getRootDepth(this) - getRootDepth(other);\n+        }\n+        if (result == 0 && other instanceof ElementNode) {", "originalCommit": "8f299ad249e59706cc2e2194d053d88ca5bafb4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NDkxMA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394794910", "bodyText": "Spotbugs gave a warning for unchecked casting for that line, so to resolve that I put the check just before that, but I'll put them together now.", "author": "gaurabdg", "createdAt": "2020-03-19T05:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMDAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2NDc4Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394864783", "bodyText": "done", "author": "gaurabdg", "createdAt": "2020-03-19T08:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMDAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjUzOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394732539", "bodyText": "Why is there a check for null? Does this not happen naturally?", "author": "rnveach", "createdAt": "2020-03-19T01:07:36Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/ElementNodeTest.java", "diffHunk": "@@ -58,6 +58,14 @@ public void init() throws Exception {\n         rootNode = new RootNode(rootAst);\n     }\n \n+    @Test\n+    public void testCompareOrderWrongInstance() throws Exception {\n+        final String xpath = \"//OBJBLOCK\";\n+        final List<NodeInfo> nodes = getXpathItems(xpath, rootNode);\n+        final int result = nodes.get(0).compareOrder(null);", "originalCommit": "8f299ad249e59706cc2e2194d053d88ca5bafb4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NTEyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394795122", "bodyText": "No, naturally such a case doesn't arise, so this was added to achieve 100% branch coverage.", "author": "gaurabdg", "createdAt": "2020-03-19T05:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNzQ4Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r395037487", "bodyText": "If null isn't natural and doc doesn't say it can send a null then why do we have a check for it. I assume the branch was the null check? If it can never be null then the check is pointless and can be removed.", "author": "rnveach", "createdAt": "2020-03-19T13:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3ODYwOA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r395078608", "bodyText": "the if (other instanceof ElementNode) is required by Spotbugs otherwise it will throw an unchecked cast error for ((ElementNode) other).indexAmongSiblings. So, I will replace null with rootNode object instead to fail it and cover the branch.", "author": "gaurabdg", "createdAt": "2020-03-19T14:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzY1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r395143654", "bodyText": "Done", "author": "gaurabdg", "createdAt": "2020-03-19T16:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjUzOQ=="}], "type": "inlineReview"}, {"oid": "c54ebad102e47d9766bf8778495db0f4badc9f33", "url": "https://github.com/checkstyle/checkstyle/commit/c54ebad102e47d9766bf8778495db0f4badc9f33", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-19T06:35:08Z", "type": "forcePushed"}, {"oid": "7e688965b6322c2dd4bd287ca0d007f9c4a23cb3", "url": "https://github.com/checkstyle/checkstyle/commit/7e688965b6322c2dd4bd287ca0d007f9c4a23cb3", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-19T09:35:45Z", "type": "forcePushed"}, {"oid": "37f5435b04b1e07164a8399579bb3fecd13aa7f0", "url": "https://github.com/checkstyle/checkstyle/commit/37f5435b04b1e07164a8399579bb3fecd13aa7f0", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-19T09:43:00Z", "type": "forcePushed"}, {"oid": "0d47c369352de47f71dbb133f503a3e8b9c312c9", "url": "https://github.com/checkstyle/checkstyle/commit/0d47c369352de47f71dbb133f503a3e8b9c312c9", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-19T12:59:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzODM0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r395038349", "bodyText": "We are not expecting new items as we are trying to shrink the list. Let me review this before giving more guidance.", "author": "rnveach", "createdAt": "2020-03-19T13:49:25Z", "path": ".ci/pitest.sh", "diffHunk": "@@ -215,6 +215,14 @@ pitest-utils)\n   checkPitestReport \"${ignoredItems[@]}\"\n   ;;\n \n+pitest-xpath)\n+  mvn -e -P$1 clean test org.pitest:pitest-maven:mutationCoverage;\n+  declare -a ignoredItems=(\n+  \"ElementNode.java.html:<td class='covered'><pre><span  class='survived'>            if (parentDepth == -1) {</span></pre></td></tr>\"", "originalCommit": "0d47c369352de47f71dbb133f503a3e8b9c312c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0OTc2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r395049766", "bodyText": "removed conditional - replaced equality check with true \u2192 SURVIVED.\n\nJust on the face, it looks like our tests don't see the benefit of the cache and goes back to directly recounting all the nodes. I don't see any way to make this matter under a normal condition. You will need to create a test specifically for this. Like make 2 nodes, have the parent node have a depth of 9 and count the depth of the child. Since there are only 2 nodes, it will have a count of 2 if recounted, but the actual count will be 10.", "author": "rnveach", "createdAt": "2020-03-19T14:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzODM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NDAyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r395144022", "bodyText": "Done, created a new UT.", "author": "gaurabdg", "createdAt": "2020-03-19T16:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzODM0OQ=="}], "type": "inlineReview"}, {"oid": "a5ed95d2ff887815116704ca787ff28e0fe60976", "url": "https://github.com/checkstyle/checkstyle/commit/a5ed95d2ff887815116704ca787ff28e0fe60976", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-19T16:06:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5MTY1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394491654", "bodyText": "@gaurabdg interesting approach, but can we store this depth inside object to avoid unnecessary calculations", "author": "timurt", "createdAt": "2020-03-18T16:45:54Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -81,6 +81,23 @@ public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst)\n         createChildren();\n     }\n \n+    /**\n+     * Compares current object with specified for order.\n+     * @param other another {@code NodeInfo} object\n+     * @return number representing order of current object to specified one\n+     */\n+    @Override\n+    public int compareOrder(NodeInfo other) {\n+        int result = 0;\n+        if (other != null) {\n+            result = getRootDepth(this) - getRootDepth(other);", "originalCommit": "8f299ad249e59706cc2e2194d053d88ca5bafb4a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5Mzg2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394493865", "bodyText": "Could you also add more tests here\n\ncompare order between two sibling nodes\nparent not with child or even grand child node", "author": "timurt", "createdAt": "2020-03-18T16:49:13Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/ElementNodeTest.java", "diffHunk": "@@ -58,6 +58,14 @@ public void init() throws Exception {\n         rootNode = new RootNode(rootAst);\n     }\n \n+    @Test\n+    public void testCompareOrderWrongInstance() throws Exception {\n+        final String xpath = \"//OBJBLOCK\";\n+        final List<NodeInfo> nodes = getXpathItems(xpath, rootNode);\n+        final int result = nodes.get(0).compareOrder(null);\n+        assertEquals(0, result, \"Expected result wrong\");\n+    }\n+", "originalCommit": "8f299ad249e59706cc2e2194d053d88ca5bafb4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NDgxNg==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r396084816", "bodyText": "@gaurabdg please add tests", "author": "timurt", "createdAt": "2020-03-22T11:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5Mzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4NTU0Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397785543", "bodyText": "@timurt what is the second test exactly?\nI added an ordering test like this, as you requested:\n    @Test\n    public void testNodeOrdering() throws Exception {\n        final String xpath = \"//METHOD_DEF[./IDENT[@text='callSomeMethod']]/SLIST/*\";\n        final List<NodeInfo> nodes = getXpathItems(xpath, rootNode);\n        boolean result = nodes\n                .stream()\n                .sorted(NodeInfo::compareOrder)\n                .collect(Collectors.toList())\n                .equals(nodes);\n        assertTrue(result, \"Ordering Incorrect\");\n    }\n\nLet me know if theres anything else to add before repushing.", "author": "gaurabdg", "createdAt": "2020-03-25T11:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5Mzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNjQwMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397806401", "bodyText": "@gaurabdg\ntests to cover different cases for compareOrder method\nSmth like:\n\ncompare order between parent node and child node\n\nElementNode parent = ...\nElementNode child = ..\nassertEquals(-*x*, parent.compareTo(child));\nassertEquals(*x*, child.compareTo(parent));\n\n\ncompare order between two sibling nodes of same parent node\n\nElementNode parent = ...\nElementNode childOne = ...\nElementNode childTwo = ...\nassertEquals(-*x*, childOne.compareTo(childTwo));\nassertEquals(*x*, childTwo.compareTo(childOne));", "author": "timurt", "createdAt": "2020-03-25T12:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5Mzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMjY2Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397812667", "bodyText": "Okay, siblings one is done in the example provided by me in my previous comment. I'll create the parent-child test", "author": "gaurabdg", "createdAt": "2020-03-25T12:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5Mzg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NjUxMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r394496511", "bodyText": "could you please also one more test, to query many nodes and check that results are sorted in document order,\nsimilar test I made for line/column approach here https://github.com/checkstyle/checkstyle/pull/7485/files#diff-39f05e8712ca7f402d8723874f834436R966", "author": "timurt", "createdAt": "2020-03-18T16:52:54Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/XpathMapperTest.java", "diffHunk": "@@ -946,7 +946,7 @@ public void testQueryElementPrecedingTwo() throws Exception {\n         final DetailAST expectedPackageDefNode = getSiblingByType(rootNode.getUnderlyingNode(),\n                 TokenTypes.PACKAGE_DEF);\n         final DetailAST expectedAnnotationsNode = expectedPackageDefNode.getFirstChild();\n-        final DetailAST[] expected = {expectedAnnotationsNode, expectedPackageDefNode};\n+        final DetailAST[] expected = {expectedPackageDefNode, expectedAnnotationsNode};\n         assertThat(\"Result nodes differ from expected\", actual, equalTo(expected));\n     }\n ", "originalCommit": "8f299ad249e59706cc2e2194d053d88ca5bafb4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NDgzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r396084831", "bodyText": "@gaurabdg please add test", "author": "timurt", "createdAt": "2020-03-22T11:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NjUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0Njk5OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397146999", "bodyText": "@timurt Many such document order tests are present in XpathMapperTest. Do we still need to add tests here?", "author": "gaurabdg", "createdAt": "2020-03-24T13:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NjUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NTYwOA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397185608", "bodyText": "@gaurabdg yes,\nthis test should be a little bit different than the other ones,\nThis test should query many results (you can achieve that using * in your xpath query) and then check that all results are sorted in document order\nYou can ignore token types of the results, but check their line and column numbers are in increasing sequence\nSomething like this\n        final DetailAST[] actual = convertToArray(getXpathItems(xpath, rootNode));\n        for (int i = 1; i < actual.length; i++) {\n            final DetailAST current = actual[i];\n            final DetailAST previous = actual[i - 1];\n\n            assertWithMessage(\"Line number is not in document order\")\n                    .that(previous.getLineNo())\n                    .isGreaterThan(current.getLineNo());\n\n            if (current.getLineNo() == previous.getLineNo()) {\n                assertWithMessage(\"Column number is not in document order\")\n                        .that(previous.getColumnNo())\n                        .isLessThan(current.getColumnNo());\n            }\n        }", "author": "timurt", "createdAt": "2020-03-24T14:16:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NjUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NDgwMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r396084802", "bodyText": "you need to check this.nodeDepth  == -1 and only then starting calculating current depth. Otherwise this method will make extra redundant calculations", "author": "timurt", "createdAt": "2020-03-22T11:52:54Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -154,6 +175,36 @@ public NodeInfo getRoot() {\n         return root;\n     }\n \n+    /**\n+     * Sets Node Depth.\n+     * @param nodeDepth Depth of the Node\n+     */\n+    public void setNodeDepth(int nodeDepth) {\n+        this.nodeDepth = nodeDepth;\n+    }\n+\n+    /**\n+     * Calculates the depth of the node from the root of the tree.\n+     * @return number representing depth of the node\n+     */\n+    public int calcRootDepth() {", "originalCommit": "a5ed95d2ff887815116704ca787ff28e0fe60976", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NTA5MA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r396085090", "bodyText": "@gaurabdg @rnveach\nMy suggestion was - we can set nodeDepth during constructing xpath tree\nnodeDepth will field be of the AbstractNode class\nRootNode.nodeDepth will be zero\nand at this line we will have:\nnodeDepth = parent.nodeDepth + 1;\nand that's all, share your ideas", "author": "timurt", "createdAt": "2020-03-22T11:56:36Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -75,12 +78,30 @@ public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst)\n         this.parent = parent;\n         this.root = root;\n         this.detailAst = detailAst;\n+        nodeDepth = -1;", "originalCommit": "a5ed95d2ff887815116704ca787ff28e0fe60976", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NTg0MA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r396975840", "bodyText": "@timurt @rnveach I didn't know whether to touch other modules or not. It can be done and will be more efficient. So, shall I create a depth attribute of DetailASTImpl class and pass on this.depth + 1 while creating child nodes? Let me know what should be done, meanwhile I'll add the tests", "author": "gaurabdg", "createdAt": "2020-03-24T08:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NTA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2MDYxMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397060611", "bodyText": "@rnveach @gaurabdg\nNo, I am saying about creating depth attribute for AbstractNode class,\nSo my suggestion is to initialize depth attribute during Xpath tree creation process instead of lazy calculations.\nFor example constructor of the ElementNode could be smth like\n public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst) {\n        super(root.getTreeInfo());\n        this.parent = parent;\n        this.root = root;\n        this.detailAst = detailAst;\n        this.nodeDepth = parent.nodeDepth + 1; // <-- You can use parent's height\n        text = TokenUtil.getTokenName(detailAst.getType());\n        indexAmongSiblings = parent.getChildren().size();\n        createTextAttribute();\n        createChildren();\n    }\n\nXpath tree construction is recursive DFS, so height of every child of the node is larger by one than the parent height\nWhat do you think about it?", "author": "timurt", "createdAt": "2020-03-24T10:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NTA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3OTc2OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397079769", "bodyText": "@timurt I understand what you are saying and also agree. But the tree contruction is happening and being returned as DetailAST right? So, the depth+1 passing needs to happen there.\nAlso, while recursively browsing the code for tree generation I see the RootNode is being passed on to here, at XPathUtil\n    /**\n     * Returns xpath query results on file as string.\n     *\n     * @param xpath query to evaluate\n     * @param file file to run on\n     * @return all results as string separated by delimiter\n     * @throws CheckstyleException if some parsing error happens\n     * @throws IOException if an error occurs\n     */\n    public static String printXpathBranch(String xpath, File file) throws CheckstyleException,\n            IOException {\n        final XPathEvaluator xpathEvaluator = new XPathEvaluator();\n        try {\n            final RootNode rootNode = new RootNode(JavaParser.parseFile(file,\n                JavaParser.Options.WITH_COMMENTS));\n            final XPathExpression xpathExpression = xpathEvaluator.createExpression(xpath);\n            final XPathDynamicContext xpathDynamicContext =\n                xpathExpression.createDynamicContext(rootNode);\n            final List<Item<?>> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n            return matchingItems.stream()\n                .map(item -> ((AbstractNode) item).getUnderlyingNode())\n                .map(AstTreeStringPrinter::printBranch)\n                .collect(Collectors.joining(DELIMITER));\n        }\n        catch (XPathException ex) {\n            final String errMsg = String.format(Locale.ROOT,\n                \"Error during evaluation for xpath: %s, file: %s\", xpath, file.getCanonicalPath());\n            throw new CheckstyleException(errMsg, ex);\n        }\n    }\n\nSo, is the tree is gettng created by the saxon libraries? It would be really helpful if you could tell me about the tree creation flow.", "author": "gaurabdg", "createdAt": "2020-03-24T11:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NTA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA5OTQxMw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397099413", "bodyText": "@gaurabdg\nWe have two trees:\n\none is AST tree with DetailAST objects, used by almost all checks to validate rules\nanother one is Xpath tree with classes implementing NodeInfo(saxon) interface, this tree is used only for querying nodes using xpath queries\n\nXpath tree nodes have reference to corresponding AST tree nodes\nConstruction of the xpath tree starts with RootNode, as argument RootNode constructor takes root DetailAst object, and recursively traverse AST tree and creates corresponding Xpath nodes\nFor example for SuppressionXpathFilter, we create RootNode here,\nViolation event TreeWalkerAuditEvent itself contains reference to rootAst, so we can create Xpath tree from it\nis it clear? I know it is not obvious, so please ask questions", "author": "timurt", "createdAt": "2020-03-24T12:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NTA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExNDQ1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r397114458", "bodyText": "@timurt Thanks a lot for clarifying. I will ask further as and when required while implementing the new approach.", "author": "gaurabdg", "createdAt": "2020-03-24T12:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NTA5MA=="}], "type": "inlineReview"}, {"oid": "0b9425aae9c3a313df18db145b5dc6bce1819d91", "url": "https://github.com/checkstyle/checkstyle/commit/0b9425aae9c3a313df18db145b5dc6bce1819d91", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-25T15:32:35Z", "type": "forcePushed"}, {"oid": "9b9f4c8c58527172b3803ec62a734056ad080da5", "url": "https://github.com/checkstyle/checkstyle/commit/9b9f4c8c58527172b3803ec62a734056ad080da5", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-25T16:00:36Z", "type": "forcePushed"}, {"oid": "019c8cf427eddbf12b9b808d7075ee51665292cc", "url": "https://github.com/checkstyle/checkstyle/commit/019c8cf427eddbf12b9b808d7075ee51665292cc", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-25T16:20:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1OTk0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r398059947", "bodyText": "I am not sure ElementNodeTest is appropriate class for this method, please move it to XpathMapperTest", "author": "timurt", "createdAt": "2020-03-25T18:00:04Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/ElementNodeTest.java", "diffHunk": "@@ -58,6 +59,61 @@ public void init() throws Exception {\n         rootNode = new RootNode(rootAst);\n     }\n \n+    @Test\n+    public void testNodeOrdering() throws Exception {", "originalCommit": "019c8cf427eddbf12b9b808d7075ee51665292cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDI1Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r398080257", "bodyText": "I executed this test with different compareOrder method implementation, it always passes, it is not ok\nAs far as I understand this depth approach, it should be fully correlate with line/column ordering.\nIt means for all nodes in getXpathItems(xpath, rootNode); the following condition is true:\nnode[i].lineNumber < node[j].lineNumber or (node[i].lineNumber = node[j].lineNumber and node[i].columnNumber < node[j].columnNumber) where i < j.\nIt is easier to write because all NodeInfo subclasses implement getLineNumber(), getColumnNumber() using real DetailAst values.\nThere is more difficult way to write this test:\n\nget results from getXpathItems(xpath, rootNode);\nconvert them to DetailAST[] using convertToArray(List<NodeInfo> nodes) method\nget rootAst from RootNode\ntraverse rootAst with DFS and check that all elements DetailAST[] appear in exact same order", "author": "timurt", "createdAt": "2020-03-25T18:31:12Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/ElementNodeTest.java", "diffHunk": "@@ -58,6 +59,61 @@ public void init() throws Exception {\n         rootNode = new RootNode(rootAst);\n     }\n \n+    @Test\n+    public void testNodeOrdering() throws Exception {\n+        final String xpath = \"//METHOD_DEF[./IDENT[@text='callSomeMethod']]/SLIST/*\";\n+        final List<NodeInfo> nodes = getXpathItems(xpath, rootNode);\n+        final boolean result = nodes", "originalCommit": "019c8cf427eddbf12b9b808d7075ee51665292cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MTY4Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r398471686", "bodyText": "Okay, I'll make the changes", "author": "gaurabdg", "createdAt": "2020-03-26T10:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDI1Nw=="}], "type": "inlineReview"}, {"oid": "e8e3057bc39059585ee17694403ee3b50db5ed96", "url": "https://github.com/checkstyle/checkstyle/commit/e8e3057bc39059585ee17694403ee3b50db5ed96", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-26T10:28:16Z", "type": "forcePushed"}, {"oid": "dfb78626b609dff4bfb954f5f1729004bb91d697", "url": "https://github.com/checkstyle/checkstyle/commit/dfb78626b609dff4bfb954f5f1729004bb91d697", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-26T13:57:55Z", "type": "forcePushed"}, {"oid": "a9b8a62ba814e885353598e147f2a42afee90484", "url": "https://github.com/checkstyle/checkstyle/commit/a9b8a62ba814e885353598e147f2a42afee90484", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-26T14:17:13Z", "type": "forcePushed"}, {"oid": "2ed348be8b603c64b3c54d548c913e9f4e4afa0a", "url": "https://github.com/checkstyle/checkstyle/commit/2ed348be8b603c64b3c54d548c913e9f4e4afa0a", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-26T17:23:06Z", "type": "forcePushed"}, {"oid": "0192c262564c14d2df40bd7e68ab688c1edd537f", "url": "https://github.com/checkstyle/checkstyle/commit/0192c262564c14d2df40bd7e68ab688c1edd537f", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-26T23:13:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzI0MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r401153241", "bodyText": "@gaurabdg\nXpathMapperTest should contain tests those test different xpath queries, like you did in testNodeOrdering()\nHere you test compareOrder method of ElementNode class and there is no xpath query, so I would suggest to move this test to ElementNodeTest", "author": "timurt", "createdAt": "2020-03-31T19:15:21Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/XpathMapperTest.java", "diffHunk": "@@ -45,6 +48,65 @@ protected String getPackageLocation() {\n         return \"com/puppycrawl/tools/checkstyle/xpath/xpathmapper\";\n     }\n \n+    @Test\n+    public void testNodeOrdering() throws Exception {\n+        final String xpath = \"//METHOD_DEF[./IDENT[@text='callSomeMethod']]/SLIST/*\";\n+        final RootNode rootNode = getRootNode(\"InputXpathMapperAst.java\");\n+        final List<NodeInfo> nodes = getXpathItems(xpath, rootNode);\n+        for (int i = 1; i < nodes.size(); i++) {\n+            final NodeInfo curr = nodes.get(i);\n+            final NodeInfo prev = nodes.get(i - 1);\n+\n+            if (curr.getLineNumber() == prev.getLineNumber()) {\n+                assertWithMessage(\"Column number is not in document order\")\n+                    .that(curr.getColumnNumber())\n+                    .isGreaterThan(prev.getColumnNumber());\n+            }\n+            else {\n+                assertWithMessage(\"Line number is not in document order\")\n+                    .that(curr.getLineNumber())\n+                    .isGreaterThan(prev.getLineNumber());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testParentChildOrdering() throws Exception {", "originalCommit": "0192c262564c14d2df40bd7e68ab688c1edd537f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2Mjc0OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r401162748", "bodyText": "Okay, sure", "author": "gaurabdg", "createdAt": "2020-03-31T19:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzMwNw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r401153307", "bodyText": "same here", "author": "timurt", "createdAt": "2020-03-31T19:15:29Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/XpathMapperTest.java", "diffHunk": "@@ -45,6 +48,65 @@ protected String getPackageLocation() {\n         return \"com/puppycrawl/tools/checkstyle/xpath/xpathmapper\";\n     }\n \n+    @Test\n+    public void testNodeOrdering() throws Exception {\n+        final String xpath = \"//METHOD_DEF[./IDENT[@text='callSomeMethod']]/SLIST/*\";\n+        final RootNode rootNode = getRootNode(\"InputXpathMapperAst.java\");\n+        final List<NodeInfo> nodes = getXpathItems(xpath, rootNode);\n+        for (int i = 1; i < nodes.size(); i++) {\n+            final NodeInfo curr = nodes.get(i);\n+            final NodeInfo prev = nodes.get(i - 1);\n+\n+            if (curr.getLineNumber() == prev.getLineNumber()) {\n+                assertWithMessage(\"Column number is not in document order\")\n+                    .that(curr.getColumnNumber())\n+                    .isGreaterThan(prev.getColumnNumber());\n+            }\n+            else {\n+                assertWithMessage(\"Line number is not in document order\")\n+                    .that(curr.getLineNumber())\n+                    .isGreaterThan(prev.getLineNumber());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testParentChildOrdering() throws Exception {\n+        final RootNode rootNode = getRootNode(\"InputXpathMapperAst.java\");\n+        final DetailAstImpl detailAST = new DetailAstImpl();\n+        detailAST.setType(TokenTypes.VARIABLE_DEF);\n+\n+        final DetailAstImpl parentAST = new DetailAstImpl();\n+        parentAST.setFirstChild(detailAST);\n+        parentAST.setType(TokenTypes.METHOD_DEF);\n+\n+        final AbstractNode parentNode = new ElementNode(rootNode, rootNode, parentAST);\n+        final AbstractNode childNode = new ElementNode(rootNode, parentNode, detailAST);\n+        assertEquals(-1, parentNode.compareOrder(childNode), \"Incorrect ordering value\");\n+        assertEquals(1, childNode.compareOrder(parentNode), \"Incorrect ordering value\");\n+    }\n+\n+    @Test\n+    public void testSiblingsOrdering() throws Exception {", "originalCommit": "0192c262564c14d2df40bd7e68ab688c1edd537f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MTUwOA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r401171508", "bodyText": "Done, @timurt please review", "author": "gaurabdg", "createdAt": "2020-03-31T19:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzMwNw=="}], "type": "inlineReview"}, {"oid": "34b3fd8ee0c12ac6fd606a770065e9facb20de58", "url": "https://github.com/checkstyle/checkstyle/commit/34b3fd8ee0c12ac6fd606a770065e9facb20de58", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-31T19:45:40Z", "type": "forcePushed"}, {"oid": "e16716ea0b377d31ae4a755c1f081cb0d1cab848", "url": "https://github.com/checkstyle/checkstyle/commit/e16716ea0b377d31ae4a755c1f081cb0d1cab848", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-03-31T19:54:58Z", "type": "forcePushed"}, {"oid": "1db5280cf15c0cc224e0246237627be0b26c93d4", "url": "https://github.com/checkstyle/checkstyle/commit/1db5280cf15c0cc224e0246237627be0b26c93d4", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-01T14:44:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODA0MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r403438041", "bodyText": "This test fails for the xpath \"//METHOD_DEF/SLIST/*\"", "author": "pbludov", "createdAt": "2020-04-04T07:32:44Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/XpathMapperTest.java", "diffHunk": "@@ -45,6 +46,28 @@ protected String getPackageLocation() {\n         return \"com/puppycrawl/tools/checkstyle/xpath/xpathmapper\";\n     }\n \n+    @Test\n+    public void testNodeOrdering() throws Exception {\n+        final String xpath = \"//METHOD_DEF[./IDENT[@text='callSomeMethod']]/SLIST/*\";", "originalCommit": "1db5280cf15c0cc224e0246237627be0b26c93d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2MjUxMA==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r403462510", "bodyText": "How about more depth?\nCLASS_DEF0\n  CLASS_DEF1\n     METHOD_DEF1-1\n         VARIABLE_DEF1-1-1\n         VARIABLE_DEF1-1-2\n     METHOD_DEF1-2\n         VARIABLE_DEF1-2-1\n         VARIABLE_DEF1-2-2\n  CLASS_DEF2\n     METHOD_DEF2-1\n         VARIABLE_DEF2-1-1\n         VARIABLE_DEF2-1-2\n     METHOD_DEF2-2\n         VARIABLE_DEF2-2-1\n         VARIABLE_DEF2-2-2\n\nNow all VARIABLE_DEFs are on 4th depth, their parents on 3rd depth.\nWe can not just compare order of METHOD_DEFs, we should go up till a common parent node.", "author": "pbludov", "createdAt": "2020-04-04T12:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3MTc5MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r403471791", "bodyText": "@pbludov When the depth is same I have computed their common ancestor's indexAmongSiblings. Since the children to be compared are at the same level each call will have a time complexity of O(heightOfTree) i.e., logarithmic time and hence won't be much heavy.", "author": "gaurabdg", "createdAt": "2020-04-04T13:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3MTgyNg==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r403471826", "bodyText": "@pbludov Please review.", "author": "gaurabdg", "createdAt": "2020-04-04T13:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3MzQ0Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r403473446", "bodyText": "How about more depth?\nCLASS_DEF0\n  CLASS_DEF1\n     METHOD_DEF1-1\n         VARIABLE_DEF1-1-1\n         VARIABLE_DEF1-1-2\n     METHOD_DEF1-2\n         VARIABLE_DEF1-2-1\n         VARIABLE_DEF1-2-2\n  CLASS_DEF2\n     METHOD_DEF2-1\n         VARIABLE_DEF2-1-1\n         VARIABLE_DEF2-1-2\n     METHOD_DEF2-2\n         VARIABLE_DEF2-2-1\n         VARIABLE_DEF2-2-2\n\nNow all VARIABLE_DEFs are on 4th depth, their parents on 3rd depth.\nWe can not just compare order of METHOD_DEFs, we should go up till a common parent node.\n\nYes, I realized this case and deleted my comment just after a while and implemented the LCA approach.", "author": "gaurabdg", "createdAt": "2020-04-04T14:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODA0MQ=="}], "type": "inlineReview"}, {"oid": "a1ede9ea147db3229fb09d388191a4d634199ca9", "url": "https://github.com/checkstyle/checkstyle/commit/a1ede9ea147db3229fb09d388191a4d634199ca9", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-04T13:08:55Z", "type": "forcePushed"}, {"oid": "ca7398893c1a57f85262e3a878dcf453d4a46ac1", "url": "https://github.com/checkstyle/checkstyle/commit/ca7398893c1a57f85262e3a878dcf453d4a46ac1", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-04T13:29:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxMjYyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r407512622", "bodyText": "We check instance to be ElementNode but do a cast to AbstractNode. Shouldn't both be the same class?", "author": "rnveach", "createdAt": "2020-04-13T14:39:52Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -77,10 +77,45 @@ public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst)\n         this.detailAst = detailAst;\n         text = TokenUtil.getTokenName(detailAst.getType());\n         indexAmongSiblings = parent.getChildren().size();\n+        setDepth(parent.getDepth() + 1);\n         createTextAttribute();\n         createChildren();\n     }\n \n+    /**\n+     * Compares current object with specified for order.\n+     * @param other another {@code NodeInfo} object\n+     * @return number representing order of current object to specified one\n+     */\n+    @Override\n+    public int compareOrder(NodeInfo other) {\n+        int result = 0;\n+        if (other instanceof ElementNode) {\n+            result = getDepth() - ((AbstractNode) other).getDepth();", "originalCommit": "ca7398893c1a57f85262e3a878dcf453d4a46ac1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NTk3OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r407595979", "bodyText": "@rnveach Yes, you are right, I forgot to change after a few changes in other code.\nI've corrected it.", "author": "gaurabdg", "createdAt": "2020-04-13T17:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxMjYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyMTY3Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r408521676", "bodyText": "@gaurabdg It looks like IntelliJ wants both to be AbstractNode. I don't see any parts of the code requiring it be ElementNode.\nhttps://teamcity.jetbrains.com/viewLog.html?buildId=2866738&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsPullRequest", "author": "rnveach", "createdAt": "2020-04-15T01:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxMjYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1NzE2Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7882#discussion_r409857163", "bodyText": "Done.", "author": "gaurabdg", "createdAt": "2020-04-16T21:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxMjYyMg=="}], "type": "inlineReview"}, {"oid": "2497bcf5980fd851ab424238693293e0991314ed", "url": "https://github.com/checkstyle/checkstyle/commit/2497bcf5980fd851ab424238693293e0991314ed", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-13T17:07:42Z", "type": "forcePushed"}, {"oid": "5cb1e87e446de9ee6380004f4702103be7112ea3", "url": "https://github.com/checkstyle/checkstyle/commit/5cb1e87e446de9ee6380004f4702103be7112ea3", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-16T21:21:18Z", "type": "forcePushed"}, {"oid": "2f611cc81c02a70aba44c0a87de6a1bd6d2e6992", "url": "https://github.com/checkstyle/checkstyle/commit/2f611cc81c02a70aba44c0a87de6a1bd6d2e6992", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-16T21:25:17Z", "type": "forcePushed"}, {"oid": "1b7aec062d6e506892e9395f0ea5c71faeb180c3", "url": "https://github.com/checkstyle/checkstyle/commit/1b7aec062d6e506892e9395f0ea5c71faeb180c3", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-17T08:28:57Z", "type": "forcePushed"}, {"oid": "74aa198bb8e5b3e41a7c81b121503a780ce619b0", "url": "https://github.com/checkstyle/checkstyle/commit/74aa198bb8e5b3e41a7c81b121503a780ce619b0", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-17T08:36:37Z", "type": "forcePushed"}, {"oid": "4cfdcaf060937dced01b80f8af19bda700343acc", "url": "https://github.com/checkstyle/checkstyle/commit/4cfdcaf060937dced01b80f8af19bda700343acc", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-17T14:20:10Z", "type": "commit"}, {"oid": "4cfdcaf060937dced01b80f8af19bda700343acc", "url": "https://github.com/checkstyle/checkstyle/commit/4cfdcaf060937dced01b80f8af19bda700343acc", "message": "Issue #6988: Sort XPath results in Document Order", "committedDate": "2020-04-17T14:20:10Z", "type": "forcePushed"}]}