{"pr_number": 8783, "pr_title": "Issue #8771: Improve code coverage for metadata generator classes - 1", "pr_createdAt": "2020-09-03T21:50:04Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8783", "timeline": [{"oid": "1e9a819167fa3f44da7e770149f6188deeb01f70", "url": "https://github.com/checkstyle/checkstyle/commit/1e9a819167fa3f44da7e770149f6188deeb01f70", "message": "Issue #8771: Improve code coverage for metadata generator classes", "committedDate": "2020-09-03T21:55:48Z", "type": "forcePushed"}, {"oid": "84b52bfda10e05bf194af3a79376345dcbe24593", "url": "https://github.com/checkstyle/checkstyle/commit/84b52bfda10e05bf194af3a79376345dcbe24593", "message": "Issue #8771: Improve code coverage for metadata generator classes", "committedDate": "2020-09-03T22:44:08Z", "type": "forcePushed"}, {"oid": "893a69304aca587831e947389113d228a03d069a", "url": "https://github.com/checkstyle/checkstyle/commit/893a69304aca587831e947389113d228a03d069a", "message": "Issue #8771: Improve code coverage for metadata generator classes", "committedDate": "2020-09-03T23:01:24Z", "type": "forcePushed"}, {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "url": "https://github.com/checkstyle/checkstyle/commit/0208e8ae5823edee26b6d49c02ab2b196f24f270", "message": "Issue #8771: Improve code coverage for metadata generator classes", "committedDate": "2020-09-04T06:33:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4OTczMA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483489730", "bodyText": "slash -> slashIdx\npackge typo, packageName or something like this is better", "author": "strkkk", "createdAt": "2020-09-04T09:05:52Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java", "diffHunk": "@@ -180,7 +180,9 @@ private static void verifyInputFile(Map<String, List<String>> allTests, boolean\n             // moved\n             final String folderPath = packge;\n             slash = packge.lastIndexOf(File.separatorChar);\n-            packge = path.substring(0, slash);\n+            if (slash != -1) {\n+                packge = path.substring(0, slash);", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTI0NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949244", "bodyText": "Not part of my addition anymore, I have fixed the logic", "author": "gaurabdg", "createdAt": "2020-09-05T13:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4OTczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjUxMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483492512", "bodyText": "in case you skip assertion with this flag, all method logic above does not make sense, you can just do not invoke this method if flag is true.", "author": "strkkk", "createdAt": "2020-09-04T09:10:58Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java", "diffHunk": "@@ -191,9 +193,11 @@ private static void verifyInputFile(Map<String, List<String>> allTests, boolean\n             }\n         }\n \n-        assertTrue(found, \"Resource must be named after a Test like 'InputMyCustomCase.java' \"\n-                + \"and be in the sub-package of the test like 'mycustom' \"\n-                + \"for test 'MyCustomCheckTest': \" + path);\n+        if (!skipFileNaming) {", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTIyOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949228", "bodyText": "changed", "author": "gaurabdg", "createdAt": "2020-09-05T13:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk2MDc1Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483960756", "bodyText": "This condition make checkInputMatchCorrectFileStructure(classes, folderPath, skipFileNaming illogical as  skipFileNaming is used inside, but never would be true", "author": "romani", "createdAt": "2020-09-05T15:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjY0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r484432649", "bodyText": "Reverted", "author": "gaurabdg", "createdAt": "2020-09-07T13:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483492908", "bodyText": "\".DS_Store\" what is this file?", "author": "strkkk", "createdAt": "2020-09-04T09:11:40Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java", "diffHunk": "@@ -249,7 +253,8 @@ private static boolean shouldSkipInputFileNameCheck(String path, String fileName\n                 // special directory for files that can't be renamed or are secondary inputs\n                 || path.contains(File.separatorChar + \"inputs\" + File.separatorChar)\n                 // all inputs must start with 'messages'\n-                || path.contains(File.separatorChar + \"translation\" + File.separatorChar);\n+                || path.contains(File.separatorChar + \"translation\" + File.separatorChar)\n+                || \".DS_Store\".equals(fileName);", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTk2NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483601964", "bodyText": "It is file from Mac OS", "author": "romani", "createdAt": "2020-09-04T13:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyODEzNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483628137", "bodyText": "may be it is better to exclude all files with names that start with dot?", "author": "strkkk", "createdAt": "2020-09-04T13:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MDIzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483650231", "bodyText": "I agree.", "author": "romani", "createdAt": "2020-09-04T14:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTIxOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949219", "bodyText": "done", "author": "gaurabdg", "createdAt": "2020-09-05T13:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk2MDYzMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483960632", "bodyText": "@gaurabdg , please remove this line, after some thinking ..... it HACK. We should not allow users to create unexpected files in repo and treat it as ok.", "author": "romani", "createdAt": "2020-09-05T15:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjkyNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r484432924", "bodyText": "It was changed to files starting with ., as merged in master", "author": "gaurabdg", "createdAt": "2020-09-07T13:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5Mzg3Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483493876", "bodyText": "why do you use existing check instead of creating some mock check? it can be confusing", "author": "strkkk", "createdAt": "2020-09-04T09:13:26Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/NoCodeInFileCheck.java", "diffHunk": "@@ -0,0 +1,79 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+/**\n+ * <p>\n+ * Checks whether file contains code. Files which are considered to have no code:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * File with no text\n+ * </li>\n+ * <li>\n+ * File with single line comment(s)\n+ * </li>\n+ * <li>\n+ * File with a multi line comment(s).\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"NoCodeInFile\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <p>\n+ * Content of the files:\n+ * </p>\n+ * <pre>\n+ * // single line comment // violation\n+ * </pre>\n+ * <pre>\n+ * /* // violation\n+ *  block comment\n+ * *&#47;\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code nocode.in.file}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.33\n+ */\n+@StatelessCheck\n+public abstract class NoCodeInFileCheck extends AbstractCheck {", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0ODk1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483648954", "bodyText": "please name it like InputNoCodeInFile to have some reference to existing Check but not that significant.", "author": "romani", "createdAt": "2020-09-04T14:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5Mzg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTIxNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949216", "bodyText": "done", "author": "gaurabdg", "createdAt": "2020-09-05T13:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5Mzg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NDA0NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483494044", "bodyText": "same here and other files below", "author": "strkkk", "createdAt": "2020-09-04T09:13:43Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/annotation/AnnotationUseStyleCheck.java", "diffHunk": "@@ -0,0 +1,166 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks.annotation;\n+\n+import java.util.Locale;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks the style of elements in annotations.\n+ * </p>\n+ * <p>\n+ * Annotations have three element styles starting with the least verbose.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code ElementStyleOption.COMPACT_NO_ARRAY}\n+ * </li>\n+ * <li>\n+ * {@code ElementStyleOption.COMPACT}\n+ * </li>\n+ * <li>\n+ * {@code ElementStyleOption.EXPANDED}\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To not enforce an element style a {@code ElementStyleOption.IGNORE} type is provided.\n+ * The desired style can be set through the {@code elementStyle} property.\n+ * </p>\n+ * <p>\n+ * Using the {@code ElementStyleOption.EXPANDED} style is more verbose.\n+ * The expanded version is sometimes referred to as \"named parameters\" in other languages.\n+ * </p>\n+ * <p>\n+ * Using the {@code ElementStyleOption.COMPACT} style is less verbose.\n+ * This style can only be used when there is an element called 'value' which is either\n+ * the sole element or all other elements have default values.\n+ * </p>\n+ * <p>\n+ * Using the {@code ElementStyleOption.COMPACT_NO_ARRAY} style is less verbose.\n+ * It is similar to the {@code ElementStyleOption.COMPACT} style but single value arrays are\n+ * flagged.\n+ * With annotations a single value array does not need to be placed in an array initializer.\n+ * </p>\n+ * <p>\n+ * The ending parenthesis are optional when using annotations with no elements.\n+ * To always require ending parenthesis use the {@code ClosingParensOption.ALWAYS} type.\n+ * To never have ending parenthesis use the {@code ClosingParensOption.NEVER} type.\n+ * To not enforce a closing parenthesis preference a {@code ClosingParensOption.IGNORE} type is\n+ * provided.\n+ * Set this through the {@code closingParens} property.\n+ * </p>\n+ * <p>\n+ * Annotations also allow you to specify arrays of elements in a standard format.\n+ * As with normal arrays, a trailing comma is optional.\n+ * To always require a trailing comma use the {@code TrailingArrayCommaOption.ALWAYS} type.\n+ * To never have a trailing comma use the {@code TrailingArrayCommaOption.NEVER} type.\n+ * To not enforce a trailing array comma preference a {@code TrailingArrayCommaOption.IGNORE} type\n+ * is provided. Set this through the {@code trailingArrayComma} property.\n+ * </p>\n+ * <p>\n+ * By default the {@code ElementStyleOption} is set to {@code COMPACT_NO_ARRAY},\n+ * the {@code TrailingArrayCommaOption} is set to {@code NEVER},\n+ * and the {@code ClosingParensOption} is set to {@code NEVER}.\n+ * </p>\n+ * <p>\n+ * According to the JLS, it is legal to include a trailing comma\n+ * in arrays used in annotations but Sun's Java 5 &amp; 6 compilers will not\n+ * compile with this syntax. This may in be a bug in Sun's compilers\n+ * since eclipse 3.4's built-in compiler does allow this syntax as\n+ * defined in the JLS. Note: this was tested with compilers included with\n+ * JDK versions 1.5.0.17 and 1.6.0.11 and the compiler included with eclipse 3.4.1.\n+ * </p>\n+ * <p>\n+ * See <a href=\"https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-9.7\">\n+ * Java Language specification, &#167;9.7</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code elementStyle} - Define the annotation element styles.\n+ * Type is {@code\n+ * com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck$ElementStyleOption}.\n+ * Default value is {@code compact_no_array}.\n+ * </li>\n+ * <li>\n+ * Property {@code closingParens} - Define the policy for ending parenthesis.\n+ * Type is {@code\n+ * com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck$ClosingParensOption}.\n+ * Default value is {@code never}.\n+ * </li>\n+ * <li>\n+ * Property {@code trailingArrayComma} - Define the policy for trailing comma in arrays.\n+ * Type is {@code\n+ * com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck$TrailingArrayCommaOption}.\n+ * Default value is {@code never}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AnnotationUseStyle\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to enforce an {@code expanded} style,\n+ * with a trailing array comma set to {@code never}\n+ * and always including the closing parenthesis.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AnnotationUseStyle&quot;&gt;\n+ *   &lt;property name=&quot;elementStyle&quot; value=&quot;expanded&quot;/&gt;\n+ *   &lt;property name=&quot;trailingArrayComma&quot; value=&quot;never&quot;/&gt;\n+ *   &lt;property name=&quot;closingParens&quot; value=&quot;always&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code annotation.incorrect.style}\n+ * </li>\n+ * <li>\n+ * {@code annotation.parens.missing}\n+ * </li>\n+ * <li>\n+ * {@code annotation.parens.present}\n+ * </li>\n+ * <li>\n+ * {@code annotation.trailing.comma.missing}\n+ * </li>\n+ * <li>\n+ * {@code annotation.trailing.comma.present}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 5.0\n+ *\n+ */\n+@StatelessCheck\n+public abstract class AnnotationUseStyleCheck extends AbstractCheck {", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NDIzMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483494232", "bodyText": "extra lines", "author": "strkkk", "createdAt": "2020-09-04T09:14:01Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/customchecks/PropertyWithNoCodeTagCheck.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks.customchecks;\n+\n+/**\n+ * <p>\n+ * Checks whether file contains code. Files which are considered to have no code:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * File with no text\n+ * </li>\n+ * <li>\n+ * File with single line comment(s)\n+ * </li>\n+ * <li>\n+ * File with a multi line comment(s).\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * <ul>\n+ * <li>\n+ * Property\n+ * sampleProperty - Here the property name doesnt have a code tag around its name.\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.33\n+ */\n+public class PropertyWithNoCodeTagCheck {\n+}\n+\n+\n+", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTIxMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949213", "bodyText": "done", "author": "gaurabdg", "createdAt": "2020-09-05T13:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NDIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NTc2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483645765", "bodyText": "please make it\ncom.puppycrawl.tools.checkstyle.meta.inputs.checks.custom\nit will make it more logical and let us avoid usage of extra bad word in whitelist.", "author": "romani", "createdAt": "2020-09-04T14:20:27Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/customchecks/PropertyWithNoCodeTagCheck.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks.customchecks;", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTIwOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949208", "bodyText": "done", "author": "gaurabdg", "createdAt": "2020-09-05T13:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NTc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NzIwMA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483647200", "bodyText": "We are not using in meta examples , please make all examples like public class Test { /** skipped as not relevant */ }", "author": "romani", "createdAt": "2020-09-04T14:22:53Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/blocks/RightCurlyCheck.java", "diffHunk": "@@ -0,0 +1,232 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks.blocks;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the placement of right curly braces ({@code '}'}) for code blocks. This check supports\n+ * if-else, try-catch-finally blocks, while-loops, for-loops,\n+ * method definitions, class definitions, constructor definitions,\n+ * instance, static initialization blocks, annotation definitions and enum definitions.\n+ * For right curly brace of expression blocks of arrays, lambdas and class instances\n+ * please follow issue\n+ * <a href=\"https://github.com/checkstyle/checkstyle/issues/5945\">#5945</a>.\n+ * For right curly brace of enum constant please follow issue\n+ * <a href=\"https://github.com/checkstyle/checkstyle/issues/7519\">#7519</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code option} - Specify the policy on placement of a right curly brace\n+ * (<code>'}'</code>).\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption}.\n+ * Default value is {@code same}.\n+ * </li>\n+ * <li>\n+ * Property {@code tokens} - tokens to check\n+ * Type is {@code java.lang.String[]}.\n+ * Validation type is {@code tokenSet}.\n+ * Default value is:\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_TRY\">\n+ * LITERAL_TRY</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CATCH\">\n+ * LITERAL_CATCH</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FINALLY\">\n+ * LITERAL_FINALLY</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF\">\n+ * LITERAL_IF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE\">\n+ * LITERAL_ELSE</a>.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RightCurly\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *\n+ *   public void test() {\n+ *\n+ *     if (foo) {\n+ *       bar();\n+ *     }           // violation, right curly must be in the same line as the 'else' keyword\n+ *     else {\n+ *       bar();\n+ *     }\n+ *\n+ *     if (foo) {\n+ *       bar();\n+ *     } else {     // OK\n+ *       bar();\n+ *     }\n+ *\n+ *     if (foo) { bar(); } int i = 0; // violation\n+ *                   // ^^^ statement is not allowed on same line after curly right brace\n+ *\n+ *     if (foo) { bar(); }            // OK\n+ *     int i = 0;\n+ *\n+ *     try {\n+ *       bar();\n+ *     }           // violation, rightCurly must be in the same line as 'catch' keyword\n+ *     catch (Exception e) {\n+ *       bar();\n+ *     }\n+ *\n+ *     try {\n+ *       bar();\n+ *     } catch (Exception e) { // OK\n+ *       bar();\n+ *     }\n+ *\n+ *   }                         // OK\n+ *\n+ *   public void testSingleLine() { bar(); } // OK, because singleline is allowed\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with policy {@code alone} for {@code else} and\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF\">\n+ * METHOD_DEF</a> tokens:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RightCurly&quot;&gt;\n+ *   &lt;property name=&quot;option&quot; value=&quot;alone&quot;/&gt;\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_ELSE, METHOD_DEF&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk2MDQ0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483960447", "bodyText": "not done.", "author": "romani", "createdAt": "2020-09-05T15:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NzIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzIwMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r484433203", "bodyText": "sorry, its done now.", "author": "gaurabdg", "createdAt": "2020-09-07T13:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NzIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjA5MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483652091", "bodyText": "please share violations, it is not not good to suppress, and this files are not \"expected\" files.", "author": "romani", "createdAt": "2020-09-04T14:30:58Z", "path": "config/checkstyle_non_main_files_suppressions.xml", "diffHunk": "@@ -68,6 +68,8 @@\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]ant[\\\\/]checkstyleanttask[\\\\/]ExpectedCheckstyleAntTaskXmlOutput\\.xml\"/>\n   <suppress id=\"lineLength\"\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]checks[\\\\/]translation[\\\\/]Expected.*\\.xml\"/>\n+  <suppress id=\"lineLength\"\n+            files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]meta[\\\\/].*\"/>", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTE4NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949185", "bodyText": "I have added comments why it is needed.", "author": "gaurabdg", "createdAt": "2020-09-05T13:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NDMyNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r485564325", "bodyText": "we do validation of length in main code also, but by different Check that have extra allowances\n\n  \n    \n      checkstyle/config/checkstyle_checks.xml\n    \n    \n        Lines 181 to 184\n      in\n      518f92c\n    \n    \n    \n    \n\n        \n          \n           <module name=\"LineLength\"> \n        \n\n        \n          \n             <property name=\"fileExtensions\" value=\"java\"/> \n        \n\n        \n          \n             <property name=\"max\" value=\"100\"/> \n        \n\n        \n          \n             <property name=\"ignorePattern\" value=\"^ *\\* *([^ ]+|\\{@code .*|&lt;a href=&quot;[^&quot;]+&quot;&gt;)$\"/> \n        \n    \n  \n\n\nplease apply patch (we should keep whole file on leash, but allow only certain lines to exceeed):\n\u2714 ~/java/github/romani/checkstyle [gaurabdg/improve-metadata-UT L|\u271a 2] \n$ git diff\ndiff --git a/config/checkstyle_non_main_files_checks.xml b/config/checkstyle_non_main_files_checks.xml\nindex 9fce9ad..a121f55 100644\n--- a/config/checkstyle_non_main_files_checks.xml\n+++ b/config/checkstyle_non_main_files_checks.xml\n@@ -19,7 +19,7 @@\n     <property name=\"id\" value=\"lineLength\"/>\n     <!-- catch lines above 100 symbols -->\n     <property name=\"format\"\n-             value=\"^(?!(.*href=|.*http(s)?:|import |(.* )?package |.* files=|.*\\.dtd)).{101,}$\"/>\n+             value=\"^(?!(.*href=|.*http(s)?:|import |(.* )?package |.* files=|.*\\.dtd| \\* \\{@code| \\* com\\.)).{101,}$\"/>\n     <property name=\"message\" value=\"Line should not be longer than 100 symbols\"/>\n   </module>\n \ndiff --git a/config/checkstyle_non_main_files_suppressions.xml b/config/checkstyle_non_main_files_suppressions.xml\nindex 51003e5..f67bb1f 100644\n--- a/config/checkstyle_non_main_files_suppressions.xml\n+++ b/config/checkstyle_non_main_files_suppressions.xml\n@@ -68,10 +68,6 @@\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]ant[\\\\/]checkstyleanttask[\\\\/]ExpectedCheckstyleAntTaskXmlOutput\\.xml\"/>\n   <suppress id=\"lineLength\"\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]checks[\\\\/]translation[\\\\/]Expected.*\\.xml\"/>\n-  <!-- we cannot suppress JavadocScraper test inputs' line lengths at will break code logic.\n-       Module javadocs in main src do not have lineLegth violations -->\n-  <suppress id=\"lineLength\"\n-            files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]meta[\\\\/].*\"/>\n \n   <!-- content is generated -->\n   <suppress id=\"lineLength\"", "author": "romani", "createdAt": "2020-09-09T12:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjQ2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483652466", "bodyText": "please share violations, we should not have violations is such files.", "author": "romani", "createdAt": "2020-09-04T14:31:35Z", "path": "config/checkstyle_input_suppressions.xml", "diffHunk": "@@ -9,6 +9,9 @@\n   <!-- Suppress miscellaneous files -->\n   <suppress checks=\"Regexp\" files=\"package-info.java\"/>\n \n+  <!-- Suppress input files for JavadocMetadataScraper -->\n+  <suppress checks=\"Regexp\" files=\"meta[\\\\/].*\"/>", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTE1MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949150", "bodyText": "This is not needed since its not a check configuration testing\n[ERROR] [checkstyle] [ERROR] /Users/gdasgupt/personal-workspace/checkstyle-dev/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/InputNoCodeInFileCheck.java:0: All check input files in the 'src/(it|test)/resources*/' folder must                    have a comment at the top of the file specifying the check configuration used to                    produce the violations, that begins with \"/* Config:\". [Regexp]", "author": "gaurabdg", "createdAt": "2020-09-05T13:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk2MTA2MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483961061", "bodyText": "thanks a lot!\nBut problem is deeper.\nPlease give property id to this Check instance in config and please suppress by id (not by Check name, suppression by Check name will suppress all violations from all instances).\nWhere to change\n\n  \n    \n      checkstyle/config/checkstyle_input_checks.xml\n    \n    \n        Lines 20 to 24\n      in\n      07d177b\n    \n    \n    \n    \n\n        \n          \n           <module name=\"Regexp\"> \n        \n\n        \n          \n             <property name=\"format\" \n        \n\n        \n          \n                      value=\"(\\* Config)\"/> \n        \n\n        \n          \n             <message key=\"required.regexp\" \n        \n\n        \n          \n                    value=\"All check input files in the ''src/(it|test)/resources*/'' folder must \n        \n    \n  \n\n\nHow to change:\n\n  \n    \n      checkstyle/config/checkstyle_checks.xml\n    \n    \n        Lines 134 to 136\n      in\n      07d177b\n    \n    \n    \n    \n\n        \n          \n           <module name=\"RegexpSingleline\"> \n        \n\n        \n          \n             <property name=\"id\" value=\"noSourceforgeNetLinks\"/> \n        \n\n        \n          \n             <property name=\"format\" value=\"checkstyle\\.sourceforge\\.net\"/> \n        \n    \n  \n\n\nExample of suppression:\n\n  \n    \n      checkstyle/config/suppressions.xml\n    \n    \n         Line 106\n      in\n      07d177b\n    \n    \n    \n    \n\n        \n          \n           <suppress id=\"noSourceforgeNetLinks\" files=\"[\\\\/]releasenotes.xml\"/>", "author": "romani", "createdAt": "2020-09-05T15:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzI4Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r484433282", "bodyText": "Done", "author": "gaurabdg", "createdAt": "2020-09-07T13:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjY0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483652649", "bodyText": "should be removed, see details below", "author": "romani", "createdAt": "2020-09-04T14:31:57Z", "path": ".ci/jsoref-spellchecker/whitelist.words", "diffHunk": "@@ -288,6 +288,7 @@ CStyle\n csv\n ctor\n ctx\n+customchecks", "originalCommit": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0OTE4OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483949189", "bodyText": "done", "author": "gaurabdg", "createdAt": "2020-09-05T13:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjY0OQ=="}], "type": "inlineReview"}, {"oid": "da5e1080928ca9cda9c938e56d4a33d1a9e3f165", "url": "https://github.com/checkstyle/checkstyle/commit/da5e1080928ca9cda9c938e56d4a33d1a9e3f165", "message": "Issue #8771: Improve code coverage for metadata generator classes", "committedDate": "2020-09-05T13:37:23Z", "type": "forcePushed"}, {"oid": "b5c7ba3efa51c54b815054714f3c467bfc47819b", "url": "https://github.com/checkstyle/checkstyle/commit/b5c7ba3efa51c54b815054714f3c467bfc47819b", "message": "Issue #8771: Improve code coverage for metadata generator classes", "committedDate": "2020-09-07T13:28:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1MjA1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r485552054", "bodyText": "lineLegth\n\nplease fix typo, to let CI be green.", "author": "romani", "createdAt": "2020-09-09T11:55:47Z", "path": "config/checkstyle_non_main_files_suppressions.xml", "diffHunk": "@@ -68,6 +68,10 @@\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]ant[\\\\/]checkstyleanttask[\\\\/]ExpectedCheckstyleAntTaskXmlOutput\\.xml\"/>\n   <suppress id=\"lineLength\"\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]checks[\\\\/]translation[\\\\/]Expected.*\\.xml\"/>\n+  <!-- we cannot suppress JavadocScraper test inputs' line lengths at will break code logic.\n+       Module javadocs in main src do not have lineLegth violations -->", "originalCommit": "b5c7ba3efa51c54b815054714f3c467bfc47819b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e", "url": "https://github.com/checkstyle/checkstyle/commit/2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e", "message": "Issue #8771: Improve code coverage for metadata generator classes", "committedDate": "2020-09-09T13:35:40Z", "type": "commit"}, {"oid": "2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e", "url": "https://github.com/checkstyle/checkstyle/commit/2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e", "message": "Issue #8771: Improve code coverage for metadata generator classes", "committedDate": "2020-09-09T13:35:40Z", "type": "forcePushed"}]}