{"pr_number": 9008, "pr_title": "Issue #8018: AST based operatorwrap", "pr_createdAt": "2020-11-22T11:55:52Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/9008", "timeline": [{"oid": "1b2494a52297706ff8e8a08cc05e301943d48c33", "url": "https://github.com/checkstyle/checkstyle/commit/1b2494a52297706ff8e8a08cc05e301943d48c33", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T12:06:47Z", "type": "forcePushed"}, {"oid": "fe129509633603d553649ac28ae0ce5a95c001ad", "url": "https://github.com/checkstyle/checkstyle/commit/fe129509633603d553649ac28ae0ce5a95c001ad", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T12:56:10Z", "type": "forcePushed"}, {"oid": "c7909b82e3384475d125c5d9b3d1ce5141cca330", "url": "https://github.com/checkstyle/checkstyle/commit/c7909b82e3384475d125c5d9b3d1ce5141cca330", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T13:04:59Z", "type": "forcePushed"}, {"oid": "3c99eb9fa83a7387bd9086eed9801944ebbf0520", "url": "https://github.com/checkstyle/checkstyle/commit/3c99eb9fa83a7387bd9086eed9801944ebbf0520", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T14:58:48Z", "type": "forcePushed"}, {"oid": "a0e1fe173f9a8727c94fc14aae6ee007856b505b", "url": "https://github.com/checkstyle/checkstyle/commit/a0e1fe173f9a8727c94fc14aae6ee007856b505b", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T14:59:36Z", "type": "forcePushed"}, {"oid": "33dd7ad16598dcafb474a4f09de9a85655701022", "url": "https://github.com/checkstyle/checkstyle/commit/33dd7ad16598dcafb474a4f09de9a85655701022", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T14:59:55Z", "type": "forcePushed"}, {"oid": "09a32252e3fdf5210a835f644bda476285c47a07", "url": "https://github.com/checkstyle/checkstyle/commit/09a32252e3fdf5210a835f644bda476285c47a07", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T16:47:32Z", "type": "forcePushed"}, {"oid": "40c6b13427cb0a2824a48c452638416ea3e30911", "url": "https://github.com/checkstyle/checkstyle/commit/40c6b13427cb0a2824a48c452638416ea3e30911", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T18:22:13Z", "type": "forcePushed"}, {"oid": "02fe3768b17cc9d41e818b25c8cdda343ddd6bdc", "url": "https://github.com/checkstyle/checkstyle/commit/02fe3768b17cc9d41e818b25c8cdda343ddd6bdc", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-22T20:17:43Z", "type": "forcePushed"}, {"oid": "bb53c5c14b18b943628c71752416d9575c477e15", "url": "https://github.com/checkstyle/checkstyle/commit/bb53c5c14b18b943628c71752416d9575c477e15", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-25T04:39:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ4MzEzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r530483131", "bodyText": "what is acc ?\nplease use full name.", "author": "romani", "createdAt": "2020-11-25T16:02:38Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))\n+                    && !TokenUtil.areOnSameLine(ast, getRightNode(ast))) {\n+                log(ast, MSG_LINE_NEW, ast.getText());\n             }\n             else if (option == WrapOption.EOL\n-                    && CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-                log(ast, MSG_LINE_PREVIOUS, text);\n+                    && !TokenUtil.areOnSameLine(ast, getLeftNode(ast))) {\n+                log(ast, MSG_LINE_PREVIOUS, ast.getText());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Filters some false tokens that this check should ignore.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} for all nodes this check should validate\n+     */\n+    private static boolean isOperatorNode(DetailAST node) {\n+        final boolean result;\n+        if (node.getType() == TokenTypes.COLON) {\n+            result = !isColonFromLabel(node);\n+        }\n+        else if (node.getType() == TokenTypes.STAR) {\n+            // Unlike the import statement, the multiply operator always has children\n+            result = node.hasChildren();\n+        }\n+        else {\n+            result = true;\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Checks if a node is {@link TokenTypes#COLON} from a label, switch case of default.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} if node matches\n+     */\n+    private static boolean isColonFromLabel(DetailAST node) {\n+        return TokenUtil.isOfType(node.getParent(), TokenTypes.LABELED_STAT,\n+            TokenTypes.LITERAL_CASE, TokenTypes.LITERAL_DEFAULT);\n+    }\n+\n+    /**\n+     * Checks if a node is {@link TokenTypes#ASSIGN} to a variable or resource.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} if node matches\n+     */\n+    private static boolean isAssignToVariable(DetailAST node) {\n+        return TokenUtil.isOfType(node.getParent(), TokenTypes.VARIABLE_DEF, TokenTypes.RESOURCE);\n+    }\n+\n+    /**\n+     * Returns the left neighbour of a binary operator. This is the rightmost\n+     * grandchild of the left child or sibling. For the assign operator the return value is\n+     * the variable name.\n+     *\n+     * @param node the binary operator\n+     * @return nearest node from left\n+     */\n+    private static DetailAST getLeftNode(DetailAST node) {\n+        DetailAST result;\n+        if (node.getFirstChild() == null || isAssignToVariable(node)) {\n+            result = node.getPreviousSibling();\n+        }\n+        else {\n+            result = adjustParens(node.getFirstChild(), DetailAST::getNextSibling);\n+        }\n+        while (result.getLastChild() != null) {\n+            result = result.getLastChild();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Returns the right neighbour of a binary operator. This is the leftmost\n+     * grandchild of the right child or sibling. For the ternary operator this\n+     * is the node between {@code ?} and {@code :} .\n+     *\n+     * @param node the binary operator\n+     * @return nearest node from right\n+     */\n+    private static DetailAST getRightNode(DetailAST node) {\n+        DetailAST result;\n+        if (node.getLastChild() == null) {\n+            result = node.getNextSibling();\n+        }\n+        else {\n+            final DetailAST rightNode;\n+            if (node.getType() == TokenTypes.QUESTION) {\n+                rightNode = node.findFirstToken(TokenTypes.COLON).getPreviousSibling();\n+            }\n+            else {\n+                rightNode = node.getLastChild();\n+            }\n+            result = adjustParens(rightNode, DetailAST::getPreviousSibling);\n+        }\n+\n+        // The ARRAY_INIT AST is confusing. It should be\n+        // ARRAY_INIT\n+        // |--LCURLY (first child)\n+        // `--RCURLY (last child)\n+        // but there is no LCURLY for ARRAY_INIT\n+        if (result.getType() != TokenTypes.ARRAY_INIT) {\n+            while (result.getFirstChild() != null) {\n+                result = result.getFirstChild();\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Finds matching parentheses among siblings. If the given node is not\n+     * {@link TokenTypes#LPAREN} nor {@link TokenTypes#RPAREN}, the method adjusts nothing.\n+     * This method is for handling case like {@code\n+     *   (condition && (condition\n+     *     || condition2 || condition3) && condition4\n+     *     && condition3)\n+     * }\n+     *\n+     * @param node the node to adjust\n+     * @param step the node transformer, should be {@link DetailAST#getPreviousSibling}\n+     *             or {@link DetailAST#getNextSibling}\n+     * @return adjusted node\n+     */\n+    private static DetailAST adjustParens(DetailAST node, UnaryOperator<DetailAST> step) {\n+        DetailAST result = node;\n+        int acc = 0;", "originalCommit": "bb53c5c14b18b943628c71752416d9575c477e15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzMDYwOA==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r532030608", "bodyText": "done", "author": "pbludov", "createdAt": "2020-11-28T11:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ4MzEzMQ=="}], "type": "inlineReview"}, {"oid": "f19e144dd9daf87d07b8344aa69d84574441b273", "url": "https://github.com/checkstyle/checkstyle/commit/f19e144dd9daf87d07b8344aa69d84574441b273", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-28T11:43:29Z", "type": "forcePushed"}, {"oid": "a9fca361e025bee085f85ff2f950bf518a8d0980", "url": "https://github.com/checkstyle/checkstyle/commit/a9fca361e025bee085f85ff2f950bf518a8d0980", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-11-29T08:47:35Z", "type": "forcePushed"}, {"oid": "a50e901c4feff326e0ad9e8cc34d03be03c0bd3c", "url": "https://github.com/checkstyle/checkstyle/commit/a50e901c4feff326e0ad9e8cc34d03be03c0bd3c", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-12-05T11:15:57Z", "type": "forcePushed"}, {"oid": "adc711a4755f76d8a17358d113019fff4e5ceaa0", "url": "https://github.com/checkstyle/checkstyle/commit/adc711a4755f76d8a17358d113019fff4e5ceaa0", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-12-05T11:19:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MTUwMw==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r547591503", "bodyText": "description of method is not same a name of method.\nshould we name method more abstract ... like isTargetNode", "author": "romani", "createdAt": "2020-12-23T01:32:42Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))\n+                    && !TokenUtil.areOnSameLine(ast, getRightNode(ast))) {\n+                log(ast, MSG_LINE_NEW, ast.getText());\n             }\n             else if (option == WrapOption.EOL\n-                    && CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-                log(ast, MSG_LINE_PREVIOUS, text);\n+                    && !TokenUtil.areOnSameLine(ast, getLeftNode(ast))) {\n+                log(ast, MSG_LINE_PREVIOUS, ast.getText());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Filters some false tokens that this check should ignore.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} for all nodes this check should validate\n+     */\n+    private static boolean isOperatorNode(DetailAST node) {", "originalCommit": "adc711a4755f76d8a17358d113019fff4e5ceaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcxNDcyOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r548714729", "bodyText": "done", "author": "pbludov", "createdAt": "2020-12-24T19:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MTUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MjExNA==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r547592114", "bodyText": "is it more readable form:\nif (isOperatorNode(ast)) {\n    if (option == WrapOption.NL) {\n        if (TokenUtil.areOnSameLine(ast, getLeftNode(ast))\n              && !TokenUtil.areOnSameLine(ast, getRightNode(ast))) {\n           log(ast, MSG_LINE_NEW, ast.getText());\n        }\n    }\n    else if (option == WrapOption.EOL) {\n      if (!TokenUtil.areOnSameLine(ast, getLeftNode(ast))) {\n        log(ast, MSG_LINE_PREVIOUS, ast.getText());\n      }\n    }\n}\n\n\nuser who debug certain option will not need to real long expressions at all.", "author": "romani", "createdAt": "2020-12-23T01:35:10Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))", "originalCommit": "adc711a4755f76d8a17358d113019fff4e5ceaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODY5NDY5OA==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r548694698", "bodyText": "This lead to PMD violation https://pmd.github.io/latest/pmd_rules_vm_design.html#collapsibleifstatements\nMaybe it is possible to fool this rule with a switch.", "author": "pbludov", "createdAt": "2020-12-24T18:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MjExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcxNDY0Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r548714646", "bodyText": "Upd: fixed with two additional methods", "author": "pbludov", "createdAt": "2020-12-24T19:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MjExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4Mzc2Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r548783762", "bodyText": "we can suppress Pmd on this case, it is normal that tools have false positives.\nwe should focus on what is good for reading.", "author": "romani", "createdAt": "2020-12-25T02:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MjExNA=="}], "type": "inlineReview"}, {"oid": "7b370a84dfa2106d7f4018ab7486146211007347", "url": "https://github.com/checkstyle/checkstyle/commit/7b370a84dfa2106d7f4018ab7486146211007347", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-12-24T19:16:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA2MDg2MA==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r549060860", "bodyText": "please make it like:\nif (option == WrapOption.NL && isNewLineModeViolation(ast)) {\nthe same method name update for other mode.", "author": "romani", "createdAt": "2020-12-27T03:50:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,168 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n+        if (isTargetNode(ast)) {\n+            if (option == WrapOption.NL && isNewLineViolation(ast)) {", "originalCommit": "7b370a84dfa2106d7f4018ab7486146211007347", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4MzI4NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r549083285", "bodyText": "done", "author": "pbludov", "createdAt": "2020-12-27T08:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA2MDg2MA=="}], "type": "inlineReview"}, {"oid": "79c5bd239c2fef94f29115eb282dbbae3f4abf18", "url": "https://github.com/checkstyle/checkstyle/commit/79c5bd239c2fef94f29115eb282dbbae3f4abf18", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-12-27T08:33:55Z", "type": "commit"}, {"oid": "79c5bd239c2fef94f29115eb282dbbae3f4abf18", "url": "https://github.com/checkstyle/checkstyle/commit/79c5bd239c2fef94f29115eb282dbbae3f4abf18", "message": "Issue #8018: AST based operatorwrap", "committedDate": "2020-12-27T08:33:55Z", "type": "forcePushed"}]}