{"pr_number": 8705, "pr_title": "Issue #8616: Text Blocks syntax check update for MultipleStringLiterals", "pr_createdAt": "2020-08-17T19:29:56Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8705", "timeline": [{"oid": "1337c992456b5b01a6a56397bfb6682eccfeae8b", "url": "https://github.com/checkstyle/checkstyle/commit/1337c992456b5b01a6a56397bfb6682eccfeae8b", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-17T21:59:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwODk2Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r471908963", "bodyText": "Remove \"is\"?", "author": "esilkensen", "createdAt": "2020-08-18T04:38:27Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "diffHunk": "@@ -116,6 +119,17 @@\n      */\n     public static final String MSG_KEY = \"multiple.string.literal\";\n \n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"", "originalCommit": "1337c992456b5b01a6a56397bfb6682eccfeae8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4MzQwOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472383408", "bodyText": "Removed.", "author": "nmancus1", "createdAt": "2020-08-18T18:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwODk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwOTkzOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r471909939", "bodyText": "Looks like this one is different than the others: \\\" vs. \\\\\", is that intentional?", "author": "esilkensen", "createdAt": "2020-08-18T04:41:57Z", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/coding/messages.properties", "diffHunk": "@@ -36,6 +36,7 @@ missing.switch.default=switch without \\\"default\\\" clause.\n modified.control.variable=Control variable ''{0}'' is modified.\n multiple.statements.line=Only one statement per line allowed.\n multiple.string.literal=The String {0} appears {1} times in the file.\n+multiple.string.literal.text.block=The String \\\"{0}\\\" appears {1} times in the file.", "originalCommit": "1337c992456b5b01a6a56397bfb6682eccfeae8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4MzQ2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472383466", "bodyText": "Removed.", "author": "nmancus1", "createdAt": "2020-08-18T18:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwOTkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxODg5OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472018899", "bodyText": "Why new message? For this check, the lines and text blocks must be equal:\nString str1 = \"foo\";\nString str2 = \"\"\"\n                     foo\n                     \"\"\"; // violation\nNow it turns out that the message is different depending on the order of the variables.", "author": "pbludov", "createdAt": "2020-08-18T08:46:48Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "diffHunk": "@@ -116,6 +119,17 @@\n      */\n     public static final String MSG_KEY = \"multiple.string.literal\";\n \n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY_TEXT_BLOCK = \"multiple.string.literal.text.block\";", "originalCommit": "1337c992456b5b01a6a56397bfb6682eccfeae8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyMDc3Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472020772", "bodyText": "and there is another case for the method to extract the body of a text block, see #8703 (comment)", "author": "pbludov", "createdAt": "2020-08-18T08:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxODg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMTY0Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472111646", "bodyText": "I made a new message, since unlike the string literal, the content of a text block does not include it's quotation marks.  I didn't feel right about further manipulating the text block content any more than we already are.\n\nWhy new message? For this check, the lines and text blocks must be equal:\nString str1 = \"foo\";\nString str2 = \"\"\"\n                     foo\n                     \"\"\"; // violation\nNow it turns out that the message is different depending on the order of the variables.\n\nThose two strings are not equal. Only if str2 did not have the trailing whitespace and  additional newline would they be equal. The compiler seems to only remove the first newline, then trim any preceding whitespace for each line, but it is consistent with the line with the least amount of whitespace. Consider:\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n\u279c  text-blocks-grammar cat TestClass.java\npublic class TestClass {\n    public static void main (String... args) {\n        String str1 = \"foo\";\n        String str2 = \"\"\"\n                            foo\n                \"\"\";\n        String str3 = \"\"\"\n                foo\"\"\";\n        String str4 = \"\"\"\n                foo\n                \"\"\";\n        String str5 = \"\"\"\n                      foo\n                        foo\n                          foo\"\"\";\n\n        if (str1.equals(str2)) {\n            System.out.println(\"str1 equals str2\");\n        }\n        if (str1.equals(str3)) {\n            System.out.println(\"str1 equals str3\");\n        }\n        if (str1.equals(str4)) {\n            System.out.println(\"str1 equals str4\");\n        }\n        System.out.println(\"String 1:\");\n        System.out.println(str1);\n        System.out.println(\"String 2:\");\n        System.out.println(str2);\n        System.out.println(\"String 3:\");\n        System.out.println(str3);\n        System.out.println(\"String 4:\");\n        System.out.println(str4);\n        System.out.println(\"String 5:\");\n        System.out.println(str5);\n\n\n    }\n}\n\u279c  text-blocks-grammar /home/nick/.jdks/openjdk-14.0.1/bin/java --enable-preview -classpath /home/nick/Desktop/text-blocks-grammar/out/production/text-blocks-grammar TestClass\nstr1 equals str3\nString 1:\nfoo\nString 2:\n            foo\n\nString 3:\nfoo\nString 4:\nfoo\n\nString 5:\nfoo\n  foo\n    foo\n\n\nI agree that we should make a utility method to extract the text block content in this way.  Can I just reference this comment?", "author": "nmancus1", "createdAt": "2020-08-18T11:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxODg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MjI4NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472142284", "bodyText": "Sure. I started by trying to combine two of your regular expressions into one. And then realized that a regular expression is not enough and suggested writing a separate method.", "author": "pbludov", "createdAt": "2020-08-18T12:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxODg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4NjQzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472386431", "bodyText": "Added utility in separate commit (9dc02ea), so that coverage will be 100%.", "author": "nmancus1", "createdAt": "2020-08-18T18:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxODg5OQ=="}], "type": "inlineReview"}, {"oid": "cc0d0a3cab62b6e90ea93c3ea56314fa04839552", "url": "https://github.com/checkstyle/checkstyle/commit/cc0d0a3cab62b6e90ea93c3ea56314fa04839552", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-18T18:01:36Z", "type": "forcePushed"}, {"oid": "a1aa8f2c304b7b78dd458ba15994118cc17ed74b", "url": "https://github.com/checkstyle/checkstyle/commit/a1aa8f2c304b7b78dd458ba15994118cc17ed74b", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-18T18:06:42Z", "type": "forcePushed"}, {"oid": "745df908b403ddf5220399b48c1b01d3c4e4d473", "url": "https://github.com/checkstyle/checkstyle/commit/745df908b403ddf5220399b48c1b01d3c4e4d473", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-18T18:18:31Z", "type": "forcePushed"}, {"oid": "2bbd4bfc2f0659d0a910a5397469d2c011055608", "url": "https://github.com/checkstyle/checkstyle/commit/2bbd4bfc2f0659d0a910a5397469d2c011055608", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-18T20:21:04Z", "type": "forcePushed"}, {"oid": "f57dbb2fe058e8cf29091c1987de79b0478132d1", "url": "https://github.com/checkstyle/checkstyle/commit/f57dbb2fe058e8cf29091c1987de79b0478132d1", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-18T20:30:02Z", "type": "forcePushed"}, {"oid": "46b096c8c00074de3e5890ea5f62fce712324b19", "url": "https://github.com/checkstyle/checkstyle/commit/46b096c8c00074de3e5890ea5f62fce712324b19", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-18T20:31:47Z", "type": "forcePushed"}, {"oid": "fa6089c7f4ccd9e3c142fbe259a09eee7988a82c", "url": "https://github.com/checkstyle/checkstyle/commit/fa6089c7f4ccd9e3c142fbe259a09eee7988a82c", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-18T20:45:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NTc1Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472485756", "bodyText": "Needed to add this here so that we have coverage for stripIndentAndInitialNewLineFromTextBlock() . I didn't want to add artificial test input in CheckUtilTest.java,  since we should be testing on real code.", "author": "nmancus1", "createdAt": "2020-08-18T20:51:49Z", "path": "pom.xml", "diffHunk": "@@ -3115,6 +3115,9 @@\n                 <param>\n                   com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheckTest\n                 </param>\n+                <param>\n+                  com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheckTest\n+                </param>", "originalCommit": "fa6089c7f4ccd9e3c142fbe259a09eee7988a82c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "463214278e6fe5f0769617777f433bfaec8c912b", "url": "https://github.com/checkstyle/checkstyle/commit/463214278e6fe5f0769617777f433bfaec8c912b", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-18T21:11:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcxODcyMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472718721", "bodyText": "nit: is this name accurate? (can the string end in whitespace?)", "author": "esilkensen", "createdAt": "2020-08-19T05:34:51Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java", "diffHunk": "@@ -484,4 +489,76 @@ else if (tokenType == TokenTypes.LITERAL_PRIVATE) {\n         return illegalClassNames;\n     }\n \n+    /**\n+     * Strip initial newline and preceding whitespace on each line from text block content.\n+     * In order to be consistent with how javac handles this task, we have modeled this\n+     * implementation after the code from:\n+     * github.com/openjdk/jdk14u/blob/master/src/java.base/share/classes/java/lang/String.java\n+     *\n+     * @param textBlockContent the actual content of the text block.\n+     * @return string consistent with javac representation.\n+     */\n+    public static String stripIndentAndInitialNewLineFromTextBlock(String textBlockContent) {\n+        final String contentWithInitialNewLineRemoved =\n+            ALL_NEW_LINES.matcher(textBlockContent).replaceFirst(\"\");\n+        final List<String> lines =\n+            Arrays.asList(ALL_NEW_LINES.split(contentWithInitialNewLineRemoved));\n+        final int indent = getSmallestIndent(lines);\n+        final String suffix = \"\";\n+\n+        return lines.stream()\n+                .map(line -> stripIndentFromLine(line, indent))\n+                .collect(Collectors.joining(System.lineSeparator(), \"\", suffix));\n+    }\n+\n+    /**\n+     * Helper method for stripIndentAndInitialNewLineFromTextBlock, strips correct indent\n+     * from string, or returns empty string if no text.\n+     *\n+     * @param line the string to strip indent from\n+     * @param indent the amount of indent to remove\n+     * @return modified string with removed indent, or empty string.\n+     */\n+    private static String stripIndentFromLine(String line, int indent) {\n+        final int firstNonWhitespace = indexOfNonWhitespace(line);\n+        final int lastNonWhitespace = line.length();", "originalCommit": "463214278e6fe5f0769617777f433bfaec8c912b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkxMzgxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472913818", "bodyText": "You have brought up a good point:\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n\n\u279c  text-blocks-grammar cat TestClass.java\npublic class TestClass {\npublic static void main (String... args) {\n    String str9a = \"\"\"\n            test    \"\"\";\n    String str9b = \"test    \";\n\n    if (str9a.equals(str9b)) {\n        System.out.println(\"str9a equals str9b\");\n    }\n    else {\n        System.out.println(\"str9a does not equal str9b\");\n    }\n    System.out.println(str9a);\n    System.out.println(str9b);\n}\n}\n\n\u279c  text-blocks-grammar /home/nick/.jdks/openjdk-14.0.1/bin/java --enable-preview -classpath /home/nick/Desktop/text-blocks-grammar/out/production/text-blocks-grammar TestClass \nstr9a does not equal str9b\ntest\ntest     \n\nLooks like we need to change this behavior.", "author": "nmancus1", "createdAt": "2020-08-19T10:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcxODcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwMzk2MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473003960", "bodyText": "Behavior and name is updated.", "author": "nmancus1", "createdAt": "2020-08-19T12:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcxODcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzA2OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472747069", "bodyText": "return the index of the first non-whitespace character, or line.length if no such character found?\nI don't like this behavior. Let's return -1 if it fails to find any non-whitespace character.\nIn this case, the method getSmallestIndent can be\n        return lines.stream()\n                .mapToInt(CheckUtil::indexOfNonWhitespace)\n                .filter(value -> value >= 0)\n                .min()\n                .orElse(0);", "author": "pbludov", "createdAt": "2020-08-19T06:16:49Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java", "diffHunk": "@@ -484,4 +489,76 @@ else if (tokenType == TokenTypes.LITERAL_PRIVATE) {\n         return illegalClassNames;\n     }\n \n+    /**\n+     * Strip initial newline and preceding whitespace on each line from text block content.\n+     * In order to be consistent with how javac handles this task, we have modeled this\n+     * implementation after the code from:\n+     * github.com/openjdk/jdk14u/blob/master/src/java.base/share/classes/java/lang/String.java\n+     *\n+     * @param textBlockContent the actual content of the text block.\n+     * @return string consistent with javac representation.\n+     */\n+    public static String stripIndentAndInitialNewLineFromTextBlock(String textBlockContent) {\n+        final String contentWithInitialNewLineRemoved =\n+            ALL_NEW_LINES.matcher(textBlockContent).replaceFirst(\"\");\n+        final List<String> lines =\n+            Arrays.asList(ALL_NEW_LINES.split(contentWithInitialNewLineRemoved));\n+        final int indent = getSmallestIndent(lines);\n+        final String suffix = \"\";\n+\n+        return lines.stream()\n+                .map(line -> stripIndentFromLine(line, indent))\n+                .collect(Collectors.joining(System.lineSeparator(), \"\", suffix));\n+    }\n+\n+    /**\n+     * Helper method for stripIndentAndInitialNewLineFromTextBlock, strips correct indent\n+     * from string, or returns empty string if no text.\n+     *\n+     * @param line the string to strip indent from\n+     * @param indent the amount of indent to remove\n+     * @return modified string with removed indent, or empty string.\n+     */\n+    private static String stripIndentFromLine(String line, int indent) {\n+        final int firstNonWhitespace = indexOfNonWhitespace(line);\n+        final int lastNonWhitespace = line.length();\n+        final int incidentalWhitespace = Math.min(indent, firstNonWhitespace);\n+\n+        return line.substring(incidentalWhitespace, lastNonWhitespace);\n+    }\n+\n+    /**\n+     * Helper method for stripIndentAndInitialNewLineFromTextBlock, to determine the smallest\n+     * indent in a text block string literal.\n+     *\n+     * @param lines list of actual text block content, split by line.\n+     * @return number of spaces representing the smallest indent in this text block.\n+     */\n+    private static int getSmallestIndent(List<String> lines) {\n+        int indent = Integer.MAX_VALUE;\n+        for (String line : lines) {\n+            final int leadingWhitespace = indexOfNonWhitespace(line);\n+            indent = Integer.min(indent, leadingWhitespace);\n+        }\n+        return indent;\n+    }\n+\n+    /**\n+     * Helper method to find the index of the first non-whitespace character in a string.\n+     *\n+     * @param line the string to find the first index of a non-whitespace character for.\n+     * @return the index of the first non-whitespace character.", "originalCommit": "463214278e6fe5f0769617777f433bfaec8c912b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5MjkxMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472992911", "bodyText": "Pitest shows that                 .filter(value -> value >= 0) has 6 surviving mutations; I removed that line and all tests still pass, as well as pitest now.", "author": "nmancus1", "createdAt": "2020-08-19T12:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4ODE2NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473588164", "bodyText": "This is because there are no test cases with blank lines.\nString str = \"\"\"\n         foo\n\n\n    bar\"\"\";\nThe base indent is 4, not 0, although there are two blank lines.", "author": "pbludov", "createdAt": "2020-08-20T04:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwODMwMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473608302", "bodyText": "Test cases added, but we still don't need that line.", "author": "nmancus1", "createdAt": "2020-08-20T05:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDU4Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472750587", "bodyText": "This method is similar to CommonUtil::isBlank. May be it should be rewritten as\n    public static boolean isBlank(String value) {\n        return indexOfNonWhitespace(value) < 0;\n    }\n?", "author": "pbludov", "createdAt": "2020-08-19T06:21:37Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java", "diffHunk": "@@ -484,4 +489,76 @@ else if (tokenType == TokenTypes.LITERAL_PRIVATE) {\n         return illegalClassNames;\n     }\n \n+    /**\n+     * Strip initial newline and preceding whitespace on each line from text block content.\n+     * In order to be consistent with how javac handles this task, we have modeled this\n+     * implementation after the code from:\n+     * github.com/openjdk/jdk14u/blob/master/src/java.base/share/classes/java/lang/String.java\n+     *\n+     * @param textBlockContent the actual content of the text block.\n+     * @return string consistent with javac representation.\n+     */\n+    public static String stripIndentAndInitialNewLineFromTextBlock(String textBlockContent) {\n+        final String contentWithInitialNewLineRemoved =\n+            ALL_NEW_LINES.matcher(textBlockContent).replaceFirst(\"\");\n+        final List<String> lines =\n+            Arrays.asList(ALL_NEW_LINES.split(contentWithInitialNewLineRemoved));\n+        final int indent = getSmallestIndent(lines);\n+        final String suffix = \"\";\n+\n+        return lines.stream()\n+                .map(line -> stripIndentFromLine(line, indent))\n+                .collect(Collectors.joining(System.lineSeparator(), \"\", suffix));\n+    }\n+\n+    /**\n+     * Helper method for stripIndentAndInitialNewLineFromTextBlock, strips correct indent\n+     * from string, or returns empty string if no text.\n+     *\n+     * @param line the string to strip indent from\n+     * @param indent the amount of indent to remove\n+     * @return modified string with removed indent, or empty string.\n+     */\n+    private static String stripIndentFromLine(String line, int indent) {\n+        final int firstNonWhitespace = indexOfNonWhitespace(line);\n+        final int lastNonWhitespace = line.length();\n+        final int incidentalWhitespace = Math.min(indent, firstNonWhitespace);\n+\n+        return line.substring(incidentalWhitespace, lastNonWhitespace);\n+    }\n+\n+    /**\n+     * Helper method for stripIndentAndInitialNewLineFromTextBlock, to determine the smallest\n+     * indent in a text block string literal.\n+     *\n+     * @param lines list of actual text block content, split by line.\n+     * @return number of spaces representing the smallest indent in this text block.\n+     */\n+    private static int getSmallestIndent(List<String> lines) {\n+        int indent = Integer.MAX_VALUE;\n+        for (String line : lines) {\n+            final int leadingWhitespace = indexOfNonWhitespace(line);\n+            indent = Integer.min(indent, leadingWhitespace);\n+        }\n+        return indent;\n+    }\n+\n+    /**\n+     * Helper method to find the index of the first non-whitespace character in a string.\n+     *\n+     * @param line the string to find the first index of a non-whitespace character for.\n+     * @return the index of the first non-whitespace character.\n+     */\n+    private static int indexOfNonWhitespace(String line) {", "originalCommit": "463214278e6fe5f0769617777f433bfaec8c912b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NDg4MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472994881", "bodyText": "Can you explain a bit more? I am using indexOfNonWhitespace() to return an int value to compare with indent to get the substring from line.", "author": "nmancus1", "createdAt": "2020-08-19T12:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5NDM2MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473594361", "bodyText": "Just take a look at isBlank method. It is almost same as the new method indexOfNonWhitespace.  I want to get rid of duplication.", "author": "pbludov", "createdAt": "2020-08-20T05:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMzcxMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473913712", "bodyText": "Ok, I misunderstood what you were asking, I think.  I have refactored isBlank(), and moved indexOfNonWhitespace() to CommonUtil.java.", "author": "nmancus1", "createdAt": "2020-08-20T11:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NzM4Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r472757387", "bodyText": "Please add some uncommon Unicode whitespaces like \\u2000\n\u200b", "author": "pbludov", "createdAt": "2020-08-19T06:30:42Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/multiplestringliterals/InputMultipleStringLiteralsTextBlocks.java", "diffHunk": "@@ -0,0 +1,89 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.coding.multiplestringliterals;\n+\n+/* Config:\n+ *\n+ * allowedDuplicates = 1\n+ * ignoreStringsRegexp = null\n+ * ignoreOccurrenceContext = ANNOTATION\n+ */\n+public class InputMultipleStringLiteralsTextBlocks {\n+    String string1 = \"string\";\n+    String string2a = \"string\"; // violation\n+    String string2b = \"\"\"\n+            string\"\"\"; // violation #1\n+\n+    String string3 = \"\"\"\n+            other string\"\"\";\n+    String string4 = \"\"\"\n+            other string\"\"\"; // violation #1\n+    String string5 = \"\"\"\n+            other string\n+            \"\"\"; // occurrence #1\n+    String string6 = \"\"\"\n+            other string\n+            \"\"\"; // violation #1\n+\n+    String escape1 = \"\"\"\n+            <html>\\u000D\\u000A\\n\n+                <body>\\u000D\\u000A\\n\n+                    <p>Hello, world</p>\\u000D\\u000A\\n\n+                </body>\\u000D\\u000A\\n", "originalCommit": "463214278e6fe5f0769617777f433bfaec8c912b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNDEzNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473004134", "bodyText": "Done.", "author": "nmancus1", "createdAt": "2020-08-19T12:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NzM4Nw=="}], "type": "inlineReview"}, {"oid": "9aec4105baeeaa2134ca7e0a8540d0bdd3f9013e", "url": "https://github.com/checkstyle/checkstyle/commit/9aec4105baeeaa2134ca7e0a8540d0bdd3f9013e", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-19T12:27:56Z", "type": "forcePushed"}, {"oid": "a5696379aca48459c259e28d0a8384d7e9facb06", "url": "https://github.com/checkstyle/checkstyle/commit/a5696379aca48459c259e28d0a8384d7e9facb06", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-19T12:50:10Z", "type": "forcePushed"}, {"oid": "ac210211923bf776a214945259bd63e501b363cd", "url": "https://github.com/checkstyle/checkstyle/commit/ac210211923bf776a214945259bd63e501b363cd", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-19T14:38:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4NjMxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473586318", "bodyText": "I think this replacement should be done for all types of strings.\nNow it turns out that if the second occurrence is a text block, the ends of the lines are replaced. But if there is another occurrence of an ordinary string, the result will be as it is.", "author": "pbludov", "createdAt": "2020-08-20T04:48:34Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "diffHunk": "@@ -244,9 +268,20 @@ public void finishTree(DetailAST rootAST) {\n             final List<DetailAST> hits = stringListEntry.getValue();\n             if (hits.size() > allowedDuplicates) {\n                 final DetailAST firstFinding = hits.get(0);\n-                log(firstFinding, MSG_KEY, stringListEntry.getKey(), hits.size());\n+                final String recurringString;\n+                if (firstFinding.getType() == TokenTypes.TEXT_BLOCK_CONTENT) {", "originalCommit": "ac210211923bf776a214945259bd63e501b363cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMzgxNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473913814", "bodyText": "Done.", "author": "nmancus1", "createdAt": "2020-08-20T11:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4NjMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5MjE4Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473592182", "bodyText": "There should be else return \"\"'; as the compiler threats whitespace-only lines as empty:\nstatic String str = \"\"\"\n          \n   foo\"\"\";\n   System.out.println(\"'\" + str + \"'\");\n\n(there is 10 spaces in the line 2) becomes\n'\nfoo'", "author": "pbludov", "createdAt": "2020-08-20T05:04:43Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java", "diffHunk": "@@ -484,4 +489,95 @@ else if (tokenType == TokenTypes.LITERAL_PRIVATE) {\n         return illegalClassNames;\n     }\n \n+    /**\n+     * Strip initial newline and preceding whitespace on each line from text block content.\n+     * In order to be consistent with how javac handles this task, we have modeled this\n+     * implementation after the code from:\n+     * github.com/openjdk/jdk14u/blob/master/src/java.base/share/classes/java/lang/String.java\n+     *\n+     * @param textBlockContent the actual content of the text block.\n+     * @return string consistent with javac representation.\n+     */\n+    public static String stripIndentAndInitialNewLineFromTextBlock(String textBlockContent) {\n+        final String contentWithInitialNewLineRemoved =\n+            ALL_NEW_LINES.matcher(textBlockContent).replaceFirst(\"\");\n+        final List<String> lines =\n+            Arrays.asList(ALL_NEW_LINES.split(contentWithInitialNewLineRemoved));\n+        final int indent = getSmallestIndent(lines);\n+        final String suffix = \"\";\n+\n+        return lines.stream()\n+                .map(line -> stripIndentAndTrailingWhitespaceFromLine(line, indent))\n+                .collect(Collectors.joining(System.lineSeparator(), \"\", suffix));\n+    }\n+\n+    /**\n+     * Helper method for stripIndentAndInitialNewLineFromTextBlock, strips correct indent\n+     * from string, and trailing whitespace, or returns empty string if no text.\n+     *\n+     * @param line the string to strip indent and trailing whitespace from\n+     * @param indent the amount of indent to remove\n+     * @return modified string with removed indent and trailing whitespace, or empty string.\n+     */\n+    private static String stripIndentAndTrailingWhitespaceFromLine(String line, int indent) {\n+        final int lastNonWhitespace = lastIndexOfNonWhitespace(line);\n+        String returnString = \"\";\n+\n+        if (lastNonWhitespace > 0) {\n+            final int firstNonWhitespace = indexOfNonWhitespace(line);\n+            final int incidentalWhitespace = Math.min(indent, firstNonWhitespace);\n+            returnString = line.substring(incidentalWhitespace, lastNonWhitespace);\n+        }", "originalCommit": "ac210211923bf776a214945259bd63e501b363cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwNTk5NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473605994", "bodyText": "https://github.com/checkstyle/checkstyle/pull/8705/files/ac210211923bf776a214945259bd63e501b363cd#r473605759", "author": "nmancus1", "createdAt": "2020-08-20T05:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5MjE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwNTc1OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473605759", "bodyText": "@pbludov we are returning \"\"", "author": "nmancus1", "createdAt": "2020-08-20T05:27:38Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java", "diffHunk": "@@ -484,4 +489,95 @@ else if (tokenType == TokenTypes.LITERAL_PRIVATE) {\n         return illegalClassNames;\n     }\n \n+    /**\n+     * Strip initial newline and preceding whitespace on each line from text block content.\n+     * In order to be consistent with how javac handles this task, we have modeled this\n+     * implementation after the code from:\n+     * github.com/openjdk/jdk14u/blob/master/src/java.base/share/classes/java/lang/String.java\n+     *\n+     * @param textBlockContent the actual content of the text block.\n+     * @return string consistent with javac representation.\n+     */\n+    public static String stripIndentAndInitialNewLineFromTextBlock(String textBlockContent) {\n+        final String contentWithInitialNewLineRemoved =\n+            ALL_NEW_LINES.matcher(textBlockContent).replaceFirst(\"\");\n+        final List<String> lines =\n+            Arrays.asList(ALL_NEW_LINES.split(contentWithInitialNewLineRemoved));\n+        final int indent = getSmallestIndent(lines);\n+        final String suffix = \"\";\n+\n+        return lines.stream()\n+                .map(line -> stripIndentAndTrailingWhitespaceFromLine(line, indent))\n+                .collect(Collectors.joining(System.lineSeparator(), \"\", suffix));\n+    }\n+\n+    /**\n+     * Helper method for stripIndentAndInitialNewLineFromTextBlock, strips correct indent\n+     * from string, and trailing whitespace, or returns empty string if no text.\n+     *\n+     * @param line the string to strip indent and trailing whitespace from\n+     * @param indent the amount of indent to remove\n+     * @return modified string with removed indent and trailing whitespace, or empty string.\n+     */\n+    private static String stripIndentAndTrailingWhitespaceFromLine(String line, int indent) {\n+        final int lastNonWhitespace = lastIndexOfNonWhitespace(line);\n+        String returnString = \"\";", "originalCommit": "ac210211923bf776a214945259bd63e501b363cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MjkzMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8705#discussion_r473692932", "bodyText": "Oh, I see now.", "author": "pbludov", "createdAt": "2020-08-20T07:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwNTc1OQ=="}], "type": "inlineReview"}, {"oid": "1080aa68c804f2997fae2f5e8ae089f8e90a8b3d", "url": "https://github.com/checkstyle/checkstyle/commit/1080aa68c804f2997fae2f5e8ae089f8e90a8b3d", "message": "minor: create utility to extract content consistent with javac from text blocks(#8616)", "committedDate": "2020-08-20T11:52:10Z", "type": "commit"}, {"oid": "af05003be1cc0523fc9627ea014e45a87ebed9e4", "url": "https://github.com/checkstyle/checkstyle/commit/af05003be1cc0523fc9627ea014e45a87ebed9e4", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-20T11:52:10Z", "type": "forcePushed"}, {"oid": "748e25543e5fb6d421b9e40a2ac58d725fe54d06", "url": "https://github.com/checkstyle/checkstyle/commit/748e25543e5fb6d421b9e40a2ac58d725fe54d06", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-20T12:11:12Z", "type": "commit"}, {"oid": "748e25543e5fb6d421b9e40a2ac58d725fe54d06", "url": "https://github.com/checkstyle/checkstyle/commit/748e25543e5fb6d421b9e40a2ac58d725fe54d06", "message": "Issue #8616: Text Blocks syntax check update for MultipleStringLiteralsCheck", "committedDate": "2020-08-20T12:11:12Z", "type": "forcePushed"}]}