{"pr_number": 845, "pr_title": "Update JMeter Performance Test to Submit Transactions to Simulate High TPS", "pr_createdAt": "2020-06-25T19:10:55Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/845", "timeline": [{"oid": "e560e92e4753fb16f946e97f2d44ee8d23e3a9f3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e560e92e4753fb16f946e97f2d44ee8d23e3a9f3", "message": "Initial scaffolding to spport executor service publishing\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "bdc4985a888097377405c801806be87ebea28994", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bdc4985a888097377405c801806be87ebea28994", "message": "Centralized client creating and cleanup logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "4bf26aaf693cd83c95de8509a0bf41672c7f3d9d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4bf26aaf693cd83c95de8509a0bf41672c7f3d9d", "message": "Added rate calculation logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "ffee41a99209f9df6e7c9063f25ca54334fcc87a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ffee41a99209f9df6e7c9063f25ca54334fcc87a", "message": "Expose high tps support in dockerfile\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "e9c720990474ee7038da682f02f7faa70becc6a7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e9c720990474ee7038da682f02f7faa70becc6a7", "message": "Added hcs-perf-message-submit job\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "7014b22c24b53e1200a6f2e9eaa96a5cf75b105c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7014b22c24b53e1200a6f2e9eaa96a5cf75b105c", "message": "Added transaction recipt verification logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "bd6f099cabc7841acdf0a32fc5929d03ea823ecf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd6f099cabc7841acdf0a32fc5929d03ea823ecf", "message": "Make verify configureable\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "8cd0c6deba723c94809422ea0ade1d283ff6eb35", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8cd0c6deba723c94809422ea0ade1d283ff6eb35", "message": "Correct job defaults\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "8962826e7e04dc720bfc51d521a4169724f7bd97", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8962826e7e04dc720bfc51d521a4169724f7bd97", "message": "Revert TopicFeature update\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "defd2f65111cb1b34f2640212b6dfe81e0161f9f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/defd2f65111cb1b34f2640212b6dfe81e0161f9f", "message": "Add counter to jmeter response\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:07:49Z", "type": "commit"}, {"oid": "1d8f80eb3d73931b85c41d0d7deeb710a5e77ec8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1d8f80eb3d73931b85c41d0d7deeb710a5e77ec8", "message": "Initial scaffolding to spport executor service publishing\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:11:03Z", "type": "commit"}, {"oid": "46698a66c1a273957fe17d488bc020ec32cf364b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/46698a66c1a273957fe17d488bc020ec32cf364b", "message": "Centralized client creating and cleanup logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:15:16Z", "type": "commit"}, {"oid": "12a87d4b75ae44d4afe94a6ef774e85cb5ba790a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/12a87d4b75ae44d4afe94a6ef774e85cb5ba790a", "message": "Added rate calculation logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:18:35Z", "type": "commit"}, {"oid": "6bafe24fc2b79417d5146043c290059d16c6c37a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6bafe24fc2b79417d5146043c290059d16c6c37a", "message": "Added hcs-perf-message-submit job\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:20:46Z", "type": "commit"}, {"oid": "4254cf86a102e0859b04c45a762b331b0fc7a0f6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4254cf86a102e0859b04c45a762b331b0fc7a0f6", "message": "Added transaction recipt verification logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:21:32Z", "type": "commit"}, {"oid": "1ccf9ce69ef1f7a6df680837d4dded4683f390c3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1ccf9ce69ef1f7a6df680837d4dded4683f390c3", "message": "Revert TopicFeature update\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:21:32Z", "type": "commit"}, {"oid": "bde3369c0d27d7893975a6b5927222e7e6ed2a90", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bde3369c0d27d7893975a6b5927222e7e6ed2a90", "message": "Add counter to jmeter response\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:21:47Z", "type": "commit"}, {"oid": "bde3369c0d27d7893975a6b5927222e7e6ed2a90", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bde3369c0d27d7893975a6b5927222e7e6ed2a90", "message": "Add counter to jmeter response\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-01T17:21:47Z", "type": "forcePushed"}, {"oid": "9a5cc055e7487a7bf7a1165187b9c609ff89a4a1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9a5cc055e7487a7bf7a1165187b9c609ff89a4a1", "message": "Merge perf stats in\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-02T20:52:11Z", "type": "commit"}, {"oid": "38d994bf9a94df8f9f7c7c7cacd3421f4660b4a5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/38d994bf9a94df8f9f7c7c7cacd3421f4660b4a5", "message": "Added error handling for threads allowing for improved TPS\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-04T05:05:28Z", "type": "commit"}, {"oid": "f20eef5ef322aa6fc71b7deef3a4eb7646d91f71", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f20eef5ef322aa6fc71b7deef3a4eb7646d91f71", "message": "Updated property specifications\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-06T14:55:38Z", "type": "commit"}, {"oid": "38a037808748c98c02853f092da21ee11c904d2f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/38a037808748c98c02853f092da21ee11c904d2f", "message": "Added support for encoded or normal instant publish in message\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-06T21:04:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MjE3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r450992177", "bodyText": "Why 12? If this is supposed to be the cpu core count you can use int cores = Runtime.getRuntime().availableProcessors();", "author": "steven-sheehy", "createdAt": "2020-07-07T16:27:58Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/TopicMessagePublishClient.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.hedera.mirror.grpc.jmeter.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.TopicMessagePublisher;\n+import com.hedera.mirror.grpc.jmeter.sampler.TopicMessagesPublishSampler;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+public class TopicMessagePublishClient extends AbstractJavaSamplerClient {\n+\n+    private PropertiesHandler propHandler;\n+    private List<SDKClient> clientList;\n+    private Long topicNum;\n+    private int messagesPerBatchCount;\n+    private int messageByteSize;\n+    private AccountId operatorId;\n+    private Ed25519PrivateKey operatorPrivateKey;\n+    private long publishTimeout;\n+    private long publishInterval;\n+    private boolean verifyTransactions;\n+    private long printStatusInterval;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        topicNum = propHandler.getLongTestParam(\"topicId\", 0L);\n+        messagesPerBatchCount = propHandler.getIntTestParam(\"messagesPerBatchCount\", 0);\n+        publishInterval = propHandler.getIntTestParam(\"publishInterval\", 20000);\n+        publishTimeout = propHandler.getIntTestParam(\"publishTimeout\", 60);\n+        messageByteSize = propHandler.getIntTestParam(\"messagesByteSize\", 16);\n+        verifyTransactions = Boolean.valueOf(propHandler.getTestParam(\"verifyTransactions\", \"true\"));\n+        printStatusInterval = propHandler.getLongTestParam(\"statusPrintIntervalMinutes\", 1L);\n+        operatorId = AccountId.fromString(propHandler.getTestParam(\"operatorId\", \"0\"));\n+        operatorPrivateKey = Ed25519PrivateKey.fromString(propHandler.getTestParam(\"operatorKey\", \"0\"));\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>\n+        String[] nodeList = propHandler.getTestParam(\"networkNodes\", \"localhost:0.0.3:50211\").split(\",\");\n+        clientList = Arrays.asList(nodeList).stream()\n+                .map(x -> new SDKClient(x, operatorId, operatorPrivateKey))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Arguments getDefaultParameters() {\n+        Arguments defaultParameters = new Arguments();\n+        defaultParameters.addArgument(\"propertiesBase\", \"hedera.mirror.test.performance\");\n+        return defaultParameters;\n+    }\n+\n+    @Override\n+    public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n+        boolean success = false;\n+        SampleResult result = new SampleResult();\n+        result.sampleStart();\n+\n+        // kick off batched message publish\n+        TopicMessagePublisher topicMessagePublisher = TopicMessagePublisher.builder()\n+                .consensusTopicId(new ConsensusTopicId(0, 0, topicNum))\n+                .messageByteSize(messageByteSize)\n+                .publishInterval(publishInterval)\n+                .publishTimeout(publishTimeout)\n+                .messagesPerBatchCount(messagesPerBatchCount)\n+                .operatorId(operatorId)\n+                .operatorPrivateKey(operatorPrivateKey)\n+                .build();\n+\n+        // publish message executor service\n+        ScheduledExecutorService executor = Executors.newScheduledThreadPool(clientList.size() * 12);", "originalCommit": "38a037808748c98c02853f092da21ee11c904d2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MTM3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451061379", "bodyText": "Yeah, will update", "author": "Nana-EC", "createdAt": "2020-07-07T18:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MjE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5Mzk5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r450993996", "bodyText": "Should use logger instead", "author": "steven-sheehy", "createdAt": "2020-07-07T16:30:51Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/TopicMessagePublishClient.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.hedera.mirror.grpc.jmeter.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.TopicMessagePublisher;\n+import com.hedera.mirror.grpc.jmeter.sampler.TopicMessagesPublishSampler;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+public class TopicMessagePublishClient extends AbstractJavaSamplerClient {\n+\n+    private PropertiesHandler propHandler;\n+    private List<SDKClient> clientList;\n+    private Long topicNum;\n+    private int messagesPerBatchCount;\n+    private int messageByteSize;\n+    private AccountId operatorId;\n+    private Ed25519PrivateKey operatorPrivateKey;\n+    private long publishTimeout;\n+    private long publishInterval;\n+    private boolean verifyTransactions;\n+    private long printStatusInterval;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        topicNum = propHandler.getLongTestParam(\"topicId\", 0L);\n+        messagesPerBatchCount = propHandler.getIntTestParam(\"messagesPerBatchCount\", 0);\n+        publishInterval = propHandler.getIntTestParam(\"publishInterval\", 20000);\n+        publishTimeout = propHandler.getIntTestParam(\"publishTimeout\", 60);\n+        messageByteSize = propHandler.getIntTestParam(\"messagesByteSize\", 16);\n+        verifyTransactions = Boolean.valueOf(propHandler.getTestParam(\"verifyTransactions\", \"true\"));\n+        printStatusInterval = propHandler.getLongTestParam(\"statusPrintIntervalMinutes\", 1L);\n+        operatorId = AccountId.fromString(propHandler.getTestParam(\"operatorId\", \"0\"));\n+        operatorPrivateKey = Ed25519PrivateKey.fromString(propHandler.getTestParam(\"operatorKey\", \"0\"));\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>\n+        String[] nodeList = propHandler.getTestParam(\"networkNodes\", \"localhost:0.0.3:50211\").split(\",\");\n+        clientList = Arrays.asList(nodeList).stream()\n+                .map(x -> new SDKClient(x, operatorId, operatorPrivateKey))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Arguments getDefaultParameters() {\n+        Arguments defaultParameters = new Arguments();\n+        defaultParameters.addArgument(\"propertiesBase\", \"hedera.mirror.test.performance\");\n+        return defaultParameters;\n+    }\n+\n+    @Override\n+    public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n+        boolean success = false;\n+        SampleResult result = new SampleResult();\n+        result.sampleStart();\n+\n+        // kick off batched message publish\n+        TopicMessagePublisher topicMessagePublisher = TopicMessagePublisher.builder()\n+                .consensusTopicId(new ConsensusTopicId(0, 0, topicNum))\n+                .messageByteSize(messageByteSize)\n+                .publishInterval(publishInterval)\n+                .publishTimeout(publishTimeout)\n+                .messagesPerBatchCount(messagesPerBatchCount)\n+                .operatorId(operatorId)\n+                .operatorPrivateKey(operatorPrivateKey)\n+                .build();\n+\n+        // publish message executor service\n+        ScheduledExecutorService executor = Executors.newScheduledThreadPool(clientList.size() * 12);\n+\n+        // print status executor service\n+        ScheduledExecutorService loggerScheduler = Executors.newSingleThreadScheduledExecutor();\n+\n+        try {\n+            log.info(\"Schedule client tasks every publishInterval: {} ms\", publishInterval);\n+            AtomicInteger counter = new AtomicInteger(0);\n+            Stopwatch totalStopwatch = Stopwatch.createStarted();\n+            clientList.forEach(x -> {\n+                executor.scheduleAtFixedRate(\n+                        () -> {\n+                            TopicMessagesPublishSampler topicMessagesPublishSampler =\n+                                    new TopicMessagesPublishSampler(topicMessagePublisher, x, verifyTransactions);\n+                            counter.addAndGet(topicMessagesPublishSampler.submitConsensusMessageTransactions());\n+                        },\n+                        0,\n+                        publishInterval,\n+                        TimeUnit.MILLISECONDS);\n+            });\n+\n+            // log progress every minute\n+            loggerScheduler.scheduleAtFixedRate(() -> {\n+                printStatus(counter.get(), totalStopwatch);\n+            }, 0, printStatusInterval, TimeUnit.MINUTES);\n+\n+            log.info(\"Executor await termination publishTimeout: {} secs\", publishTimeout);\n+            executor.awaitTermination(publishTimeout, TimeUnit.SECONDS);\n+            printStatus(counter.get(), totalStopwatch);\n+            success = true;\n+            result.setResponseMessage(String.valueOf(counter.get()));\n+            result.setResponseCodeOK();\n+        } catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "38a037808748c98c02853f092da21ee11c904d2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MTUyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451061520", "bodyText": "Missed this, will update", "author": "Nana-EC", "createdAt": "2020-07-07T18:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5Mzk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5NjQyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r450996425", "bodyText": "Publisher is a verb, indicating this class is a service class doing the actual publishing. Since it's not, maybe TopicMessagePublishRequest would be more accurate?", "author": "steven-sheehy", "createdAt": "2020-07-07T16:34:50Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.grpc.jmeter.props;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import java.util.Random;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.ToString;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+\n+@Data\n+@Builder\n+public class TopicMessagePublisher {", "originalCommit": "38a037808748c98c02853f092da21ee11c904d2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MTYyOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451061629", "bodyText": "Fair point", "author": "Nana-EC", "createdAt": "2020-07-07T18:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5NjQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5ODU4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r450998584", "bodyText": "Shouldn't generate a new Random object every message as it will return the same value in the same millisecond sometimes.", "author": "steven-sheehy", "createdAt": "2020-07-07T16:38:20Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.grpc.jmeter.props;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import java.util.Random;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.ToString;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+\n+@Data\n+@Builder\n+public class TopicMessagePublisher {\n+    private final ConsensusTopicId consensusTopicId;\n+    private final int messagesPerBatchCount;\n+    private final int messageByteSize;\n+    private final long publishInterval;\n+    private final long publishTimeout;\n+\n+    private AccountId operatorId;\n+\n+    @ToString.Exclude\n+    private Ed25519PrivateKey operatorPrivateKey;\n+\n+    private byte[] additionalChars;\n+\n+    public String getMessage() {\n+        int timeStampBytes = 8;\n+        int additionalBytes = messageByteSize <= timeStampBytes ? 0 : messageByteSize - 8;\n+\n+        // cache additional random bytes once to fit desired message byte array size\n+        if (additionalChars == null) {\n+            additionalChars = new byte[additionalBytes];\n+            new Random().nextBytes(additionalChars);", "originalCommit": "38a037808748c98c02853f092da21ee11c904d2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNDYzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451204633", "bodyText": "Replaced with RandomStringUtils.randomAlphanumeric suggestion", "author": "Nana-EC", "createdAt": "2020-07-07T23:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5ODU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjg3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451002872", "bodyText": "This method is a bit complex. Can we leverage a library Apache RandomStringUtils instead for the majority of the logic then just prepend the timestamp? Something like(Instant.now().toEpochMilli() + RandomStringUtils.randomAlphanumeric(x)).getBytes(\"UTF-8\")?", "author": "steven-sheehy", "createdAt": "2020-07-07T16:45:14Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.grpc.jmeter.props;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import java.util.Random;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.ToString;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+\n+@Data\n+@Builder\n+public class TopicMessagePublisher {\n+    private final ConsensusTopicId consensusTopicId;\n+    private final int messagesPerBatchCount;\n+    private final int messageByteSize;\n+    private final long publishInterval;\n+    private final long publishTimeout;\n+\n+    private AccountId operatorId;\n+\n+    @ToString.Exclude\n+    private Ed25519PrivateKey operatorPrivateKey;\n+\n+    private byte[] additionalChars;\n+\n+    public String getMessage() {", "originalCommit": "38a037808748c98c02853f092da21ee11c904d2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NDQ0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451064443", "bodyText": "Will look into it", "author": "Nana-EC", "createdAt": "2020-07-07T18:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNDgwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451204807", "bodyText": "Worked out but still requires the base64 encoding as explained in other comment to preserve byte[] size", "author": "Nana-EC", "createdAt": "2020-07-07T23:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNTU5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451005591", "bodyText": "Do we really need to base64 encode the timestamp? Is that just to match Jeffrey's code? That's not what it was doing before and a simple Instant.now().toEpochMilli() + \"_\" + baseMessage + \"_\" + i + 1; would be easier and clearer.", "author": "steven-sheehy", "createdAt": "2020-07-07T16:49:53Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -123,10 +124,8 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n         log.debug(\"Publishing {} message(s) to topicId : {}.\", numMessages, topicId);\n         List<TransactionReceipt> transactionReceiptList = new ArrayList<>();\n         for (int i = 0; i < numMessages; i++) {\n-            Instant instantRef = Instant.now();\n-            byte[] byteArray = ByteBuffer.allocate(8).putLong(instantRef.toEpochMilli()).array();\n-            String refInstant = new String(byteArray);\n-            String message = refInstant + \"_\" + baseMessage + \"_\" + i + 1;\n+            byte[] byteArray = Longs.toByteArray(Instant.now().toEpochMilli());\n+            String message = Base64.encodeBase64String(byteArray) + \"_\" + baseMessage + \"_\" + i + 1;", "originalCommit": "38a037808748c98c02853f092da21ee11c904d2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NjkzNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451066934", "bodyText": "The addition of the timestamp to the 1st 8 bytes is solely to match Jeffrey's code. The base64 encoding is for us only.\nSo turns out when the instant time has bytes that take on negative numbers the numbers of bytes changes when it gets converted to String due to encoding.\nAs such I was hitting issues on the subscribe side because the instant was no longer fully represented by the first 8 bytes, but sometimes the first 9, 10, 11 or 12 ... bytes depending.\nbase64 encoding preserves the byte array length\nSticking to 1st 8 bytes means subscribe logic only ever has to worry about 1st 8 bytes whether it's Jeffrey's or my code publishing.\nThough agreed on the easier and clearer suggestion. That's pretty much what I had before this update", "author": "Nana-EC", "createdAt": "2020-07-07T18:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNTU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNzE3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451007177", "bodyText": "Should use Long.BYTES for clarity here and other places.", "author": "steven-sheehy", "createdAt": "2020-07-07T16:52:31Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SubscriptionResponse.java", "diffHunk": "@@ -63,8 +66,9 @@ public void validateReceivedMessages() throws Exception {\n             MirrorConsensusTopicResponse mirrorConsensusTopicResponse = mirrorHCSResponseResponse\n                     .getMirrorConsensusTopicResponse();\n \n-            Long publishMillis = Longs.fromByteArray(Arrays.copyOfRange(mirrorConsensusTopicResponse.message, 0, 8));\n-            Instant publishInstant = Instant.ofEpochMilli(publishMillis);\n+            byte[] retrievedBytes = Arrays.copyOfRange(Base64.decodeBase64(mirrorConsensusTopicResponse.message), 0, 8);", "originalCommit": "38a037808748c98c02853f092da21ee11c904d2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NzU3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451067575", "bodyText": "Will update", "author": "Nana-EC", "createdAt": "2020-07-07T18:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNzE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwODA2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451008064", "bodyText": "These 3 variables should be declared private and final", "author": "steven-sheehy", "createdAt": "2020-07-07T16:54:03Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/TransactionSubmissionResult.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.result;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+@Data\n+@Log4j2\n+public class TransactionSubmissionResult {\n+\n+    private AtomicInteger counter = new AtomicInteger(0);", "originalCommit": "38a037808748c98c02853f092da21ee11c904d2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "443ffd868161a4026598d8dd57a55f52fa4f37eb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/443ffd868161a4026598d8dd57a55f52fa4f37eb", "message": "Addressed feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-07T23:40:44Z", "type": "commit"}]}