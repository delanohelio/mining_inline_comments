{"pr_number": 1361, "pr_title": "Automatically create monitor entities", "pr_createdAt": "2020-12-15T15:46:04Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1361", "timeline": [{"oid": "635bc1194169a396138742a598c930a16026bedd", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/635bc1194169a396138742a598c930a16026bedd", "message": "Auto create monitor entities\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-15T15:45:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU5MDc2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1361#discussion_r543590760", "bodyText": "This may be out of scope, but I'm wondering if this is enough to cover Token Transfers.  For HCS and crypto transfers it's enough to have created accounts and topics, but for Token Transfer it has to also associate the accounts to the token.", "author": "ijungmann", "createdAt": "2020-12-15T18:38:23Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/expression/ExpressionConverterImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package com.hedera.mirror.monitor.expression;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Named;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionType;\n+import com.hedera.datagenerator.sdk.supplier.token.TokenCreateTransactionSupplier;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.mirror.monitor.publish.PublishRequest;\n+import com.hedera.mirror.monitor.publish.PublishResponse;\n+import com.hedera.mirror.monitor.publish.TransactionPublisher;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class ExpressionConverterImpl implements ExpressionConverter {\n+\n+    private static final String EXPRESSION_START = \"${\";\n+    private static final String EXPRESSION_END = \"}\";\n+    private static final Pattern EXPRESSION_PATTERN = Pattern.compile(\"\\\\$\\\\{(account|token|topic)\\\\.([A-Za-z0-9_]+)}\");\n+\n+    private final Map<Expression, String> expressions = new ConcurrentHashMap<>();\n+    private final TransactionPublisher transactionPublisher;\n+\n+    @Override\n+    public String convert(String property) {\n+        if (!StringUtils.startsWith(property, EXPRESSION_START) || !StringUtils.endsWith(property, EXPRESSION_END)) {\n+            return property;\n+        }\n+\n+        Expression expression = parse(property);\n+        String convertedProperty = expressions.computeIfAbsent(expression, this::doConvert);\n+        log.info(\"Converted property {} to {}\", property, convertedProperty);\n+        return convertedProperty;\n+    }\n+\n+    private synchronized String doConvert(Expression expression) {\n+        if (expressions.containsKey(expression)) {\n+            return expressions.get(expression);\n+        }\n+\n+        return publish(expression);\n+    }\n+\n+    private String publish(Expression expression) {\n+        try {\n+            ExpressionType type = expression.getType();\n+            Class<? extends TransactionSupplier<?>> supplierClass = type.getTransactionType().getSupplier();\n+            TransactionSupplier<?> transactionSupplier = supplierClass.getConstructor().newInstance();\n+\n+            if (transactionSupplier instanceof TokenCreateTransactionSupplier) {", "originalCommit": "635bc1194169a396138742a598c930a16026bedd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY5MDQ1Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1361#discussion_r543690456", "bodyText": "This should be possible:\nscenarios:\n- name: HTS associate\n  limit: 1\n  properties:\n    accountId: ${account.them}\n    tokenId: ${token.foobar}\n  tps: 1\n  type: TOKEN_ASSOCIATE\n- name: HTS transfer\n  properties:\n    recipientAccountId: ${account.them}\n    senderAccountId: ${account.me}\n    tokenId: ${token.foobar}\n    transferType: BOTH\n  tps: 1\n  type: CRYPTO_TRANSFER\nUnfortunately, I can't get create token to work right now since it requires it to be signed by the treasury account.", "author": "steven-sheehy", "createdAt": "2020-12-15T21:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU5MDc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyMjU2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1361#discussion_r543722568", "bodyText": "Used operator for treasury account. Works now.", "author": "steven-sheehy", "createdAt": "2020-12-15T22:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU5MDc2MA=="}], "type": "inlineReview"}, {"oid": "200e0df5a9b67ecee8ea504cad80c5d153410a0d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/200e0df5a9b67ecee8ea504cad80c5d153410a0d", "message": "Fix code smells & token create\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-15T22:07:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzU4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1361#discussion_r543727580", "bodyText": "Sonarcloud doesn't like this.", "author": "ijungmann", "createdAt": "2020-12-15T22:17:42Z", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenCreateTransactionSupplier.java", "diffHunk": "@@ -47,25 +48,24 @@\n     private long maxTransactionFee = 1_000_000_000;\n \n     @NotBlank\n-    private String symbol = \"HMNT\";\n+    private String symbol = RandomStringUtils.randomAlphabetic(5);", "originalCommit": "200e0df5a9b67ecee8ea504cad80c5d153410a0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNDg4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1361#discussion_r543734883", "bodyText": "Yep, sonar can't differentiate between use of cryptography that needs to be secure and cases like this where it doesn't matter. I've replaced apache commons with a more complicated solution to make sonar happy.", "author": "steven-sheehy", "createdAt": "2020-12-15T22:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNTQ5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1361#discussion_r543735497", "bodyText": "As long as sonar is happy...", "author": "ijungmann", "createdAt": "2020-12-15T22:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzU4MA=="}], "type": "inlineReview"}, {"oid": "c44e8de8c59b9bd2357a8da99de1d8c83c6c3d7a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c44e8de8c59b9bd2357a8da99de1d8c83c6c3d7a", "message": "Fix security hotspot\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-15T22:29:54Z", "type": "commit"}]}