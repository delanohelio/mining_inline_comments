{"pr_number": 969, "pr_title": "State proof js demo", "pr_createdAt": "2020-08-18T18:27:49Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/969", "timeline": [{"oid": "6b8f05a1badaa8e8d84ff75a9ab2e945b01ae897", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6b8f05a1badaa8e8d84ff75a9ab2e945b01ae897", "message": "Initial scaffolding for StateProof CLI\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-14T06:15:00Z", "type": "commit"}, {"oid": "75f32ec62e5cfb7a361d0b6e4056d606b82a177a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/75f32ec62e5cfb7a361d0b6e4056d606b82a177a", "message": "Added node-rsa for signature verification\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-15T02:23:01Z", "type": "commit"}, {"oid": "bd0e93791fece764bd756570b1d23b27b9496256", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd0e93791fece764bd756570b1d23b27b9496256", "message": "Added test framework, added record_file read logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-17T22:42:53Z", "type": "commit"}, {"oid": "2e879e331b5968eaa1e964df96e14b0e390e4244", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2e879e331b5968eaa1e964df96e14b0e390e4244", "message": "Verified api call and record file parsing logic with some reorganization\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-18T18:19:01Z", "type": "commit"}, {"oid": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5a91993585b62f1203ec4fbdc6859d4fde116c8e", "message": "Cleaned up and fixed record hash digest logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-18T23:26:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMDczMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472600732", "bodyText": "for record file version 1, the hash is calculated on the whole file. The logic here will only hash format version + version + prev_hash marker + 48 byte prev hash for version 1.", "author": "xin-hedera", "createdAt": "2020-08-19T02:25:17Z", "path": "hedera-mirror-rest/state-proof-demo/recordFile.js", "diffHunk": "@@ -0,0 +1,153 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// recordFile object. Read buffer, parse file, potentially stores all transactionConsensusNs as keys, hash\n+// file_hash, consensus_start, consensus_end\n+// parse rcd file looking for transaction with matching consensus time stamp from transaction id\n+\n+// external libraries\n+const _ = require('lodash');\n+var crypto = require('crypto');\n+const {Transaction} = require('@hashgraph/sdk/lib/Transaction');\n+const {replaceSpecialCharsWithUnderScores} = require('./utils');\n+\n+class recordFile {\n+  constructor(recordFileBuffer, transactionId) {\n+    this.readRecordFile(recordFileBuffer, transactionId);\n+  }\n+\n+  readRecordFile(recordFileBuffer) {\n+    let recordFileHash = crypto.createHash('sha384');\n+    let recordFileContentsHash = crypto.createHash('sha384');\n+\n+    // read record file format version\n+    const recordFormatVersion = this.readIntFromBufferAndUpdateHash(recordFileBuffer, 0, recordFileHash);\n+    if (recordFormatVersion < 0 || recordFormatVersion > 3) {\n+      throw new Error(`Unexpected record file format version '${recordFormatVersion}'`);\n+    }\n+\n+    // version\n+    this.readIntFromBufferAndUpdateHash(recordFileBuffer, 4, recordFileHash);\n+\n+    const fileHashSize = 48; // number of bytes\n+    let index = 8;\n+\n+    this.transactionIdMap = {};\n+    while (index < recordFileBuffer.length - 1) {\n+      if (index < 0) {\n+        // reached end\n+        break;\n+      }\n+\n+      const typeDelimiter = recordFileBuffer[index++];\n+\n+      switch (typeDelimiter) {\n+        case 1:\n+          // RECORD_TYPE_PREV_HASH\n+          recordFileHash.update(Buffer.from([typeDelimiter]));\n+          this.prevHash = this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + fileHashSize,\n+            recordFileHash\n+          );\n+          index = index + fileHashSize;\n+          break;\n+        case 2:\n+          // RECORD_TYPE_RECORD\n+          recordFileContentsHash.update(Buffer.from([typeDelimiter]));", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NjM0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r473376346", "bodyText": "The logic seems to be correct , works for all the rcd files I'm trying and matches the logic in Utility.java that we use.\nAre you saying the mirror node on a whole is missing some logic?\nIf so we should open a ticket to cover that in the importer and here", "author": "Nana-EC", "createdAt": "2020-08-19T22:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMDczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MDY4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r474170688", "bodyText": "the hash logic is different than Utility.parseRecordFile\n\n  \n    \n      hedera-mirror-node/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java\n    \n    \n        Lines 147 to 153\n      in\n      e301647\n    \n    \n    \n    \n\n        \n          \n           MessageDigest md = MessageDigest.getInstance(FileDelimiter.HASH_ALGORITHM); \n        \n\n        \n          \n           MessageDigest mdForContent = md; \n        \n\n        \n          \n            \n        \n\n        \n          \n           int recordFormatVersion = readInt(dis, md); \n        \n\n        \n          \n           if (recordFormatVersion >= FileDelimiter.RECORD_FORMAT_VERSION) { \n        \n\n        \n          \n               mdForContent = MessageDigest.getInstance(FileDelimiter.HASH_ALGORITHM); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nIn parseRecordFile, when record format version is < 2 (i.e., 1), mdForContent == md, so for version 1, the hash is calculated on the whole file, for version >= 2, it's hash(file format version | version | prev_hash_marker | prev_hash | hash (remaining data))", "author": "xin-hedera", "createdAt": "2020-08-20T17:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMDczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4ODc4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r474788788", "bodyText": "Updated to match Utility.java", "author": "Nana-EC", "createdAt": "2020-08-21T16:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMDczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMTM3NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472601374", "bodyText": "Q: do we have record file version 3?", "author": "xin-hedera", "createdAt": "2020-08-19T02:26:18Z", "path": "hedera-mirror-rest/state-proof-demo/recordFile.js", "diffHunk": "@@ -0,0 +1,153 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// recordFile object. Read buffer, parse file, potentially stores all transactionConsensusNs as keys, hash\n+// file_hash, consensus_start, consensus_end\n+// parse rcd file looking for transaction with matching consensus time stamp from transaction id\n+\n+// external libraries\n+const _ = require('lodash');\n+var crypto = require('crypto');\n+const {Transaction} = require('@hashgraph/sdk/lib/Transaction');\n+const {replaceSpecialCharsWithUnderScores} = require('./utils');\n+\n+class recordFile {\n+  constructor(recordFileBuffer, transactionId) {\n+    this.readRecordFile(recordFileBuffer, transactionId);\n+  }\n+\n+  readRecordFile(recordFileBuffer) {\n+    let recordFileHash = crypto.createHash('sha384');\n+    let recordFileContentsHash = crypto.createHash('sha384');\n+\n+    // read record file format version\n+    const recordFormatVersion = this.readIntFromBufferAndUpdateHash(recordFileBuffer, 0, recordFileHash);\n+    if (recordFormatVersion < 0 || recordFormatVersion > 3) {", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4ODk0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r474788945", "bodyText": "NO, this should be > 2. Will update to match Utility anyway", "author": "Nana-EC", "createdAt": "2020-08-21T16:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMTM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMTc0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472601745", "bodyText": "nit: comment should be removed", "author": "xin-hedera", "createdAt": "2020-08-19T02:26:52Z", "path": "hedera-mirror-rest/state-proof-demo/recordFile.js", "diffHunk": "@@ -0,0 +1,153 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// recordFile object. Read buffer, parse file, potentially stores all transactionConsensusNs as keys, hash\n+// file_hash, consensus_start, consensus_end\n+// parse rcd file looking for transaction with matching consensus time stamp from transaction id\n+\n+// external libraries\n+const _ = require('lodash');\n+var crypto = require('crypto');\n+const {Transaction} = require('@hashgraph/sdk/lib/Transaction');\n+const {replaceSpecialCharsWithUnderScores} = require('./utils');\n+\n+class recordFile {\n+  constructor(recordFileBuffer, transactionId) {\n+    this.readRecordFile(recordFileBuffer, transactionId);\n+  }\n+\n+  readRecordFile(recordFileBuffer) {\n+    let recordFileHash = crypto.createHash('sha384');\n+    let recordFileContentsHash = crypto.createHash('sha384');\n+\n+    // read record file format version\n+    const recordFormatVersion = this.readIntFromBufferAndUpdateHash(recordFileBuffer, 0, recordFileHash);\n+    if (recordFormatVersion < 0 || recordFormatVersion > 3) {\n+      throw new Error(`Unexpected record file format version '${recordFormatVersion}'`);\n+    }\n+\n+    // version\n+    this.readIntFromBufferAndUpdateHash(recordFileBuffer, 4, recordFileHash);\n+\n+    const fileHashSize = 48; // number of bytes\n+    let index = 8;\n+\n+    this.transactionIdMap = {};\n+    while (index < recordFileBuffer.length - 1) {\n+      if (index < 0) {\n+        // reached end\n+        break;\n+      }\n+\n+      const typeDelimiter = recordFileBuffer[index++];\n+\n+      switch (typeDelimiter) {\n+        case 1:\n+          // RECORD_TYPE_PREV_HASH\n+          recordFileHash.update(Buffer.from([typeDelimiter]));\n+          this.prevHash = this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + fileHashSize,\n+            recordFileHash\n+          );\n+          index = index + fileHashSize;\n+          break;\n+        case 2:\n+          // RECORD_TYPE_RECORD\n+          recordFileContentsHash.update(Buffer.from([typeDelimiter]));\n+\n+          // transaction raw bytes\n+          let buf = recordFileBuffer.subarray(index, index + 4);\n+          recordFileContentsHash.update(buf);\n+          const transactionRawBytesLength = buf.readInt32BE(0);\n+          index = index + 4;\n+\n+          const transactionRawBuffer = this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + transactionRawBytesLength,\n+            recordFileContentsHash\n+          );\n+          index = index + transactionRawBytesLength;\n+\n+          // record raw bytes\n+          buf = recordFileBuffer.subarray(index, index + 4);\n+          recordFileContentsHash.update(buf);\n+          const recordRawBytesLength = buf.readInt32BE(0);\n+          index = index + 4;\n+\n+          // recordRawBuffer\n+          this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + recordRawBytesLength,\n+            recordFileContentsHash\n+          );\n+          index = index + recordRawBytesLength;\n+\n+          const transaction = Transaction.fromBytes(transactionRawBuffer);\n+          const transactionIdBody = transaction.id;\n+\n+          this.transactionIdMap[replaceSpecialCharsWithUnderScores(transactionIdBody.toString())] = transactionIdBody;\n+\n+          break;\n+        default:\n+          throw new Error(`Unexpected type delimiter '${typeDelimiter}' in record file at index '${index - 1}'`);\n+      }\n+    }\n+\n+    if (recordFormatVersion === 2) {\n+      recordFileHash.update(recordFileContentsHash.digest());\n+    }\n+\n+    // set recordFile hash\n+    // recordFileHash.digest(\"hex\")", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxMjg4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472612884", "bodyText": "while (index < recordFileBuffer.length) {\n\nAlso index won't < 0", "author": "xin-hedera", "createdAt": "2020-08-19T02:44:16Z", "path": "hedera-mirror-rest/state-proof-demo/recordFile.js", "diffHunk": "@@ -0,0 +1,153 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// recordFile object. Read buffer, parse file, potentially stores all transactionConsensusNs as keys, hash\n+// file_hash, consensus_start, consensus_end\n+// parse rcd file looking for transaction with matching consensus time stamp from transaction id\n+\n+// external libraries\n+const _ = require('lodash');\n+var crypto = require('crypto');\n+const {Transaction} = require('@hashgraph/sdk/lib/Transaction');\n+const {replaceSpecialCharsWithUnderScores} = require('./utils');\n+\n+class recordFile {\n+  constructor(recordFileBuffer, transactionId) {\n+    this.readRecordFile(recordFileBuffer, transactionId);\n+  }\n+\n+  readRecordFile(recordFileBuffer) {\n+    let recordFileHash = crypto.createHash('sha384');\n+    let recordFileContentsHash = crypto.createHash('sha384');\n+\n+    // read record file format version\n+    const recordFormatVersion = this.readIntFromBufferAndUpdateHash(recordFileBuffer, 0, recordFileHash);\n+    if (recordFormatVersion < 0 || recordFormatVersion > 3) {\n+      throw new Error(`Unexpected record file format version '${recordFormatVersion}'`);\n+    }\n+\n+    // version\n+    this.readIntFromBufferAndUpdateHash(recordFileBuffer, 4, recordFileHash);\n+\n+    const fileHashSize = 48; // number of bytes\n+    let index = 8;\n+\n+    this.transactionIdMap = {};\n+    while (index < recordFileBuffer.length - 1) {\n+      if (index < 0) {\n+        // reached end\n+        break;\n+      }", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NjkxMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r473376913", "bodyText": "Removed. Left over from an overflow case when the logic was still in flux.", "author": "Nana-EC", "createdAt": "2020-08-19T22:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxMjg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxMzYzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472613636", "bodyText": "readIntFromBufferAndUpdateHash", "author": "xin-hedera", "createdAt": "2020-08-19T02:45:20Z", "path": "hedera-mirror-rest/state-proof-demo/recordFile.js", "diffHunk": "@@ -0,0 +1,153 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// recordFile object. Read buffer, parse file, potentially stores all transactionConsensusNs as keys, hash\n+// file_hash, consensus_start, consensus_end\n+// parse rcd file looking for transaction with matching consensus time stamp from transaction id\n+\n+// external libraries\n+const _ = require('lodash');\n+var crypto = require('crypto');\n+const {Transaction} = require('@hashgraph/sdk/lib/Transaction');\n+const {replaceSpecialCharsWithUnderScores} = require('./utils');\n+\n+class recordFile {\n+  constructor(recordFileBuffer, transactionId) {\n+    this.readRecordFile(recordFileBuffer, transactionId);\n+  }\n+\n+  readRecordFile(recordFileBuffer) {\n+    let recordFileHash = crypto.createHash('sha384');\n+    let recordFileContentsHash = crypto.createHash('sha384');\n+\n+    // read record file format version\n+    const recordFormatVersion = this.readIntFromBufferAndUpdateHash(recordFileBuffer, 0, recordFileHash);\n+    if (recordFormatVersion < 0 || recordFormatVersion > 3) {\n+      throw new Error(`Unexpected record file format version '${recordFormatVersion}'`);\n+    }\n+\n+    // version\n+    this.readIntFromBufferAndUpdateHash(recordFileBuffer, 4, recordFileHash);\n+\n+    const fileHashSize = 48; // number of bytes\n+    let index = 8;\n+\n+    this.transactionIdMap = {};\n+    while (index < recordFileBuffer.length - 1) {\n+      if (index < 0) {\n+        // reached end\n+        break;\n+      }\n+\n+      const typeDelimiter = recordFileBuffer[index++];\n+\n+      switch (typeDelimiter) {\n+        case 1:\n+          // RECORD_TYPE_PREV_HASH\n+          recordFileHash.update(Buffer.from([typeDelimiter]));\n+          this.prevHash = this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + fileHashSize,\n+            recordFileHash\n+          );\n+          index = index + fileHashSize;\n+          break;\n+        case 2:\n+          // RECORD_TYPE_RECORD\n+          recordFileContentsHash.update(Buffer.from([typeDelimiter]));\n+\n+          // transaction raw bytes\n+          let buf = recordFileBuffer.subarray(index, index + 4);\n+          recordFileContentsHash.update(buf);\n+          const transactionRawBytesLength = buf.readInt32BE(0);\n+          index = index + 4;\n+\n+          const transactionRawBuffer = this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + transactionRawBytesLength,\n+            recordFileContentsHash\n+          );\n+          index = index + transactionRawBytesLength;\n+\n+          // record raw bytes\n+          buf = recordFileBuffer.subarray(index, index + 4);\n+          recordFileContentsHash.update(buf);\n+          const recordRawBytesLength = buf.readInt32BE(0);", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxNzUwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472617503", "bodyText": "same as recordFile.js", "author": "xin-hedera", "createdAt": "2020-08-19T02:51:29Z", "path": "hedera-mirror-rest/state-proof-demo/signatureFile.js", "diffHunk": "@@ -0,0 +1,65 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'uses strict';\n+\n+// parse signature file, retrieve hash and node id\n+\n+// external libraries\n+class signatureFile {\n+  constructor(signatureFileString, nodeid) {\n+    this.setHashAndSignature(signatureFileString);\n+    this.nodeId = nodeid;\n+  }\n+\n+  // Extract the Hash and signature from the file.\n+  setHashAndSignature(signatureFileBuffer) {\n+    const fileHashSize = 48; // number of bytes\n+    let index = 0;\n+    while (index < signatureFileBuffer.length - 1) {\n+      if (index < 0) {\n+        // reached end\n+        break;\n+      }", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxOTk5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472619996", "bodyText": "nit: better rename signatureFileString to signatureFileBuffer", "author": "xin-hedera", "createdAt": "2020-08-19T02:55:14Z", "path": "hedera-mirror-rest/state-proof-demo/signatureFile.js", "diffHunk": "@@ -0,0 +1,65 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'uses strict';\n+\n+// parse signature file, retrieve hash and node id\n+\n+// external libraries\n+class signatureFile {\n+  constructor(signatureFileString, nodeid) {", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODQzNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472628434", "bodyText": "readIntFromBufferAndUpdateHash", "author": "xin-hedera", "createdAt": "2020-08-19T03:08:43Z", "path": "hedera-mirror-rest/state-proof-demo/recordFile.js", "diffHunk": "@@ -0,0 +1,153 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// recordFile object. Read buffer, parse file, potentially stores all transactionConsensusNs as keys, hash\n+// file_hash, consensus_start, consensus_end\n+// parse rcd file looking for transaction with matching consensus time stamp from transaction id\n+\n+// external libraries\n+const _ = require('lodash');\n+var crypto = require('crypto');\n+const {Transaction} = require('@hashgraph/sdk/lib/Transaction');\n+const {replaceSpecialCharsWithUnderScores} = require('./utils');\n+\n+class recordFile {\n+  constructor(recordFileBuffer, transactionId) {\n+    this.readRecordFile(recordFileBuffer, transactionId);\n+  }\n+\n+  readRecordFile(recordFileBuffer) {\n+    let recordFileHash = crypto.createHash('sha384');\n+    let recordFileContentsHash = crypto.createHash('sha384');\n+\n+    // read record file format version\n+    const recordFormatVersion = this.readIntFromBufferAndUpdateHash(recordFileBuffer, 0, recordFileHash);\n+    if (recordFormatVersion < 0 || recordFormatVersion > 3) {\n+      throw new Error(`Unexpected record file format version '${recordFormatVersion}'`);\n+    }\n+\n+    // version\n+    this.readIntFromBufferAndUpdateHash(recordFileBuffer, 4, recordFileHash);\n+\n+    const fileHashSize = 48; // number of bytes\n+    let index = 8;\n+\n+    this.transactionIdMap = {};\n+    while (index < recordFileBuffer.length - 1) {\n+      if (index < 0) {\n+        // reached end\n+        break;\n+      }\n+\n+      const typeDelimiter = recordFileBuffer[index++];\n+\n+      switch (typeDelimiter) {\n+        case 1:\n+          // RECORD_TYPE_PREV_HASH\n+          recordFileHash.update(Buffer.from([typeDelimiter]));\n+          this.prevHash = this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + fileHashSize,\n+            recordFileHash\n+          );\n+          index = index + fileHashSize;\n+          break;\n+        case 2:\n+          // RECORD_TYPE_RECORD\n+          recordFileContentsHash.update(Buffer.from([typeDelimiter]));\n+\n+          // transaction raw bytes\n+          let buf = recordFileBuffer.subarray(index, index + 4);\n+          recordFileContentsHash.update(buf);\n+          const transactionRawBytesLength = buf.readInt32BE(0);", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzMjQ1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472632452", "bodyText": "we should also parse the the TransactionRecord and store the transaction + transaction record pair. The status in the receipt in transaction record tells whether the corresponding transaction is successful or not.\nThe stateproof alpha rest API only provides proof  for successfully transactions. My understanding is it's possible in the same record file, we have one successful transaction and 0-N duplicate transactions, all with the same transaction id.", "author": "xin-hedera", "createdAt": "2020-08-19T03:15:08Z", "path": "hedera-mirror-rest/state-proof-demo/recordFile.js", "diffHunk": "@@ -0,0 +1,153 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// recordFile object. Read buffer, parse file, potentially stores all transactionConsensusNs as keys, hash\n+// file_hash, consensus_start, consensus_end\n+// parse rcd file looking for transaction with matching consensus time stamp from transaction id\n+\n+// external libraries\n+const _ = require('lodash');\n+var crypto = require('crypto');\n+const {Transaction} = require('@hashgraph/sdk/lib/Transaction');\n+const {replaceSpecialCharsWithUnderScores} = require('./utils');\n+\n+class recordFile {\n+  constructor(recordFileBuffer, transactionId) {\n+    this.readRecordFile(recordFileBuffer, transactionId);\n+  }\n+\n+  readRecordFile(recordFileBuffer) {\n+    let recordFileHash = crypto.createHash('sha384');\n+    let recordFileContentsHash = crypto.createHash('sha384');\n+\n+    // read record file format version\n+    const recordFormatVersion = this.readIntFromBufferAndUpdateHash(recordFileBuffer, 0, recordFileHash);\n+    if (recordFormatVersion < 0 || recordFormatVersion > 3) {\n+      throw new Error(`Unexpected record file format version '${recordFormatVersion}'`);\n+    }\n+\n+    // version\n+    this.readIntFromBufferAndUpdateHash(recordFileBuffer, 4, recordFileHash);\n+\n+    const fileHashSize = 48; // number of bytes\n+    let index = 8;\n+\n+    this.transactionIdMap = {};\n+    while (index < recordFileBuffer.length - 1) {\n+      if (index < 0) {\n+        // reached end\n+        break;\n+      }\n+\n+      const typeDelimiter = recordFileBuffer[index++];\n+\n+      switch (typeDelimiter) {\n+        case 1:\n+          // RECORD_TYPE_PREV_HASH\n+          recordFileHash.update(Buffer.from([typeDelimiter]));\n+          this.prevHash = this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + fileHashSize,\n+            recordFileHash\n+          );\n+          index = index + fileHashSize;\n+          break;\n+        case 2:\n+          // RECORD_TYPE_RECORD\n+          recordFileContentsHash.update(Buffer.from([typeDelimiter]));\n+\n+          // transaction raw bytes\n+          let buf = recordFileBuffer.subarray(index, index + 4);\n+          recordFileContentsHash.update(buf);\n+          const transactionRawBytesLength = buf.readInt32BE(0);\n+          index = index + 4;\n+\n+          const transactionRawBuffer = this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + transactionRawBytesLength,\n+            recordFileContentsHash\n+          );\n+          index = index + transactionRawBytesLength;\n+\n+          // record raw bytes\n+          buf = recordFileBuffer.subarray(index, index + 4);\n+          recordFileContentsHash.update(buf);\n+          const recordRawBytesLength = buf.readInt32BE(0);\n+          index = index + 4;\n+\n+          // recordRawBuffer\n+          this.readBytesFromBufferAndUpdateHash(\n+            recordFileBuffer,\n+            index,\n+            index + recordRawBytesLength,\n+            recordFileContentsHash\n+          );", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NTk5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r473395996", "bodyText": "Good point.\nAdded success logic. Not sure we need to store the air though since they aren't utilized in the logic. Only the transactionId is needed to verify said transaction is in recordFile", "author": "Nana-EC", "createdAt": "2020-08-19T22:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzMjQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1NDU1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472654555", "bodyText": "verifyRSASignature is not used, so the dependency node-rsa should also be removed", "author": "xin-hedera", "createdAt": "2020-08-19T03:51:25Z", "path": "hedera-mirror-rest/state-proof-demo/transactionValidator.js", "diffHunk": "@@ -0,0 +1,128 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'uses strict';\n+\n+// responsible for validating files. Call object methods for certain operations\n+\n+// external libraries\n+const _ = require('lodash');\n+const NodeRSA = require('node-rsa');\n+const crypto = require('crypto');\n+\n+/**\n+ * For signature files with the same file name:\n+ * (1) verify that the signature files are signed by corresponding node's PublicKey provided by addressBook\n+ * (2) For valid signature files, we compare their Hashes to see if at least 1/3 of hashes match.\n+ * (3) We compare the hash of data file with Hash which has been agreed on by valid signatures,\n+ * if match return true otherwise false for stateProof\n+ */\n+\n+const performStateProof = (nodePublicKeyMap, signatureFilesMap, recordFileHash) => {\n+  let validated = false;\n+  const consensusValidatedHash = verifySignatures(nodePublicKeyMap, signatureFilesMap);\n+  if (_.isNull(consensusValidatedHash)) {\n+    console.error(`Unable to validate signature files!`);\n+    return validated;\n+  }\n+\n+  return validateRecordFileHash(recordFileHash, consensusValidatedHash);\n+};\n+\n+// given map of addressBook node -> public Key & map of signatureFiles node -> Signature can do verifySignature()\n+// for every signature from a file verify the signature against the appropriate public key form address book\n+// ensure # of validations match node count or at least is consensus by 1/3\n+const verifySignatures = (nodePublicKeyMap, signatureFilesMap) => {\n+  let validatedSignatureFilesMap = {};\n+  let consensusHashMap = {hash: null, count: 0};\n+  let maxHashCount = 0;\n+\n+  // create a map of hash -> nodeId to show alignment\n+  _.forEach(signatureFilesMap, (sigMapItem) => {\n+    console.info(`Verify signatures passed for node ${sigMapItem.nodeId}`);\n+    const publicKeyBuffer = nodePublicKeyMap[sigMapItem.nodeId].publicKey;\n+    const sigMapItemHashHex = sigMapItem.hash.toString('hex');\n+    if (verifySignature(publicKeyBuffer, sigMapItem.hash, sigMapItem.signature)) {\n+      if (_.isEmpty(validatedSignatureFilesMap[sigMapItemHashHex])) {\n+        validatedSignatureFilesMap[sigMapItemHashHex] = [sigMapItem.nodeId];\n+      } else {\n+        validatedSignatureFilesMap[sigMapItemHashHex].push(sigMapItem.nodeId);\n+        let nodeCount = validatedSignatureFilesMap[sigMapItemHashHex].length;\n+\n+        // determine max. Sufficient to do here as you'd never want the max to occur in the if where the count would be 1\n+        if (nodeCount > maxHashCount) {\n+          maxHashCount = nodeCount;\n+          consensusHashMap.hash = sigMapItemHashHex;\n+          consensusHashMap.count = maxHashCount;\n+        }\n+      }\n+    } else {\n+      console.error(`Failed to verify signatures for node ${sigMapItem.nodeId}!`);\n+    }\n+  });\n+\n+  // return hash if it was observed by a super majority\n+  return maxHashCount >= Math.ceil(signatureFilesMap.length / 3.0) ? consensusHashMap.hash : null;\n+};\n+\n+//compare the hash of data file with Hash which has been agreed on by valid signatures\n+const validateRecordFileHash = (recordFileHash, consensusValidatedHash) => {\n+  let valid = true;\n+\n+  if (recordFileHash !== consensusValidatedHash) {\n+    valid = false;\n+    console.error(\n+      `Hash mismatch between recordFileHash: ${recordFileHash} and consensus validated signature files hash: ${consensusValidatedHash}!`\n+    );\n+  }\n+\n+  return valid;\n+};\n+\n+const verifyRSASignature = (hexEncodedPublicKey, hash, signature) => {\n+  let key = new NodeRSA();\n+  key.importKey(\n+    {\n+      n: Buffer.from(hexEncodedPublicKey, 'hex'),\n+      e: 65537, // public exponent. 65537 by default.\n+    },\n+    'components-public'\n+  );\n+\n+  return key.verify(hash, signature, 'buffer', 'buffer');\n+};", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1ODMxMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472658312", "bodyText": "nit: return stringToFormat.replace(/[.@\\-]/g, '_');", "author": "xin-hedera", "createdAt": "2020-08-19T03:57:30Z", "path": "hedera-mirror-rest/state-proof-demo/utils.js", "diffHunk": "@@ -0,0 +1,100 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'uses strict';\n+\n+// external libraries\n+const fs = require('fs');\n+const fetch = require('node-fetch');\n+const AbortController = require('abort-controller');\n+\n+const base64StringToBuffer = (base64String) => {\n+  return Buffer.from(base64String, 'base64');\n+};\n+\n+const replaceSpecialCharsWithUnderScores = (stringToFormat) => {\n+  return stringToFormat.replace(/\\./g, '_').replace(/\\@/g, '_').replace(/\\-/g, '_');", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2NjYyNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472666626", "bodyText": "nit: validated is always false, can eliminate the variable and just return false", "author": "xin-hedera", "createdAt": "2020-08-19T04:11:07Z", "path": "hedera-mirror-rest/state-proof-demo/transactionValidator.js", "diffHunk": "@@ -0,0 +1,128 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'uses strict';\n+\n+// responsible for validating files. Call object methods for certain operations\n+\n+// external libraries\n+const _ = require('lodash');\n+const NodeRSA = require('node-rsa');\n+const crypto = require('crypto');\n+\n+/**\n+ * For signature files with the same file name:\n+ * (1) verify that the signature files are signed by corresponding node's PublicKey provided by addressBook\n+ * (2) For valid signature files, we compare their Hashes to see if at least 1/3 of hashes match.\n+ * (3) We compare the hash of data file with Hash which has been agreed on by valid signatures,\n+ * if match return true otherwise false for stateProof\n+ */\n+\n+const performStateProof = (nodePublicKeyMap, signatureFilesMap, recordFileHash) => {\n+  let validated = false;\n+  const consensusValidatedHash = verifySignatures(nodePublicKeyMap, signatureFilesMap);\n+  if (_.isNull(consensusValidatedHash)) {\n+    console.error(`Unable to validate signature files!`);\n+    return validated;\n+  }", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2ODM2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472668366", "bodyText": "unrelated comment", "author": "xin-hedera", "createdAt": "2020-08-19T04:14:00Z", "path": "hedera-mirror-rest/state-proof-demo/tests/record.test.js", "diffHunk": "@@ -0,0 +1,32 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {recordFile} = require('../recordFile');\n+const {base64StringToBuffer, readJSONFile} = require('../utils');\n+\n+const stateProofJson = readJSONFile('stateProofSample.json');\n+\n+test('signatureFile test', () => {\n+  // const signatureBase64 = \"BEldxQ1jI9TVJj002+/nwgoGV6L6X+DYwBGgH0ondXolmYfa0hD7lZa8WozH+9u6MwMAAAGAW368fmoJsZme3vwzERrctK60l4EJscbU2Z06DjEaSaE1kkngE9PQdMs0roNfE/eniwVNzRbASlEfqZM/SccYiZSBkIzFOarfWDV5aP2F8+xwdJ0Idklw+ezH/Zyz6GEZsDxViQ6pMqVj1r40lcbVCyKbxUK2gKX/OsDOkyobTHtICRbiMKgcUESrfuG5EK1fskVOqLB27dHJX5AmjxGp9CAJfQD85heMxVNkHe73F2xwVSTA33NHw8YU59svk952Q1QyGb7iCGLjJSQDvdChZC/5Ikl7RLYwnCKYJHhVyRWeQ8aH+miKnnPGqkTjpKJNW+WXU6UI6r0r55VlwScqPLonjzgRy0x7b8fhBPPa9M+fq8aCOwacuAymD29uTY6/6NVwSFt8zhc53HPUZmt5vTpUtwOJhFaWk2KJ3buWQDmr7+sCSV7Lj5qCl2sQ3QmuIfDhRpNDsd3Xuvjk9K4f9SAKwAkyFhhbp79cRKC8g4ZIwejiGMTXW3dOnv0CcKTv\";", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2ODU3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472668572", "bodyText": "test name mismatch", "author": "xin-hedera", "createdAt": "2020-08-19T04:14:21Z", "path": "hedera-mirror-rest/state-proof-demo/tests/record.test.js", "diffHunk": "@@ -0,0 +1,32 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {recordFile} = require('../recordFile');\n+const {base64StringToBuffer, readJSONFile} = require('../utils');\n+\n+const stateProofJson = readJSONFile('stateProofSample.json');\n+\n+test('signatureFile test', () => {", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY3MDMzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472670338", "bodyText": "recordFile should not have a transactionId param", "author": "xin-hedera", "createdAt": "2020-08-19T04:17:04Z", "path": "hedera-mirror-rest/state-proof-demo/recordFile.js", "diffHunk": "@@ -0,0 +1,153 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// recordFile object. Read buffer, parse file, potentially stores all transactionConsensusNs as keys, hash\n+// file_hash, consensus_start, consensus_end\n+// parse rcd file looking for transaction with matching consensus time stamp from transaction id\n+\n+// external libraries\n+const _ = require('lodash');\n+var crypto = require('crypto');\n+const {Transaction} = require('@hashgraph/sdk/lib/Transaction');\n+const {replaceSpecialCharsWithUnderScores} = require('./utils');\n+\n+class recordFile {\n+  constructor(recordFileBuffer, transactionId) {\n+    this.readRecordFile(recordFileBuffer, transactionId);\n+  }", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY3MTA1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472671051", "bodyText": "rename to recordFile.test.js to match source file?", "author": "xin-hedera", "createdAt": "2020-08-19T04:18:12Z", "path": "hedera-mirror-rest/state-proof-demo/tests/record.test.js", "diffHunk": "@@ -0,0 +1,32 @@\n+/*-", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY3MTMzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r472671331", "bodyText": "better remove the comment", "author": "xin-hedera", "createdAt": "2020-08-19T04:18:40Z", "path": "hedera-mirror-rest/state-proof-demo/tests/signatureFile.test.js", "diffHunk": "@@ -0,0 +1,33 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {signatureFile} = require('../signatureFile');\n+const {base64StringToBuffer, readJSONFile} = require('../utils');\n+\n+const stateProofJson = readJSONFile('stateProofSample.json');\n+\n+test('signatureFile test', () => {\n+  // const signatureBase64 = \"BEldxQ1jI9TVJj002+/nwgoGV6L6X+DYwBGgH0ondXolmYfa0hD7lZa8WozH+9u6MwMAAAGAW368fmoJsZme3vwzERrctK60l4EJscbU2Z06DjEaSaE1kkngE9PQdMs0roNfE/eniwVNzRbASlEfqZM/SccYiZSBkIzFOarfWDV5aP2F8+xwdJ0Idklw+ezH/Zyz6GEZsDxViQ6pMqVj1r40lcbVCyKbxUK2gKX/OsDOkyobTHtICRbiMKgcUESrfuG5EK1fskVOqLB27dHJX5AmjxGp9CAJfQD85heMxVNkHe73F2xwVSTA33NHw8YU59svk952Q1QyGb7iCGLjJSQDvdChZC/5Ikl7RLYwnCKYJHhVyRWeQ8aH+miKnnPGqkTjpKJNW+WXU6UI6r0r55VlwScqPLonjzgRy0x7b8fhBPPa9M+fq8aCOwacuAymD29uTY6/6NVwSFt8zhc53HPUZmt5vTpUtwOJhFaWk2KJ3buWQDmr7+sCSV7Lj5qCl2sQ3QmuIfDhRpNDsd3Xuvjk9K4f9SAKwAkyFhhbp79cRKC8g4ZIwejiGMTXW3dOnv0CcKTv\";", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NTY5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r473075695", "bodyText": "prefer to capitalize constructors", "author": "xin-hedera", "createdAt": "2020-08-19T14:32:07Z", "path": "hedera-mirror-rest/state-proof-demo/addressBook.js", "diffHunk": "@@ -0,0 +1,54 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// addressBook object. Parse string to object, provide methods to pull info\n+\n+// external libraries\n+const _ = require('lodash');\n+const {NodeAddressBook} = require('@hashgraph/sdk/lib/generated/BasicTypes_pb');\n+\n+class addressBook {", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NTkxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r473075919", "bodyText": "nodeAddress.getNodeid() === 0\nsuggestion, you can configure idea to apply the eslint configuration I added in the hedera-mirror-rest folder,\nPreferences -> Languages & Frameworks -> Javascript -> Code Quality Tools -> Eslint, set to Automatic Eslint configuration. Then idea will highlight common lint issues.", "author": "xin-hedera", "createdAt": "2020-08-19T14:32:25Z", "path": "hedera-mirror-rest/state-proof-demo/addressBook.js", "diffHunk": "@@ -0,0 +1,54 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'uses strict';\n+\n+// addressBook object. Parse string to object, provide methods to pull info\n+\n+// external libraries\n+const _ = require('lodash');\n+const {NodeAddressBook} = require('@hashgraph/sdk/lib/generated/BasicTypes_pb');\n+\n+class addressBook {\n+  constructor(buffer) {\n+    let addressBook = NodeAddressBook.deserializeBinary(buffer);\n+    console.log(`${addressBook.getNodeaddressList().length} node(s) found in address book`);\n+    this.nodeList = addressBook.getNodeaddressList();\n+    this.nodeIdPublicKeyPairs = {};\n+    this.setNodeIdPublicKeyPairs();\n+  }\n+\n+  setNodeIdPublicKeyPairs() {\n+    _.forEach(this.nodeList, (nodeAddress) => {\n+      let node;\n+      if (_.isUndefined(nodeAddress.getNodeid()) || nodeAddress.getNodeid() == 0) {", "originalCommit": "5a91993585b62f1203ec4fbdc6859d4fde116c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1563413d22e2ccb8c0edd364d46baa9443ac128e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1563413d22e2ccb8c0edd364d46baa9443ac128e", "message": "Cleaned up and fixed transactions bytes reading\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-19T21:43:50Z", "type": "commit"}, {"oid": "84967f34c08fa16d300eaa961f8ad8dc9d155363", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/84967f34c08fa16d300eaa961f8ad8dc9d155363", "message": "Adeed logic to only map successful transactions\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-19T22:47:20Z", "type": "commit"}, {"oid": "17c30c04288c431fcdcb27398d5d1dac98878029", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/17c30c04288c431fcdcb27398d5d1dac98878029", "message": "Fixed up recordFileVersion logic and cleaned up a bit\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-21T16:01:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NDczMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r474994733", "bodyText": "min number of signature files shouldn't be 3, right? it depends on how many nodes in the network.", "author": "xin-hedera", "createdAt": "2020-08-21T22:24:13Z", "path": "hedera-mirror-rest/state-proof-demo/StateProof.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Hedera Mirror State Proof\n+\n+## State Proof Logic\n+The CLI takes the following steps to prove legitimacy of provided transaction ID\n+\n+Step 1: Obtains user input of transactionId and other params\n+\n+Step 2: Makes a REST API call to the mirror node to retrieve stateproof supporting files - addressBook(s), signature files and a record file.\n+\n+Step 3 : Store files locally and verifies at least 1 addressBook, 3 signatures, 1 rcd file were retrieved.", "originalCommit": "17c30c04288c431fcdcb27398d5d1dac98878029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxOTM4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r475319388", "bodyText": "Yes, it should be dependent on the network size but to get consensus of hash you need at least 3.\nIf should in most cases be much greater than 3.", "author": "Nana-EC", "createdAt": "2020-08-24T03:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NDczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNTUyNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r475635524", "bodyText": "consensus is reached when >= 1/3 nodes have the same hash. for testnet and previewnet, there are 4 nodes, so the required minimum is 2 for the two networks.", "author": "xin-hedera", "createdAt": "2020-08-24T14:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NDczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4MzY3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r475783670", "bodyText": "I think we're in agreement here or are you suggesting the minimum be 4?\nMathematically for there to be consensus of any kind there needs to at least be 3 nodes regardless of the network, hence 3 signature files.\nI guess I could make it check if the # of sig files is at least 1/3 of the number of nodes noted by the address book.", "author": "Nana-EC", "createdAt": "2020-08-24T17:36:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NDczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwODg2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r475808860", "bodyText": "Changed to be at least 2.", "author": "Nana-EC", "createdAt": "2020-08-24T18:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NDczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwMTA2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r475001061", "bodyText": "the sample command line has the wrong transaction ID, thus verification result is false. should use 0.0.94139-1570800748-313194300", "author": "xin-hedera", "createdAt": "2020-08-21T22:49:36Z", "path": "hedera-mirror-rest/state-proof-demo/StateProof.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Hedera Mirror State Proof\n+\n+## State Proof Logic\n+The CLI takes the following steps to prove legitimacy of provided transaction ID\n+\n+Step 1: Obtains user input of transactionId and other params\n+\n+Step 2: Makes a REST API call to the mirror node to retrieve stateproof supporting files - addressBook(s), signature files and a record file.\n+\n+Step 3 : Store files locally and verifies at least 1 addressBook, 3 signatures, 1 rcd file were retrieved.\n+\n+Step 4: Parses AddressBook(s) pulling out and creating a map of nodeIds to public keys\n+\n+Step 5: Parses signature file buffer pulling out signature and hash from each file\n+\n+Step 6: Parses record file pulling out file hash and a map of transactionsIds\n+\n+Step 7: Verified the record file contains the requested transactionId\n+\n+Step 8: Verifies the public keys of each node were used to sign the hashes noted in the signature files and produced the provided signatures.\n+\n+Step 9: Verifies there is a hash from the signatures files that is matched by at least 1/3 of the nodes.\n+\n+Step 10: Verified the record file hash matches the hash that reached 1/3 consensus from nodes.\n+\n+Step 11: Returns true if all  verifications pass\n+\n+## Installation\n+From `state-proof-demo/` run\n+\n+`npm install -g .`\n+\n+## Run\n+From command line run\n+\n+`state-proof -t <transactionId> -e <env> -sample <true|false>`\n+\n+### Sample Case\n+To verify the sample case run teh following command\n+\n+`state-proof -t 0.0.94139-11965562-313194 -e dev -sample true`", "originalCommit": "17c30c04288c431fcdcb27398d5d1dac98878029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxOTU2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/969#discussion_r475319569", "bodyText": "Fixed", "author": "Nana-EC", "createdAt": "2020-08-24T03:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwMTA2MQ=="}], "type": "inlineReview"}, {"oid": "5b5514d0b105d1b5a8bf2219804187849389ad1f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5b5514d0b105d1b5a8bf2219804187849389ad1f", "message": "Update number of file check logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-24T17:55:18Z", "type": "commit"}, {"oid": "ae29fe7fe5cc7a40678fb7f7caf1d424f5442fb1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ae29fe7fe5cc7a40678fb7f7caf1d424f5442fb1", "message": " Updated sample command in documentation\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-08-24T18:19:51Z", "type": "commit"}]}