{"pr_number": 797, "pr_title": "Add Container Support for large db perf tests", "pr_createdAt": "2020-05-30T00:04:36Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/797", "timeline": [{"oid": "089f8fbf726e393eb3e05ad883885d2402f80003", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/089f8fbf726e393eb3e05ad883885d2402f80003", "message": "Added bucket file download and pg restore logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "895d1a52190d9d584ba3f28d87b7f7cee8129e30", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/895d1a52190d9d584ba3f28d87b7f7cee8129e30", "message": "Using ubuntu machine\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "a493d2ba6853ab9894c754d1158d53af664e44cb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a493d2ba6853ab9894c754d1158d53af664e44cb", "message": "use orb to allow gsutil\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "c4e8a84ac6c271f5a4eb0c49defe43a9b2e7d288", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c4e8a84ac6c271f5a4eb0c49defe43a9b2e7d288", "message": "removed orb\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "ae8af5bb2a5af4e47eb31580af0f11bba87e97c9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ae8af5bb2a5af4e47eb31580af0f11bba87e97c9", "message": "remove docker images\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "caffd253778da8986177f1284f1f18b028a553d5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/caffd253778da8986177f1284f1f18b028a553d5", "message": "Add Boto bug workaround\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "066a0d51c55e63ceeabea2421aa05c158d0d0cbb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/066a0d51c55e63ceeabea2421aa05c158d0d0cbb", "message": "Add gcloud auth\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "a31e882a7f9ddc6894e0e4977703cc634f0daa72", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a31e882a7f9ddc6894e0e4977703cc634f0daa72", "message": "CEntralized open jdk install\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "1e44da4d00c6dc595c1289f22cc22c01bbc4a14d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1e44da4d00c6dc595c1289f22cc22c01bbc4a14d", "message": "Add postgres binaries\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "c9550cb6e4d537773bc149261da342ada477569f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c9550cb6e4d537773bc149261da342ada477569f", "message": "Add crcmod download efficiency\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "4d1e39f4cf66d5d8d078cf29e9baf7f3339af60b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4d1e39f4cf66d5d8d078cf29e9baf7f3339af60b", "message": "Fix crcmod install\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "a012e6776e12083fccad22e41eea6987a99d8ea5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a012e6776e12083fccad22e41eea6987a99d8ea5", "message": "See lib path\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "d625a34bb146217c9248edb006d73248bea944cc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d625a34bb146217c9248edb006d73248bea944cc", "message": "Install postgres\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "91ac131432fe981680022f6c3fb735aedaa1f201", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/91ac131432fe981680022f6c3fb735aedaa1f201", "message": "Raw psql restore\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "c01411e70350c118048bb12de6b3e1ba129bcf16", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c01411e70350c118048bb12de6b3e1ba129bcf16", "message": "Centralized gsutil and pg logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "0ec669ea441b12cf12b855b76d41223d20354bda", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0ec669ea441b12cf12b855b76d41223d20354bda", "message": "Reverted to docker images\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "8c27334fd09ea7f9787aeeca267f486353b93e7e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8c27334fd09ea7f9787aeeca267f486353b93e7e", "message": "add gcloud install and auth\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:14Z", "type": "commit"}, {"oid": "137939cfce66ac49d0fb17f0e99e88641fb92e8c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/137939cfce66ac49d0fb17f0e99e88641fb92e8c", "message": "Added dbperf section to house docker images and scripts that can be utilized for various perf scenarios locally and in automation\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:16Z", "type": "commit"}, {"oid": "d47675574f6fbc6dd2df5c0dd3e2c1d536396684", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d47675574f6fbc6dd2df5c0dd3e2c1d536396684", "message": "Cleaned up circleciconfig\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:16Z", "type": "commit"}, {"oid": "4239e0041a318a038ccbfe1bd8a0ec3d3b66a824", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4239e0041a318a038ccbfe1bd8a0ec3d3b66a824", "message": "Cleaned restore client dockerfile\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:16Z", "type": "commit"}, {"oid": "2439b4b9f11f54f1e87f1e59862f53d345ea3abb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2439b4b9f11f54f1e87f1e59862f53d345ea3abb", "message": "Use local docker file to create custom container for tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "28e1e3cd076d16b87b177b2bfd8584c10923df98", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/28e1e3cd076d16b87b177b2bfd8584c10923df98", "message": "Cleaned up example tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "6784992e67e0e2f8bcda5a8470750bf4dda2e8ba", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6784992e67e0e2f8bcda5a8470750bf4dda2e8ba", "message": "Disabled checkSeededTablesArePopulated\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "880b68e093c4b71f7b1332394ea244d7a4e881f4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/880b68e093c4b71f7b1332394ea244d7a4e881f4", "message": "Added back restore client\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "f002373c2653741ba83931d0c813f84c352670a9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f002373c2653741ba83931d0c813f84c352670a9", "message": "Added restore client test\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "31d1e00269880ead10ac603777083faeae000e6f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/31d1e00269880ead10ac603777083faeae000e6f", "message": "Fixed breaking build\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "a0c4a2c0c5dc6d248767ed37cc22f47e28c172b4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a0c4a2c0c5dc6d248767ed37cc22f47e28c172b4", "message": "Add docker build for restore-client\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "138b026500f89ca1e194d7a10be126e2aa230e43", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/138b026500f89ca1e194d7a10be126e2aa230e43", "message": "Added bucket file download and pg restore logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "816bf0d249442636244c4fa29a132db9b37e4441", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/816bf0d249442636244c4fa29a132db9b37e4441", "message": "Using ubuntu machine\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "c9932bd1511c31a465d0ed776d97f0d0787075c6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c9932bd1511c31a465d0ed776d97f0d0787075c6", "message": "use orb to allow gsutil\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "6eac4edbf488bfe8aea9ea2a6f289424796a8bcb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6eac4edbf488bfe8aea9ea2a6f289424796a8bcb", "message": "removed orb\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "d5d2c18191dc4f6b8c11759dc6ed7a0bb5208e2d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d5d2c18191dc4f6b8c11759dc6ed7a0bb5208e2d", "message": "remove docker images\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "6d83fca439a358ade0be61d2a3e47698d428d694", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6d83fca439a358ade0be61d2a3e47698d428d694", "message": "Add Boto bug workaround\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "234dd5be8c5604fba138f7ddd4f3b840d8f18907", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/234dd5be8c5604fba138f7ddd4f3b840d8f18907", "message": "Add gcloud auth\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:19Z", "type": "commit"}, {"oid": "46799c69e88d8bf5a29a719a82c5a963be4b2563", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/46799c69e88d8bf5a29a719a82c5a963be4b2563", "message": "CEntralized open jdk install\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "2f48dc840a7b51b90f6ea57f54e4b1e815ab263d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2f48dc840a7b51b90f6ea57f54e4b1e815ab263d", "message": "Add postgres binaries\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "57cf020629a2f4d936ea9449b2df4b46e11e1be7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/57cf020629a2f4d936ea9449b2df4b46e11e1be7", "message": "Add crcmod download efficiency\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "61adf3561a4da1d1ef6e2bd5afcb150eb69ba28f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/61adf3561a4da1d1ef6e2bd5afcb150eb69ba28f", "message": "Fix crcmod install\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "fb62b60a1c7488d5167f1ca6a3326284eabd5ea8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fb62b60a1c7488d5167f1ca6a3326284eabd5ea8", "message": "See lib path\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "c2e45a9e13bb75c7a88a07c255f99ad78b7b3147", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c2e45a9e13bb75c7a88a07c255f99ad78b7b3147", "message": "Install postgres\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "ef22d5812f2d77acfaea9c16e3aa0d52ff2f2bc7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ef22d5812f2d77acfaea9c16e3aa0d52ff2f2bc7", "message": "Raw psql restore\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "3429b935339144ebbc2e738740e7512aee05381c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3429b935339144ebbc2e738740e7512aee05381c", "message": "Centralized gsutil and pg logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "3e9464128f16cf55e357929fb0d6f12e8d3aa8fe", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3e9464128f16cf55e357929fb0d6f12e8d3aa8fe", "message": "Reverted to docker images\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "2ccbf65cdd576c4abe98a3000ffb5152fc7da75b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2ccbf65cdd576c4abe98a3000ffb5152fc7da75b", "message": "add gcloud install and auth\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:20Z", "type": "commit"}, {"oid": "df3e3c2e8a82639e5ba2ab5d5b1b1d30e02c3781", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/df3e3c2e8a82639e5ba2ab5d5b1b1d30e02c3781", "message": "Added dbperf section to house docker images and scripts that can be utilized for various perf scenarios locally and in automation\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:22Z", "type": "commit"}, {"oid": "1a859a9839180867e8f692ccd14858c4d37590da", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1a859a9839180867e8f692ccd14858c4d37590da", "message": "Cleaned up circleciconfig\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:22Z", "type": "commit"}, {"oid": "bfcd5a67b94774cabcb6e1e597cc7254f035020b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bfcd5a67b94774cabcb6e1e597cc7254f035020b", "message": "Cleaned restore client dockerfile\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:08:22Z", "type": "commit"}, {"oid": "f10d83a6e0c1a5ade77218f65eb09653b3340fcf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f10d83a6e0c1a5ade77218f65eb09653b3340fcf", "message": "Use local docker file to create custom container for tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:12:09Z", "type": "commit"}, {"oid": "4c0245f81b20475d738aa6b080ad5e8fadbf9614", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4c0245f81b20475d738aa6b080ad5e8fadbf9614", "message": "Cleaned up example tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:13:44Z", "type": "commit"}, {"oid": "4c0245f81b20475d738aa6b080ad5e8fadbf9614", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4c0245f81b20475d738aa6b080ad5e8fadbf9614", "message": "Cleaned up example tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T17:13:44Z", "type": "forcePushed"}, {"oid": "6a0e0bed72154052fa6f0ba530029b6ca10f70ed", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6a0e0bed72154052fa6f0ba530029b6ca10f70ed", "message": "Cleaned up and shared some logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-02T22:22:27Z", "type": "commit"}, {"oid": "f5f975ca4cdf65f5ec60b0226cb3ad09142432fe", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f5f975ca4cdf65f5ec60b0226cb3ad09142432fe", "message": "Fix restore client test by using script\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-03T03:13:28Z", "type": "commit"}, {"oid": "c5879953f961456d10395576ea7f094152d85b32", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c5879953f961456d10395576ea7f094152d85b32", "message": "Switched to IndefiniteWaitOneShotStartupCheckStrategy and shared test logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-03T19:28:26Z", "type": "commit"}, {"oid": "2914fec2a72ec36c923fb8bb8d41a3d4b4efccf5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2914fec2a72ec36c923fb8bb8d41a3d4b4efccf5", "message": "Merge branch 'master' into perf-large-db\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-03T19:29:59Z", "type": "commit"}, {"oid": "6929e704cbc067d4d30bad7cf8dff55794d2fce4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6929e704cbc067d4d30bad7cf8dff55794d2fce4", "message": "Fixed db restore in seeded scenario\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-04T00:11:50Z", "type": "commit"}, {"oid": "2edd77249c55bb16ecb03b437a8e586b61bbac0a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2edd77249c55bb16ecb03b437a8e586b61bbac0a", "message": "Cleanup a bit more\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-04T16:02:41Z", "type": "commit"}, {"oid": "31d7146feb56ebf9c01909b5128adac0c16e1689", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/31d7146feb56ebf9c01909b5128adac0c16e1689", "message": "Removed seeded flow and add enndpoint select tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-04T20:41:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3OTI1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r434179258", "bodyText": "Already included, can be removed", "author": "steven-sheehy", "createdAt": "2020-06-02T21:14:32Z", "path": "hedera-mirror-importer/pom.xml", "diffHunk": "@@ -214,6 +216,18 @@\n             <version>${testcontainers.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>testcontainers</artifactId>", "originalCommit": "4c0245f81b20475d738aa6b080ad5e8fadbf9614", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1OTQ1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437059458", "bodyText": "Removed", "author": "Nana-EC", "createdAt": "2020-06-08T23:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3OTI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MDk1OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r434180959", "bodyText": "Strings should all be @NotBlank.", "author": "steven-sheehy", "createdAt": "2020-06-02T21:17:57Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/db/DBProperties.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.hedera.mirror.importer.db;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.validation.constraints.NotNull;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.ConstructorBinding;\n+import org.springframework.validation.annotation.Validated;\n+\n+@Data\n+@Validated\n+@Builder(toBuilder = true)\n+@ConfigurationProperties(\"hedera.mirror.importer.db\")\n+@ConstructorBinding\n+public class DBProperties {\n+    @NotNull", "originalCommit": "4c0245f81b20475d738aa6b080ad5e8fadbf9614", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1OTU2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437059564", "bodyText": "Updated. Left restUser and password since not necessary if you're not using REST api but the rest are needed for importer to get data flowing", "author": "Nana-EC", "createdAt": "2020-06-08T23:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MDk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MTI4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r434181283", "bodyText": "Primitives can't be null. Min(0) would be appropriate though", "author": "steven-sheehy", "createdAt": "2020-06-02T21:18:34Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/db/DBProperties.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.hedera.mirror.importer.db;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.validation.constraints.NotNull;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.ConstructorBinding;\n+import org.springframework.validation.annotation.Validated;\n+\n+@Data\n+@Validated\n+@Builder(toBuilder = true)\n+@ConfigurationProperties(\"hedera.mirror.importer.db\")\n+@ConstructorBinding\n+public class DBProperties {\n+    @NotNull\n+    private String host = \"\";\n+\n+    @NotNull\n+    private String name = \"\";\n+\n+    @NotNull\n+    private String password = \"\";\n+\n+    @NotNull", "originalCommit": "4c0245f81b20475d738aa6b080ad5e8fadbf9614", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1OTY4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437059684", "bodyText": "Fixed", "author": "Nana-EC", "createdAt": "2020-06-08T23:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MTI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzIzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r434197232", "bodyText": "Shouldn't mix and match base images. Just use alpine for both if you can as it's smaller.", "author": "steven-sheehy", "createdAt": "2020-06-02T21:54:55Z", "path": "hedera-mirror-importer/src/test/resources/data/restore-client/Dockerfile", "diffHunk": "@@ -0,0 +1,33 @@\n+# docker build -f hedera-mirror-importer/src/test/resources/data/restore-client//Dockerfile \\\n+#   ./hedera-mirror-importer/src/test/resources/data/  \\\n+#   --build-arg dumpfile=<pgdump.gz>  --build-arg jsonkeyfile=bucket-download-key.json\n+#   -t hedera-mirror-node/postgres-restore-client\n+FROM debian:stretch AS build\n+\n+# get dump file\n+ARG dumpfile\n+ARG jsonkeyfile\n+\n+RUN apt-get -qqy update && apt-get install -qqy curl python-dev\n+RUN curl https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz > /tmp/google-cloud-sdk.tar.gz\n+RUN tar -C /usr/local/ -xvf /tmp/google-cloud-sdk.tar.gz\n+RUN /usr/local/google-cloud-sdk/install.sh\n+\n+COPY ./$jsonkeyfile /tmp/config.json\n+RUN /usr/local/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file /tmp/config.json\n+\n+\n+RUN /usr/local/google-cloud-sdk/bin/gsutil cp gs://hedera-mirror-dev/database/$dumpfile /tmp/pgdump.gz\n+RUN rm /tmp/config.json\n+\n+FROM alpine:latest", "originalCommit": "4c0245f81b20475d738aa6b080ad5e8fadbf9614", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1OTczNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437059735", "bodyText": "Switched to using alpine and keeping it small", "author": "Nana-EC", "createdAt": "2020-06-08T23:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMzQ0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r434203445", "bodyText": "You don't need to provide build args if you just want to run the image. Those args are only for build stage which happens manually via mvn.", "author": "steven-sheehy", "createdAt": "2020-06-02T22:10:57Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/CustomPostgresContainer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+public class CustomPostgresContainer {\n+    public static ImageFromDockerfile createSeededDockerImage(String dockerFilePath, String pgDumpFile) {\n+        return new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", dockerFilePath)\n+                .withFileFromClasspath(\"bucket-download-key.json\", \"data/bucket-download-key.json\")\n+                .withFileFromClasspath(\"postgresql.conf\", \"data/postgresql.conf\")\n+                .withBuildArg(\"dumpfile\", pgDumpFile)", "originalCommit": "4c0245f81b20475d738aa6b080ad5e8fadbf9614", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1OTk1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437059950", "bodyText": "Removed as image build logic was removed", "author": "Nana-EC", "createdAt": "2020-06-08T23:43:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMzQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4NTgwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r435985805", "bodyText": "nit: testcontainers.version", "author": "steven-sheehy", "createdAt": "2020-06-05T15:10:11Z", "path": "hedera-mirror-importer/pom.xml", "diffHunk": "@@ -20,6 +20,7 @@\n         <commons-io.version>2.6</commons-io.version>\n         <guava.version>29.0-jre</guava.version>\n         <s3mock.version>0.2.5</s3mock.version>\n+        <testcontainer.version>1.14.3</testcontainer.version>", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDA2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437060064", "bodyText": "Updated", "author": "Nana-EC", "createdAt": "2020-06-08T23:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4NTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4Njc2Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r435986762", "bodyText": "This file can be removed", "author": "steven-sheehy", "createdAt": "2020-06-05T15:11:52Z", "path": "hedera-mirror-importer/src/test/resources/data/postgresql.conf", "diffHunk": "@@ -0,0 +1,3 @@\n+listen_addresses = '*'", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDA4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437060087", "bodyText": "Removed", "author": "Nana-EC", "createdAt": "2020-06-08T23:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4Njc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4Njk0OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r435986948", "bodyText": "This file and folder can be removed", "author": "steven-sheehy", "createdAt": "2020-06-05T15:12:07Z", "path": "hedera-mirror-importer/src/test/resources/data/base-image/Dockerfile", "diffHunk": "@@ -0,0 +1,26 @@\n+# Empty postgres db image with mirror node users and empty database created\n+# Build using command from repo root:\n+# docker build -f hedera-mirror-importer/src/test/resources/data/base-image/Dockerfile \\\n+#   ./hedera-mirror-importer/ \\\n+#   -t gcr.io/mirrornode/hedera-mirror-node/postgres:latest\n+FROM postgres:9.6", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDEwOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437060109", "bodyText": "Removed", "author": "Nana-EC", "createdAt": "2020-06-08T23:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4Njk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MTkxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r435991914", "bodyText": "We should not be creating users in a restore client docker image. This would fail if ran against Cloud SQL. Recommend removing restore.sh and just making entrypoint pg_restore", "author": "steven-sheehy", "createdAt": "2020-06-05T15:19:54Z", "path": "hedera-mirror-importer/src/test/resources/data/restore.sh", "diffHunk": "@@ -0,0 +1,16 @@\n+#!/bin/sh\n+set -e\n+\n+echo \"Setting user and role for Mirror Node\"\n+PGPASSWORD=$DB_PASS psql -v ON_ERROR_STOP=1 --username \"$DB_USER\" --dbname \"$DB_NAME\" -p \"$DB_PORT\" -h localhost <<-EOSQL\n+    \\set db_user 'mirror_node'\n+    \\set db_password 'mirror_node_pass'\n+\n+    create user :db_user with login createrole password :'db_password';", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDM2Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437060363", "bodyText": "Without this pg_restore fails since it expects the mirror_node role role present.\nCurrent dumps require this role.\nWill look into if there's pg_restore option around it", "author": "Nana-EC", "createdAt": "2020-06-08T23:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MTc3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437061779", "bodyText": "Should've probably used pg_dumpall to get all databases", "author": "steven-sheehy", "createdAt": "2020-06-08T23:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMzQ0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437523446", "bodyText": "Alternatively, maybe we should've not used --clean and added --data-only with pg_dump so it just contained data. This would keep the roles and schema and make the tests responsible for cleaning up data and running migrations. We can maybe manually modify the dump files to remove those statements.", "author": "steven-sheehy", "createdAt": "2020-06-09T15:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MTkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NjQ4Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r435996486", "bodyText": "Not necessary to remove as this build image is not pushed anywhere.", "author": "steven-sheehy", "createdAt": "2020-06-05T15:27:23Z", "path": "hedera-mirror-importer/src/test/resources/data/restore-client/Dockerfile", "diffHunk": "@@ -0,0 +1,42 @@\n+# Creates image to be used as an executable container that performs a pg_restore against an already existing database\n+# docker build -f hedera-mirror-importer/src/test/resources/data/restore-client/Dockerfile \\\n+#   ./hedera-mirror-importer/src/test/resources/data/  \\\n+#   --build-arg dumpfile=<pgdump.gz>  --build-arg jsonkeyfile=bucket-download-key.json\n+#   -t gcr.io/mirrornode/hedera-mirror-node/postgres-restore-client:latest\n+FROM debian:stretch AS build\n+\n+ARG dumpfile\n+ARG jsonkeyfile\n+\n+# install gcloud tools\n+RUN apt-get -qqy update && apt-get install -qqy curl python-dev\n+RUN curl https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz > /tmp/google-cloud-sdk.tar.gz\n+RUN tar -C /usr/local/ -xvf /tmp/google-cloud-sdk.tar.gz\n+RUN /usr/local/google-cloud-sdk/install.sh\n+\n+# pull in key file and set up account\n+COPY ./$jsonkeyfile /tmp/config.json\n+RUN /usr/local/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file /tmp/config.json\n+\n+# download file from remote bucket and remove key file\n+RUN /usr/local/google-cloud-sdk/bin/gsutil cp gs://hedera-mirror-dev/database/$dumpfile /tmp/pgdump.gz\n+RUN rm /tmp/config.json", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDU2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437060561", "bodyText": "Leftover logic before I had a build image Removed", "author": "Nana-EC", "createdAt": "2020-06-08T23:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NjQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NjU4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r435996585", "bodyText": "This file and associated files should not live in src/test/resources/data as they are not data. Would recommend src/test/resources/scripts/restore-client/", "author": "steven-sheehy", "createdAt": "2020-06-05T15:27:32Z", "path": "hedera-mirror-importer/src/test/resources/data/restore-client/Dockerfile", "diffHunk": "@@ -0,0 +1,42 @@\n+# Creates image to be used as an executable container that performs a pg_restore against an already existing database\n+# docker build -f hedera-mirror-importer/src/test/resources/data/restore-client/Dockerfile \\", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDY3OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437060678", "bodyText": "Moved to /scripts", "author": "Nana-EC", "createdAt": "2020-06-08T23:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NjU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5OTg4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r435999887", "bodyText": "Why are we duplicating and performance testing REST queries in the importer module? If the queries change in REST API we now have to change it here. We already have performance tests for the REST API in the REST API module. We should later figure out how to use the restore client to populate the data for the tests there. Recommend these be removed.", "author": "steven-sheehy", "createdAt": "2020-06-05T15:33:00Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/PerformanceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.domain.ApplicationStatusCode;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+\n+@Log4j2\n+@SpringBootTest\n+public abstract class PerformanceIntegrationTest {\n+    @Resource\n+    DataSource dataSource;\n+\n+    Connection connection;\n+\n+    @Resource\n+    private ApplicationStatusRepository applicationStatusRepository;\n+\n+    @TempDir\n+    static Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    void parse(String filePath) {\n+        streamType = parserProperties.getStreamType();\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"performance\")\n+                .filterFiles(filePath)\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+\n+        recordFileParser.parse();\n+    }\n+\n+    void checkSeededTablesArePresent() {\n+        String[] tables = new String[] {\"account_balance_sets\", \"account_balances\", \"flyway_schema_history\",\n+                \"non_fee_transfers\", \"t_application_status\", \"t_contract_result\", \"t_cryptotransferlists\",\n+                \"t_entities\", \"t_entity_types\", \"t_file_data\", \"t_livehashes\", \"t_record_files\",\n+                \"t_transaction_results\",\n+                \"t_transaction_types\", \"t_transactions\", \"topic_message\"\n+        };\n+        List<String> discoveredTables = new ArrayList<>();\n+\n+        try (Connection connection = dataSource.getConnection();\n+             ResultSet rs = connection.getMetaData().getTables(null, null, null, new String[] {\"TABLE\"})) {\n+\n+            while (rs.next()) {\n+                discoveredTables.add(rs.getString(\"TABLE_NAME\"));\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Unable to retrieve details from database\", e);\n+        }\n+\n+        assertThat(discoveredTables.size()).isGreaterThan(0);\n+        Collections.sort(discoveredTables);\n+        log.info(\"Encountered tables: {}\", discoveredTables);\n+        assertThat(discoveredTables).isEqualTo(Arrays.asList(tables));\n+    }\n+\n+    long getTableSize(String table) throws SQLException {\n+        PreparedStatement statement = connection.prepareStatement(\"select count (*) from \" + table);\n+        ResultSet rs = statement.executeQuery();\n+        rs.next();\n+        return rs.getLong(\"count\");\n+    }\n+\n+    void getAccounts(long pageSize) throws SQLException {\n+        String sqlQuery = \"select ab.balance as account_balance\\n\" +\n+                \"    , ab.consensus_timestamp as consensus_timestamp\\n\" +\n+                \"    , 0 as entity_shard\\n\" +\n+                \"    , coalesce(ab.account_realm_num, e.entity_realm) as entity_realm\\n\" +\n+                \"    , coalesce(ab.account_num, e.entity_num) as entity_num\\n\" +\n+                \"    , e.exp_time_ns\\n\" +\n+                \"    , e.auto_renew_period\\n\" +\n+                \"    , e.key\\n\" +\n+                \"    , e.deleted\\n\" +\n+                \"from account_balances ab\\n\" +\n+                \"full outer join t_entities e\\n\" +\n+                \"    on (0 = e.entity_shard\\n\" +\n+                \"        and ab.account_realm_num = e.entity_realm\\n\" +\n+                \"        and ab.account_num =  e.entity_num\\n\" +\n+                \"        and e.fk_entity_type_id < 3)\\n\" +\n+                \"where ab.consensus_timestamp = (select max(consensus_timestamp) from account_balances)\\n\" +\n+                \"    and \\n\" +\n+                \"1=1 and 1=1 and 1=1 order by coalesce(ab.account_num, e.entity_num) desc\\n\" +\n+                \"limit ?\";\n+        runSelectStatementWithPageSize(sqlQuery, pageSize);\n+    }\n+\n+    void getBalances(long pageSize) throws SQLException {\n+        String sqlQuery = \"select ab.consensus_timestamp,\\n\" +\n+                \"ab.account_realm_num as realm_num, ab.account_num as entity_num, ab.balance\\n\" +\n+                \" from account_balances ab\\n\" +\n+                \" where  consensus_timestamp = (select consensus_timestamp from account_balances ab\\n\" +\n+                \" where\\n\" +\n+                \"((ab.consensus_timestamp  >=  0) )\\n\" +\n+                \"order by consensus_timestamp desc limit 1)\\n\" +\n+                \" and\\n\" +\n+                \"1=1 and 1=1 and 1=1 order by consensus_timestamp desc, account_realm_num desc,account_num desc limit\" +\n+                \" ?\";\n+        runSelectStatementWithPageSize(sqlQuery, pageSize);\n+    }\n+\n+    void getTopicMessages(long pageSize) throws SQLException {\n+        String sqlQuery = \"select consensus_timestamp, realm_num, topic_num, message, running_hash, sequence_number\\n\" +\n+                \"from topic_message limit ?;\";\n+\n+        runSelectStatementWithPageSize(sqlQuery, pageSize);\n+    }\n+\n+    void getTransactions(long pageSize) throws SQLException {\n+        String sqlQuery = \"select etrans.entity_shard,  etrans.entity_realm, etrans.entity_num\\n\" +", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDg4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437060887", "bodyText": "This was a suggestive test method for use so we could answer questions like \"If we changed a in the db how are customer REST API calls affected\"\nRemoving though as I agree with the respecting module boundaries and the extra maintenance concern", "author": "Nana-EC", "createdAt": "2020-06-08T23:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5OTg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNzE0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r436017149", "bodyText": "We should not be using lower level JDBC anywhere unless it truly demands it if there's no JPA equivalent. Here you can simply:\n@Resource\nprivate Collection<CrudRepository<?,?>> repositories;\n\n@Test\nvoid tablesExist() {\n  repositores.forEach(r -> assertThat(r.count()).isGreaterThan(0));\n}", "author": "steven-sheehy", "createdAt": "2020-06-05T16:01:48Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/PerformanceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.domain.ApplicationStatusCode;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+\n+@Log4j2\n+@SpringBootTest\n+public abstract class PerformanceIntegrationTest {\n+    @Resource\n+    DataSource dataSource;\n+\n+    Connection connection;\n+\n+    @Resource\n+    private ApplicationStatusRepository applicationStatusRepository;\n+\n+    @TempDir\n+    static Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    void parse(String filePath) {\n+        streamType = parserProperties.getStreamType();\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"performance\")\n+                .filterFiles(filePath)\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+\n+        recordFileParser.parse();\n+    }\n+\n+    void checkSeededTablesArePresent() {\n+        String[] tables = new String[] {\"account_balance_sets\", \"account_balances\", \"flyway_schema_history\",", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MTAxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437061017", "bodyText": "Gotcha. Will apply the suggestion to the table size checks as the above checks that every table has rows. Not every table at restore will have rows. Also the original intent was just to check all expected tables were created.", "author": "Nana-EC", "createdAt": "2020-06-08T23:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNzE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4Njc0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437486746", "bodyText": "It's still using JDBC, which was my main complaint. I don't think you need to check if all these tables exist. Just check that one table exists and has data via count() along with the container exit code check should be sufficient.", "author": "steven-sheehy", "createdAt": "2020-06-09T14:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNzE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDY5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r436164699", "bodyText": "This test can't work in CircleCI as it doesn't support Docker in Docker. In fact, in CircleCI it looks like it runs but finds no tests to execute:\n 2020-06-04 20:42:33,184 INFO  [main ] c.h.m.i.p.p.RestoreClientIntegrationTest Started RestoreClientIntegrationTest in 11.512 seconds (JVM running for 14.805)\n 2020-06-04 20:42:33,228 INFO  [task-1] c.h.m.i.p.b.BalanceFileParser Skip watching directory: ./data/accountBalances/valid\n 2020-06-04 20:42:33,282 INFO  [task-2] c.h.m.i.p.r.EntityIdCacheLoader Cached 0 entity id mappings in 60.23 ms\n 2020-06-04 20:42:33,289 INFO  [main ] c.h.m.i.p.p.RestoreClientIntegrationTest Stop container null\n [INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.939 s - in com.hedera.mirror.importer.parser.****ormance.RestoreClientIntegrationTest", "author": "steven-sheehy", "createdAt": "2020-06-05T21:07:21Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/RestoreClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.Timeout;\n+import org.testcontainers.containers.GenericContainer;\n+\n+import com.hedera.mirror.importer.db.DBProperties;\n+\n+@Log4j2\n+@Tag(\"performance\")", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MTA2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437061069", "bodyText": "Changing the Tag so it's not run as part of tests", "author": "Nana-EC", "createdAt": "2020-06-08T23:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NzYwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r436167607", "bodyText": "I don't think we need to verify table size separately from checkSeededTablesArePresent(). Can combine", "author": "steven-sheehy", "createdAt": "2020-06-05T21:15:26Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/RestoreClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.Timeout;\n+import org.testcontainers.containers.GenericContainer;\n+\n+import com.hedera.mirror.importer.db.DBProperties;\n+\n+@Log4j2\n+@Tag(\"performance\")\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class RestoreClientIntegrationTest extends PerformanceIntegrationTest {\n+    @Resource\n+    private DBProperties dbProperties;\n+\n+    @Rule\n+    GenericContainer customContainer;\n+\n+    private final long maxPageSize = 1000;\n+\n+    @BeforeAll\n+    void warmUp() throws SQLException {\n+        customContainer = CustomPostgresContainer.createRestoreContainer(\n+                \"data/restore-client/Dockerfile\",\n+                \"testnet_100k_pgdump.gz\",\n+                dbProperties);\n+\n+        log.info(\"Start container {}\", customContainer);\n+        customContainer.start();\n+        log.info(\"Database restore complete to {}\", dbProperties);\n+\n+        connection = dataSource.getConnection();\n+        checkSeededTablesArePresent();\n+    }\n+\n+    @AfterAll\n+    void coolOff() {\n+        log.info(\"Stop container {}\", customContainer);\n+        customContainer.stop();\n+    }\n+\n+    @Test\n+    public void parseAndIngestTransactions() throws Exception {\n+        clearLastProcessedRecordHash();\n+        parse(\"*.rcd\");\n+    }\n+\n+    @Timeout(1)\n+    @Test\n+    public void checkEntitiesTablesIsPopulated() throws Exception {\n+        verifyTableSize(\"t_entities\", \"entities\");", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MzY0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437073645", "bodyText": "Combined", "author": "Nana-EC", "createdAt": "2020-06-09T00:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NzYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2ODQ4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r436168487", "bodyText": "Should not use JUnit 4.x features. I doubt this is even working as you are manually creating object and starting and stopping. JUnit 5.x recommended approach is to use @TestContainers + @Container.", "author": "steven-sheehy", "createdAt": "2020-06-05T21:17:45Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/RestoreClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.Timeout;\n+import org.testcontainers.containers.GenericContainer;\n+\n+import com.hedera.mirror.importer.db.DBProperties;\n+\n+@Log4j2\n+@Tag(\"performance\")\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class RestoreClientIntegrationTest extends PerformanceIntegrationTest {\n+    @Resource\n+    private DBProperties dbProperties;\n+\n+    @Rule", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3Mzc2Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437073762", "bodyText": "It works, I looked at your recommended approach earlier but went the Manual Lifecycle Control way since I needed to pull in the DbPorperties which is non static.\nThe shared container approach requires a static container declaration.", "author": "Nana-EC", "createdAt": "2020-06-09T00:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2ODQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2OTk0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r436169945", "bodyText": "I don't see the need for this class.\na) It's no longer creating a postgres container, so it's named wrong.\nb) Has 3 public methods but only one actually used publically\nc) There is a PerformanceIntegrationTest where this logic makes more sense\nd) The static strings make it harder to read, not easier. They're not needed for performance or reuse reasons so better to inline.", "author": "steven-sheehy", "createdAt": "2020-06-05T21:22:02Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/CustomPostgresContainer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.extern.log4j.Log4j2;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.startupcheck.IndefiniteWaitOneShotStartupCheckStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import com.hedera.mirror.importer.db.DBProperties;\n+\n+@Log4j2\n+public class CustomPostgresContainer {", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3Mzc4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437073781", "bodyText": "Sounds good will merge into PerformanceIntegrationTest", "author": "Nana-EC", "createdAt": "2020-06-09T00:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2OTk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3OTg0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r436179843", "bodyText": "We can't create images in CircleCI currently. It would be better if we just pushed some golden images (100k, 1M, 10M) for use in these tests manually instead of building each time.", "author": "steven-sheehy", "createdAt": "2020-06-05T21:51:05Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/CustomPostgresContainer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.extern.log4j.Log4j2;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.startupcheck.IndefiniteWaitOneShotStartupCheckStrategy;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import com.hedera.mirror.importer.db.DBProperties;\n+\n+@Log4j2\n+public class CustomPostgresContainer {\n+\n+    private static final String dbNameEnvVar = \"DB_NAME\";\n+    private static final String dbUserEnvVar = \"DB_USER\";\n+    private static final String dbPasswordEnvVar = \"DB_PASS\";\n+    private static final String dbPortEnvVar = \"DB_PORT\";\n+    private static final String dockerFileName = \"Dockerfile\";\n+    private static final String dumpFileArgName = \"dumpfile\";\n+    private static final String jsonKeyFileArgName = \"jsonkeyfile\";\n+    private static final String jsonKeyFileName = \"bucket-download-key.json\";\n+    private static final String jsonKeyFilePath = \"data/bucket-download-key.json\";\n+    private static final String restoreScriptFileName = \"restore.sh\";\n+    private static final String restoreScriptFilePath = \"data/restore.sh\";\n+\n+    public static ImageFromDockerfile createBaseDockerImage(String dockerFilePath) {\n+        return new ImageFromDockerfile()", "originalCommit": "31d7146feb56ebf9c01909b5128adac0c16e1689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3Mzg2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437073861", "bodyText": "Done, see gcr.io/mirrornode/hedera-mirror-node/postgres-restore-client images", "author": "Nana-EC", "createdAt": "2020-06-09T00:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3OTg0Mw=="}], "type": "inlineReview"}, {"oid": "6323cc39b1dc268b849d253ca9744a25e55eff1d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6323cc39b1dc268b849d253ca9744a25e55eff1d", "message": "Addressed feedback, reduced footprint\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-08T22:53:27Z", "type": "commit"}, {"oid": "bfd27b124462c557edb3e8638f2dd80a7416ad22", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bfd27b124462c557edb3e8638f2dd80a7416ad22", "message": "Removed REST api related tests calls\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-08T23:30:19Z", "type": "commit"}, {"oid": "efd38ff1e986903045a87e8c8d49eaa74e1c6b20", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/efd38ff1e986903045a87e8c8d49eaa74e1c6b20", "message": "Clean up a bit\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-06-08T23:50:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDQ4OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437490489", "bodyText": "These are absolutely necessary to be not blank even if you're not using the REST API. This is because they run as part of Flyway migration and will fail if empty.", "author": "steven-sheehy", "createdAt": "2020-06-09T14:58:21Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/db/DBProperties.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.db;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.ConstructorBinding;\n+import org.springframework.validation.annotation.Validated;\n+\n+@Data\n+@Validated\n+@Builder(toBuilder = true)\n+@ConfigurationProperties(\"hedera.mirror.importer.db\")\n+@ConstructorBinding\n+public class DBProperties {\n+    @NotBlank\n+    private String host = \"\";\n+\n+    @NotBlank\n+    private String name = \"\";\n+\n+    @NotBlank\n+    private String password = \"\";\n+\n+    @Min(0)\n+    private int port = 5432;\n+\n+    private String restPassword = \"\";", "originalCommit": "efd38ff1e986903045a87e8c8d49eaa74e1c6b20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4ODU3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437588572", "bodyText": "Gotcha. Will make change in next PR", "author": "Nana-EC", "createdAt": "2020-06-09T17:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyMDkzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437620933", "bodyText": "Addressed in #818", "author": "Nana-EC", "createdAt": "2020-06-09T18:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MzE1Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437493153", "bodyText": "Should be protected and non-static. Can just inject DBProperties into this class and use it without having to pass it via parameter.", "author": "steven-sheehy", "createdAt": "2020-06-09T15:01:48Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/PerformanceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.data.repository.CrudRepository;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.startupcheck.IndefiniteWaitOneShotStartupCheckStrategy;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.db.DBProperties;\n+import com.hedera.mirror.importer.domain.ApplicationStatusCode;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+import com.hedera.mirror.importer.repository.AccountBalanceRepository;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.repository.EntityRepository;\n+import com.hedera.mirror.importer.repository.TopicMessageRepository;\n+import com.hedera.mirror.importer.repository.TransactionRepository;\n+\n+@Log4j2\n+@SpringBootTest\n+public abstract class PerformanceIntegrationTest {\n+\n+    @TempDir\n+    static Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    @Resource\n+    DataSource dataSource;\n+\n+    Connection connection;\n+\n+    @Resource\n+    private ApplicationStatusRepository applicationStatusRepository;\n+\n+    @Resource\n+    private EntityRepository entityRepository;\n+\n+    @Resource\n+    private AccountBalanceRepository accountBalanceRepository;\n+\n+    @Resource\n+    private TopicMessageRepository topicMessageRepository;\n+\n+    @Resource\n+    private TransactionRepository transactionRepository;\n+\n+    private static final String restoreClientImagePrefix = \"gcr.io/mirrornode/hedera-mirror-node/postgres-restore\" +\n+            \"-client:\";\n+\n+    public static GenericContainer createRestoreContainer(String dockerImageTag, DBProperties db) {", "originalCommit": "efd38ff1e986903045a87e8c8d49eaa74e1c6b20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4ODY3NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437588674", "bodyText": "Will do in next PR", "author": "Nana-EC", "createdAt": "2020-06-09T17:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MzE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyMDgzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437620832", "bodyText": "Addressed in #818", "author": "Nana-EC", "createdAt": "2020-06-09T18:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MzE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxODMzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437518333", "bodyText": "Do we need to assertThat(customContainer.getContainerInfo().getState().getExitCodeLong()).isEqualTo(0L);? Or does TestContainers automatically do that?", "author": "steven-sheehy", "createdAt": "2020-06-09T15:24:33Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/performance/RestoreClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.hedera.mirror.importer.parser.performance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.SQLException;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import com.hedera.mirror.importer.db.DBProperties;\n+\n+@Log4j2\n+@Tag(\"largedbperf\")\n+@Testcontainers\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class RestoreClientIntegrationTest extends PerformanceIntegrationTest {\n+    @Resource\n+    private DBProperties dbProperties;\n+\n+    @Container\n+    GenericContainer customContainer;\n+\n+    @BeforeAll\n+    void warmUp() throws SQLException {\n+        customContainer = createRestoreContainer(\"100k\",\n+                dbProperties);\n+\n+        log.info(\"Start container {}\", customContainer);\n+        customContainer.start();\n+        log.info(\"Database restore complete to {}\", dbProperties);", "originalCommit": "efd38ff1e986903045a87e8c8d49eaa74e1c6b20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4ODQ0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437588444", "bodyText": "In combination with the Wait logic I believe this is covered but I can verify.", "author": "Nana-EC", "createdAt": "2020-06-09T17:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxODMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNDQyMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/797#discussion_r437614423", "bodyText": "It checks for us as expected using the One Shot. startup strategy.", "author": "Nana-EC", "createdAt": "2020-06-09T17:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxODMzMw=="}], "type": "inlineReview"}]}