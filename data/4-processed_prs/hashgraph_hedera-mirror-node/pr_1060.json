{"pr_number": 1060, "pr_title": "allow individual maxLimit config in rest service monitor", "pr_createdAt": "2020-09-18T14:34:52Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1060", "timeline": [{"oid": "bc9bf68a399e002a0a53031bfe0cd79648510a79", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bc9bf68a399e002a0a53031bfe0cd79648510a79", "message": "enable per resource maxLimit config and some cleanup\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-09-18T01:07:03Z", "type": "commit"}, {"oid": "65ad20dd9e18b82706ae6ce93fb543af409960bc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/65ad20dd9e18b82706ae6ce93fb543af409960bc", "message": "update readme\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-09-18T01:22:48Z", "type": "commit"}, {"oid": "264ec6b7927d568f99f5100d80c963665b1cca96", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/264ec6b7927d568f99f5100d80c963665b1cca96", "message": "cleanup, prettier warnings\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-09-18T14:52:02Z", "type": "commit"}, {"oid": "5846464b84d27d298131537b3155c289ab8a8e56", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5846464b84d27d298131537b3155c289ab8a8e56", "message": "directly compare consensus timestamp string\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-09-18T20:28:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NjA5NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1060#discussion_r491176094", "bodyText": "changed from the last revision, directly compare the timestamp string", "author": "xin-hedera", "createdAt": "2020-09-18T20:31:02Z", "path": "hedera-mirror-rest/monitoring/monitor_apis/transaction_tests.js", "diffHunk": "@@ -169,32 +170,40 @@ const getTransactionsWithAccountCheck = async (server, classResults) => {\n  * @param {Object} classResults shared class results object capturing tests for given endpoint\n  */\n const getTransactionsWithOrderParam = async (server, classResults) => {\n-  var currentTestResult = acctestutils.getMonitorTestResult();\n+  const currentTestResult = acctestutils.getMonitorTestResult();\n \n-  let url = acctestutils.getUrl(server, `${transactionsPath}?order=asc`);\n+  const query = {order: 'asc'};\n+  const {maxLimit, isGlobal} = acctestutils.getMaxLimit(resource);\n+  if (!isGlobal) {\n+    query.limit = maxLimit;\n+  }\n+\n+  const url = acctestutils.getUrl(server, transactionsPath, query);\n   currentTestResult.url = url;\n-  let transactions = await getTransactions(url, currentTestResult);\n+  const transactions = await getTransactions(url, currentTestResult);\n \n   if (undefined === transactions) {\n-    var message = `transactions is undefined`;\n+    const message = `transactions is undefined`;\n     currentTestResult.failureMessages.push(message);\n     acctestutils.addTestResult(classResults, currentTestResult, false);\n     return;\n   }\n \n   if (transactions.length !== maxLimit) {\n-    var message = `transactions.length of ${transactions.length} is less than limit ${maxLimit}`;\n+    const message = `transactions.length of ${transactions.length} is less than limit ${maxLimit}`;\n     currentTestResult.failureMessages.push(message);\n     acctestutils.addTestResult(classResults, currentTestResult, false);\n     return;\n   }\n \n-  let prevSeconds = 0;\n-  for (let txn of transactions) {\n-    if (acctestutils.secNsToSeconds(txn.seconds) < prevSeconds) {\n-      check = false;\n+  let previousConsensusTimestamp = '0';\n+  for (const txn of transactions) {\n+    if (txn.consensus_timestamp <= previousConsensusTimestamp) {\n+      currentTestResult.failureMessages.push('consensus timestamps are not in ascending order');\n+      acctestutils.addTestResult(classResults, currentTestResult, false);\n+      return;\n     }\n-    prevSeconds = acctestutils.secNsToSeconds(txn.seconds);\n+    previousConsensusTimestamp = txn.consensus_timestamp;", "originalCommit": "5846464b84d27d298131537b3155c289ab8a8e56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0NDUzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1060#discussion_r491044539", "bodyText": "Adjust to two spaces indentation", "author": "steven-sheehy", "createdAt": "2020-09-18T15:58:35Z", "path": "hedera-mirror-rest/monitoring/README.md", "diffHunk": "@@ -39,6 +39,22 @@ git clone git@github.com:hashgraph/hedera-mirror-node.git\n cd hedera-mirror-node/hedera-mirror-rest/monitoring\n ```\n \n+To configure a smaller `maxLimit` threshold for individual resources (`account`, `balance`, or `transaction`), for example,\n+for environments with lower traffic volume, add the following section to `application.yml`:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    rest:\n+      monitor:\n+        account:\n+                maxLimit: 100", "originalCommit": "264ec6b7927d568f99f5100d80c963665b1cca96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4ODU5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1060#discussion_r492188592", "bodyText": "It's quite strange that we're using the config reader from hedera-mirror-rest and that the monitor_api has two different config formats (e.g. application.yaml and serverlist.json). We should remove this dependency and just use serverlist.json.", "author": "steven-sheehy", "createdAt": "2020-09-21T16:21:59Z", "path": "hedera-mirror-rest/monitoring/monitor_apis/monitortest_utils.js", "diffHunk": "@@ -17,10 +17,11 @@\n  * limitations under the License.\n  * \u200d\n  */\n-const math = require('mathjs');\n-const config = require('../../config.js');\n-const fetch = require('node-fetch');\n+\n const AbortController = require('abort-controller');\n+const config = require('../../config');", "originalCommit": "5846464b84d27d298131537b3155c289ab8a8e56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMjg4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1060#discussion_r492202887", "bodyText": "Please also add defaults to serverlist.json", "author": "steven-sheehy", "createdAt": "2020-09-21T16:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4ODU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5MTM5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1060#discussion_r492191399", "bodyText": "This conditional logic seems unnecessary and breaks encapsulation of the maxLimit properties. We should always have a limit set and include that in the query, regardless if it's the global or not. We should default in the code if it's not in config.", "author": "steven-sheehy", "createdAt": "2020-09-21T16:26:29Z", "path": "hedera-mirror-rest/monitoring/monitor_apis/account_tests.js", "diffHunk": "@@ -66,67 +68,65 @@ const checkMandatoryParams = (entry) => {\n  * @param {Object} classResults shared class results object capturing tests for given endpoint\n  */\n const getAccountsWithAccountCheck = async (server, classResults) => {\n-  var currentTestResult = acctestutils.getMonitorTestResult();\n+  const currentTestResult = acctestutils.getMonitorTestResult();\n+\n+  const query = {};\n+  const {maxLimit, isGlobal} = acctestutils.getMaxLimit(resource);\n+  if (!isGlobal) {", "originalCommit": "5846464b84d27d298131537b3155c289ab8a8e56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjc0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1060#discussion_r492216746", "bodyText": "the flag is used to honor the default maxLimit if there is no resource specific maxLimit\nthe original test checks whether the rest service honors the maxLimit set in application.yml, hence limit=? query should not be added", "author": "xin-hedera", "createdAt": "2020-09-21T17:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5MTM5OQ=="}], "type": "inlineReview"}, {"oid": "5262c1f2d8bf61bfc49089d52d9a8d35b8f0e2f3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5262c1f2d8bf61bfc49089d52d9a8d35b8f0e2f3", "message": "refactor, move common functionality to utils\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-09-21T18:50:18Z", "type": "commit"}, {"oid": "a9fae67d865b29b51cf97b0f70204d86d502c702", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a9fae67d865b29b51cf97b0f70204d86d502c702", "message": "Merge branch 'monitor-aggregate-http-status-code' into specific-check-config-for-monitor\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-09-21T19:25:41Z", "type": "commit"}, {"oid": "1548bd073cf283bfab4569b2183eceb69666292f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1548bd073cf283bfab4569b2183eceb69666292f", "message": "- remove dependency on hedera-mirror-rest's config module\n- aggregate http response code from all servers for /status\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-09-21T21:03:55Z", "type": "commit"}, {"oid": "f22254db8c8f23e3e114e3e1f15e7aa0a9e8cd1d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f22254db8c8f23e3e114e3e1f15e7aa0a9e8cd1d", "message": "return 409 in aggregated status if there is at least one failure\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-09-21T21:09:11Z", "type": "commit"}]}