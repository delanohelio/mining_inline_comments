{"pr_number": 524, "pr_title": "Fix GRPC high CPU usage and long running queries", "pr_createdAt": "2020-02-04T23:04:51Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/524", "timeline": [{"oid": "f0ecb0bd297529ea1517cb1422c888b4965a756c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f0ecb0bd297529ea1517cb1422c888b4965a756c", "message": "Fix GRPC high CPU usage and long running queries\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-04T22:55:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3ODg1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r374978858", "bodyText": "nit: Why not just do the max of (int) filter.getLimit() and grpcProperties.getMaxPageSize().\nI think based on the logic, Integer.MAX_VALUE will never be the limit, and  grpcProperties.getMaxPageSize() will always have a value.", "author": "Nana-EC", "createdAt": "2020-02-04T23:17:10Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -54,15 +58,22 @@\n                     .lessThan(instantToLongConverter.convert(filter.getEndTime()));\n         }\n \n+        int limit = filter.hasLimit() ? (int) filter.getLimit() : Integer.MAX_VALUE;\n+        int pageSize = Math.min(limit, grpcProperties.getMaxPageSize());", "originalCommit": "f0ecb0bd297529ea1517cb1422c888b4965a756c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NzQzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r374997439", "bodyText": "Because if limit is 5 million we don't want to pick that as max. Unless you mean min, in which case limit can be zero for unlimited and don't want to choose that as min either", "author": "steven-sheehy", "createdAt": "2020-02-05T00:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3ODg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MDY0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r374980643", "bodyText": "Wish there was an easy way to utilize the onNext logic to test that x number of pages were traversed on a call to the db. Just logs for now is okay I guess", "author": "Nana-EC", "createdAt": "2020-02-04T23:22:29Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -54,15 +58,22 @@\n                     .lessThan(instantToLongConverter.convert(filter.getEndTime()));\n         }\n \n+        int limit = filter.hasLimit() ? (int) filter.getLimit() : Integer.MAX_VALUE;\n+        int pageSize = Math.min(limit, grpcProperties.getMaxPageSize());\n+        Pageable pageable = PageRequest.of(0, pageSize);\n+\n         return databaseClient.select()\n                 .from(TopicMessage.class)\n                 .matching(whereClause)\n                 .orderBy(Sort.by(\"consensus_timestamp\"))\n+                .page(pageable)\n                 .fetch()\n                 .all()\n-                .as(t -> filter.hasLimit() ? t.limitRequest(filter.getLimit()) : t)\n                 .name(\"findByFilter\")\n                 .metrics()\n-                .doOnSubscribe(s -> log.debug(\"Executing query: {}\", filter));\n+                .doOnSubscribe(s -> log.debug(\"Executing query: {}\", filter))\n+                .doOnCancel(() -> log.debug(\"[{}] Cancelled query\", filter.getSubscriberId()))\n+                .doOnComplete(() -> log.debug(\"[{}] Completed query\", filter.getSubscriberId()))\n+                .doOnNext(t -> log.trace(\"[{}] Next message: {}\", filter.getSubscriberId(), t));", "originalCommit": "f0ecb0bd297529ea1517cb1422c888b4965a756c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxMzgwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r375413803", "bodyText": "And our performance tests", "author": "Nana-EC", "createdAt": "2020-02-05T17:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MDY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MTQzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r374981435", "bodyText": "Is r2dbc stable enough now that we trust taking new version automatically? If not maybe we should peg to a version we know works and manually increase it till we're comfortable.", "author": "Nana-EC", "createdAt": "2020-02-04T23:25:09Z", "path": "hedera-mirror-grpc/pom.xml", "diffHunk": "@@ -37,10 +37,13 @@\n             <groupId>io.micrometer</groupId>\n             <artifactId>micrometer-registry-elastic</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.r2dbc</groupId>\n+            <artifactId>r2dbc-pool</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>io.r2dbc</groupId>\n             <artifactId>r2dbc-postgresql</artifactId>\n-            <version>0.8.1.BUILD-SNAPSHOT</version>", "originalCommit": "f0ecb0bd297529ea1517cb1422c888b4965a756c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NzkyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r374997920", "bodyText": "This is exactly what's done here. The version is controlled via the hardcoded version of the spring r2dbc BOM import in the same file. There's transitive dependencies as well like r2dbc-spi so just hardcoding r2dbc-postgresql wouldn't be enough. Better to use the BOM version.", "author": "steven-sheehy", "createdAt": "2020-02-05T00:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MTQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwODg1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r375408858", "bodyText": "Gotcha", "author": "Nana-EC", "createdAt": "2020-02-05T17:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MTQzNQ=="}], "type": "inlineReview"}, {"oid": "9bedd0714849a0e695f3eed423e8d35b863d4944", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9bedd0714849a0e695f3eed423e8d35b863d4944", "message": "Set r2dbc timeout values & bump scheduler pool\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-05T20:53:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMDUxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r375510517", "bodyText": "possible divide by zero", "author": "mike-burrage-hedera", "createdAt": "2020-02-05T21:12:55Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/service/TopicMessageServiceImpl.java", "diffHunk": "@@ -157,8 +158,9 @@ boolean isNext(TopicMessage topicMessage) {\n         }\n \n         void onComplete() {\n-            log.info(\"[{}] Topic {} {} complete with {} messages in {}\", filter\n-                    .getSubscriberId(), topicId, mode, count, stopwatch);\n+            var rate = (int) (1_000_000.0 * count.get() / stopwatch.elapsed(TimeUnit.MICROSECONDS));", "originalCommit": "9bedd0714849a0e695f3eed423e8d35b863d4944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMjMwNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/524#discussion_r375512304", "bodyText": "It's the same code in Downloader. I think the intent is that microseconds is low enough it can't be zero. But can do a check", "author": "steven-sheehy", "createdAt": "2020-02-05T21:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMDUxNw=="}], "type": "inlineReview"}, {"oid": "dab7d788c61359c72463140678c23a81bb333a60", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dab7d788c61359c72463140678c23a81bb333a60", "message": "More fixes and bump versions\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-05T22:50:08Z", "type": "commit"}, {"oid": "4cce714761715ac28269322e752d8b2560aeaa66", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4cce714761715ac28269322e752d8b2560aeaa66", "message": "Rollback some changes\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-06T03:23:49Z", "type": "commit"}]}