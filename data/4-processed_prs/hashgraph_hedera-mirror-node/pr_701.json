{"pr_number": 701, "pr_title": "Fix address book updates that span transactions", "pr_createdAt": "2020-04-21T18:48:15Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/701", "timeline": [{"oid": "098333579d741b419e915d6995372bedcf815697", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/098333579d741b419e915d6995372bedcf815697", "message": "Fix address book updates that span transactions\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-04-21T18:47:11Z", "type": "commit"}, {"oid": "467f28fd8eb42a197f232bc856eb23afb476bb53", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/467f28fd8eb42a197f232bc856eb23afb476bb53", "message": "Remove unreadable test that doesn't work in CircleCI\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-04-21T19:00:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwODkxMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/701#discussion_r412408910", "bodyText": "nit: store addressBookFile.exists() and addressBookFile.canRead() and reference them here", "author": "Nana-EC", "createdAt": "2020-04-21T18:52:45Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -46,71 +46,100 @@\n @Named\n public class NetworkAddressBook {\n \n-    private MirrorProperties mirrorProperties;\n-    private byte[] addressBookBytes = new byte[0];\n+    private final MirrorProperties mirrorProperties;\n+    private volatile Collection<NodeAddress> nodeAddresses;\n \n     public NetworkAddressBook(MirrorProperties mirrorProperties) {\n         this.mirrorProperties = mirrorProperties;\n+        this.nodeAddresses = Collections.emptyList();\n         init();\n     }\n \n     private void init() {\n         Path path = mirrorProperties.getAddressBookPath();\n         try {\n             File addressBookFile = path.toFile();\n+            byte[] addressBookBytes = null;\n+\n             if (!addressBookFile.exists() || !addressBookFile.canRead()) {\n+                if (addressBookFile.exists() && !addressBookFile.canRead()) {", "originalCommit": "098333579d741b419e915d6995372bedcf815697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMzA5OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/701#discussion_r412433098", "bodyText": "I reworked it to not duplicate method calls without the need for variables.", "author": "steven-sheehy", "createdAt": "2020-04-21T19:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwODkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyMDI3NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/701#discussion_r412420274", "bodyText": "q: did you want to log the error for future trouble shooting ?", "author": "Nana-EC", "createdAt": "2020-04-21T19:10:07Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -46,71 +46,100 @@\n @Named\n public class NetworkAddressBook {\n \n-    private MirrorProperties mirrorProperties;\n-    private byte[] addressBookBytes = new byte[0];\n+    private final MirrorProperties mirrorProperties;\n+    private volatile Collection<NodeAddress> nodeAddresses;\n \n     public NetworkAddressBook(MirrorProperties mirrorProperties) {\n         this.mirrorProperties = mirrorProperties;\n+        this.nodeAddresses = Collections.emptyList();\n         init();\n     }\n \n     private void init() {\n         Path path = mirrorProperties.getAddressBookPath();\n         try {\n             File addressBookFile = path.toFile();\n+            byte[] addressBookBytes = null;\n+\n             if (!addressBookFile.exists() || !addressBookFile.canRead()) {\n+                if (addressBookFile.exists() && !addressBookFile.canRead()) {\n+                    log.warn(\"Backing up unreadable address book: {}\", path);\n+                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n+                }\n+\n                 HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n                 String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n                 Resource resource = new ClassPathResource(resourcePath, getClass());\n                 Utility.ensureDirectory(path.getParent());\n-                IOUtils.copy(resource.getInputStream(), new FileOutputStream(addressBookFile));\n-                log.info(\"Copied default address book {} to {}\", resource, path);\n+\n+                log.info(\"Loading default address book {}\", resource);\n+                addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+            } else {\n+                log.info(\"Restoring existing address book {}\", path);\n+                addressBookBytes = Files.readAllBytes(path);\n             }\n+\n+            update(addressBookBytes);\n         } catch (Exception e) {\n             log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n         }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book\");\n+        }\n     }\n \n     public void update(byte[] newContents) throws IOException {\n-        addressBookBytes = newContents;\n-        saveToDisk();\n+        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n     }\n \n     public void append(byte[] extraContents) throws IOException {\n-        byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);\n-        System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);\n-        addressBookBytes = newAddressBook;\n-        saveToDisk();\n+        saveToDisk(extraContents, StandardOpenOption.APPEND);\n     }\n \n-    private void saveToDisk() throws IOException {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        Files.write(path, addressBookBytes);\n-        log.info(\"New address book successfully saved to {}\", path);\n-    }\n+    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Ignored empty byte array\");\n+            return;\n+        }\n \n-    public Collection<NodeAddress> load() {\n-        ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n         Path path = mirrorProperties.getAddressBookPath();\n+        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n+        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n+        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n \n         try {\n-            byte[] addressBookBytes = Files.readAllBytes(path);\n-            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n-\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                NodeAddress nodeAddress = NodeAddress.builder()\n-                        .id(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .build();\n-                builder.add(nodeAddress);\n+            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n+            if (!nodeAddresses.isEmpty()) {\n+                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n+                this.nodeAddresses = nodeAddresses;\n+                log.info(\"New address book successfully parsed and saved to {}\", path);\n             }\n-        } catch (Exception ex) {\n-            log.error(\"Failed to parse NodeAddressBook from {}\", path, ex);\n+        } catch (Exception e) {\n+            // Ignore partial update errors", "originalCommit": "098333579d741b419e915d6995372bedcf815697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMjQ0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/701#discussion_r412432444", "bodyText": "The error isn't useful for partial updates. But maybe it's possible we got the complete file but there was still errors so added the log.", "author": "steven-sheehy", "createdAt": "2020-04-21T19:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyMDI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyMTUwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/701#discussion_r412421503", "bodyText": "Do we have a place that says how many nodes were added to list? If not here's a good place to trace log that.", "author": "Nana-EC", "createdAt": "2020-04-21T19:12:00Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -46,71 +46,100 @@\n @Named\n public class NetworkAddressBook {\n \n-    private MirrorProperties mirrorProperties;\n-    private byte[] addressBookBytes = new byte[0];\n+    private final MirrorProperties mirrorProperties;\n+    private volatile Collection<NodeAddress> nodeAddresses;\n \n     public NetworkAddressBook(MirrorProperties mirrorProperties) {\n         this.mirrorProperties = mirrorProperties;\n+        this.nodeAddresses = Collections.emptyList();\n         init();\n     }\n \n     private void init() {\n         Path path = mirrorProperties.getAddressBookPath();\n         try {\n             File addressBookFile = path.toFile();\n+            byte[] addressBookBytes = null;\n+\n             if (!addressBookFile.exists() || !addressBookFile.canRead()) {\n+                if (addressBookFile.exists() && !addressBookFile.canRead()) {\n+                    log.warn(\"Backing up unreadable address book: {}\", path);\n+                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n+                }\n+\n                 HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n                 String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n                 Resource resource = new ClassPathResource(resourcePath, getClass());\n                 Utility.ensureDirectory(path.getParent());\n-                IOUtils.copy(resource.getInputStream(), new FileOutputStream(addressBookFile));\n-                log.info(\"Copied default address book {} to {}\", resource, path);\n+\n+                log.info(\"Loading default address book {}\", resource);\n+                addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+            } else {\n+                log.info(\"Restoring existing address book {}\", path);\n+                addressBookBytes = Files.readAllBytes(path);\n             }\n+\n+            update(addressBookBytes);\n         } catch (Exception e) {\n             log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n         }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book\");\n+        }\n     }\n \n     public void update(byte[] newContents) throws IOException {\n-        addressBookBytes = newContents;\n-        saveToDisk();\n+        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n     }\n \n     public void append(byte[] extraContents) throws IOException {\n-        byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);\n-        System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);\n-        addressBookBytes = newAddressBook;\n-        saveToDisk();\n+        saveToDisk(extraContents, StandardOpenOption.APPEND);\n     }\n \n-    private void saveToDisk() throws IOException {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        Files.write(path, addressBookBytes);\n-        log.info(\"New address book successfully saved to {}\", path);\n-    }\n+    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Ignored empty byte array\");\n+            return;\n+        }\n \n-    public Collection<NodeAddress> load() {\n-        ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n         Path path = mirrorProperties.getAddressBookPath();\n+        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n+        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n+        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n \n         try {\n-            byte[] addressBookBytes = Files.readAllBytes(path);\n-            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n-\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                NodeAddress nodeAddress = NodeAddress.builder()\n-                        .id(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .build();\n-                builder.add(nodeAddress);\n+            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n+            if (!nodeAddresses.isEmpty()) {\n+                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n+                this.nodeAddresses = nodeAddresses;\n+                log.info(\"New address book successfully parsed and saved to {}\", path);\n             }\n-        } catch (Exception ex) {\n-            log.error(\"Failed to parse NodeAddressBook from {}\", path, ex);\n+        } catch (Exception e) {\n+            // Ignore partial update errors\n+        }\n+    }\n+\n+    private Collection<NodeAddress> parse(Path path) throws Exception {\n+        byte[] addressBookBytes = Files.readAllBytes(path);\n+        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+        ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n+\n+        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                .getNodeAddressList()) {\n+            NodeAddress nodeAddress = NodeAddress.builder()\n+                    .id(nodeAddressProto.getMemo().toStringUtf8())\n+                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                    .port(nodeAddressProto.getPortno())\n+                    .publicKey(nodeAddressProto.getRSAPubKey())\n+                    .build();\n+            builder.add(nodeAddress);", "originalCommit": "467f28fd8eb42a197f232bc856eb23afb476bb53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMjUzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/701#discussion_r412432536", "bodyText": "Added to existing log", "author": "steven-sheehy", "createdAt": "2020-04-21T19:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyMTUwMw=="}], "type": "inlineReview"}, {"oid": "e8481a8b76aa00995ac8995b7b44e4717946e01f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e8481a8b76aa00995ac8995b7b44e4717946e01f", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-04-21T19:28:00Z", "type": "commit"}]}