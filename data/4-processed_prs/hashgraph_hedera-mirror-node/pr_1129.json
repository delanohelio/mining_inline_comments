{"pr_number": 1129, "pr_title": "Rosetta: Unit tests for domain types and tools", "pr_createdAt": "2020-10-14T07:48:56Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129", "timeline": [{"oid": "ba2727b9945699cee65c325759323f78edd25fa2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ba2727b9945699cee65c325759323f78edd25fa2", "message": "Merge Util Unit tests into new branch (#148)\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>\n\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>\nSigned-off-by: Daniel <Daniel.K.Ivanov95@gmail.com>", "committedDate": "2020-10-14T07:52:31Z", "type": "commit"}, {"oid": "ba2727b9945699cee65c325759323f78edd25fa2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ba2727b9945699cee65c325759323f78edd25fa2", "message": "Merge Util Unit tests into new branch (#148)\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>\n\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>\nSigned-off-by: Daniel <Daniel.K.Ivanov95@gmail.com>", "committedDate": "2020-10-14T07:52:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0NzY1Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504947653", "bodyText": "should assert err is nil", "author": "xin-hedera", "createdAt": "2020-10-14T20:18:45Z", "path": "hedera-mirror-rosetta/app/domain/types/account_test.go", "diffHunk": "@@ -0,0 +1,171 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package types\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\tentityid \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/encoding\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func exampleAccount() *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  0,\n+\t\t\tRealmNum:  0,\n+\t\t\tEntityNum: 0,\n+\t\t},\n+\t}\n+}\n+\n+func exampleAccountWith(shard, realm, entity int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: entity,\n+\t\t},\n+\t}\n+}\n+\n+func expectedAccount() *types.AccountIdentifier {\n+\treturn &types.AccountIdentifier{\n+\t\tAddress:    \"0.0.0\",\n+\t\tSubAccount: nil,\n+\t\tMetadata:   nil,\n+\t}\n+}\n+\n+func expectedAccountWith(shard int64, realm int64, number int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: number,\n+\t\t},\n+\t}\n+}\n+\n+func TestToRosettaAccount(t *testing.T) {\n+\t// when:\n+\trosettaAccount := exampleAccount().ToRosetta()\n+\n+\t// then:\n+\tassert.Equal(t, expectedAccount(), rosettaAccount)\n+}\n+\n+func TestNewAccountFromEncodedID(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tinput, shard, realm, number int64\n+\t}{\n+\t\t{0, 0, 0, 0},\n+\t\t{10, 0, 0, 10},\n+\t\t{4294967295, 0, 0, 4294967295},\n+\t\t{2814792716779530, 10, 10, 10},\n+\t\t{9223372036854775807, 32767, 65535, 4294967295},\n+\t\t{9223090561878065152, 32767, 0, 0},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\t// when:\n+\t\tres, _ := NewAccountFromEncodedID(tt.input)", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0ODcwMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504948701", "bodyText": "these are all negative test data, should test data which can be successfully encoded.", "author": "xin-hedera", "createdAt": "2020-10-14T20:20:40Z", "path": "hedera-mirror-rosetta/app/domain/types/account_test.go", "diffHunk": "@@ -0,0 +1,171 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package types\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\tentityid \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/encoding\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func exampleAccount() *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  0,\n+\t\t\tRealmNum:  0,\n+\t\t\tEntityNum: 0,\n+\t\t},\n+\t}\n+}\n+\n+func exampleAccountWith(shard, realm, entity int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: entity,\n+\t\t},\n+\t}\n+}\n+\n+func expectedAccount() *types.AccountIdentifier {\n+\treturn &types.AccountIdentifier{\n+\t\tAddress:    \"0.0.0\",\n+\t\tSubAccount: nil,\n+\t\tMetadata:   nil,\n+\t}\n+}\n+\n+func expectedAccountWith(shard int64, realm int64, number int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: number,\n+\t\t},\n+\t}\n+}\n+\n+func TestToRosettaAccount(t *testing.T) {\n+\t// when:\n+\trosettaAccount := exampleAccount().ToRosetta()\n+\n+\t// then:\n+\tassert.Equal(t, expectedAccount(), rosettaAccount)\n+}\n+\n+func TestNewAccountFromEncodedID(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tinput, shard, realm, number int64\n+\t}{\n+\t\t{0, 0, 0, 0},\n+\t\t{10, 0, 0, 10},\n+\t\t{4294967295, 0, 0, 4294967295},\n+\t\t{2814792716779530, 10, 10, 10},\n+\t\t{9223372036854775807, 32767, 65535, 4294967295},\n+\t\t{9223090561878065152, 32767, 0, 0},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\t// when:\n+\t\tres, _ := NewAccountFromEncodedID(tt.input)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, expectedAccountWith(tt.shard, tt.realm, tt.number), res)\n+\t}\n+}\n+\n+func TestComputeEncodedID(t *testing.T) {\n+\tvar testData = []struct {\n+\t\tshard, realm, number int64\n+\t}{\n+\t\t{-1, 123, 246},\n+\t\t{123, -123, 246},\n+\t\t{123, 23, -246},", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk1MjQ4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504952485", "bodyText": "nit: better to move this test func right after TestNewAccountFromEncodedID, or group the test cases for the same function like:\nfunc TestNewAccountFromEncodedID(t *testing.T) {\n  t.Run(\"first test case\", func(t *testing.T) {\n    ...\n  });\n\n  t.Run(\"second test case\", func(t *testing.T) {\n    ...\n  });\n}", "author": "xin-hedera", "createdAt": "2020-10-14T20:27:50Z", "path": "hedera-mirror-rosetta/app/domain/types/account_test.go", "diffHunk": "@@ -0,0 +1,171 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package types\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\tentityid \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/encoding\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func exampleAccount() *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  0,\n+\t\t\tRealmNum:  0,\n+\t\t\tEntityNum: 0,\n+\t\t},\n+\t}\n+}\n+\n+func exampleAccountWith(shard, realm, entity int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: entity,\n+\t\t},\n+\t}\n+}\n+\n+func expectedAccount() *types.AccountIdentifier {\n+\treturn &types.AccountIdentifier{\n+\t\tAddress:    \"0.0.0\",\n+\t\tSubAccount: nil,\n+\t\tMetadata:   nil,\n+\t}\n+}\n+\n+func expectedAccountWith(shard int64, realm int64, number int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: number,\n+\t\t},\n+\t}\n+}\n+\n+func TestToRosettaAccount(t *testing.T) {\n+\t// when:\n+\trosettaAccount := exampleAccount().ToRosetta()\n+\n+\t// then:\n+\tassert.Equal(t, expectedAccount(), rosettaAccount)\n+}\n+\n+func TestNewAccountFromEncodedID(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tinput, shard, realm, number int64\n+\t}{\n+\t\t{0, 0, 0, 0},\n+\t\t{10, 0, 0, 10},\n+\t\t{4294967295, 0, 0, 4294967295},\n+\t\t{2814792716779530, 10, 10, 10},\n+\t\t{9223372036854775807, 32767, 65535, 4294967295},\n+\t\t{9223090561878065152, 32767, 0, 0},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\t// when:\n+\t\tres, _ := NewAccountFromEncodedID(tt.input)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, expectedAccountWith(tt.shard, tt.realm, tt.number), res)\n+\t}\n+}\n+\n+func TestComputeEncodedID(t *testing.T) {\n+\tvar testData = []struct {\n+\t\tshard, realm, number int64\n+\t}{\n+\t\t{-1, 123, 246},\n+\t\t{123, -123, 246},\n+\t\t{123, 23, -246},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\tres, e := exampleAccountWith(tt.shard, tt.realm, tt.number).ComputeEncodedID()\n+\t\tassert.Zero(t, res)\n+\t\tassert.NotNil(t, e)\n+\t}\n+}\n+\n+func TestNewAccountFromEncodedIDThrows(t *testing.T) {", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk1MjY2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504952669", "bodyText": "should assert err is nil", "author": "xin-hedera", "createdAt": "2020-10-14T20:28:13Z", "path": "hedera-mirror-rosetta/app/domain/types/account_test.go", "diffHunk": "@@ -0,0 +1,171 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package types\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\tentityid \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/encoding\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func exampleAccount() *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  0,\n+\t\t\tRealmNum:  0,\n+\t\t\tEntityNum: 0,\n+\t\t},\n+\t}\n+}\n+\n+func exampleAccountWith(shard, realm, entity int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: entity,\n+\t\t},\n+\t}\n+}\n+\n+func expectedAccount() *types.AccountIdentifier {\n+\treturn &types.AccountIdentifier{\n+\t\tAddress:    \"0.0.0\",\n+\t\tSubAccount: nil,\n+\t\tMetadata:   nil,\n+\t}\n+}\n+\n+func expectedAccountWith(shard int64, realm int64, number int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: number,\n+\t\t},\n+\t}\n+}\n+\n+func TestToRosettaAccount(t *testing.T) {\n+\t// when:\n+\trosettaAccount := exampleAccount().ToRosetta()\n+\n+\t// then:\n+\tassert.Equal(t, expectedAccount(), rosettaAccount)\n+}\n+\n+func TestNewAccountFromEncodedID(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tinput, shard, realm, number int64\n+\t}{\n+\t\t{0, 0, 0, 0},\n+\t\t{10, 0, 0, 10},\n+\t\t{4294967295, 0, 0, 4294967295},\n+\t\t{2814792716779530, 10, 10, 10},\n+\t\t{9223372036854775807, 32767, 65535, 4294967295},\n+\t\t{9223090561878065152, 32767, 0, 0},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\t// when:\n+\t\tres, _ := NewAccountFromEncodedID(tt.input)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, expectedAccountWith(tt.shard, tt.realm, tt.number), res)\n+\t}\n+}\n+\n+func TestComputeEncodedID(t *testing.T) {\n+\tvar testData = []struct {\n+\t\tshard, realm, number int64\n+\t}{\n+\t\t{-1, 123, 246},\n+\t\t{123, -123, 246},\n+\t\t{123, 23, -246},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\tres, e := exampleAccountWith(tt.shard, tt.realm, tt.number).ComputeEncodedID()\n+\t\tassert.Zero(t, res)\n+\t\tassert.NotNil(t, e)\n+\t}\n+}\n+\n+func TestNewAccountFromEncodedIDThrows(t *testing.T) {\n+\t// given:\n+\ttestData := int64(-1)\n+\n+\t// when:\n+\tres, err := NewAccountFromEncodedID(testData)\n+\n+\t// then:\n+\tassert.Nil(t, res)\n+\tassert.NotNil(t, err)\n+}\n+\n+func TestAccountFromString(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tinput                string\n+\t\tshard, realm, number int64\n+\t}{\n+\t\t{\"0.0.0\", 0, 0, 0},\n+\t\t{\"0.0.10\", 0, 0, 10},\n+\t\t{\"0.0.4294967295\", 0, 0, 4294967295},\n+\t\t{\"10.10.10\", 10, 10, 10},\n+\t\t{\"32767.65535.4294967295\", 32767, 65535, 4294967295},\n+\t\t{\"32767.0.0\", 32767, 0, 0},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\t// when:\n+\t\tres, _ := AccountFromString(tt.input)", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk1NTk4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504955988", "bodyText": "should add a test case for Account.String()", "author": "xin-hedera", "createdAt": "2020-10-14T20:34:39Z", "path": "hedera-mirror-rosetta/app/domain/types/account_test.go", "diffHunk": "@@ -0,0 +1,171 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package types\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\tentityid \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/encoding\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func exampleAccount() *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  0,\n+\t\t\tRealmNum:  0,\n+\t\t\tEntityNum: 0,\n+\t\t},\n+\t}\n+}\n+\n+func exampleAccountWith(shard, realm, entity int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: entity,\n+\t\t},\n+\t}\n+}\n+\n+func expectedAccount() *types.AccountIdentifier {\n+\treturn &types.AccountIdentifier{\n+\t\tAddress:    \"0.0.0\",\n+\t\tSubAccount: nil,\n+\t\tMetadata:   nil,\n+\t}\n+}\n+\n+func expectedAccountWith(shard int64, realm int64, number int64) *Account {\n+\treturn &Account{\n+\t\tentityid.EntityId{\n+\t\t\tShardNum:  shard,\n+\t\t\tRealmNum:  realm,\n+\t\t\tEntityNum: number,\n+\t\t},\n+\t}\n+}\n+\n+func TestToRosettaAccount(t *testing.T) {\n+\t// when:\n+\trosettaAccount := exampleAccount().ToRosetta()\n+\n+\t// then:\n+\tassert.Equal(t, expectedAccount(), rosettaAccount)\n+}\n+\n+func TestNewAccountFromEncodedID(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tinput, shard, realm, number int64\n+\t}{\n+\t\t{0, 0, 0, 0},\n+\t\t{10, 0, 0, 10},\n+\t\t{4294967295, 0, 0, 4294967295},\n+\t\t{2814792716779530, 10, 10, 10},\n+\t\t{9223372036854775807, 32767, 65535, 4294967295},\n+\t\t{9223090561878065152, 32767, 0, 0},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\t// when:\n+\t\tres, _ := NewAccountFromEncodedID(tt.input)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, expectedAccountWith(tt.shard, tt.realm, tt.number), res)\n+\t}\n+}\n+\n+func TestComputeEncodedID(t *testing.T) {\n+\tvar testData = []struct {\n+\t\tshard, realm, number int64\n+\t}{\n+\t\t{-1, 123, 246},\n+\t\t{123, -123, 246},\n+\t\t{123, 23, -246},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\tres, e := exampleAccountWith(tt.shard, tt.realm, tt.number).ComputeEncodedID()\n+\t\tassert.Zero(t, res)\n+\t\tassert.NotNil(t, e)\n+\t}\n+}\n+\n+func TestNewAccountFromEncodedIDThrows(t *testing.T) {\n+\t// given:\n+\ttestData := int64(-1)\n+\n+\t// when:\n+\tres, err := NewAccountFromEncodedID(testData)\n+\n+\t// then:\n+\tassert.Nil(t, res)\n+\tassert.NotNil(t, err)\n+}\n+\n+func TestAccountFromString(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tinput                string\n+\t\tshard, realm, number int64\n+\t}{\n+\t\t{\"0.0.0\", 0, 0, 0},\n+\t\t{\"0.0.10\", 0, 0, 10},\n+\t\t{\"0.0.4294967295\", 0, 0, 4294967295},\n+\t\t{\"10.10.10\", 10, 10, 10},\n+\t\t{\"32767.65535.4294967295\", 32767, 65535, 4294967295},\n+\t\t{\"32767.0.0\", 32767, 0, 0},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\t// when:\n+\t\tres, _ := AccountFromString(tt.input)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, expectedAccountWith(tt.shard, tt.realm, tt.number), res)\n+\t}\n+}\n+\n+func TestAccountFromStringThrows(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tinput string\n+\t}{\n+\t\t{\"a.0.0\"},\n+\t\t{\"0.b.0\"},\n+\t\t{\"0.0c\"},\n+\t\t{\"0.0.c\"},\n+\t}\n+\n+\tvar expectedNil *Account = nil\n+\n+\tfor _, tt := range testData {\n+\t\t// when:\n+\t\tres, err := AccountFromString(tt.input)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, expectedNil, res)\n+\t\tassert.Equal(t, errors.Errors[errors.InvalidAccount], err)\n+\t}\n+}", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk1ODMxOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504958318", "bodyText": "should test ToRosetta with AddressBookEntries with different sizes", "author": "xin-hedera", "createdAt": "2020-10-14T20:39:20Z", "path": "hedera-mirror-rosetta/app/domain/types/address_book_entry_test.go", "diffHunk": "@@ -0,0 +1,55 @@\n+package types\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\tentityid \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/encoding\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func exampleAddressBookEntries() *AddressBookEntries {\n+\treturn &AddressBookEntries{\n+\t\t[]*AddressBookEntry{\n+\t\t\t{\n+\t\t\t\tPeerId: &Account{\n+\t\t\t\t\tentityid.EntityId{\n+\t\t\t\t\t\tShardNum:  0,\n+\t\t\t\t\t\tRealmNum:  0,\n+\t\t\t\t\t\tEntityNum: 0,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tMetadata: map[string]interface{}{\n+\t\t\t\t\t\"ip\":   \"123\",\n+\t\t\t\t\t\"port\": \"20514\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+}\n+\n+func expectedRosettaPeers() []*types.Peer {\n+\treturn []*types.Peer{\n+\t\t{\n+\t\t\tPeerID: (&Account{\n+\t\t\t\tentityid.EntityId{\n+\t\t\t\t\tShardNum:  0,\n+\t\t\t\t\tRealmNum:  0,\n+\t\t\t\t\tEntityNum: 0,\n+\t\t\t\t},\n+\t\t\t}).String(),\n+\t\t\tMetadata: map[string]interface{}{\n+\t\t\t\t\"ip\":   \"123\",\n+\t\t\t\t\"port\": \"20514\",\n+\t\t\t},\n+\t\t},\n+\t}\n+}\n+\n+func TestToRosettaPeers(t *testing.T) {\n+\t// when:\n+\tresult := exampleAddressBookEntries().ToRosetta()", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2MjM3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504962371", "bodyText": "assigning 10000000 to  exampleBlock.ConsensusStartNanos is redundant", "author": "xin-hedera", "createdAt": "2020-10-14T20:47:05Z", "path": "hedera-mirror-rosetta/app/domain/types/block_test.go", "diffHunk": "@@ -0,0 +1,85 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package types\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func exampleBlock() *Block {\n+\treturn &Block{\n+\t\tIndex:               2,\n+\t\tHash:                \"somehash\",\n+\t\tConsensusStartNanos: 10000000,\n+\t\tConsensusEndNanos:   12300000,\n+\t\tParentIndex:         1,\n+\t\tParentHash:          \"someparenthash\",\n+\t\tTransactions: []*Transaction{\n+\t\t\t{\n+\t\t\t\tHash:       \"somehash\",\n+\t\t\t\tOperations: []*Operation{},\n+\t\t\t},\n+\t\t},\n+\t}\n+}\n+\n+func expectedBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tBlockIdentifier: &types.BlockIdentifier{\n+\t\t\tIndex: 2,\n+\t\t\tHash:  \"0xsomehash\",\n+\t\t},\n+\t\tParentBlockIdentifier: &types.BlockIdentifier{\n+\t\t\tIndex: 1,\n+\t\t\tHash:  \"0xsomeparenthash\",\n+\t\t},\n+\t\tTimestamp: int64(10),\n+\t\tTransactions: []*types.Transaction{\n+\t\t\t{\n+\t\t\t\tTransactionIdentifier: &types.TransactionIdentifier{Hash: \"somehash\"},\n+\t\t\t\tOperations:            []*types.Operation{},\n+\t\t\t\tMetadata:              nil,\n+\t\t\t},\n+\t\t},\n+\t}\n+}\n+\n+func TestToRosettaBlock(t *testing.T) {\n+\t// when:\n+\trosettaBlockResult := exampleBlock().ToRosetta()\n+\n+\t// then:\n+\tassert.Equal(t, expectedBlock(), rosettaBlockResult)\n+}\n+\n+func TestGetTimestampMillis(t *testing.T) {\n+\t// given:\n+\texampleBlock := exampleBlock()\n+\texampleBlock.ConsensusStartNanos = 10000000", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2NTUyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504965525", "bodyText": "swap result and expectedData[i].result", "author": "xin-hedera", "createdAt": "2020-10-14T20:53:16Z", "path": "hedera-mirror-rosetta/tools/hex/hex_test.go", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package hex\n+\n+import (\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func TestAddsPrefixCorrectly(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tstring string\n+\t}{\n+\t\t{\"addprefix\"},\n+\t\t{\"\"},\n+\t\t{\"123\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x \"},\n+\t\t{\"0x123aasd\"},\n+\t}\n+\n+\tvar expectedData = []struct {\n+\t\tresult string\n+\t}{\n+\t\t{\"0xaddprefix\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x123\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x \"},\n+\t\t{\"0x123aasd\"},\n+\t}\n+\n+\tfor i, tt := range testData {\n+\t\t// when:\n+\t\tresult := SafeAddHexPrefix(tt.string)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, result, expectedData[i].result)", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2NTgyNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504965826", "bodyText": "swap result and expectedData[i].result", "author": "xin-hedera", "createdAt": "2020-10-14T20:53:53Z", "path": "hedera-mirror-rosetta/tools/hex/hex_test.go", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package hex\n+\n+import (\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func TestAddsPrefixCorrectly(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tstring string\n+\t}{\n+\t\t{\"addprefix\"},\n+\t\t{\"\"},\n+\t\t{\"123\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x \"},\n+\t\t{\"0x123aasd\"},\n+\t}\n+\n+\tvar expectedData = []struct {\n+\t\tresult string\n+\t}{\n+\t\t{\"0xaddprefix\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x123\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x \"},\n+\t\t{\"0x123aasd\"},\n+\t}\n+\n+\tfor i, tt := range testData {\n+\t\t// when:\n+\t\tresult := SafeAddHexPrefix(tt.string)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, result, expectedData[i].result)\n+\t}\n+}\n+\n+func TestRemovesPrefixCorrectly(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tstring string\n+\t}{\n+\t\t{\"0xaddprefix\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x123\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x \"},\n+\t\t{\"0x123aasd\"},\n+\t\t{\"0xaasd\"},\n+\t\t{\"234123\"},\n+\t}\n+\n+\tvar expectedData = []struct {\n+\t\tresult string\n+\t}{\n+\t\t{\"addprefix\"},\n+\t\t{\"\"},\n+\t\t{\"123\"},\n+\t\t{\"\"},\n+\t\t{\" \"},\n+\t\t{\"123aasd\"},\n+\t\t{\"aasd\"},\n+\t\t{\"234123\"},\n+\t}\n+\n+\tfor i, tt := range testData {\n+\t\t// when:\n+\t\tresult := SafeRemoveHexPrefix(tt.string)\n+\t\t// then:\n+\t\tassert.Equal(t, result, expectedData[i].result)", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2NjM1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504966352", "bodyText": "duplicate of row 2", "author": "xin-hedera", "createdAt": "2020-10-14T20:54:55Z", "path": "hedera-mirror-rosetta/tools/hex/hex_test.go", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package hex\n+\n+import (\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func TestAddsPrefixCorrectly(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tstring string\n+\t}{\n+\t\t{\"addprefix\"},\n+\t\t{\"\"},\n+\t\t{\"123\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x \"},\n+\t\t{\"0x123aasd\"},\n+\t}\n+\n+\tvar expectedData = []struct {\n+\t\tresult string\n+\t}{\n+\t\t{\"0xaddprefix\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x123\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x \"},\n+\t\t{\"0x123aasd\"},\n+\t}\n+\n+\tfor i, tt := range testData {\n+\t\t// when:\n+\t\tresult := SafeAddHexPrefix(tt.string)\n+\n+\t\t// then:\n+\t\tassert.Equal(t, result, expectedData[i].result)\n+\t}\n+}\n+\n+func TestRemovesPrefixCorrectly(t *testing.T) {\n+\t// given:\n+\tvar testData = []struct {\n+\t\tstring string\n+\t}{\n+\t\t{\"0xaddprefix\"},\n+\t\t{\"0x\"},\n+\t\t{\"0x123\"},\n+\t\t{\"0x\"},", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2NzUwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504967507", "bodyText": "should have testData of different sizes", "author": "xin-hedera", "createdAt": "2020-10-14T20:57:00Z", "path": "hedera-mirror-rosetta/tools/maphelper/maphelper_test.go", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package maphelper\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func TestGetsCorrectStringValuesFromMap(t *testing.T) {\n+\t// given:\n+\ttestData := map[int]string{", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2NzU3OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504967578", "bodyText": "should have testData of different sizes", "author": "xin-hedera", "createdAt": "2020-10-14T20:57:07Z", "path": "hedera-mirror-rosetta/tools/maphelper/maphelper_test.go", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package maphelper\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func TestGetsCorrectStringValuesFromMap(t *testing.T) {\n+\t// given:\n+\ttestData := map[int]string{\n+\t\t1: \"abc\",\n+\t}\n+\n+\t// when:\n+\tresult := GetStringValuesFromIntStringMap(testData)\n+\n+\t// then:\n+\tassert.Equal(t, 1, len(result))\n+\tassert.Equal(t, \"abc\", result[0])\n+}\n+\n+func TestGetsCorrectErrorValuesFromMap(t *testing.T) {\n+\t// given:\n+\terror := newErrorDummy(32, true)\n+\n+\ttestData := map[string]*types.Error{", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2OTAwNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1129#discussion_r504969004", "bodyText": "better to separate multiple calls into the testData struct array methodology", "author": "xin-hedera", "createdAt": "2020-10-14T21:00:02Z", "path": "hedera-mirror-rosetta/tools/validator/validator_test.go", "diffHunk": "@@ -0,0 +1,72 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package validator\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func TestValidateOperationsSum(t *testing.T) {\n+\t// given:\n+\toperationDummy := newOperationDummy(\"100\")\n+\toperationDummy2 := newOperationDummy(\"-100\")\n+\tinvalidOperationDummy := newOperationDummy(\"-100H\")\n+\n+\ttestData := []*types.Operation{\n+\t\toperationDummy,\n+\t\toperationDummy2,\n+\t}\n+\n+\tvar nil *types.Error = nil\n+\texpectedInvalidOperationsTotalAmountError := errors.Errors[errors.InvalidOperationsTotalAmount]\n+\texpectedInvalidAmountError := errors.Errors[errors.InvalidAmount]\n+\n+\t// when:\n+\tresult := ValidateOperationsSum(testData)\n+\n+\t// then:\n+\tassert.Equal(t, nil, result)\n+\n+\t// and:\n+\ttestData = append(testData, operationDummy2)\n+\n+\t// then:\n+\tresult = ValidateOperationsSum(testData)\n+\tassert.Equal(t, expectedInvalidOperationsTotalAmountError, result)\n+\n+\t// and:\n+\ttestData = append(testData, invalidOperationDummy)\n+\n+\t// then:\n+\tresult = ValidateOperationsSum(testData)\n+\tassert.Equal(t, expectedInvalidAmountError, result)", "originalCommit": "ba2727b9945699cee65c325759323f78edd25fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5b00b0e5ae9ec57ed74085e5a534145be4621d7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d5b00b0e5ae9ec57ed74085e5a534145be4621d7", "message": "PR Comments resolution (#150)\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\nSigned-off-by: Daniel <Daniel.K.Ivanov95@gmail.com>", "committedDate": "2020-10-15T11:03:34Z", "type": "commit"}]}