{"pr_number": 1319, "pr_title": "TimescaleDB : Add Flyway v2 migrations in support of new schema", "pr_createdAt": "2020-12-04T17:58:40Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2NTYzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r536665633", "bodyText": "Probably don't need to ingest FileData entries as the db environment is new and file_data should be empty.", "author": "Nana-EC", "createdAt": "2020-12-05T10:37:32Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V2_0_3__Address_Book.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class V2_0_3__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final MirrorProperties mirrorProperties;\n+    private final DataSource dataSource;\n+    private static final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > ? and entity_id \" +\n+            \"in (101, 102) order by consensus_timestamp asc limit ?\";\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public V2_0_3__Address_Book(MirrorProperties mirrorProperties, @Lazy AddressBookService addressBookService,\n+                                DataSource dataSource) {\n+        this.addressBookService = addressBookService;\n+        this.mirrorProperties = mirrorProperties;\n+        this.dataSource = dataSource;\n+    }\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+        if (Utility.skipMigrationVersion(getVersion(), context.getConfiguration())) {\n+            return;\n+        }\n+\n+        jdbcTemplate = new JdbcTemplate(dataSource);\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        AtomicLong currentConsensusTimestamp = new AtomicLong(0);\n+        AtomicLong fileDataEntries = new AtomicLong(0);\n+        byte[] addressBookBytes;\n+\n+        // if address book table is not empty skip migration\n+        try {\n+            // addressBookService throws when No valid address book found in DB\n+            addressBookService.getCurrent();\n+            log.warn(\"Address books exist in address_book table. Skipping migration\");\n+            return;\n+        } catch (IllegalStateException ex) {\n+            log.debug(\"No address book found in db. Searching for address book on file system\");\n+        }\n+\n+        // retrieve bootstrap address book from filesystem or classpath\n+        try {\n+            Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+            if (initialAddressBook != null) {\n+                addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                        initialAddressBook);\n+            } else {\n+                MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                Resource resource = new ClassPathResource(resourcePath, getClass());\n+                addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+            }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Unable to load bootstrap address book\", e);\n+        }\n+\n+        FileData bootStrapFileData = new FileData(0L, addressBookBytes,", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2NjY2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r536666664", "bodyText": "nit: If possible get variable to work. If not remove these lines", "author": "Nana-EC", "createdAt": "2020-12-05T10:39:22Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537844907", "bodyText": "Why are there two locations? Most of this info looks the same as the one in the classpath. Is there any where else to specify this info as these circleci config hacks will go away once we switch to Github actions. They've only been used to configure containers since we couldn't use test containers.", "author": "steven-sheehy", "createdAt": "2020-12-07T21:26:56Z", "path": ".circleci/config.yml", "diffHunk": "@@ -125,6 +125,10 @@ commands:\n                 grpc:\n                   \\<<: *db\n             spring:\n+              flyway:\n+                baseline-version: 0\n+                locations: \"filesystem:./src/main/resources/db/migration/v1,filesystem:../hedera-mirror-importer/src/main/resources/db/migration/v1\"", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4OTk0OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538589948", "bodyText": "In circle CI this config is used by both importer and grpc runs.\nThe location is the same but the file path to it is different in each case.\nSO had to populate the locations with both or else one module can't find the folder", "author": "Nana-EC", "createdAt": "2020-12-08T16:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5MjMwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538592305", "bodyText": "Depends how Github Actions looks for the migrations to specify it. Either ways the grpc test setup as well as rest need references to the migrations under the importer module to setup the db.", "author": "Nana-EC", "createdAt": "2020-12-08T16:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5NTA5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538595092", "bodyText": "I understand that the path varies for each and if they're both using this external config then it needs to have both. What I don't understand is why we need external config at all for this? The config looks identical to the one that's in the classpath. We should only have config for this in the classpath application.yml or boostrap.yml.", "author": "steven-sheehy", "createdAt": "2020-12-08T16:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyMDAxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538720011", "bodyText": "Gotcha. Yeah wasn't sure why it wasn't picking up the application.yml config previously.\nLocal maven runs seems to pick it up and all tests would pass but circle runs seemed to not do the same without the explicit specification here. It wouldn't honor the target and would try to run v2 migration also.\nCan circle back and try again and see what was off", "author": "Nana-EC", "createdAt": "2020-12-08T18:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY4MzI1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r540683252", "bodyText": "Seems like the spring.flyway.target and spring.flyway.locations are not honored from the classpath application.yml. It only gets picked up when explicitly added in circleci.", "author": "Nana-EC", "createdAt": "2020-12-11T04:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNzM4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541137384", "bodyText": "What about in bootstrap.yml?", "author": "steven-sheehy", "createdAt": "2020-12-11T18:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MDUyNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541350524", "bodyText": "Works for main bootstrap but not test bootstrap.\nShould want to run the v2 tests in CIrcleCI using the same code base we'd have to update the application.yml in this way through not preferred", "author": "Nana-EC", "createdAt": "2020-12-11T22:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NzY4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537847685", "bodyText": "Should use camel case variant like others", "author": "steven-sheehy", "createdAt": "2020-12-07T21:31:48Z", "path": "hedera-mirror-grpc/src/test/resources/config/application.yml", "diffHunk": "@@ -31,16 +31,17 @@ spring:\n     url: jdbc:postgresql://${hedera.mirror.grpc.db.host}:${hedera.mirror.grpc.db.port}/${hedera.mirror.grpc.db.name}\n     username: ${hedera.mirror.grpc.db.username}\n   flyway:\n-    connectRetries: 10\n     baselineOnMigrate: true\n-    baselineVersion: 0\n+    baseline-version: 0", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwNDUxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538704517", "bodyText": "I'm not a fan of the v1 and v2 folders. I can try to see if I can figure out how to get baselineVersion working.\nCan you provide the instructions on how you switch from default v1 to v2 with the current approach?\n\nSure. Simply update baselineVersion, locations and target as follows\nspring:\n      flyway:\n        baselineVersion: 1.999.999\n        locations: \"classpath:db/migration/v2\"\n        target: 2.999.999\nImporter startup and grpc test configs will pick those up.\nFor rest tests update the integrationDbOps.js flywayMigrate() with the above changes also", "author": "Nana-EC", "createdAt": "2020-12-08T18:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NzY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNjcwMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539406702", "bodyText": "Fixed camel case request", "author": "Nana-EC", "createdAt": "2020-12-09T15:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NzY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTIxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537849215", "bodyText": "Why can't we use latest-pg12 now?", "author": "steven-sheehy", "createdAt": "2020-12-07T21:34:24Z", "path": "hedera-mirror-grpc/src/test/resources/config/bootstrap.yml", "diffHunk": "@@ -1,6 +1,7 @@\n embedded:\n   postgresql:\n     enabled: true\n-    docker-image: postgres:9.6-alpine\n+    # set to timescale/timescaledb:latest-pg11 for v2 db schema. Eventually we'll want to use latest-pg12", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5Mzg2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538593869", "bodyText": "We can, 9.6 is just what was being used so didn't want to change that here.\nI can if we feel it's okay to do for v1", "author": "Nana-EC", "createdAt": "2020-12-08T16:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5OTA3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538599072", "bodyText": "I'm not saying to switch the postgres image, but the comment that states to use latest-pg11.", "author": "steven-sheehy", "createdAt": "2020-12-08T16:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczMTI4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538731285", "bodyText": "Ah understood.\nThe latest default value available in the suggested settings was timescale/timescaledb:latest-pg11.\nHowever, we can force it to use latest-pg12 like we're forcing it to use 9.6 which isn't a suggestion  yet.\nWill update", "author": "Nana-EC", "createdAt": "2020-12-08T19:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNjc4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539406787", "bodyText": "Updated", "author": "Nana-EC", "createdAt": "2020-12-09T15:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3NDk2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539874969", "bodyText": "Went with the image tag to match that used in the chart", "author": "Nana-EC", "createdAt": "2020-12-10T06:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDY3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537864672", "bodyText": "Would prefer this logic in an abstract base class that extends BaseJavaMigration. Utility methods should be avoided if at all possible as an anti-pattern.", "author": "steven-sheehy", "createdAt": "2020-12-07T21:59:50Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -505,4 +507,21 @@ public static boolean verifyHashChain(\n         }\n         return false;\n     }\n+\n+    /**\n+     * Determine whether a java migration should be skipped based on version and isIgnoreMissingMigrations setting\n+     *\n+     * @param current                The current java migration version\n+     * @param migrationConfiguration flyway Configuration\n+     * @return\n+     */\n+    public static boolean skipMigrationVersion(MigrationVersion current, Configuration migrationConfiguration) {", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5NTEwNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538595104", "bodyText": "Yeah I did consider the Abstract class, forgot why I switched to this option. Will revert and go the agreed way", "author": "Nana-EC", "createdAt": "2020-12-08T16:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNTc1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539405755", "bodyText": "Addressing this in PR #1340 where I added the MirrorBaseJavaMigration class that contains this logic", "author": "Nana-EC", "createdAt": "2020-12-09T15:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTQ4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537865481", "bodyText": "A ton of code duplication. The two address book migrations should extend the same base class and share 99% of their code.", "author": "steven-sheehy", "createdAt": "2020-12-07T22:01:12Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V2_0_3__Address_Book.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class V2_0_3__Address_Book extends BaseJavaMigration {", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5NjIwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538596205", "bodyText": "Yep, already left a comment regarding this. Will move it to AddressBookServiceImpl", "author": "Nana-EC", "createdAt": "2020-12-08T16:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwMzIyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539403228", "bodyText": "Addressing this in PR #1340 once that's merged I'll rebase and this will go away", "author": "Nana-EC", "createdAt": "2020-12-09T15:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NjEzNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537866134", "bodyText": "There's no test for this class so there's ton of missed coverage warnings here. Should add a test and similarly have a common base test class to reduce duplication.", "author": "steven-sheehy", "createdAt": "2020-12-07T22:02:17Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V2_0_3__Address_Book.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class V2_0_3__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final MirrorProperties mirrorProperties;\n+    private final DataSource dataSource;\n+    private static final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > ? and entity_id \" +\n+            \"in (101, 102) order by consensus_timestamp asc limit ?\";\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public V2_0_3__Address_Book(MirrorProperties mirrorProperties, @Lazy AddressBookService addressBookService,\n+                                DataSource dataSource) {\n+        this.addressBookService = addressBookService;\n+        this.mirrorProperties = mirrorProperties;\n+        this.dataSource = dataSource;\n+    }\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwMzQ2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539403460", "bodyText": "Addressing this in PR #1340 once that's merged I'll rebase and this will go away", "author": "Nana-EC", "createdAt": "2020-12-09T15:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NjEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NzExMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537877110", "bodyText": "extra n should be removed", "author": "steven-sheehy", "createdAt": "2020-12-07T22:21:21Z", "path": "hedera-mirror-importer/src/main/resources/application.yml", "diffHunk": "@@ -70,15 +70,18 @@ spring:\n         reWriteBatchedInserts: true\n       maximumPoolSize: 14 # recommended connections = ((core_count * 2) + effective_spindle_count), though somewhat outdated as we use SSDs\n   flyway:\n-    connectRetries: 20\n+    # set baselineVersion as large v1 version and target as high v2 version to run v2 migrations only\n     baselineOnMigrate: true\n     baselineVersion: 0\n+    connectRetries: 20\n     ignoreMissingMigrations: true\n+    locations: \"classpath:db/migration/v1\"\n     placeholders:\n-      api-password: ${hedera.mirror.importer.db.restPassword}\n+      api-password: ${hedera.mirror.importer.db.restPassword}n", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNzA0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539407045", "bodyText": "Removed", "author": "Nana-EC", "createdAt": "2020-12-09T15:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NzExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3ODI1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537878254", "bodyText": "Now that we have to run this migration again, should we consider moving this logic into AddressBookService and running every startup if address_book is empty? Or even better, can run lazy on first call to getCurrent().", "author": "steven-sheehy", "createdAt": "2020-12-07T22:23:02Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V2_0_3__Address_Book.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class V2_0_3__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final MirrorProperties mirrorProperties;\n+    private final DataSource dataSource;\n+    private static final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > ? and entity_id \" +\n+            \"in (101, 102) order by consensus_timestamp asc limit ?\";\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public V2_0_3__Address_Book(MirrorProperties mirrorProperties, @Lazy AddressBookService addressBookService,\n+                                DataSource dataSource) {\n+        this.addressBookService = addressBookService;\n+        this.mirrorProperties = mirrorProperties;\n+        this.dataSource = dataSource;\n+    }\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+        if (Utility.skipMigrationVersion(getVersion(), context.getConfiguration())) {\n+            return;\n+        }\n+\n+        jdbcTemplate = new JdbcTemplate(dataSource);\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        AtomicLong currentConsensusTimestamp = new AtomicLong(0);\n+        AtomicLong fileDataEntries = new AtomicLong(0);\n+        byte[] addressBookBytes;\n+\n+        // if address book table is not empty skip migration\n+        try {\n+            // addressBookService throws when No valid address book found in DB\n+            addressBookService.getCurrent();", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5ODY4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538598685", "bodyText": "Yep, agreed with lazy approach", "author": "Nana-EC", "createdAt": "2020-12-08T16:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3ODI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNTAzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539405032", "bodyText": "Addressing this in PR #1340 where most of this logic is moved to the service to ensure the mirror can populate the table if need be on AddressBookServiceImpl.getCurrent() or AddressBookServiceImpl.update() when table is empty", "author": "Nana-EC", "createdAt": "2020-12-09T15:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3ODI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3OTMxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537879315", "bodyText": "Undo indentation as it breaks the config for pubsub and redis", "author": "steven-sheehy", "createdAt": "2020-12-07T22:24:58Z", "path": "hedera-mirror-importer/src/test/resources/config/bootstrap.yml", "diffHunk": "@@ -1,11 +1,11 @@\n embedded:\n   postgresql:\n-    enabled: true\n-    docker-image: postgres:9.6-alpine\n-  google:\n-    pubsub:\n-      # Adding embedded containers' dependencies enables them by default. However, only few tests needs pubsub emulator,\n-      # so it is enabled only for those tests.\n-      enabled: false\n-  redis:\n-    docker-image: redis:5.0.9-alpine\n+    # set to timescale/timescaledb:latest-pg11 for v2 db schema. Eventually we'll want to use latest-pg12\n+    docker-image: postgres:9.6-alpine #  postgres:12-alpine is current default\n+google:", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNzMxMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539407310", "bodyText": "Fixed accidental indentation  issue", "author": "Nana-EC", "createdAt": "2020-12-09T15:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3OTMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDI2Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537880262", "bodyText": "Why are we grouping by so many fields here and below? This can't be good performance or functionally correct.", "author": "steven-sheehy", "createdAt": "2020-12-07T22:26:32Z", "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -154,7 +154,7 @@ const getTransactionsOuterQuery = function (innerQuery, order) {\n        LEFT OUTER JOIN token_transfer ttl\n          ON t.type = ${constants.transactionTypes.CRYPTOTRANSFER}\n          AND tlist.consensus_timestamp = ttl.consensus_timestamp\n-     GROUP BY t.consensus_ns, ctl_entity_id, ctl.amount, ttr.result, ttt.name\n+     GROUP BY t.consensus_ns, ctl_entity_id, ctl.amount, ttr.result, ttt.name, t.payer_account_id, t.memo, t.valid_start_ns, t.node_account_id, t.charged_tx_fee, t.valid_duration_seconds, t.max_fee, t.transaction_hash", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMjgxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538602814", "bodyText": "In v2 timescaledb doesn't like existing transactions query in getTransactionsOuterQuery() and getOneTransaction().\nThe migrations error out on all the added columns with\nERROR:  column \"t.charged_tx_fee\" must appear in the GROUP BY clause or be used in an aggregate function\n\nI can circle back to see if there are other options. Also once it's setup the performance testing task can verify the impact on the transactions query", "author": "Nana-EC", "createdAt": "2020-12-08T16:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY0MTU5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538641599", "bodyText": "The migrations error out\n\nThe migration shouldn't error out as this is a REST API query not run during migration. You mean that the REST API query errors when invoked by a user, right?", "author": "steven-sheehy", "createdAt": "2020-12-08T17:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczMzIwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538733208", "bodyText": "Yeah sorry, not the migration, actually REST API queries.", "author": "Nana-EC", "createdAt": "2020-12-08T19:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3MjgxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541472811", "bodyText": "Not sure how these are working with Postgres 9.6 but timescale is enforcing the requirement of select column to be in a GROUP BY clause or be used in an aggregate function\nI believe as we're using it having them in the group by doesn't change the results, but I'll have to look into any performance hits", "author": "Nana-EC", "createdAt": "2020-12-12T01:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MzUxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537883519", "bodyText": "I'm not a fan of these domains as they're PostgreSQL specific, they obfuscate the underlying type when looking at a particular table schema, their implementation is not easily discoverable without digging through past migrations and we're not using the features that might make them worthwhile like constraints.\nRecommend removing as long as it's still compatible with importing from the old data.", "author": "steven-sheehy", "createdAt": "2020-12-07T22:32:13Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.0__time_scale_init.sql", "diffHunk": "@@ -0,0 +1,475 @@\n+-------------------\n+-- Init mirror node db, defining table schema\n+-- Supports mirror nodes migrated from v1.0\n+-------------------\n+\n+-- domains\n+create domain hbar_tinybars as bigint;", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwNDgyMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538604823", "bodyText": "Great, tried to maintain the domains from v1 unless it was necessary to change like the case of the timestamps and entity ids.\nIf you're also onboard I'll happily remove them.\nAdditionally, we're not even really using them as domains were intended, most of them don't have any additional constraints to warrant a domain vs the base type", "author": "Nana-EC", "createdAt": "2020-12-08T17:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMzMzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538503335", "bodyText": "Why do we add some constraints in this migration and some in v2.0.0? I would prefer constraints inline in the create table.", "author": "steven-sheehy", "createdAt": "2020-12-08T15:32:26Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.2__time_scale_index_init.sql", "diffHunk": "@@ -0,0 +1,85 @@\n+-------------------\n+-- Add constraints and indexes to tables\n+-------------------\n+\n+-- account_balance\n+alter table account_balance\n+    add constraint account_balance__pk primary key (consensus_timestamp, account_id);", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMDQxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538610414", "bodyText": "Intention was to have all constraints and indexes added in this one file, I must have missed a few with he newer tables.\nIt's cleaner to add the index after hyper table creation so was thinking to add constraints here also.\nI'm okay with moving constrains only along with table creation since it highlights the intended primary key there and then.", "author": "Nana-EC", "createdAt": "2020-12-08T17:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMzMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY0Njg1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538646854", "bodyText": "I think it's clearer with create table but since constraints are also indexes and adding them after data import improves performance as noted in the other comment, we should move all constraints to 2.0.2 migration file.", "author": "steven-sheehy", "createdAt": "2020-12-08T17:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMzMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3NTgyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539875825", "bodyText": "Moved all constraints, indexes and primary key creations to V2.0.2 migration file", "author": "Nana-EC", "createdAt": "2020-12-10T06:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMzMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwODU0MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538508540", "bodyText": "Why do we need to create indexes in a separate file? Does it help with migration? Do we do 2.0.0 and 2.0.1 then stop and migrate data, then do 2.0.2? And doing that way greatly speeds things up?\nOtherwise, I would prefer index creation be done inline in the create table statement for better atomicity and clarity. That way we can reference one file for the schema structure.", "author": "steven-sheehy", "createdAt": "2020-12-08T15:37:00Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.2__time_scale_index_init.sql", "diffHunk": "@@ -0,0 +1,85 @@\n+-------------------\n+-- Add constraints and indexes to tables\n+-------------------\n+\n+-- account_balance\n+alter table account_balance\n+    add constraint account_balance__pk primary key (consensus_timestamp, account_id);\n+create index if not exists account_balance__account_timestamp", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxNTgxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538615815", "bodyText": "Cleaner and yes helps with migration, by immensely speeding it up.\nDb to DB migration would only needs to create the tables as done in 2v.0.0 and then insert data.\nAll the v2.0.0 creations are guarded with if not exists so it would skip that and 2.0.1 and 2.0.2 would run fine.\nThis reduces duplication since everything else can be handled by the flyway migrations.", "author": "Nana-EC", "createdAt": "2020-12-08T17:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwODU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY0NDk4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538644984", "bodyText": "I would disagree with the clearer, but if it helps speeds up migration then we should keep it in separate migrations.", "author": "steven-sheehy", "createdAt": "2020-12-08T17:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwODU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3NjU5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539876593", "bodyText": "Left as is for migration speed purposes", "author": "Nana-EC", "createdAt": "2020-12-10T06:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwODU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNTg2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538515864", "bodyText": "id is just a generated ID. We should probably use consensus_start. We could potentially get rid of id in the future.", "author": "steven-sheehy", "createdAt": "2020-12-08T15:43:22Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- address_book skipped because foreign keys are supported with hyper tables, also we don't expect high traffic inserts\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- live_hash\n+select create_hypertable('live_hash', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- non_fee_transfer\n+select create_hypertable('non_fee_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- record_file\n+select create_hypertable('record_file', 'id', chunk_time_interval => 1000, if_not_exists => true);", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxOTUzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538619531", "bodyText": "Yeah, was thinking a few tables indexed on serials could benefit from a time series column.\nconsensus_start is a good replacement.", "author": "Nana-EC", "createdAt": "2020-12-08T17:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3NjkyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539876920", "bodyText": "Updated to use consensus_start", "author": "Nana-EC", "createdAt": "2020-12-10T06:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNTg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNjYzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538516635", "bodyText": "We should remove explicit chunk_time_interval unless we're setting it different from the default.", "author": "steven-sheehy", "createdAt": "2020-12-08T15:44:03Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyNDAwMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538624002", "bodyText": "Timescaledb needs explicit setting when the data type is an integer\nFor integer types, the chunk_time_interval must be set explicitly, as the database does not otherwise understand the semantics of what each integer value represents (a second, millisecond, nanosecond, etc.)\n\nDefault is 7 days which is the 604800000000000 above.", "author": "Nana-EC", "createdAt": "2020-12-08T17:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNjYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3NzM2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539877369", "bodyText": "Added a config setting and placeholder for this", "author": "Nana-EC", "createdAt": "2020-12-10T06:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNjYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNzY2Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538517667", "bodyText": "Have we done any analysis on what a good chunk interval is for our data set? This seems like a pretty important variable to get right.", "author": "steven-sheehy", "createdAt": "2020-12-08T15:44:59Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMzU4OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538633589", "bodyText": "Not yet, I could add this as a task in the performance testing side.\nIt really comes down to traffic on the tables and how deterministic they are.\nWe could account for high TPS in a week and configure for that but it doesn't say for instance what type of transactions and how say file_data will grow vs token\nThose might require more analysis\nGiven we won't be immediately deploying we should have some time to get it right before we can't modify migrations.\nConsequently I could also make default_chunk_time_interval and default_chunk_id_interval placeholders so the actual sql code doesn't need changing.\nAlso it is possible to update the value however it only affects data going forward and not previous data. See https://docs.timescale.com/latest/api#set_chunk_time_interval", "author": "Nana-EC", "createdAt": "2020-12-08T17:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY1NjExMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538656112", "bodyText": "We have some of that analysis. Can look at the DB graph of mainnet in Kibana to see how different tables grow.", "author": "steven-sheehy", "createdAt": "2020-12-08T17:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNzY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3OTkyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541279928", "bodyText": "Looking, will have to weigh different TPS and envs. I'm leaning towards open a ticket for this in conjunction with local perf testing", "author": "Nana-EC", "createdAt": "2020-12-11T20:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNzY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMjQ0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538522444", "bodyText": "There's no create_distributed_hypertable in here. We said we would start using TimescaleDB 2.0 which has distributed hypertables. Distributed hypertables also can take multiple columns to index on so we can add realm, shard or entity Ids.", "author": "steven-sheehy", "createdAt": "2020-12-08T15:49:21Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- address_book skipped because foreign keys are supported with hyper tables, also we don't expect high traffic inserts\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NTkyOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538675929", "bodyText": "Will look into which tables warrant this but note the current limitations - https://docs.timescale.com/v2.0/using-timescaledb/limitations#distributed-hypertable-limitations. Also, I believe you can only use 1 additional space to distribute across and achieve multi dimensional splits.\nAlthough, splits across shards and realms may not necessarily be what you want.\nTo capitalize on the parallel computation you'd want the distribution to match the grouping of your queries e.g. by entityId or transactionType, or timestamp in the case of balances etc.\nSince we're not operating in multi shards/realms yet can't say how often you'd be pulling across those and whether their optimization is necessary beyond indexing.", "author": "Nana-EC", "createdAt": "2020-12-08T18:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMjQ0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc5MjI4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539792285", "bodyText": "There's a bit of a challenge implementing this outside of k8's where multiple pods each with a single timescale-ha container is started up.\nData nodes are required prior to the  create_distributed_hypertable  command.\nHowever attempting to add data_nodes results in\n ERROR: add_data_node cannot run inside a transaction block\n\nSuch nodes can't be added within a transaction of which each flyway migration is.", "author": "Nana-EC", "createdAt": "2020-12-10T02:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMjQ0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5OTQxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r540699411", "bodyText": "Added #1346 to address this later", "author": "Nana-EC", "createdAt": "2020-12-11T05:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMjQ0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNDkwOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538534909", "bodyText": "We should consider enabling compression by default. It provides 90+% storage improvements and can improve query performance.", "author": "steven-sheehy", "createdAt": "2020-12-08T15:59:59Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NjM3NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538696374", "bodyText": "Can add to this PR. Probably just the larger tables for now i.e. account_balance, crypto_transfer, topic_message, transaction. Potentially token_transfer\nWill require a bit more code as each table will need\n\nAn alter by to turn compression on for the table\nA set of the integer_now_func\nA compression policy\nI'll also create a shared function that each tables step 2 can use", "author": "Nana-EC", "createdAt": "2020-12-08T18:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNDkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3Nzk0Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539877947", "bodyText": "Added above compression logic in a V2.0.3 migration file", "author": "Nana-EC", "createdAt": "2020-12-10T06:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNDkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNzEzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538537132", "bodyText": "Should probably use created_timestamp instead as it's the consensus timestamp.", "author": "steven-sheehy", "createdAt": "2020-12-08T16:01:58Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- address_book skipped because foreign keys are supported with hyper tables, also we don't expect high traffic inserts\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- live_hash\n+select create_hypertable('live_hash', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- non_fee_transfer\n+select create_hypertable('non_fee_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- record_file\n+select create_hypertable('record_file', 'id', chunk_time_interval => 1000, if_not_exists => true);\n+\n+-- t_application_status\n+\n+-- t_entities\n+select create_hypertable('t_entities', 'id', chunk_time_interval => 10000, if_not_exists => true);\n+\n+-- t_entity_types hyper table skipped as table rarely gets updated\n+\n+-- t_transaction_results hyper table skipped as table rarely gets updated\n+\n+-- t_transaction_types hyper table skipped as table rarely gets updated\n+\n+-- token\n+select create_hypertable('token', 'token_id', chunk_time_interval => 10000, if_not_exists => true);\n+\n+-- token_account\n+select create_hypertable('token_account', 'id', chunk_time_interval => 10000,", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NjcyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538696727", "bodyText": "Agreed", "author": "Nana-EC", "createdAt": "2020-12-08T18:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNzEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3ODA3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539878079", "bodyText": "Updated", "author": "Nana-EC", "createdAt": "2020-12-10T06:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzODQzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538538435", "bodyText": "Should probably use created_timestamp instead as it's the consensus timestamp.", "author": "steven-sheehy", "createdAt": "2020-12-08T16:03:10Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- address_book skipped because foreign keys are supported with hyper tables, also we don't expect high traffic inserts\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- live_hash\n+select create_hypertable('live_hash', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- non_fee_transfer\n+select create_hypertable('non_fee_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- record_file\n+select create_hypertable('record_file', 'id', chunk_time_interval => 1000, if_not_exists => true);\n+\n+-- t_application_status\n+\n+-- t_entities\n+select create_hypertable('t_entities', 'id', chunk_time_interval => 10000, if_not_exists => true);\n+\n+-- t_entity_types hyper table skipped as table rarely gets updated\n+\n+-- t_transaction_results hyper table skipped as table rarely gets updated\n+\n+-- t_transaction_types hyper table skipped as table rarely gets updated\n+\n+-- token\n+select create_hypertable('token', 'token_id', chunk_time_interval => 10000, if_not_exists => true);", "originalCommit": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMDA0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538700046", "bodyText": "Agreed. With this only the t_entities table will have a non timestamp chunking column.\nThis is a another reason we should potentially consider a created & modified timestamp columnon the t_entities", "author": "Nana-EC", "createdAt": "2020-12-08T18:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzODQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3ODE1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539878157", "bodyText": "Updated", "author": "Nana-EC", "createdAt": "2020-12-10T06:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzODQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3OTYxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539879615", "bodyText": "Update to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # set to timescale/timescaledb:latest-pg12 for v2 db schema.\n          \n          \n            \n                # set to timescaledev/timescaledb-ha:pg12-ts2.0.0-rc3  (same as chart) for v2 db schema.", "author": "Nana-EC", "createdAt": "2020-12-10T06:16:30Z", "path": "hedera-mirror-grpc/src/test/resources/config/bootstrap.yml", "diffHunk": "@@ -1,6 +1,7 @@\n embedded:\n   postgresql:\n     enabled: true\n-    docker-image: postgres:9.6-alpine\n+    # set to timescale/timescaledb:latest-pg12 for v2 db schema.", "originalCommit": "ecd4cf5929eaa6fa4ae3e3cd813c1e9cd093cf94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg4MDU5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539880592", "bodyText": "Remove as test images have extension installed and same for containers in upcoming chart.", "author": "Nana-EC", "createdAt": "2020-12-10T06:17:43Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- Extend the database with TimescaleDB - assumes super user permissions on database", "originalCommit": "ecd4cf5929eaa6fa4ae3e3cd813c1e9cd093cf94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNTEyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r540535127", "bodyText": "Delete file on merge", "author": "Nana-EC", "createdAt": "2020-12-10T22:12:36Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/migration/V1_28_1__Address_BookTest.java", "diffHunk": "@@ -32,6 +32,7 @@\n import java.util.List;\n import javax.annotation.Resource;\n import javax.sql.DataSource;\n+import org.flywaydb.core.api.configuration.ClassicConfiguration;", "originalCommit": "285ae00394fbba4f2de08f7af4cb1deed6882db3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNTI2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r540535265", "bodyText": "Do all tables", "author": "Nana-EC", "createdAt": "2020-12-10T22:12:47Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,37 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based require a function that returns the now() value (current time) in the units of the time column\n+-- Needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$ select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+alter table token_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+alter table topic_message\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'topic_num');\n+alter table transaction\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_ns desc', timescaledb.compress_segmentby = 'type');\n+\n+-- add compression policy\n+select add_compression_policy('account_balance', bigint '${compressionAge}');", "originalCommit": "285ae00394fbba4f2de08f7af4cb1deed6882db3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d94bf4abc5451063215536f9a1ee84731c5fd64c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d94bf4abc5451063215536f9a1ee84731c5fd64c", "message": "Add v2 migrations flyway migrations for timescaledb\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:05:22Z", "type": "commit"}, {"oid": "871014584e95ee50aa7c8ab32ebc386199548378", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/871014584e95ee50aa7c8ab32ebc386199548378", "message": "Added test support to flip between v1 and v2 dbs\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:05:22Z", "type": "commit"}, {"oid": "5853ecfa5ec50607ab4f69293202bbb906b79cd0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5853ecfa5ec50607ab4f69293202bbb906b79cd0", "message": "Added config documentation and moved topicRunningHashV2AddedTimestamp config into FlywayConfiguration\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:05:22Z", "type": "commit"}, {"oid": "38714578d536f7d9682e7316d58d10396b3ed443", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/38714578d536f7d9682e7316d58d10396b3ed443", "message": "Utilize flyway migrations locations and fix grpc and rest tests to support timescaledb\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:07:33Z", "type": "commit"}, {"oid": "e4cf44e85f0069ae08d009ffa9ebb456830e09da", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e4cf44e85f0069ae08d009ffa9ebb456830e09da", "message": "Add v2 directory of migrations and revert AbstractDownloaderTest change\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:07:33Z", "type": "commit"}, {"oid": "dadb7c064a4d1550acdb871c0fa8c600e39bf749", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dadb7c064a4d1550acdb871c0fa8c600e39bf749", "message": "Updated config docs and removed FlywayProperties and updated locations\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:07:57Z", "type": "commit"}, {"oid": "9381142bea4c4b4c4ac648cd4b8c5225a466d116", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9381142bea4c4b4c4ac648cd4b8c5225a466d116", "message": "Revert config additions for simplicity\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:07:57Z", "type": "commit"}, {"oid": "ac465e9ae2a6f8e0997287d67abd992b77cfa172", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ac465e9ae2a6f8e0997287d67abd992b77cfa172", "message": "Reverted db usernam config removal and updated circle config w flyway props\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:24Z", "type": "commit"}, {"oid": "d96222d56705b2c6fadf151e8f2b05289858973d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d96222d56705b2c6fadf151e8f2b05289858973d", "message": "Update v1 script location for grpc test in circle ci\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:24Z", "type": "commit"}, {"oid": "aa40a59c73fa383e6d8f2b927641bb9b62cf0521", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/aa40a59c73fa383e6d8f2b927641bb9b62cf0521", "message": "Addressed minor feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:24Z", "type": "commit"}, {"oid": "e215d362a3c4aa84c83e66a9b94148226eb84a4c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e215d362a3c4aa84c83e66a9b94148226eb84a4c", "message": "Address feedback on timesacle db init migrations regarding domains, placeholders and distributed hyper tables\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:24Z", "type": "commit"}, {"oid": "aaaf5cbe2c27845aa24f47688548c4b18f269f31", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/aaaf5cbe2c27845aa24f47688548c4b18f269f31", "message": "Fix up constraints and add compression policy\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:24Z", "type": "commit"}, {"oid": "d72c99f050e85111f7076ab67ce435bad2abe541", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d72c99f050e85111f7076ab67ce435bad2abe541", "message": "Fix rest tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:24Z", "type": "commit"}, {"oid": "26607543f4125b0d18fceb2f17629b6d00154fc8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/26607543f4125b0d18fceb2f17629b6d00154fc8", "message": "Added compression for most tables\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:24Z", "type": "commit"}, {"oid": "2225a2f8f96a34d364a594747d24f7d60b7ba439", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2225a2f8f96a34d364a594747d24f7d60b7ba439", "message": "CLeaned up configuration\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:36Z", "type": "commit"}, {"oid": "8b04a1d43bde67f53eab5c3c70f7fdbab901fde1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8b04a1d43bde67f53eab5c3c70f7fdbab901fde1", "message": "Add filesystem path to imported flyway locations\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:36Z", "type": "commit"}, {"oid": "749e0f6b9fd0cc5b1d4fab8d84bb46e2e8076e18", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/749e0f6b9fd0cc5b1d4fab8d84bb46e2e8076e18", "message": "Restore circle ci flyway locations config\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:08:36Z", "type": "commit"}, {"oid": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "message": "Removed V2_0_4__Address_Book and utility function\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:13:52Z", "type": "commit"}, {"oid": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "message": "Removed V2_0_4__Address_Book and utility function\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T05:13:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3ODc4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541278782", "bodyText": "Will remove this and leave it under flyway placeholders", "author": "Nana-EC", "createdAt": "2020-12-11T20:54:12Z", "path": "hedera-mirror-importer/src/main/resources/application.yml", "diffHunk": "@@ -2,6 +2,9 @@ hedera:\n   mirror:\n     importer:\n       db:\n+        chunkIdInterval: 10000", "originalCommit": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4MDUwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541280505", "bodyText": "Looking into this error for compression but the rest is good.", "author": "Nana-EC", "createdAt": "2020-12-11T20:55:53Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');\n+\n+alter table token_account\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+-- The constraint \"token_balance_timestamp_ids\" cannot be enforced with the given compression configuration.", "originalCommit": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3ODU1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541378557", "bodyText": "Had to add token_id since it's also used in the index creation", "author": "Nana-EC", "createdAt": "2020-12-11T22:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4MDUwNQ=="}], "type": "inlineReview"}, {"oid": "a2f03f549e23723a4d4e5cdbf3447c6081cb2be3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a2f03f549e23723a4d4e5cdbf3447c6081cb2be3", "message": "Try moving flyway locations to test bootstrap\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T22:01:40Z", "type": "commit"}, {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/63ef736d83daf3cf9d7bac76dac4af65e4df2997", "message": "Try main bootstrap over test bootstrap\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T22:08:14Z", "type": "commit"}, {"oid": "2c42ef3f56f531fcfed3f2f7f4e397ba3d29bb8e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2c42ef3f56f531fcfed3f2f7f4e397ba3d29bb8e", "message": "Fix compression\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-11T22:43:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MDA1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541350050", "bodyText": "Is there a cost with making them hypertables? What are the pro/cons? Once we go permissionless, I could see address_book/entry having high traffic. I say we make them hypertables unless the cons outweigh the pros for current levels of traffic.", "author": "steven-sheehy", "createdAt": "2020-12-11T22:12:05Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,80 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- address_book skipped because we don't expect high traffic inserts", "originalCommit": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3ODU2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541478564", "bodyText": "Comments are mixed up here. We can't do hyper tables since address_book serves as a foreign key for address_book_entry and timescale db doesn't support that - Hypertables support all standard PostgreSQL constraint types, with the exception of foreign key constraints on other tables that reference values in a hypertable.\nerror: foreign keys to hypertables are not supported\n\nI can however make address_book_entry a hyper table if we do expect more traffic this way.\nIn terms of cons I haven't come across any yet since they've designed the use and management of hyper tables to be as easy as normal tables.", "author": "Nana-EC", "createdAt": "2020-12-12T02:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MDA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3ODgyMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541478821", "bodyText": "Another option is to remove the foreign key from address_book_entry like we did with the other tables.\nThen I can make address_book a hyper table also.\nNotably I did skip the table that don't get updated by importer parsing but rather by us e.g. t_entity_types,  t_transaction_results, t_transaction_types", "author": "Nana-EC", "createdAt": "2020-12-12T02:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MDA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5MzY5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541493697", "bodyText": "Yeah, I would say make both hypertables so we don't run into issues in the future and all non reference tables are hypertables", "author": "steven-sheehy", "createdAt": "2020-12-12T03:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MDA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2NzUxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541367519", "bodyText": "Why would freeze_default be a good pick? You're supposed to pick a segmentby with a secondary column or columns that are used a lot in queries. It says generally that's primary keys or other columns in indexes. Should this be token_id or maybe treasury_account_id? We query more on token_id so that is preferable.", "author": "steven-sheehy", "createdAt": "2020-12-11T22:31:29Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');", "originalCommit": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3Mzk1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541473952", "bodyText": "This was a mistake, agreed it should be token_id.", "author": "Nana-EC", "createdAt": "2020-12-12T01:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2NzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2ODk3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541368975", "bodyText": "deleted is a poor choice. I think fk_entity_type_id would be best.", "author": "steven-sheehy", "createdAt": "2020-12-11T22:33:04Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');", "originalCommit": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3NDA4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541474082", "bodyText": "Indeed, we'd more often query by entity type that whether the entity was deleted or not.\nMeant to circle back on some of these. Will update to fk_entity_type_id", "author": "Nana-EC", "createdAt": "2020-12-12T01:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2ODk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3MjQ1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541372458", "bodyText": "segmentby = entity_id", "author": "steven-sheehy", "createdAt": "2020-12-11T22:37:22Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');", "originalCommit": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NTMwMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541375300", "bodyText": "Should probably be realm num and topic num since we use those in queries", "author": "steven-sheehy", "createdAt": "2020-12-11T22:40:35Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');\n+\n+alter table token_account\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+-- The constraint \"token_balance_timestamp_ids\" cannot be enforced with the given compression configuration.\n+-- alter table token_balance\n+--     set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table token_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table topic_message\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'topic_num');", "originalCommit": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NjAxMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541376012", "bodyText": "This should be payer_account_id as that is the more frequently accessed field.", "author": "steven-sheehy", "createdAt": "2020-12-11T22:41:28Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');\n+\n+alter table token_account\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+-- The constraint \"token_balance_timestamp_ids\" cannot be enforced with the given compression configuration.\n+-- alter table token_balance\n+--     set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table token_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table topic_message\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'topic_num');\n+\n+alter table transaction\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_ns desc', timescaledb.compress_segmentby = 'type');", "originalCommit": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3NDg3Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541474876", "bodyText": "I anticipate type will become more often used. Especially as we recently added that query. I'll use both", "author": "Nana-EC", "createdAt": "2020-12-12T02:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NjAxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3Nzk5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541377997", "bodyText": "It looks like the default timescaledb.compress_orderby is already set to the timestamp column in descending order. Thus, it would be better to leave off the hardcoded value and let it use the default if possible.", "author": "steven-sheehy", "createdAt": "2020-12-11T22:43:55Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');", "originalCommit": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3NjE5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541476190", "bodyText": "True, will remove", "author": "Nana-EC", "createdAt": "2020-12-12T02:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3Nzk5Nw=="}], "type": "inlineReview"}, {"oid": "f92acbaaf880aaf9beb534e3b779c66ac36db057", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f92acbaaf880aaf9beb534e3b779c66ac36db057", "message": "Fix rest specs not honoring unique index on tokens\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-12T00:58:52Z", "type": "commit"}, {"oid": "869d165da5916720174908625036b387c38ae4b9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/869d165da5916720174908625036b387c38ae4b9", "message": "Addressed feedback on compression and missing hyper tables\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-12T02:28:15Z", "type": "commit"}, {"oid": "4575053a5120273de6ff9822759d5ee2a7d81ca6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4575053a5120273de6ff9822759d5ee2a7d81ca6", "message": "Added env config support to run rest integration tests w v2 schema\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-12T02:55:23Z", "type": "commit"}, {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e6fb3361e3268b793dc3aebb1334678a39969f34", "message": "Removed config repetition for flyway migrations\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-14T15:47:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTc1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542491755", "bodyText": "We don't use flyway in production on grpc. Can this be moved to test bootstrap.yml?", "author": "steven-sheehy", "createdAt": "2020-12-14T15:50:13Z", "path": "hedera-mirror-grpc/src/main/resources/bootstrap.yml", "diffHunk": "@@ -2,3 +2,7 @@ spring:\n   cloud:\n     kubernetes:\n       enabled: false\n+  flyway:", "originalCommit": "e6fb3361e3268b793dc3aebb1334678a39969f34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNjAzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542516038", "bodyText": "When setting in the test bootstrap circle ci doesn't seem to pick it up. It's either set here or in circle ci config file", "author": "Nana-EC", "createdAt": "2020-12-14T16:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNTg0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542505841", "bodyText": "Why did this start showing up?", "author": "steven-sheehy", "createdAt": "2020-12-14T16:07:42Z", "path": "hedera-mirror-rest/__tests__/specs/token-balances-01-no-args.spec.json", "diffHunk": "@@ -48,23 +48,28 @@\n     \"tokens\": [\n       {\n         \"token_id\": \"0.20.1\",\n-        \"symbol\": \"TOKEN1\"\n+        \"symbol\": \"TOKEN1\",\n+        \"created_timestamp\": \"1234567890000000001\"", "originalCommit": "e6fb3361e3268b793dc3aebb1334678a39969f34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyOTQ3Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542529476", "bodyText": "Because of the unique index addition.\ncreate unique index if not exists token_id_timestamp\n    on token (token_id, created_timestamp);\nIn v1 the index is the token_id, however in v2 we made it the timestamp but still want the token id index.\nThis could be turned into just an index and not unique but distinct token_id and created_timestamp makes sense", "author": "Nana-EC", "createdAt": "2020-12-14T16:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMDUwMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542530501", "bodyText": "It's good we caught it as it means all the test data timestamps were 0 up until now, which isn't accurate", "author": "Nana-EC", "createdAt": "2020-12-14T16:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MTIxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542541215", "bodyText": "Unique created_timestamp index only makes sense, adding token_id to it is redundant. We should probably have a separate non-unique index just for token_id as we use that in queries more often by itself.", "author": "steven-sheehy", "createdAt": "2020-12-14T16:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3MjM4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542572381", "bodyText": "Sounds good. created_timestamp is the primary key so that should cover that.\nWill adjust this to be just an index on token_id", "author": "Nana-EC", "createdAt": "2020-12-14T17:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNTg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTIyOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542569229", "bodyText": "nit: since every other statement has a comment above, would make sense to add one here too.", "author": "ijungmann", "createdAt": "2020-12-14T17:29:17Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- address_book skipped because timescale doesn't support hyper tables that serve as foreign keys referenced by other tables\n+", "originalCommit": "e6fb3361e3268b793dc3aebb1334678a39969f34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NTEzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542575131", "bodyText": "Yes, just added, will push on next commit", "author": "Nana-EC", "createdAt": "2020-12-14T17:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTkwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542569905", "bodyText": "Was this just a placeholder, or should there be more information here?", "author": "ijungmann", "createdAt": "2020-12-14T17:30:11Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- address_book skipped because timescale doesn't support hyper tables that serve as foreign keys referenced by other tables\n+\n+select create_hypertable('address_book_entry', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- live_hash\n+select create_hypertable('live_hash', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- non_fee_transfer\n+select create_hypertable('non_fee_transfer', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- record_file\n+select create_hypertable('record_file', 'consensus_start',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- t_application_status", "originalCommit": "e6fb3361e3268b793dc3aebb1334678a39969f34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NTU1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542575554", "bodyText": "should have extra info to say it's not going to be a hyper table.\nWill add", "author": "Nana-EC", "createdAt": "2020-12-14T17:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMTEzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542601138", "bodyText": "This still needs the additional info", "author": "ijungmann", "createdAt": "2020-12-14T18:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3MjMyNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542572324", "bodyText": "nit: new line in between to be in line with other skip comments.", "author": "ijungmann", "createdAt": "2020-12-14T17:33:37Z", "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,109 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('address_book_entry', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress);\n+\n+alter table address_book_entry\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'consensus_timestamp,memo');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress);\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped", "originalCommit": "e6fb3361e3268b793dc3aebb1334678a39969f34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU4MTA5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542581093", "bodyText": "Will add.", "author": "Nana-EC", "createdAt": "2020-12-14T17:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3MjMyNA=="}], "type": "inlineReview"}, {"oid": "ab353cf334448880612bdee48def0d509dec21bc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ab353cf334448880612bdee48def0d509dec21bc", "message": "Made address_book a hyper table and added compression\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-14T17:46:45Z", "type": "commit"}, {"oid": "187dfb473f2af5ffee8203d2c3168ba7c7134ff2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/187dfb473f2af5ffee8203d2c3168ba7c7134ff2", "message": "Updated hyper table comments\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-12-14T18:26:23Z", "type": "commit"}]}