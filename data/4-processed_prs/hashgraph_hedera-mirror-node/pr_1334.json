{"pr_number": 1334, "pr_title": "Fix slow transactions query", "pr_createdAt": "2020-12-08T16:06:20Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1334", "timeline": [{"oid": "5afa2d3d92e249ec76a508194dd78503cf54513e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5afa2d3d92e249ec76a508194dd78503cf54513e", "message": "add timestamp conditions to the where condition for the transaction table in transactions inner query\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-12-08T16:01:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3OTA2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1334#discussion_r538579061", "bodyText": "q: why use a string replace on an existing query vs calling utils.parseTimestampQueryParam()?", "author": "Nana-EC", "createdAt": "2020-12-08T16:38:51Z", "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -195,8 +195,9 @@ const getTransactionsInnerQuery = function (\n   transactionTypeQuery,\n   order\n ) {\n-  const whereClause = buildWhereClause(resultTypeQuery, transactionTypeQuery);\n-  const ctlWhereClause = buildWhereClause(accountQuery, tsQuery, creditDebitQuery);\n+  const whereClause = buildWhereClause(tsQuery, resultTypeQuery, transactionTypeQuery);\n+  const ctlTsQuery = tsQuery.replace(/t\\.consensus_ns/g, 'ctl.consensus_timestamp');", "originalCommit": "5afa2d3d92e249ec76a508194dd78503cf54513e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5NTgxMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1334#discussion_r538595813", "bodyText": "neither approach is good\n\nthe one in the PR, as you pointed out\nadd a ctlTsQuery param to the signature of getTransactionsInnerQuery, make it explicit. however, ctlTsQuery and tsQuery are supposed to be the same other than the column names. It's error prone because getTransactionsInnerQuery can be called with different expressions in tsQuery and ctlTsQuery", "author": "xin-hedera", "createdAt": "2020-12-08T16:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3OTA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwOTAyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1334#discussion_r538709025", "bodyText": "I see. I guess we should look into improving this in master code then", "author": "Nana-EC", "createdAt": "2020-12-08T18:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3OTA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzQ3Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1334#discussion_r538587476", "bodyText": "nit: doesn't have to be in this PR but should we have a utils method that takes in an array of params and combines them using the above concat logic.\nThat way this line and the line 218 in accounts and other places could just call that and code doesn't grow longer for each new set of params.", "author": "Nana-EC", "createdAt": "2020-12-08T16:46:22Z", "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -218,11 +219,11 @@ const reqToSql = function (req) {\n   const parsedQueryParams = req.query;\n   const [creditDebitQuery] = utils.parseCreditDebitParams(parsedQueryParams, 'ctl.amount');\n   const [accountQuery, accountParams] = utils.parseAccountIdQueryParam(parsedQueryParams, 'ctl.entity_id');\n-  const [tsQuery, tsParams] = utils.parseTimestampQueryParam(parsedQueryParams, 'ctl.consensus_timestamp');\n+  const [tsQuery, tsParams] = utils.parseTimestampQueryParam(parsedQueryParams, 't.consensus_ns');\n   const resultTypeQuery = utils.parseResultParams(req, 't.result');\n   const transactionTypeQuery = utils.getTransactionTypeQuery(parsedQueryParams);\n   const {query, params, order, limit} = utils.parseLimitAndOrderParams(req);\n-  const sqlParams = accountParams.concat(tsParams).concat(params);\n+  const sqlParams = accountParams.concat(tsParams).concat(tsParams).concat(params);", "originalCommit": "5afa2d3d92e249ec76a508194dd78503cf54513e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}