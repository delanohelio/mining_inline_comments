{"pr_number": 1195, "pr_title": "Rosetta: Record files (blocks) retrieval", "pr_createdAt": "2020-10-26T08:07:04Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195", "timeline": [{"oid": "96f0edae3f38f2dc54bfa4dbea214c4a1666ad1c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/96f0edae3f38f2dc54bfa4dbea214c4a1666ad1c", "message": "Test(hedera-mirror-rosetta): Persistence Layer (#152)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-20T18:06:38Z", "type": "commit"}, {"oid": "dbc5245e6d1d39d31b848f13ed5c48d7e7159113", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dbc5245e6d1d39d31b848f13ed5c48d7e7159113", "message": "Merge 'origin/rosetta'\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-20T18:17:06Z", "type": "commit"}, {"oid": "fbb3e2aa3586d91ef2cf8e29e540aa3da1bafaf6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fbb3e2aa3586d91ef2cf8e29e540aa3da1bafaf6", "message": "test(persistence/transaction): update\n\nstyle: res -> result\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-20T18:26:42Z", "type": "commit"}, {"oid": "be949a70e2a51f6eededb04504ffcc80c87c529f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/be949a70e2a51f6eededb04504ffcc80c87c529f", "message": "Test(hedera-mirror-rosetta): persistence/block (#157)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-26T07:52:25Z", "type": "commit"}, {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c7a68fdac1ef6002740273884902d3cac26f3e63", "message": "Merge 'origin/rosetta'\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-26T08:01:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDY1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512210651", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                                                 WHERE  file_hash = $3)) AS rcd`\n          \n          \n            \n                                                                                 WHERE  file_hash = $1)) AS rcd`", "author": "xin-hedera", "createdAt": "2020-10-26T19:21:29Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -43,26 +44,46 @@ const (\n                                            rcd_index.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n-                                                                    FROM   record_file)) AS rd,\n-                                           (SELECT COUNT(*) - 1 AS block_index\n-                                            FROM   record_file) AS rcd_index`\n+                                            WHERE  file_hash = (SELECT status_value FROM t_application_status\n+                                                                WHERE status_code = 'LAST_PROCESSED_RECORD_HASH')) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $1 AS block_index\n+                                            FROM   record_file\n+                                            WHERE  load_end IS NOT NULL) AS rcd_index`\n \n-\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n-\t//The information about the position is used as Block Index\n+\t// selectByHashWithIndex - Selects the row which is loaded by a given file_hash\n+\t// and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n \tselectByHashWithIndex string = `SELECT rd.file_hash,\n                                            rd.consensus_start,\n                                            rd.consensus_end,\n                                            rd.prev_hash,\n                                            rcd.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  file_hash = ?) AS rd,\n-                                           (SELECT Count(*) - 1 AS block_index\n+                                            WHERE  file_hash = $1 AND load_end IS NOT NULL) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $2 AS block_index\n                                             FROM   record_file\n                                             WHERE  consensus_end <= (SELECT consensus_end\n                                                                      FROM   record_file\n-                                                                     WHERE  file_hash = ?)) AS rcd`\n+                                                                     WHERE  file_hash = $3)) AS rcd`", "originalCommit": "c7a68fdac1ef6002740273884902d3cac26f3e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDk1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512210958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif br.dbClient.Raw(selectByHashWithIndex, hash, *startingIndex, hash).Scan(rf).RecordNotFound() {\n          \n          \n            \n            \tif br.dbClient.Raw(selectByHashWithIndex, hash, *startingIndex).Scan(rf).RecordNotFound() {", "author": "xin-hedera", "createdAt": "2020-10-26T19:22:02Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -141,19 +174,37 @@ func (br *BlockRepository) RetrieveGenesis() (*types.Block, *rTypes.Error) {\n \n // RetrieveLatest retrieves the latest block\n func (br *BlockRepository) RetrieveLatest() (*types.Block, *rTypes.Error) {\n+\tstartingIndex, err := br.getRecordFilesStartingIndex()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n \trf := &recordFile{}\n-\tif br.dbClient.Raw(selectLatestWithIndex).Scan(rf).RecordNotFound() {\n+\tif br.dbClient.Raw(selectLatestWithIndex, *startingIndex).Scan(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\tif rf.FileHash == \"\" {\n \t\treturn nil, errors.Errors[errors.BlockNotFound]\n \t}\n \n \treturn br.constructBlockResponse(rf, rf.BlockIndex), nil\n }\n \n func (br *BlockRepository) findRecordFileByHash(hash string) (*recordFile, *rTypes.Error) {\n+\tstartingIndex, err := br.getRecordFilesStartingIndex()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n \trf := &recordFile{}\n-\tif br.dbClient.Raw(selectByHashWithIndex, hash, hash).Scan(rf).RecordNotFound() {\n+\tif br.dbClient.Raw(selectByHashWithIndex, hash, *startingIndex, hash).Scan(rf).RecordNotFound() {", "originalCommit": "c7a68fdac1ef6002740273884902d3cac26f3e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMDk1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512220957", "bodyText": "nit:\nthe MIN consensus_timestamp of account_balance_file table", "author": "xin-hedera", "createdAt": "2020-10-26T19:39:52Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -43,26 +44,46 @@ const (\n                                            rcd_index.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n-                                                                    FROM   record_file)) AS rd,\n-                                           (SELECT COUNT(*) - 1 AS block_index\n-                                            FROM   record_file) AS rcd_index`\n+                                            WHERE  file_hash = (SELECT status_value FROM t_application_status\n+                                                                WHERE status_code = 'LAST_PROCESSED_RECORD_HASH')) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $1 AS block_index\n+                                            FROM   record_file\n+                                            WHERE  load_end IS NOT NULL) AS rcd_index`\n \n-\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n-\t//The information about the position is used as Block Index\n+\t// selectByHashWithIndex - Selects the row which is loaded by a given file_hash\n+\t// and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n \tselectByHashWithIndex string = `SELECT rd.file_hash,\n                                            rd.consensus_start,\n                                            rd.consensus_end,\n                                            rd.prev_hash,\n                                            rcd.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  file_hash = ?) AS rd,\n-                                           (SELECT Count(*) - 1 AS block_index\n+                                            WHERE  file_hash = $1 AND load_end IS NOT NULL) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $2 AS block_index\n                                             FROM   record_file\n                                             WHERE  consensus_end <= (SELECT consensus_end\n                                                                      FROM   record_file\n-                                                                     WHERE  file_hash = ?)) AS rcd`\n+                                                                     WHERE  file_hash = $3)) AS rcd`\n+\t// selectSkippedRecordFilesCount - Selects the count of rows from the record_file table,\n+\t// where each one's consensus_end is before the MIN consensus_end of address_book table (the first one added).", "originalCommit": "c7a68fdac1ef6002740273884902d3cac26f3e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMjg5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512222891", "bodyText": "get the min consensus_timestamp of account balances from account_balance_file should be more performant:\nselect consensus_timestamp\nfrom account_balance_file\norder by consensus_timestamp asc\nlimit 1;\n\nalso, balance file at consensus timestamp T should reflect balance changes for all transactions <= T, so the where condition should be:\nWHERE consensus_end <= min consensus timestamp from account_balance_file table", "author": "xin-hedera", "createdAt": "2020-10-26T19:42:56Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -43,26 +44,46 @@ const (\n                                            rcd_index.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n-                                                                    FROM   record_file)) AS rd,\n-                                           (SELECT COUNT(*) - 1 AS block_index\n-                                            FROM   record_file) AS rcd_index`\n+                                            WHERE  file_hash = (SELECT status_value FROM t_application_status\n+                                                                WHERE status_code = 'LAST_PROCESSED_RECORD_HASH')) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $1 AS block_index\n+                                            FROM   record_file\n+                                            WHERE  load_end IS NOT NULL) AS rcd_index`\n \n-\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n-\t//The information about the position is used as Block Index\n+\t// selectByHashWithIndex - Selects the row which is loaded by a given file_hash\n+\t// and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n \tselectByHashWithIndex string = `SELECT rd.file_hash,\n                                            rd.consensus_start,\n                                            rd.consensus_end,\n                                            rd.prev_hash,\n                                            rcd.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  file_hash = ?) AS rd,\n-                                           (SELECT Count(*) - 1 AS block_index\n+                                            WHERE  file_hash = $1 AND load_end IS NOT NULL) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $2 AS block_index\n                                             FROM   record_file\n                                             WHERE  consensus_end <= (SELECT consensus_end\n                                                                      FROM   record_file\n-                                                                     WHERE  file_hash = ?)) AS rcd`\n+                                                                     WHERE  file_hash = $3)) AS rcd`\n+\t// selectSkippedRecordFilesCount - Selects the count of rows from the record_file table,\n+\t// where each one's consensus_end is before the MIN consensus_end of address_book table (the first one added).\n+\t// This way, record files before that timestamp are considered non-existent,\n+\t// and the first record_file (block) will be considered equal or bigger\n+\t// than the consensus_timestamp of the first account_balance\n+\tselectSkippedRecordFilesCount string = `SELECT COUNT(*)\n+                                            FROM record_file\n+                                            WHERE consensus_end < (SELECT MIN(consensus_timestamp) FROM account_balance)`", "originalCommit": "c7a68fdac1ef6002740273884902d3cac26f3e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyNzE2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512227169", "bodyText": "the query may take quite some time if the table is big. should change to sth like select the latest consensus_timestamp from account_balance_file table", "author": "xin-hedera", "createdAt": "2020-10-26T19:50:46Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -43,26 +44,46 @@ const (\n                                            rcd_index.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n-                                                                    FROM   record_file)) AS rd,\n-                                           (SELECT COUNT(*) - 1 AS block_index\n-                                            FROM   record_file) AS rcd_index`\n+                                            WHERE  file_hash = (SELECT status_value FROM t_application_status\n+                                                                WHERE status_code = 'LAST_PROCESSED_RECORD_HASH')) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $1 AS block_index\n+                                            FROM   record_file\n+                                            WHERE  load_end IS NOT NULL) AS rcd_index`\n \n-\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n-\t//The information about the position is used as Block Index\n+\t// selectByHashWithIndex - Selects the row which is loaded by a given file_hash\n+\t// and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n \tselectByHashWithIndex string = `SELECT rd.file_hash,\n                                            rd.consensus_start,\n                                            rd.consensus_end,\n                                            rd.prev_hash,\n                                            rcd.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  file_hash = ?) AS rd,\n-                                           (SELECT Count(*) - 1 AS block_index\n+                                            WHERE  file_hash = $1 AND load_end IS NOT NULL) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $2 AS block_index\n                                             FROM   record_file\n                                             WHERE  consensus_end <= (SELECT consensus_end\n                                                                      FROM   record_file\n-                                                                     WHERE  file_hash = ?)) AS rcd`\n+                                                                     WHERE  file_hash = $3)) AS rcd`\n+\t// selectSkippedRecordFilesCount - Selects the count of rows from the record_file table,\n+\t// where each one's consensus_end is before the MIN consensus_end of address_book table (the first one added).\n+\t// This way, record files before that timestamp are considered non-existent,\n+\t// and the first record_file (block) will be considered equal or bigger\n+\t// than the consensus_timestamp of the first account_balance\n+\tselectSkippedRecordFilesCount string = `SELECT COUNT(*)\n+                                            FROM record_file\n+                                            WHERE consensus_end < (SELECT MIN(consensus_timestamp) FROM account_balance)`\n+\n+\t// selectAccountBalancesCount - Selects the count of rows from account_balance table\n+\tselectAccountBalancesCount string = `SELECT COUNT(*) FROM account_balance`", "originalCommit": "c7a68fdac1ef6002740273884902d3cac26f3e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMDc3OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512230778", "bodyText": "this does not seem to work. The sql query returns the count, func Count count the number of rows in the result.", "author": "xin-hedera", "createdAt": "2020-10-26T19:57:24Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -176,3 +227,27 @@ func (br *BlockRepository) constructBlockResponse(rf *recordFile, blockIndex int\n \t\tConsensusEndNanos:   rf.ConsensusEnd,\n \t}\n }\n+\n+func (br *BlockRepository) getRecordFilesStartingIndex() (*int64, *rTypes.Error) {\n+\tif br.recordFileStartingIndex != nil {\n+\t\treturn br.recordFileStartingIndex, nil\n+\t}\n+\n+\tvar accountBalancesCount int64\n+\n+\tbr.dbClient.Raw(selectAccountBalancesCount).Count(&accountBalancesCount)\n+\tif accountBalancesCount == 0 {\n+\t\treturn nil, errors.Errors[errors.NodeIsStarting]\n+\t}\n+\n+\tvar startingIndex int64\n+\tbr.dbClient.Raw(selectSkippedRecordFilesCount).Count(&startingIndex)", "originalCommit": "c7a68fdac1ef6002740273884902d3cac26f3e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MjgxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512442817", "bodyText": "It actually works. Example from docs ->\ndb.Table(\"deleted_users\").Select(\"count(distinct(name))\").Count(&count)\n// SELECT count(distinct(name)) FROM deleted_users\n\nThis gorm version's Scan method supports only slice or struct as destination.", "author": "failfmi", "createdAt": "2020-10-27T06:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMDc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NDIxMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512884213", "bodyText": "thanks for the clarification!", "author": "xin-hedera", "createdAt": "2020-10-27T17:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMDc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMjU5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512232596", "bodyText": "the query is very inefficient as mentioned above", "author": "xin-hedera", "createdAt": "2020-10-26T20:00:42Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -176,3 +227,27 @@ func (br *BlockRepository) constructBlockResponse(rf *recordFile, blockIndex int\n \t\tConsensusEndNanos:   rf.ConsensusEnd,\n \t}\n }\n+\n+func (br *BlockRepository) getRecordFilesStartingIndex() (*int64, *rTypes.Error) {\n+\tif br.recordFileStartingIndex != nil {\n+\t\treturn br.recordFileStartingIndex, nil\n+\t}\n+\n+\tvar accountBalancesCount int64\n+\n+\tbr.dbClient.Raw(selectAccountBalancesCount).Count(&accountBalancesCount)", "originalCommit": "c7a68fdac1ef6002740273884902d3cac26f3e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNzY1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512237651", "bodyText": "better to return a int64 instead of *int64", "author": "xin-hedera", "createdAt": "2020-10-26T20:10:25Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -176,3 +227,27 @@ func (br *BlockRepository) constructBlockResponse(rf *recordFile, blockIndex int\n \t\tConsensusEndNanos:   rf.ConsensusEnd,\n \t}\n }\n+\n+func (br *BlockRepository) getRecordFilesStartingIndex() (*int64, *rTypes.Error) {", "originalCommit": "c7a68fdac1ef6002740273884902d3cac26f3e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9455c7e9b981f68683a7000908a58971d492a8e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b9455c7e9b981f68683a7000908a58971d492a8e", "message": "fix(rosetta-block): optimise queries, return types, placeholders\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-27T07:01:06Z", "type": "commit"}, {"oid": "dd51573ae9ef7b215a273773bd00a369d9a64a7e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dd51573ae9ef7b215a273773bd00a369d9a64a7e", "message": "style: indentation\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-27T07:38:58Z", "type": "commit"}, {"oid": "664656a0495a7647e78a0d0807f0f4bcdc3a1c1b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/664656a0495a7647e78a0d0807f0f4bcdc3a1c1b", "message": "Merge 'origin/rosetta'\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-28T06:32:17Z", "type": "commit"}, {"oid": "fac05be92b1284acfc227df72bff78b51e90c2b3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fac05be92b1284acfc227df72bff78b51e90c2b3", "message": "validation(rosetta): sleep 5s for everything to boot\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-28T07:17:31Z", "type": "commit"}, {"oid": "5e237a49e0b462028b4c384fcdf027af6c8a7a99", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5e237a49e0b462028b4c384fcdf027af6c8a7a99", "message": "test(rosetta): base_service\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-28T11:57:06Z", "type": "commit"}, {"oid": "81fb4dc5f6138f35fec1108889840f669d8ffac6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/81fb4dc5f6138f35fec1108889840f669d8ffac6", "message": "test(rosetta-persistence): add missing query mock to tests\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-28T12:21:15Z", "type": "commit"}]}