{"pr_number": 1181, "pr_title": "Fix stale accounts REST API", "pr_createdAt": "2020-10-24T02:03:09Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181", "timeline": [{"oid": "db89a299bc46e013c95aab9367f5960a7a5cb3a6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/db89a299bc46e013c95aab9367f5960a7a5cb3a6", "message": "Fix stale accounts REST API\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-24T02:50:28Z", "type": "commit"}, {"oid": "dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "message": "Fixed uts and mock pool logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-24T02:50:28Z", "type": "commit"}, {"oid": "dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "message": "Fixed uts and mock pool logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-24T02:50:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDYxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512080611", "bodyText": "I think this comment might be out of date.", "author": "ijungmann", "createdAt": "2020-10-26T16:07:01Z", "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -191,15 +180,9 @@ const getOneAccount = async (req, res) => {\n \n   // Because of the outer join on the 'account_balance ab' and 't_entities e' below, we\n   // need to look  for the given account.id in both account_balance and t_entities table and combine with an 'or'", "originalCommit": "dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1MDczNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512350735", "bodyText": "With revert comment is not still applicable", "author": "Nana-EC", "createdAt": "2020-10-27T00:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MzcxOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512093718", "bodyText": "Would there ever be a scenario where we have an account balance without the entity?  Just want to make sure getting rid of the full outer join doesn't cause side effects.", "author": "ijungmann", "createdAt": "2020-10-26T16:25:13Z", "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -80,12 +82,11 @@ const getAccountQuery = (extraWhereCondition, orderClause, order, query) => {\n            ab.consensus_timestamp = tb.consensus_timestamp\n            and ab.account_id = tb.account_id\n        ) as token_balances\n-    from account_balance ab\n-    full outer join t_entities e on (\n-      ab.account_id = e.id\n-      and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE}\n-    )\n-    where ab.consensus_timestamp = (select max(consensus_timestamp) from account_balance) ${extraWhereCondition || ''}\n+    from (select id, fk_entity_type_id, exp_time_ns, auto_renew_period, key, deleted, ed25519_public_key_hex from t_entities where fk_entity_type_id < ${\n+      utils.ENTITY_TYPE_FILE\n+    }) as e\n+    left outer join account_balance ab on ab.account_id = e.id", "originalCommit": "dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4ODQ4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512188482", "bodyText": "No. All account balances are for existing accounts created on the network.\nThe worst case scenario is the balance file gets serialized right after account creation, but even then at the most it would be 2 seconds later that the record file with the account creation transaction would be serialized.", "author": "Nana-EC", "createdAt": "2020-10-26T18:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MzcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MDUwMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512190500", "bodyText": "Xin reminded me of partial data.\neven in accounts where mirror node was started after the parser has logic to create that entity for any applicable transaction that comes across.\nSo I take it back it could happen it could happen and that might have been the reasoning for the dual id logic between entity and account_balance", "author": "Nana-EC", "createdAt": "2020-10-26T18:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MzcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0OTczMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512349732", "bodyText": "Fixed this by doing an early inner join to get balances from max timestamp. This gives last balance for all accounts know by network.\nThen kept the outer join which will add any mismatches from records.\nThis now picks up all accounts even those without balances", "author": "Nana-EC", "createdAt": "2020-10-27T00:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MzcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NDI0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512084249", "bodyText": "it's easier to read in this way:\nfrom t_entities e\n\nthen move the condition e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE} to the top level where clause\nassume there is no performance difference.", "author": "xin-hedera", "createdAt": "2020-10-26T16:11:59Z", "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -80,12 +82,11 @@ const getAccountQuery = (extraWhereCondition, orderClause, order, query) => {\n            ab.consensus_timestamp = tb.consensus_timestamp\n            and ab.account_id = tb.account_id\n        ) as token_balances\n-    from account_balance ab\n-    full outer join t_entities e on (\n-      ab.account_id = e.id\n-      and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE}\n-    )\n-    where ab.consensus_timestamp = (select max(consensus_timestamp) from account_balance) ${extraWhereCondition || ''}\n+    from (select id, fk_entity_type_id, exp_time_ns, auto_renew_period, key, deleted, ed25519_public_key_hex from t_entities where fk_entity_type_id < ${\n+      utils.ENTITY_TYPE_FILE\n+    }) as e", "originalCommit": "dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0OTk1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512349957", "bodyText": "Reverted back to original query with modification so this shouldn't apply anymore", "author": "Nana-EC", "createdAt": "2020-10-27T00:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NDI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NTYwNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512085606", "bodyText": "adding or ab.consensus_timestamp is null here may have big performance impact, suggest to analyze it with testnet db.", "author": "xin-hedera", "createdAt": "2020-10-26T16:13:59Z", "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -80,12 +82,11 @@ const getAccountQuery = (extraWhereCondition, orderClause, order, query) => {\n            ab.consensus_timestamp = tb.consensus_timestamp\n            and ab.account_id = tb.account_id\n        ) as token_balances\n-    from account_balance ab\n-    full outer join t_entities e on (\n-      ab.account_id = e.id\n-      and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE}\n-    )\n-    where ab.consensus_timestamp = (select max(consensus_timestamp) from account_balance) ${extraWhereCondition || ''}\n+    from (select id, fk_entity_type_id, exp_time_ns, auto_renew_period, key, deleted, ed25519_public_key_hex from t_entities where fk_entity_type_id < ${\n+      utils.ENTITY_TYPE_FILE\n+    }) as e\n+    left outer join account_balance ab on ab.account_id = e.id\n+    where ${startWhereCondition} (ab.consensus_timestamp = (select max(consensus_timestamp) from account_balance) or ab.consensus_timestamp is null)", "originalCommit": "dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1MDQ1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512350452", "bodyText": "You were right. Had atrocious performance.\nFixed this by doing an early inner join to get balances from max timestamp. This gives last balance for all accounts know by network.\nThen kept the outer join which will add any mismatches from records.\nThis now picks up all accounts even those without balances.\nTested on dev with all testnet data. Change was marginal with an increase of about 30-40ms in query time", "author": "Nana-EC", "createdAt": "2020-10-27T00:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NTYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwMTEzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512101138", "bodyText": "it was a full outer join, which based on my understanding covers the corner case that an account is not in t_entities but has balance record in account_balance table.\nI'm not sure if that's a valid case or if it has happened before though.\nUpdate: assume the mirror node has partial data (e.g., startDate is set), the balance file will contain accounts not in t_entities table.", "author": "xin-hedera", "createdAt": "2020-10-26T16:35:16Z", "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -80,12 +82,11 @@ const getAccountQuery = (extraWhereCondition, orderClause, order, query) => {\n            ab.consensus_timestamp = tb.consensus_timestamp\n            and ab.account_id = tb.account_id\n        ) as token_balances\n-    from account_balance ab\n-    full outer join t_entities e on (\n-      ab.account_id = e.id\n-      and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE}\n-    )\n-    where ab.consensus_timestamp = (select max(consensus_timestamp) from account_balance) ${extraWhereCondition || ''}\n+    from (select id, fk_entity_type_id, exp_time_ns, auto_renew_period, key, deleted, ed25519_public_key_hex from t_entities where fk_entity_type_id < ${\n+      utils.ENTITY_TYPE_FILE\n+    }) as e\n+    left outer join account_balance ab on ab.account_id = e.id", "originalCommit": "dfcd7b3c831ba58fc403e3890d0a7dea6eb08148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MTk5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512191997", "bodyText": "Yes good point.\nThe importer does have logic to create entities it comes across when parsing the record file.\nHowever, yes that would miss account with balances who don't have a transaction come across for a while.\nI might have to revert back to some of the logic here and simple just reorganize.", "author": "Nana-EC", "createdAt": "2020-10-26T18:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwMTEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1MDUzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r512350531", "bodyText": "Fixed, see note above", "author": "Nana-EC", "createdAt": "2020-10-27T00:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwMTEzOA=="}], "type": "inlineReview"}, {"oid": "503425f1413cd80d4a1bbc8ec28bb6dbf877e696", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/503425f1413cd80d4a1bbc8ec28bb6dbf877e696", "message": "Reverted to dual queries but optimized query with early inner join before outer\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-27T00:38:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2ODk0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r513568943", "bodyText": "per the offline discussion, e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE} intends to include only account and contract entities but it won't work because of the full outer join. This results in entities of other types, e.g., topic being included in the query output.\nshould also add entities of other types to integration tests", "author": "xin-hedera", "createdAt": "2020-10-28T16:05:24Z", "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -81,11 +83,12 @@ const getAccountQuery = (extraWhereCondition, orderClause, order, query) => {\n            and ab.account_id = tb.account_id\n        ) as token_balances\n     from account_balance ab\n+    inner join (select max(consensus_timestamp) as time_stamp_max from account_balance) as abm on ab.consensus_timestamp = abm.time_stamp_max\n     full outer join t_entities e on (\n-      ab.account_id = e.id\n-      and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE}\n+        ab.account_id = e.id\n+        and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE}", "originalCommit": "503425f1413cd80d4a1bbc8ec28bb6dbf877e696", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3MDIyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r513670228", "bodyText": "Yes, I'm changing the table that the outer join uses from\nfull outer join t_entities e\n\nto\nfull outer join (select id, exp_time_ns, auto_renew_period, key, deleted, fk_entity_type_id, ed25519_public_key_hex from t_entities where fk_entity_type_id < 3) e\n\nThis will ensure only account and contracts are considered\nWill also update added tests with other entities", "author": "Nana-EC", "createdAt": "2020-10-28T18:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2ODk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4MDMwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r513580305", "bodyText": "should remove and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE} after moving the same condition out of the full outer join into where clause\nline 115 needs the same update", "author": "xin-hedera", "createdAt": "2020-10-28T16:20:00Z", "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -191,13 +192,9 @@ const getOneAccount = async (req, res) => {\n \n   // Because of the outer join on the 'account_balance ab' and 't_entities e' below, we\n   // need to look  for the given account.id in both account_balance and t_entities table and combine with an 'or'\n-  const entitySql = getAccountQuery(` and (\n-      (ab.account_id  =  ?)\n-      or (e.id = ?\n-          and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE}\n-          )\n-       )`);\n-\n+  const entitySql = getAccountQuery(\n+    ` (ab.account_id = ? or (e.id = ? and e.fk_entity_type_id < ${utils.ENTITY_TYPE_FILE}))`", "originalCommit": "503425f1413cd80d4a1bbc8ec28bb6dbf877e696", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3MTM1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1181#discussion_r513671357", "bodyText": "Removed along with above noted change", "author": "Nana-EC", "createdAt": "2020-10-28T18:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4MDMwNQ=="}], "type": "inlineReview"}, {"oid": "bc7b593414752d831e948b18eeb0a6029d479288", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bc7b593414752d831e948b18eeb0a6029d479288", "message": "Modified entities table used by outer join to use only accounts and contracts\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-28T18:27:18Z", "type": "commit"}]}