{"pr_number": 984, "pr_title": "Rosetta API 1.0", "pr_createdAt": "2020-08-24T14:26:01Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/984", "timeline": [{"oid": "e1def11d19417c27471a682fa5e1968a9ec7f8e6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e1def11d19417c27471a682fa5e1968a9ec7f8e6", "message": "feature(hedera-mirror-rosetts): barebone structure", "committedDate": "2020-08-04T10:59:54Z", "type": "commit"}, {"oid": "939221e9e3b5bea1b840c81d85e74f202b5b3ac7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/939221e9e3b5bea1b840c81d85e74f202b5b3ac7", "message": "Merge pull request #51 from LimeChain/feature/hedera-mirror-rosetta/setup-barebone-structure\n\nfeature(hedera-mirror-rosetta): add barebone structure", "committedDate": "2020-08-04T11:34:41Z", "type": "commit"}, {"oid": "bc12a4fcac823c2e6d2915f8ffb45caa136ffdfc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bc12a4fcac823c2e6d2915f8ffb45caa136ffdfc", "message": "feat(hedera-mirror-rosetta): add Dockerfile", "committedDate": "2020-08-04T13:28:31Z", "type": "commit"}, {"oid": "c8532fd3be8b40e2aab118f3adcb8a23639c7bed", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c8532fd3be8b40e2aab118f3adcb8a23639c7bed", "message": "feat(hedera-mirror-rosetta): add docker-compose rosetta service config", "committedDate": "2020-08-04T14:07:43Z", "type": "commit"}, {"oid": "c71939a1b4223c7237239c24611b2b30e3f3f767", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c71939a1b4223c7237239c24611b2b30e3f3f767", "message": "style(hedera-mirror-rosetta): remove empty lines", "committedDate": "2020-08-04T14:14:35Z", "type": "commit"}, {"oid": "04d447b2a682704ae0c3d106db25c0703e03d59a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/04d447b2a682704ae0c3d106db25c0703e03d59a", "message": "Feature(hedera-mirror-rosetta): Docker configuration (#52)\n\n* feat(hedera-mirror-rosetta): add Dockerfile\r\n\r\n* feat(hedera-mirror-rosetta): add docker-compose rosetta service config\r\n\r\n* style(hedera-mirror-rosetta): remove empty lines\r\n\r\n* fix(rosetta-docker-config): switch to ubuntu image compatibility\r\n\r\n* fix(rosetta-docker-config): rename env variable", "committedDate": "2020-08-05T06:57:57Z", "type": "commit"}, {"oid": "55645b582e0167bfb301d5ade41f8686bd877bcf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/55645b582e0167bfb301d5ade41f8686bd877bcf", "message": "add db connection", "committedDate": "2020-08-05T08:38:02Z", "type": "commit"}, {"oid": "b3c3d8462b4769d6ddd259eab378804a45cef1ec", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b3c3d8462b4769d6ddd259eab378804a45cef1ec", "message": "Merge branch 'master' into feature/hedera-mirror-rosetta/db-connection", "committedDate": "2020-08-05T08:39:37Z", "type": "commit"}, {"oid": "b39fb23cf4f6a39435942271d1228ad9e60cb93f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b39fb23cf4f6a39435942271d1228ad9e60cb93f", "message": "fix env variable name", "committedDate": "2020-08-05T08:43:33Z", "type": "commit"}, {"oid": "2bbfa45a7d42c95a4d6b08387af2e61ddbf5a18d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2bbfa45a7d42c95a4d6b08387af2e61ddbf5a18d", "message": "save changes", "committedDate": "2020-08-05T10:04:17Z", "type": "commit"}, {"oid": "b51922c4bc9f96e7921f018ed1b6227a482f9907", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b51922c4bc9f96e7921f018ed1b6227a482f9907", "message": "Project Structure", "committedDate": "2020-08-05T10:51:46Z", "type": "commit"}, {"oid": "da59a8b598260afe00699c9e99211b7c91331dfa", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/da59a8b598260afe00699c9e99211b7c91331dfa", "message": "Feature/hedera mirror rosetta/db connection (#53)\n\n* feat(hedera-mirror-rosetta): add Dockerfile\r\n\r\n* feat(hedera-mirror-rosetta): add docker-compose rosetta service config\r\n\r\n* style(hedera-mirror-rosetta): remove empty lines\r\n\r\n* add db connection\r\n\r\n* fix env variable name\r\n\r\nCo-authored-by: failfmi <oscurocalma@gmail.com>\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-05T12:02:46Z", "type": "commit"}, {"oid": "25bde353daa7ee3db53a874928a1e9ff5393a772", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/25bde353daa7ee3db53a874928a1e9ff5393a772", "message": "add base block / record file repo", "committedDate": "2020-08-05T12:30:46Z", "type": "commit"}, {"oid": "161d62d682212129e1543159132bc2f7eb1f64fe", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/161d62d682212129e1543159132bc2f7eb1f64fe", "message": "Merge branch 'master' into feature/hedera-mirror-rosetta/tx-repo", "committedDate": "2020-08-05T12:33:50Z", "type": "commit"}, {"oid": "bf286309ea7b4d31d96b9648a202125b8b73e705", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bf286309ea7b4d31d96b9648a202125b8b73e705", "message": "rename fn", "committedDate": "2020-08-05T12:56:36Z", "type": "commit"}, {"oid": "3e043b55ecce1c9b2aa6c41a9d3784c7cc4c6f64", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3e043b55ecce1c9b2aa6c41a9d3784c7cc4c6f64", "message": "Merge pull request #55 from LimeChain/feature/hedera-mirror-rosetta/tx-repo\n\nAdd Block Repository functions", "committedDate": "2020-08-05T13:31:21Z", "type": "commit"}, {"oid": "62156f5ef72ca6b3d798be1c73d21756e782f089", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/62156f5ef72ca6b3d798be1c73d21756e782f089", "message": "Feature(hedera-mirror-rosetta): Switch config to .yaml (#54)\n\n* feat(hedera-mirror-rosetta): switch env config to yaml\r\n\r\n* feat(hedera-mirror-rosetta): add application.yml\r\n\r\n* docs(hedera-mirror-rosetta): add API config", "committedDate": "2020-08-05T14:47:52Z", "type": "commit"}, {"oid": "d0205f6e7f84ac3824b830cbcaeae49514a73bdf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d0205f6e7f84ac3824b830cbcaeae49514a73bdf", "message": "remove service file (#57)\n\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-05T16:19:51Z", "type": "commit"}, {"oid": "f53aa9f7c4501cb525ba9de42c799b71e997f6dd", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f53aa9f7c4501cb525ba9de42c799b71e997f6dd", "message": "Feature/get transactions (#58)\n\n* save changes\r\n\r\n* remove service file\r\n\r\n* save changes\r\n\r\n* populate transaction operations\r\n\r\n* revert changes\r\n\r\n* add comment\r\n\r\n* remove comments\r\n\r\n* make repo functions private methods\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-06T11:45:49Z", "type": "commit"}, {"oid": "ba923e9a85837995e6bb7570af9b197d02ce96ed", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ba923e9a85837995e6bb7570af9b197d02ce96ed", "message": "Feature: /network/list (#59)\n\n* feat(hedera-mirror-rosetta): add realm to config\r\n\r\ndocs: add realm\r\n\r\n* feat(hedera-mirror-rosetta): add network service\r\n\r\nPOST /network/list\r\n\r\n* fix(rosetta-network): network toLower", "committedDate": "2020-08-06T11:47:35Z", "type": "commit"}, {"oid": "0ca5d091fded87ef52decc44d33b9a823236a70b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0ca5d091fded87ef52decc44d33b9a823236a70b", "message": "Rosetta API Description (#60)\n\n* Rosetta API Description\r\n\r\n* Fixed Typo its\r\n\r\n* Fixes on typos", "committedDate": "2020-08-06T15:13:14Z", "type": "commit"}, {"oid": "0f9dee3a38875de849459a197ce2e3e2c9c3c8da", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0f9dee3a38875de849459a197ce2e3e2c9c3c8da", "message": "Merge branch 'master' of https://github.com/hashgraph/hedera-mirror-node", "committedDate": "2020-08-07T06:41:03Z", "type": "commit"}, {"oid": "5b34a73c98c5f3273cf3e8a754f5f207a857fa3d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5b34a73c98c5f3273cf3e8a754f5f207a857fa3d", "message": "Feature/construct block response (#61)\n\n* save changes\r\n\r\n* save changes\r\n\r\n* remove service file\r\n\r\n* save changes\r\n\r\n* populate transaction operations\r\n\r\n* revert changes\r\n\r\n* add comment\r\n\r\n* remove comments\r\n\r\n* save changes\r\n\r\n* save changes before merge\r\n\r\n* merge\r\n\r\n* save changes\r\n\r\n* add partial impl of get block\r\n\r\n* remove logs\r\n\r\n* revert changes\r\n\r\n* resolve comments\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-07T08:18:01Z", "type": "commit"}, {"oid": "1f985f2ae802f3957394b7b68702908664f338e6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1f985f2ae802f3957394b7b68702908664f338e6", "message": "Feature/change block index to consensus start (#63)\n\n* save changes\r\n\r\n* save changes\r\n\r\n* remove service file\r\n\r\n* save changes\r\n\r\n* populate transaction operations\r\n\r\n* revert changes\r\n\r\n* add comment\r\n\r\n* remove comments\r\n\r\n* save changes\r\n\r\n* save changes before merge\r\n\r\n* merge\r\n\r\n* save changes\r\n\r\n* add partial impl of get block\r\n\r\n* remove logs\r\n\r\n* revert changes\r\n\r\n* resolve comments\r\n\r\n* change index to consensus_start\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-07T11:43:54Z", "type": "commit"}, {"oid": "25c116391dd04ae9346de1ae1404475a8217331c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/25c116391dd04ae9346de1ae1404475a8217331c", "message": "Feature(hedera-mirror-rosetta): Error handling (#64)\n\n* feat(rosetta): add error handling\r\n\r\n* fix(hedera-mirror-rosetta): use rosetta sdk error everywhere", "committedDate": "2020-08-10T09:05:56Z", "type": "commit"}, {"oid": "16c3a6c1a1b5377751acc1b08c4558c42610079d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/16c3a6c1a1b5377751acc1b08c4558c42610079d", "message": "Full implementation of block API call (#67)\n\n* add full implementation of the return block\r\n\r\n* fix error comment\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-10T15:23:22Z", "type": "commit"}, {"oid": "873e1e0d656f4b783d427f5061364dbd4bbfa5e8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/873e1e0d656f4b783d427f5061364dbd4bbfa5e8", "message": "[WIP] Feature(hedera-mirror-rosetta): '/network/options' & '/network/status' (#66)\n\n* feat(rosetta-network): partial implementation 'n/options' & 'n/status'\r\n\r\n* feat(hedera-mirror-rosetta): add map helper functions", "committedDate": "2020-08-11T08:15:18Z", "type": "commit"}, {"oid": "f10319e863f8b9f703455e58b7708cec52b8c071", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f10319e863f8b9f703455e58b7708cec52b8c071", "message": "Feature/block transaction request (#68)\n\n* add full implementation of the return block\r\n\r\n* fix error comment\r\n\r\n* save changes\r\n\r\n* fix precision calculations\r\n\r\n* search transaction within block\r\n\r\n* merge from master\r\n\r\n* fix error handling\r\n\r\n* use safe add/remove hex for block queries\r\n\r\n* add comment\r\n\r\n* use const for hex util\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-11T09:43:16Z", "type": "commit"}, {"oid": "b9e2f49e3e441575a67d80a820f336f761756714", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b9e2f49e3e441575a67d80a820f336f761756714", "message": "(After #68) Feature/mempool and /mempool/transaction (#69)\n\n* add full implementation of the return block\r\n\r\n* fix error comment\r\n\r\n* save changes\r\n\r\n* fix precision calculations\r\n\r\n* search transaction within block\r\n\r\n* merge from master\r\n\r\n* fix error handling\r\n\r\n* add mempool implementation\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-11T09:47:23Z", "type": "commit"}, {"oid": "c04c65269cac406f598ef598580d0bc62659fc6f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c04c65269cac406f598ef598580d0bc62659fc6f", "message": "Feat(hedera-mirror-rosetta):  ConstructionAPI /payloads, /metadata, /derive and /preprocess (#71)\n\nadd `/construction/payloads`\r\nadd `/construction/metadata`\r\nadd `/construction/derive`\r\nadd `/construction/preprocess`", "committedDate": "2020-08-12T14:07:00Z", "type": "commit"}, {"oid": "b8af50317ad4bc5f58ba9a2f00c3bb7f0ae5aafb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b8af50317ad4bc5f58ba9a2f00c3bb7f0ae5aafb", "message": "Merge branch 'master' into feature/hedera-mirror-rosetta/construction-api", "committedDate": "2020-08-12T15:18:30Z", "type": "commit"}, {"oid": "8a1cb8667be30071e75409978634548d0743c298", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8a1cb8667be30071e75409978634548d0743c298", "message": "Feature/account balance (#73)\n\n* save changes\r\n\r\n* implementation of account/balance\r\n\r\n* merge from master\r\n\r\n* resolve comments\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-13T13:05:16Z", "type": "commit"}, {"oid": "ed289e95506636d54bafbca64888b41276ed6725", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ed289e95506636d54bafbca64888b41276ed6725", "message": "Feature(hedera-mirror-rosetta): Construction API - '/combine', '/hash' and '/submit' (#72)", "committedDate": "2020-08-13T15:33:26Z", "type": "commit"}, {"oid": "fb33bcdc37890279847d1921d1dfda8de15209ca", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fb33bcdc37890279847d1921d1dfda8de15209ca", "message": "Refactor/transaction identifier (#76)\n\n* save changes\r\n\r\n* implementation of account/balance\r\n\r\n* merge from master\r\n\r\n* resolve comments\r\n\r\n* refactor transaction identifier\r\n\r\n* fix comments\r\n\r\n* fix message\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-14T06:35:40Z", "type": "commit"}, {"oid": "21b5a6f5048b9100225915b78c696b6cdae68cb3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/21b5a6f5048b9100225915b78c696b6cdae68cb3", "message": "Fix(hedera-mirror-rosetta): Construction API '/payloads' -> return tx body as payload to be signed (#77)", "committedDate": "2020-08-14T07:47:59Z", "type": "commit"}, {"oid": "2b5e75778cdce5a19894374db01b47536dbcdef5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2b5e75778cdce5a19894374db01b47536dbcdef5", "message": "Bugs/cli validation 1 (#78)\n\n* save changes\r\n\r\n* implementation of account/balance\r\n\r\n* merge from master\r\n\r\n* resolve comments\r\n\r\n* refactor transaction identifier\r\n\r\n* fix comments\r\n\r\n* save changes\r\n\r\n* fix errors\r\n\r\n* fix message\r\n\r\n* revert renaming\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-14T11:28:56Z", "type": "commit"}, {"oid": "c21263fac7cfad9fed90f6e07c1e222b04f4f190", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c21263fac7cfad9fed90f6e07c1e222b04f4f190", "message": "fix(hedera-mirror-rosetta): transaction set opposite amount\n\nAddSender does behind the scenes the conversion to a negative amount", "committedDate": "2020-08-14T14:03:17Z", "type": "commit"}, {"oid": "d8756c7ba8af7f51236e6ae1c85fec2048412763", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d8756c7ba8af7f51236e6ae1c85fec2048412763", "message": "Refactor the Block Index (#79)\n\n* save changes\r\n\r\n* implementation of account/balance\r\n\r\n* merge from master\r\n\r\n* resolve comments\r\n\r\n* refactor transaction identifier\r\n\r\n* fix comments\r\n\r\n* save changes\r\n\r\n* fix errors\r\n\r\n* fix message\r\n\r\n* revert renaming\r\n\r\n* change the block index\r\n\r\n* add comments\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-17T06:09:59Z", "type": "commit"}, {"oid": "4f42f2e41275fc85763af377bb16739d2ea8c426", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4f42f2e41275fc85763af377bb16739d2ea8c426", "message": "Bugs/cli validation 3 (#82)\n\n* save changes\r\n\r\n* implementation of account/balance\r\n\r\n* merge from master\r\n\r\n* resolve comments\r\n\r\n* refactor transaction identifier\r\n\r\n* fix comments\r\n\r\n* save changes\r\n\r\n* fix errors\r\n\r\n* fix message\r\n\r\n* revert renaming\r\n\r\n* change the block index\r\n\r\n* add comments\r\n\r\n* fix block index and account query\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-17T10:37:08Z", "type": "commit"}, {"oid": "5b7d1e4997a48af6982837b600d209ebd16af810", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5b7d1e4997a48af6982837b600d209ebd16af810", "message": "Merge branch 'hashgraph/hedera-mirror-node/master' into 'limechain/hedera-mirror-node/master'", "committedDate": "2020-08-18T10:35:46Z", "type": "commit"}, {"oid": "f9d3d58b69b907914eb752bf9cd3c1e35086158b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f9d3d58b69b907914eb752bf9cd3c1e35086158b", "message": "Feature(hedera-mirror-rosetta): Return Peers & Update Hash (#84)\n\n* feat(hedera-mirror-rosetta): fetch peers\r\n\r\n* refactor: remove TODO\r\n\r\n* fix(hedera-mirror-rosetta): parse NodeId to Account\r\n\r\n* refactor(hedera-mirror-rosetta): export panic msg to const\r\n\r\n* fix: typo\r\n\r\n* fix(hedera-mirror-rosetta): use sha512 instead of sha3\r\n\r\n* feat(hedera-mirror-rosetta): sha384 tx and return it on '/submit' after exec\r\n\r\n* fix(hedera-mirror-rosetta): fetch latest address book entries + packages\r\n\r\n* refactor: separate consts", "committedDate": "2020-08-19T17:45:04Z", "type": "commit"}, {"oid": "7f1f8a42037091d281bd2258ebd2b9ea19f13ef2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7f1f8a42037091d281bd2258ebd2b9ea19f13ef2", "message": "Infra/add rosetta validation (#85)\n\n* Create rosetta-validation.yml\r\n\r\n* Update rosetta-validation.yml\r\n\r\n* add validation script\r\n\r\n* change cicd file\r\n\r\n* add wait for rosetta node\r\n\r\n* test 1\r\n\r\n* add exit 1 for timeout\r\n\r\n* add cli validation step\r\n\r\n* change relative path\r\n\r\n* test 2\r\n\r\n* test 2\r\n\r\n* test 3\r\n\r\n* test4\r\n\r\n* test5\r\n\r\n* test6\r\n\r\n* test 6\r\n\r\n* test 7\r\n\r\n* remove the types and statuses map.\r\n\r\n* change genesis balances path\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-19T17:48:13Z", "type": "commit"}, {"oid": "c98065c7e09087f69173d13006e8bda661eb1691", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c98065c7e09087f69173d13006e8bda661eb1691", "message": "Infra/docker image - Version 1 (#87)\n\n* Create rosetta-validation.yml\r\n\r\n* Update rosetta-validation.yml\r\n\r\n* add validation script\r\n\r\n* change cicd file\r\n\r\n* add wait for rosetta node\r\n\r\n* test 1\r\n\r\n* add exit 1 for timeout\r\n\r\n* add cli validation step\r\n\r\n* change relative path\r\n\r\n* test 2\r\n\r\n* test 2\r\n\r\n* test 3\r\n\r\n* test4\r\n\r\n* test5\r\n\r\n* test6\r\n\r\n* test 6\r\n\r\n* test 7\r\n\r\n* remove the types and statuses map.\r\n\r\n* change genesis balances path\r\n\r\n* add docker image for the db and rosetta\r\n\r\n* commit sueprvisord change\r\n\r\n* save latest changes\r\n\r\n* add comments\r\n\r\n* fix importer and modify java start commands\r\n\r\n* add better formatting\r\n\r\n* add if for the db host variable\r\n\r\n* Fix typo\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-20T08:35:42Z", "type": "commit"}, {"oid": "b937d3a5e1679a1733204b92e709d65e52c2e3d4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b937d3a5e1679a1733204b92e709d65e52c2e3d4", "message": "Infra/docker image 2 - Add REST API and use Git Clone (#88)\n\n* Create rosetta-validation.yml\r\n\r\n* Update rosetta-validation.yml\r\n\r\n* add validation script\r\n\r\n* change cicd file\r\n\r\n* add wait for rosetta node\r\n\r\n* test 1\r\n\r\n* add exit 1 for timeout\r\n\r\n* add cli validation step\r\n\r\n* change relative path\r\n\r\n* test 2\r\n\r\n* test 2\r\n\r\n* test 3\r\n\r\n* test4\r\n\r\n* test5\r\n\r\n* test6\r\n\r\n* test 6\r\n\r\n* test 7\r\n\r\n* remove the types and statuses map.\r\n\r\n* change genesis balances path\r\n\r\n* add docker image for the db and rosetta\r\n\r\n* commit sueprvisord change\r\n\r\n* save latest changes\r\n\r\n* add comments\r\n\r\n* fix importer and modify java start commands\r\n\r\n* add better formatting\r\n\r\n* add if for the db host variable\r\n\r\n* add rest to the container and remove copies\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-20T10:47:22Z", "type": "commit"}, {"oid": "c77eddd350d2678cd306a94e8b2952828c85f375", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c77eddd350d2678cd306a94e8b2952828c85f375", "message": "Feature(hedera-mirror-rosetta): Rosetta validation config for testnet (#89)\n\n* test: add rosetta validation config for testnet\r\n\r\n* test(hedera-mirror-rosetta): reduce tx concurrency to 8", "committedDate": "2020-08-20T13:17:12Z", "type": "commit"}, {"oid": "abde90cad2d93d15c64a472f6871feebde521da1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/abde90cad2d93d15c64a472f6871feebde521da1", "message": "Infra/docker image 3 - Use persistent volume at /data  (#90)\n\n* Create rosetta-validation.yml\r\n\r\n* Update rosetta-validation.yml\r\n\r\n* add validation script\r\n\r\n* change cicd file\r\n\r\n* add wait for rosetta node\r\n\r\n* test 1\r\n\r\n* add exit 1 for timeout\r\n\r\n* add cli validation step\r\n\r\n* change relative path\r\n\r\n* test 2\r\n\r\n* test 2\r\n\r\n* test 3\r\n\r\n* test4\r\n\r\n* test5\r\n\r\n* test6\r\n\r\n* test 6\r\n\r\n* test 7\r\n\r\n* remove the types and statuses map.\r\n\r\n* change genesis balances path\r\n\r\n* add docker image for the db and rosetta\r\n\r\n* commit sueprvisord change\r\n\r\n* save latest changes\r\n\r\n* add comments\r\n\r\n* fix importer and modify java start commands\r\n\r\n* add better formatting\r\n\r\n* add if for the db host variable\r\n\r\n* add rest to the container and remove copies\r\n\r\n* persist /data volume\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-08-20T13:41:15Z", "type": "commit"}, {"oid": "923b2cd07ec4b54f17d4f6c26778ea2c7b944761", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/923b2cd07ec4b54f17d4f6c26778ea2c7b944761", "message": "ci: run rosetta validation on 'pull_request' (#91)", "committedDate": "2020-08-20T13:43:01Z", "type": "commit"}, {"oid": "5216bc0ce5510b28f35fd3469768231bc88bf294", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5216bc0ce5510b28f35fd3469768231bc88bf294", "message": "Feature(hedera-mirror-rosetta): Construction API - '/parse' (#92)\n\n* feat(hedera-mirror-rosetta): add '/construction/parse' functionality\r\nrefactor blockchain config \r\nbump hedera-sdk-go version", "committedDate": "2020-08-21T12:15:54Z", "type": "commit"}, {"oid": "61620def7f5e7d36d1d01c0b884564f06346ac5d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/61620def7f5e7d36d1d01c0b884564f06346ac5d", "message": "Apply latest origin master commits (#93)\n\n* Fix the issue gRPC notify thread blocked (#965)\r\n\r\nAdd backpressure buffer with ERROR strategy to notifying and shared polling topic listeners. When overflow happens, the controller will send a gRPC error after all buffered messages and disconnect the client.\r\n\r\nSigned-off-by: Xin Li <xin.li@swirlds.com>\r\n\r\n* Performance test HighTPS HCS publish improvements  (#970)\r\n\r\n* Performance updates to high tps module\r\n\r\n- Adds additional stats\r\n- Allow publish of stats interval to be configured\r\n- Does some reorganizing of code\r\n- Sets JMeter and java flags to allow for improved publish performance and prevent memory exhaustion\r\n\r\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>\r\n\r\n* Bump spring-boot-starter-parent from 2.2.7.RELEASE to 2.3.3.RELEASE (#961)\r\n\r\nBumps [spring-boot-starter-parent](https://github.com/spring-projects/spring-boot) from 2.2.7.RELEASE to 2.3.3.RELEASE.\r\n- [Release notes](https://github.com/spring-projects/spring-boot/releases)\r\n- [Commits](https://github.com/spring-projects/spring-boot/compare/v2.2.7.RELEASE...v2.3.3.RELEASE)\r\n\r\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\nCo-authored-by: Xin Li <59580070+xin-hedera@users.noreply.github.com>\r\nCo-authored-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>", "committedDate": "2020-08-24T12:59:09Z", "type": "commit"}, {"oid": "c3984093dc1ad36cca286bd05d7f4f6d20023140", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c3984093dc1ad36cca286bd05d7f4f6d20023140", "message": "feat(hedera-mirror-rosetta): Remove CryptoCreateAccount handle (#94)\n\ndocs: add missing config params\r\ndocs: add inline documentation\r\nrefactor: remove unused variables, functions", "committedDate": "2020-08-24T14:17:30Z", "type": "commit"}, {"oid": "863b3b2d0ab64aa84211898ae0a6d972fd4feab0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/863b3b2d0ab64aa84211898ae0a6d972fd4feab0", "message": "Merge branch 'master' of https://github.com/hashgraph/hedera-mirror-node", "committedDate": "2020-08-24T14:19:59Z", "type": "commit"}, {"oid": "8e88e02119385bd371667a7ecc883b37ee87b9ac", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8e88e02119385bd371667a7ecc883b37ee87b9ac", "message": "fix(hedera-mirror-rosetta): set true to historical balance lookup\n\nrefactor: remove TODO", "committedDate": "2020-08-25T06:16:51Z", "type": "commit"}, {"oid": "e6f540ab954cf46f9342f698aa6d42d4d5a9834e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e6f540ab954cf46f9342f698aa6d42d4d5a9834e", "message": "Ci(hedera-mirror-rosetta): Rosetta Validation: bump http timeout to 20s (#95)", "committedDate": "2020-08-25T07:53:46Z", "type": "commit"}, {"oid": "fa860901827500cb29023219b6a11ab77a87183e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fa860901827500cb29023219b6a11ab77a87183e", "message": "ci(hedera-mirror-rosetta): bump http_timeout to 20s", "committedDate": "2020-08-25T08:22:29Z", "type": "commit"}, {"oid": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b0f7dee84496230d33fd80d0b2f883f4755bf157", "message": "ci(hedera-mirror-rosetta): Rosetta Validation: add second script retry_elapsed_time", "committedDate": "2020-08-25T08:44:33Z", "type": "commit"}, {"oid": "b38f474e06a7f0dd50c06ca1d8fa2e519f1ba482", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b38f474e06a7f0dd50c06ca1d8fa2e519f1ba482", "message": "Fix(hedera-mirror-rosetta): verify signature outside sdk (#96)\n\n* fix(hedera-mirror-rosetta): verify signature outside sdk\r\n\r\n* fix: remove unused error\r\n\r\n* fix: typo", "committedDate": "2020-08-26T06:05:30Z", "type": "commit"}, {"oid": "3eb29d348df306a5f9d56c1d83a3a705983f4954", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3eb29d348df306a5f9d56c1d83a3a705983f4954", "message": "Infrastructure(docker): Use only one volume for persistent data (#99)\n\n* infrastructure(docker): use only one volume for persistent data\r\n* infrastructure(docker): add priorities to programs", "committedDate": "2020-08-26T15:17:37Z", "type": "commit"}, {"oid": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "message": "feat(hedera-mirror-rosetta): run in online/offline mode (#101)\n\nfeat(hedera-mirror-rosetta): add env tags to configuration\r\ndocs(hedera-mirror-rosetta): add env variables & \u2018hedera.mirror.rosetta.online\u2019", "committedDate": "2020-08-27T07:33:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0NTM0MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r477445340", "bodyText": "can use alpine to reduce image size (~90MB vs ~25MB). also change the build image to golang:1.13-alpine", "author": "xin-hedera", "createdAt": "2020-08-26T16:50:39Z", "path": "hedera-mirror-rosetta/Dockerfile", "diffHunk": "@@ -0,0 +1,10 @@\n+FROM golang:1.13 as build\n+WORKDIR /tmp/src/hedera-mirror-rosetta\n+COPY . .\n+RUN go build -o main ./cmd\n+\n+FROM ubuntu:latest", "originalCommit": "3eb29d348df306a5f9d56c1d83a3a705983f4954", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMTk5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r498311997", "bodyText": "You are right @xin-hedera. Unfortunately, Rosetta highly recommends the usage of ubuntu-based images.\nLink to resource: https://www.rosetta-api.org/docs/node_deployment.html#ubuntu-image-compatibility", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-01T14:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0NTM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0NTUzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r477445539", "bodyText": "is it necessary to copy the source code? looks like only config/application.yml is needed", "author": "xin-hedera", "createdAt": "2020-08-26T16:51:01Z", "path": "hedera-mirror-rosetta/Dockerfile", "diffHunk": "@@ -0,0 +1,10 @@\n+FROM golang:1.13 as build\n+WORKDIR /tmp/src/hedera-mirror-rosetta\n+COPY . .\n+RUN go build -o main ./cmd\n+\n+FROM ubuntu:latest\n+WORKDIR $GOPATH/src/hedera-mirror-rosetta\n+COPY --from=build /tmp/src/hedera-mirror-rosetta/main .\n+COPY . .", "originalCommit": "3eb29d348df306a5f9d56c1d83a3a705983f4954", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5Nzc5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478497795", "bodyText": "default mirror_api_pass is different than the value in config/application.yaml", "author": "xin-hedera", "createdAt": "2020-08-27T15:16:43Z", "path": "docs/configuration.md", "diffHunk": "@@ -176,3 +176,32 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.rest.stateproof.streams.network`          | DEMO                    | Which Hedera network to use. Can be either `DEMO`, `MAINNET`, `TESTNET` or `OTHER`             |\n | `hedera.mirror.rest.stateproof.streams.region`           | us-east-1               | The region associated with the bucket                                                          |\n | `hedera.mirror.rest.stateproof.streams.secretKey`        | \"\"                      | The cloud storage secret key                                                                   |\n+\n+\n+## Rosetta API\n+\n+The Rosetta API supports loading configuration from YAML. By default, it loads a file named\n+`application.yml` in each of the search paths (see below).\n+The configuration is loaded in the following order with the latter configuration overwriting (technically recursively\n+merged into) the current configuration:\n+\n+1. `./config/application.yml`\n+2. `./application.yml`\n+3. Environment variables that start with `HEDERA_MIRROR_ROSETTA_` (e.g. `HEDERA_MIRROR_ROSETTA_API_VERSION=1.4.2`)\n+\n+The following table lists the available properties along with their default values.\n+| Name                                                    | Default                 | Description                                                                                    |\n+| ------------------------------------------------------- | ----------------------- | ---------------------------------------------------------------------------------------------- |\n+| `hedera.mirror.rosetta.apiVersion`                      | 1.4.2                     | The version of the Rosetta interface the implementation adheres to                           |\n+| `hedera.mirror.rosetta.db.host`                         | 127.0.0.1               | The IP or hostname used to connect to the database                                             |\n+| `hedera.mirror.rosetta.db.name`                         | mirror_node             | The name of the database                                                                       |\n+| `hedera.mirror.rosetta.db.password`                     | mirror_api_pass         | The database password the processor uses to connect. **Should be changed from default**        |", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5NzgzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478497832", "bodyText": "default mirror_api is different than the value in config/application.yaml", "author": "xin-hedera", "createdAt": "2020-08-27T15:16:45Z", "path": "docs/configuration.md", "diffHunk": "@@ -176,3 +176,32 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.rest.stateproof.streams.network`          | DEMO                    | Which Hedera network to use. Can be either `DEMO`, `MAINNET`, `TESTNET` or `OTHER`             |\n | `hedera.mirror.rest.stateproof.streams.region`           | us-east-1               | The region associated with the bucket                                                          |\n | `hedera.mirror.rest.stateproof.streams.secretKey`        | \"\"                      | The cloud storage secret key                                                                   |\n+\n+\n+## Rosetta API\n+\n+The Rosetta API supports loading configuration from YAML. By default, it loads a file named\n+`application.yml` in each of the search paths (see below).\n+The configuration is loaded in the following order with the latter configuration overwriting (technically recursively\n+merged into) the current configuration:\n+\n+1. `./config/application.yml`\n+2. `./application.yml`\n+3. Environment variables that start with `HEDERA_MIRROR_ROSETTA_` (e.g. `HEDERA_MIRROR_ROSETTA_API_VERSION=1.4.2`)\n+\n+The following table lists the available properties along with their default values.\n+| Name                                                    | Default                 | Description                                                                                    |\n+| ------------------------------------------------------- | ----------------------- | ---------------------------------------------------------------------------------------------- |\n+| `hedera.mirror.rosetta.apiVersion`                      | 1.4.2                     | The version of the Rosetta interface the implementation adheres to                           |\n+| `hedera.mirror.rosetta.db.host`                         | 127.0.0.1               | The IP or hostname used to connect to the database                                             |\n+| `hedera.mirror.rosetta.db.name`                         | mirror_node             | The name of the database                                                                       |\n+| `hedera.mirror.rosetta.db.password`                     | mirror_api_pass         | The database password the processor uses to connect. **Should be changed from default**        |\n+| `hedera.mirror.rosetta.db.port`                         | 5432                    | The port used to connect to the database                                                       |\n+| `hedera.mirror.rosetta.db.username`                     | mirror_api              | The username the processor uses to connect to the database                                     |", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5OTAyNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478499026", "bodyText": "network not in alphabetical order, should be placed before nodeVersion", "author": "xin-hedera", "createdAt": "2020-08-27T15:18:29Z", "path": "docs/configuration.md", "diffHunk": "@@ -176,3 +176,32 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.rest.stateproof.streams.network`          | DEMO                    | Which Hedera network to use. Can be either `DEMO`, `MAINNET`, `TESTNET` or `OTHER`             |\n | `hedera.mirror.rest.stateproof.streams.region`           | us-east-1               | The region associated with the bucket                                                          |\n | `hedera.mirror.rest.stateproof.streams.secretKey`        | \"\"                      | The cloud storage secret key                                                                   |\n+\n+\n+## Rosetta API\n+\n+The Rosetta API supports loading configuration from YAML. By default, it loads a file named\n+`application.yml` in each of the search paths (see below).\n+The configuration is loaded in the following order with the latter configuration overwriting (technically recursively\n+merged into) the current configuration:\n+\n+1. `./config/application.yml`\n+2. `./application.yml`\n+3. Environment variables that start with `HEDERA_MIRROR_ROSETTA_` (e.g. `HEDERA_MIRROR_ROSETTA_API_VERSION=1.4.2`)\n+\n+The following table lists the available properties along with their default values.\n+| Name                                                    | Default                 | Description                                                                                    |\n+| ------------------------------------------------------- | ----------------------- | ---------------------------------------------------------------------------------------------- |\n+| `hedera.mirror.rosetta.apiVersion`                      | 1.4.2                     | The version of the Rosetta interface the implementation adheres to                           |\n+| `hedera.mirror.rosetta.db.host`                         | 127.0.0.1               | The IP or hostname used to connect to the database                                             |\n+| `hedera.mirror.rosetta.db.name`                         | mirror_node             | The name of the database                                                                       |\n+| `hedera.mirror.rosetta.db.password`                     | mirror_api_pass         | The database password the processor uses to connect. **Should be changed from default**        |\n+| `hedera.mirror.rosetta.db.port`                         | 5432                    | The port used to connect to the database                                                       |\n+| `hedera.mirror.rosetta.db.username`                     | mirror_api              | The username the processor uses to connect to the database                                     |\n+| `hedera.mirror.rosetta.nodeVersion`                     | 0                       | The default canonical version of the node runtime                                              |\n+| `hedera.mirror.rosetta.online`                          | true                    | The default online mode of the Rosetta interface                                               |\n+| `hedera.mirror.rosetta.port`                            | 5700                    | The REST API port                                                                              |\n+| `hedera.mirror.rosetta.network`                         | DEMO                    | Which Hedera network to use. Can be either `DEMO`, `MAINNET`, `TESTNET` or `OTHER`             |", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwMTI0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478501243", "bodyText": "persistance -> persistence", "author": "xin-hedera", "createdAt": "2020-08-27T15:21:34Z", "path": "docs/rosetta-server.md", "diffHunk": "@@ -0,0 +1,17 @@\n+# Overview\n+The rosetta server is a REST API complying with the Rosetta API Specification [Rosetta API Specification](https://www.rosetta-api.org/docs/welcome.html). This server enables exchanges (ex. Coinbase) to be able to integrate and work with Hedera Hashgraph. The server is written in Golang and is largely based on [rosetta-sdk-go](https://github.com/coinbase/rosetta-sdk-go).\n+Its main job is to respond to the Rosetta Specified requests, to the extent allowed by Hedera, while fetching information from the mirror node database.\n+\n+## Architecture\n+![Hedera Mirror Node Rosetta API](images/rosetta-server.png)\n+The server is largely based on [rosetta-sdk-go](https://github.com/coinbase/rosetta-sdk-go) provided by Rosetta. It takes care of significant part of the entity model definitions and some of the API work. It assumes the request and response models provided by Rosetta.\n+\n+As General structure the Rosetta API server has 4 main components.\n+### Domain models\n+These are models internal to the system allowing for safe and easy serialization and passing off information. These are ultimately converted to/from Rosetta models or are marshaled from Database records.\n+### Domain Repositories\n+These are repositories used for fetching data from the Mirror node database and Marshaling it into the Domain Models. They are providing an abstraction into the persistance layer and allowing the Services to request the necessary data.", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3NDMzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478574330", "bodyText": "suggested optimization:\nSELECT * FROM account_balance\nWHERE\n  account_realm_num=? AND\n  account_num=? AND\n  consensus_timestamp <= ?\nORDER BY consensus_timestamp DESC\nLIMIT 1;", "author": "xin-hedera", "createdAt": "2020-08-27T17:16:35Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/account/account.go", "diffHunk": "@@ -0,0 +1,72 @@\n+package account\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistance/postgres/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBeforeConsensusEnd string = \"consensus_timestamp = (SELECT MAX(consensus_timestamp) FROM %s WHERE consensus_timestamp <= %d)\"\n+\tbalanceChangeBetween          string = \"select sum(amount::bigint) as value, count(consensus_timestamp) as number_of_transfers from %s where consensus_timestamp > %d and consensus_timestamp <= %d and entity_id = %d\"\n+)\n+\n+type accountBalance struct {\n+\tConsensusTimestamp int64 `gorm:\"type:bigint;primary_key\"`\n+\tBalance            int64 `gorm:\"type:bigint\"`\n+\tAccountRealmNum    int16 `gorm:\"type:smallint;primary_key\"`\n+\tAccountNum         int32 `gorm:\"type:integer;primary_key\"`\n+}\n+\n+type balanceChange struct {\n+\tValue             int64 `gorm:\"type:bigint\"`\n+\tNumberOfTransfers int64 `gorm:\"type:bigint\"`\n+}\n+\n+// TableName - Set table name of the accountBalance to be `account_balance`\n+func (accountBalance) TableName() string {\n+\treturn \"account_balance\"\n+}\n+\n+// AccountRepository struct that has connection to the Database\n+type AccountRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewAccountRepository creates an instance of a TransactionRepository struct. Populates the transaction types and statuses on init\n+func NewAccountRepository(dbClient *gorm.DB) *AccountRepository {\n+\treturn &AccountRepository{\n+\t\tdbClient: dbClient,\n+\t}\n+}\n+\n+// RetrieveBalanceAtBlock returns the balance of the account at a given block (provided by consensusEnd timestamp).\n+// balance = balanceAtLatestBalanceSnapshot + balanceChangeBetweenSnapshotAndBlock\n+func (ar *AccountRepository) RetrieveBalanceAtBlock(addressStr string, consensusEnd int64) (*types.Amount, *rTypes.Error) {\n+\tacc, err := types.AccountFromString(addressStr)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tentityID, err1 := acc.ComputeEncodedID()\n+\tif err1 != nil {\n+\t\treturn nil, errors.Errors[errors.InvalidAccount]\n+\t}\n+\n+\t// gets the most recent balance before block\n+\tab := &accountBalance{}\n+\tif ar.dbClient.Where(&accountBalance{AccountRealmNum: int16(acc.Realm), AccountNum: int32(acc.Number)}).Where(fmt.Sprintf(whereClauseBeforeConsensusEnd, ab.TableName(), consensusEnd)).Find(&ab).RecordNotFound() {", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMjI4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r501522287", "bodyText": "Using the suggested optimisation we:\n\ndecreased planning time with 25%\ndecreased execution time with 25%", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-08T08:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3NDMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyOTQ1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478629455", "bodyText": "this query is very costly. latest block's index (0-based) can be select count(*)-1 from record_file;\nwe should also further optimize the query, it takes about 690ms on testnet db with about 3150,000 rows and original one with rank and subquery costs ~7000ms", "author": "xin-hedera", "createdAt": "2020-08-27T18:56:29Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/block/block.go", "diffHunk": "@@ -0,0 +1,173 @@\n+package block\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestAddRank - Selects row with the latest consensus_start and adds additional info about the position of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t// The information about the position is used as Block Index\n+\tselectLatestAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE consensus_start = (SELECT MAX(consensus_start) FROM %s)`", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NTI0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500275243", "bodyText": "We've updated the query to use count approach and not rank. Though we weren't able to benchmark it on a full testnet db yet.", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T13:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyOTQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzMTI1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478631254", "bodyText": "SELECT count(*)-1\nFROM record_file\nWHERE consensus_end <= (SELECT consensus_end FROM record_file WHERE file_hash = ?)\n\nwe should also further optimize the query.", "author": "xin-hedera", "createdAt": "2020-08-27T18:59:50Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/block/block.go", "diffHunk": "@@ -0,0 +1,173 @@\n+package block\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestAddRank - Selects row with the latest consensus_start and adds additional info about the position of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t// The information about the position is used as Block Index\n+\tselectLatestAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE consensus_start = (SELECT MAX(consensus_start) FROM %s)`\n+\t// selectByHashAddRank - Selects the row with a given file_hash and adds additional info about the poistion of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t//The information about the position is used as Block Index\n+\tselectByHashAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE res.file_hash ='%s'`", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NTQzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500275438", "bodyText": "We've updated the query to use count approach and not rank. Though we weren't able to benchmark it on a full testnet db yet.", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T13:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzMTI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0NzUwNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478647504", "bodyText": "Order(\"consensus_end asc\"), there is index on consensus_end but not consensus_start", "author": "xin-hedera", "createdAt": "2020-08-27T19:31:00Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/block/block.go", "diffHunk": "@@ -0,0 +1,173 @@\n+package block\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestAddRank - Selects row with the latest consensus_start and adds additional info about the position of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t// The information about the position is used as Block Index\n+\tselectLatestAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE consensus_start = (SELECT MAX(consensus_start) FROM %s)`\n+\t// selectByHashAddRank - Selects the row with a given file_hash and adds additional info about the poistion of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t//The information about the position is used as Block Index\n+\tselectByHashAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE res.file_hash ='%s'`\n+)\n+\n+type recordFile struct {\n+\tID             int64  `gorm:\"type:bigint;primary_key\"`\n+\tName           string `gorm:\"size:250\"`\n+\tLoadStart      int64  `gorm:\"type:bigint\"`\n+\tLoadEnd        int64  `gorm:\"type:bigint\"`\n+\tFileHash       string `gorm:\"size:96\"`\n+\tPrevHash       string `gorm:\"size:96\"`\n+\tConsensusStart int64  `gorm:\"type:bigint\"`\n+\tConsensusEnd   int64  `gorm:\"type:bigint\"`\n+\tRank           int64  `gorm:\"type:bigint\"`\n+}\n+\n+// TableName - Set table name to be `record_file`\n+func (recordFile) TableName() string {\n+\treturn \"record_file\"\n+}\n+\n+// BlockRepository struct that has connection to the Database\n+type BlockRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewBlockRepository creates an instance of a BlockRepository struct\n+func NewBlockRepository(dbClient *gorm.DB) *BlockRepository {\n+\treturn &BlockRepository{dbClient: dbClient}\n+}\n+\n+// FindByIndex retrieves a block by given Index\n+func (br *BlockRepository) FindByIndex(index int64) (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Order(\"consensus_start asc\").Offset(index).First(rf).RecordNotFound() {", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0OTk3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478649975", "bodyText": "no need to query db for parent. parent's filehash is rf.PrevHash and parent's index is rf's index - 1", "author": "xin-hedera", "createdAt": "2020-08-27T19:35:46Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/block/block.go", "diffHunk": "@@ -0,0 +1,173 @@\n+package block\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestAddRank - Selects row with the latest consensus_start and adds additional info about the position of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t// The information about the position is used as Block Index\n+\tselectLatestAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE consensus_start = (SELECT MAX(consensus_start) FROM %s)`\n+\t// selectByHashAddRank - Selects the row with a given file_hash and adds additional info about the poistion of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t//The information about the position is used as Block Index\n+\tselectByHashAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE res.file_hash ='%s'`\n+)\n+\n+type recordFile struct {\n+\tID             int64  `gorm:\"type:bigint;primary_key\"`\n+\tName           string `gorm:\"size:250\"`\n+\tLoadStart      int64  `gorm:\"type:bigint\"`\n+\tLoadEnd        int64  `gorm:\"type:bigint\"`\n+\tFileHash       string `gorm:\"size:96\"`\n+\tPrevHash       string `gorm:\"size:96\"`\n+\tConsensusStart int64  `gorm:\"type:bigint\"`\n+\tConsensusEnd   int64  `gorm:\"type:bigint\"`\n+\tRank           int64  `gorm:\"type:bigint\"`\n+}\n+\n+// TableName - Set table name to be `record_file`\n+func (recordFile) TableName() string {\n+\treturn \"record_file\"\n+}\n+\n+// BlockRepository struct that has connection to the Database\n+type BlockRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewBlockRepository creates an instance of a BlockRepository struct\n+func NewBlockRepository(dbClient *gorm.DB) *BlockRepository {\n+\treturn &BlockRepository{dbClient: dbClient}\n+}\n+\n+// FindByIndex retrieves a block by given Index\n+func (br *BlockRepository) FindByIndex(index int64) (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Order(\"consensus_start asc\").Offset(index).First(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\n+\tparentRf, err := br.constructParentRecordFile(rf)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MDUxOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478650518", "bodyText": "same, no need to query db for parent's hash and index", "author": "xin-hedera", "createdAt": "2020-08-27T19:36:51Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/block/block.go", "diffHunk": "@@ -0,0 +1,173 @@\n+package block\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestAddRank - Selects row with the latest consensus_start and adds additional info about the position of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t// The information about the position is used as Block Index\n+\tselectLatestAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE consensus_start = (SELECT MAX(consensus_start) FROM %s)`\n+\t// selectByHashAddRank - Selects the row with a given file_hash and adds additional info about the poistion of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t//The information about the position is used as Block Index\n+\tselectByHashAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE res.file_hash ='%s'`\n+)\n+\n+type recordFile struct {\n+\tID             int64  `gorm:\"type:bigint;primary_key\"`\n+\tName           string `gorm:\"size:250\"`\n+\tLoadStart      int64  `gorm:\"type:bigint\"`\n+\tLoadEnd        int64  `gorm:\"type:bigint\"`\n+\tFileHash       string `gorm:\"size:96\"`\n+\tPrevHash       string `gorm:\"size:96\"`\n+\tConsensusStart int64  `gorm:\"type:bigint\"`\n+\tConsensusEnd   int64  `gorm:\"type:bigint\"`\n+\tRank           int64  `gorm:\"type:bigint\"`\n+}\n+\n+// TableName - Set table name to be `record_file`\n+func (recordFile) TableName() string {\n+\treturn \"record_file\"\n+}\n+\n+// BlockRepository struct that has connection to the Database\n+type BlockRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewBlockRepository creates an instance of a BlockRepository struct\n+func NewBlockRepository(dbClient *gorm.DB) *BlockRepository {\n+\treturn &BlockRepository{dbClient: dbClient}\n+}\n+\n+// FindByIndex retrieves a block by given Index\n+func (br *BlockRepository) FindByIndex(index int64) (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Order(\"consensus_start asc\").Offset(index).First(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &types.Block{\n+\t\tIndex:               index,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// FindByHash retrieves a block by a given Hash\n+func (br *BlockRepository) FindByHash(hash string) (*types.Block, *rTypes.Error) {\n+\trf, err := br.findRecordFileByHash(hash)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tparentRf, err := br.constructParentRecordFile(rf)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MDgxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478650815", "bodyText": "no need to query db for parent", "author": "xin-hedera", "createdAt": "2020-08-27T19:37:26Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/block/block.go", "diffHunk": "@@ -0,0 +1,173 @@\n+package block\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestAddRank - Selects row with the latest consensus_start and adds additional info about the position of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t// The information about the position is used as Block Index\n+\tselectLatestAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE consensus_start = (SELECT MAX(consensus_start) FROM %s)`\n+\t// selectByHashAddRank - Selects the row with a given file_hash and adds additional info about the poistion of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t//The information about the position is used as Block Index\n+\tselectByHashAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE res.file_hash ='%s'`\n+)\n+\n+type recordFile struct {\n+\tID             int64  `gorm:\"type:bigint;primary_key\"`\n+\tName           string `gorm:\"size:250\"`\n+\tLoadStart      int64  `gorm:\"type:bigint\"`\n+\tLoadEnd        int64  `gorm:\"type:bigint\"`\n+\tFileHash       string `gorm:\"size:96\"`\n+\tPrevHash       string `gorm:\"size:96\"`\n+\tConsensusStart int64  `gorm:\"type:bigint\"`\n+\tConsensusEnd   int64  `gorm:\"type:bigint\"`\n+\tRank           int64  `gorm:\"type:bigint\"`\n+}\n+\n+// TableName - Set table name to be `record_file`\n+func (recordFile) TableName() string {\n+\treturn \"record_file\"\n+}\n+\n+// BlockRepository struct that has connection to the Database\n+type BlockRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewBlockRepository creates an instance of a BlockRepository struct\n+func NewBlockRepository(dbClient *gorm.DB) *BlockRepository {\n+\treturn &BlockRepository{dbClient: dbClient}\n+}\n+\n+// FindByIndex retrieves a block by given Index\n+func (br *BlockRepository) FindByIndex(index int64) (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Order(\"consensus_start asc\").Offset(index).First(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &types.Block{\n+\t\tIndex:               index,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// FindByHash retrieves a block by a given Hash\n+func (br *BlockRepository) FindByHash(hash string) (*types.Block, *rTypes.Error) {\n+\trf, err := br.findRecordFileByHash(hash)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn &types.Block{\n+\t\tIndex:               rf.Rank - 1,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// FindByIdentifier retrieves a block by Index && Hash\n+func (br *BlockRepository) FindByIdentifier(index int64, hash string) (*types.Block, *rTypes.Error) {\n+\trf, err := br.findRecordFileByHash(hash)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif rf.Rank-1 != index {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\tparentRf, err := br.constructParentRecordFile(rf)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MzIyMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478653223", "bodyText": "nit: genesis block is the first in record_file order by consensus_end asc, it's faster", "author": "xin-hedera", "createdAt": "2020-08-27T19:42:16Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/block/block.go", "diffHunk": "@@ -0,0 +1,173 @@\n+package block\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestAddRank - Selects row with the latest consensus_start and adds additional info about the position of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t// The information about the position is used as Block Index\n+\tselectLatestAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE consensus_start = (SELECT MAX(consensus_start) FROM %s)`\n+\t// selectByHashAddRank - Selects the row with a given file_hash and adds additional info about the poistion of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t//The information about the position is used as Block Index\n+\tselectByHashAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE res.file_hash ='%s'`\n+)\n+\n+type recordFile struct {\n+\tID             int64  `gorm:\"type:bigint;primary_key\"`\n+\tName           string `gorm:\"size:250\"`\n+\tLoadStart      int64  `gorm:\"type:bigint\"`\n+\tLoadEnd        int64  `gorm:\"type:bigint\"`\n+\tFileHash       string `gorm:\"size:96\"`\n+\tPrevHash       string `gorm:\"size:96\"`\n+\tConsensusStart int64  `gorm:\"type:bigint\"`\n+\tConsensusEnd   int64  `gorm:\"type:bigint\"`\n+\tRank           int64  `gorm:\"type:bigint\"`\n+}\n+\n+// TableName - Set table name to be `record_file`\n+func (recordFile) TableName() string {\n+\treturn \"record_file\"\n+}\n+\n+// BlockRepository struct that has connection to the Database\n+type BlockRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewBlockRepository creates an instance of a BlockRepository struct\n+func NewBlockRepository(dbClient *gorm.DB) *BlockRepository {\n+\treturn &BlockRepository{dbClient: dbClient}\n+}\n+\n+// FindByIndex retrieves a block by given Index\n+func (br *BlockRepository) FindByIndex(index int64) (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Order(\"consensus_start asc\").Offset(index).First(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &types.Block{\n+\t\tIndex:               index,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// FindByHash retrieves a block by a given Hash\n+func (br *BlockRepository) FindByHash(hash string) (*types.Block, *rTypes.Error) {\n+\trf, err := br.findRecordFileByHash(hash)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn &types.Block{\n+\t\tIndex:               rf.Rank - 1,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// FindByIdentifier retrieves a block by Index && Hash\n+func (br *BlockRepository) FindByIdentifier(index int64, hash string) (*types.Block, *rTypes.Error) {\n+\trf, err := br.findRecordFileByHash(hash)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif rf.Rank-1 != index {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn &types.Block{\n+\t\tIndex:               rf.Rank - 1,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// RetrieveGenesis retrieves the genesis block\n+func (br *BlockRepository) RetrieveGenesis() (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Where(&recordFile{PrevHash: genesisPreviousHash}).Find(rf).RecordNotFound() {", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxOTgwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r498819805", "bodyText": "Initially, I wanted to do the query as you suggest, but then I thought that a mirror node can be run to sync record files after timestamp X, so theoretically someone might be running mirror node, not synced from the genesis record file but later point in time. At that point the RetrieveGenesis won't be returning the actual genesis \"block\" (record file) of the network, but rather the first synced \"block\" (record file).\nWe are mitigating this problem by specifying the PrevHash to be 0000..", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-02T13:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MzIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3MjEwMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500272101", "bodyText": "This problem is reproduced in a couple of other queries. We have created an issue in order to address this bug.", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T13:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MzIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NDc3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478654773", "bodyText": "no need to query parent from db just for its index and hash", "author": "xin-hedera", "createdAt": "2020-08-27T19:45:08Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/block/block.go", "diffHunk": "@@ -0,0 +1,173 @@\n+package block\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestAddRank - Selects row with the latest consensus_start and adds additional info about the position of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t// The information about the position is used as Block Index\n+\tselectLatestAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE consensus_start = (SELECT MAX(consensus_start) FROM %s)`\n+\t// selectByHashAddRank - Selects the row with a given file_hash and adds additional info about the poistion of that row (in terms of order by consensus_start) using the \"rank\" and \"OVER\".\n+\t//The information about the position is used as Block Index\n+\tselectByHashAddRank string = `SELECT * FROM (SELECT *, rank() OVER (ORDER BY consensus_start asc) FROM %s) AS res WHERE res.file_hash ='%s'`\n+)\n+\n+type recordFile struct {\n+\tID             int64  `gorm:\"type:bigint;primary_key\"`\n+\tName           string `gorm:\"size:250\"`\n+\tLoadStart      int64  `gorm:\"type:bigint\"`\n+\tLoadEnd        int64  `gorm:\"type:bigint\"`\n+\tFileHash       string `gorm:\"size:96\"`\n+\tPrevHash       string `gorm:\"size:96\"`\n+\tConsensusStart int64  `gorm:\"type:bigint\"`\n+\tConsensusEnd   int64  `gorm:\"type:bigint\"`\n+\tRank           int64  `gorm:\"type:bigint\"`\n+}\n+\n+// TableName - Set table name to be `record_file`\n+func (recordFile) TableName() string {\n+\treturn \"record_file\"\n+}\n+\n+// BlockRepository struct that has connection to the Database\n+type BlockRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewBlockRepository creates an instance of a BlockRepository struct\n+func NewBlockRepository(dbClient *gorm.DB) *BlockRepository {\n+\treturn &BlockRepository{dbClient: dbClient}\n+}\n+\n+// FindByIndex retrieves a block by given Index\n+func (br *BlockRepository) FindByIndex(index int64) (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Order(\"consensus_start asc\").Offset(index).First(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &types.Block{\n+\t\tIndex:               index,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// FindByHash retrieves a block by a given Hash\n+func (br *BlockRepository) FindByHash(hash string) (*types.Block, *rTypes.Error) {\n+\trf, err := br.findRecordFileByHash(hash)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn &types.Block{\n+\t\tIndex:               rf.Rank - 1,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// FindByIdentifier retrieves a block by Index && Hash\n+func (br *BlockRepository) FindByIdentifier(index int64, hash string) (*types.Block, *rTypes.Error) {\n+\trf, err := br.findRecordFileByHash(hash)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif rf.Rank-1 != index {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\tparentRf, err := br.constructParentRecordFile(rf)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn &types.Block{\n+\t\tIndex:               rf.Rank - 1,\n+\t\tHash:                rf.FileHash,\n+\t\tParentIndex:         parentRf.Rank - 1,\n+\t\tParentHash:          parentRf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// RetrieveGenesis retrieves the genesis block\n+func (br *BlockRepository) RetrieveGenesis() (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Where(&recordFile{PrevHash: genesisPreviousHash}).Find(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\n+\treturn &types.Block{\n+\t\tIndex:               0,\n+\t\tHash:                rf.FileHash,\n+\t\tConsensusStartNanos: rf.ConsensusStart,\n+\t\tConsensusEndNanos:   rf.ConsensusEnd,\n+\t}, nil\n+}\n+\n+// RetrieveLatest retrieves the latest block\n+func (br *BlockRepository) RetrieveLatest() (*types.Block, *rTypes.Error) {\n+\trf := &recordFile{}\n+\tif br.dbClient.Raw(fmt.Sprintf(selectLatestAddRank, rf.TableName(), rf.TableName())).Scan(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\n+\tparentRf, err := br.constructParentRecordFile(rf)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MTAyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478671025", "bodyText": "should really panic?", "author": "xin-hedera", "createdAt": "2020-08-27T20:16:38Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/addressbook/entry/entry.go", "diffHunk": "@@ -0,0 +1,88 @@\n+package entry\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\tlatestAddressBookEntries = \"SELECT abe.* FROM %s AS abe JOIN %s AS ab ON ab.start_consensus_timestamp = abe.consensus_timestamp WHERE ab.end_consensus_timestamp IS NULL\"\n+)\n+\n+const (\n+\ttableNameAddressBook      = \"address_book\"\n+\ttableNameAddressBookEntry = \"address_book_entry\"\n+)\n+\n+type addressBookEntry struct {\n+\tId                 int32  `gorm:\"type:integer;primary_key\"`\n+\tConsensusTimestamp int64  `gorm:\"type:bigint\"`\n+\tIp                 string `gorm:\"size:128\"`\n+\tPort               int32  `gorm:\"type:integer\"`\n+\tMemo               string `gorm:\"size:128\"`\n+\tPublicKey          string `gorm:\"size:1024\"`\n+\tNodeId             *int64 `gorm:\"type:bigint\"`\n+\tNodeAccountId      int64  `gorm:\"type:bigint\"`\n+\tNodeCertHash       []byte `gorm:\"type:bytea\"`\n+}\n+\n+func (addressBookEntry) TableName() string {\n+\treturn tableNameAddressBookEntry\n+}\n+\n+// AddressBookEntryRepository struct that has connection to the Database\n+type AddressBookEntryRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// Entries return all found Address Book Entries\n+func (aber *AddressBookEntryRepository) Entries() (*types.AddressBookEntries, *rTypes.Error) {\n+\tdbEntries := aber.retrieveEntries()\n+\n+\tentries := make([]*types.AddressBookEntry, len(dbEntries))\n+\tfor i, e := range dbEntries {\n+\t\tentries[i] = &types.AddressBookEntry{\n+\t\t\tPeerId: e.getPeerId(),\n+\t\t\tMetadata: map[string]interface{}{\n+\t\t\t\t\"ip\":   e.Ip,\n+\t\t\t\t\"port\": e.Port,\n+\t\t\t},\n+\t\t}\n+\t}\n+\n+\treturn &types.AddressBookEntries{\n+\t\tEntries: entries}, nil\n+}\n+\n+func (abe *addressBookEntry) getPeerId() *types.Account {\n+\tif abe.NodeId == nil {\n+\t\tacc, err := types.AccountFromString(abe.Memo)\n+\t\tif err != nil {\n+\t\t\tpanic(fmt.Sprintf(errors.CreateAccountDbIdFailed, abe.Memo))", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMTczNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500101736", "bodyText": "You are right. Changing it to throwing Internal Server Errors", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T08:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MTAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MTExNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478671115", "bodyText": "same as above", "author": "xin-hedera", "createdAt": "2020-08-27T20:16:48Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/addressbook/entry/entry.go", "diffHunk": "@@ -0,0 +1,88 @@\n+package entry\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\tlatestAddressBookEntries = \"SELECT abe.* FROM %s AS abe JOIN %s AS ab ON ab.start_consensus_timestamp = abe.consensus_timestamp WHERE ab.end_consensus_timestamp IS NULL\"\n+)\n+\n+const (\n+\ttableNameAddressBook      = \"address_book\"\n+\ttableNameAddressBookEntry = \"address_book_entry\"\n+)\n+\n+type addressBookEntry struct {\n+\tId                 int32  `gorm:\"type:integer;primary_key\"`\n+\tConsensusTimestamp int64  `gorm:\"type:bigint\"`\n+\tIp                 string `gorm:\"size:128\"`\n+\tPort               int32  `gorm:\"type:integer\"`\n+\tMemo               string `gorm:\"size:128\"`\n+\tPublicKey          string `gorm:\"size:1024\"`\n+\tNodeId             *int64 `gorm:\"type:bigint\"`\n+\tNodeAccountId      int64  `gorm:\"type:bigint\"`\n+\tNodeCertHash       []byte `gorm:\"type:bytea\"`\n+}\n+\n+func (addressBookEntry) TableName() string {\n+\treturn tableNameAddressBookEntry\n+}\n+\n+// AddressBookEntryRepository struct that has connection to the Database\n+type AddressBookEntryRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// Entries return all found Address Book Entries\n+func (aber *AddressBookEntryRepository) Entries() (*types.AddressBookEntries, *rTypes.Error) {\n+\tdbEntries := aber.retrieveEntries()\n+\n+\tentries := make([]*types.AddressBookEntry, len(dbEntries))\n+\tfor i, e := range dbEntries {\n+\t\tentries[i] = &types.AddressBookEntry{\n+\t\t\tPeerId: e.getPeerId(),\n+\t\t\tMetadata: map[string]interface{}{\n+\t\t\t\t\"ip\":   e.Ip,\n+\t\t\t\t\"port\": e.Port,\n+\t\t\t},\n+\t\t}\n+\t}\n+\n+\treturn &types.AddressBookEntries{\n+\t\tEntries: entries}, nil\n+}\n+\n+func (abe *addressBookEntry) getPeerId() *types.Account {\n+\tif abe.NodeId == nil {\n+\t\tacc, err := types.AccountFromString(abe.Memo)\n+\t\tif err != nil {\n+\t\t\tpanic(fmt.Sprintf(errors.CreateAccountDbIdFailed, abe.Memo))\n+\t\t}\n+\t\treturn acc\n+\t}\n+\n+\tdecoded, err := types.NewAccountFromEncodedID(*abe.NodeId)\n+\tif err != nil {\n+\t\tpanic(fmt.Sprintf(errors.CreateAccountDbIdFailed, abe.NodeId))", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMTgxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500101817", "bodyText": "You are right. Changing it to throwing Internal Server Errors", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T08:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3OTkwNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478679906", "bodyText": "node addresses are parsed from two files in network, with file id 101 and 102 respectively. The major difference:\n\n\n\nfile id\nIP & Port\nPublic Key\n\n\n\n\n101\nY\nN\n\n\n102\nN\nY\n\n\n\nwe need to aggregate the info", "author": "xin-hedera", "createdAt": "2020-08-27T20:34:39Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/addressbook/entry/entry.go", "diffHunk": "@@ -0,0 +1,88 @@\n+package entry\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\tlatestAddressBookEntries = \"SELECT abe.* FROM %s AS abe JOIN %s AS ab ON ab.start_consensus_timestamp = abe.consensus_timestamp WHERE ab.end_consensus_timestamp IS NULL\"", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2OTc4Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500769786", "bodyText": "Public Key is not needed anywhere (even in metadata examples, provided by Rosetta).", "author": "failfmi", "createdAt": "2020-10-07T06:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3OTkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MzM5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478683395", "bodyText": "nit: rename to transactionResult for consistency", "author": "xin-hedera", "createdAt": "2020-08-27T20:41:46Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/transaction/transaction.go", "diffHunk": "@@ -0,0 +1,211 @@\n+package transaction\n+\n+import (\n+\t\"encoding/hex\"\n+\t\"fmt\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistance/postgres/types\"\n+\thexUtils \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBetweenConsensus         string = \"consensus_ns >= ? AND consensus_ns <= ?\"\n+\twhereTimestampsInConsensusTimestamp string = \"consensus_timestamp IN (%s)\"\n+)\n+\n+type transaction struct {\n+\tConsensusNS          int64  `gorm:\"type:bigint;primary_key\"`\n+\tType                 int    `gorm:\"type:smallint\"`\n+\tResult               int    `gorm:\"type:smallint\"`\n+\tPayerAccountID       int64  `gorm:\"type:bigint\"`\n+\tValidStartNS         int64  `gorm:\"type:bigint\"`\n+\tValidDurationSeconds int64  `gorm:\"type:bigint\"`\n+\tNodeAccountID        int64  `gorm:\"type:bigint\"`\n+\tEntityID             int64  `gorm:\"type:bigint\"`\n+\tInitialBalance       int64  `gorm:\"type:bigint\"`\n+\tMaxFee               int64  `gorm:\"type:bigint\"`\n+\tChargedTxFee         int64  `gorm:\"type:bigint\"`\n+\tMemo                 []byte `gorm:\"type:bytea\"`\n+\tTransactionHash      []byte `gorm:\"type:bytea\"`\n+\tTransactionBytes     []byte `gorm:\"type:bytea\"`\n+}\n+\n+type transactionType struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tName    string `gorm:\"size:30\"`\n+}\n+\n+type transactionStatus struct {", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5Mjg3NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478692874", "bodyText": "can this query return nothing? if so  t will be with all fields to default value", "author": "xin-hedera", "createdAt": "2020-08-27T21:00:31Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/transaction/transaction.go", "diffHunk": "@@ -0,0 +1,211 @@\n+package transaction\n+\n+import (\n+\t\"encoding/hex\"\n+\t\"fmt\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistance/postgres/types\"\n+\thexUtils \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBetweenConsensus         string = \"consensus_ns >= ? AND consensus_ns <= ?\"\n+\twhereTimestampsInConsensusTimestamp string = \"consensus_timestamp IN (%s)\"\n+)\n+\n+type transaction struct {\n+\tConsensusNS          int64  `gorm:\"type:bigint;primary_key\"`\n+\tType                 int    `gorm:\"type:smallint\"`\n+\tResult               int    `gorm:\"type:smallint\"`\n+\tPayerAccountID       int64  `gorm:\"type:bigint\"`\n+\tValidStartNS         int64  `gorm:\"type:bigint\"`\n+\tValidDurationSeconds int64  `gorm:\"type:bigint\"`\n+\tNodeAccountID        int64  `gorm:\"type:bigint\"`\n+\tEntityID             int64  `gorm:\"type:bigint\"`\n+\tInitialBalance       int64  `gorm:\"type:bigint\"`\n+\tMaxFee               int64  `gorm:\"type:bigint\"`\n+\tChargedTxFee         int64  `gorm:\"type:bigint\"`\n+\tMemo                 []byte `gorm:\"type:bytea\"`\n+\tTransactionHash      []byte `gorm:\"type:bytea\"`\n+\tTransactionBytes     []byte `gorm:\"type:bytea\"`\n+}\n+\n+type transactionType struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tName    string `gorm:\"size:30\"`\n+}\n+\n+type transactionStatus struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tResult  string `gorm:\"size:100\"`\n+}\n+\n+// TableName - Set table name of the Transactions to be `record_file`\n+func (transaction) TableName() string {\n+\treturn \"transaction\"\n+}\n+\n+// TableName - Set table name of the Transaction Types to be `t_transaction_types`\n+func (transactionType) TableName() string {\n+\treturn \"t_transaction_types\"\n+}\n+\n+// TableName - Set table name of the Transaction Statuses to be `t_transaction_results`\n+func (transactionStatus) TableName() string {\n+\treturn \"t_transaction_results\"\n+}\n+\n+func (t *transaction) getHashString() string {\n+\treturn hexUtils.SafeAddHexPrefix(hex.EncodeToString(t.TransactionHash))\n+}\n+\n+// TransactionRepository struct that has connection to the Database\n+type TransactionRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewTransactionRepository creates an instance of a TransactionRepository struct. Populates the transaction types and statuses on init\n+func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n+\treturn &TransactionRepository{dbClient: dbClient}\n+}\n+\n+// Types returns map of all Transaction Types\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Types() map[int]string {\n+\ttypesArray := tr.retrieveTransactionTypes()\n+\ttMap := make(map[int]string)\n+\tfor _, t := range typesArray {\n+\t\ttMap[t.ProtoID] = t.Name\n+\t}\n+\treturn tMap\n+}\n+\n+// Statuses returns map of all Transaction Statuses\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Statuses() map[int]string {\n+\tstatusesArray := tr.retrieveTransactionStatuses()\n+\tsMap := make(map[int]string)\n+\tfor _, s := range statusesArray {\n+\t\tsMap[s.ProtoID] = s.Result\n+\t}\n+\treturn sMap\n+}\n+\n+func (tr *TransactionRepository) TypesAsArray() []string {\n+\treturn maphelper.GetStringValuesFromIntStringMap(tr.Types())\n+}\n+\n+// FindByTimestamp retrieves Transaction by given timestamp\n+func (tr *TransactionRepository) FindByTimestamp(timestamp int64) *types.Transaction {\n+\tt := transaction{}\n+\ttr.dbClient.Find(&t, timestamp)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNDcwMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r499524701", "bodyText": "Actually, the FindByTimestamp is no longer used, so I will remove it altogether.", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-05T11:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5Mjg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MzYzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478693639", "bodyText": "the constraint in fact is start must not after end. the error message and the constraint do not match", "author": "xin-hedera", "createdAt": "2020-08-27T21:02:02Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/transaction/transaction.go", "diffHunk": "@@ -0,0 +1,211 @@\n+package transaction\n+\n+import (\n+\t\"encoding/hex\"\n+\t\"fmt\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistance/postgres/types\"\n+\thexUtils \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBetweenConsensus         string = \"consensus_ns >= ? AND consensus_ns <= ?\"\n+\twhereTimestampsInConsensusTimestamp string = \"consensus_timestamp IN (%s)\"\n+)\n+\n+type transaction struct {\n+\tConsensusNS          int64  `gorm:\"type:bigint;primary_key\"`\n+\tType                 int    `gorm:\"type:smallint\"`\n+\tResult               int    `gorm:\"type:smallint\"`\n+\tPayerAccountID       int64  `gorm:\"type:bigint\"`\n+\tValidStartNS         int64  `gorm:\"type:bigint\"`\n+\tValidDurationSeconds int64  `gorm:\"type:bigint\"`\n+\tNodeAccountID        int64  `gorm:\"type:bigint\"`\n+\tEntityID             int64  `gorm:\"type:bigint\"`\n+\tInitialBalance       int64  `gorm:\"type:bigint\"`\n+\tMaxFee               int64  `gorm:\"type:bigint\"`\n+\tChargedTxFee         int64  `gorm:\"type:bigint\"`\n+\tMemo                 []byte `gorm:\"type:bytea\"`\n+\tTransactionHash      []byte `gorm:\"type:bytea\"`\n+\tTransactionBytes     []byte `gorm:\"type:bytea\"`\n+}\n+\n+type transactionType struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tName    string `gorm:\"size:30\"`\n+}\n+\n+type transactionStatus struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tResult  string `gorm:\"size:100\"`\n+}\n+\n+// TableName - Set table name of the Transactions to be `record_file`\n+func (transaction) TableName() string {\n+\treturn \"transaction\"\n+}\n+\n+// TableName - Set table name of the Transaction Types to be `t_transaction_types`\n+func (transactionType) TableName() string {\n+\treturn \"t_transaction_types\"\n+}\n+\n+// TableName - Set table name of the Transaction Statuses to be `t_transaction_results`\n+func (transactionStatus) TableName() string {\n+\treturn \"t_transaction_results\"\n+}\n+\n+func (t *transaction) getHashString() string {\n+\treturn hexUtils.SafeAddHexPrefix(hex.EncodeToString(t.TransactionHash))\n+}\n+\n+// TransactionRepository struct that has connection to the Database\n+type TransactionRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewTransactionRepository creates an instance of a TransactionRepository struct. Populates the transaction types and statuses on init\n+func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n+\treturn &TransactionRepository{dbClient: dbClient}\n+}\n+\n+// Types returns map of all Transaction Types\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Types() map[int]string {\n+\ttypesArray := tr.retrieveTransactionTypes()\n+\ttMap := make(map[int]string)\n+\tfor _, t := range typesArray {\n+\t\ttMap[t.ProtoID] = t.Name\n+\t}\n+\treturn tMap\n+}\n+\n+// Statuses returns map of all Transaction Statuses\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Statuses() map[int]string {\n+\tstatusesArray := tr.retrieveTransactionStatuses()\n+\tsMap := make(map[int]string)\n+\tfor _, s := range statusesArray {\n+\t\tsMap[s.ProtoID] = s.Result\n+\t}\n+\treturn sMap\n+}\n+\n+func (tr *TransactionRepository) TypesAsArray() []string {\n+\treturn maphelper.GetStringValuesFromIntStringMap(tr.Types())\n+}\n+\n+// FindByTimestamp retrieves Transaction by given timestamp\n+func (tr *TransactionRepository) FindByTimestamp(timestamp int64) *types.Transaction {\n+\tt := transaction{}\n+\ttr.dbClient.Find(&t, timestamp)\n+\treturn tr.constructTransaction([]transaction{t})\n+}\n+\n+// FindBetween retrieves all Transactions between the provided start and end timestamp\n+func (tr *TransactionRepository) FindBetween(start int64, end int64) ([]*types.Transaction, *rTypes.Error) {\n+\tif start > end {\n+\t\treturn nil, errors.Errors[errors.StartMustBeBeforeEnd]", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwMDMxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478700319", "bodyText": "query the transaction by hash from transaction table\ncheck if transaction.consensus_ns is in range [consensusStart, consensusEnd]", "author": "xin-hedera", "createdAt": "2020-08-27T21:15:51Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/transaction/transaction.go", "diffHunk": "@@ -0,0 +1,211 @@\n+package transaction\n+\n+import (\n+\t\"encoding/hex\"\n+\t\"fmt\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistance/postgres/types\"\n+\thexUtils \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBetweenConsensus         string = \"consensus_ns >= ? AND consensus_ns <= ?\"\n+\twhereTimestampsInConsensusTimestamp string = \"consensus_timestamp IN (%s)\"\n+)\n+\n+type transaction struct {\n+\tConsensusNS          int64  `gorm:\"type:bigint;primary_key\"`\n+\tType                 int    `gorm:\"type:smallint\"`\n+\tResult               int    `gorm:\"type:smallint\"`\n+\tPayerAccountID       int64  `gorm:\"type:bigint\"`\n+\tValidStartNS         int64  `gorm:\"type:bigint\"`\n+\tValidDurationSeconds int64  `gorm:\"type:bigint\"`\n+\tNodeAccountID        int64  `gorm:\"type:bigint\"`\n+\tEntityID             int64  `gorm:\"type:bigint\"`\n+\tInitialBalance       int64  `gorm:\"type:bigint\"`\n+\tMaxFee               int64  `gorm:\"type:bigint\"`\n+\tChargedTxFee         int64  `gorm:\"type:bigint\"`\n+\tMemo                 []byte `gorm:\"type:bytea\"`\n+\tTransactionHash      []byte `gorm:\"type:bytea\"`\n+\tTransactionBytes     []byte `gorm:\"type:bytea\"`\n+}\n+\n+type transactionType struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tName    string `gorm:\"size:30\"`\n+}\n+\n+type transactionStatus struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tResult  string `gorm:\"size:100\"`\n+}\n+\n+// TableName - Set table name of the Transactions to be `record_file`\n+func (transaction) TableName() string {\n+\treturn \"transaction\"\n+}\n+\n+// TableName - Set table name of the Transaction Types to be `t_transaction_types`\n+func (transactionType) TableName() string {\n+\treturn \"t_transaction_types\"\n+}\n+\n+// TableName - Set table name of the Transaction Statuses to be `t_transaction_results`\n+func (transactionStatus) TableName() string {\n+\treturn \"t_transaction_results\"\n+}\n+\n+func (t *transaction) getHashString() string {\n+\treturn hexUtils.SafeAddHexPrefix(hex.EncodeToString(t.TransactionHash))\n+}\n+\n+// TransactionRepository struct that has connection to the Database\n+type TransactionRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewTransactionRepository creates an instance of a TransactionRepository struct. Populates the transaction types and statuses on init\n+func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n+\treturn &TransactionRepository{dbClient: dbClient}\n+}\n+\n+// Types returns map of all Transaction Types\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Types() map[int]string {\n+\ttypesArray := tr.retrieveTransactionTypes()\n+\ttMap := make(map[int]string)\n+\tfor _, t := range typesArray {\n+\t\ttMap[t.ProtoID] = t.Name\n+\t}\n+\treturn tMap\n+}\n+\n+// Statuses returns map of all Transaction Statuses\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Statuses() map[int]string {\n+\tstatusesArray := tr.retrieveTransactionStatuses()\n+\tsMap := make(map[int]string)\n+\tfor _, s := range statusesArray {\n+\t\tsMap[s.ProtoID] = s.Result\n+\t}\n+\treturn sMap\n+}\n+\n+func (tr *TransactionRepository) TypesAsArray() []string {\n+\treturn maphelper.GetStringValuesFromIntStringMap(tr.Types())\n+}\n+\n+// FindByTimestamp retrieves Transaction by given timestamp\n+func (tr *TransactionRepository) FindByTimestamp(timestamp int64) *types.Transaction {\n+\tt := transaction{}\n+\ttr.dbClient.Find(&t, timestamp)\n+\treturn tr.constructTransaction([]transaction{t})\n+}\n+\n+// FindBetween retrieves all Transactions between the provided start and end timestamp\n+func (tr *TransactionRepository) FindBetween(start int64, end int64) ([]*types.Transaction, *rTypes.Error) {\n+\tif start > end {\n+\t\treturn nil, errors.Errors[errors.StartMustBeBeforeEnd]\n+\t}\n+\tvar transactions []transaction\n+\ttr.dbClient.Where(whereClauseBetweenConsensus, start, end).Find(&transactions)\n+\n+\tsameHashMap := make(map[string][]transaction)\n+\tfor _, t := range transactions {\n+\t\th := t.getHashString()\n+\t\tsameHashMap[h] = append(sameHashMap[h], t)\n+\t}\n+\tres := make([]*types.Transaction, 0, len(sameHashMap))\n+\tfor _, sameHashTransactions := range sameHashMap {\n+\t\tres = append(res, tr.constructTransaction(sameHashTransactions))\n+\t}\n+\treturn res, nil\n+}\n+\n+// FindByHashInBlock retrieves a transaction by Hash\n+func (tr *TransactionRepository) FindByHashInBlock(hashStr string, consensusStart int64, consensusEnd int64) (*types.Transaction, *rTypes.Error) {\n+\tvar transactions []transaction\n+\ttransactionHash, err := hex.DecodeString(hexUtils.SafeRemoveHexPrefix(hashStr))\n+\tif err != nil {\n+\t\treturn nil, errors.Errors[errors.InvalidTransactionIdentifier]\n+\t}\n+\ttr.dbClient.Where(whereClauseBetweenConsensus, consensusStart, consensusEnd).Where(&transaction{TransactionHash: transactionHash}).Find(&transactions)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNTg3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478705877", "bodyText": "should we panic?", "author": "xin-hedera", "createdAt": "2020-08-27T21:28:08Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/transaction/transaction.go", "diffHunk": "@@ -0,0 +1,211 @@\n+package transaction\n+\n+import (\n+\t\"encoding/hex\"\n+\t\"fmt\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistance/postgres/types\"\n+\thexUtils \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBetweenConsensus         string = \"consensus_ns >= ? AND consensus_ns <= ?\"\n+\twhereTimestampsInConsensusTimestamp string = \"consensus_timestamp IN (%s)\"\n+)\n+\n+type transaction struct {\n+\tConsensusNS          int64  `gorm:\"type:bigint;primary_key\"`\n+\tType                 int    `gorm:\"type:smallint\"`\n+\tResult               int    `gorm:\"type:smallint\"`\n+\tPayerAccountID       int64  `gorm:\"type:bigint\"`\n+\tValidStartNS         int64  `gorm:\"type:bigint\"`\n+\tValidDurationSeconds int64  `gorm:\"type:bigint\"`\n+\tNodeAccountID        int64  `gorm:\"type:bigint\"`\n+\tEntityID             int64  `gorm:\"type:bigint\"`\n+\tInitialBalance       int64  `gorm:\"type:bigint\"`\n+\tMaxFee               int64  `gorm:\"type:bigint\"`\n+\tChargedTxFee         int64  `gorm:\"type:bigint\"`\n+\tMemo                 []byte `gorm:\"type:bytea\"`\n+\tTransactionHash      []byte `gorm:\"type:bytea\"`\n+\tTransactionBytes     []byte `gorm:\"type:bytea\"`\n+}\n+\n+type transactionType struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tName    string `gorm:\"size:30\"`\n+}\n+\n+type transactionStatus struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tResult  string `gorm:\"size:100\"`\n+}\n+\n+// TableName - Set table name of the Transactions to be `record_file`\n+func (transaction) TableName() string {\n+\treturn \"transaction\"\n+}\n+\n+// TableName - Set table name of the Transaction Types to be `t_transaction_types`\n+func (transactionType) TableName() string {\n+\treturn \"t_transaction_types\"\n+}\n+\n+// TableName - Set table name of the Transaction Statuses to be `t_transaction_results`\n+func (transactionStatus) TableName() string {\n+\treturn \"t_transaction_results\"\n+}\n+\n+func (t *transaction) getHashString() string {\n+\treturn hexUtils.SafeAddHexPrefix(hex.EncodeToString(t.TransactionHash))\n+}\n+\n+// TransactionRepository struct that has connection to the Database\n+type TransactionRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewTransactionRepository creates an instance of a TransactionRepository struct. Populates the transaction types and statuses on init\n+func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n+\treturn &TransactionRepository{dbClient: dbClient}\n+}\n+\n+// Types returns map of all Transaction Types\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Types() map[int]string {\n+\ttypesArray := tr.retrieveTransactionTypes()\n+\ttMap := make(map[int]string)\n+\tfor _, t := range typesArray {\n+\t\ttMap[t.ProtoID] = t.Name\n+\t}\n+\treturn tMap\n+}\n+\n+// Statuses returns map of all Transaction Statuses\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Statuses() map[int]string {\n+\tstatusesArray := tr.retrieveTransactionStatuses()\n+\tsMap := make(map[int]string)\n+\tfor _, s := range statusesArray {\n+\t\tsMap[s.ProtoID] = s.Result\n+\t}\n+\treturn sMap\n+}\n+\n+func (tr *TransactionRepository) TypesAsArray() []string {\n+\treturn maphelper.GetStringValuesFromIntStringMap(tr.Types())\n+}\n+\n+// FindByTimestamp retrieves Transaction by given timestamp\n+func (tr *TransactionRepository) FindByTimestamp(timestamp int64) *types.Transaction {\n+\tt := transaction{}\n+\ttr.dbClient.Find(&t, timestamp)\n+\treturn tr.constructTransaction([]transaction{t})\n+}\n+\n+// FindBetween retrieves all Transactions between the provided start and end timestamp\n+func (tr *TransactionRepository) FindBetween(start int64, end int64) ([]*types.Transaction, *rTypes.Error) {\n+\tif start > end {\n+\t\treturn nil, errors.Errors[errors.StartMustBeBeforeEnd]\n+\t}\n+\tvar transactions []transaction\n+\ttr.dbClient.Where(whereClauseBetweenConsensus, start, end).Find(&transactions)\n+\n+\tsameHashMap := make(map[string][]transaction)\n+\tfor _, t := range transactions {\n+\t\th := t.getHashString()\n+\t\tsameHashMap[h] = append(sameHashMap[h], t)\n+\t}\n+\tres := make([]*types.Transaction, 0, len(sameHashMap))\n+\tfor _, sameHashTransactions := range sameHashMap {\n+\t\tres = append(res, tr.constructTransaction(sameHashTransactions))\n+\t}\n+\treturn res, nil\n+}\n+\n+// FindByHashInBlock retrieves a transaction by Hash\n+func (tr *TransactionRepository) FindByHashInBlock(hashStr string, consensusStart int64, consensusEnd int64) (*types.Transaction, *rTypes.Error) {\n+\tvar transactions []transaction\n+\ttransactionHash, err := hex.DecodeString(hexUtils.SafeRemoveHexPrefix(hashStr))\n+\tif err != nil {\n+\t\treturn nil, errors.Errors[errors.InvalidTransactionIdentifier]\n+\t}\n+\ttr.dbClient.Where(whereClauseBetweenConsensus, consensusStart, consensusEnd).Where(&transaction{TransactionHash: transactionHash}).Find(&transactions)\n+\tif len(transactions) == 0 {\n+\t\treturn nil, errors.Errors[errors.TransactionNotFound]\n+\t}\n+\n+\treturn tr.constructTransaction(transactions), nil\n+}\n+\n+func (tr *TransactionRepository) findCryptoTransfers(timestamps []int64) []dbTypes.CryptoTransfer {\n+\tvar cryptoTransfers []dbTypes.CryptoTransfer\n+\ttimestampsStr := intsToString(timestamps)\n+\ttr.dbClient.Where(fmt.Sprintf(whereTimestampsInConsensusTimestamp, timestampsStr)).Find(&cryptoTransfers)\n+\treturn cryptoTransfers\n+}\n+\n+func (tr *TransactionRepository) retrieveTransactionTypes() []transactionType {\n+\tvar transactionTypes []transactionType\n+\ttr.dbClient.Find(&transactionTypes)\n+\treturn transactionTypes\n+}\n+\n+func (tr *TransactionRepository) retrieveTransactionStatuses() []transactionStatus {\n+\tvar statuses []transactionStatus\n+\ttr.dbClient.Find(&statuses)\n+\treturn statuses\n+}\n+\n+func (tr *TransactionRepository) constructTransaction(sameHashTransactions []transaction) *types.Transaction {\n+\ttResult := &types.Transaction{Hash: sameHashTransactions[0].getHashString()}\n+\n+\ttransactionsMap := make(map[int64]transaction)\n+\ttimestamps := make([]int64, len(sameHashTransactions))\n+\tfor i, t := range sameHashTransactions {\n+\t\ttransactionsMap[t.ConsensusNS] = t\n+\t\ttimestamps[i] = t.ConsensusNS\n+\t}\n+\tcryptoTransfers := tr.findCryptoTransfers(timestamps)\n+\toperations := tr.constructOperations(cryptoTransfers, transactionsMap)\n+\ttResult.Operations = operations\n+\n+\treturn tResult\n+}\n+\n+func (tr *TransactionRepository) constructOperations(cryptoTransfers []dbTypes.CryptoTransfer, transactionsMap map[int64]transaction) []*types.Operation {\n+\ttransactionTypes := tr.Types()\n+\ttransactionStatuses := tr.Statuses()\n+\n+\toperations := make([]*types.Operation, len(cryptoTransfers))\n+\tfor i, ct := range cryptoTransfers {\n+\t\ta := constructAccount(ct.EntityID)\n+\t\toperationType := transactionTypes[transactionsMap[ct.ConsensusTimestamp].Type]\n+\t\toperationStatus := transactionStatuses[transactionsMap[ct.ConsensusTimestamp].Result]\n+\t\toperations[i] = &types.Operation{Index: int64(i), Type: operationType, Status: operationStatus, Account: a, Amount: &types.Amount{Value: ct.Amount}}\n+\t}\n+\treturn operations\n+}\n+\n+func constructAccount(encodedID int64) *types.Account {\n+\tacc, err := types.NewAccountFromEncodedID(encodedID)\n+\tif err != nil {\n+\t\tpanic(fmt.Sprintf(errors.CreateAccountDbIdFailed, encodedID))", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMTk0Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500101942", "bodyText": "You are right. Changing it to throwing Internal Server Errors", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T08:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxNTQxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478715411", "bodyText": "nit: can rename to String so Account implements the Stringer interface", "author": "xin-hedera", "createdAt": "2020-08-27T21:50:02Z", "path": "hedera-mirror-rosetta/app/domain/types/account.go", "diffHunk": "@@ -0,0 +1,81 @@\n+package types\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/entity-id-codec\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+)\n+\n+// Account is domain level struct used to represent Rosetta Account\n+type Account struct {\n+\tShard  int64\n+\tRealm  int64\n+\tNumber int64\n+}\n+\n+// NewAccountFromEncodedID - creates new instance of Account struct\n+func NewAccountFromEncodedID(encodedID int64) (*Account, error) {\n+\td, err := entity_id_codec.Decode(encodedID)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn &Account{\n+\t\tShard:  d.ShardNum,\n+\t\tRealm:  d.RealmNum,\n+\t\tNumber: d.EntityNum,\n+\t}, err\n+}\n+\n+// ComputeEncodedID - returns the encoded ID from the Shard, Realm and Number\n+func (a *Account) ComputeEncodedID() (int64, error) {\n+\treturn entity_id_codec.Encode(a.Shard, a.Realm, a.Number)\n+}\n+\n+// FormatToString - returns the string representation of the account\n+func (a *Account) FormatToString() string {", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxNzgxMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478717812", "bodyText": "strconv.parseInt for int64", "author": "xin-hedera", "createdAt": "2020-08-27T21:55:21Z", "path": "hedera-mirror-rosetta/app/domain/types/account.go", "diffHunk": "@@ -0,0 +1,81 @@\n+package types\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/entity-id-codec\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+)\n+\n+// Account is domain level struct used to represent Rosetta Account\n+type Account struct {\n+\tShard  int64\n+\tRealm  int64\n+\tNumber int64\n+}\n+\n+// NewAccountFromEncodedID - creates new instance of Account struct\n+func NewAccountFromEncodedID(encodedID int64) (*Account, error) {\n+\td, err := entity_id_codec.Decode(encodedID)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn &Account{\n+\t\tShard:  d.ShardNum,\n+\t\tRealm:  d.RealmNum,\n+\t\tNumber: d.EntityNum,\n+\t}, err\n+}\n+\n+// ComputeEncodedID - returns the encoded ID from the Shard, Realm and Number\n+func (a *Account) ComputeEncodedID() (int64, error) {\n+\treturn entity_id_codec.Encode(a.Shard, a.Realm, a.Number)\n+}\n+\n+// FormatToString - returns the string representation of the account\n+func (a *Account) FormatToString() string {\n+\treturn fmt.Sprintf(\"%d.%d.%d\", a.Shard, a.Realm, a.Number)\n+}\n+\n+// FromRosettaAccount populates domain type Account from Rosetta type Account\n+func FromRosettaAccount(rAccount *rTypes.AccountIdentifier) (*Account, *rTypes.Error) {\n+\treturn AccountFromString(rAccount.Address)\n+}\n+\n+// ToRosettaAccount returns Rosetta type Account from the current domain type Account\n+func (a *Account) ToRosettaAccount() *rTypes.AccountIdentifier {\n+\treturn &rTypes.AccountIdentifier{\n+\t\tAddress: a.FormatToString(),\n+\t}\n+}\n+\n+// AccountFromString populates domain type Account from String Account\n+func AccountFromString(account string) (*Account, *rTypes.Error) {\n+\tinputs := strings.Split(account, \".\")\n+\tif len(inputs) != 3 {\n+\t\treturn nil, errors.Errors[errors.InvalidAccount]\n+\t}\n+\n+\tshard, err := strconv.Atoi(inputs[0])", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxODY3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478718670", "bodyText": "strconv.parseInt for int64", "author": "xin-hedera", "createdAt": "2020-08-27T21:57:27Z", "path": "hedera-mirror-rosetta/app/domain/types/amount.go", "diffHunk": "@@ -0,0 +1,32 @@\n+package types\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/config\"\n+\t\"strconv\"\n+)\n+\n+type Amount struct {\n+\tValue int64\n+}\n+\n+// FromRosettaAmount populates domain type Amount from Rosetta type Amount\n+func FromRosettaAmount(rAmount *rTypes.Amount) (*Amount, *rTypes.Error) {\n+\tamount, err := strconv.Atoi(rAmount.Value)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMjIyNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478722224", "bodyText": "rosetta block index is not consensus start of a record file", "author": "xin-hedera", "createdAt": "2020-08-27T22:06:14Z", "path": "hedera-mirror-rosetta/app/domain/types/block.go", "diffHunk": "@@ -0,0 +1,66 @@\n+package types\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"time\"\n+)\n+\n+// Block is domain level struct used to represent Block conceptual mapping in Hedera\n+type Block struct {\n+\tIndex               int64\n+\tHash                string\n+\tConsensusStartNanos int64\n+\tConsensusEndNanos   int64\n+\tParentIndex         int64\n+\tParentHash          string\n+\tTransactions        []*Transaction\n+}\n+\n+// FromRosettaBlock populates domain type Block from Rosetta type Block\n+func FromRosettaBlock(rBlock *rTypes.Block) (*Block, *rTypes.Error) {\n+\ttransactions := make([]*Transaction, len(rBlock.Transactions))\n+\tfor i, rosettaT := range rBlock.Transactions {\n+\t\tt, err := FromRosettaTransaction(rosettaT)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\ttransactions[i] = t\n+\t}\n+\n+\treturn &Block{\n+\t\tIndex:               rBlock.BlockIdentifier.Index,\n+\t\tHash:                hex.SafeRemoveHexPrefix(rBlock.BlockIdentifier.Hash),\n+\t\tConsensusStartNanos: rBlock.BlockIdentifier.Index,", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNjEwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500216108", "bodyText": "yes, you are right. It is a leftover from the previous version of the code.\nWe are removing the FromRosetta* functionality, because:\n\nIt is unused\nWe cannot directly map Rosetta Block model to the Internal representation of a Block, because of the ConsensusStartNanos and ConsensusEndNanos", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T11:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMjIyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMzE4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478723182", "bodyText": "rosetta timestamp is in millisecond", "author": "xin-hedera", "createdAt": "2020-08-27T22:08:50Z", "path": "hedera-mirror-rosetta/app/domain/types/block.go", "diffHunk": "@@ -0,0 +1,66 @@\n+package types\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"time\"\n+)\n+\n+// Block is domain level struct used to represent Block conceptual mapping in Hedera\n+type Block struct {\n+\tIndex               int64\n+\tHash                string\n+\tConsensusStartNanos int64\n+\tConsensusEndNanos   int64\n+\tParentIndex         int64\n+\tParentHash          string\n+\tTransactions        []*Transaction\n+}\n+\n+// FromRosettaBlock populates domain type Block from Rosetta type Block\n+func FromRosettaBlock(rBlock *rTypes.Block) (*Block, *rTypes.Error) {\n+\ttransactions := make([]*Transaction, len(rBlock.Transactions))\n+\tfor i, rosettaT := range rBlock.Transactions {\n+\t\tt, err := FromRosettaTransaction(rosettaT)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\ttransactions[i] = t\n+\t}\n+\n+\treturn &Block{\n+\t\tIndex:               rBlock.BlockIdentifier.Index,\n+\t\tHash:                hex.SafeRemoveHexPrefix(rBlock.BlockIdentifier.Hash),\n+\t\tConsensusStartNanos: rBlock.BlockIdentifier.Index,\n+\t\tConsensusEndNanos:   rBlock.Timestamp,", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNjE1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500216157", "bodyText": "addressed in the upper comment", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T11:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMzE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNTkxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478725919", "bodyText": "q: why is the file named common and in package types?", "author": "xin-hedera", "createdAt": "2020-08-27T22:16:09Z", "path": "hedera-mirror-rosetta/app/persistance/postgres/types/common.go", "diffHunk": "@@ -0,0 +1,12 @@\n+package types", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MDc3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500240779", "bodyText": "Changed the folder to common along with the package. The name of the file was changed to types as this is the Go idiomatic way of handling common types.", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T12:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNTkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyODUxMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478728510", "bodyText": "will panic if bIdentifier.Index is nil", "author": "xin-hedera", "createdAt": "2020-08-27T22:23:20Z", "path": "hedera-mirror-rosetta/app/services/commons.go", "diffHunk": "@@ -0,0 +1,36 @@\n+package services\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/repositories\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+)\n+\n+// Commons - Struct implementing common functionalities used by more than 1 service\n+type Commons struct {\n+\tblockRepo       repositories.BlockRepository\n+\ttransactionRepo repositories.TransactionRepository\n+}\n+\n+// NewCommons - Service containing common functions that are shared between other services\n+func NewCommons(blockRepo repositories.BlockRepository, transactionRepo repositories.TransactionRepository) Commons {\n+\treturn Commons{\n+\t\tblockRepo:       blockRepo,\n+\t\ttransactionRepo: transactionRepo,\n+\t}\n+}\n+\n+func (c *Commons) RetrieveBlock(bIdentifier *rTypes.PartialBlockIdentifier) (*types.Block, *rTypes.Error) {\n+\tif bIdentifier.Hash != nil && bIdentifier.Index != nil {\n+\t\th := hex.SafeRemoveHexPrefix(*bIdentifier.Hash)\n+\t\treturn c.blockRepo.FindByIdentifier(*bIdentifier.Index, h)\n+\t} else if bIdentifier.Hash == nil {\n+\t\treturn c.blockRepo.FindByIndex(*bIdentifier.Index)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MTcwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500241705", "bodyText": "The Rosetta SDK validates the input and such use-case is not possible in the current implementation. Although relying on SDK validation makes this function vulnerable and not future proof. I've changed the code so that the issue is fixed.", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T12:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyODUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyODYzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478728631", "bodyText": "will panic if bIdentifier.Hash is nil", "author": "xin-hedera", "createdAt": "2020-08-27T22:23:42Z", "path": "hedera-mirror-rosetta/app/services/commons.go", "diffHunk": "@@ -0,0 +1,36 @@\n+package services\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/repositories\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+)\n+\n+// Commons - Struct implementing common functionalities used by more than 1 service\n+type Commons struct {\n+\tblockRepo       repositories.BlockRepository\n+\ttransactionRepo repositories.TransactionRepository\n+}\n+\n+// NewCommons - Service containing common functions that are shared between other services\n+func NewCommons(blockRepo repositories.BlockRepository, transactionRepo repositories.TransactionRepository) Commons {\n+\treturn Commons{\n+\t\tblockRepo:       blockRepo,\n+\t\ttransactionRepo: transactionRepo,\n+\t}\n+}\n+\n+func (c *Commons) RetrieveBlock(bIdentifier *rTypes.PartialBlockIdentifier) (*types.Block, *rTypes.Error) {\n+\tif bIdentifier.Hash != nil && bIdentifier.Index != nil {\n+\t\th := hex.SafeRemoveHexPrefix(*bIdentifier.Hash)\n+\t\treturn c.blockRepo.FindByIdentifier(*bIdentifier.Index, h)\n+\t} else if bIdentifier.Hash == nil {\n+\t\treturn c.blockRepo.FindByIndex(*bIdentifier.Index)\n+\t} else if bIdentifier.Index == nil {\n+\t\th := hex.SafeRemoveHexPrefix(*bIdentifier.Hash)", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MTgwNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500241806", "bodyText": "addressed in the upper comment", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T12:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyODYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyODgyMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478728822", "bodyText": "is this branch ever reachable?", "author": "xin-hedera", "createdAt": "2020-08-27T22:24:16Z", "path": "hedera-mirror-rosetta/app/services/commons.go", "diffHunk": "@@ -0,0 +1,36 @@\n+package services\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/repositories\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+)\n+\n+// Commons - Struct implementing common functionalities used by more than 1 service\n+type Commons struct {\n+\tblockRepo       repositories.BlockRepository\n+\ttransactionRepo repositories.TransactionRepository\n+}\n+\n+// NewCommons - Service containing common functions that are shared between other services\n+func NewCommons(blockRepo repositories.BlockRepository, transactionRepo repositories.TransactionRepository) Commons {\n+\treturn Commons{\n+\t\tblockRepo:       blockRepo,\n+\t\ttransactionRepo: transactionRepo,\n+\t}\n+}\n+\n+func (c *Commons) RetrieveBlock(bIdentifier *rTypes.PartialBlockIdentifier) (*types.Block, *rTypes.Error) {\n+\tif bIdentifier.Hash != nil && bIdentifier.Index != nil {\n+\t\th := hex.SafeRemoveHexPrefix(*bIdentifier.Hash)\n+\t\treturn c.blockRepo.FindByIdentifier(*bIdentifier.Index, h)\n+\t} else if bIdentifier.Hash == nil {\n+\t\treturn c.blockRepo.FindByIndex(*bIdentifier.Index)\n+\t} else if bIdentifier.Index == nil {\n+\t\th := hex.SafeRemoveHexPrefix(*bIdentifier.Hash)\n+\t\treturn c.blockRepo.FindByHash(h)\n+\t} else {\n+\t\treturn c.blockRepo.RetrieveLatest()", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2OTM0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r500269345", "bodyText": "addressed in the upper comment", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-06T13:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyODgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1Nzc1OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r478757759", "bodyText": "Do this file and other related files have to be in the top level directory to comply with Rosetta requirement? If no, it's better to move these files to a sub folder in hedera-mirror-rosetta.\nDo we need hedera-mirror-grpc and hedera-mirror-rest in this all-in-one docker image? hedera-mirror-rosetta does not depend on them.", "author": "xin-hedera", "createdAt": "2020-08-27T23:56:23Z", "path": "Dockerfile", "diffHunk": "@@ -0,0 +1,98 @@\n+# ------------------------------  Rosetta  ------------------------------- #", "originalCommit": "62d8f0ab02f9f63a99a84508d1b6ced7c5dae12a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f18099ca2f59831bc1d6c384d454b5644a279544", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f18099ca2f59831bc1d6c384d454b5644a279544", "message": "Infrastructure(docker): pass env variables, add online/offline mode, init db script (#102)\n\n* infrastructure(docker): run hedera-mirror-grpc db init script", "committedDate": "2020-08-28T06:17:12Z", "type": "commit"}, {"oid": "4ac618a2247d05287052f6e22721bc4206e2e1fa", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4ac618a2247d05287052f6e22721bc4206e2e1fa", "message": "Merge branch 'master' of https://github.com/hashgraph/hedera-mirror-node\n\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\n\n# Conflicts:\n#\tdocs/configuration.md", "committedDate": "2020-10-01T12:54:16Z", "type": "commit"}, {"oid": "41204850cb42a79f4eab1cb641fad7f074aa9204", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/41204850cb42a79f4eab1cb641fad7f074aa9204", "message": "Fix(hedera-mirror-rosetta): Docs & Upgrade dependencies (#109)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-02T14:01:42Z", "type": "commit"}, {"oid": "6da8ea282a0b9e8c9ceac3cc71749aa2a6f57244", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6da8ea282a0b9e8c9ceac3cc71749aa2a6f57244", "message": "Refactor/address pr comments 1 (#110)\n\n* address PR comments partially\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* fix rosetta cli config\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\nCo-authored-by: Daniel Ivanov <daniel@limechain.tech>", "committedDate": "2020-10-02T14:48:32Z", "type": "commit"}, {"oid": "b4a651932b0d1e76f78fb5cfd2f0b0de3da75569", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b4a651932b0d1e76f78fb5cfd2f0b0de3da75569", "message": "Merge from Hedera Master (#111)\n\n* Bump eslint-config-prettier from 6.11.0 to 6.12.0 in /hedera-mirror-rest (#1083)\r\n\r\nBumps [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) from 6.11.0 to 6.12.0.\r\n- [Release notes](https://github.com/prettier/eslint-config-prettier/releases)\r\n- [Changelog](https://github.com/prettier/eslint-config-prettier/blob/master/CHANGELOG.md)\r\n- [Commits](https://github.com/prettier/eslint-config-prettier/compare/v6.11.0...v6.12.0)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Bump supertest from 4.0.2 to 5.0.0 in /hedera-mirror-rest (#1081)\r\n\r\nBumps [supertest](https://github.com/visionmedia/supertest) from 4.0.2 to 5.0.0.\r\n- [Release notes](https://github.com/visionmedia/supertest/releases)\r\n- [Commits](https://github.com/visionmedia/supertest/compare/v4.0.2...v5.0.0)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Bump mathjs from 7.2.0 to 7.3.0 in /hedera-mirror-rest (#1080)\r\n\r\nBumps [mathjs](https://github.com/josdejong/mathjs) from 7.2.0 to 7.3.0.\r\n- [Release notes](https://github.com/josdejong/mathjs/releases)\r\n- [Changelog](https://github.com/josdejong/mathjs/blob/develop/HISTORY.md)\r\n- [Commits](https://github.com/josdejong/mathjs/compare/v7.2.0...v7.3.0)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Bump prettier from 2.1.1 to 2.1.2 in /hedera-mirror-rest (#1079)\r\n\r\nBumps [prettier](https://github.com/prettier/prettier) from 2.1.1 to 2.1.2.\r\n- [Release notes](https://github.com/prettier/prettier/releases)\r\n- [Changelog](https://github.com/prettier/prettier/blob/master/CHANGELOG.md)\r\n- [Commits](https://github.com/prettier/prettier/compare/2.1.1...2.1.2)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Bump mathjs in /hedera-mirror-rest/monitoring/monitor_apis (#1078)\r\n\r\nBumps [mathjs](https://github.com/josdejong/mathjs) from 7.2.0 to 7.3.0.\r\n- [Release notes](https://github.com/josdejong/mathjs/releases)\r\n- [Changelog](https://github.com/josdejong/mathjs/blob/develop/HISTORY.md)\r\n- [Commits](https://github.com/josdejong/mathjs/compare/v7.2.0...v7.3.0)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Bump supertest in /hedera-mirror-rest/monitoring/monitor_apis (#1077)\r\n\r\nBumps [supertest](https://github.com/visionmedia/supertest) from 4.0.2 to 5.0.0.\r\n- [Release notes](https://github.com/visionmedia/supertest/releases)\r\n- [Commits](https://github.com/visionmedia/supertest/compare/v4.0.2...v5.0.0)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Enable code scanning for vulnerabilities (#1092)\r\n\r\nAdd automatic code scanning in pull requests via GitHub's newly enabled CodeQL action\r\n\r\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>\r\n\r\n* Bump cucumber.version from 6.6.0 to 6.7.0 (#1066)\r\n\r\nBumps `cucumber.version` from 6.6.0 to 6.7.0.\r\n\r\nUpdates `cucumber-java` from 6.6.0 to 6.7.0\r\n- [Release notes](https://github.com/cucumber/cucumber-jvm/releases)\r\n- [Changelog](https://github.com/cucumber/cucumber-jvm/blob/main/CHANGELOG.md)\r\n- [Commits](https://github.com/cucumber/cucumber-jvm/compare/v6.6.0...v6.7.0)\r\n\r\nUpdates `cucumber-junit` from 6.6.0 to 6.7.0\r\n- [Release notes](https://github.com/cucumber/cucumber-jvm/releases)\r\n- [Changelog](https://github.com/cucumber/cucumber-jvm/blob/main/CHANGELOG.md)\r\n- [Commits](https://github.com/cucumber/cucumber-jvm/compare/v6.6.0...v6.7.0)\r\n\r\nUpdates `cucumber-junit-platform-engine` from 6.6.0 to 6.7.0\r\n- [Release notes](https://github.com/cucumber/cucumber-jvm/releases)\r\n- [Changelog](https://github.com/cucumber/cucumber-jvm/blob/main/CHANGELOG.md)\r\n- [Commits](https://github.com/cucumber/cucumber-jvm/compare/v6.6.0...v6.7.0)\r\n\r\nUpdates `cucumber-spring` from 6.6.0 to 6.7.0\r\n- [Release notes](https://github.com/cucumber/cucumber-jvm/releases)\r\n- [Changelog](https://github.com/cucumber/cucumber-jvm/blob/main/CHANGELOG.md)\r\n- [Commits](https://github.com/cucumber/cucumber-jvm/compare/v6.6.0...v6.7.0)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Bump reporting-plugin from 4.0.77 to 4.0.84 (#1023)\r\n\r\nBumps [reporting-plugin](https://gitlab.com/monochromata-de/cucumber-reporting-plugin) from 4.0.77 to 4.0.84.\r\n- [Release notes](https://gitlab.com/monochromata-de/cucumber-reporting-plugin/tags)\r\n- [Changelog](https://gitlab.com/monochromata-de/cucumber-reporting-plugin/blob/master/CHANGELOG.md)\r\n- [Commits](https://gitlab.com/monochromata-de/cucumber-reporting-plugin/commits/master)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Bump protobuf-java from 3.11.1 to 3.13.0 (#1024)\r\n\r\nBumps [protobuf-java](https://github.com/protocolbuffers/protobuf) from 3.11.1 to 3.13.0.\r\n- [Release notes](https://github.com/protocolbuffers/protobuf/releases)\r\n- [Changelog](https://github.com/protocolbuffers/protobuf/blob/master/generate_changelog.py)\r\n- [Commits](https://github.com/protocolbuffers/protobuf/compare/v3.11.1...v3.13.0)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* HTS: Add new fields to accounts, balances and transactions REST API (#1087)\r\n\r\n- Add tokens array to the account object in accounts response json for clients to retrieve token balance snapshot\r\n- Add tokens array to the account object in balances response json for clients to retrieve token balance snapshot\r\n- Add token_transfers array to the transaction object in transactions response json for token transfer transactions\r\n- Add integration tests for accounts, balances and transactions REST API endpoints\r\n\r\nSigned-off-by: Xin Li <xin.li@swirlds.com>\r\n\r\n* Bump aws-sdk from 2.756.0 to 2.761.0 in /hedera-mirror-rest (#1082)\r\n\r\nBumps [aws-sdk](https://github.com/aws/aws-sdk-js) from 2.756.0 to 2.761.0.\r\n- [Release notes](https://github.com/aws/aws-sdk-js/releases)\r\n- [Changelog](https://github.com/aws/aws-sdk-js/blob/master/CHANGELOG.md)\r\n- [Commits](https://github.com/aws/aws-sdk-js/compare/v2.756.0...v2.761.0)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: Steven Sheehy <17552371+steven-sheehy@users.noreply.github.com>\r\nCo-authored-by: Xin Li <59580070+xin-hedera@users.noreply.github.com>", "committedDate": "2020-10-05T08:05:11Z", "type": "commit"}, {"oid": "bd66e0ba796c28a5e0c6d288530f660f817d31dc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd66e0ba796c28a5e0c6d288530f660f817d31dc", "message": "Fix(hedera-mirror-rosetta): All-in-one Docker config (#114)\n\nremove grpc/rest from all-in-one, copy only application.yml", "committedDate": "2020-10-05T12:53:28Z", "type": "commit"}, {"oid": "e4206753c5c2d1868ff267d206d263dcb7eddcd0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e4206753c5c2d1868ff267d206d263dcb7eddcd0", "message": "Merge branch 'master' of https://github.com/hashgraph/hedera-mirror-node", "committedDate": "2020-10-05T12:57:36Z", "type": "commit"}, {"oid": "1b4d7aa42eddfbdb7880d8c42fc4f5d94a3b8b71", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1b4d7aa42eddfbdb7880d8c42fc4f5d94a3b8b71", "message": "Merge pull request #115 from LimeChain/fetch/origin\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-05T13:14:11Z", "type": "commit"}, {"oid": "be6ca046474bc565139b324d5333a247d65ee72d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/be6ca046474bc565139b324d5333a247d65ee72d", "message": "Refactor(hedera-mirror-rosetta): Int64 parses (#116)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-05T20:01:54Z", "type": "commit"}, {"oid": "a8f0d904dd7bae6673dca39d4bc60a69d7e23653", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a8f0d904dd7bae6673dca39d4bc60a69d7e23653", "message": "Ref: Address PR comments (2) (#118)\n\n* address sql queries\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* fix transaction result renaming for consistency\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* address error message comment\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* address pr comments\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* address panic comments\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* - remove unused 'fromRosettaBlock' functionality\r\n- refactor get transaction query to perform only 1 db call\r\n- add unit tests\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* address packaging comment\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* fix retrieve block logic\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* fix retrieve block logic\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\n* remove t.Run\r\n\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>", "committedDate": "2020-10-06T13:19:30Z", "type": "commit"}, {"oid": "d12540f88c9a83ce7a63dfe735360ab8dea59ae7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d12540f88c9a83ce7a63dfe735360ab8dea59ae7", "message": "Fix(hedera-mirror-rosetta): Update Rosetta CLI validation pipeline (#121)\n\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\n\r\nSigned-off-by: failfmi <oscurocalma@gmail.com>\r\n\r\nCo-authored-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>", "committedDate": "2020-10-07T13:13:29Z", "type": "commit"}, {"oid": "2fce6b47606e4fc0c87b27f04d2f8814a6cd8df9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2fce6b47606e4fc0c87b27f04d2f8814a6cd8df9", "message": "remove docker ignore (#123)\n\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>", "committedDate": "2020-10-07T13:29:30Z", "type": "commit"}, {"oid": "95b030dd24bd1720d25b2598281d0c642c5354e5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/95b030dd24bd1720d25b2598281d0c642c5354e5", "message": "apache: add licenses (#128)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-08T10:24:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NzIxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r476567214", "bodyText": "Should switch this to use remote tags before merge to master to be consistent", "author": "steven-sheehy", "createdAt": "2020-08-25T16:09:39Z", "path": "docker-compose.yml", "diffHunk": "@@ -46,3 +46,18 @@ services:\n     tty: true\n     ports:\n       - 5551:5551\n+\n+  rosetta:\n+    build:\n+      context: ./hedera-mirror-rosetta\n+      dockerfile: ./Dockerfile", "originalCommit": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQwOTYzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502409633", "bodyText": "Yes, you are right Steven. At some point, once the hedera-mirror-rosetta is deployed in the mirrornode gcr, this build should be changed to image.", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-09T12:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NzIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3ODE4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r476578182", "bodyText": "The mirror node can support multiple realms and only hardcodes the shard. If possible, this should be removed and the code made to support multiple realms.", "author": "steven-sheehy", "createdAt": "2020-08-25T16:26:23Z", "path": "docs/configuration.md", "diffHunk": "@@ -176,3 +176,30 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.rest.stateproof.streams.network`          | DEMO                    | Which Hedera network to use. Can be either `DEMO`, `MAINNET`, `TESTNET` or `OTHER`             |\n | `hedera.mirror.rest.stateproof.streams.region`           | us-east-1               | The region associated with the bucket                                                          |\n | `hedera.mirror.rest.stateproof.streams.secretKey`        | \"\"                      | The cloud storage secret key                                                                   |\n+\n+\n+## Rosetta API\n+\n+The Rosetta API supports loading configuration from YAML. By default, it loads a file named\n+`application.yml` in each of the search paths (see below).\n+The configuration is loaded in the following order with the latter configuration overwriting (technically recursively\n+merged into) the current configuration:\n+\n+1. `./config/application.yml`\n+2. `./application.yml`\n+\n+The following table lists the available properties along with thteir default values.\n+| Name                                                    | Default                 | Description                                                                                    |\n+| ------------------------------------------------------- | ----------------------- | ---------------------------------------------------------------------------------------------- |\n+| `hedera.mirror.rosetta.apiVersion`                      | 1.4.2                     | The version of the Rosetta interface the implementation adheres to                           |\n+| `hedera.mirror.rosetta.db.host`                         | 127.0.0.1               | The IP or hostname used to connect to the database                                             |\n+| `hedera.mirror.rosetta.db.name`                         | mirror_node             | The name of the database                                                                       |\n+| `hedera.mirror.rosetta.db.password`                     | mirror_api_pass         | The database password the processor uses to connect. **Should be changed from default**        |\n+| `hedera.mirror.rosetta.db.port`                         | 5432                    | The port used to connect to the database                                                       |\n+| `hedera.mirror.rosetta.db.username`                     | mirror_api              | The username the processor uses to connect to the database                                     |\n+| `hedera.mirror.rosetta.nodeVersion`                     | 0                       | The default canonical version of the node runtime                                              |\n+| `hedera.mirror.rosetta.port`                            | 5700                    | The REST API port                                                                              |\n+| `hedera.mirror.rosetta.network`                         | DEMO                    | Which Hedera network to use. Can be either `DEMO`, `MAINNET`, `TESTNET` or `OTHER`             |\n+| `hedera.mirror.rosetta.shard`                           | 0                       | The default shard number that this mirror node participates in                                 |\n+| `hedera.mirror.rosetta.realm`                           | 0                       | The default realm number within the shard                                                      |", "originalCommit": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzMzk2Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502433963", "bodyText": "We will have to discuss this topic and think about how the Rosetta API can support multiple realms as-well (if possible).", "author": "Daniel-K-Ivanov", "createdAt": "2020-10-09T13:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3ODE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MjAwOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r476582009", "bodyText": "This name is too generic. Prefer EntityId like Java code.", "author": "steven-sheehy", "createdAt": "2020-08-25T16:32:12Z", "path": "hedera-mirror-rosetta/app/domain/services/entity-id-codec/entity_id_codec.go", "diffHunk": "@@ -0,0 +1,46 @@\n+package entity_id_codec\n+\n+import (\n+\t\"fmt\"\n+)\n+\n+const (\n+\tshardBits  int   = 15\n+\trealmBits  int   = 16\n+\tnumberBits int   = 32\n+\tshardMask  int64 = (int64(1) << shardBits) - 1\n+\trealmMask  int64 = (int64(1) << realmBits) - 1\n+\tnumberMask int64 = (int64(1) << numberBits) - 1\n+)\n+\n+// DecodedData returns the decoded data from the DB ID\n+type DecodedData struct {", "originalCommit": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzM0Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r476583342", "bodyText": "Can we reuse the EntityId to store this?", "author": "steven-sheehy", "createdAt": "2020-08-25T16:34:09Z", "path": "hedera-mirror-rosetta/app/domain/types/account.go", "diffHunk": "@@ -0,0 +1,81 @@\n+package types\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/entity-id-codec\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+)\n+\n+// Account is domain level struct used to represent Rosetta Account\n+type Account struct {\n+\tShard  int64", "originalCommit": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r476585483", "bodyText": "It is preferred to not use underscores in package names per Go guidelines. Recommend entityid", "author": "steven-sheehy", "createdAt": "2020-08-25T16:37:40Z", "path": "hedera-mirror-rosetta/app/domain/services/entity-id-codec/entity_id_codec.go", "diffHunk": "@@ -0,0 +1,46 @@\n+package entity_id_codec", "originalCommit": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4OTE4Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r476589186", "bodyText": "Would be better if these from/to string methods were centralized in EntityId. Reason is you might need File, Topic or Smart Contract entity IDs or to use the account ID outside of the Account domain", "author": "steven-sheehy", "createdAt": "2020-08-25T16:43:48Z", "path": "hedera-mirror-rosetta/app/domain/types/account.go", "diffHunk": "@@ -0,0 +1,81 @@\n+package types\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/services/entity-id-codec\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+)\n+\n+// Account is domain level struct used to represent Rosetta Account\n+type Account struct {\n+\tShard  int64\n+\tRealm  int64\n+\tNumber int64\n+}\n+\n+// NewAccountFromEncodedID - creates new instance of Account struct\n+func NewAccountFromEncodedID(encodedID int64) (*Account, error) {\n+\td, err := entity_id_codec.Decode(encodedID)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn &Account{\n+\t\tShard:  d.ShardNum,\n+\t\tRealm:  d.RealmNum,\n+\t\tNumber: d.EntityNum,\n+\t}, err\n+}\n+\n+// ComputeEncodedID - returns the encoded ID from the Shard, Realm and Number\n+func (a *Account) ComputeEncodedID() (int64, error) {\n+\treturn entity_id_codec.Encode(a.Shard, a.Realm, a.Number)\n+}\n+\n+// FormatToString - returns the string representation of the account\n+func (a *Account) FormatToString() string {\n+\treturn fmt.Sprintf(\"%d.%d.%d\", a.Shard, a.Realm, a.Number)\n+}\n+\n+// FromRosettaAccount populates domain type Account from Rosetta type Account\n+func FromRosettaAccount(rAccount *rTypes.AccountIdentifier) (*Account, *rTypes.Error) {\n+\treturn AccountFromString(rAccount.Address)\n+}\n+\n+// ToRosettaAccount returns Rosetta type Account from the current domain type Account\n+func (a *Account) ToRosettaAccount() *rTypes.AccountIdentifier {\n+\treturn &rTypes.AccountIdentifier{\n+\t\tAddress: a.FormatToString(),\n+\t}\n+}\n+\n+// AccountFromString populates domain type Account from String Account\n+func AccountFromString(account string) (*Account, *rTypes.Error) {", "originalCommit": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDMxMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r476604313", "bodyText": "Perhaps for consistency it would be better to name all these similar methods across domains the same? That is FromRosetta() and ToRosetta() instead of hardcoding the type on the end.", "author": "steven-sheehy", "createdAt": "2020-08-25T17:08:40Z", "path": "hedera-mirror-rosetta/app/domain/types/amount.go", "diffHunk": "@@ -0,0 +1,32 @@\n+package types\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/config\"\n+\t\"strconv\"\n+)\n+\n+type Amount struct {\n+\tValue int64\n+}\n+\n+// FromRosettaAmount populates domain type Amount from Rosetta type Amount\n+func FromRosettaAmount(rAmount *rTypes.Amount) (*Amount, *rTypes.Error) {", "originalCommit": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwOTIxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r476609215", "bodyText": "See related comment in docs/configuration.md", "author": "steven-sheehy", "createdAt": "2020-08-25T17:16:17Z", "path": "hedera-mirror-rosetta/config/application.yml", "diffHunk": "@@ -0,0 +1,17 @@\n+# This file contains application defaults and shouldn't be modified. See docs/configuration.md for how to override.\n+hedera:\n+  mirror:\n+    rosetta:\n+      apiVersion: 1.4.2\n+      db:\n+        host: 127.0.0.1\n+        name: mirror_node\n+        password: mirror_node_pass\n+        port: 5432\n+        username: mirror_node", "originalCommit": "b0f7dee84496230d33fd80d0b2f883f4755bf157", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2MzIwNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502363204", "bodyText": "Already addressed here,  will be added in a separate PR.", "author": "failfmi", "createdAt": "2020-10-09T11:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwOTIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyOTI0OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502029248", "bodyText": "Rosetta should use its own read only database user. e.g. mirror_rosetta / mirror_rosetta_pass", "author": "steven-sheehy", "createdAt": "2020-10-08T21:42:36Z", "path": "docs/configuration.md", "diffHunk": "@@ -242,3 +242,33 @@ hedera:\n           secretKey: <secretKey>\n           bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n ```\n+\n+\n+## Rosetta API\n+\n+The Rosetta API supports loading configuration from YAML. By default, it loads a file named\n+`application.yml` in each of the search paths (see below).\n+The configuration is loaded in the following order with the latter configuration overwriting (technically recursively\n+merged into) the current configuration:\n+\n+1. `./config/application.yml`\n+2. `./application.yml`\n+3. Environment variables that start with `HEDERA_MIRROR_ROSETTA_` (e.g. `HEDERA_MIRROR_ROSETTA_API_VERSION=1.4.2`)\n+\n+The following table lists the available properties along with their default values.\n+\n+| Name                                                    | Default                 | Description                                                                                    |\n+| ------------------------------------------------------- | ----------------------- | ---------------------------------------------------------------------------------------------- |\n+| `hedera.mirror.rosetta.apiVersion`                      | 1.4.4                   | The version of the Rosetta interface the implementation adheres to                             |\n+| `hedera.mirror.rosetta.db.host`                         | 127.0.0.1               | The IP or hostname used to connect to the database                                             |\n+| `hedera.mirror.rosetta.db.name`                         | mirror_node             | The name of the database                                                                       |\n+| `hedera.mirror.rosetta.db.password`                     | mirror_node_pass        | The database password the processor uses to connect. **Should be changed from default**        |\n+| `hedera.mirror.rosetta.db.port`                         | 5432                    | The port used to connect to the database                                                       |\n+| `hedera.mirror.rosetta.db.username`                     | mirror_node             | The username the processor uses to connect to the database                                     |", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2MzM5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502363390", "bodyText": "Same comment as above", "author": "failfmi", "createdAt": "2020-10-09T11:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyOTI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDA1OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502034059", "bodyText": "Would prefer not having postgres in package names. We will probably be switching to TimeScaleDB in the near future.", "author": "steven-sheehy", "createdAt": "2020-10-08T21:53:57Z", "path": "hedera-mirror-rosetta/app/persistence/postgres/account/account.go", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package account\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistence/postgres/common\"", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDk4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502034980", "bodyText": "Why do we need to sprintf these instead of hardcoding the table names in the query or using prepared statements?  I'm sure code scanners will complain of SQL injection.", "author": "steven-sheehy", "createdAt": "2020-10-08T21:56:09Z", "path": "hedera-mirror-rosetta/app/persistence/postgres/addressbook/entry/entry.go", "diffHunk": "@@ -0,0 +1,115 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package entry\n+\n+import (\n+\t\"fmt\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+\t\"log\"\n+)\n+\n+const (\n+\tlatestAddressBookEntries = \"SELECT abe.* FROM %s AS abe JOIN %s AS ab ON ab.start_consensus_timestamp = abe.consensus_timestamp WHERE ab.end_consensus_timestamp IS NULL\"\n+)\n+\n+const (\n+\ttableNameAddressBook      = \"address_book\"\n+\ttableNameAddressBookEntry = \"address_book_entry\"\n+)\n+\n+type addressBookEntry struct {\n+\tId                 int32  `gorm:\"type:integer;primary_key\"`\n+\tConsensusTimestamp int64  `gorm:\"type:bigint\"`\n+\tIp                 string `gorm:\"size:128\"`\n+\tPort               int32  `gorm:\"type:integer\"`\n+\tMemo               string `gorm:\"size:128\"`\n+\tPublicKey          string `gorm:\"size:1024\"`\n+\tNodeId             *int64 `gorm:\"type:bigint\"`\n+\tNodeAccountId      int64  `gorm:\"type:bigint\"`\n+\tNodeCertHash       []byte `gorm:\"type:bytea\"`\n+}\n+\n+func (addressBookEntry) TableName() string {\n+\treturn tableNameAddressBookEntry\n+}\n+\n+// AddressBookEntryRepository struct that has connection to the Database\n+type AddressBookEntryRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// Entries return all found Address Book Entries\n+func (aber *AddressBookEntryRepository) Entries() (*types.AddressBookEntries, *rTypes.Error) {\n+\tdbEntries := aber.retrieveEntries()\n+\n+\tentries := make([]*types.AddressBookEntry, len(dbEntries))\n+\tfor i, e := range dbEntries {\n+\t\tpeerId, err := e.getPeerId()\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tentries[i] = &types.AddressBookEntry{\n+\t\t\tPeerId: peerId,\n+\t\t\tMetadata: map[string]interface{}{\n+\t\t\t\t\"ip\":   e.Ip,\n+\t\t\t\t\"port\": e.Port,\n+\t\t\t},\n+\t\t}\n+\t}\n+\n+\treturn &types.AddressBookEntries{\n+\t\tEntries: entries}, nil\n+}\n+\n+func (abe *addressBookEntry) getPeerId() (*types.Account, *rTypes.Error) {\n+\tif abe.NodeId == nil {\n+\t\tacc, err := types.AccountFromString(abe.Memo)\n+\t\tif err != nil {\n+\t\t\tlog.Printf(errors.CreateAccountDbIdFailed, abe.Memo)\n+\t\t\treturn nil, errors.Errors[errors.InternalServerError]\n+\t\t}\n+\t\treturn acc, nil\n+\t}\n+\n+\tdecoded, err := types.NewAccountFromEncodedID(*abe.NodeId)\n+\tif err != nil {\n+\t\tlog.Printf(errors.CreateAccountDbIdFailed, abe.NodeId)\n+\t\treturn nil, errors.Errors[errors.InternalServerError]\n+\t}\n+\n+\treturn decoded, nil\n+}\n+\n+func (aber *AddressBookEntryRepository) retrieveEntries() []addressBookEntry {\n+\tvar entries []addressBookEntry\n+\taber.dbClient.Raw(fmt.Sprintf(latestAddressBookEntries, tableNameAddressBookEntry, tableNameAddressBook)).Scan(&entries)", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNzY5OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502037698", "bodyText": "Use prepared statements", "author": "steven-sheehy", "createdAt": "2020-10-08T22:02:42Z", "path": "hedera-mirror-rosetta/app/persistence/postgres/transaction/transaction.go", "diffHunk": "@@ -0,0 +1,255 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package transaction\n+\n+import (\n+\t\"encoding/hex\"\n+\t\"fmt\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistence/postgres/common\"\n+\thexUtils \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"log\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBetweenConsensus         string = \"consensus_ns >= ? AND consensus_ns <= ?\"\n+\twhereTimestampsInConsensusTimestamp string = \"consensus_timestamp IN (%s)\"", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODgyNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502038826", "bodyText": "Will these changes be ported to the sdk?", "author": "steven-sheehy", "createdAt": "2020-10-08T22:05:36Z", "path": "hedera-mirror-rosetta/go.mod", "diffHunk": "@@ -0,0 +1,21 @@\n+module github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta\n+\n+go 1.13\n+\n+require (\n+\tgithub.com/caarlos0/env/v6 v6.3.0\n+\tgithub.com/coinbase/rosetta-cli v0.5.7 // indirect\n+\tgithub.com/coinbase/rosetta-sdk-go v0.4.9\n+\tgithub.com/hashgraph/hedera-sdk-go v0.9.1\n+\tgithub.com/jinzhu/gorm v1.9.16\n+\tgithub.com/lib/pq v1.8.0 // indirect\n+\tgithub.com/sqs/goreturns v0.0.0-20181028201513-538ac6014518 // indirect\n+\tgolang.org/x/crypto v0.0.0-20201002094018-c90954cbb977 // indirect\n+\tgolang.org/x/net v0.0.0-20200930145003-4acb6c075d10 // indirect\n+\tgolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f // indirect\n+\tgoogle.golang.org/genproto v0.0.0-20201001141541-efaab9d3c4f7 // indirect\n+\tgoogle.golang.org/grpc v1.32.0 // indirect\n+\tgopkg.in/yaml.v2 v2.3.0\n+)\n+\n+replace github.com/hashgraph/hedera-sdk-go v0.9.1 => github.com/limechain/hedera-sdk-go v0.9.2-0.20200825132925-ccbc4019e257", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2ODIyMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502368221", "bodyText": "There's an ongoing PR, will be removed after merged.", "author": "failfmi", "createdAt": "2020-10-09T11:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDk0Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502040947", "bodyText": "Should these references to limechain git repo be changed before merge?", "author": "steven-sheehy", "createdAt": "2020-10-08T22:11:16Z", "path": "hedera-mirror-rosetta/build/Dockerfile", "diffHunk": "@@ -0,0 +1,93 @@\n+# This Dockerfile configuration is used to build\n+# Importer, Rosetta and PostgreSQL into one image\n+# and run the services using supervisord\n+\n+# ------------------------------  Rosetta  ------------------------------- #\n+FROM golang:1.13 as rosetta-builder\n+WORKDIR /tmp\n+RUN git clone https://github.com/LimeChain/hedera-mirror-node.git", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NTMxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502255319", "bodyText": "Yes, before merged to master", "author": "failfmi", "createdAt": "2020-10-09T08:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MTQ3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502041473", "bodyText": "Shouldn't hardcode versions. Can this be changed to use wildcards?", "author": "steven-sheehy", "createdAt": "2020-10-08T22:12:47Z", "path": "hedera-mirror-rosetta/build/Dockerfile", "diffHunk": "@@ -0,0 +1,93 @@\n+# This Dockerfile configuration is used to build\n+# Importer, Rosetta and PostgreSQL into one image\n+# and run the services using supervisord\n+\n+# ------------------------------  Rosetta  ------------------------------- #\n+FROM golang:1.13 as rosetta-builder\n+WORKDIR /tmp\n+RUN git clone https://github.com/LimeChain/hedera-mirror-node.git\n+WORKDIR /tmp/hedera-mirror-node/hedera-mirror-rosetta\n+RUN go build -o rosetta-executable ./cmd\n+\n+# ---------------------------- Importer/GRPC ----------------------------- #\n+FROM openjdk:11.0 as java-builder\n+\n+RUN apt-get update && apt-get install -y git\n+RUN git clone https://github.com/LimeChain/hedera-mirror-node.git\n+RUN cd hedera-mirror-node && ./mvnw clean package -DskipTests\n+\n+# ######################################################################## #\n+# --------------------------- Runner Container --------------------------- #\n+# ######################################################################## #\n+\n+FROM ubuntu:18.04 as runner\n+\n+# ---------------------- Install Deps & PosgreSQL ------------------------ #\n+# Add the PostgreSQL PGP key to verify their Debian packages.\n+# It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc\n+RUN apt-get update && apt-get install -y gnupg\n+RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n+\n+# Add PostgreSQL's repository. It contains the most recent stable release\n+#  of PostgreSQL.\n+RUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\n+\n+# Install PostgreSQL 9.6, supervisor, git and openjdk-11\n+ARG DEBIAN_FRONTEND=noninteractive\n+RUN apt-get update && apt-get install -y postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6 supervisor git openjdk-11-jdk-headless curl\n+\n+# ---------------------------- Install yq ----------------------------- #\n+RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CC86BB64\n+RUN apt-get install -y software-properties-common\n+RUN add-apt-repository ppa:rmescandon/yq\n+RUN apt update\n+RUN apt install yq -y\n+\n+USER root\n+\n+# Create Volume PostgreSQL directory and Change default PostgreSQL directory\n+RUN mkdir -p /data/db\n+RUN chown postgres /data/db\n+RUN chmod 700 /data/db\n+RUN mv /var/lib/postgresql/9.6/main /data/db/main\n+RUN ln -s /data/db/main /var/lib/postgresql/9.6/main\n+\n+# ---------------------------  Supervisord  --------------------------- #\n+\n+# Clone the Repo\n+RUN git clone https://github.com/LimeChain/hedera-mirror-node.git\n+\n+USER postgres\n+\n+# Init db script\n+RUN /etc/init.d/postgresql start &&\\\n+    createdb mirror_node &&\\\n+    psql --command \"create user mirror_node with SUPERUSER password 'mirror_node_pass'\"&&\\\n+    POSTGRES_DB=mirror_node /hedera-mirror-node/hedera-mirror-grpc/scripts/db/init.sh\n+\n+# And add ``listen_addresses`` to ``/etc/postgresql/9.6/main/postgresql.conf``\n+RUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.6/main/postgresql.conf\n+# Allow PG Admin access\n+RUN echo \"host    all             all             172.17.0.1/16           trust\" >> /etc/postgresql/9.6/main/pg_hba.conf\n+\n+USER root\n+\n+# Create Volume importer directory\n+RUN mkdir -p /data/data\n+RUN ln -s /data/data /hedera-mirror-node\n+\n+# Copy the Rosetta Executable from the Rosetta Builder stage\n+WORKDIR /var/rosetta\n+COPY --from=rosetta-builder /tmp/hedera-mirror-node/hedera-mirror-rosetta/rosetta-executable .\n+COPY --from=rosetta-builder /tmp/hedera-mirror-node/hedera-mirror-rosetta/config/application.yml ./config/application.yml\n+\n+# Copy the Importer Jar and Config from the Java-Builder stage\n+WORKDIR /var/importer\n+COPY --from=java-builder /hedera-mirror-node/hedera-mirror-importer/target/hedera-mirror-importer-0.19.0-rc1-exec.jar ./hedera-mirror-importer.jar", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0NDY3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502044670", "bodyText": "Do we need to manually map these env variables to yaml? Doesn't the go config support reading from env variable as well?", "author": "steven-sheehy", "createdAt": "2020-10-08T22:21:26Z", "path": "hedera-mirror-rosetta/build/run_supervisord.sh", "diffHunk": "@@ -0,0 +1,47 @@\n+#!/bin/bash\n+\n+function run_offline_mode() {\n+  supervisord --configuration supervisord-offline.conf\n+}\n+\n+function run_online_mode() {\n+  if [[ -n \"$HEDERA_MIRROR_IMPORTER_DOWNLOADER_ACCESS_KEY\" ]]; then\n+    yq write -i application.yml hedera.mirror.importer.downloader.accessKey $HEDERA_MIRROR_IMPORTER_DOWNLOADER_ACCESS_KEY", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwMDI5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502000297", "bodyText": "We should probably create a rosetta username for the rosetta component - mirror_rosetta.\nSo far each component has used a separate name i.e importer (mirror_node). REST (mirror_api), GRPC (mirror_grpc)", "author": "Nana-EC", "createdAt": "2020-10-08T20:42:29Z", "path": "docs/configuration.md", "diffHunk": "@@ -242,3 +242,33 @@ hedera:\n           secretKey: <secretKey>\n           bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n ```\n+\n+\n+## Rosetta API\n+\n+The Rosetta API supports loading configuration from YAML. By default, it loads a file named\n+`application.yml` in each of the search paths (see below).\n+The configuration is loaded in the following order with the latter configuration overwriting (technically recursively\n+merged into) the current configuration:\n+\n+1. `./config/application.yml`\n+2. `./application.yml`\n+3. Environment variables that start with `HEDERA_MIRROR_ROSETTA_` (e.g. `HEDERA_MIRROR_ROSETTA_API_VERSION=1.4.2`)\n+\n+The following table lists the available properties along with their default values.\n+\n+| Name                                                    | Default                 | Description                                                                                    |\n+| ------------------------------------------------------- | ----------------------- | ---------------------------------------------------------------------------------------------- |\n+| `hedera.mirror.rosetta.apiVersion`                      | 1.4.4                   | The version of the Rosetta interface the implementation adheres to                             |\n+| `hedera.mirror.rosetta.db.host`                         | 127.0.0.1               | The IP or hostname used to connect to the database                                             |\n+| `hedera.mirror.rosetta.db.name`                         | mirror_node             | The name of the database                                                                       |\n+| `hedera.mirror.rosetta.db.password`                     | mirror_node_pass        | The database password the processor uses to connect. **Should be changed from default**        |\n+| `hedera.mirror.rosetta.db.port`                         | 5432                    | The port used to connect to the database                                                       |\n+| `hedera.mirror.rosetta.db.username`                     | mirror_node             | The username the processor uses to connect to the database                                     |", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3MTU2Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502371567", "bodyText": "#984 (comment)", "author": "failfmi", "createdAt": "2020-10-09T11:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwMDI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwMjg0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502002849", "bodyText": "We recently added PREVIEWNET to the list. Should be noted in this doc so you can update it later", "author": "Nana-EC", "createdAt": "2020-10-08T20:47:04Z", "path": "docs/configuration.md", "diffHunk": "@@ -242,3 +242,33 @@ hedera:\n           secretKey: <secretKey>\n           bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n ```\n+\n+\n+## Rosetta API\n+\n+The Rosetta API supports loading configuration from YAML. By default, it loads a file named\n+`application.yml` in each of the search paths (see below).\n+The configuration is loaded in the following order with the latter configuration overwriting (technically recursively\n+merged into) the current configuration:\n+\n+1. `./config/application.yml`\n+2. `./application.yml`\n+3. Environment variables that start with `HEDERA_MIRROR_ROSETTA_` (e.g. `HEDERA_MIRROR_ROSETTA_API_VERSION=1.4.2`)\n+\n+The following table lists the available properties along with their default values.\n+\n+| Name                                                    | Default                 | Description                                                                                    |\n+| ------------------------------------------------------- | ----------------------- | ---------------------------------------------------------------------------------------------- |\n+| `hedera.mirror.rosetta.apiVersion`                      | 1.4.4                   | The version of the Rosetta interface the implementation adheres to                             |\n+| `hedera.mirror.rosetta.db.host`                         | 127.0.0.1               | The IP or hostname used to connect to the database                                             |\n+| `hedera.mirror.rosetta.db.name`                         | mirror_node             | The name of the database                                                                       |\n+| `hedera.mirror.rosetta.db.password`                     | mirror_node_pass        | The database password the processor uses to connect. **Should be changed from default**        |\n+| `hedera.mirror.rosetta.db.port`                         | 5432                    | The port used to connect to the database                                                       |\n+| `hedera.mirror.rosetta.db.username`                     | mirror_node             | The username the processor uses to connect to the database                                     |\n+| `hedera.mirror.rosetta.network`                         | DEMO                    | Which Hedera network to use. Can be either `DEMO`, `MAINNET`, `TESTNET` or `OTHER`             |", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA1NTQ5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502055493", "bodyText": "Should all the git clones now refer to the mirror node repo under hashgraph and not the one under LimeChain?", "author": "Nana-EC", "createdAt": "2020-10-08T22:51:01Z", "path": "hedera-mirror-rosetta/build/Dockerfile", "diffHunk": "@@ -0,0 +1,93 @@\n+# This Dockerfile configuration is used to build\n+# Importer, Rosetta and PostgreSQL into one image\n+# and run the services using supervisord\n+\n+# ------------------------------  Rosetta  ------------------------------- #\n+FROM golang:1.13 as rosetta-builder\n+WORKDIR /tmp\n+RUN git clone https://github.com/LimeChain/hedera-mirror-node.git", "originalCommit": "95b030dd24bd1720d25b2598281d0c642c5354e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1OTI4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502259283", "bodyText": "Yes, just before merging to hashgraph:master.", "author": "failfmi", "createdAt": "2020-10-09T08:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA1NTQ5Mw=="}], "type": "inlineReview"}, {"oid": "755843128d432c93d6edc9ec43e3a78b02a21642", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/755843128d432c93d6edc9ec43e3a78b02a21642", "message": "fix(hedera-mirror-rosetta): update peers retrieval (#131)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-09T06:53:42Z", "type": "commit"}, {"oid": "a05c6dd250f85fe7e4d72c7d311fefcb13dd1249", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a05c6dd250f85fe7e4d72c7d311fefcb13dd1249", "message": "refactor(hedera-mirror-rosetta): remove postgres, entity_id_codec ->entityid (#133)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-09T12:24:02Z", "type": "commit"}, {"oid": "6fa6780645ca2de55205fdb2143bb1312ae94c17", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6fa6780645ca2de55205fdb2143bb1312ae94c17", "message": "fix testnet validation (#134)\n\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>", "committedDate": "2020-10-09T13:04:46Z", "type": "commit"}, {"oid": "ba697b88b21824a84e96190cfb47fb417ef4dfd6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ba697b88b21824a84e96190cfb47fb417ef4dfd6", "message": "fix(hedera-mirror-rosetta): escape sql statements\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-09T14:57:42Z", "type": "commit"}, {"oid": "8edd553140f10a6b2c2e457cb17eab309b00b0b4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8edd553140f10a6b2c2e457cb17eab309b00b0b4", "message": "Fix(hedera-mirror-rosetta): escape sql where statement (#135)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-09T15:19:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5NjM1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502496352", "bodyText": "rd.prev_hash is not selected", "author": "xin-hedera", "createdAt": "2020-10-09T15:08:24Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package block\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestWithIndex - Selects row with the latest consensus_end and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n+\tselectLatestWithIndex string = `SELECT rd.file_hash,\n+                                           rd.consensus_start,\n+                                           rd.consensus_end,\n+                                           rcd_index.block_index", "originalCommit": "ba697b88b21824a84e96190cfb47fb417ef4dfd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5NzAzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502497030", "bodyText": "same as above", "author": "xin-hedera", "createdAt": "2020-10-09T15:09:14Z", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package block\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const genesisPreviousHash = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n+\n+const (\n+\t// selectLatestWithIndex - Selects row with the latest consensus_end and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n+\tselectLatestWithIndex string = `SELECT rd.file_hash,\n+                                           rd.consensus_start,\n+                                           rd.consensus_end,\n+                                           rcd_index.block_index\n+                                    FROM   (SELECT *\n+                                            FROM   record_file\n+                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n+                                                                    FROM   record_file)) AS rd,\n+                                           (SELECT COUNT(*) - 1 AS block_index\n+                                            FROM   record_file) AS rcd_index`\n+\n+\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n+\t//The information about the position is used as Block Index\n+\tselectByHashWithIndex string = `SELECT rd.file_hash,\n+                                           rd.consensus_start,\n+                                           rd.consensus_end,\n+                                           rcd.block_index", "originalCommit": "ba697b88b21824a84e96190cfb47fb417ef4dfd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMDIzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502500235", "bodyText": "potential sql injection", "author": "xin-hedera", "createdAt": "2020-10-09T15:14:15Z", "path": "hedera-mirror-rosetta/app/persistence/transaction/transaction.go", "diffHunk": "@@ -0,0 +1,255 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package transaction\n+\n+import (\n+\t\"encoding/hex\"\n+\t\"fmt\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistence/common\"\n+\thexUtils \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"log\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBetweenConsensus         string = \"consensus_ns >= ? AND consensus_ns <= ?\"\n+\twhereTimestampsInConsensusTimestamp string = \"consensus_timestamp IN (%s)\"\n+)\n+\n+type transaction struct {\n+\tConsensusNS          int64  `gorm:\"type:bigint;primary_key\"`\n+\tType                 int    `gorm:\"type:smallint\"`\n+\tResult               int    `gorm:\"type:smallint\"`\n+\tPayerAccountID       int64  `gorm:\"type:bigint\"`\n+\tValidStartNS         int64  `gorm:\"type:bigint\"`\n+\tValidDurationSeconds int64  `gorm:\"type:bigint\"`\n+\tNodeAccountID        int64  `gorm:\"type:bigint\"`\n+\tEntityID             int64  `gorm:\"type:bigint\"`\n+\tInitialBalance       int64  `gorm:\"type:bigint\"`\n+\tMaxFee               int64  `gorm:\"type:bigint\"`\n+\tChargedTxFee         int64  `gorm:\"type:bigint\"`\n+\tMemo                 []byte `gorm:\"type:bytea\"`\n+\tTransactionHash      []byte `gorm:\"type:bytea\"`\n+\tTransactionBytes     []byte `gorm:\"type:bytea\"`\n+}\n+\n+type transactionType struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tName    string `gorm:\"size:30\"`\n+}\n+\n+type transactionResult struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tResult  string `gorm:\"size:100\"`\n+}\n+\n+// TableName - Set table name of the Transactions to be `record_file`\n+func (transaction) TableName() string {\n+\treturn \"transaction\"\n+}\n+\n+// TableName - Set table name of the Transaction Types to be `t_transaction_types`\n+func (transactionType) TableName() string {\n+\treturn \"t_transaction_types\"\n+}\n+\n+// TableName - Set table name of the Transaction Results to be `t_transaction_results`\n+func (transactionResult) TableName() string {\n+\treturn \"t_transaction_results\"\n+}\n+\n+func (t *transaction) getHashString() string {\n+\treturn hexUtils.SafeAddHexPrefix(hex.EncodeToString(t.TransactionHash))\n+}\n+\n+// TransactionRepository struct that has connection to the Database\n+type TransactionRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewTransactionRepository creates an instance of a TransactionRepository struct\n+func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n+\treturn &TransactionRepository{dbClient: dbClient}\n+}\n+\n+// Types returns map of all Transaction Types\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Types() map[int]string {\n+\ttypesArray := tr.retrieveTransactionTypes()\n+\ttMap := make(map[int]string)\n+\tfor _, t := range typesArray {\n+\t\ttMap[t.ProtoID] = t.Name\n+\t}\n+\treturn tMap\n+}\n+\n+// Statuses returns map of all Transaction Results\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Statuses() map[int]string {\n+\trArray := tr.retrieveTransactionResults()\n+\trMap := make(map[int]string)\n+\tfor _, s := range rArray {\n+\t\trMap[s.ProtoID] = s.Result\n+\t}\n+\treturn rMap\n+}\n+\n+func (tr *TransactionRepository) TypesAsArray() []string {\n+\treturn maphelper.GetStringValuesFromIntStringMap(tr.Types())\n+}\n+\n+// FindBetween retrieves all Transactions between the provided start and end timestamp\n+func (tr *TransactionRepository) FindBetween(start int64, end int64) ([]*types.Transaction, *rTypes.Error) {\n+\tif start > end {\n+\t\treturn nil, errors.Errors[errors.StartMustNotBeAfterEnd]\n+\t}\n+\tvar transactions []transaction\n+\ttr.dbClient.Where(whereClauseBetweenConsensus, start, end).Find(&transactions)\n+\n+\tsameHashMap := make(map[string][]transaction)\n+\tfor _, t := range transactions {\n+\t\th := t.getHashString()\n+\t\tsameHashMap[h] = append(sameHashMap[h], t)\n+\t}\n+\tres := make([]*types.Transaction, 0, len(sameHashMap))\n+\tfor _, sameHashTransactions := range sameHashMap {\n+\t\ttransaction, err := tr.constructTransaction(sameHashTransactions)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tres = append(res, transaction)\n+\t}\n+\treturn res, nil\n+}\n+\n+// FindByHashInBlock retrieves a transaction by Hash\n+func (tr *TransactionRepository) FindByHashInBlock(hashStr string, consensusStart int64, consensusEnd int64) (*types.Transaction, *rTypes.Error) {\n+\tvar transactions []transaction\n+\ttransactionHash, err := hex.DecodeString(hexUtils.SafeRemoveHexPrefix(hashStr))\n+\tif err != nil {\n+\t\treturn nil, errors.Errors[errors.InvalidTransactionIdentifier]\n+\t}\n+\ttr.dbClient.Where(&transaction{TransactionHash: transactionHash}).Find(&transactions)\n+\ttransactions = filterTransactionsForRange(transactions, consensusStart, consensusEnd)\n+\n+\tif len(transactions) == 0 {\n+\t\treturn nil, errors.Errors[errors.TransactionNotFound]\n+\t}\n+\n+\ttransaction, err1 := tr.constructTransaction(transactions)\n+\tif err1 != nil {\n+\t\treturn nil, err1\n+\t}\n+\treturn transaction, nil\n+}\n+\n+// filterTransactionsForRange - Filters the passed transactions. If the ConnsensusNS is not in the given [consensusStart; consensusEnd] range, the transaction is removed from the list\n+func filterTransactionsForRange(transactions []transaction, consensusStart int64, consensusEnd int64) []transaction {\n+\tvar length int\n+\tfor _, t := range transactions {\n+\t\tif t.ConsensusNS < consensusStart || t.ConsensusNS > consensusEnd {\n+\t\t\tcontinue\n+\t\t}\n+\t\ttransactions[length] = t\n+\t\tlength++\n+\t}\n+\treturn transactions[:length]\n+}\n+\n+func (tr *TransactionRepository) findCryptoTransfers(timestamps []int64) []dbTypes.CryptoTransfer {\n+\tvar cryptoTransfers []dbTypes.CryptoTransfer\n+\ttimestampsStr := intsToString(timestamps)\n+\ttr.dbClient.Where(fmt.Sprintf(whereTimestampsInConsensusTimestamp, timestampsStr)).Find(&cryptoTransfers)", "originalCommit": "ba697b88b21824a84e96190cfb47fb417ef4dfd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwODE3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r502508171", "bodyText": "there is a recent change to account_balance table which replaces account_realm_num and account_num with a new column account_id which is in the encoded form", "author": "xin-hedera", "createdAt": "2020-10-09T15:26:48Z", "path": "hedera-mirror-rosetta/app/persistence/account/account.go", "diffHunk": "@@ -0,0 +1,98 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package account\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\tbalanceChangeBetween string = `SELECT\n+                                        SUM(amount::bigint) AS value,\n+                                        COUNT(consensus_timestamp) AS number_of_transfers\n+                                   FROM crypto_transfer\n+                                   WHERE consensus_timestamp > ?\n+                                        AND consensus_timestamp <= ?\n+                                        AND entity_id = ?`\n+)\n+\n+type accountBalance struct {\n+\tConsensusTimestamp int64 `gorm:\"type:bigint;primary_key\"`\n+\tBalance            int64 `gorm:\"type:bigint\"`\n+\tAccountRealmNum    int16 `gorm:\"type:smallint;primary_key\"`\n+\tAccountNum         int32 `gorm:\"type:integer;primary_key\"`\n+}\n+\n+type balanceChange struct {\n+\tValue             int64 `gorm:\"type:bigint\"`\n+\tNumberOfTransfers int64 `gorm:\"type:bigint\"`\n+}\n+\n+// TableName - Set table name of the accountBalance to be `account_balance`\n+func (accountBalance) TableName() string {\n+\treturn \"account_balance\"\n+}\n+\n+// AccountRepository struct that has connection to the Database\n+type AccountRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewAccountRepository creates an instance of a TransactionRepository struct. Populates the transaction types and statuses on init\n+func NewAccountRepository(dbClient *gorm.DB) *AccountRepository {\n+\treturn &AccountRepository{\n+\t\tdbClient: dbClient,\n+\t}\n+}\n+\n+// RetrieveBalanceAtBlock returns the balance of the account at a given block (provided by consensusEnd timestamp).\n+// balance = balanceAtLatestBalanceSnapshot + balanceChangeBetweenSnapshotAndBlock\n+func (ar *AccountRepository) RetrieveBalanceAtBlock(addressStr string, consensusEnd int64) (*types.Amount, *rTypes.Error) {\n+\tacc, err := types.AccountFromString(addressStr)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tentityID, err1 := acc.ComputeEncodedID()\n+\tif err1 != nil {\n+\t\treturn nil, errors.Errors[errors.InvalidAccount]\n+\t}\n+\n+\t// gets the most recent balance before block\n+\tab := &accountBalance{}\n+\tif ar.dbClient.\n+\t\tWhere(\"account_realm_num=? AND account_num=? AND consensus_timestamp <= ?\", int16(acc.RealmNum), int32(acc.EntityNum), consensusEnd).", "originalCommit": "8edd553140f10a6b2c2e457cb17eab309b00b0b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c030072908bb4cb58e489369b95ccf73c4f005c7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c030072908bb4cb58e489369b95ccf73c4f005c7", "message": "Merge branch 'master' of https://github.com/hashgraph/hedera-mirror-node", "committedDate": "2020-10-12T06:22:37Z", "type": "commit"}, {"oid": "ff198a804be209503c0c7cff04d25828efe9a856", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ff198a804be209503c0c7cff04d25828efe9a856", "message": "Merge branch 'master' of https://github.com/hashgraph/hedera-mirror-node\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-12T06:43:56Z", "type": "commit"}, {"oid": "85517dc3713d182eedc811c3bdd92c542e95782c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/85517dc3713d182eedc811c3bdd92c542e95782c", "message": "Merge remote-tracking branch 'origin/master'", "committedDate": "2020-10-12T06:45:06Z", "type": "commit"}, {"oid": "eec80a2ad205def99d1bacc8e6f45e756f4d4140", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/eec80a2ad205def99d1bacc8e6f45e756f4d4140", "message": "Fix(hedera-mirror-rosetta): update query regarding latest mirror node changes (#136)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-12T08:19:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDM2Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r503554363", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tNodeId             *int64 `gorm:\"type:bigint\"`\n          \n          \n            \n            \tNodeId             int64 `gorm:\"type:bigint\"`", "author": "xin-hedera", "createdAt": "2020-10-12T21:55:52Z", "path": "hedera-mirror-rosetta/app/persistence/addressbook/entry/entry.go", "diffHunk": "@@ -0,0 +1,106 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package entry\n+\n+import (\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/jinzhu/gorm\"\n+\t\"log\"\n+)\n+\n+const (\n+\tlatestAddressBookEntries = `SELECT abe.* FROM address_book_entry AS abe\n+\t\t                        JOIN address_book AS ab\n+                                ON ab.start_consensus_timestamp = abe.consensus_timestamp\n+                                WHERE ab.end_consensus_timestamp IS NULL`\n+)\n+\n+const (\n+\ttableNameAddressBookEntry = \"address_book_entry\"\n+)\n+\n+type addressBookEntry struct {\n+\tId                 int32  `gorm:\"type:integer;primary_key\"`\n+\tConsensusTimestamp int64  `gorm:\"type:bigint\"`\n+\tIp                 string `gorm:\"size:128\"`\n+\tPort               int32  `gorm:\"type:integer\"`\n+\tMemo               string `gorm:\"size:128\"`\n+\tPublicKey          string `gorm:\"size:1024\"`\n+\tNodeId             *int64 `gorm:\"type:bigint\"`", "originalCommit": "eec80a2ad205def99d1bacc8e6f45e756f4d4140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MzEzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r503563136", "bodyText": "should combine the consensus timestamp range constraint into the DB query", "author": "xin-hedera", "createdAt": "2020-10-12T22:21:36Z", "path": "hedera-mirror-rosetta/app/persistence/transaction/transaction.go", "diffHunk": "@@ -0,0 +1,254 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package transaction\n+\n+import (\n+\t\"encoding/hex\"\n+\tdbTypes \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/persistence/common\"\n+\thexUtils \"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/hex\"\n+\t\"log\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/jinzhu/gorm\"\n+)\n+\n+const (\n+\twhereClauseBetweenConsensus         string = \"consensus_ns >= ? AND consensus_ns <= ?\"\n+\twhereTimestampsInConsensusTimestamp string = \"consensus_timestamp IN (?)\"\n+)\n+\n+type transaction struct {\n+\tConsensusNS          int64  `gorm:\"type:bigint;primary_key\"`\n+\tType                 int    `gorm:\"type:smallint\"`\n+\tResult               int    `gorm:\"type:smallint\"`\n+\tPayerAccountID       int64  `gorm:\"type:bigint\"`\n+\tValidStartNS         int64  `gorm:\"type:bigint\"`\n+\tValidDurationSeconds int64  `gorm:\"type:bigint\"`\n+\tNodeAccountID        int64  `gorm:\"type:bigint\"`\n+\tEntityID             int64  `gorm:\"type:bigint\"`\n+\tInitialBalance       int64  `gorm:\"type:bigint\"`\n+\tMaxFee               int64  `gorm:\"type:bigint\"`\n+\tChargedTxFee         int64  `gorm:\"type:bigint\"`\n+\tMemo                 []byte `gorm:\"type:bytea\"`\n+\tTransactionHash      []byte `gorm:\"type:bytea\"`\n+\tTransactionBytes     []byte `gorm:\"type:bytea\"`\n+}\n+\n+type transactionType struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tName    string `gorm:\"size:30\"`\n+}\n+\n+type transactionResult struct {\n+\tProtoID int    `gorm:\"type:integer;primary_key\"`\n+\tResult  string `gorm:\"size:100\"`\n+}\n+\n+// TableName - Set table name of the Transactions to be `record_file`\n+func (transaction) TableName() string {\n+\treturn \"transaction\"\n+}\n+\n+// TableName - Set table name of the Transaction Types to be `t_transaction_types`\n+func (transactionType) TableName() string {\n+\treturn \"t_transaction_types\"\n+}\n+\n+// TableName - Set table name of the Transaction Results to be `t_transaction_results`\n+func (transactionResult) TableName() string {\n+\treturn \"t_transaction_results\"\n+}\n+\n+func (t *transaction) getHashString() string {\n+\treturn hexUtils.SafeAddHexPrefix(hex.EncodeToString(t.TransactionHash))\n+}\n+\n+// TransactionRepository struct that has connection to the Database\n+type TransactionRepository struct {\n+\tdbClient *gorm.DB\n+}\n+\n+// NewTransactionRepository creates an instance of a TransactionRepository struct\n+func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n+\treturn &TransactionRepository{dbClient: dbClient}\n+}\n+\n+// Types returns map of all Transaction Types\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Types() map[int]string {\n+\ttypesArray := tr.retrieveTransactionTypes()\n+\ttMap := make(map[int]string)\n+\tfor _, t := range typesArray {\n+\t\ttMap[t.ProtoID] = t.Name\n+\t}\n+\treturn tMap\n+}\n+\n+// Statuses returns map of all Transaction Results\n+// TODO implement cache instead of retrieving this everytime form DB\n+func (tr *TransactionRepository) Statuses() map[int]string {\n+\trArray := tr.retrieveTransactionResults()\n+\trMap := make(map[int]string)\n+\tfor _, s := range rArray {\n+\t\trMap[s.ProtoID] = s.Result\n+\t}\n+\treturn rMap\n+}\n+\n+func (tr *TransactionRepository) TypesAsArray() []string {\n+\treturn maphelper.GetStringValuesFromIntStringMap(tr.Types())\n+}\n+\n+// FindBetween retrieves all Transactions between the provided start and end timestamp\n+func (tr *TransactionRepository) FindBetween(start int64, end int64) ([]*types.Transaction, *rTypes.Error) {\n+\tif start > end {\n+\t\treturn nil, errors.Errors[errors.StartMustNotBeAfterEnd]\n+\t}\n+\tvar transactions []transaction\n+\ttr.dbClient.Where(whereClauseBetweenConsensus, start, end).Find(&transactions)\n+\n+\tsameHashMap := make(map[string][]transaction)\n+\tfor _, t := range transactions {\n+\t\th := t.getHashString()\n+\t\tsameHashMap[h] = append(sameHashMap[h], t)\n+\t}\n+\tres := make([]*types.Transaction, 0, len(sameHashMap))\n+\tfor _, sameHashTransactions := range sameHashMap {\n+\t\ttransaction, err := tr.constructTransaction(sameHashTransactions)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tres = append(res, transaction)\n+\t}\n+\treturn res, nil\n+}\n+\n+// FindByHashInBlock retrieves a transaction by Hash\n+func (tr *TransactionRepository) FindByHashInBlock(hashStr string, consensusStart int64, consensusEnd int64) (*types.Transaction, *rTypes.Error) {\n+\tvar transactions []transaction\n+\ttransactionHash, err := hex.DecodeString(hexUtils.SafeRemoveHexPrefix(hashStr))\n+\tif err != nil {\n+\t\treturn nil, errors.Errors[errors.InvalidTransactionIdentifier]\n+\t}\n+\ttr.dbClient.Where(&transaction{TransactionHash: transactionHash}).Find(&transactions)\n+\ttransactions = filterTransactionsForRange(transactions, consensusStart, consensusEnd)", "originalCommit": "eec80a2ad205def99d1bacc8e6f45e756f4d4140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2NjIyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/984#discussion_r503566228", "bodyText": "nit: setting startDate for 'DEMO' network is no longer needed, PR #1091 now sets startDate to EPOCH", "author": "xin-hedera", "createdAt": "2020-10-12T22:31:25Z", "path": ".github/workflows/rosetta-validation.yml", "diffHunk": "@@ -0,0 +1,25 @@\n+name: Rosetta Validation\n+\n+on:\n+  - pull_request\n+\n+jobs:\n+  validate:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    - name: Override Mirror Node Importer StartDate\n+      uses: mikefarah/yq@3.4.0\n+      with:\n+        cmd: yq write -i application.yml hedera.mirror.importer.startDate 2019-10-11T00:00:00.000000Z", "originalCommit": "eec80a2ad205def99d1bacc8e6f45e756f4d4140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b6f0ceb7a1f145dfd80a194b6091edab964243cd", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b6f0ceb7a1f145dfd80a194b6091edab964243cd", "message": "fix(hedera-mirror-rosetta): filters and pointers (#139)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-13T07:24:22Z", "type": "commit"}, {"oid": "361877957292bf41774dd95f05bd9cf375a1ec77", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/361877957292bf41774dd95f05bd9cf375a1ec77", "message": "fix(hedera-mirror-rosetta) - (all-in-one dockerfile): remove yq, disable redis (#145)\n\nSigned-off-by: failfmi <oscurocalma@gmail.com>", "committedDate": "2020-10-13T11:07:14Z", "type": "commit"}]}