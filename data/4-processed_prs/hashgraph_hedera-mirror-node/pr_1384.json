{"pr_number": 1384, "pr_title": "Refactor signature file reader", "pr_createdAt": "2020-12-22T01:03:19Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384", "timeline": [{"oid": "53308ded26580081269ee34506e4695d5173c975", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/53308ded26580081269ee34506e4695d5173c975", "message": "Refactor to make nodeVerifier a bean, and add first draft of SignatureFileReader\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-21T22:36:08Z", "type": "commit"}, {"oid": "6087fa9a07591ca1312a0d38cb7310367a02c257", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6087fa9a07591ca1312a0d38cb7310367a02c257", "message": "Fix issues with the signature file reader\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T00:57:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NjI0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547466244", "bodyText": "Mark CompositeSignatureFileReader as @Primary and then can just inject SignatureFileReader here.", "author": "steven-sheehy", "createdAt": "2020-12-22T19:26:58Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -23,36 +23,40 @@\n import com.google.common.collect.HashMultimap;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n+import java.io.BufferedInputStream;\n import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.security.PublicKey;\n import java.security.Signature;\n import java.util.Collection;\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeSet;\n import java.util.stream.Collectors;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.tuple.Pair;\n \n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.AddressBookEntry;\n import com.hedera.mirror.importer.domain.FileStreamSignature;\n import com.hedera.mirror.importer.domain.FileStreamSignature.SignatureStatus;\n import com.hedera.mirror.importer.exception.SignatureVerificationException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.reader.signature.CompositeSignatureFileReader;\n \n+@Named\n @Log4j2\n+@RequiredArgsConstructor\n public class NodeSignatureVerifier {\n \n-    private final Map<String, PublicKey> nodeAccountIDPubKeyMap;\n+    private final AddressBookService addressBookService;\n \n-    public NodeSignatureVerifier(AddressBook currentAddressBook) {\n-        nodeAccountIDPubKeyMap = currentAddressBook\n-                .getEntries()\n-                .stream()\n-                .collect(Collectors\n-                        .toMap(AddressBookEntry::getNodeAccountIdString, AddressBookEntry::getPublicKeyAsObject));\n-    }\n+    private final CompositeSignatureFileReader signatureFileReader;", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMjI2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547532265", "bodyText": "Done", "author": "ijungmann", "createdAt": "2020-12-22T22:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NjI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NjU5NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547466594", "bodyText": "Move to a @Get(lazy = true) transient field in AddressBook.", "author": "steven-sheehy", "createdAt": "2020-12-22T19:27:24Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -72,6 +76,15 @@ private static boolean canReachConsensus(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException\n      */\n     public void verify(Collection<FileStreamSignature> signatures) throws SignatureVerificationException {\n+\n+        AddressBook currentAddressBook = addressBookService.getCurrent();\n+        //TODO cache this based on the id of the address book?\n+        nodeAccountIDPubKeyMap = currentAddressBook", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MDY0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547540644", "bodyText": "Done.", "author": "ijungmann", "createdAt": "2020-12-22T22:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NjU5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzQ3NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547467474", "bodyText": "Using Pair is a code smell. The above isn't the interface in the related ticket:\npublic interface SignatureFileReader {\n  FileStreamSignature read(InputStream inputStream);\n}", "author": "steven-sheehy", "createdAt": "2020-12-22T19:29:02Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReader.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.hedera.mirror.importer.reader.signature;/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+public interface SignatureFileReader {\n+    Pair<byte[], byte[]> read(BufferedInputStream bufferedInputStream);", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyODMxNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547528316", "bodyText": "I can remove the Pair, but is FileStreamSignature the right object to return here?  The NodeSignatureVerifier is already iterating over an existing list of FileStreamSignatures before it calls this, the code would either be building a second set of FileStreamSignature that it would have to merge with the original, or it would have to pass in the FileStreamSignature it needs to add the signature and hash to.  I can create a separate class to house the two values the Pair represents and return that as to have the same structure.", "author": "ijungmann", "createdAt": "2020-12-22T22:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzOTE3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547539172", "bodyText": "I was actually thinking the SignatureFileReader.read() would be moved earlier to Downloader.downloadSigFiles().\n    InputStream inputStream = FileUtils.openQuietly(pendingDownload.getFile());\n    FileStreamSignature fileStreamSignature = signatureFileReader.read(inputStream);\n    fileStreamSignature.setFile(sigFile);\n    fileStreamSignature.setNodeAccountId(nodeAccountId);\n    sigFilesMap.put(sigFile.getName(), fileStreamSignature);\nI think sig files are pretty lightweight we can do this earlier even before reaching 1/3.", "author": "steven-sheehy", "createdAt": "2020-12-22T22:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NzIxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547567219", "bodyText": "Alright, sure, I did some refactoring to make that work.", "author": "ijungmann", "createdAt": "2020-12-23T00:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzU1Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547467553", "bodyText": "Needs some newlines", "author": "steven-sheehy", "createdAt": "2020-12-22T19:29:12Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReader.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.hedera.mirror.importer.reader.signature;/*", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MzA5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547553090", "bodyText": "Fixed, I need to mess with some IntelliJ config to make it stop doing this.", "author": "ijungmann", "createdAt": "2020-12-22T23:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzYzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547467632", "bodyText": "newlines", "author": "steven-sheehy", "createdAt": "2020-12-22T19:29:23Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/CompositeSignatureFileReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.reader.signature;/*", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MzEwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547553108", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2020-12-22T23:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2OTI3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547469277", "bodyText": "Let's remove the switch statement and parse them in the order they're supposed to show up in the file. Technically the switch would allow invalid files that had signatures and hashes in the wrong order.", "author": "steven-sheehy", "createdAt": "2020-12-22T19:33:10Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReaderV2.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.hedera.mirror.importer.reader.signature;/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.hedera.mirror.importer.util.FileDelimiter;\n+\n+@Log4j2\n+@Named\n+public class SignatureFileReaderV2 implements SignatureFileReader {\n+    @Override\n+    public Pair<byte[], byte[]> read(BufferedInputStream bufferedInputStream) {\n+        byte[] sig = null;\n+\n+        try (DataInputStream dis = new DataInputStream(bufferedInputStream)) {\n+            byte[] fileHash = new byte[48];\n+\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+\n+                switch (typeDelimiter) {", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MjM5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547552391", "bodyText": "Agreed, took a first pass at refactoring that.", "author": "ijungmann", "createdAt": "2020-12-22T23:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2OTI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3MjEwMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547472102", "bodyText": "Should be a constant for hash size", "author": "steven-sheehy", "createdAt": "2020-12-22T19:38:52Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReaderV2.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.hedera.mirror.importer.reader.signature;/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.hedera.mirror.importer.util.FileDelimiter;\n+\n+@Log4j2\n+@Named\n+public class SignatureFileReaderV2 implements SignatureFileReader {\n+    @Override\n+    public Pair<byte[], byte[]> read(BufferedInputStream bufferedInputStream) {\n+        byte[] sig = null;\n+\n+        try (DataInputStream dis = new DataInputStream(bufferedInputStream)) {\n+            byte[] fileHash = new byte[48];", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0Nzk2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547547966", "bodyText": "Done.", "author": "ijungmann", "createdAt": "2020-12-22T23:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3MjEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3MjE3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547472179", "bodyText": "These constants should be moved to this class. FileDelimiter needs to be deleted depending on who's PR gets merged first.", "author": "steven-sheehy", "createdAt": "2020-12-22T19:39:04Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReaderV2.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.hedera.mirror.importer.reader.signature;/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.hedera.mirror.importer.util.FileDelimiter;\n+\n+@Log4j2\n+@Named\n+public class SignatureFileReaderV2 implements SignatureFileReader {\n+    @Override\n+    public Pair<byte[], byte[]> read(BufferedInputStream bufferedInputStream) {\n+        byte[] sig = null;\n+\n+        try (DataInputStream dis = new DataInputStream(bufferedInputStream)) {\n+            byte[] fileHash = new byte[48];\n+\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+\n+                switch (typeDelimiter) {\n+                    case FileDelimiter.SIGNATURE_TYPE_FILE_HASH:", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NzUzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547547530", "bodyText": "Moved, will delete when PRs are synced up.", "author": "ijungmann", "createdAt": "2020-12-22T23:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3MjE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3Mzk4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547473988", "bodyText": "The first int from the file is actually a marker with the value 4 so we should be more accepting of things until then. We should probably use an if less than equal to 4 then use V2. Otherwise throw an unsupported error. There might actually be a v1 floating around somewhere as well but it should use the same format.\nShould add a comment explaining about why a value of 4 indicates v2.", "author": "steven-sheehy", "createdAt": "2020-12-22T19:43:41Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/CompositeSignatureFileReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.reader.signature;/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class CompositeSignatureFileReader implements SignatureFileReader {\n+\n+    private final SignatureFileReaderV2 signatureFileReaderV2;\n+\n+    @Override\n+    public Pair<byte[], byte[]> read(BufferedInputStream bufferedInputStream) {\n+\n+        try (DataInputStream dataInputStream =\n+                     new DataInputStream(bufferedInputStream)) {\n+            dataInputStream.mark(Integer.BYTES);\n+            int version = dataInputStream.readInt();\n+            dataInputStream.reset();\n+            switch (version) {", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTIyMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547545222", "bodyText": "I just reread the file format doc for the new format and noticed the version for the sig file (version 5) is actually in a byte instead of an int.  Just to make sure, the marker with the value 4 is also a byte, or that actually is an int?", "author": "ijungmann", "createdAt": "2020-12-22T22:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3Mzk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0OTY4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547549682", "bodyText": "That seems like an oversight. Let's bring it up with Qian.", "author": "steven-sheehy", "createdAt": "2020-12-22T23:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3Mzk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MDQzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547550438", "bodyText": "Oh, actually the current marker is a byte as well. That's why we're byte typeDelimiter = dis.readByte() in Utility.extractHashAndSigFromFile(). So no oversight.", "author": "steven-sheehy", "createdAt": "2020-12-22T23:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3Mzk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NDIxMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547474212", "bodyText": "Reader invocation should be done once at the bottom generically for all types.", "author": "steven-sheehy", "createdAt": "2020-12-22T19:44:12Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/CompositeSignatureFileReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.reader.signature;/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class CompositeSignatureFileReader implements SignatureFileReader {\n+\n+    private final SignatureFileReaderV2 signatureFileReaderV2;\n+\n+    @Override\n+    public Pair<byte[], byte[]> read(BufferedInputStream bufferedInputStream) {\n+\n+        try (DataInputStream dataInputStream =\n+                     new DataInputStream(bufferedInputStream)) {\n+            dataInputStream.mark(Integer.BYTES);\n+            int version = dataInputStream.readInt();\n+            dataInputStream.reset();\n+            switch (version) {\n+                default:\n+                    return signatureFileReaderV2.read(bufferedInputStream);", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMzk5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547533992", "bodyText": "Done.", "author": "ijungmann", "createdAt": "2020-12-22T22:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NDIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NTE2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547475160", "bodyText": "We shouldn't leak details of using BufferedInputStream to clients. Clients should pass InputStream and BufferedInputStream should be opened here. Javadocs on interface should indicate that read() will close the inputstream so try with resources by the client isn't necessary.", "author": "steven-sheehy", "createdAt": "2020-12-22T19:46:29Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/CompositeSignatureFileReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.reader.signature;/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class CompositeSignatureFileReader implements SignatureFileReader {\n+\n+    private final SignatureFileReaderV2 signatureFileReaderV2;\n+\n+    @Override\n+    public Pair<byte[], byte[]> read(BufferedInputStream bufferedInputStream) {\n+\n+        try (DataInputStream dataInputStream =", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NzAxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547477011", "bodyText": "Yeah, I have that (the BufferedInputStream part) locally and will be pushing that soon.", "author": "ijungmann", "createdAt": "2020-12-22T19:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NTczNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547475737", "bodyText": "On other PR I mentioned a Utility.openQuietly(File) that might be useful to add to not cause IOException be handled.", "author": "steven-sheehy", "createdAt": "2020-12-22T19:47:54Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -85,7 +98,14 @@ public void verify(Collection<FileStreamSignature> signatures) throws SignatureV\n         }\n \n         for (FileStreamSignature fileStreamSignature : signatures) {\n-            Pair<byte[], byte[]> hashAndSig = Utility.extractHashAndSigFromFile(fileStreamSignature.getFile());\n+//            Pair<byte[], byte[]> hashAndSig = Utility.extractHashAndSigFromFile(fileStreamSignature.getFile());\n+            Pair<byte[], byte[]> hashAndSig = null;\n+            try {\n+                hashAndSig = signatureFileReader\n+                        .read(new BufferedInputStream(new FileInputStream(fileStreamSignature.getFile())));\n+            } catch (FileNotFoundException e) {", "originalCommit": "6087fa9a07591ca1312a0d38cb7310367a02c257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMzg1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547533850", "bodyText": "Added this method, had to rework the exception handling as extractHashAndSigFromFile was swallowing every type of exception and returning null values, which doesn't work as well with the refactoring.", "author": "ijungmann", "createdAt": "2020-12-22T22:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NTczNw=="}], "type": "inlineReview"}, {"oid": "9cac0b5da5734e6e20300aa52ba2dca72fd0a62e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9cac0b5da5734e6e20300aa52ba2dca72fd0a62e", "message": "Refactoring and getting rid of logging todos\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T20:31:15Z", "type": "commit"}, {"oid": "e093f2114fac1f09d0463d1cdfaf06c016bcab45", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e093f2114fac1f09d0463d1cdfaf06c016bcab45", "message": "Refactor and PR comment\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T22:11:15Z", "type": "commit"}, {"oid": "caad439a13fd8ec150cddfd3abad722205a0ba8c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/caad439a13fd8ec150cddfd3abad722205a0ba8c", "message": "Add transient attribute to AddressBook\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T22:37:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MTQ2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547541466", "bodyText": "This should be a local variable", "author": "steven-sheehy", "createdAt": "2020-12-22T22:40:05Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -72,6 +73,11 @@ private static boolean canReachConsensus(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException\n      */\n     public void verify(Collection<FileStreamSignature> signatures) throws SignatureVerificationException {\n+\n+        AddressBook currentAddressBook = addressBookService.getCurrent();\n+        //TODO This may need to move out of an attribute and be passed around.\n+        nodeAccountIDPubKeyMap = currentAddressBook.getNodeAccountIDPubKeyMap();", "originalCommit": "caad439a13fd8ec150cddfd3abad722205a0ba8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NzI1Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547567253", "bodyText": "Moved to local variable", "author": "ijungmann", "createdAt": "2020-12-23T00:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MTQ2Ng=="}], "type": "inlineReview"}, {"oid": "7c16ed03c26e07a39db3086638110b09765f94c0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7c16ed03c26e07a39db3086638110b09765f94c0", "message": "Add new exception and clear up composite code\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T22:55:05Z", "type": "commit"}, {"oid": "b226ea61b396f6809c2e2a5280a81ed7f0eba6d9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b226ea61b396f6809c2e2a5280a81ed7f0eba6d9", "message": "Remove old method and static values\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T22:59:50Z", "type": "commit"}, {"oid": "d81a80c39beced1bb8a26f37d38de8015c79c1ec", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d81a80c39beced1bb8a26f37d38de8015c79c1ec", "message": "Make hash size constant\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T23:01:52Z", "type": "commit"}, {"oid": "1b475172147477313bff58a762021b9c6d0e6c0f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1b475172147477313bff58a762021b9c6d0e6c0f", "message": "First pass at making sig file parser v2 less forgiving\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T23:16:24Z", "type": "commit"}, {"oid": "ac669ab0b803536fd7792198e881c67d7a18fca1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ac669ab0b803536fd7792198e881c67d7a18fca1", "message": "Fix license\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-22T23:18:28Z", "type": "commit"}, {"oid": "3c9cafab04b025dd5dc53e07962f1b6a5ac66107", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3c9cafab04b025dd5dc53e07962f1b6a5ac66107", "message": "Move sig file parsing to immediately after download\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T00:12:13Z", "type": "commit"}, {"oid": "ca92a6985e432db794bffc4a46b514fbc8b5d159", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ca92a6985e432db794bffc4a46b514fbc8b5d159", "message": "Remove TODO\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T00:13:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNDQ3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547634472", "bodyText": "It seems FileStreamSignature.status of PARSED is no longer relevant and can be removed.", "author": "steven-sheehy", "createdAt": "2020-12-23T04:36:00Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -238,19 +247,25 @@ protected void downloadNextBatch() {\n                     }\n \n                     /*\n-                     * With the list of pending downloads - wait for them to complete and add them to the list\n-                     * of downloaded signature files.\n+                     * With the list of pending downloads - wait for them to complete, parse them,  and add them to\n+                     * the list of signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n                     pendingDownloads.forEach(pendingDownload -> {\n                         try {\n                             if (pendingDownload.waitForCompletion()) {\n-                                count.incrementAndGet();\n                                 File sigFile = pendingDownload.getFile();\n-                                FileStreamSignature fileStreamSignature = new FileStreamSignature();\n-                                fileStreamSignature.setFile(sigFile);\n-                                fileStreamSignature.setNodeAccountId(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                try {\n+                                    InputStream inputStream = Utility.openQuietly(sigFile);\n+                                    FileStreamSignature fileStreamSignature = signatureFileReader.read(inputStream);\n+                                    fileStreamSignature.setFile(sigFile);\n+                                    fileStreamSignature.setNodeAccountId(nodeAccountId);", "originalCommit": "ca92a6985e432db794bffc4a46b514fbc8b5d159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY5OTM0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547699341", "bodyText": "Removed.", "author": "ijungmann", "createdAt": "2020-12-23T06:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNDQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNTQ2Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547635462", "bodyText": "Should be using the constant from SignatureFileReaderV2", "author": "steven-sheehy", "createdAt": "2020-12-23T04:40:13Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/CompositeSignatureFileReader.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.context.annotation.Primary;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.exception.SignatureFileParsingException;\n+\n+@Log4j2\n+@Named\n+@Primary\n+@RequiredArgsConstructor\n+public class CompositeSignatureFileReader implements SignatureFileReader {\n+\n+    private final SignatureFileReaderV2 signatureFileReaderV2;\n+\n+    @Override\n+    public FileStreamSignature read(InputStream inputStream) {\n+\n+        try (DataInputStream dataInputStream =\n+                     new DataInputStream(new BufferedInputStream(inputStream))) {\n+            dataInputStream.mark(Byte.BYTES);\n+            byte version = dataInputStream.readByte();\n+            dataInputStream.reset();\n+            SignatureFileReader fileReader;\n+            // Version 2 of the signature file begins with a byte of value 4.\n+            if (version <= 4) {", "originalCommit": "ca92a6985e432db794bffc4a46b514fbc8b5d159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMDE3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547700171", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2020-12-23T06:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNTQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNTU5OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547635598", "bodyText": "Javadocs need adjusting", "author": "steven-sheehy", "createdAt": "2020-12-23T04:41:01Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReader.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.InputStream;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+\n+public interface SignatureFileReader {\n+    /**\n+     * 1. Extract the Hash of the content of corresponding RecordStream file. This Hash is the signed Content of this\n+     * signature 2. Extract signature from the file.\n+     *\n+     * @param signatureFileData The input stream from a signature file to read\n+     * @return Pair of byte arrays, the left holding the file hash and the right the signature", "originalCommit": "ca92a6985e432db794bffc4a46b514fbc8b5d159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMTM1OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547701359", "bodyText": "Corrected.", "author": "ijungmann", "createdAt": "2020-12-23T06:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNTU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNjQyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547636428", "bodyText": "Shouldn't this throw the signature parse exception you added?\nAlso, the error message is not really accurate nor does it include the actual value. The old string seemed good enough to me: \"Unable to read signature file hash\". Would just add the actual value received.", "author": "steven-sheehy", "createdAt": "2020-12-23T04:45:11Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReaderV2.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.InputStream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.exception.SignatureFileParsingException;\n+\n+@Log4j2\n+@Named\n+public class SignatureFileReaderV2 implements SignatureFileReader {\n+\n+    private static final byte SIGNATURE_TYPE_SIGNATURE = 3; // the file content signature, should not be hashed\n+    public static final byte SIGNATURE_TYPE_FILE_HASH = 4; // next 48 bytes are SHA-384 of content of record file\n+    public static final byte HASH_SIZE = 48; // the size of the hash\n+\n+    @Override\n+    public FileStreamSignature read(InputStream inputStream) {\n+        FileStreamSignature fileStreamSignature = new FileStreamSignature();\n+\n+        try (DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream))) {\n+            byte[] fileHash = new byte[HASH_SIZE];\n+\n+            byte typeDelimiter = dis.readByte();\n+            if (typeDelimiter != SIGNATURE_TYPE_FILE_HASH) {\n+                throw new IllegalArgumentException(\"Signature file hash not in correct position\");", "originalCommit": "ca92a6985e432db794bffc4a46b514fbc8b5d159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMzAyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547703027", "bodyText": "Yeah, changed the exception to use the new one, corrected the messages and added the values to the exception messages.", "author": "ijungmann", "createdAt": "2020-12-23T06:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNjQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNjUwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547636508", "bodyText": "Should add the actual size received and use the signature parse exception", "author": "steven-sheehy", "createdAt": "2020-12-23T04:45:34Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReaderV2.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.InputStream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.exception.SignatureFileParsingException;\n+\n+@Log4j2\n+@Named\n+public class SignatureFileReaderV2 implements SignatureFileReader {\n+\n+    private static final byte SIGNATURE_TYPE_SIGNATURE = 3; // the file content signature, should not be hashed\n+    public static final byte SIGNATURE_TYPE_FILE_HASH = 4; // next 48 bytes are SHA-384 of content of record file\n+    public static final byte HASH_SIZE = 48; // the size of the hash\n+\n+    @Override\n+    public FileStreamSignature read(InputStream inputStream) {\n+        FileStreamSignature fileStreamSignature = new FileStreamSignature();\n+\n+        try (DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream))) {\n+            byte[] fileHash = new byte[HASH_SIZE];\n+\n+            byte typeDelimiter = dis.readByte();\n+            if (typeDelimiter != SIGNATURE_TYPE_FILE_HASH) {\n+                throw new IllegalArgumentException(\"Signature file hash not in correct position\");\n+            }\n+            int length = dis.read(fileHash);\n+            if (length != fileHash.length) {\n+                throw new IllegalArgumentException(\"Unable to read signature file hash\");", "originalCommit": "ca92a6985e432db794bffc4a46b514fbc8b5d159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMzYwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547703607", "bodyText": "Done.", "author": "ijungmann", "createdAt": "2020-12-23T06:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNjUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNzMyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547637320", "bodyText": "Shouldn't reuse variables", "author": "steven-sheehy", "createdAt": "2020-12-23T04:49:02Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReaderV2.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.InputStream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.exception.SignatureFileParsingException;\n+\n+@Log4j2\n+@Named\n+public class SignatureFileReaderV2 implements SignatureFileReader {\n+\n+    private static final byte SIGNATURE_TYPE_SIGNATURE = 3; // the file content signature, should not be hashed\n+    public static final byte SIGNATURE_TYPE_FILE_HASH = 4; // next 48 bytes are SHA-384 of content of record file\n+    public static final byte HASH_SIZE = 48; // the size of the hash\n+\n+    @Override\n+    public FileStreamSignature read(InputStream inputStream) {\n+        FileStreamSignature fileStreamSignature = new FileStreamSignature();\n+\n+        try (DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream))) {\n+            byte[] fileHash = new byte[HASH_SIZE];\n+\n+            byte typeDelimiter = dis.readByte();\n+            if (typeDelimiter != SIGNATURE_TYPE_FILE_HASH) {\n+                throw new IllegalArgumentException(\"Signature file hash not in correct position\");\n+            }\n+            int length = dis.read(fileHash);\n+            if (length != fileHash.length) {\n+                throw new IllegalArgumentException(\"Unable to read signature file hash\");\n+            }\n+            fileStreamSignature.setHash(fileHash);\n+\n+            typeDelimiter = dis.readByte();", "originalCommit": "ca92a6985e432db794bffc4a46b514fbc8b5d159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwNDIxMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547704210", "bodyText": "Made new variables and renamed the existing ones to be more clear.", "author": "ijungmann", "createdAt": "2020-12-23T06:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNzMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNzkwMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547637902", "bodyText": "Why are we wrapping the exceptions we throw? We should throw SignatureFileParsingException everywhere and probably only catch IOException and rethrow here.", "author": "steven-sheehy", "createdAt": "2020-12-23T04:51:52Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/SignatureFileReaderV2.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.InputStream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.exception.SignatureFileParsingException;\n+\n+@Log4j2\n+@Named\n+public class SignatureFileReaderV2 implements SignatureFileReader {\n+\n+    private static final byte SIGNATURE_TYPE_SIGNATURE = 3; // the file content signature, should not be hashed\n+    public static final byte SIGNATURE_TYPE_FILE_HASH = 4; // next 48 bytes are SHA-384 of content of record file\n+    public static final byte HASH_SIZE = 48; // the size of the hash\n+\n+    @Override\n+    public FileStreamSignature read(InputStream inputStream) {\n+        FileStreamSignature fileStreamSignature = new FileStreamSignature();\n+\n+        try (DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream))) {\n+            byte[] fileHash = new byte[HASH_SIZE];\n+\n+            byte typeDelimiter = dis.readByte();\n+            if (typeDelimiter != SIGNATURE_TYPE_FILE_HASH) {\n+                throw new IllegalArgumentException(\"Signature file hash not in correct position\");\n+            }\n+            int length = dis.read(fileHash);\n+            if (length != fileHash.length) {\n+                throw new IllegalArgumentException(\"Unable to read signature file hash\");\n+            }\n+            fileStreamSignature.setHash(fileHash);\n+\n+            typeDelimiter = dis.readByte();\n+            if (typeDelimiter != SIGNATURE_TYPE_SIGNATURE) {\n+                throw new IllegalArgumentException(\"Signature file signature not in correct position\");\n+            }\n+            int sigLength = dis.readInt();\n+            byte[] sigBytes = new byte[sigLength];\n+            dis.readFully(sigBytes);\n+            fileStreamSignature.setSignature(sigBytes);\n+\n+            if (dis.available() != 0) {\n+                throw new IllegalArgumentException(\"Extra data discovered in signature file\");\n+            }\n+\n+            return fileStreamSignature;\n+        } catch (Exception e) {\n+            throw new SignatureFileParsingException(\"Exception occurred reading signature file\", e);", "originalCommit": "ca92a6985e432db794bffc4a46b514fbc8b5d159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwNDQ5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r547704490", "bodyText": "Done.", "author": "ijungmann", "createdAt": "2020-12-23T06:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNzkwMg=="}], "type": "inlineReview"}, {"oid": "f4a748ddea7ebe862b9a515bfb90cabc9ea1d67e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f4a748ddea7ebe862b9a515bfb90cabc9ea1d67e", "message": "Remove FileRecordStream.PARSED\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T06:20:19Z", "type": "commit"}, {"oid": "8a8f832f69025a529904580654b1bb1d5d2968b2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8a8f832f69025a529904580654b1bb1d5d2968b2", "message": "Make CompositeFileReader use v2 constant\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T06:21:23Z", "type": "commit"}, {"oid": "9888ca42d4d21d43b1e5b72605a2fb64dc5371ca", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9888ca42d4d21d43b1e5b72605a2fb64dc5371ca", "message": "Fix JavaDocs\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T06:22:54Z", "type": "commit"}, {"oid": "9af66e76a022d6d791215511d9fbba793958b36f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9af66e76a022d6d791215511d9fbba793958b36f", "message": "PR Comments for file reader v2\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T06:23:57Z", "type": "commit"}, {"oid": "5f493f23415fc404348338b271b16507ba684809", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5f493f23415fc404348338b271b16507ba684809", "message": "Typo in v2 exception message\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T06:25:12Z", "type": "commit"}, {"oid": "d3426ec0b31285bcafff7fa23974f647838ba1b7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d3426ec0b31285bcafff7fa23974f647838ba1b7", "message": "Remove TODO\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T06:28:25Z", "type": "commit"}, {"oid": "a4763e51a5d4697daf9ba8b79ea40f6d806c6cc2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a4763e51a5d4697daf9ba8b79ea40f6d806c6cc2", "message": "Remove unused variable\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T06:30:46Z", "type": "commit"}, {"oid": "746626ea76509037c6058cf809183ae591debd8c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/746626ea76509037c6058cf809183ae591debd8c", "message": "Refactor Dowmnloader to get rid of nested tries\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-23T06:40:43Z", "type": "commit"}, {"oid": "a14bee495a2772d1d4950e57f01a247c5098b47e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a14bee495a2772d1d4950e57f01a247c5098b47e", "message": "Add tests for Composite and V2 Signature file reader\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T04:22:35Z", "type": "commit"}, {"oid": "2dd67f236e8693dbce256a6c2751b58123fbeebf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2dd67f236e8693dbce256a6c2751b58123fbeebf", "message": "Add v2 signature file for tests\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T04:23:20Z", "type": "commit"}, {"oid": "0418eb4339ecbce6c29a9c809e7fde1ac9aba0cf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0418eb4339ecbce6c29a9c809e7fde1ac9aba0cf", "message": "Rename signature file superclass to abstract\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T04:27:21Z", "type": "commit"}, {"oid": "8c49f56282ec47725559f2aa536beaf3b535a36f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8c49f56282ec47725559f2aa536beaf3b535a36f", "message": "Refactor and code smells\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T04:42:50Z", "type": "commit"}, {"oid": "790ad680e4f984a5eed8e8edf77cc2faec73e977", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/790ad680e4f984a5eed8e8edf77cc2faec73e977", "message": "Code smells\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T04:43:34Z", "type": "commit"}, {"oid": "de9c2a9fdee653722bda1d5b09e190d6ffad42bd", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/de9c2a9fdee653722bda1d5b09e190d6ffad42bd", "message": "Code smells\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T04:44:09Z", "type": "commit"}, {"oid": "9293ccd3ee6fb23f8d14a5fd05b9a03c217695f4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9293ccd3ee6fb23f8d14a5fd05b9a03c217695f4", "message": "Fix license\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T04:49:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwOTIxNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551409216", "bodyText": "Shouldn't extend ParserException as signature file reading occurs during download phase. Can just extend ImporterException and only implement constructors that are used. This will also help address a code smell.", "author": "steven-sheehy", "createdAt": "2021-01-04T16:07:06Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/exception/SignatureFileParsingException.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.hedera.mirror.importer.exception;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+public class SignatureFileParsingException extends ParserException {", "originalCommit": "9293ccd3ee6fb23f8d14a5fd05b9a03c217695f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MDA0Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551440042", "bodyText": "Changed", "author": "ijungmann", "createdAt": "2021-01-04T16:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwOTIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQxMDY3OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551410678", "bodyText": "Don't have to write to a file since input can just be a ByteArrayInputStream.", "author": "steven-sheehy", "createdAt": "2021-01-04T16:09:37Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/reader/signature/SignatureFileReaderV2Test.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.common.primitives.Bytes;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import javax.annotation.Resource;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.exception.SignatureFileParsingException;\n+\n+class SignatureFileReaderV2Test extends AbstractSignatureFileReaderTest {\n+\n+    @Value(\"classpath:data/signature/v2/2019-08-30T18_10_00.419072Z.rcd_sig\")\n+    private File signatureFile;\n+\n+    @Resource\n+    SignatureFileReaderV2 fileReaderV2;\n+\n+    @Test\n+    void testReadValidFile() throws IOException {\n+        try (InputStream stream = getInputStream(signatureFile)) {\n+            FileStreamSignature answer = fileReaderV2.read(stream);\n+            assertNotNull(answer);\n+            assertNotNull(answer.getSignature());\n+            assertNotNull(answer.getHash());\n+        }\n+    }\n+\n+    @Test\n+    void testReadBlankFile() throws IOException {\n+        try (InputStream stream = getInputStream(createTempFile())) {\n+            SignatureFileParsingException exception = assertThrows(SignatureFileParsingException.class, () -> {\n+                fileReaderV2.read(stream);\n+            });\n+            assertTrue(exception.getCause() instanceof IOException);\n+        }\n+    }\n+\n+    @Test\n+    void testReadFileWithExtraData() throws IOException {\n+        File testFile = createTempFile();\n+        byte[] bytes = FileUtils.readFileToByteArray(signatureFile);\n+        byte[] extraBytes = \"extra\".getBytes();\n+        byte[] newFileBytes = Bytes.concat(bytes, extraBytes);\n+        FileUtils.writeByteArrayToFile(testFile, newFileBytes);\n+        try (InputStream stream = getInputStream(testFile)) {\n+            SignatureFileParsingException exception = assertThrows(SignatureFileParsingException.class, () -> {\n+                fileReaderV2.read(stream);\n+            });\n+            assertTrue(exception.getMessage().contains(\"Extra data discovered in signature file\"));\n+        }\n+    }\n+\n+    @Test\n+    void testReadFileHashWrongDelimiter() throws IOException {\n+        File testFile = createTempFile();\n+        byte[] bytes = FileUtils.readFileToByteArray(signatureFile);\n+        byte[] invalidDelimiter = {1};\n+        byte[] newFileBytes = Bytes.concat(invalidDelimiter, bytes);\n+        FileUtils.writeByteArrayToFile(testFile, newFileBytes);\n+        try (InputStream stream = getInputStream(testFile)) {\n+            SignatureFileParsingException exception = assertThrows(SignatureFileParsingException.class, () -> {\n+                fileReaderV2.read(stream);\n+            });\n+            assertTrue(exception.getMessage()\n+                    .contains(\"Unable to read signature file hash: type delimiter \" + invalidDelimiter[0]));\n+        }\n+    }\n+\n+    @Test\n+    void testReadFileHashTooShort() throws IOException {\n+        File testFile = createTempFile();\n+        byte[] bytes = FileUtils.readFileToByteArray(signatureFile);\n+        //Creating a file with only the first 47 bytes of the original (one less than the expected hash length)\n+        byte[] shortenedBytes = Arrays.copyOfRange(bytes, 0, 48);\n+        FileUtils.writeByteArrayToFile(testFile, shortenedBytes);\n+        try (InputStream stream = getInputStream(testFile)) {\n+            SignatureFileParsingException exception = assertThrows(SignatureFileParsingException.class, () -> {\n+                fileReaderV2.read(stream);\n+            });\n+            assertTrue(exception.getMessage()\n+                    .contains(\"Unable to read signature file hash: hash length 47\"));\n+        }\n+    }\n+\n+    @Test\n+    void testReadFileSignatureWrongDelimiter() throws IOException {\n+        File testFile = createTempFile();\n+        byte[] bytes = FileUtils.readFileToByteArray(signatureFile);\n+        byte[] invalidDelimiter = {1};\n+        byte[] hashBytes = Arrays.copyOfRange(bytes, 0, 49);\n+        byte[] signatureBytes = Arrays.copyOfRange(bytes, 50, bytes.length);\n+\n+        byte[] newFileBytes = Bytes.concat(hashBytes, invalidDelimiter, signatureBytes);\n+        FileUtils.writeByteArrayToFile(testFile, newFileBytes);", "originalCommit": "9293ccd3ee6fb23f8d14a5fd05b9a03c217695f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MDU2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551440560", "bodyText": "Good call, removed file logic from all tests (except the valid file test)", "author": "ijungmann", "createdAt": "2021-01-04T16:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQxMDY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5OTIzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551399233", "bodyText": "nit: format", "author": "xin-hedera", "createdAt": "2021-01-04T15:50:56Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -238,19 +246,20 @@ protected void downloadNextBatch() {\n                     }\n \n                     /*\n-                     * With the list of pending downloads - wait for them to complete and add them to the list\n-                     * of downloaded signature files.\n+                     * With the list of pending downloads - wait for them to complete, parse them,  and add them to\n+                     * the list of signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n                     pendingDownloads.forEach(pendingDownload -> {\n                         try {\n                             if (pendingDownload.waitForCompletion()) {\n-                                count.incrementAndGet();\n-                                File sigFile = pendingDownload.getFile();\n-                                FileStreamSignature fileStreamSignature = new FileStreamSignature();\n-                                fileStreamSignature.setFile(sigFile);\n-                                fileStreamSignature.setNodeAccountId(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                FileStreamSignature fileStreamSignature = parseSignatureFile(nodeAccountId,\n+                                        pendingDownload\n+                                                .getFile());", "originalCommit": "9293ccd3ee6fb23f8d14a5fd05b9a03c217695f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MzY3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551443677", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2021-01-04T17:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5OTIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwMDM4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551400385", "bodyText": "nit: can just catch ImporterException", "author": "xin-hedera", "createdAt": "2021-01-04T15:52:50Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -279,6 +288,19 @@ protected void downloadNextBatch() {\n         return sigFilesMap;\n     }\n \n+    private FileStreamSignature parseSignatureFile(EntityId nodeAccountId, File sigFile) {\n+        try {\n+            InputStream inputStream = Utility.openQuietly(sigFile);\n+            FileStreamSignature fileStreamSignature = signatureFileReader.read(inputStream);\n+            fileStreamSignature.setFile(sigFile);\n+            fileStreamSignature.setNodeAccountId(nodeAccountId);\n+            return fileStreamSignature;\n+        } catch (SignatureFileParsingException | FileOperationException ex) {", "originalCommit": "9293ccd3ee6fb23f8d14a5fd05b9a03c217695f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MzcxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551443714", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2021-01-04T17:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwMDM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwNjQ1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551406450", "bodyText": "format", "author": "xin-hedera", "createdAt": "2021-01-04T16:02:24Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/CompositeSignatureFileReader.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.context.annotation.Primary;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.exception.SignatureFileParsingException;\n+\n+@Log4j2\n+@Named\n+@Primary\n+@RequiredArgsConstructor\n+public class CompositeSignatureFileReader implements SignatureFileReader {\n+\n+    private final SignatureFileReaderV2 signatureFileReaderV2;\n+\n+    @Override\n+    public FileStreamSignature read(InputStream inputStream) {\n+\n+        try (DataInputStream dataInputStream =\n+                     new DataInputStream(new BufferedInputStream(inputStream))) {\n+            dataInputStream.mark(Byte.BYTES);\n+            byte version = dataInputStream.readByte();\n+            dataInputStream.reset();\n+            SignatureFileReader fileReader;\n+            // Version 2 of the signature file begins with a byte of value 4.\n+            if (version <= SignatureFileReaderV2.SIGNATURE_TYPE_FILE_HASH) {\n+                fileReader = signatureFileReaderV2;\n+            } else {\n+                throw new SignatureFileParsingException(\"Unsupported signature file version: \" + version);\n+            }\n+            return fileReader.read(dataInputStream);\n+        } catch (\n+                IOException ex) {", "originalCommit": "9293ccd3ee6fb23f8d14a5fd05b9a03c217695f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0Mzc2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551443765", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2021-01-04T17:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwNjQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwNjY2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551406660", "bodyText": "format, can fit in one line", "author": "xin-hedera", "createdAt": "2021-01-04T16:02:47Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/signature/CompositeSignatureFileReader.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.context.annotation.Primary;\n+\n+import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.exception.SignatureFileParsingException;\n+\n+@Log4j2\n+@Named\n+@Primary\n+@RequiredArgsConstructor\n+public class CompositeSignatureFileReader implements SignatureFileReader {\n+\n+    private final SignatureFileReaderV2 signatureFileReaderV2;\n+\n+    @Override\n+    public FileStreamSignature read(InputStream inputStream) {\n+\n+        try (DataInputStream dataInputStream =\n+                     new DataInputStream(new BufferedInputStream(inputStream))) {", "originalCommit": "9293ccd3ee6fb23f8d14a5fd05b9a03c217695f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MzgwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551443808", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2021-01-04T17:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwNjY2MA=="}], "type": "inlineReview"}, {"oid": "7d38217251d4ce728961c32e44a26f81f40d9110", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7d38217251d4ce728961c32e44a26f81f40d9110", "message": "PR comment fixes\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T16:54:29Z", "type": "commit"}, {"oid": "bca3d884770cfbed0bcc45e08b8d362745c640c9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bca3d884770cfbed0bcc45e08b8d362745c640c9", "message": "PR Comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T17:00:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODEyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551468128", "bodyText": "nit: You don't need to buffer an in memory byte[]. :)", "author": "steven-sheehy", "createdAt": "2021-01-04T17:46:36Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/reader/signature/AbstractSignatureFileReaderTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hedera.mirror.importer.reader.signature;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.InputStream;\n+\n+import com.hedera.mirror.importer.IntegrationTest;\n+\n+abstract class AbstractSignatureFileReaderTest extends IntegrationTest {\n+\n+    protected InputStream getInputStream(File file) throws FileNotFoundException {\n+        return new BufferedInputStream(new FileInputStream(file));\n+    }\n+\n+    protected InputStream getInputStream(byte[] bytes) {\n+        return new BufferedInputStream(new ByteArrayInputStream(bytes));", "originalCommit": "bca3d884770cfbed0bcc45e08b8d362745c640c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0OTY2Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1384#discussion_r551549662", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2021-01-04T20:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODEyOA=="}], "type": "inlineReview"}, {"oid": "8e8d112422c8bc19ec75f4f597e1c0461270022a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8e8d112422c8bc19ec75f4f597e1c0461270022a", "message": "Fix buffer stream around byte array stream\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2021-01-04T20:25:52Z", "type": "commit"}]}