{"pr_number": 214, "pr_title": "fix: KarafGenerator update", "pr_createdAt": "2020-05-28T17:59:21Z", "pr_url": "https://github.com/eclipse/jkube/pull/214", "timeline": [{"oid": "32b4d63b07ac4f097b2628081692753c84d1e846", "url": "https://github.com/eclipse/jkube/commit/32b4d63b07ac4f097b2628081692753c84d1e846", "message": "fix: KarafGenerator update\n\n- Created Karaf Quickstart\n- Fixed problems with FileSet assembly config to include complete directories\n- Upgraded images to use quay.io/jkube/jkube-karaf-binary-s2i\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-05-28T18:00:05Z", "type": "forcePushed"}, {"oid": "3658bef654971edabf49d7d42df6e9fb60502655", "url": "https://github.com/eclipse/jkube/commit/3658bef654971edabf49d7d42df6e9fb60502655", "message": "fix: KarafGenerator update\n\n- Created Karaf Quickstart\n- Fixed problems with FileSet assembly config to include complete directories\n- Upgraded images to use quay.io/jkube/jkube-karaf-binary-s2i\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-05-28T18:06:06Z", "type": "forcePushed"}, {"oid": "06c1531d28e8429506ac6b1a9935704bbf90fb03", "url": "https://github.com/eclipse/jkube/commit/06c1531d28e8429506ac6b1a9935704bbf90fb03", "message": "fix: KarafGenerator update\n\n- Created Karaf Quickstart\n- Fixed problems with FileSet assembly config to include complete directories\n- Upgraded images to use quay.io/jkube/jkube-karaf-binary-s2i\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-05-29T10:35:59Z", "type": "forcePushed"}, {"oid": "c841b46b4138adfa9011722e93000e6d67ae9b16", "url": "https://github.com/eclipse/jkube/commit/c841b46b4138adfa9011722e93000e6d67ae9b16", "message": "fix: KarafGenerator update\n\n- Created Karaf Quickstart\n- Fixed problems with FileSet assembly config to include complete directories\n- Upgraded images to use quay.io/jkube/jkube-karaf-binary-s2i\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-05-29T11:56:35Z", "type": "forcePushed"}, {"oid": "cf6a11647852922c1c0a2d611f1b290c8d65da24", "url": "https://github.com/eclipse/jkube/commit/cf6a11647852922c1c0a2d611f1b290c8d65da24", "message": "fix: KarafGenerator update\n\n- Created Karaf Quickstart\n- Fixed problems with FileSet assembly config to include complete directories\n- Upgraded images to use quay.io/jkube/jkube-karaf-binary-s2i\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-05-29T13:04:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1NjA1Mw==", "url": "https://github.com/eclipse/jkube/pull/214#discussion_r433056053", "bodyText": "outputSourceDir seems unused. Umm, maybe you forgot to assertions for it? If not, could you please remove it?", "author": "rohanKanojia", "createdAt": "2020-06-01T06:03:53Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/archive/AssemblyFileSetUtilsProcessAssemblyFileSetTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.archive;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jkube.kit.common.AssemblyConfiguration;\n+import org.eclipse.jkube.kit.common.AssemblyFileSet;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.eclipse.jkube.kit.common.archive.AssemblyFileSetUtils.resolveSourceDirectory;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContainingInAnyOrder;\n+import static org.hamcrest.Matchers.arrayWithSize;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.emptyArray;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class AssemblyFileSetUtilsProcessAssemblyFileSetTest {\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  private File baseDirectory;\n+  private File sourceDirectory;\n+  private File outputDirectory;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    baseDirectory = temp.newFolder(\"base\");\n+    sourceDirectory = new File(baseDirectory, \"source-directory\");\n+    final List<File> sourceSubdirectories = Stream.of(\"one\", \"two\", \"three\")\n+        .map(s -> new File(sourceDirectory, s)).collect(Collectors.toList());\n+    for (File directory : Stream.concat(Stream.of(baseDirectory, sourceDirectory), sourceSubdirectories.stream()).collect(Collectors.toList())) {\n+      FileUtils.forceMkdir(directory);\n+      populateSampleFiles(directory);\n+    }\n+    outputDirectory = temp.newFolder(\"output\");\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    outputDirectory = null;\n+    sourceDirectory = null;\n+    baseDirectory = null;\n+  }\n+\n+  private static void populateSampleFiles(File baseDirectory) throws IOException {\n+    for (String fileName : new String[]{\"1.txt\", \"3.other\", \"37\"}) {\n+      assertThat(new File(baseDirectory, fileName).createNewFile(), equalTo(true));\n+    }\n+  }\n+\n+  @Test\n+  public void resolveSourceDirectoryIsAbsoluteShouldReturnAbsolute() throws Exception {\n+    // Given\n+    final File directory = temp.newFolder(\"absolute-path-out-of-base\");\n+    final AssemblyFileSet afs = AssemblyFileSet.builder().directory(directory).build();\n+    // When\n+    final File result = resolveSourceDirectory(baseDirectory, afs);\n+    // Then\n+    assertThat(result, equalTo(directory));\n+    final Path relativeToBase = baseDirectory.toPath().relativize(result.toPath());\n+    assertThat(relativeToBase.toString(), startsWith(\"..\"));\n+  }\n+\n+  @Test\n+  public void resolveSourceDirectoryIsRelativeShouldReturnRelative() {\n+    // Given\n+    final File relativeDirectory = new File(\"source-directory\");\n+    final AssemblyFileSet afs = AssemblyFileSet.builder().directory(relativeDirectory).build();\n+    // When\n+    final File result = resolveSourceDirectory(baseDirectory, afs);\n+    // Then\n+    assertThat(result, equalTo(new File(baseDirectory, \"source-directory\")));\n+    final Path relativeToBase = baseDirectory.toPath().relativize(result.toPath());\n+    assertThat(relativeToBase.toString(), equalTo(\"source-directory\"));\n+  }\n+\n+  @Test\n+  public void assemblyFileSetHasNoDirectoryShouldThrowException() {\n+    // Given\n+    final AssemblyFileSet afs = AssemblyFileSet.builder().build();\n+    final AssemblyConfiguration ac = AssemblyConfiguration.builder()\n+        .name(\"deployments\")\n+        .build();\n+    // When\n+    final Exception result = Assert.assertThrows(NullPointerException.class, () ->\n+      AssemblyFileSetUtils.processAssemblyFileSet(baseDirectory, outputDirectory, afs, ac)\n+    );\n+    // Then\n+    assertThat(result.getMessage(), equalTo(\"Assembly FileSet directory is required\"));\n+  }\n+\n+  @Test\n+  public void assemblyConfigurationHasNoNameShouldThrowException() {\n+    // Given\n+    final AssemblyFileSet afs = AssemblyFileSet.builder()\n+        .directory(sourceDirectory)\n+        .build();\n+    final AssemblyConfiguration ac = AssemblyConfiguration.builder().build();\n+    // When\n+    final Exception result = Assert.assertThrows(NullPointerException.class, () ->\n+        AssemblyFileSetUtils.processAssemblyFileSet(baseDirectory, outputDirectory, afs, ac)\n+    );\n+    // Then\n+    assertThat(result.getMessage(), equalTo(\"Assembly Configuration name is required\"));\n+  }\n+\n+  /**\n+   * Has AssemblyFileSet#directory and AssemblyConfiguration#name options.\n+   *\n+   * Should copy contents of AssemblyFileSet#directory to the outputDirectory in a subdirectory named as the AssemblyConfiguration#name.\n+   */\n+  @Test\n+  public void minimumRequiredFields() throws Exception {\n+    // Given\n+    final AssemblyFileSet afs = AssemblyFileSet.builder()\n+        .directory(sourceDirectory)\n+        .build();\n+    final AssemblyConfiguration ac = AssemblyConfiguration.builder()\n+        .name(\"deployments\")\n+        .build();\n+    // When\n+    final Map<File, String> permissions = AssemblyFileSetUtils.processAssemblyFileSet(baseDirectory, outputDirectory, afs, ac);\n+    // Then\n+    assertThat(permissions.entrySet(), hasSize(4));\n+    final File deployments = new File(outputDirectory, \"deployments\");\n+    assertThat(deployments.exists(), equalTo(true));\n+    assertThat(deployments.listFiles(), arrayWithSize(1));\n+    final File outputSourceDir = Objects.requireNonNull(deployments.listFiles())[0];\n+    assertThat(outputSourceDir.getName(), equalTo(\"source-directory\"));\n+    assertThat(outputSourceDir.exists(), equalTo(true));\n+    assertThat(outputSourceDir.listFiles(), arrayWithSize(6));\n+    assertThat(outputSourceDir.list(), arrayContainingInAnyOrder(\"one\", \"two\", \"three\", \"1.txt\", \"3.other\", \"37\"));\n+  }\n+\n+  /**\n+   * Has AssemblyFileSet#directory and AssemblyConfiguration#name options.\n+   *\n+   * Source directory doesn't exist\n+   *\n+   * Should do nothing.\n+   */\n+  @Test\n+  public void sourceDoesNotExist() throws Exception {\n+    // Given\n+    final AssemblyFileSet afs = AssemblyFileSet.builder()\n+        .directory(new File(sourceDirectory, \"non-existent\"))\n+        .build();\n+    final AssemblyConfiguration ac = AssemblyConfiguration.builder()\n+        .name(\"deployments\")\n+        .build();\n+    // When\n+    final Map<File, String> permissions = AssemblyFileSetUtils.processAssemblyFileSet(baseDirectory, outputDirectory, afs, ac);\n+    // Then\n+    assertThat(permissions.entrySet(), empty());\n+    final File deployments = new File(outputDirectory, \"deployments\");\n+    assertThat(deployments.exists(), equalTo(false));\n+  }\n+\n+  /**\n+   * Has AssemblyFileSet with directory and outputDirectory relative path resolving to self.\n+   * Has AssemblyConfiguration name.\n+   *\n+   * Should copy contents of AssemblyFileSet#directory to the outputDirectory .\n+   */\n+  @Test\n+  public void fileSetDirectoryAndOutputDirectoryResolvingToSelf() throws Exception {\n+    // Given\n+    final AssemblyFileSet afs = AssemblyFileSet.builder()\n+        .directory(sourceDirectory)\n+        .outputDirectory(new File(\".\"))\n+        .build();\n+    final AssemblyConfiguration ac = AssemblyConfiguration.builder()\n+        .name(\"deployments\")\n+        .build();\n+    // When\n+    final Map<File, String> permissions = AssemblyFileSetUtils.processAssemblyFileSet(baseDirectory, outputDirectory, afs, ac);\n+    // Then\n+    assertThat(permissions.entrySet(), hasSize(4));\n+    final File deployments = new File(outputDirectory, \"deployments\");\n+    assertThat(deployments.exists(), equalTo(true));\n+    assertThat(deployments.listFiles(), arrayWithSize(6));\n+    assertThat(deployments.list(), arrayContainingInAnyOrder(\"one\", \"two\", \"three\", \"1.txt\", \"3.other\", \"37\"));\n+    final File outputSourceDir = Objects.requireNonNull(deployments.listFiles())[0];", "originalCommit": "cf6a11647852922c1c0a2d611f1b290c8d65da24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1OTY1NA==", "url": "https://github.com/eclipse/jkube/pull/214#discussion_r433059654", "bodyText": "Yep, some descriptions are wrong too. I changed the tests when I figured out some scenarios were wrongly defined.", "author": "manusa", "createdAt": "2020-06-01T06:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1NjA1Mw=="}], "type": "inlineReview"}, {"oid": "cac22c75030491a55e1577e9a4dbd9276136a9fa", "url": "https://github.com/eclipse/jkube/commit/cac22c75030491a55e1577e9a4dbd9276136a9fa", "message": "fix: KarafGenerator update\n\n- Created Karaf Quickstart\n- Fixed problems with FileSet assembly config to include complete directories\n- Upgraded images to use quay.io/jkube/jkube-karaf-binary-s2i\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-06-01T06:18:42Z", "type": "forcePushed"}, {"oid": "1a5ae1e1bf03b046fa6048c8165f0a2cd0b4af17", "url": "https://github.com/eclipse/jkube/commit/1a5ae1e1bf03b046fa6048c8165f0a2cd0b4af17", "message": "fix: KarafGenerator update\n\n- Created Karaf Quickstart\n- Fixed problems with FileSet assembly config to include complete directories\n- Upgraded images to use quay.io/jkube/jkube-karaf-binary-s2i\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-06-01T08:00:09Z", "type": "commit"}, {"oid": "1a5ae1e1bf03b046fa6048c8165f0a2cd0b4af17", "url": "https://github.com/eclipse/jkube/commit/1a5ae1e1bf03b046fa6048c8165f0a2cd0b4af17", "message": "fix: KarafGenerator update\n\n- Created Karaf Quickstart\n- Fixed problems with FileSet assembly config to include complete directories\n- Upgraded images to use quay.io/jkube/jkube-karaf-binary-s2i\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-06-01T08:00:09Z", "type": "forcePushed"}]}