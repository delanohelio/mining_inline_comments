{"pr_number": 528, "pr_title": "Update Fabric8 Kubernetes Client to v5.0.0-beta-1", "pr_createdAt": "2020-12-21T17:56:06Z", "pr_url": "https://github.com/eclipse/jkube/pull/528", "timeline": [{"oid": "244d4f9ead513fbdbc12c4863588c36b29f1427d", "url": "https://github.com/eclipse/jkube/commit/244d4f9ead513fbdbc12c4863588c36b29f1427d", "message": "Update Fabric8 Kubernetes Client to v5.0.0-alpha-3", "committedDate": "2020-12-15T06:37:04Z", "type": "commit"}, {"oid": "11c6cdf6170275c9dc5ae2a75505d339f90f07ab", "url": "https://github.com/eclipse/jkube/commit/11c6cdf6170275c9dc5ae2a75505d339f90f07ab", "message": "Update Fabric8 Kubernetes Client to v5.0.0-beta-1", "committedDate": "2020-12-21T17:54:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MzAzMw==", "url": "https://github.com/eclipse/jkube/pull/528#discussion_r547953033", "bodyText": "Can be replaced by:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String[] allJars = ClassUtil.getJavaClassPath();\n          \n          \n            \n                            for (String jar : allJars) {\n          \n          \n            \n                                URL schemaFile = ClassUtil.getFileFromJar(jar, SCHEMA_JSON);\n          \n          \n            \n                                if (schemaFile != null) {\n          \n          \n            \n                                    JsonSchema schema = getJsonSchema(schemaFile, kind);\n          \n          \n            \n                                    Set<ValidationMessage> errors = schema.validate(inputSpecNode);\n          \n          \n            \n                                    processErrors(errors, resource);\n          \n          \n            \n                                }\n          \n          \n            \n                            for (URL schemaFile : Collections.list(ResourceValidator.class.getClassLoader().getResources(SCHEMA_JSON))) {\n          \n          \n            \n                                JsonSchema schema = getJsonSchema(schemaFile, kind);\n          \n          \n            \n                                Set<ValidationMessage> errors = schema.validate(inputSpecNode);\n          \n          \n            \n                                processErrors(errors, resource);\n          \n          \n            \n                            }\n          \n      \n    \n    \n  \n\nNo need for ClassUtil changes and manually checking Jar files (they should be available to the ClassLoader).", "author": "manusa", "createdAt": "2020-12-23T13:14:51Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/validator/ResourceValidator.java", "diffHunk": "@@ -102,15 +105,17 @@ private void setupIgnoreRules(ResourceClassifier target) {\n     public int validate() throws IOException {\n         for(File resource: resources) {\n             if (resource.isFile() && resource.exists()) {\n-                try {\n-                    log.info(\"validating %s resource\", resource.toString());\n-                    JsonNode inputSpecNode = geFileContent(resource);\n-                    String kind = inputSpecNode.get(\"kind\").toString();\n-                    JsonSchema schema = getJsonSchema(prepareSchemaUrl(SCHEMA_JSON), kind);\n-                    Set<ValidationMessage> errors = schema.validate(inputSpecNode);\n-                    processErrors(errors, resource);\n-                } catch (URISyntaxException e) {\n-                    throw new IOException(e);\n+                log.info(\"validating %s resource\", resource.toString());\n+                JsonNode inputSpecNode = geFileContent(resource);\n+                String kind = inputSpecNode.get(\"kind\").toString();\n+                String[] allJars = ClassUtil.getJavaClassPath();\n+                for (String jar : allJars) {\n+                    URL schemaFile = ClassUtil.getFileFromJar(jar, SCHEMA_JSON);\n+                    if (schemaFile != null) {\n+                        JsonSchema schema = getJsonSchema(schemaFile, kind);\n+                        Set<ValidationMessage> errors = schema.validate(inputSpecNode);\n+                        processErrors(errors, resource);\n+                    }", "originalCommit": "11c6cdf6170275c9dc5ae2a75505d339f90f07ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NDI3Mg==", "url": "https://github.com/eclipse/jkube/pull/528#discussion_r547954272", "bodyText": "Can be removed if https://github.com/eclipse/jkube/pull/528/files#r547953033 is applied", "author": "manusa", "createdAt": "2020-12-23T13:17:54Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/ClassUtil.java", "diffHunk": "@@ -219,5 +225,32 @@ public static URLClassLoader createProjectClassLoader(List<String> elements, Kit\n         // if somehow we incorrectly call this method\n         return new URLClassLoader(new URL[]{});\n     }\n+\n+    public static String[] getJavaClassPath() {\n+        return System.getProperty(JAVA_CLASS_PATH).split(File.pathSeparator);\n+    }\n+\n+    public static URL getFileFromJar(String jarPath, String filePath) throws IOException {\n+        File jarFile = new File(jarPath);\n+        if (jarFile.isFile()) {\n+            try (final JarFile jar = new JarFile(jarFile)) {\n+                final Enumeration<JarEntry> entries = jar.entries(); //gives ALL entries in jar\n+                while(entries.hasMoreElements()) {\n+                    final String name = entries.nextElement().getName();\n+                    if (name.contains(filePath)) { //filter according to the path\n+                        return new URL(\"jar:file:\" + jarPath + \"!\" + appendPathSeparatorIfNotPresent(name));\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static String appendPathSeparatorIfNotPresent(String fileName) {\n+        if (!fileName.startsWith(File.separator)) {\n+            return File.separator + fileName;\n+        }\n+        return fileName;\n+    }", "originalCommit": "11c6cdf6170275c9dc5ae2a75505d339f90f07ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTcyNw==", "url": "https://github.com/eclipse/jkube/pull/528#discussion_r547955727", "bodyText": "IIRC this has a default implementation (no need to override)", "author": "manusa", "createdAt": "2020-12-23T13:21:27Z", "path": "jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/PodLogService.java", "diffHunk": "@@ -165,9 +165,13 @@ public void eventReceived(Action action, Pod pod) {\n             }\n \n             @Override\n-            public void onClose(KubernetesClientException e) {\n+            public void onClose() {\n                 // ignore\n+            }", "originalCommit": "11c6cdf6170275c9dc5ae2a75505d339f90f07ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MzU4NA==", "url": "https://github.com/eclipse/jkube/pull/528#discussion_r547973584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        client.secrets().withName(pullSecretName).edit(s -> new SecretBuilder()\n          \n          \n            \n                        client.secrets().withName(pullSecretName).edit(s -> new SecretBuilder(s)", "author": "manusa", "createdAt": "2020-12-23T14:03:34Z", "path": "jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/openshift/OpenshiftBuildService.java", "diffHunk": "@@ -455,13 +457,13 @@ private boolean checkOrCreatePullSecret(OpenShiftClient client, KubernetesListBu\n \n     private boolean updateSecret(OpenShiftClient client, String pullSecretName, Map<String, String> data) {\n         if (!Objects.equals(data, client.secrets().withName(pullSecretName).get().getData())) {\n-            client.secrets().withName(pullSecretName).edit()\n+            client.secrets().withName(pullSecretName).edit(s -> new SecretBuilder()", "originalCommit": "11c6cdf6170275c9dc5ae2a75505d339f90f07ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAwNzAwMw==", "url": "https://github.com/eclipse/jkube/pull/528#discussion_r548007003", "bodyText": "Same as #528 (review)\nPlease check if there are more of these.", "author": "manusa", "createdAt": "2020-12-23T15:15:49Z", "path": "jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/PortForwardService.java", "diffHunk": "@@ -154,9 +155,15 @@ public void eventReceived(Action action, Pod pod) {\n             }\n \n             @Override\n-            public void onClose(KubernetesClientException e) {\n+            public void onClose() {", "originalCommit": "2c578461e69cd90e83241b39d86f704d5d6489ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b52a12b5fd427985e3378083467783cf58e8d35", "url": "https://github.com/eclipse/jkube/commit/4b52a12b5fd427985e3378083467783cf58e8d35", "message": "Add getClassLoader().getResources() instead of iterating jars", "committedDate": "2020-12-23T16:06:05Z", "type": "forcePushed"}, {"oid": "88325e5c383d6a9a7256094ad7df5115e03112d2", "url": "https://github.com/eclipse/jkube/commit/88325e5c383d6a9a7256094ad7df5115e03112d2", "message": "Add getClassLoader().getResources() instead of iterating jars", "committedDate": "2020-12-23T16:28:59Z", "type": "commit"}, {"oid": "88325e5c383d6a9a7256094ad7df5115e03112d2", "url": "https://github.com/eclipse/jkube/commit/88325e5c383d6a9a7256094ad7df5115e03112d2", "message": "Add getClassLoader().getResources() instead of iterating jars", "committedDate": "2020-12-23T16:28:59Z", "type": "forcePushed"}]}