{"pr_number": 509, "pr_title": "ServiceDiscoveryEnricher from FMP", "pr_createdAt": "2020-12-02T16:10:10Z", "pr_url": "https://github.com/eclipse/jkube/pull/509", "timeline": [{"oid": "ba3d8ea1b2b302601d3730b349273876b0df1ad2", "url": "https://github.com/eclipse/jkube/commit/ba3d8ea1b2b302601d3730b349273876b0df1ad2", "message": "ServiceDiscoveryEnricher from FMP", "committedDate": "2020-12-03T14:04:50Z", "type": "forcePushed"}, {"oid": "6eeedfb0341b4a22e59f8774fa1a5e07e181fa25", "url": "https://github.com/eclipse/jkube/commit/6eeedfb0341b4a22e59f8774fa1a5e07e181fa25", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2020-12-03T14:38:10Z", "type": "forcePushed"}, {"oid": "8e945681f542441debaf94ad9ccb0756a30bad73", "url": "https://github.com/eclipse/jkube/commit/8e945681f542441debaf94ad9ccb0756a30bad73", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-12T10:14:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzkwMQ==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r555703901", "bodyText": "This is reported as a vulnerability in Sonar (https://sonarcloud.io/project/issues?id=jkubeio_jkube&open=AXbM866k_aOP8HqgEQPC&pullRequest=509&resolved=false&types=VULNERABILITY):\n\nCould you check if the following changes would still be compliant with the implementation:\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\nDocument doc = df.newDocumentBuilder().parse(camelContextXmlFile)", "author": "manusa", "createdAt": "2021-01-12T11:32:04Z", "path": "jkube-kit/enricher/specific/src/main/java/org/eclipse/jkube/kit/enricher/specific/ServiceDiscoveryEnricher.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.enricher.specific;\n+\n+import io.fabric8.kubernetes.api.builder.TypedVisitor;\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ServiceBuilder;\n+import io.fabric8.kubernetes.api.model.ServicePort;\n+import org.eclipse.jkube.kit.common.Configs;\n+import org.eclipse.jkube.kit.config.resource.PlatformMode;\n+import org.eclipse.jkube.kit.enricher.api.BaseEnricher;\n+import org.eclipse.jkube.kit.enricher.api.JKubeEnricherContext;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ServiceDiscoveryEnricher extends BaseEnricher {\n+    static final String ENRICHER_NAME = \"jkube-service-discovery\";\n+\n+    //Default Prefix\n+    static final String PREFIX = \"discovery.3scale.net\";\n+    //Service Annotations\n+    static final String DISCOVERY_VERSION = \"discovery-version\";\n+    static final String SCHEME            = \"scheme\";\n+    static final String PATH              = \"path\";\n+    static final String PORT              = \"port\";\n+    static final String DESCRIPTION_PATH  = \"description-path\";\n+\n+    private File springConfigDir;\n+    private String path             = null;\n+    private String port             = \"80\";\n+    private String scheme           = \"http\";\n+    private String descriptionPath  = null;\n+    private String discoverable     = null;\n+    private String discoveryVersion = \"v1\";\n+\n+    private enum Config implements Configs.Config {\n+        descriptionPath,\n+        discoverable,\n+        discoveryVersion,\n+        path,\n+        port,\n+        scheme,\n+        springDir;\n+    }\n+\n+    public ServiceDiscoveryEnricher(JKubeEnricherContext buildContext) {\n+        super(buildContext, ENRICHER_NAME);\n+\n+        File baseDir = getContext().getProjectDirectory();\n+        springConfigDir = new File(getConfig(Config.springDir, baseDir + \"/src/main/resources/spring\"));\n+        discoverable = getConfig(Config.discoverable, null);\n+    }\n+\n+    @Override\n+    public void create(PlatformMode platformMode, final KubernetesListBuilder listBuilder) {\n+        listBuilder.accept(new TypedVisitor<ServiceBuilder>() {\n+\n+            @Override\n+            public void visit(ServiceBuilder serviceBuilder) {\n+                addAnnotations(serviceBuilder);\n+            }\n+\n+        });\n+    }\n+\n+    protected void addAnnotations(ServiceBuilder serviceBuilder) {\n+        if (serviceBuilder.buildSpec() != null) {\n+            List<ServicePort> ports = serviceBuilder.buildSpec().getPorts();\n+            if (! ports.isEmpty()) {\n+                ServicePort firstServicePort = ports.iterator().next();\n+                port = firstServicePort.getPort().toString();\n+                log.info(\"Using first mentioned service port '%s' \" , port);\n+            } else {\n+                log.warn(\"No service port was found\");\n+            }\n+        }\n+\n+        tryCamelDSLProject();\n+\n+        if (discoverable != null) {\n+            String labelName = PREFIX;\n+            String labelValue = getConfig(Config.discoverable, discoverable);\n+            serviceBuilder.editOrNewMetadata().addToLabels(labelName, labelValue).and().buildMetadata();\n+\n+            log.info(\"Add %s label: \\\"%s\\\" : \\\"%s\\\"\", PREFIX, labelName, labelValue);\n+\n+            Map<String, String> annotations = new HashMap<>();\n+            annotations.put(PREFIX + \"/\" + DISCOVERY_VERSION, getConfig(Config.discoveryVersion, discoveryVersion));\n+            annotations.put(PREFIX + \"/\" + SCHEME, getConfig(Config.scheme, scheme));\n+\n+            String resolvedPath = getConfig(Config.path, path);\n+            if (resolvedPath != null) {\n+                if (! resolvedPath.startsWith(\"/\")) {\n+                    resolvedPath = \"/\" + resolvedPath;\n+                }\n+                annotations.put(PREFIX + \"/\" + PATH, resolvedPath);\n+            }\n+            annotations.put(PREFIX + \"/\" + PORT, getConfig(Config.port, port));\n+\n+            String resolvedDescriptionPath = getConfig(Config.descriptionPath, descriptionPath);\n+            if (resolvedDescriptionPath != null) {\n+                if (! resolvedDescriptionPath.toLowerCase().startsWith(\"http\") && ! resolvedDescriptionPath.startsWith(\"/\")) {\n+                    resolvedDescriptionPath = \"/\" + resolvedDescriptionPath;\n+                }\n+                annotations.put(PREFIX + \"/\" + DESCRIPTION_PATH , resolvedDescriptionPath);\n+            }\n+            for (String annotationName : annotations.keySet()) {\n+                log.info(\"Add %s annotation: \\\"%s\\\" : \\\"%s\\\"\", PREFIX, annotationName, annotations.get(annotationName));\n+            }\n+            serviceBuilder.editMetadata().addToAnnotations(annotations).and().buildMetadata();\n+        }\n+    }\n+\n+    public void tryCamelDSLProject(){\n+        File camelContextXmlFile = new File(springConfigDir.getAbsoluteFile() + \"/camel-context.xml\");\n+        if (camelContextXmlFile.exists()) {\n+            try {\n+                Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(camelContextXmlFile);", "originalCommit": "8e945681f542441debaf94ad9ccb0756a30bad73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc0NDc1OA==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r555744758", "bodyText": "Done.", "author": "rnetuka", "createdAt": "2021-01-12T12:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzkwMQ=="}], "type": "inlineReview"}, {"oid": "7c5bb77f9f63c8770f1adfb586cb57efd2b65dd9", "url": "https://github.com/eclipse/jkube/commit/7c5bb77f9f63c8770f1adfb586cb57efd2b65dd9", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-12T12:48:23Z", "type": "forcePushed"}, {"oid": "89bf47fcc09317a6fe599b00a61cf34ce40ff281", "url": "https://github.com/eclipse/jkube/commit/89bf47fcc09317a6fe599b00a61cf34ce40ff281", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-12T12:53:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1NjkxNw==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r555956917", "bodyText": "I think name should be in .metadata.", "author": "rohanKanojia", "createdAt": "2021-01-12T17:41:35Z", "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_service_discovery.adoc", "diffHunk": "@@ -0,0 +1,100 @@\n+\n+[[jkube-service-discovery]]\n+==== jkube-service-discovery\n+\n+This enricher can be used to add service annotations to facilitate automated discovery of\n+the service by 3scale for Camel RestDSL projects. Other project types may follow at a later time.\n+The enricher extracts the needed information from the camel-context.xml, and the restConfiguration element in particular.\n+\n+-----\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://camel.apache.org/schema/spring       http://camel.apache.org/schema/spring/camel-spring.xsd\">\n+     <camelContext xmlns=\"http://camel.apache.org/schema/spring\">\n+        <restConfiguration component=\"servlet\" scheme=\"https\"\n+              contextPath=\"myapi\" apiContextPath=\"myapi/openapi.json\"/>\n+...\n+-----\n+The enricher looks for the `scheme`, `contextPath` and `apiContextPath` attributes, and it will add the following\n+label and annotations:\n+\n+LABEL\n+    discovery.3scale.net/discoverable. The value of the label can be set to \"true\" or \"false\", and was added to take part in the selector definition executed by 3scale to find all services that need discovery. Also it can act as a switch as well, to temporary turn off 3scale discovery integration by setting it to \"false\".\n+\n+ANNOTATIONS\n+    discovery.3scale.net/discovery-version: the version of the 3scale discovery process.\n+    discovery.3scale.net/scheme: this can be \"http\" or \"https\"\n+    discovery.3scale.net/path: (optional) the contextPath of the service if it's not at the root.\n+    discovery.3scale.net/description-path: (optional) the path to the service description document (OpenAPI/Swagger). The path can either be relative or an external full URL.\n+\n+The following configuration parameters can be used to override the behavior of this enricher:\n+\n+[[enricher-jkube-service-discovery]]\n+.Fabric8 service discovery enricher\n+[cols=\"1,6,1\"]\n+|===\n+| Element | Description | Default\n+\n+| *springDir*\n+| Path to the spring configuration directory where the `camel-context.xml` file lives.\n+| `/src/main/resources/spring` which is used to recognize a Camel RestDSL project.\n+\n+| *scheme*\n+| The `scheme` part of the URL where the service is hosted.\n+| `http`\n+\n+| *path*\n+| The `path` part of the URL where the service is hosted.\n+| `/`\n+\n+| *descriptionPath*\n+| The path to a location where the service description document is hosted. This path can be either a relative path if the document is self-hosted, or a full URL if the document is hosted externally.\n+|\n+\n+| *discoveryVersion*\n+| The version of the 3scale discovery implementation.\n+| `v1`\n+\n+| *discoverable*\n+| Sets the discoverable label to either true or false. If it's set to \"false\" 3scale will not try to discover this service.\n+| `true`\n+\n+|===\n+\n+You specify the properties like for any enricher within the enrichers configuration like in\n+\n+.Example\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+-----\n+<configuration>\n+  ..\n+  <enricher>\n+    <config>\n+      <jkube-service-discovery>\n+        <scheme>https</scheme>\n+        <path>/api</path>\n+        <descriptionPath>/api/openapi.json</descriptionPath>\n+      </jkube-service-discovery>\n+    </config>\n+  </enricher>\n+</configuration>\n+-----\n+\n+Alternatively you can us a `src/main/jkube/service.yml` fragment to override the values. For example\n+-----\n+kind: Service\n+name:", "originalCommit": "89bf47fcc09317a6fe599b00a61cf34ce40ff281", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1NzU4OQ==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r555957589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Fabric8 service discovery enricher\n          \n          \n            \n            .JKube service discovery enricher", "author": "rohanKanojia", "createdAt": "2021-01-12T17:42:40Z", "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_service_discovery.adoc", "diffHunk": "@@ -0,0 +1,100 @@\n+\n+[[jkube-service-discovery]]\n+==== jkube-service-discovery\n+\n+This enricher can be used to add service annotations to facilitate automated discovery of\n+the service by 3scale for Camel RestDSL projects. Other project types may follow at a later time.\n+The enricher extracts the needed information from the camel-context.xml, and the restConfiguration element in particular.\n+\n+-----\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://camel.apache.org/schema/spring       http://camel.apache.org/schema/spring/camel-spring.xsd\">\n+     <camelContext xmlns=\"http://camel.apache.org/schema/spring\">\n+        <restConfiguration component=\"servlet\" scheme=\"https\"\n+              contextPath=\"myapi\" apiContextPath=\"myapi/openapi.json\"/>\n+...\n+-----\n+The enricher looks for the `scheme`, `contextPath` and `apiContextPath` attributes, and it will add the following\n+label and annotations:\n+\n+LABEL\n+    discovery.3scale.net/discoverable. The value of the label can be set to \"true\" or \"false\", and was added to take part in the selector definition executed by 3scale to find all services that need discovery. Also it can act as a switch as well, to temporary turn off 3scale discovery integration by setting it to \"false\".\n+\n+ANNOTATIONS\n+    discovery.3scale.net/discovery-version: the version of the 3scale discovery process.\n+    discovery.3scale.net/scheme: this can be \"http\" or \"https\"\n+    discovery.3scale.net/path: (optional) the contextPath of the service if it's not at the root.\n+    discovery.3scale.net/description-path: (optional) the path to the service description document (OpenAPI/Swagger). The path can either be relative or an external full URL.\n+\n+The following configuration parameters can be used to override the behavior of this enricher:\n+\n+[[enricher-jkube-service-discovery]]\n+.Fabric8 service discovery enricher", "originalCommit": "89bf47fcc09317a6fe599b00a61cf34ce40ff281", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4OTU1OA==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r556389558", "bodyText": "Fixed", "author": "rnetuka", "createdAt": "2021-01-13T09:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1NzU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk2MDY0NQ==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r555960645", "bodyText": "I'm sorry but I'm a little confused. Why do you have variables with the same name but one on uppercase/lowercase?", "author": "rohanKanojia", "createdAt": "2021-01-12T17:47:18Z", "path": "jkube-kit/enricher/specific/src/main/java/org/eclipse/jkube/kit/enricher/specific/ServiceDiscoveryEnricher.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.enricher.specific;\n+\n+import io.fabric8.kubernetes.api.builder.TypedVisitor;\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ServiceBuilder;\n+import io.fabric8.kubernetes.api.model.ServicePort;\n+import org.eclipse.jkube.kit.common.Configs;\n+import org.eclipse.jkube.kit.config.resource.PlatformMode;\n+import org.eclipse.jkube.kit.enricher.api.BaseEnricher;\n+import org.eclipse.jkube.kit.enricher.api.JKubeEnricherContext;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ServiceDiscoveryEnricher extends BaseEnricher {\n+    static final String ENRICHER_NAME = \"jkube-service-discovery\";\n+\n+    //Default Prefix\n+    static final String PREFIX = \"discovery.3scale.net\";\n+    //Service Annotations\n+    static final String DISCOVERY_VERSION = \"discovery-version\";\n+    static final String SCHEME            = \"scheme\";\n+    static final String PATH              = \"path\";\n+    static final String PORT              = \"port\";\n+    static final String DESCRIPTION_PATH  = \"description-path\";\n+\n+    private File springConfigDir;\n+    private String path             = null;\n+    private String port             = \"80\";\n+    private String scheme           = \"http\";\n+    private String descriptionPath  = null;\n+    private String discoverable     = null;\n+    private String discoveryVersion = \"v1\";", "originalCommit": "89bf47fcc09317a6fe599b00a61cf34ce40ff281", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4NzY2NQ==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r556387665", "bodyText": "The variables from the capture are default values. The ones in uppercase are property names (in order to avoid repetition of string literals).", "author": "rnetuka", "createdAt": "2021-01-13T09:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk2MDY0NQ=="}], "type": "inlineReview"}, {"oid": "e2d7cee051aad7a562056f111eae9608363544c1", "url": "https://github.com/eclipse/jkube/commit/e2d7cee051aad7a562056f111eae9608363544c1", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-13T09:47:23Z", "type": "forcePushed"}, {"oid": "e2d7cee051aad7a562056f111eae9608363544c1", "url": "https://github.com/eclipse/jkube/commit/e2d7cee051aad7a562056f111eae9608363544c1", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-13T09:47:23Z", "type": "commit"}]}