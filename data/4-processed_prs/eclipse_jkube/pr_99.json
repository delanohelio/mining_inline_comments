{"pr_number": 99, "pr_title": "Provide support for setting BuildConfig memory/CPU requests and limits", "pr_createdAt": "2020-03-06T09:23:58Z", "pr_url": "https://github.com/eclipse/jkube/pull/99", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMTU4NQ==", "url": "https://github.com/eclipse/jkube/pull/99#discussion_r388921585", "bodyText": "Can be stored as a static constant for the class:\nprivate static final String FILENAME_PATTERN_REGEX = \"^(?<name>.*?)(-(?<type>[^-]+))?\\\\.(?<ext>yaml|yml|json)$\";\nprivate static final Pattern FILENAME_PATTERN = Pattern.compile(FILENAME_PATTERN_REGEX)", "author": "manusa", "createdAt": "2020-03-06T14:08:37Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/KubernetesHelper.java", "diffHunk": "@@ -828,5 +834,76 @@ public static boolean removeEnvVar(List<EnvVar> envVarList, String name) {\n         }\n         return removed;\n     }\n+\n+\n+    /**\n+     * Get a specific resource fragment ending with some suffix\n+     *\n+     * @param resourceDirFinal resource directory\n+     * @param remotes list remote fragments if provided\n+     * @param resourceNameSuffix resource name suffix\n+     * @param log log object\n+     * @return file if present or null\n+     */\n+    public static File getResourceFragmentFromSource(File resourceDirFinal, List<String> remotes, String resourceNameSuffix, KitLogger log) {\n+        if (resourceDirFinal != null) {\n+            File[] resourceFiles = listResourceFragments(resourceDirFinal, remotes, log);\n+\n+            if (resourceFiles != null) {\n+                for (File file : resourceFiles) {\n+                    if (file.getName().endsWith(resourceNameSuffix)) {\n+                        return file;\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get requests or limit objects from string hashmaps\n+     *\n+     * @param quantity hashmap of strings\n+     * @return hashmap of string to quantity\n+     */\n+    public static Map<String, Quantity> getQuantityFromString(Map<String, String> quantity) {\n+        Map<String, Quantity> stringQuantityMap = new HashMap<>();\n+        if (quantity != null && !quantity.isEmpty()) {\n+            for (Map.Entry<String, String> entry : quantity.entrySet()) {\n+                stringQuantityMap.put(entry.getKey(), new Quantity(entry.getValue()));\n+            }\n+        }\n+        return stringQuantityMap;\n+    }\n+\n+    public static File[] listResourceFragments(File localResourceDir, List<String> remotes, KitLogger log) {\n+        File[] resourceFiles = listResourceFragments(localResourceDir);\n+\n+        if(remotes != null) {\n+            File[] remoteResourceFiles = listRemoteResourceFragments(remotes, log);\n+            if (remoteResourceFiles.length > 0) {\n+                resourceFiles = ArrayUtils.addAll(resourceFiles, remoteResourceFiles);\n+            }\n+        }\n+        return resourceFiles;\n+    }\n+\n+    public static File[] listResourceFragments(File resourceDir) {\n+        final Pattern filenamePattern = Pattern.compile(FILENAME_PATTERN);", "originalCommit": "08ebba836c6d8fb2deb9262b71780a02ae9a6c38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMTczMQ==", "url": "https://github.com/eclipse/jkube/pull/99#discussion_r388921731", "bodyText": "Same as FILENAME_PATTERN", "author": "manusa", "createdAt": "2020-03-06T14:08:54Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/KubernetesHelper.java", "diffHunk": "@@ -828,5 +834,76 @@ public static boolean removeEnvVar(List<EnvVar> envVarList, String name) {\n         }\n         return removed;\n     }\n+\n+\n+    /**\n+     * Get a specific resource fragment ending with some suffix\n+     *\n+     * @param resourceDirFinal resource directory\n+     * @param remotes list remote fragments if provided\n+     * @param resourceNameSuffix resource name suffix\n+     * @param log log object\n+     * @return file if present or null\n+     */\n+    public static File getResourceFragmentFromSource(File resourceDirFinal, List<String> remotes, String resourceNameSuffix, KitLogger log) {\n+        if (resourceDirFinal != null) {\n+            File[] resourceFiles = listResourceFragments(resourceDirFinal, remotes, log);\n+\n+            if (resourceFiles != null) {\n+                for (File file : resourceFiles) {\n+                    if (file.getName().endsWith(resourceNameSuffix)) {\n+                        return file;\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get requests or limit objects from string hashmaps\n+     *\n+     * @param quantity hashmap of strings\n+     * @return hashmap of string to quantity\n+     */\n+    public static Map<String, Quantity> getQuantityFromString(Map<String, String> quantity) {\n+        Map<String, Quantity> stringQuantityMap = new HashMap<>();\n+        if (quantity != null && !quantity.isEmpty()) {\n+            for (Map.Entry<String, String> entry : quantity.entrySet()) {\n+                stringQuantityMap.put(entry.getKey(), new Quantity(entry.getValue()));\n+            }\n+        }\n+        return stringQuantityMap;\n+    }\n+\n+    public static File[] listResourceFragments(File localResourceDir, List<String> remotes, KitLogger log) {\n+        File[] resourceFiles = listResourceFragments(localResourceDir);\n+\n+        if(remotes != null) {\n+            File[] remoteResourceFiles = listRemoteResourceFragments(remotes, log);\n+            if (remoteResourceFiles.length > 0) {\n+                resourceFiles = ArrayUtils.addAll(resourceFiles, remoteResourceFiles);\n+            }\n+        }\n+        return resourceFiles;\n+    }\n+\n+    public static File[] listResourceFragments(File resourceDir) {\n+        final Pattern filenamePattern = Pattern.compile(FILENAME_PATTERN);\n+        final Pattern exludePattern = Pattern.compile(PROFILES_PATTERN);", "originalCommit": "08ebba836c6d8fb2deb9262b71780a02ae9a6c38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjE5MA==", "url": "https://github.com/eclipse/jkube/pull/99#discussion_r388922190", "bodyText": "Please provide some Unit Test validating and documenting the logic", "author": "manusa", "createdAt": "2020-03-06T14:09:48Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/KubernetesHelper.java", "diffHunk": "@@ -828,5 +834,76 @@ public static boolean removeEnvVar(List<EnvVar> envVarList, String name) {\n         }\n         return removed;\n     }\n+\n+\n+    /**\n+     * Get a specific resource fragment ending with some suffix\n+     *\n+     * @param resourceDirFinal resource directory\n+     * @param remotes list remote fragments if provided\n+     * @param resourceNameSuffix resource name suffix\n+     * @param log log object\n+     * @return file if present or null\n+     */\n+    public static File getResourceFragmentFromSource(File resourceDirFinal, List<String> remotes, String resourceNameSuffix, KitLogger log) {", "originalCommit": "08ebba836c6d8fb2deb9262b71780a02ae9a6c38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjUxOA==", "url": "https://github.com/eclipse/jkube/pull/99#discussion_r388922518", "bodyText": "Should this be public?", "author": "manusa", "createdAt": "2020-03-06T14:10:26Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/KubernetesHelper.java", "diffHunk": "@@ -828,5 +834,76 @@ public static boolean removeEnvVar(List<EnvVar> envVarList, String name) {\n         }\n         return removed;\n     }\n+\n+\n+    /**\n+     * Get a specific resource fragment ending with some suffix\n+     *\n+     * @param resourceDirFinal resource directory\n+     * @param remotes list remote fragments if provided\n+     * @param resourceNameSuffix resource name suffix\n+     * @param log log object\n+     * @return file if present or null\n+     */\n+    public static File getResourceFragmentFromSource(File resourceDirFinal, List<String> remotes, String resourceNameSuffix, KitLogger log) {\n+        if (resourceDirFinal != null) {\n+            File[] resourceFiles = listResourceFragments(resourceDirFinal, remotes, log);\n+\n+            if (resourceFiles != null) {\n+                for (File file : resourceFiles) {\n+                    if (file.getName().endsWith(resourceNameSuffix)) {\n+                        return file;\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get requests or limit objects from string hashmaps\n+     *\n+     * @param quantity hashmap of strings\n+     * @return hashmap of string to quantity\n+     */\n+    public static Map<String, Quantity> getQuantityFromString(Map<String, String> quantity) {\n+        Map<String, Quantity> stringQuantityMap = new HashMap<>();\n+        if (quantity != null && !quantity.isEmpty()) {\n+            for (Map.Entry<String, String> entry : quantity.entrySet()) {\n+                stringQuantityMap.put(entry.getKey(), new Quantity(entry.getValue()));\n+            }\n+        }\n+        return stringQuantityMap;\n+    }\n+\n+    public static File[] listResourceFragments(File localResourceDir, List<String> remotes, KitLogger log) {", "originalCommit": "08ebba836c6d8fb2deb9262b71780a02ae9a6c38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjkzMQ==", "url": "https://github.com/eclipse/jkube/pull/99#discussion_r388922931", "bodyText": "Should this be public?", "author": "manusa", "createdAt": "2020-03-06T14:11:09Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/KubernetesHelper.java", "diffHunk": "@@ -828,5 +834,76 @@ public static boolean removeEnvVar(List<EnvVar> envVarList, String name) {\n         }\n         return removed;\n     }\n+\n+\n+    /**\n+     * Get a specific resource fragment ending with some suffix\n+     *\n+     * @param resourceDirFinal resource directory\n+     * @param remotes list remote fragments if provided\n+     * @param resourceNameSuffix resource name suffix\n+     * @param log log object\n+     * @return file if present or null\n+     */\n+    public static File getResourceFragmentFromSource(File resourceDirFinal, List<String> remotes, String resourceNameSuffix, KitLogger log) {\n+        if (resourceDirFinal != null) {\n+            File[] resourceFiles = listResourceFragments(resourceDirFinal, remotes, log);\n+\n+            if (resourceFiles != null) {\n+                for (File file : resourceFiles) {\n+                    if (file.getName().endsWith(resourceNameSuffix)) {\n+                        return file;\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get requests or limit objects from string hashmaps\n+     *\n+     * @param quantity hashmap of strings\n+     * @return hashmap of string to quantity\n+     */\n+    public static Map<String, Quantity> getQuantityFromString(Map<String, String> quantity) {\n+        Map<String, Quantity> stringQuantityMap = new HashMap<>();\n+        if (quantity != null && !quantity.isEmpty()) {\n+            for (Map.Entry<String, String> entry : quantity.entrySet()) {\n+                stringQuantityMap.put(entry.getKey(), new Quantity(entry.getValue()));\n+            }\n+        }\n+        return stringQuantityMap;\n+    }\n+\n+    public static File[] listResourceFragments(File localResourceDir, List<String> remotes, KitLogger log) {\n+        File[] resourceFiles = listResourceFragments(localResourceDir);\n+\n+        if(remotes != null) {\n+            File[] remoteResourceFiles = listRemoteResourceFragments(remotes, log);\n+            if (remoteResourceFiles.length > 0) {\n+                resourceFiles = ArrayUtils.addAll(resourceFiles, remoteResourceFiles);\n+            }\n+        }\n+        return resourceFiles;\n+    }\n+\n+    public static File[] listResourceFragments(File resourceDir) {", "originalCommit": "08ebba836c6d8fb2deb9262b71780a02ae9a6c38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMzE1MA==", "url": "https://github.com/eclipse/jkube/pull/99#discussion_r388923150", "bodyText": "Should this be public?", "author": "manusa", "createdAt": "2020-03-06T14:11:31Z", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/KubernetesHelper.java", "diffHunk": "@@ -828,5 +834,76 @@ public static boolean removeEnvVar(List<EnvVar> envVarList, String name) {\n         }\n         return removed;\n     }\n+\n+\n+    /**\n+     * Get a specific resource fragment ending with some suffix\n+     *\n+     * @param resourceDirFinal resource directory\n+     * @param remotes list remote fragments if provided\n+     * @param resourceNameSuffix resource name suffix\n+     * @param log log object\n+     * @return file if present or null\n+     */\n+    public static File getResourceFragmentFromSource(File resourceDirFinal, List<String> remotes, String resourceNameSuffix, KitLogger log) {\n+        if (resourceDirFinal != null) {\n+            File[] resourceFiles = listResourceFragments(resourceDirFinal, remotes, log);\n+\n+            if (resourceFiles != null) {\n+                for (File file : resourceFiles) {\n+                    if (file.getName().endsWith(resourceNameSuffix)) {\n+                        return file;\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get requests or limit objects from string hashmaps\n+     *\n+     * @param quantity hashmap of strings\n+     * @return hashmap of string to quantity\n+     */\n+    public static Map<String, Quantity> getQuantityFromString(Map<String, String> quantity) {\n+        Map<String, Quantity> stringQuantityMap = new HashMap<>();\n+        if (quantity != null && !quantity.isEmpty()) {\n+            for (Map.Entry<String, String> entry : quantity.entrySet()) {\n+                stringQuantityMap.put(entry.getKey(), new Quantity(entry.getValue()));\n+            }\n+        }\n+        return stringQuantityMap;\n+    }\n+\n+    public static File[] listResourceFragments(File localResourceDir, List<String> remotes, KitLogger log) {\n+        File[] resourceFiles = listResourceFragments(localResourceDir);\n+\n+        if(remotes != null) {\n+            File[] remoteResourceFiles = listRemoteResourceFragments(remotes, log);\n+            if (remoteResourceFiles.length > 0) {\n+                resourceFiles = ArrayUtils.addAll(resourceFiles, remoteResourceFiles);\n+            }\n+        }\n+        return resourceFiles;\n+    }\n+\n+    public static File[] listResourceFragments(File resourceDir) {\n+        final Pattern filenamePattern = Pattern.compile(FILENAME_PATTERN);\n+        final Pattern exludePattern = Pattern.compile(PROFILES_PATTERN);\n+        return resourceDir.listFiles((File dir, String name) -> filenamePattern.matcher(name).matches() && !exludePattern.matcher(name).matches());\n+    }\n+\n+    public static File[] listRemoteResourceFragments(List<String> remotes, KitLogger log) {", "originalCommit": "08ebba836c6d8fb2deb9262b71780a02ae9a6c38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6ce537c0cb69c335f3bd40880e9f4fab87a414a8", "url": "https://github.com/eclipse/jkube/commit/6ce537c0cb69c335f3bd40880e9f4fab87a414a8", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-09T06:49:21Z", "type": "forcePushed"}, {"oid": "79ccafb5a573f35a2cdf6272c13a6475e30e73c7", "url": "https://github.com/eclipse/jkube/commit/79ccafb5a573f35a2cdf6272c13a6475e30e73c7", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-09T07:04:42Z", "type": "forcePushed"}, {"oid": "e6180431115bfd9b5ba26a53a0a7ed89910c5347", "url": "https://github.com/eclipse/jkube/commit/e6180431115bfd9b5ba26a53a0a7ed89910c5347", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-09T07:08:18Z", "type": "forcePushed"}, {"oid": "8da1dc9d95a9fb11842407b8e196a326982a8fe6", "url": "https://github.com/eclipse/jkube/commit/8da1dc9d95a9fb11842407b8e196a326982a8fe6", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-09T07:29:24Z", "type": "forcePushed"}, {"oid": "67b3955ef4e70eddf5d75a49648a456fbf29e0bf", "url": "https://github.com/eclipse/jkube/commit/67b3955ef4e70eddf5d75a49648a456fbf29e0bf", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-16T08:20:25Z", "type": "forcePushed"}, {"oid": "4b46f9052daabf4439b6138a5a14758140ca90bf", "url": "https://github.com/eclipse/jkube/commit/4b46f9052daabf4439b6138a5a14758140ca90bf", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-17T17:20:28Z", "type": "forcePushed"}, {"oid": "1778d2fbd945795497e700e298b27bb17feb3a78", "url": "https://github.com/eclipse/jkube/commit/1778d2fbd945795497e700e298b27bb17feb3a78", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-26T09:53:08Z", "type": "forcePushed"}, {"oid": "50b3686492b4e30c2ec0643caaa4c3d5db6c8f16", "url": "https://github.com/eclipse/jkube/commit/50b3686492b4e30c2ec0643caaa4c3d5db6c8f16", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-26T11:58:27Z", "type": "forcePushed"}, {"oid": "f27b67cd23709cfd0b92b8133684d993d1a9a82b", "url": "https://github.com/eclipse/jkube/commit/f27b67cd23709cfd0b92b8133684d993d1a9a82b", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-26T12:37:17Z", "type": "commit"}, {"oid": "f27b67cd23709cfd0b92b8133684d993d1a9a82b", "url": "https://github.com/eclipse/jkube/commit/f27b67cd23709cfd0b92b8133684d993d1a9a82b", "message": "Provide support for setting BuildConfig memory/CPU requests and limits\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1772", "committedDate": "2020-03-26T12:37:17Z", "type": "forcePushed"}]}