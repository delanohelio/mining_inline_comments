{"pr_number": 2580, "pr_title": "[Docs] [3.2.0] Fixes #2483 (Update graphQL rate limiting pages)", "pr_createdAt": "2020-12-21T08:45:22Z", "pr_url": "https://github.com/wso2/docs-apim/pull/2580", "timeline": [{"oid": "5fc9f48436ab5827cf88c94659f67c062cd7b812", "url": "https://github.com/wso2/docs-apim/commit/5fc9f48436ab5827cf88c94659f67c062cd7b812", "message": "Update the example add-env on start guide page", "committedDate": "2020-12-21T05:57:57Z", "type": "commit"}, {"oid": "4188c25a11446113043af2bd96bd10d121193fb4", "url": "https://github.com/wso2/docs-apim/commit/4188c25a11446113043af2bd96bd10d121193fb4", "message": "Update garphQL rate limiting pages", "committedDate": "2020-12-21T08:36:39Z", "type": "commit"}, {"oid": "34ade27648e277ca5e8091f94a43f828216957f9", "url": "https://github.com/wso2/docs-apim/commit/34ade27648e277ca5e8091f94a43f828216957f9", "message": "Merge branch '3.2.0' into doc-hack-3.2.0", "committedDate": "2020-12-21T08:46:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2ODkxNg==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547068916", "bodyText": "Shall we replace,\nWithout any protection to the backend, we\u2019ll be vulnerable to DoS attacks(due to excessive load to the server, database or network)  with\n`Without any protection, backends are vulnerable to DoS attacks(which can cause excessive load on the server, database or network)", "author": "uvindra", "createdAt": "2020-12-22T05:01:05Z", "path": "en/docs/learn/rate-limiting/graphql-api/overview-query-limits-for-graphql.md", "diffHunk": "@@ -2,37 +2,35 @@\n \n GraphQL is an open-source data query & manipulation language for APIs. It provides a common interface between the client and the server for data fetching and manipulations.\n \n-With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to do complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either\n-intentionally or unintentionally. \n+With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to perform complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either intentionally or unintentionally. ", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MTU0OQ==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547091549", "bodyText": "Replace this sentence with,\nThe Static Query Analyser detects complex queries based on a predefined policy and prevents them from reaching the backend. A basic outline of such a policy is shown below.", "author": "uvindra", "createdAt": "2020-12-22T06:24:14Z", "path": "en/docs/learn/rate-limiting/graphql-api/overview-query-limits-for-graphql.md", "diffHunk": "@@ -2,37 +2,35 @@\n \n GraphQL is an open-source data query & manipulation language for APIs. It provides a common interface between the client and the server for data fetching and manipulations.\n \n-With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to do complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either\n-intentionally or unintentionally. \n+With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to perform complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either intentionally or unintentionally. \n \n Since clients have the possibility to request very complex queries, servers must be ready to handle them properly. \n **WSO2 API-Manager introduces Static Query Analyser to Secure GraphQL APIs** to address such issues.\n \n ### Static Query Analyser\n \n-Through the static query analyzer, we analyse the query and based on the previously set limitations/policy and block complex queries before it reaches the backend. Given below is the basic outline of the policies which are to be defined within the policy definition.\n+Through the static query analyzer, we analyse the query based on the previously set limitations/policy and block complex queries, before it reaches to the backend. Given below is the basic outline of the policies which, need to define within the policy definition.", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMTIyNQ==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547101225", "bodyText": "Replace this sentence with,\nThe following shows how a given policy is enforced at runtime:", "author": "uvindra", "createdAt": "2020-12-22T06:55:21Z", "path": "en/docs/learn/rate-limiting/graphql-api/overview-query-limits-for-graphql.md", "diffHunk": "@@ -2,37 +2,35 @@\n \n GraphQL is an open-source data query & manipulation language for APIs. It provides a common interface between the client and the server for data fetching and manipulations.\n \n-With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to do complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either\n-intentionally or unintentionally. \n+With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to perform complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either intentionally or unintentionally. \n \n Since clients have the possibility to request very complex queries, servers must be ready to handle them properly. \n **WSO2 API-Manager introduces Static Query Analyser to Secure GraphQL APIs** to address such issues.\n \n ### Static Query Analyser\n \n-Through the static query analyzer, we analyse the query and based on the previously set limitations/policy and block complex queries before it reaches the backend. Given below is the basic outline of the policies which are to be defined within the policy definition.\n+Through the static query analyzer, we analyse the query based on the previously set limitations/policy and block complex queries, before it reaches to the backend. Given below is the basic outline of the policies which, need to define within the policy definition.\n \n    - [Query Depth Limitation]({{base_path}}/learn/api-security/graphql-query-analysis/query-depth-limitation)\n     \n    - [Query Complexity Limitation]({{base_path}}/learn/api-security/graphql-query-analysis/query-complexity-limitation)\n \n \n-In order to implement applying query limits for GraphQL apis, two optional fields have been introduced to the Subscription Policy: **GraphQL Max Depth** and  **GraphQL Max Complexity**.\n+To implement applicable query limits for the GraphQL APIs, two optional fields were introduced to the Subscription Policy as **GraphQL Max Depth** and  **GraphQL Max Complexity**.\n \n-Through the Subscription Policy UI in the admin portal, GraphQL Max Depth value and GraphQL Max Complexity values can be set Once done, the corresponding subscription plan can be chosen via the business plans to engage these validations to an API.\n+The **GraphQL Max Depth**  and **GraphQL Max Complexity** values can be set through the Subscription Policy UI in the admin portal. Once it is done, the corresponding subscription plan can be chosen via the business plans to engage these validations to an API. \n \n Also, the policy for the custom complexity values would be as follows;\n \n    [![GraphQL Complexity Policy]({{base_path}}/assets/img/learn/graphql-complexity-policy.png)]({{base_path}}/assets/img/learn/graphql-complexity-policy.png)\n \n \n-The following model shows how to use a given policy during run time:\n+The following model shows how to use a given policy during the run time:", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMjgzMw==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547102833", "bodyText": "Replace this sentence with,\nThe below figure depicts the overall request/response flow of a GraphQL API invocation", "author": "uvindra", "createdAt": "2020-12-22T07:00:02Z", "path": "en/docs/learn/rate-limiting/graphql-api/overview-query-limits-for-graphql.md", "diffHunk": "@@ -2,37 +2,35 @@\n \n GraphQL is an open-source data query & manipulation language for APIs. It provides a common interface between the client and the server for data fetching and manipulations.\n \n-With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to do complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either\n-intentionally or unintentionally. \n+With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to perform complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either intentionally or unintentionally. \n \n Since clients have the possibility to request very complex queries, servers must be ready to handle them properly. \n **WSO2 API-Manager introduces Static Query Analyser to Secure GraphQL APIs** to address such issues.\n \n ### Static Query Analyser\n \n-Through the static query analyzer, we analyse the query and based on the previously set limitations/policy and block complex queries before it reaches the backend. Given below is the basic outline of the policies which are to be defined within the policy definition.\n+Through the static query analyzer, we analyse the query based on the previously set limitations/policy and block complex queries, before it reaches to the backend. Given below is the basic outline of the policies which, need to define within the policy definition.\n \n    - [Query Depth Limitation]({{base_path}}/learn/api-security/graphql-query-analysis/query-depth-limitation)\n     \n    - [Query Complexity Limitation]({{base_path}}/learn/api-security/graphql-query-analysis/query-complexity-limitation)\n \n \n-In order to implement applying query limits for GraphQL apis, two optional fields have been introduced to the Subscription Policy: **GraphQL Max Depth** and  **GraphQL Max Complexity**.\n+To implement applicable query limits for the GraphQL APIs, two optional fields were introduced to the Subscription Policy as **GraphQL Max Depth** and  **GraphQL Max Complexity**.\n \n-Through the Subscription Policy UI in the admin portal, GraphQL Max Depth value and GraphQL Max Complexity values can be set Once done, the corresponding subscription plan can be chosen via the business plans to engage these validations to an API.\n+The **GraphQL Max Depth**  and **GraphQL Max Complexity** values can be set through the Subscription Policy UI in the admin portal. Once it is done, the corresponding subscription plan can be chosen via the business plans to engage these validations to an API. \n \n Also, the policy for the custom complexity values would be as follows;\n \n    [![GraphQL Complexity Policy]({{base_path}}/assets/img/learn/graphql-complexity-policy.png)]({{base_path}}/assets/img/learn/graphql-complexity-policy.png)\n \n \n-The following model shows how to use a given policy during run time:\n+The following model shows how to use a given policy during the run time:\n \n   [![Model of the GraphQL Query Analysis]({{base_path}}/assets/img/learn/graphql-query-complexity-model.jpg)]({{base_path}}/assets/img/learn/graphql-query-complexity-model.jpg)\n \n \n-Figure given below depicts the overall flow of API invocation - from the request made by the client to the response \n-which is given back to the client.\n+The figure given below depicts the overall flow of API invocation, from the request made by the client to, the response which is received by the client.", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExNzkzNw==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547117937", "bodyText": "Replace this sentence with,\nTo implement applicable query limits for the GraphQL APIs, two optional fields, **GraphQL Max Depth** and  **GraphQL Max Complexity**, were introduced to Subscription Policies.", "author": "uvindra", "createdAt": "2020-12-22T07:42:06Z", "path": "en/docs/learn/rate-limiting/graphql-api/overview-query-limits-for-graphql.md", "diffHunk": "@@ -2,37 +2,35 @@\n \n GraphQL is an open-source data query & manipulation language for APIs. It provides a common interface between the client and the server for data fetching and manipulations.\n \n-With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to do complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either\n-intentionally or unintentionally. \n+With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to perform complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either intentionally or unintentionally. \n \n Since clients have the possibility to request very complex queries, servers must be ready to handle them properly. \n **WSO2 API-Manager introduces Static Query Analyser to Secure GraphQL APIs** to address such issues.\n \n ### Static Query Analyser\n \n-Through the static query analyzer, we analyse the query and based on the previously set limitations/policy and block complex queries before it reaches the backend. Given below is the basic outline of the policies which are to be defined within the policy definition.\n+Through the static query analyzer, we analyse the query based on the previously set limitations/policy and block complex queries, before it reaches to the backend. Given below is the basic outline of the policies which, need to define within the policy definition.\n \n    - [Query Depth Limitation]({{base_path}}/learn/api-security/graphql-query-analysis/query-depth-limitation)\n     \n    - [Query Complexity Limitation]({{base_path}}/learn/api-security/graphql-query-analysis/query-complexity-limitation)\n \n \n-In order to implement applying query limits for GraphQL apis, two optional fields have been introduced to the Subscription Policy: **GraphQL Max Depth** and  **GraphQL Max Complexity**.\n+To implement applicable query limits for the GraphQL APIs, two optional fields were introduced to the Subscription Policy as **GraphQL Max Depth** and  **GraphQL Max Complexity**.", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMzA2Nw==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547123067", "bodyText": "Replace this sentence with,\nThe **GraphQL Max Depth**  and **GraphQL Max Complexity** values can be set through the Subscription Policy UI in the admin portal. Once done, the corresponding subscription plan can be chosen via the business plans to engage these validations for an API.", "author": "uvindra", "createdAt": "2020-12-22T07:55:23Z", "path": "en/docs/learn/rate-limiting/graphql-api/overview-query-limits-for-graphql.md", "diffHunk": "@@ -2,37 +2,35 @@\n \n GraphQL is an open-source data query & manipulation language for APIs. It provides a common interface between the client and the server for data fetching and manipulations.\n \n-With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to do complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either\n-intentionally or unintentionally. \n+With GraphQL queries, the client which requests data has more flexibility compared to REST where it can request any amount of data it wishes. This flexibility comes at a cost since now the GraphQL service might have to perform complex operations to serve each type of query it receives. To overcome this hardship, the query needs to be analysed before execution. Without any protection to the backend, we\u2019ll be vulnerable to DoS attacks (due to excessive load to the server, database or network), which are caused by the execution of malicious and complex queries that are passed either intentionally or unintentionally. \n \n Since clients have the possibility to request very complex queries, servers must be ready to handle them properly. \n **WSO2 API-Manager introduces Static Query Analyser to Secure GraphQL APIs** to address such issues.\n \n ### Static Query Analyser\n \n-Through the static query analyzer, we analyse the query and based on the previously set limitations/policy and block complex queries before it reaches the backend. Given below is the basic outline of the policies which are to be defined within the policy definition.\n+Through the static query analyzer, we analyse the query based on the previously set limitations/policy and block complex queries, before it reaches to the backend. Given below is the basic outline of the policies which, need to define within the policy definition.\n \n    - [Query Depth Limitation]({{base_path}}/learn/api-security/graphql-query-analysis/query-depth-limitation)\n     \n    - [Query Complexity Limitation]({{base_path}}/learn/api-security/graphql-query-analysis/query-complexity-limitation)\n \n \n-In order to implement applying query limits for GraphQL apis, two optional fields have been introduced to the Subscription Policy: **GraphQL Max Depth** and  **GraphQL Max Complexity**.\n+To implement applicable query limits for the GraphQL APIs, two optional fields were introduced to the Subscription Policy as **GraphQL Max Depth** and  **GraphQL Max Complexity**.\n \n-Through the Subscription Policy UI in the admin portal, GraphQL Max Depth value and GraphQL Max Complexity values can be set Once done, the corresponding subscription plan can be chosen via the business plans to engage these validations to an API.\n+The **GraphQL Max Depth**  and **GraphQL Max Complexity** values can be set through the Subscription Policy UI in the admin portal. Once it is done, the corresponding subscription plan can be chosen via the business plans to engage these validations to an API. ", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMzgxNw==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547123817", "bodyText": "This should read as,\nThe reason for this is that some fields in a GraphQL schema are more costly to compute than others.", "author": "uvindra", "createdAt": "2020-12-22T07:57:08Z", "path": "en/docs/learn/rate-limiting/graphql-api/query-complexity-limitation.md", "diffHunk": "@@ -1,30 +1,29 @@\n-Often, limiting the depth of a query only is not sufficient to protect a GraphQL service from complex queries. \n-This is due to some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n+Often, limiting only the depth of a query is not sufficient to protect a GraphQL service from complex queries. \n+The reason for this is that some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces ", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyNDUwMA==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547124500", "bodyText": "Seems 'the' is being repeated twice since it already exists in the previous line.", "author": "uvindra", "createdAt": "2020-12-22T07:58:54Z", "path": "en/docs/learn/rate-limiting/graphql-api/query-complexity-limitation.md", "diffHunk": "@@ -1,30 +1,29 @@\n-Often, limiting the depth of a query only is not sufficient to protect a GraphQL service from complex queries. \n-This is due to some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n+Often, limiting only the depth of a query is not sufficient to protect a GraphQL service from complex queries. \n+The reason for this is that some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n **\u201cQuery Complexity Limitation\u201d** to address such cases. \n \n With this strategy, a request allowed or rejected based on the complexity of the query, and the configured max complexity \n value of the subscription policy for the corresponding API.\n \n Here we introduced the **complexity values for each of the Fields** in the schema. That **describes the \n-computation cost of resolving the particular field**. \n+the computation cost of resolving the particular field**. ", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMDM1MA==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547200350", "bodyText": "Fixed", "author": "Chamindu36", "createdAt": "2020-12-22T10:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyNDUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyNjc1Mw==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547126753", "bodyText": "This should read as,\nthen the complexity should be at a high level, but if the field is easy to resolve(an inexpensive operation),", "author": "uvindra", "createdAt": "2020-12-22T08:04:54Z", "path": "en/docs/learn/rate-limiting/graphql-api/query-complexity-limitation.md", "diffHunk": "@@ -1,30 +1,29 @@\n-Often, limiting the depth of a query only is not sufficient to protect a GraphQL service from complex queries. \n-This is due to some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n+Often, limiting only the depth of a query is not sufficient to protect a GraphQL service from complex queries. \n+The reason for this is that some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n **\u201cQuery Complexity Limitation\u201d** to address such cases. \n \n With this strategy, a request allowed or rejected based on the complexity of the query, and the configured max complexity \n value of the subscription policy for the corresponding API.\n \n Here we introduced the **complexity values for each of the Fields** in the schema. That **describes the \n-computation cost of resolving the particular field**. \n+the computation cost of resolving the particular field**. \n \n <html>\n <div class=\"admonition note\">\n <p class=\"admonition-title\">Note</p>\n <p>\n If the field needs to call an expensive service to resolve itself, \n-then the **complexity should be at a high level** but if the field is easy to resolve and not an expensive operation, \n+then the complexity should be at a high level but, if the field is easy to resolve and not a cheap operation,  ", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyOTY4NA==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547129684", "bodyText": "This should read as,\nAt runtime, a query will be blocked if its calculated complexity exceeds the specified max complexity.", "author": "uvindra", "createdAt": "2020-12-22T08:11:58Z", "path": "en/docs/learn/rate-limiting/graphql-api/query-complexity-limitation.md", "diffHunk": "@@ -1,30 +1,29 @@\n-Often, limiting the depth of a query only is not sufficient to protect a GraphQL service from complex queries. \n-This is due to some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n+Often, limiting only the depth of a query is not sufficient to protect a GraphQL service from complex queries. \n+The reason for this is that some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n **\u201cQuery Complexity Limitation\u201d** to address such cases. \n \n With this strategy, a request allowed or rejected based on the complexity of the query, and the configured max complexity \n value of the subscription policy for the corresponding API.\n \n Here we introduced the **complexity values for each of the Fields** in the schema. That **describes the \n-computation cost of resolving the particular field**. \n+the computation cost of resolving the particular field**. \n \n <html>\n <div class=\"admonition note\">\n <p class=\"admonition-title\">Note</p>\n <p>\n If the field needs to call an expensive service to resolve itself, \n-then the **complexity should be at a high level** but if the field is easy to resolve and not an expensive operation, \n+then the complexity should be at a high level but, if the field is easy to resolve and not a cheap operation,  \n the **complexity should be at a low level**. If **no complexity defined** for a field, **by default it will get a value of 1.** \n </p>\n </div> \n </html>\n \n-In run time, requested query complexity value will be calculated and blocked it exceeds the max complexity.\n+In the run time, the requested query complexity value will be calculated and, blocked if the value exceeds the max complexity.", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEzNTA1MQ==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547135051", "bodyText": "This should read as,\nIf there are no arguments provided in a query,  the total complexity can be calculated by simply adding the individual complexity values of each field.", "author": "uvindra", "createdAt": "2020-12-22T08:24:10Z", "path": "en/docs/learn/rate-limiting/graphql-api/query-complexity-limitation.md", "diffHunk": "@@ -1,30 +1,29 @@\n-Often, limiting the depth of a query only is not sufficient to protect a GraphQL service from complex queries. \n-This is due to some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n+Often, limiting only the depth of a query is not sufficient to protect a GraphQL service from complex queries. \n+The reason for this is that some fields in a GraphQL schema being more costly to compute than others. WSO2 API-Manager introduces \n **\u201cQuery Complexity Limitation\u201d** to address such cases. \n \n With this strategy, a request allowed or rejected based on the complexity of the query, and the configured max complexity \n value of the subscription policy for the corresponding API.\n \n Here we introduced the **complexity values for each of the Fields** in the schema. That **describes the \n-computation cost of resolving the particular field**. \n+the computation cost of resolving the particular field**. \n \n <html>\n <div class=\"admonition note\">\n <p class=\"admonition-title\">Note</p>\n <p>\n If the field needs to call an expensive service to resolve itself, \n-then the **complexity should be at a high level** but if the field is easy to resolve and not an expensive operation, \n+then the complexity should be at a high level but, if the field is easy to resolve and not a cheap operation,  \n the **complexity should be at a low level**. If **no complexity defined** for a field, **by default it will get a value of 1.** \n </p>\n </div> \n </html>\n \n-In run time, requested query complexity value will be calculated and blocked it exceeds the max complexity.\n+In the run time, the requested query complexity value will be calculated and, blocked if the value exceeds the max complexity.\n \n Following is a simple example which can be used to understand how the calculation happens.\n \n-If there are, no arguments provides in your requested query, can calculate complexity value simply by\n-adding all the complexity values.\n+If there are, no arguments provided in your requested query,  the complexity can be calculated simply by adding all the complexity values.", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEzNzQ0MA==", "url": "https://github.com/wso2/docs-apim/pull/2580#discussion_r547137440", "bodyText": "This should read as,\nAn example of such a query is as follows:", "author": "uvindra", "createdAt": "2020-12-22T08:29:09Z", "path": "en/docs/learn/rate-limiting/graphql-api/query-depth-limitation.md", "diffHunk": "@@ -1,7 +1,7 @@\n Since GraphQL schemas often have circular relationships, the depth can grow without bounds. \n-this means a client could craft a query as follows:\n+This means a client could craft a query as follows:", "originalCommit": "34ade27648e277ca5e8091f94a43f828216957f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "490e4d1d00e2e34a77b5b77074bde855d3a936c9", "url": "https://github.com/wso2/docs-apim/commit/490e4d1d00e2e34a77b5b77074bde855d3a936c9", "message": "Addressing review comments", "committedDate": "2020-12-22T10:34:29Z", "type": "commit"}]}