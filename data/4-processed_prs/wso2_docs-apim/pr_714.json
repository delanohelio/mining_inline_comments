{"pr_number": 714, "pr_title": "Refactored deployment docs", "pr_createdAt": "2020-02-12T12:16:05Z", "pr_url": "https://github.com/wso2/docs-apim/pull/714", "timeline": [{"oid": "a142d9e053af3dbab8b6eaea5cb7c7d44399e8bf", "url": "https://github.com/wso2/docs-apim/commit/a142d9e053af3dbab8b6eaea5cb7c7d44399e8bf", "message": "Refactored deployment docs", "committedDate": "2020-02-12T12:12:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNjc2NQ==", "url": "https://github.com/wso2/docs-apim/pull/714#discussion_r378216765", "bodyText": "Store should be replaced with the Dev Portal", "author": "npamudika", "createdAt": "2020-02-12T12:20:27Z", "path": "en/docs/InstallAndSetup/DeployingWSO2APIManager/SingleNode/all-in-one-deployment-overview.md", "diffHunk": "@@ -1,24 +1,14 @@\n # All-in-One Deployment Overview\n \n-In a typical production deployment, API Manager is deployed as components (Publisher, Store, Gateway, Key Manager and Traffic Manager). While this provides very high performance and a high level of scalability, it may be too complex if you want to run API Manager as a small to medium scale API Management solution. A WSO2 API-M single node deployment, which has all the API-M components in one instance, would be simple to set up and requires less resources when compared with a distributed deployment. It is ideal for any organization that wants to start small and iteratively build up a robust API Management Platform.\n+In a typical production deployment, API Manager is deployed as components (Publisher, Store, Gateway, Key Manager ", "originalCommit": "a142d9e053af3dbab8b6eaea5cb7c7d44399e8bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxOTY4OQ==", "url": "https://github.com/wso2/docs-apim/pull/714#discussion_r378219689", "bodyText": "Fixed", "author": "ruks", "createdAt": "2020-02-12T12:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNjc2NQ=="}], "type": "inlineReview"}, {"oid": "e6cccb539cb70466fbf7ad7fd9b53e273883a86f", "url": "https://github.com/wso2/docs-apim/commit/e6cccb539cb70466fbf7ad7fd9b53e273883a86f", "message": "Fixed typo", "committedDate": "2020-02-12T12:26:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMDIwOA==", "url": "https://github.com/wso2/docs-apim/pull/714#discussion_r378220208", "bodyText": "In All-in-One Active-Active/ Active-Passive deployment, sharing the whole server directory may cause unexpected issues when applying wum updates etc. Therefore IMO, it is best to only share the required directories in the deployment/server directory such as synapse-configs, throttle policies. Best to avoid sharing jaggery apps.", "author": "menakaj", "createdAt": "2020-02-12T12:28:16Z", "path": "en/docs/InstallAndSetup/DeployingWSO2APIManager/SingleNode/configuring-an-active-active-deployment.md", "diffHunk": "@@ -6,84 +6,76 @@ This page walks you through how to manually configure WSO2 API Manager (WSO2 API\n \n Follow the instructions below to configure and deploy API-M by using an Active-Active deployment:\n \n--   [Step 1 - Create a SSL certificate](#step-1-create-a-ssl-certificate)\n--   [Step 2 -\u00a0Configure the load balancer](#step-2-configure-the-load-balancer)\n--   [Step 3 - Configure the databases](#step-3-configure-the-databases)\n--   [Step 4 - Configure the Publisher with the Gateway](#step-4-configure-the-publisher-with-the-gateway)\n--   [Step 5 -\u00a0Configure the content synchronization mechanism](#step-5-configure-the-content-synchronization-mechanism)\n--   [Step 6 - Configure Throttling](#step-6-configure-throttling)\n--   [Step 7 - Configure the second WSO2 API-M node](#step-7-configure-the-second-wso2-api-m-node)\n--   [Step 8 - Configure your deployment with production hardening](#step-8-configure-your-deployment-with-production-hardening)\n--   [Step 9 - Configure Analytics](#step-9-configure-analytics)\n+-   [Step 1 - Create a SSL certificate]({{base_path}}/Administer/ProductSecurity/ConfiguringKeystores/KeystoreBasics/creating-new-keystores)\n+-   [Step 2 -\u00a0Configure the load balancer]({{base_path}}/InstallAndSetup/DeployingWSO2APIManager/configuring-the-proxy-server-and-the-load-balancer)\n+-   [Step 3 - Configure the databases]({{base_path}}/InstallAndSetup/SettingUpDatabases/overview)\n+-   [Step 4 - Configure your deployment with production hardening]({{base_path}}/InstallAndSetup/DeployingWSO2APIManager/production-deployment-guidelines)\n+-   [Step 5 - Configure the Publisher with the Gateway](#step-5-configure-the-publisher-with-the-gateway)\n+-   [Step 6 -\u00a0Configure the content synchronization mechanism](#step-6-configure-the-content-synchronization-mechanism)\n+-   [Step 7 - Configure Throttling](#step-7-configure-throttling)\n+-   [Step 8 - Configure Analytics - Optional]({{base_path}}/Learn/Analytics/configuring-apim-analytics/)\n+-   [Step 9 - Configure the second WSO2 API-M node](#step-9-configure-the-second-wso2-api-m-node)\n -   [Step 10 - Start the WSO2 API-M servers](#step-10-start-the-wso2-api-m-servers)\n \n-### Step 1 - Create a SSL certificate\n+### Step 5 - Configure the Publisher with the Gateway\n \n-Create a SSL certificate on the first WSO2 API-M all-in-one active node. For more information,\u00a0see [Creating SSL Certificates](https://docs.wso2.com/display/ADMIN44x/Creating+New+Keystores) in the Administration Guide.\n-\n-### Step 2 -\u00a0Configure the load balancer\n-\n-For information on configuring the load balancer, see [Configuring the Proxy Server and the Load Balancer](../configuring-the-proxy-server-and-the-load-balancer.md).\n-\n-### Step 3 - Configure the databases\n-\n-For information on configuring the databases, see [Installing and Configuring the Databases](../../SettingUpDatabases/overview.md).\n-\n-### Step 4 - Configure the Publisher with the Gateway\n-\n-!!! note\n-    This step is required **only** if you are using rsync to share files.\n-\n-    !!! info\n-        When you use rsync the file synchronization will happen in only one direction. Therefore, use the following configuration to enable synchronization in both directions between two nodes.\n-\n-    For more details, see the [next step](#step-5-configure-the-content-synchronization-mechanism).\n-\n-Configure the API Publisher in both nodes to be able to publish to the API-M Gateway of one of the nodes. Do this by pointing the `service_url` to the same Gateway node.\n-\n-You need to configure this in the `<API-M_HOME>/repository/conf/deployment.toml` file.\n-\n-``` java\n+#### Shared File System\n+Since underline file system is shared, artifacts are available to both Gateway nodes. Hence a single node can publish\n+ the API artifacts to own nodes. For that service_url can be pointing to the `localhost` in both nodes. \n+``` toml\n [[apim.gateway.environment]]\n ...\n service_url = \"https://localhost:${mgt.transport.https.port}/services/\"\n ...\n ```\n \n-### Step 5 -\u00a0Configure the content synchronization mechanism\n-\n-Configure a shared file system as the content synchronization mechanism.\u00a0You can use a common shared file system such as Network File System (NFS) or any other shared file system that is available.\u00a0You need to mount the `<API-M_HOME>/repository/deployment/server` directory of the two nodes to the shared file system, in order to share all APIs and throttling policies between all the nodes.\n-\n-!!! info\n-    Shared file system is the first preference that WSO2 recommends to synchronize the artifacts among the nodes, because APIs and throttling decisions can be published to any of the nodes; thereby, avoiding the vulnerability of a single point of failure that is present when using remote synchronization (rsync). However, if you are unable to maintain a shared file system, you can synchronize content using rsync. For information on setting up a rsync based deployment synchronization, see [Configuring rsync for Deployment Synchronization](../configuring-rsync-for-deployment-synchronization.md).\n-\n-    #### Using Rsync for deployment synchronization\n-\n-    If you are using rsync, the API artifacts will be synchronized to one direction. As explained in [Configuring rsync for Deployment Synchronization](../configuring-rsync-for-deployment-synchronization.md) section, the synchronization will happen from manager to worker. Hence, The API artifact should be created on one node only, which acts like a manager node for artifact synchronization purpose. Please follow the steps below to configure this:\n+#### RSYNC\n+The API artifacts will be synchronized to one direction. As explained in [Configuring rsync for Deployment \n+Synchronization](../configuring-rsync-for-deployment-synchronization.md) section, the synchronization will happen \n+from manager to worker. Hence, The API artifact should be created on one node only, which acts like a manager node \n+for artifact synchronization purpose. Please follow the steps below to configure this:\n     Assuming node-1 is the manager node for artifact synchronization,\n \n-    1.  Open `<API-M_HOME>/repository/conf/deployment.toml` file in node-1.\n-    2.  Configure Gateway Service URL to point to its own (localhost):\n+1.  Open `<API-M_HOME>/repository/conf/deployment.toml` file in node-1.\n+2.  Configure Gateway Service URL to point to its own (localhost):\n+    ``` toml\n+    [[apim.gateway.environment]]\n+    ...\n+    service_url = \"https://localhost:${mgt.transport.https.port}/services/\"\n+    ...\n+    ```\n \n-        ``` java\n-        [[apim.gateway.environment]]\n-        ...\n-        service_url = \"https://localhost:${mgt.transport.https.port}/services/\"\n-        ...\n-        ```\n+3.  Open `<API-M_HOME>/repository/conf/deployment.toml` file in node-2.\n+4.  Configure Gateway Service URL to point to the node-1:\n+    ``` toml\n+    [[apim.gateway.environment]]\n+    ...\n+    service_url = \"https://<node1-hostname>:<node-1-mgt-transport-port>/services/\"\n+    ...\n+    ```\n+    Note that `<node-1-mgt-transport-port>` is the management transport port, which is by default 9443.\n+        \n \n-    3.  Open `<API-M_HOME>/repository/conf/deployment.toml` file in node-2.\n-    4.  Configure Gateway Service URL to point to the node-1:\n+### Step 6 - Configure the content synchronization mechanism\n \n-        ``` java\n-        [[apim.gateway.environment]]\n-        ...\n-        service_url = \"https://<node1-hostname>:<node-1-mgt-transport-port>/services/\"\n-        ...\n-        ```\n-        Note that `<node-1-mgt-transport-port>` is the management transport port, which is by default 9443.\n+#### Shared File System\n+\n+Configure a shared file system as the content synchronization mechanism.\u00a0You can use a common shared file \n+system such as Network File System (NFS) or any other shared file system that is available.\u00a0You need to mount the\n+`<API-M_HOME>/repository/deployment/server` directory of the two nodes to the shared file system, in order to", "originalCommit": "a142d9e053af3dbab8b6eaea5cb7c7d44399e8bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMDcxMg==", "url": "https://github.com/wso2/docs-apim/pull/714#discussion_r378220712", "bodyText": "Especially when having dependent updates for portals and respective backend components.", "author": "menakaj", "createdAt": "2020-02-12T12:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MzY0Nw==", "url": "https://github.com/wso2/docs-apim/pull/714#discussion_r381153647", "bodyText": "@ruks , please look into @menakaj 's comment.", "author": "Mariangela", "createdAt": "2020-02-19T08:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMDIwOA=="}], "type": "inlineReview"}]}