{"pr_number": 946, "pr_title": "Adding 3.0.0 to 3.1.0 migration docs", "pr_createdAt": "2020-03-31T07:48:30Z", "pr_url": "https://github.com/wso2/docs-apim/pull/946", "timeline": [{"oid": "39fe2c6ed8058e8587212671a51f06cb64d6b55c", "url": "https://github.com/wso2/docs-apim/commit/39fe2c6ed8058e8587212671a51f06cb64d6b55c", "message": "Adding 3.0.0 to 3.1.0 migration docs", "committedDate": "2020-03-31T06:58:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMTg3MQ==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400711871", "bodyText": "Shall we add the deployment.toml configuration to enable registry versioning here. I think that would be more appropriate.", "author": "vithu30", "createdAt": "2020-03-31T07:54:36Z", "path": "en/docs/install-and-setup/upgrading-wso2-api-manager/upgrading-from-300-to-310.md", "diffHunk": "@@ -0,0 +1,982 @@\n+# Upgrading API Manager from 3.1.0 to 3.1.0\n+\n+The following information describes how to upgrade your API Manager server **from APIM 3.1.0 to 3.1.0**.\n+\n+!!! note\n+    Before you follow this section, see [Upgrading Process](../upgrading-wso2-api-manager/upgrading-process.md) for more information.\n+\n+!!! attention \"Before you Begin\"\n+    This release is a WUM-only release. This means that there are no manual patches. Any further fixes or latest updates for this release can be updated through the WSO2 Update Manager (WUM).\n+\n+    -   **If you are upgrading to this version, in order to use this version in your production environment** , use the WSO2 Update Manager and get the latest available updates for WSO2 API Manager 3.1.0. For more information on how to do this, see [Updating WSO2 Products](https://docs.wso2.com/display/updates/Using+WSO2+Update+Manager).\n+\n+Follow the instructions below to upgrade your WSO2 API Manager server **from WSO2 API-M 3.0.0 to 3.1.0**.\n+\n+### Preparing for Migration\n+#### Disabling versioning in the registry configuration\n+\n+If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled by default in API Manager 3.1.0.\n+\n+Therefore, when migrating to API Manager 3.1.0, it is **required** to turn off the registry versioning in your\n+current API Manager 3.0.0 version and run the below scripts against **the database that is used by the registry**.\n+\n+!!! note \"NOTE\"\n+    Alternatively, it is possible to turn on registry versioning in API Manager 3.1.0 and continue. But this is\n+    highly **NOT RECOMMENDED** and these configurations should only be changed once.\n+\n+!!! info \"Turning off registry versioning in your current API-M and running the scripts\"", "originalCommit": "39fe2c6ed8058e8587212671a51f06cb64d6b55c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxOTMxOQ==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400719319", "bodyText": "Why would we need a registry versioning enabling config as we are not recommending it? Better to remove this part rather than adding the enabling config WDYT?", "author": "mushthaq33", "createdAt": "2020-03-31T08:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMTg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNTk3Nw==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400725977", "bodyText": "Fixed in 38ea33a", "author": "mushthaq33", "createdAt": "2020-03-31T08:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMTg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjkyNg==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400726926", "bodyText": "What I mentioned in the earlier comment is, we have added registry.xml configuration to turn off registry versioning and we need to change it with toml configuration.\nAnyway, since we disabled registry versioning by default in 3.0.0, +1 to change it", "author": "vithu30", "createdAt": "2020-03-31T08:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMTg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMzUzMw==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400713533", "bodyText": "For the migration from 3.0.0 to 3.1.0, this step is not required I guess. Shall we remove it as Log4J2 is already in 3.0.0?", "author": "vithu30", "createdAt": "2020-03-31T07:57:33Z", "path": "en/docs/install-and-setup/upgrading-wso2-api-manager/upgrading-from-300-to-310.md", "diffHunk": "@@ -0,0 +1,982 @@\n+# Upgrading API Manager from 3.1.0 to 3.1.0\n+\n+The following information describes how to upgrade your API Manager server **from APIM 3.1.0 to 3.1.0**.\n+\n+!!! note\n+    Before you follow this section, see [Upgrading Process](../upgrading-wso2-api-manager/upgrading-process.md) for more information.\n+\n+!!! attention \"Before you Begin\"\n+    This release is a WUM-only release. This means that there are no manual patches. Any further fixes or latest updates for this release can be updated through the WSO2 Update Manager (WUM).\n+\n+    -   **If you are upgrading to this version, in order to use this version in your production environment** , use the WSO2 Update Manager and get the latest available updates for WSO2 API Manager 3.1.0. For more information on how to do this, see [Updating WSO2 Products](https://docs.wso2.com/display/updates/Using+WSO2+Update+Manager).\n+\n+Follow the instructions below to upgrade your WSO2 API Manager server **from WSO2 API-M 3.0.0 to 3.1.0**.\n+\n+### Preparing for Migration\n+#### Disabling versioning in the registry configuration\n+\n+If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled by default in API Manager 3.1.0.\n+\n+Therefore, when migrating to API Manager 3.1.0, it is **required** to turn off the registry versioning in your\n+current API Manager 3.0.0 version and run the below scripts against **the database that is used by the registry**.\n+\n+!!! note \"NOTE\"\n+    Alternatively, it is possible to turn on registry versioning in API Manager 3.1.0 and continue. But this is\n+    highly **NOT RECOMMENDED** and these configurations should only be changed once.\n+\n+!!! info \"Turning off registry versioning in your current API-M and running the scripts\"\n+    Open the `registry.xml` file in the `<OLD_API-M_HOME>/repository/conf` directory.\n+    Set the `versioningProperties`, `versioningComments`, `versioningTags` and `versioningRatings`\n+    false.\n+    \n+    ```\n+    <staticConfiguration>\n+        <versioningProperties>false</versioningProperties>\n+        <versioningComments>false</versioningComments>\n+        <versioningTags>false</versioningTags>\n+        <versioningRatings>false</versioningRatings>\n+    </staticConfiguration>\n+    ```\n+    \n+    !!! warning\n+        If the above configurations are already set as `false` you should not run the below scripts.\n+    \n+    When the above configurations are turned off, you need to remove the versioning details from the database in order for the registry resources to work properly. Choose the relevant DB type and run the script against the DB that the registry resides in.\n+    \n+    ??? info \"DB Scripts\"\n+        ```tab=\"H2\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+\n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL;\n+\n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY);\n+\n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG);\n+\n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT);\n+\n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING);\n+\n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);           \n+        ```\n+    \n+        ```tab=\"DB2\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION)\n+        /\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION)\n+        /\n+\n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL\n+        /\n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY)\n+        /\n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG)\n+        /\n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT)\n+        /\n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING)\n+        /\n+\n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION)\n+        /\n+        ```\n+    \n+        ```tab=\"MSSQL\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_COMMENT SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_PROPERTY SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_RATING SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+        \n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL;\n+        \n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY);\n+        \n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG);\n+        \n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT);\n+        \n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING);\n+        \n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);  \n+        ```\n+\n+        ```tab=\"MySQL\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+\n+\n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL;\n+\n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY);\n+\n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG);\n+\n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT);\n+\n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING);\n+\n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+        ```\n+    \n+        ```tab=\"Oracle\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION)\n+        /\n+        \n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL\n+        /\n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY)\n+        /\n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG)\n+        /\n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT)\n+        /\n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING)\n+        /\n+        \n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION)\n+        /\n+        ```\n+        \n+        ```tab=\"PostgreSQL\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_COMMENT SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_PROPERTY SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_RATING SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+        \n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL;\n+        \n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY);\n+        \n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG);\n+        \n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT);\n+        \n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING);\n+        \n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+        ```\n+    \n+!!! warning \"Not recommended\"\n+    If you decide to proceed with registry resource versioning enabled, Add the following configuration to the `<NEW_API-M_HOME>/repository/conf/deployment.toml` file of new WSO2 API Manager. \n+    \n+    ```\n+    [registry.static_configuration]\n+    enable=true\n+    ```\n+    \n+    !!! note \"NOTE\"\n+        Changing these configuration should only be done before the initial API-M Server startup. If changes are done after the initial startup, the registry resource created previously will not be available.\n+\n+!!! note\n+    If you are using WSO2 Identity Server (WSO2 IS) as a Key Manager, follow the instructions in [Upgrading WSO2 IS as the Key Manager to 5.10.0](../upgrading-wso2-is-as-key-manager/upgrading-from-is-km-590-to-5100.md).\n+\n+-   [Step 1 - Migrate the API Manager configurations](#step-1-migrate-the-api-manager-configurations)\n+-   [Step 2 - Upgrade API Manager to 3.1.0](#step-2-upgrade-api-manager-to-300)\n+-   [Step 3 - Optionally, migrate the configurations for WSO2 API-M Analytics](#step-3-optionally-migrate-the-configurations-for-wso2-api-m-analytics)\n+-   [Step 4 - Restart the WSO2 API-M 3.1.0 server](#step-4-restart-the-wso2-api-m-300-server)\n+\n+### Step 1 - Migrate the API Manager configurations\n+\n+!!! warning\n+    Do not copy entire configuration files from the current version of WSO2 API Manager to the new one, as the configuration modal has been changed and now all the configurations are being done via a single file (deployment.toml). Instead, redo the configuration changes in the new configuration file. For more information refer [Configuration Catalog](../../reference/ConfigCatalog.md).\n+\n+Follow the instructions below to move all the existing API Manager configurations from the current environment to the new one.\n+\n+1.  Back up all databases in your API Manager instances along with the Synapse configurations of all the tenants and the super tenant.\n+\n+    -   The Synapse configurations of the super tenant are in the `<OLD_API-M_HOME>/repository/deployment/server/synapse-configs/default` directory.\n+\n+    -   The Synapse configurations of tenants are in the `<OLD_API-M_HOME>/repository/tenants` directory.\n+\n+    -   If you use a **clustered/distributed API Manager setup** , back up the available configurations in the **API Gateway** node.\n+\n+2.  Download [WUM updated](https://docs.wso2.com/display/updates/Getting+Started) pack for [WSO2 API Manager 3.1.0](http://wso2.com/api-management/).\n+\n+3.  Open the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file and provide the datasource configurations for the following databases.\n+\n+    -   User Store\n+    -   Registry database/s\n+    -   API Manager databases\n+\n+    !!! note\n+        In API-M 3.1.0, a combined SHARED_DB has been introduced to keep both the user related data (`WSO2UM_DB`) and the registry data (`WSO2REG_DB`). If you have used separate DBs for user management and registry in the previous version, you need to configure WSO2REG_DB and WSO2UM_DB databases separately in API-M 3.1.0 to avoid any issues.\n+\n+    SHARED_DB should point to the previous API-M version's `WSO2REG_DB`. This example shows to configure MySQL database configurations.\n+\n+    ```\n+    [database.apim_db]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/am_db\"\n+    username = \"username\"\n+    password = \"password\"\n+\n+    [database.shared_db]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/reg_db\"\n+    username = \"username\"\n+    password = \"password\"\n+    ```\n+\n+    Optionally add a new entry as below to the `deployment.toml` if you have configured a seperate user management database in the previous API-M version.\n+\n+    ```\n+    [database.user]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/um_db\"\n+    username = \"username\"\n+    password = \"password\"\n+    ```\n+\n+    !!! note\n+        If you have configured WSO2CONFIG_DB in the previous API-M version, add a new entry to the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` as below.\n+\n+        ```\n+        [database.config]\n+        type = \"mysql\"\n+        url = \"jdbc:mysql://localhost:3306/config_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        ```\n+\n+    !!! attention \"If you are using another DB type\"\n+        If you are using another DB type other than **H2** or **MySQL**, when defining the DB related configurations in the `deployment.toml` file, you need to add the `driver` and `validationQuery` parameters additionally as given below.\n+\n+        ```tab=\"MSSQL\"\n+        [database.apim_db]\n+        type = \"mssql\"\n+        url = \"jdbc:sqlserver://localhost:1433;databaseName=mig_am_db;SendStringParametersAsUnicode=false\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n+        validationQuery = \"SELECT 1\"\n+        ```\n+\n+        ```tab=\"PostgreSQL\"\n+        [database.apim_db]\n+        type = \"postgre\"\n+        url = \"jdbc:postgresql://localhost:5432/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"org.postgresql.Driver\"\n+        validationQuery = \"SELECT 1\"\n+        ```\n+\n+        ```tab=\"Oracle\"\n+        [database.apim_db]\n+        type = \"oracle\"\n+        url = \"jdbc:oracle:thin:@localhost:1521/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"oracle.jdbc.driver.OracleDriver\"\n+        validationQuery = \"SELECT 1 FROM DUAL\"\n+        ```\n+\n+        ```tab=\"DB2\"\n+        [database.apim_db]\n+        type = \"db2\"\n+        url = \"jdbc:db2://localhost:50000/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"com.ibm.db2.jcc.DB2Driver\"\n+        validationQuery = \"SELECT 1 FROM SYSIBM.SYSDUMMY1\"\n+        ```\n+\n+4.  Update `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file as follows, to point to the correct database for user management purposes.\n+\n+    ```\n+    [realm_manager]\n+    data_source = \"WSO2USER_DB\"\n+    ```\n+\n+5.  Copy the relevant JDBC driver to the `<API-M_3.1.0_HOME>/repository/components/lib` folder.\n+\n+    !!! info\n+        In API-M 3.1.0, you do not need to configure the registry configurations as you did in the `<OLD_API-M_HOME>/repository/conf/registry.xml` file and the user database configurations as you did in in the `<OLD_API-M_HOME>/repository/conf/user-mgt.xml` file, as those configurations have been handled internally.\n+\n+6.  Move all your Synapse configurations to API-M 3.1.0 pack.\n+    -   Move your Synapse super tenant configurations.\n+        Copy the contents in the `<OLD_API-M_HOME>/repository/deployment/server/synapse-configs/default` directory and replace the contents in the `<API-M_3.1.0_HOME>/repository/deployment/server/synapse-configs/default` directory with the copied contents.\n+    -   Move all your tenant Synapse configurations.\n+        Copy the contents in the `<OLD_API-M_HOME>/repository/tenants` directory and replace the contents in the `<API-M_3.1.0_HOME>/repository/tenants` directory with the copied contents.\n+\n+    !!! warning\n+        When moving the Synapse configurations, **do not replace** the following set of files as they contain some modificatiosn in API-M 3.1.0 version.\n+\n+        -   /api/\\_RevokeAPI_.xml\n+        -   /sequences/\\_cors_request_handler_.xml\n+        -   /sequences/main.xml\n+\n+    !!! attention \n+        If you are working with a **clustered/distributed API Manager setup**, follow this step on the **Gateway** node.\n+\n+7.  Move all your Execution plans from `<API-M_3.0.0_HOME>/repository/deployment/server/executionplans` directory to `<API-M_3.1.0_HOME>/repository/deployment/server/executionplans` directory.\n+\n+    !!! note\n+        If you are working with a **clustered/distributed API Manager setup**, follow this step on the **Traffic Manager** node.\n+\n+8.  If you manually added any custom OSGI bundles to the `<API-M_3.0.0_HOME>/repository/components/dropins` directory, copy those to the `<API-M_3.1.0_HOME>/repository/components/dropins` directory. \n+\n+9.  If you manually added any JAR files to the `<API-M_3.0.0_HOME>/repository/components/lib` directory, copy those and paste them in the `<API-M_3.1.0_HOME>/repository/components/lib` directory.\n+\n+10. WSO2 API Manager 3.1.0 has been upgraded to log4j2 (from log4j). You will notice that there is a log4j2.properties file in the `<API-M_3.1.0_HOME>/repository/conf/` directory instead of the log4j.properties file. Follow [Upgrading to Log4j2](../upgrading-wso2-api-manager/upgrading-to-log4j2.md) to migrate your existing log4j.properties file to log4j2.properties file.", "originalCommit": "39fe2c6ed8058e8587212671a51f06cb64d6b55c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjI1OA==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400726258", "bodyText": "Fixed in 38ea33a", "author": "mushthaq33", "createdAt": "2020-03-31T08:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMzUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxNTIxNw==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400715217", "bodyText": "Do we need this info as it says about the configurations added in xml files. Shall we point deployment.toml if required? :)", "author": "vithu30", "createdAt": "2020-03-31T08:00:09Z", "path": "en/docs/install-and-setup/upgrading-wso2-api-manager/upgrading-from-300-to-310.md", "diffHunk": "@@ -0,0 +1,982 @@\n+# Upgrading API Manager from 3.1.0 to 3.1.0\n+\n+The following information describes how to upgrade your API Manager server **from APIM 3.1.0 to 3.1.0**.\n+\n+!!! note\n+    Before you follow this section, see [Upgrading Process](../upgrading-wso2-api-manager/upgrading-process.md) for more information.\n+\n+!!! attention \"Before you Begin\"\n+    This release is a WUM-only release. This means that there are no manual patches. Any further fixes or latest updates for this release can be updated through the WSO2 Update Manager (WUM).\n+\n+    -   **If you are upgrading to this version, in order to use this version in your production environment** , use the WSO2 Update Manager and get the latest available updates for WSO2 API Manager 3.1.0. For more information on how to do this, see [Updating WSO2 Products](https://docs.wso2.com/display/updates/Using+WSO2+Update+Manager).\n+\n+Follow the instructions below to upgrade your WSO2 API Manager server **from WSO2 API-M 3.0.0 to 3.1.0**.\n+\n+### Preparing for Migration\n+#### Disabling versioning in the registry configuration\n+\n+If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled by default in API Manager 3.1.0.\n+\n+Therefore, when migrating to API Manager 3.1.0, it is **required** to turn off the registry versioning in your\n+current API Manager 3.0.0 version and run the below scripts against **the database that is used by the registry**.\n+\n+!!! note \"NOTE\"\n+    Alternatively, it is possible to turn on registry versioning in API Manager 3.1.0 and continue. But this is\n+    highly **NOT RECOMMENDED** and these configurations should only be changed once.\n+\n+!!! info \"Turning off registry versioning in your current API-M and running the scripts\"\n+    Open the `registry.xml` file in the `<OLD_API-M_HOME>/repository/conf` directory.\n+    Set the `versioningProperties`, `versioningComments`, `versioningTags` and `versioningRatings`\n+    false.\n+    \n+    ```\n+    <staticConfiguration>\n+        <versioningProperties>false</versioningProperties>\n+        <versioningComments>false</versioningComments>\n+        <versioningTags>false</versioningTags>\n+        <versioningRatings>false</versioningRatings>\n+    </staticConfiguration>\n+    ```\n+    \n+    !!! warning\n+        If the above configurations are already set as `false` you should not run the below scripts.\n+    \n+    When the above configurations are turned off, you need to remove the versioning details from the database in order for the registry resources to work properly. Choose the relevant DB type and run the script against the DB that the registry resides in.\n+    \n+    ??? info \"DB Scripts\"\n+        ```tab=\"H2\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+\n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL;\n+\n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY);\n+\n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG);\n+\n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT);\n+\n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING);\n+\n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);           \n+        ```\n+    \n+        ```tab=\"DB2\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION)\n+        /\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION)\n+        /\n+\n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL\n+        /\n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY)\n+        /\n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG)\n+        /\n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT)\n+        /\n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING)\n+        /\n+\n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION)\n+        /\n+        ```\n+    \n+        ```tab=\"MSSQL\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_COMMENT SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_PROPERTY SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_RATING SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+        \n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL;\n+        \n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY);\n+        \n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG);\n+        \n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT);\n+        \n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING);\n+        \n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);  \n+        ```\n+\n+        ```tab=\"MySQL\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+\n+\n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL;\n+\n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL;\n+\n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY);\n+\n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG);\n+\n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT);\n+\n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING);\n+\n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+        ```\n+    \n+        ```tab=\"Oracle\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_PATH_ID=(SELECT REG_RESOURCE.REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION)\n+        /\n+        \n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL\n+        /\n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL\n+        /\n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY)\n+        /\n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG)\n+        /\n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT)\n+        /\n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING)\n+        /\n+        \n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_TAG.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_PROPERTY.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_COMMENT.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION)\n+        /\n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_RATING.REG_RESOURCE_NAME=(SELECT REG_RESOURCE.REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION)\n+        /\n+        ```\n+        \n+        ```tab=\"PostgreSQL\"\n+        -- Update the REG_PATH_ID column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_COMMENT SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_PROPERTY SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_RATING SET REG_PATH_ID=(SELECT REG_PATH_ID FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+        \n+        -- Delete versioned tags, were the PATH_ID will be null for older versions --\n+        delete from REG_RESOURCE_PROPERTY where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_RATING where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_TAG where REG_PATH_ID is NULL;\n+        \n+        delete from REG_RESOURCE_COMMENT where REG_PATH_ID is NULL;\n+        \n+        delete from REG_PROPERTY where REG_ID NOT IN (select REG_PROPERTY_ID from REG_RESOURCE_PROPERTY);\n+        \n+        delete from REG_TAG where REG_ID NOT IN (select REG_TAG_ID from REG_RESOURCE_TAG);\n+        \n+        delete from REG_COMMENT where REG_ID NOT IN (select REG_COMMENT_ID from REG_RESOURCE_COMMENT);\n+        \n+        delete from REG_RATING where REG_ID NOT IN (select REG_RATING_ID from REG_RESOURCE_RATING);\n+        \n+        -- Update the REG_PATH_NAME column mapped with the REG_RESOURCE table --\n+        UPDATE REG_RESOURCE_TAG SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_TAG.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_PROPERTY SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_PROPERTY.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_COMMENT SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_COMMENT.REG_VERSION);\n+        \n+        UPDATE REG_RESOURCE_RATING SET REG_RESOURCE_NAME=(SELECT REG_NAME FROM REG_RESOURCE WHERE REG_RESOURCE.REG_VERSION=REG_RESOURCE_RATING.REG_VERSION);\n+        ```\n+    \n+!!! warning \"Not recommended\"\n+    If you decide to proceed with registry resource versioning enabled, Add the following configuration to the `<NEW_API-M_HOME>/repository/conf/deployment.toml` file of new WSO2 API Manager. \n+    \n+    ```\n+    [registry.static_configuration]\n+    enable=true\n+    ```\n+    \n+    !!! note \"NOTE\"\n+        Changing these configuration should only be done before the initial API-M Server startup. If changes are done after the initial startup, the registry resource created previously will not be available.\n+\n+!!! note\n+    If you are using WSO2 Identity Server (WSO2 IS) as a Key Manager, follow the instructions in [Upgrading WSO2 IS as the Key Manager to 5.10.0](../upgrading-wso2-is-as-key-manager/upgrading-from-is-km-590-to-5100.md).\n+\n+-   [Step 1 - Migrate the API Manager configurations](#step-1-migrate-the-api-manager-configurations)\n+-   [Step 2 - Upgrade API Manager to 3.1.0](#step-2-upgrade-api-manager-to-300)\n+-   [Step 3 - Optionally, migrate the configurations for WSO2 API-M Analytics](#step-3-optionally-migrate-the-configurations-for-wso2-api-m-analytics)\n+-   [Step 4 - Restart the WSO2 API-M 3.1.0 server](#step-4-restart-the-wso2-api-m-300-server)\n+\n+### Step 1 - Migrate the API Manager configurations\n+\n+!!! warning\n+    Do not copy entire configuration files from the current version of WSO2 API Manager to the new one, as the configuration modal has been changed and now all the configurations are being done via a single file (deployment.toml). Instead, redo the configuration changes in the new configuration file. For more information refer [Configuration Catalog](../../reference/ConfigCatalog.md).\n+\n+Follow the instructions below to move all the existing API Manager configurations from the current environment to the new one.\n+\n+1.  Back up all databases in your API Manager instances along with the Synapse configurations of all the tenants and the super tenant.\n+\n+    -   The Synapse configurations of the super tenant are in the `<OLD_API-M_HOME>/repository/deployment/server/synapse-configs/default` directory.\n+\n+    -   The Synapse configurations of tenants are in the `<OLD_API-M_HOME>/repository/tenants` directory.\n+\n+    -   If you use a **clustered/distributed API Manager setup** , back up the available configurations in the **API Gateway** node.\n+\n+2.  Download [WUM updated](https://docs.wso2.com/display/updates/Getting+Started) pack for [WSO2 API Manager 3.1.0](http://wso2.com/api-management/).\n+\n+3.  Open the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file and provide the datasource configurations for the following databases.\n+\n+    -   User Store\n+    -   Registry database/s\n+    -   API Manager databases\n+\n+    !!! note\n+        In API-M 3.1.0, a combined SHARED_DB has been introduced to keep both the user related data (`WSO2UM_DB`) and the registry data (`WSO2REG_DB`). If you have used separate DBs for user management and registry in the previous version, you need to configure WSO2REG_DB and WSO2UM_DB databases separately in API-M 3.1.0 to avoid any issues.\n+\n+    SHARED_DB should point to the previous API-M version's `WSO2REG_DB`. This example shows to configure MySQL database configurations.\n+\n+    ```\n+    [database.apim_db]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/am_db\"\n+    username = \"username\"\n+    password = \"password\"\n+\n+    [database.shared_db]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/reg_db\"\n+    username = \"username\"\n+    password = \"password\"\n+    ```\n+\n+    Optionally add a new entry as below to the `deployment.toml` if you have configured a seperate user management database in the previous API-M version.\n+\n+    ```\n+    [database.user]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/um_db\"\n+    username = \"username\"\n+    password = \"password\"\n+    ```\n+\n+    !!! note\n+        If you have configured WSO2CONFIG_DB in the previous API-M version, add a new entry to the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` as below.\n+\n+        ```\n+        [database.config]\n+        type = \"mysql\"\n+        url = \"jdbc:mysql://localhost:3306/config_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        ```\n+\n+    !!! attention \"If you are using another DB type\"\n+        If you are using another DB type other than **H2** or **MySQL**, when defining the DB related configurations in the `deployment.toml` file, you need to add the `driver` and `validationQuery` parameters additionally as given below.\n+\n+        ```tab=\"MSSQL\"\n+        [database.apim_db]\n+        type = \"mssql\"\n+        url = \"jdbc:sqlserver://localhost:1433;databaseName=mig_am_db;SendStringParametersAsUnicode=false\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n+        validationQuery = \"SELECT 1\"\n+        ```\n+\n+        ```tab=\"PostgreSQL\"\n+        [database.apim_db]\n+        type = \"postgre\"\n+        url = \"jdbc:postgresql://localhost:5432/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"org.postgresql.Driver\"\n+        validationQuery = \"SELECT 1\"\n+        ```\n+\n+        ```tab=\"Oracle\"\n+        [database.apim_db]\n+        type = \"oracle\"\n+        url = \"jdbc:oracle:thin:@localhost:1521/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"oracle.jdbc.driver.OracleDriver\"\n+        validationQuery = \"SELECT 1 FROM DUAL\"\n+        ```\n+\n+        ```tab=\"DB2\"\n+        [database.apim_db]\n+        type = \"db2\"\n+        url = \"jdbc:db2://localhost:50000/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"com.ibm.db2.jcc.DB2Driver\"\n+        validationQuery = \"SELECT 1 FROM SYSIBM.SYSDUMMY1\"\n+        ```\n+\n+4.  Update `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file as follows, to point to the correct database for user management purposes.\n+\n+    ```\n+    [realm_manager]\n+    data_source = \"WSO2USER_DB\"\n+    ```\n+\n+5.  Copy the relevant JDBC driver to the `<API-M_3.1.0_HOME>/repository/components/lib` folder.\n+\n+    !!! info\n+        In API-M 3.1.0, you do not need to configure the registry configurations as you did in the `<OLD_API-M_HOME>/repository/conf/registry.xml` file and the user database configurations as you did in in the `<OLD_API-M_HOME>/repository/conf/user-mgt.xml` file, as those configurations have been handled internally.", "originalCommit": "39fe2c6ed8058e8587212671a51f06cb64d6b55c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjMxOQ==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400726319", "bodyText": "Fixed in 38ea33a", "author": "mushthaq33", "createdAt": "2020-03-31T08:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxNTIxNw=="}], "type": "inlineReview"}, {"oid": "38ea33a145c878e71ad0aa9069d0b137f4212c09", "url": "https://github.com/wso2/docs-apim/commit/38ea33a145c878e71ad0aa9069d0b137f4212c09", "message": "Adding review comments", "committedDate": "2020-03-31T08:17:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyODg3NQ==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400728875", "bodyText": "Do we need this info? AFAIK, JWT authentication will work for the APIs migrated from 3.0.0.", "author": "vithu30", "createdAt": "2020-03-31T08:23:18Z", "path": "en/docs/install-and-setup/upgrading-wso2-api-manager/upgrading-from-300-to-310.md", "diffHunk": "@@ -0,0 +1,713 @@\n+# Upgrading API Manager from 3.1.0 to 3.1.0\n+\n+The following information describes how to upgrade your API Manager server **from APIM 3.1.0 to 3.1.0**.\n+\n+!!! note\n+    Before you follow this section, see [Upgrading Process](../upgrading-wso2-api-manager/upgrading-process.md) for more information.\n+\n+!!! attention \"Before you Begin\"\n+    This release is a WUM-only release. This means that there are no manual patches. Any further fixes or latest updates for this release can be updated through the WSO2 Update Manager (WUM).\n+\n+    -   **If you are upgrading to this version, in order to use this version in your production environment** , use the WSO2 Update Manager and get the latest available updates for WSO2 API Manager 3.1.0. For more information on how to do this, see [Updating WSO2 Products](https://docs.wso2.com/display/updates/Using+WSO2+Update+Manager).\n+\n+Follow the instructions below to upgrade your WSO2 API Manager server **from WSO2 API-M 3.0.0 to 3.1.0**.\n+\n+### Preparing for Migration\n+#### Disabling versioning in the registry configuration\n+\n+If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled by default in API Manager 3.1.0.\n+\n+Therefore, when migrating to API Manager 3.1.0, it is **required** to turn off the registry versioning in your\n+current API Manager 3.0.0 version and run the below scripts against **the database that is used by the registry**.\n+\n+!!! note \"NOTE\"\n+    Alternatively, it is possible to turn on registry versioning in API Manager 3.1.0 and continue. But this is\n+    highly **NOT RECOMMENDED** and these configurations should only be changed once.\n+    \n+!!! warning \"Not recommended\"\n+    If you decide to proceed with registry resource versioning enabled, Add the following configuration to the `<NEW_API-M_HOME>/repository/conf/deployment.toml` file of new WSO2 API Manager. \n+    \n+    ```\n+    [registry.static_configuration]\n+    enable=true\n+    ```\n+    \n+    !!! note \"NOTE\"\n+        Changing these configuration should only be done before the initial API-M Server startup. If changes are done after the initial startup, the registry resource created previously will not be available.\n+\n+!!! note\n+    If you are using WSO2 Identity Server (WSO2 IS) as a Key Manager, follow the instructions in [Upgrading WSO2 IS as the Key Manager to 5.10.0](../upgrading-wso2-is-as-key-manager/upgrading-from-is-km-590-to-5100.md).\n+\n+-   [Step 1 - Migrate the API Manager configurations](#step-1-migrate-the-api-manager-configurations)\n+-   [Step 2 - Upgrade API Manager to 3.1.0](#step-2-upgrade-api-manager-to-300)\n+-   [Step 3 - Optionally, migrate the configurations for WSO2 API-M Analytics](#step-3-optionally-migrate-the-configurations-for-wso2-api-m-analytics)\n+-   [Step 4 - Restart the WSO2 API-M 3.1.0 server](#step-4-restart-the-wso2-api-m-300-server)\n+\n+### Step 1 - Migrate the API Manager configurations\n+\n+!!! warning\n+    Do not copy entire configuration files from the current version of WSO2 API Manager to the new one, as the configuration modal has been changed and now all the configurations are being done via a single file (deployment.toml). Instead, redo the configuration changes in the new configuration file. For more information refer [Configuration Catalog](../../reference/ConfigCatalog.md).\n+\n+Follow the instructions below to move all the existing API Manager configurations from the current environment to the new one.\n+\n+1.  Back up all databases in your API Manager instances along with the Synapse configurations of all the tenants and the super tenant.\n+\n+    -   The Synapse configurations of the super tenant are in the `<OLD_API-M_HOME>/repository/deployment/server/synapse-configs/default` directory.\n+\n+    -   The Synapse configurations of tenants are in the `<OLD_API-M_HOME>/repository/tenants` directory.\n+\n+    -   If you use a **clustered/distributed API Manager setup** , back up the available configurations in the **API Gateway** node.\n+\n+2.  Download [WUM updated](https://docs.wso2.com/display/updates/Getting+Started) pack for [WSO2 API Manager 3.1.0](http://wso2.com/api-management/).\n+\n+3.  Open the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file and provide the datasource configurations for the following databases.\n+\n+    -   User Store\n+    -   Registry database/s\n+    -   API Manager databases\n+\n+    !!! note\n+        In API-M 3.1.0, a combined SHARED_DB has been introduced to keep both the user related data (`WSO2UM_DB`) and the registry data (`WSO2REG_DB`). If you have used separate DBs for user management and registry in the previous version, you need to configure WSO2REG_DB and WSO2UM_DB databases separately in API-M 3.1.0 to avoid any issues.\n+\n+    SHARED_DB should point to the previous API-M version's `WSO2REG_DB`. This example shows to configure MySQL database configurations.\n+\n+    ```\n+    [database.apim_db]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/am_db\"\n+    username = \"username\"\n+    password = \"password\"\n+\n+    [database.shared_db]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/reg_db\"\n+    username = \"username\"\n+    password = \"password\"\n+    ```\n+\n+    Optionally add a new entry as below to the `deployment.toml` if you have configured a seperate user management database in the previous API-M version.\n+\n+    ```\n+    [database.user]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/um_db\"\n+    username = \"username\"\n+    password = \"password\"\n+    ```\n+\n+    !!! note\n+        If you have configured WSO2CONFIG_DB in the previous API-M version, add a new entry to the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` as below.\n+\n+        ```\n+        [database.config]\n+        type = \"mysql\"\n+        url = \"jdbc:mysql://localhost:3306/config_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        ```\n+\n+    !!! attention \"If you are using another DB type\"\n+        If you are using another DB type other than **H2** or **MySQL**, when defining the DB related configurations in the `deployment.toml` file, you need to add the `driver` and `validationQuery` parameters additionally as given below.\n+\n+        ```tab=\"MSSQL\"\n+        [database.apim_db]\n+        type = \"mssql\"\n+        url = \"jdbc:sqlserver://localhost:1433;databaseName=mig_am_db;SendStringParametersAsUnicode=false\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n+        validationQuery = \"SELECT 1\"\n+        ```\n+\n+        ```tab=\"PostgreSQL\"\n+        [database.apim_db]\n+        type = \"postgre\"\n+        url = \"jdbc:postgresql://localhost:5432/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"org.postgresql.Driver\"\n+        validationQuery = \"SELECT 1\"\n+        ```\n+\n+        ```tab=\"Oracle\"\n+        [database.apim_db]\n+        type = \"oracle\"\n+        url = \"jdbc:oracle:thin:@localhost:1521/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"oracle.jdbc.driver.OracleDriver\"\n+        validationQuery = \"SELECT 1 FROM DUAL\"\n+        ```\n+\n+        ```tab=\"DB2\"\n+        [database.apim_db]\n+        type = \"db2\"\n+        url = \"jdbc:db2://localhost:50000/mig_am_db\"\n+        username = \"username\"\n+        password = \"password\"\n+        driver = \"com.ibm.db2.jcc.DB2Driver\"\n+        validationQuery = \"SELECT 1 FROM SYSIBM.SYSDUMMY1\"\n+        ```\n+\n+4.  Update `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file as follows, to point to the correct database for user management purposes.\n+\n+    ```\n+    [realm_manager]\n+    data_source = \"WSO2USER_DB\"\n+    ```\n+\n+5.  Copy the relevant JDBC driver to the `<API-M_3.1.0_HOME>/repository/components/lib` folder.\n+\n+\n+6.  Move all your Synapse configurations to API-M 3.1.0 pack.\n+    -   Move your Synapse super tenant configurations.\n+        Copy the contents in the `<OLD_API-M_HOME>/repository/deployment/server/synapse-configs/default` directory and replace the contents in the `<API-M_3.1.0_HOME>/repository/deployment/server/synapse-configs/default` directory with the copied contents.\n+    -   Move all your tenant Synapse configurations.\n+        Copy the contents in the `<OLD_API-M_HOME>/repository/tenants` directory and replace the contents in the `<API-M_3.1.0_HOME>/repository/tenants` directory with the copied contents.\n+\n+    !!! warning\n+        When moving the Synapse configurations, **do not replace** the following set of files as they contain some modificatiosn in API-M 3.1.0 version.\n+\n+        -   /api/\\_RevokeAPI_.xml\n+        -   /sequences/\\_cors_request_handler_.xml\n+        -   /sequences/main.xml\n+\n+    !!! attention \n+        If you are working with a **clustered/distributed API Manager setup**, follow this step on the **Gateway** node.\n+\n+7.  Move all your Execution plans from `<API-M_3.0.0_HOME>/repository/deployment/server/executionplans` directory to `<API-M_3.1.0_HOME>/repository/deployment/server/executionplans` directory.\n+\n+    !!! note\n+        If you are working with a **clustered/distributed API Manager setup**, follow this step on the **Traffic Manager** node.\n+\n+8.  If you manually added any custom OSGI bundles to the `<API-M_3.0.0_HOME>/repository/components/dropins` directory, copy those to the `<API-M_3.1.0_HOME>/repository/components/dropins` directory. \n+\n+9.  If you manually added any JAR files to the `<API-M_3.0.0_HOME>/repository/components/lib` directory, copy those and paste them in the `<API-M_3.1.0_HOME>/repository/components/lib` directory.\n+\n+### Step 2 - Upgrade API Manager to 3.1.0\n+\n+1.  Stop all WSO2 API Manager server instances that are running.\n+\n+2.  Make sure you backed up all the databases and Synapse configurations as instructed in [step 1](#step-1-migrate-the-api-manager-configurations) of the previous section.\n+\n+3.  Upgrade the WSO2 API Manager database from version 3.0.0 to version 3.1.0 by executing the relevant database script, from the scripts that are provided below, on the `WSO2AM_DB` database.\n+\n+    ??? info \"DB Scripts\"\n+        ```tab=\"H2\"\n+        CREATE TABLE IF NOT EXISTS AM_API_CATEGORIES (\n+            UUID VARCHAR(50),\n+            NAME VARCHAR(255),\n+            DESCRIPTION VARCHAR(1024),\n+            TENANT_ID INTEGER,\n+            UNIQUE (NAME,TENANT_ID),\n+            PRIMARY KEY (UUID)\n+        );\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        ADD TENANT_DOMAIN VARCHAR(255) DEFAULT 'carbon.super';\n+\n+        CREATE TABLE IF NOT EXISTS AM_USER (\n+            USER_ID VARCHAR(255) NOT NULL,\n+            USER_NAME VARCHAR(255) NOT NULL,\n+            PRIMARY KEY(USER_ID)\n+        );\n+\n+        CREATE TABLE IF NOT EXISTS AM_SECURITY_AUDIT_UUID_MAPPING (\n+            API_ID INTEGER NOT NULL,\n+            AUDIT_UUID VARCHAR(255) NOT NULL,\n+            PRIMARY KEY (API_ID),\n+            FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID)\n+        );           \n+        ```\n+    \n+        ```tab=\"DB2\"\n+        CREATE TABLE AM_API_CATEGORIES (\n+            UUID VARCHAR(50) NOT NULL,\n+            NAME VARCHAR(255) NOT NULL,\n+            DESCRIPTION VARCHAR(1024),\n+            TENANT_ID INTEGER NOT NULL DEFAULT -1,\n+            UNIQUE (NAME,TENANT_ID),\n+            PRIMARY KEY (UUID)\n+        ) /\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        ADD TENANT_DOMAIN VARCHAR(255) DEFAULT 'carbon.super'\n+        /\n+\n+        CREATE TABLE AM_USER (\n+            USER_ID VARCHAR(255) NOT NULL,\n+            USER_NAME VARCHAR(255) NOT NULL,\n+            PRIMARY KEY(USER_ID)\n+        ) /\n+\n+        CREATE TABLE AM_SECURITY_AUDIT_UUID_MAPPING (\n+            API_ID INTEGER NOT NULL,\n+            AUDIT_UUID VARCHAR(255) NOT NULL,\n+            PRIMARY KEY (API_ID),\n+            FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID)\n+        ) /\n+        ```\n+\n+        ```tab=\"MSSQL\"\n+        IF NOT  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[AM_API_CATEGORIES]') AND TYPE IN (N'U'))\n+        CREATE TABLE AM_API_CATEGORIES (\n+            UUID VARCHAR(50),\n+            NAME VARCHAR(255),\n+            DESCRIPTION VARCHAR(1024),\n+            TENANT_ID INTEGER DEFAULT -1,\n+            UNIQUE (NAME,TENANT_ID),\n+            PRIMARY KEY (UUID)\n+        );\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        ADD TENANT_DOMAIN VARCHAR(255) DEFAULT 'carbon.super';\n+\n+        IF NOT  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[AM_USER]') AND TYPE IN (N'U'))\n+        CREATE TABLE AM_USER (\n+            USER_ID VARCHAR(255) NOT NULL,\n+            USER_NAME VARCHAR(255) NOT NULL,\n+            PRIMARY KEY(USER_ID)\n+        );\n+\n+        IF NOT  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[AM_SECURITY_AUDIT_UUID_MAPPING]') AND TYPE IN (N'U'))\n+        CREATE TABLE AM_SECURITY_AUDIT_UUID_MAPPING (\n+            API_ID INTEGER NOT NULL,\n+            AUDIT_UUID VARCHAR(255) NOT NULL,\n+            PRIMARY KEY (API_ID),\n+            FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID)\n+        );\n+        ```\n+\n+        ```tab=\"MySQL\"\n+        CREATE TABLE IF NOT EXISTS AM_API_CATEGORIES (\n+            UUID VARCHAR(50),\n+            NAME VARCHAR(255),\n+            DESCRIPTION VARCHAR(1024),\n+            TENANT_ID INTEGER DEFAULT -1,\n+            UNIQUE (NAME,TENANT_ID),\n+            PRIMARY KEY (UUID)\n+        ) ENGINE=InnoDB;\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        ADD TENANT_DOMAIN VARCHAR(255) DEFAULT 'carbon.super';\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        DROP INDEX NAME;\n+\n+        CREATE TABLE IF NOT EXISTS AM_USER (\n+            USER_ID VARCHAR(255) NOT NULL,\n+            USER_NAME VARCHAR(255) NOT NULL,\n+            PRIMARY KEY(USER_ID)\n+        ) ENGINE=InnoDB;\n+\n+        CREATE TABLE IF NOT EXISTS AM_SECURITY_AUDIT_UUID_MAPPING (\n+            API_ID INTEGER NOT NULL,\n+            AUDIT_UUID VARCHAR(255) NOT NULL,\n+            PRIMARY KEY (API_ID),\n+            FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID)\n+        ) ENGINE INNODB;\n+        ```\n+    \n+        ```tab=\"Oracle\"\n+        CREATE TABLE AM_API_CATEGORIES (\n+            UUID VARCHAR2(50),\n+            NAME VARCHAR2(255) NOT NULL,\n+            DESCRIPTION VARCHAR2(1024),\n+            TENANT_ID INTEGER DEFAULT -1,\n+            UNIQUE (NAME,TENANT_ID),\n+            PRIMARY KEY (UUID)\n+        )\n+        /\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        ADD TENANT_DOMAIN VARCHAR2(255) DEFAULT 'carbon.super'\n+        /\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        DROP UNIQUE (NAME)\n+        /\n+\n+        CREATE TABLE AM_USER (\n+            USER_ID VARCHAR(255) NOT NULL,\n+            USER_NAME VARCHAR(255) NOT NULL,\n+            PRIMARY KEY(USER_ID)\n+        )\n+        /\n+\n+        CREATE TABLE AM_SECURITY_AUDIT_UUID_MAPPING (\n+            API_ID INTEGER NOT NULL,\n+            AUDIT_UUID VARCHAR(255) NOT NULL,\n+            PRIMARY KEY (API_ID),\n+            FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID)\n+        )\n+        /\n+        ```\n+        \n+        ```tab=\"PostgreSQL\"\n+        DROP TABLE IF EXISTS AM_API_CATEGORIES;\n+        CREATE TABLE IF NOT EXISTS AM_API_CATEGORIES (\n+            UUID VARCHAR(50),\n+            NAME VARCHAR(255),\n+            DESCRIPTION VARCHAR(1024),\n+            TENANT_ID INTEGER DEFAULT -1,\n+            UNIQUE (NAME,TENANT_ID),\n+            PRIMARY KEY (UUID)\n+        );\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        ADD TENANT_DOMAIN VARCHAR(255) DEFAULT 'carbon.super';\n+\n+        ALTER TABLE AM_SYSTEM_APPS\n+        DROP CONSTRAINT AM_SYSTEM_APPS_NAME_KEY;\n+\n+        DROP TABLE IF EXISTS AM_USER;\n+        CREATE TABLE IF NOT EXISTS AM_USER (\n+            USER_ID VARCHAR(255) NOT NULL,\n+            USER_NAME VARCHAR(255) NOT NULL,\n+            PRIMARY KEY(USER_ID)\n+        );\n+\n+        DROP TABLE IF EXISTS AM_SECURITY_AUDIT_UUID_MAPPING;\n+        CREATE TABLE IF NOT EXISTS AM_SECURITY_AUDIT_UUID_MAPPING (\n+            API_ID INTEGER NOT NULL,\n+            AUDIT_UUID VARCHAR(255) NOT NULL,\n+            PRIMARY KEY (API_ID),\n+            FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID)\n+        );\n+        ```\n+\n+4.  Copy the keystores (i.e., `client-truststore.jks`, `wso2cabon.jks` and any other custom JKS) used in the previous version and replace the existing keystores in the `<API-M_3.1.0_HOME>/repository/resources/security` directory.\n+\n+    !!! note \"If you have enabled Secure Vault\"\n+        If you have enabled secure vault in the previous API-M version, you need to add the property values again according to the new config modal and run the script as below. Please refer [Encrypting Passwords in Configuration files](../../administer/product-security/logins-and-passwords/working-with-encrypted-passwords.md) for more details.\n+\n+        ```tab=\"Linux\"\n+        ./ciphertool.sh -Dconfigure\n+        ```\n+\n+        ```tab=\"Windows\"\n+        ./ciphertool.bat -Dconfigure\n+        ```\n+\n+5.  Upgrade the Identity component in\u00a0WSO2 API Manager from version 5.9.0 to 5.10.0.\n+\n+    !!! note\n+        As WSO2 API-M shares identity components with WSO2 Identity Sever (WSO2 IS), this step is necessary to upgrade those components (even if you are not using WSO2 IS as a Key Manager).\n+\n+    1.  Download the identity component migration resources\u00a0and unzip it in a local directory.\n+\n+         Navigate to the [latest release tag](https://github.com/wso2-extensions/identity-migration-resources/releases/latest) and download the `wso2is-migration-x.x.x.zip` under Assets. Let's refer to this directory that you downloaded and extracted as `<IS_MIGRATION_TOOL_HOME>`. \n+\n+    2.  Copy the `migration-resources` folder from the extracted folder to the `<API-M_3.1.0_HOME>` directory.\n+\n+    3.  Open the `migration-config.yaml` file in the migration-resources directory and make sure that the `currentVersion` element is set to 5.9.0, as shown below.\n+\n+        ``` java\n+        migrationEnable: \"true\"\n+        currentVersion: \"5.9.0\"\n+        migrateVersion: \"5.10.0\"\n+        ```\n+\n+        !!! note\n+            Make sure you have enabled migration by setting the `migrationEnable` element to `true` as shown above.\n+\n+    4.  Copy the `org.wso2.carbon.is.migration-x.x.x.jar` from the `<IS_MIGRATION_TOOL_HOME>/dropins` directory to the `<API-M_3.1.0_HOME>/repository/components/dropins` directory.\n+\n+    5. Update <API-M_3.1.0_HOME>/repository/conf/deployment.toml file as follows, to point to the previous user store.\n+    \n+        ```\n+        [user_store]\n+        type = \"database\"\n+        ```\n+\n+    6.  Start WSO2 API Manager 3.1.0 as follows to carry out the complete Identity component migration.\n+\n+        ```tab=\"Linux / Mac OS\"\n+        sh wso2server.sh -Dmigrate -Dcomponent=identity\n+        ```\n+\n+        ```tab=\"Windows\"\n+        wso2server.bat -Dmigrate -Dcomponent=identity\n+        ```\n+\n+        !!! note\n+            Please note that depending on the number of records in the identity tables, this identity component migration will take a considerable amount of time to finish. Do not stop the server during the migration process and please wait until the migration process finish completely and server get started.\n+\n+        !!! note\n+            Please note that if you want to use the latest user store, please update the <API-M_3.1.0_HOME>/repository/conf/deployment.toml as follows,\n+\n+            ```\n+            [user_store]\n+            type = \"database_unique_id\"\n+            ```\n+\n+        !!! warning \"Troubleshooting\"\n+            When running the above step if you encounter the following error message, please follow the steps in this section. Please note that this error could occur only if the identity tables contain a huge volume of data.\n+\n+            Sample exception stack trace is given below.\n+            ```\n+            ERROR {org.wso2.carbon.registry.core.dataaccess.TransactionManager} -  Failed to start new registry transaction. {org.wso2.carbon.registry.core.dataaccess.TransactionManager} org.apache.tomcat.jdbc.pool.PoolExhaustedException: [pool-30-thread-11] Timeout: Pool empty. Unable to fetch a connection in 60 seconds, none available[size:50; busy:50; idle:0; lastwait:60000\n+            ```\n+\n+            1.  Add the following property in `<API-M_HOME>/repository/conf/deployment.toml` to a higher value (e.g., 10)\n+                ```\n+                [indexing]\n+                frequency= 10\n+                ```\n+\n+            2.  Re-run the command above.\n+\n+            **Make sure to revert the change done in Step 1 , after the migration is complete.**\n+\n+    6.  After you have successfully completed the migration, stop the server and remove the following files and folders.\n+\n+        -   Remove the `org.wso2.carbon.is.migration-x.x.x.jar` file, which is in the `<API-M_3.1.0_HOME>/repository/components/dropins` directory.\n+\n+        -   Remove the `migration-resources` directory, which is in the `<API-M_3.1.0_HOME>` directory.\n+\n+        -   If you ran WSO2 API-M as a Windows Service when doing the identity component migration , then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the wso2server.bat file.\n+\n+            ```\n+            -Dmigrate -Dcomponent=identity\n+            ```\n+\n+6.  Re-index the artifacts in the registry.\n+\n+    1.  Run the [reg-index.sql](../../assets/attachments/install-and-setup/reg-index.sql) script against the `SHARED_DB` database.\n+\n+        !!! note\n+            Please note that depending on the number of records in the REG_LOG table, this script will take a considerable amount of time to finish. Do not stop the execution of script until it is completed.\n+\n+    2.  Add the [tenantloader-1.0.jar](../../assets/attachments/install-and-setup/tenantloader-1.0.jar) to `<API-M_3.1.0_HOME>/repository/components/dropins` directory.\n+\n+        !!! attantion\n+            If you are working with a **clustered/distributed API Manager setup**, follow this step on the **Store and Publisher** nodes.\n+\n+        !!! note\n+            You need to do this step, if you have **multiple tenants** only.\n+\n+    3.  Rename the **<lastAccessTimeLocation>** element by adding the following configuration in `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file.\n+        \n+        ```\n+        [indexing]\n+        re_indexing= 1\n+        ```\n+\n+        !!! info \n+            If you use a clustered/distributed API Manager setup, change the file in the API Publisher node. For example, change the /_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime registry path to /_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime_1\n+\n+    4.  If the `<API-M_3.1.0_HOME>/solr` directory exists, take a backup and thereafter delete it.\n+\n+    5.  Start the WSO2 API-M server.\n+\n+    6.  Stop the WSO2 API-M server and remove the `tenantloader-1.0.jar` from the `<API-M_3.1.0_HOME>/repository/components/dropins` directory.\n+\n+### Step 3 - Optionally, migrate the configurations for WSO2 API-M Analytics\n+\n+!!! warning\n+    This step is **only required** if you have WSO2 API-M-Analytics configured in your current deployment.\n+\n+Follow the steps below to migrate APIM Analytics 3.0.0 to APIM Analytics 3.1.0\n+\n+#### Step 3.1 - Migrating the Analytics Database\n+\n+Upgrade the WSO2 API Manager Analytics database from version 3.0.0 to version 3.1.0 by executing the relevant database script, from the scripts that are provided below, on the `APIM_ANALYTICS_DB` database.\n+\n+??? info \"DB Scripts\"\n+    ```tab=\"H2\"\n+    ALTER TABLE APILASTACCESSSUMMARY DROP PRIMARY KEY;\n+    ALTER TABLE APILASTACCESSSUMMARY ALTER COLUMN APIVERSION VARCHAR(254) NOT NULL;\n+    ALTER TABLE APILASTACCESSSUMMARY ADD PRIMARY KEY (APINAME,APIVERSION,APICREATOR,APICREATORTENANTDOMAIN);           \n+    ```\n+    \n+    ```tab=\"DB2\"\n+    ALTER TABLE APILASTACCESSSUMMARY DROP PRIMARY KEY;\n+    ALTER TABLE APILASTACCESSSUMMARY ALTER COLUMN APIVERSION VARCHAR(254) NOT NULL;\n+    ALTER TABLE APILASTACCESSSUMMARY ADD PRIMARY KEY (APINAME,APIVERSION,APICREATOR,APICREATORTENANTDOMAIN);\n+    ```\n+\n+    ```tab=\"MSSQL\"\n+    DECLARE @con_com as VARCHAR(8000);\n+    SET @con_com = (SELECT name from sys.objects where parent_object_id=object_id('APILASTACCESSSUMMARY') AND type='PK');\n+    EXEC('ALTER TABLE APILASTACCESSSUMMARY DROP CONSTRAINT ' + @con_com);\n+    ALTER TABLE APILASTACCESSSUMMARY ALTER COLUMN APIVERSION VARCHAR(254) NOT NULL;\n+    ALTER TABLE APILASTACCESSSUMMARYADD PRIMARY KEY (APINAME,APICREATOR,APIVERSION,APICREATORTENANTDOMAIN);\n+    ```\n+\n+    ```tab=\"MySQL\"\n+    ALTER TABLE APILASTACCESSSUMMARY DROP PRIMARY KEY;\n+    ALTER TABLE APILASTACCESSSUMMARY ADD PRIMARY KEY (APINAME,APICREATOR,APIVERSION,APICREATORTENANTDOMAIN);\n+    ```\n+    \n+    ```tab=\"Oracle\"\n+    ALTER TABLE APILASTACCESSSUMMARY DROP PRIMARY KEY;\n+    ALTER TABLE APILASTACCESSSUMMARY ADD PRIMARY KEY (APINAME,APICREATOR,APIVERSION,APICREATORTENANTDOMAIN);\n+    ```\n+        \n+    ```tab=\"PostgreSQL\"\n+    ALTER TABLE APILASTACCESSSUMMARY DROP CONSTRAINT APILASTACCESSSUMMARY_pkey;\n+    ALTER TABLE APILASTACCESSSUMMARY ADD PRIMARY KEY (APINAME,APICREATOR,APIVERSION,APICREATORTENANTDOMAIN);\n+    ```\n+\n+#### Step 3.2 - Configure WSO2 API-M Analytics 3.1.0\n+\n+!!! note\n+    -   In API-M 3.0.0, when working with API-M Analytics, only the worker profile has been used by default and dashboard profile is used only when there are custom dashboards.\n+    -   Now with API-M 3.1.0, both the worker and dashboard profiles are being used. The default Store and Publisher dashboards are now being moved to the Analytics dashboard server side and they have been removed from the API-M side.\n+    -   The same set of DBs will be used in the Analytics side and additionally you need to share the WSO2AM_DB with the dashboard server node.\n+\n+Follow the instructions below to configure WSO2 API Manager Analytics for the WSO2 API-M Analytics migration in order to migrate the statistics related data.\n+\n+1.  Download [WUM updated](https://docs.wso2.com/display/updates/Getting+Started) pack for [WSO2 API Manager Analytics 3.1.0](http://wso2.com/api-management/).\n+\n+    !!! note\n+        It is **mandatory** to use a WUM updated WSO2 API Manager Analytics 3.1.0 pack when migrating the configurations for WSO2 API-M Analytics.\n+\n+2.  Configure the following 2 datasources in the `<API-M_ANALYTICS_3.1.0_HOME>/conf/dashboard/deployment.yaml` file by pointing to the **old** `WSO2AM_DB` and `APIM_ANALYTICS_DB`.\n+\n+    ``` java\n+    #Data source for APIM Analytics\n+    - name: APIM_ANALYTICS_DB\n+        description: Datasource used for APIM Analytics\n+        jndiConfig:\n+        name: jdbc/APIM_ANALYTICS_DB\n+        definition:\n+        type: RDBMS\n+        configuration:\n+            jdbcUrl: 'jdbc:mysql://localhost:3306/analytics_db'\n+            username: root\n+            password: root\n+            driverClassName: com.mysql.jdbc.Driver\n+            maxPoolSize: 50\n+            idleTimeout: 60000\n+            connectionTestQuery: SELECT 1\n+            validationTimeout: 30000\n+            isAutoCommit: false\n+\n+    #Main datasource used in API Manager\n+    - name: AM_DB\n+        description: Main datasource used by API Manager\n+        jndiConfig:\n+        name: jdbc/AM_DB\n+        definition:\n+        type: RDBMS\n+        configuration:\n+            jdbcUrl: \"jdbc:mysql://localhost:3306/am_db\"\n+            username: root\n+            password: root\n+            driverClassName: com.mysql.jdbc.Driver\n+            maxPoolSize: 10\n+            idleTimeout: 60000\n+            connectionTestQuery: SELECT 1\n+            validationTimeout: 30000\n+            isAutoCommit: false\n+    ```\n+\n+3.  Configure the following datasource in the `<API-M_ANALYTICS_3.1.0_HOME>/conf/worker/deployment.yaml` file by pointing to the **old** `APIM_ANALYTICS_DB`.\n+\n+    ``` java\n+    #Data source for APIM Analytics\n+    - name: APIM_ANALYTICS_DB\n+      description: \"The datasource used for APIM statistics aggregated data.\"\n+      jndiConfig:\n+        name: jdbc/APIM_ANALYTICS_DB\n+      definition:\n+        type: RDBMS\n+        configuration:\n+          jdbcUrl: 'jdbc:mysql://localhost:3306/analytics_db'\n+          username: root\n+          password: root\n+          driverClassName: com.mysql.jdbc.Driver\n+          maxPoolSize: 50\n+          idleTimeout: 60000\n+          connectionTestQuery: SELECT 1\n+          validationTimeout: 30000\n+          isAutoCommit: false\n+    ```\n+\n+4.  Copy the relevant JDBC driver OSGI bundle to the `<APIM_ANALYTICS_3.1.0_HOME>/lib` folder.\n+\n+    !!! info \"To convert the jar files to OSGi bundles, follow the steps given below.\"\n+        1. Download the non-OSGi jar for the required third party product, and save it in a preferred directory in your machine.\n+        2. Go to the `<API-M_ANALYTICS_HOME>/bin` directory. Run the command given below, to generate the converted file in the `<API-M_ANALYTICS_HOME>/lib` directory.\n+\n+        ```\n+        ./jartobundle.sh <PATH_TO_NON-OSGi_JAR> ../lib\n+        ```\n+\n+5.  Start the Worker and Dashboard profiles as below by navigating to `<API-M_ANALYTICS_3.1.0_HOME>/bin` location.\n+    \n+    ```tab=\"Worker\"\n+    sh worker.sh\n+    ```\n+\n+    ```tab=\"Dashboard\"\n+    sh dashboard.sh\n+    ```\n+\n+!!! note\n+    If you have developed any custom dashboards in API-M 3.0.0 Analytics using Stream Processor, you will be able to use the same in API-M Anaytics 3.1.0 as well. If you require any guidance regarding this, you can contact [WSO2 Support](https://support.wso2.com/jira/secure/Dashboard.jspa).\n+\n+#### Step 3.3 - Configure WSO2 API-M 3.1.0 for Analytics\n+\n+Follow the instructions below to configure WSO2 API Manager for the WSO2 API-M Analytics migration in order to migrate the statistics related data.\n+\n+1.  Configure the following datasources in the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file.\n+\n+    The following is an example of how the configurations should be defined when using MySQL.\n+\n+    This datasource points to the **previous API-M version's WSO2AM_DB datasource.**\n+\n+    ``` java\n+    [database.apim_db]\n+    type = \"mysql\"\n+    url = \"jdbc:mysql://localhost:3306/am_db\"\n+    username = \"username\"\n+    password = \"password\"\n+    ```\n+\n+2.  Enable analytics in WSO2 API-M by setting the following configuration to true in the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file.\n+\n+    ``` java\n+    [apim.analytics]\n+    enable = true\n+    ```\n+\n+### Step 4 - Restart the WSO2 API-M 3.1.0 server\n+\n+1.  Restart the WSO2 API-M server.\n+\n+    ```tab=\"Linux / Mac OS\"\n+    sh wso2server.sh\n+    ```\n+\n+    ```tab=\"Windows\"\n+    wso2server.bat\n+    ```\n+\n+    !!! note \"If you have enabled Analytics\"\n+        After starting the WSO2 API-M server and the WSO2 API-M Analytics 3.1.0 server from worker and dashboard profiles, the dashboards can be accessed via `https://<dashboard-server-host-name>:9643/analytics-dashboard` link.\n+\n+        !!! warning\n+            Make sure you have started the API-M server node before accessing the Dashboard profile as the authentication happens via the API-M's authentication admin service.\n+\n+This concludes the upgrade process.\n+\n+!!! tip\n+    The migration client that you use in this guide automatically migrates your tenants, workflows, external user stores, etc. to the upgraded environment. Therefore, there is no need to migrate them manually.\n+\n+!!! note\n+    If you are using a migrated API and wants to consume it via an application which supports JWT authentication (default type in API-M 3.1.0), you need to republish the API. Without republishing the API, JWT authentication doesn't work as it looks for a local entry which will get populated while publishing.", "originalCommit": "38ea33a145c878e71ad0aa9069d0b137f4212c09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NDM2MQ==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400744361", "bodyText": "Yes this is correct. It can be useful when they have created OAUTH2 application in 3.0.0. But if they have created an OAUTH2 application in 3.0.0 they would want to continue using the APIs with OAUTH2 itself. Hence, resolved with 02d0d1b", "author": "mushthaq33", "createdAt": "2020-03-31T08:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyODg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTkzNg==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400729936", "bodyText": "Shall we change the version as 310 here?", "author": "vithu30", "createdAt": "2020-03-31T08:24:49Z", "path": "en/docs/install-and-setup/upgrading-wso2-api-manager/upgrading-from-300-to-310.md", "diffHunk": "@@ -0,0 +1,713 @@\n+# Upgrading API Manager from 3.1.0 to 3.1.0\n+\n+The following information describes how to upgrade your API Manager server **from APIM 3.1.0 to 3.1.0**.\n+\n+!!! note\n+    Before you follow this section, see [Upgrading Process](../upgrading-wso2-api-manager/upgrading-process.md) for more information.\n+\n+!!! attention \"Before you Begin\"\n+    This release is a WUM-only release. This means that there are no manual patches. Any further fixes or latest updates for this release can be updated through the WSO2 Update Manager (WUM).\n+\n+    -   **If you are upgrading to this version, in order to use this version in your production environment** , use the WSO2 Update Manager and get the latest available updates for WSO2 API Manager 3.1.0. For more information on how to do this, see [Updating WSO2 Products](https://docs.wso2.com/display/updates/Using+WSO2+Update+Manager).\n+\n+Follow the instructions below to upgrade your WSO2 API Manager server **from WSO2 API-M 3.0.0 to 3.1.0**.\n+\n+### Preparing for Migration\n+#### Disabling versioning in the registry configuration\n+\n+If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled by default in API Manager 3.1.0.\n+\n+Therefore, when migrating to API Manager 3.1.0, it is **required** to turn off the registry versioning in your\n+current API Manager 3.0.0 version and run the below scripts against **the database that is used by the registry**.\n+\n+!!! note \"NOTE\"\n+    Alternatively, it is possible to turn on registry versioning in API Manager 3.1.0 and continue. But this is\n+    highly **NOT RECOMMENDED** and these configurations should only be changed once.\n+    \n+!!! warning \"Not recommended\"\n+    If you decide to proceed with registry resource versioning enabled, Add the following configuration to the `<NEW_API-M_HOME>/repository/conf/deployment.toml` file of new WSO2 API Manager. \n+    \n+    ```\n+    [registry.static_configuration]\n+    enable=true\n+    ```\n+    \n+    !!! note \"NOTE\"\n+        Changing these configuration should only be done before the initial API-M Server startup. If changes are done after the initial startup, the registry resource created previously will not be available.\n+\n+!!! note\n+    If you are using WSO2 Identity Server (WSO2 IS) as a Key Manager, follow the instructions in [Upgrading WSO2 IS as the Key Manager to 5.10.0](../upgrading-wso2-is-as-key-manager/upgrading-from-is-km-590-to-5100.md).\n+\n+-   [Step 1 - Migrate the API Manager configurations](#step-1-migrate-the-api-manager-configurations)\n+-   [Step 2 - Upgrade API Manager to 3.1.0](#step-2-upgrade-api-manager-to-300)", "originalCommit": "38ea33a145c878e71ad0aa9069d0b137f4212c09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NDQ0Nw==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400744447", "bodyText": "Fixed with 02d0d1b", "author": "mushthaq33", "createdAt": "2020-03-31T08:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMTQwNQ==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400731405", "bodyText": "Shall we remove the line saying - In API-M 3.1.0, a combined SHARED_DB has been introduced to keep both the user related data (WSO2UM_DB) and the registry data (WSO2REG_DB).  as it is the same behavior in 3.0.0", "author": "vithu30", "createdAt": "2020-03-31T08:27:04Z", "path": "en/docs/install-and-setup/upgrading-wso2-api-manager/upgrading-from-300-to-310.md", "diffHunk": "@@ -0,0 +1,713 @@\n+# Upgrading API Manager from 3.1.0 to 3.1.0\n+\n+The following information describes how to upgrade your API Manager server **from APIM 3.1.0 to 3.1.0**.\n+\n+!!! note\n+    Before you follow this section, see [Upgrading Process](../upgrading-wso2-api-manager/upgrading-process.md) for more information.\n+\n+!!! attention \"Before you Begin\"\n+    This release is a WUM-only release. This means that there are no manual patches. Any further fixes or latest updates for this release can be updated through the WSO2 Update Manager (WUM).\n+\n+    -   **If you are upgrading to this version, in order to use this version in your production environment** , use the WSO2 Update Manager and get the latest available updates for WSO2 API Manager 3.1.0. For more information on how to do this, see [Updating WSO2 Products](https://docs.wso2.com/display/updates/Using+WSO2+Update+Manager).\n+\n+Follow the instructions below to upgrade your WSO2 API Manager server **from WSO2 API-M 3.0.0 to 3.1.0**.\n+\n+### Preparing for Migration\n+#### Disabling versioning in the registry configuration\n+\n+If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled by default in API Manager 3.1.0.\n+\n+Therefore, when migrating to API Manager 3.1.0, it is **required** to turn off the registry versioning in your\n+current API Manager 3.0.0 version and run the below scripts against **the database that is used by the registry**.\n+\n+!!! note \"NOTE\"\n+    Alternatively, it is possible to turn on registry versioning in API Manager 3.1.0 and continue. But this is\n+    highly **NOT RECOMMENDED** and these configurations should only be changed once.\n+    \n+!!! warning \"Not recommended\"\n+    If you decide to proceed with registry resource versioning enabled, Add the following configuration to the `<NEW_API-M_HOME>/repository/conf/deployment.toml` file of new WSO2 API Manager. \n+    \n+    ```\n+    [registry.static_configuration]\n+    enable=true\n+    ```\n+    \n+    !!! note \"NOTE\"\n+        Changing these configuration should only be done before the initial API-M Server startup. If changes are done after the initial startup, the registry resource created previously will not be available.\n+\n+!!! note\n+    If you are using WSO2 Identity Server (WSO2 IS) as a Key Manager, follow the instructions in [Upgrading WSO2 IS as the Key Manager to 5.10.0](../upgrading-wso2-is-as-key-manager/upgrading-from-is-km-590-to-5100.md).\n+\n+-   [Step 1 - Migrate the API Manager configurations](#step-1-migrate-the-api-manager-configurations)\n+-   [Step 2 - Upgrade API Manager to 3.1.0](#step-2-upgrade-api-manager-to-300)\n+-   [Step 3 - Optionally, migrate the configurations for WSO2 API-M Analytics](#step-3-optionally-migrate-the-configurations-for-wso2-api-m-analytics)\n+-   [Step 4 - Restart the WSO2 API-M 3.1.0 server](#step-4-restart-the-wso2-api-m-300-server)\n+\n+### Step 1 - Migrate the API Manager configurations\n+\n+!!! warning\n+    Do not copy entire configuration files from the current version of WSO2 API Manager to the new one, as the configuration modal has been changed and now all the configurations are being done via a single file (deployment.toml). Instead, redo the configuration changes in the new configuration file. For more information refer [Configuration Catalog](../../reference/ConfigCatalog.md).\n+\n+Follow the instructions below to move all the existing API Manager configurations from the current environment to the new one.\n+\n+1.  Back up all databases in your API Manager instances along with the Synapse configurations of all the tenants and the super tenant.\n+\n+    -   The Synapse configurations of the super tenant are in the `<OLD_API-M_HOME>/repository/deployment/server/synapse-configs/default` directory.\n+\n+    -   The Synapse configurations of tenants are in the `<OLD_API-M_HOME>/repository/tenants` directory.\n+\n+    -   If you use a **clustered/distributed API Manager setup** , back up the available configurations in the **API Gateway** node.\n+\n+2.  Download [WUM updated](https://docs.wso2.com/display/updates/Getting+Started) pack for [WSO2 API Manager 3.1.0](http://wso2.com/api-management/).\n+\n+3.  Open the `<API-M_3.1.0_HOME>/repository/conf/deployment.toml` file and provide the datasource configurations for the following databases.\n+\n+    -   User Store\n+    -   Registry database/s\n+    -   API Manager databases\n+\n+    !!! note\n+        In API-M 3.1.0, a combined SHARED_DB has been introduced to keep both the user related data (`WSO2UM_DB`) and the registry data (`WSO2REG_DB`). If you have used separate DBs for user management and registry in the previous version, you need to configure WSO2REG_DB and WSO2UM_DB databases separately in API-M 3.1.0 to avoid any issues.", "originalCommit": "38ea33a145c878e71ad0aa9069d0b137f4212c09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NTA5MQ==", "url": "https://github.com/wso2/docs-apim/pull/946#discussion_r400745091", "bodyText": "Yes removed it. But kept the remaining part as there might be users who still uses two separate DBs. Resolved with 02d0d1b", "author": "mushthaq33", "createdAt": "2020-03-31T08:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMTQwNQ=="}], "type": "inlineReview"}, {"oid": "02d0d1b869f0f90576477aead17e8dfa5c919384", "url": "https://github.com/wso2/docs-apim/commit/02d0d1b869f0f90576477aead17e8dfa5c919384", "message": "Adding review comments", "committedDate": "2020-03-31T08:47:08Z", "type": "commit"}]}