{"pr_number": 627, "pr_title": "Update \"Changing to Remote H2\" documentation", "pr_createdAt": "2020-01-06T08:46:50Z", "pr_url": "https://github.com/wso2/docs-apim/pull/627", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIwNTgzNQ==", "url": "https://github.com/wso2/docs-apim/pull/627#discussion_r363205835", "bodyText": "Let's change MySQL to remote H2 here", "author": "npamudika", "createdAt": "2020-01-06T08:59:25Z", "path": "en/docs/InstallAndSetup/SettingUpDatabases/ChangingDefaultDatabases/changing-to-remote-h2.md", "diffHunk": "@@ -1,429 +1,147 @@\n-# Setting up Embedded H2\n-\n-The following sections describe how to set up an embedded H2 database to replace the default H2 database in your WSO2 product:\n+# Changing to Remote H2\n \n--   [Setting up the database](#SettingupEmbeddedH2-Settingupthedatabase)\n--   [Setting up the drivers](#SettingupEmbeddedH2-Settingupthedrivers)\n+By default, WSO2 API Manager uses the embedded H2 database as the database for storing user management and registry data. Given below are the steps you need to follow in order to use Remote H2 for this purpose.\n \n !!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n+    H2 is not recommended in production.\n+    \n+    The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL or MS SQL instead.\n+    You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n \n+## Setting up Remote H2\n \n-### Setting up the database\n-\n-Download and install the H2 database engine on your computer.\n-\n-!!! info\n-For instructions on installing DB2 Express-C, see [H2 installation guide.](http://www.h2database.com/html/quickstart.html)\n+The following sections describe how to set up a MySQL database to replace the default H2 database in your WSO2 product:", "originalCommit": "f98e5cd016df186df6b8d0cf8d8cf9b6228d0ebc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c7be5c7b8cfbc8a789820c4ea7d3659e6c39759e", "url": "https://github.com/wso2/docs-apim/commit/c7be5c7b8cfbc8a789820c4ea7d3659e6c39759e", "message": "update \"Changing to Remote H2\" documentation\nwso2/docs-apim#624", "committedDate": "2020-01-06T08:59:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIwNjQxMQ==", "url": "https://github.com/wso2/docs-apim/pull/627#discussion_r363206411", "bodyText": "For H2, we do not need to specify driver and validation query. It is sufficient to specify type, url, username and password", "author": "vithu30", "createdAt": "2020-01-06T09:01:20Z", "path": "en/docs/InstallAndSetup/SettingUpDatabases/ChangingDefaultDatabases/changing-to-remote-h2.md", "diffHunk": "@@ -1,429 +1,148 @@\n-# Setting up Embedded H2\n+# Changing to remote H2\n \n-The following sections describe how to set up an embedded H2 database to replace the default H2 database in your WSO2 product:\n-\n--   [Setting up the database](#SettingupEmbeddedH2-Settingupthedatabase)\n--   [Setting up the drivers](#SettingupEmbeddedH2-Settingupthedrivers)\n+By default, WSO2 API Manager uses the embedded H2 database as the database for storing user management and registry data. Given below are the steps you need to follow in order to use remote H2 for this purpose.\n \n !!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n+    H2 is not recommended in production.\n+    \n+    The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL or MS SQL instead.\n+    \n+    You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n \n-### Setting up the database\n+## Setting up remote H2\n \n-Download and install the H2 database engine on your computer.\n-\n-!!! info\n-For instructions on installing DB2 Express-C, see [H2 installation guide.](http://www.h2database.com/html/quickstart.html)\n+The following sections describe how to set up a remote H2 database to replace the default H2 database in your WSO2 product:\n \n+-   [Setting up the drivers](#setting-up-the-drivers)\n+-   [Executing db scripts to create tables on Remote H2 database](#executing-db-scripts-to-create-tables-on-remote-h2-database)\n \n ### Setting up the drivers\n \n-WSO2 currently ships H2 database engine version h2-1.2.140.\\* and its related H2 database driver. If you want to use a different H2 database driver, take the following steps:\n-\n-1.  Delete the following H2 database-related JAR file, which is shipped with WSO2 products:\n-`<PRODUCT_HOME>/repository/components/plugins/h2-database-engine_1.2.140.wso2v3.jar`\n-2.  Find the JAR file of the new H2 database driver ( `<H2_HOME>/bin/h2-*.jar` , where `<H2_HOME>` is the H2 installation directory) and copy it to your WSO2 product's `<PRODUCT_HOME>/repository/components/lib/` directory.\n-\n-## What's next\n-\n-Next, you need to\u00a0configure your product with Embedded H2 database. For more information, see [Changing to Embedded H2](https://docs.wso2.com/display/ADMIN44x/Changing+to+Embedded+H2) .\n-\n-\n-# Changing to Embedded H2\n-\n-The following sections describe how to replace the default H2 database with Embedded H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoEmbeddedH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n-!!! tip\n-Before you begin\n-\n-You need to set up Embedded H2 before following the steps to configure your product with it. For more information, see [Setting up Embedded H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Embedded+H2) .\n-\n-\n-### Setting up\u00a0datasource\u00a0configurations\n-\n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Embedded H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoEmbeddedH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n-\n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n-\n-Follow the steps below to change the type of the default `WSO2_CARBON_DB` datasource.\n-\n-Edit the default\u00a0datasource\u00a0configuration in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file\u00a0as shown below.\n-\n-``` html/xml\n-    <datasource>\n-        <name>WSO2_CARBON_DB</name>\n-        <description>The datasource used for registry and user manager</description>\n-        <jndiConfig>\n-             <name>jdbc/WSO2CarbonDB</name>\n-        </jndiConfig>\n-        <definition type=\"RDBMS\">\n-             <configuration>\n-                 <url>jdbc:h2:repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000</url>\n-                 <username>wso2carbon</username>\n-                 <password>wso2carbon</password>\n-                 <driverClassName>org.h2.Driver</driverClassName>\n-                 <maxActive>50</maxActive>\n-                 <maxWait>60000</maxWait>\n-                 <minIdle>5</minIdle>\n-                 <testOnBorrow>true</testOnBorrow>\n-                 <validationQuery>SELECT 1</validationQuery>\n-                 <validationInterval>30000</validationInterval>\n-                 <defaultAutoCommit>false</defaultAutoCommit>\n-             </configuration>\n-        </definition>\n-    </datasource>\n-```\n-\n-The elements in the above configuration are described below:\n-\n-| Element                       | Description                                                                                                                                                                                                                                                                                                                                  |\n-|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **url**                       | The URL of the database. The default port for a DB2 instance is 50000.                                                                                                                                                                                                                                                                       |\n-| **username** and **password** | The name and password of the database user                                                                                                                                                                                                                                                                                                   |\n-| **driverClassName**           | The class name of the database driver                                                                                                                                                                                                                                                                                                        |\n-| **maxActive**                 | The maximum number of active connections that can beallocated \u00a0atthe same time\u00a0from this pool. Enter any negative value to denote an unlimited number of active connections.                                                                                                                                                                 |\n-| **maxWait**                   | The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. You can enter zero or a negative value to wait indefinitely.                                                                                                              |\n-| **minIdle**                   | The minimum number of active connections that can remain idle in the pool without extra ones being created, or enter zero to create none.                                                                                                                                                                                                    |\n-| **testOnBorrow**              | The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another.                                                                                                                              |\n-| **validationQuery**           | The SQL query that will be used to validate connections from this pool before returning them to the caller.                                                                                                                                                                                                                                  |\n-| **validationInterval**        | The indication to avoid excess validation, and only run validation at the most, at this frequency (time in milliseconds). If a connection is due for validation but has been validated previously within this interval, it will not be validated again.                                                                                      |\n-| **defaultAutoCommit**         | This property is **not** applicable to the Carbon database in WSO2 products because\u00a0auto committing\u00a0is usually handled at the code level, i.e., the default\u00a0auto commit\u00a0configuration specified for the RDBMS driver will be effective instead of this property element. Typically,\u00a0auto committing\u00a0is enabled for RDBMS drivers by default. \n-                                                                                                                                                                                                                                                                                                                                                \n-  When\u00a0auto committing\u00a0is enabled, each SQL statement will be committed to the database as an individual transaction, as opposed to committing multiple statements as a single transaction.                                                                                                                                                     |\n-\n-!!! info\n-For more information on other parameters that can be defined in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file, see [Tomcat JDBC Connection Pool](http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes) .\n-\n-\n-!!! warning\n-The following elements are available only as a **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0 For more information, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) .\n-This WUM update is only applicable to Carbon 4.4.11 and will be shipped out-out-the-box with Carbon versions newer than Carbon 4.4.35. For more information on Carbon compatibility, see [Release Matrix](https://wso2.com/products/carbon/release-matrix/) .\n-\n-\n-| **Element**          | **Description**                                                                                                                                                                                                                                                                                                                                                                |\n-|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **commitOnReturn**   | If `defaultAutoCommit =false`, then you can set `commitOnReturn =true`, so that the pool can complete the transaction by calling the commit on the connection as it is returned to the pool. However, If `rollbackOnReturn =true` then this attribute is ignored. The default value is false. |\n-| **rollbackOnReturn** | If `defaultAutoCommit =false`, then you can set `rollbackOnReturn =true` so that the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool. The default value is false.                                                                                            |\n-\n-**Configuring the connection pool behavior on return\n-** When a database connection is returned to the pool, by default\u00a0 the product rolls back the pending transactions if defaultAutoCommit =true . However, if required you can disable the latter mentioned default behavior by disabling the `ConnectionRollbackOnReturnInterceptor` , which is\u00a0a JDBC-Pool JDBC interceptor,\u00a0and setting the connection pool behavior on return via the datasource configurations by using the following options.\n-\n-!!! warning\n-Disabling the `ConnectionRollbackOnReturnInterceptor` is only possible with the **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0For more information on updating WSO2 API Manager, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) . This WUM update is only applicable to Carbon 4.4.11.\n-\n-\n--   **Configure the connection pool to commit pending transactions on connection return**\n-    1.  Navigate to either one of the following locations based on your OS.\n-        -   On Linux/Mac OS: `<PRODUCT_HOME>/bin/wso2server.sh/`\n-        -   On Windows: `<PRODUCT_HOME>\\bin\\wso2server.bat`\n-    2.  Add the following JVM option:\n-\n-        ``` java\n-                -Dndatasource.disable.rollbackOnReturn=true \\\n-        ```\n-\n-    3.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    4.  Disable the `defaultAutoCommit` by defining it as false.\n-    5.  Add the `commitOnReturn` property and set it to true for all the datasources, including the custom datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit>\n-                                   <commitOnReturn>true</commitOnReturn>    \n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n--   **Configure the connection pool to rollback pending transactions on connection return**\n-\n-    1.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    2.  Disable the `defaultAutoCommit` by defining it as false.\n-\n-    3.  Add the `rollbackOnReturn` property to the datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit> \n-                                   <rollbackOnReturn>true</rollbackOnReturn>\n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n-#### Configuring new\u00a0datasources\u00a0to manage\u00a0registry or user management data\n-\n-Follow the steps below to configure new\u00a0datasources\u00a0to point to the\u00a0new\u00a0database(s) you create to manage\u00a0registry and/or user management data separately.\n-\n-1.  Add a new\u00a0datasource\u00a0with similar configurations as the [`WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) above to the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\u00a0Change its elements with your custom values.\u00a0For instructions, see [Setting up\u00a0datasource\u00a0configurations.](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n-2.  If you are setting up a separate database to store registry-related data, update the following configurations in the &lt; `PRODUCT_HOME>/repository/conf/registry.xml` file.\n-\n-    ``` xml\n-            <dbConfig name=\"wso2registry\">\n-                <dataSource>jdbc/MY_DATASOURCE_NAME</dataSource>\n-            </dbConfig>\n-    ```\n-\n-3.  If you are setting up a separate database to store user management data, update the following configurations in the\u00a0&lt; `PRODUCT_HOME>/repository/conf/user-mgt.xml` file.\n-\n-    ``` xml\n-            <Configuration>\n-                <Property name=\"dataSource\">jdbc/MY_DATASOURCE_NAME</Property>\n-            </Configuration>\n-    ```\n+1. Unzip the WSO2 API Manager pack. Let's call it `<API-M_HOME>`.\n \n-### Creating database tables\n+1. Download the [h2 zip file](http://www.h2database.com/html/download.html),\u00a0and extract it.\n \n-To create the database tables, connect to the database that you created earlier and run the following scripts\u00a0in the\u00a0H2 shell or web console:\n+1. Copy the JAR file to the `<API-M_HOME>/repository/components/lib/` directory in all the nodes of the cluster.\n \n--   To create tables in the\u00a0registry and user manager database ( `WSO2CARBON_DB` ), use the below script:\n-\n-    ``` java\n-            <PRODUCT_HOME>/dbscripts/h2.sql\n-    ```\n-\n-Follow the steps below to run the script in Web console:\n+### Executing db scripts to create tables on remote H2 database\n \n 1.  Run the `./h2.sh` command to start the Web console.\n-2.  Copy the script text from the SQL file.\n-3.  Paste it into the console.\n-4.  Click **Run** .\n-5.  Restart the server.\n-\n-        !!! info\n-    You can create database tables automatically **when starting the product for the first time** by using the `-Dsetup` parameter as follows:\n-\n-    -   For Windows: `<PRODUCT_HOME>/bin/wso2server.bat -Dsetup`\n-\n-    -   For Linux: `<PRODUCT_HOME>/bin/wso2server.sh -Dsetup`\n-\n-        !!! warning\n-        Deprecation of -DSetup\n-    When proper Database Administrative (DBA) practices are followed, the systems (except analytics products) are not granted DDL (Data Definition) rights on the schema. Therefore, maintaining the `-DSetup` option is redundant\u00a0and\u00a0typically unusable. **As a result, from [January 2018 onwards](https://wso2.com/products/carbon/release-matrix/) WSO2 has deprecated the `-DSetup` option** . Note that the proper practice is for the DBA\u00a0to\u00a0run the DDL statements manually so that the DBA can examine\u00a0and\u00a0optimize any DDL statement (if necessary) based on the DBA best practices that are in place within the organization.\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/h2.sql`\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/apimgt/h2.sql`\n \n \n+## Changing to Remote H2\n \n+-   [Creating the datasource connection to Remote H2](#creating-the-datasource-connection-to-remote-h2)\n \n-# Changing to Remote H2\n-\n-The following sections describe how to replace the default H2 databases with Remote H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoRemoteH2-SettingupdatasourceconfigurationsSettingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoRemoteH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n+### Creating the datasource connection to Remote H2\n \n-!!! tip\n-Before you begin\n+A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_SHARED_DB` and `WSO2AM_DB` datasource\u00a0are configured in the `deployment.toml` file for the purpose of connecting to the default H2 databases.\n \n--   Set up the database as explained in [Setting up Remote H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Remote+H2) .\n--   Download the H2 database driver and copy it to WSO2 IoT Server by following the steps under [Setting up drivers](https://docs.wso2.com/display/ADMIN44x/Setting+up+Remote+H2#SettingupRemoteH2-Settingupdrivers) .\n+After setting up the Remote H2 database to replace the default H2 database, either\u00a0change the default configurations of the `WSO2_SHARED_DB` and `WSO2AM_DB` datasource, or\u00a0configure a new\u00a0datasource\u00a0to point it to the new database as explained below.\n \n+!!! note\n+    **If you are configuring API-M in a distributed setup** ,\u00a0do the changes in all the WSO2 API-M components.\n \n-### Setting up\u00a0datasource\u00a0configurations\n+Follow the steps below to change the type of the default datasource.\n \n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Remote H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoRemoteH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoRemoteH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n+1.  Open the `<API-M_HOME>/repository/conf/deployment.toml` configuration file and locate the `[database.shared_db]` and `[database.apim_db]` configuration elements.\n \n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n+1.  You simply have to update the URL pointing to your MySQL database, the username, and password required to access the database and the MySQL driver details as shown below.\n \n-Follow the steps below to change the type of the default `WSO2_CARBON_DB` datasource.\n+    | Element                       | Description                                                 |\n+    |-------------------------------|-------------------------------------------------------------|\n+    | **type**                      | The database type used                                      |\n+    | **url**                       | The URL of the database.                                    |\n+    | **username** and **password** | The name and password of the database user                  |\n+    | **driverClassName**           | The class name of the database driver                       |\n \n-1.  Edit the default\u00a0datasource\u00a0configuration in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file\u00a0as shown below.\n+    Sample configuration is shown below:\n \n-    ``` html/xml\n-        <datasource>\n-              <name>WSO2_CARBON_DB</name>\n-              <description>The datasource used for registry and user manager</description>\n-              <jndiConfig>\n-                   <name>jdbc/WSO2CarbonDB</name>\n-              </jndiConfig>\n-              <definition type=\"RDBMS\">\n-                   <configuration>\n-                       <url>jdbc:h2:tcp://localhost/~/registryDB;create=true</url>\n-                       <username>regadmin</username>\n-                       <password>regadmin</password>\n-                       <driverClassName>org.h2.Driver</driverClassName>\n-                       <maxActive>80</maxActive>\n-                       <maxWait>60000</maxWait>\n-                       <minIdle>5</minIdle>\n-                       <testOnBorrow>true</testOnBorrow>\n-                       <validationQuery>SELECT 1</validationQuery>\n-                       <validationInterval>30000</validationInterval>\n-                       <defaultAutoCommit>false</defaultAutoCommit>\n-                   </configuration>\n-              </definition>\n-        </datasource>\n+    ``` tab=\"Format\"\n+    type = \"h2\"\n+    url = \"jdbc:h2:tcp://localhost/<DATABASE_NAME>\"\n+    username = \"<USER_NAME>\"\n+    password = \"<PASSWORD>\"\n+    driver = \"org.h2.Driver\"\n+    validationQuery = \"SELECT 1\"\n     ```\n \n-    The elements in the above configuration are described below:\n-\n-    | Element                       | Description                                                                                                                                                                                                                                                                                                                                  |\n-    |-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-    | **url**                       | The URL of the database. The default port for a DB2 instance is 50000.                                                                                                                                                                                                                                                                       |\n-    | **username** and **password** | The name and password of the database user                                                                                                                                                                                                                                                                                                   |\n-    | **driverClassName**           | The class name of the database driver                                                                                                                                                                                                                                                                                                        |\n-    | **maxActive**                 | The maximum number of active connections that canbeallocated\u00a0atthesame time\u00a0from this pool. Enter any negative value to denote an unlimited number of active connections.                                                                                                                                                                    |\n-    | **maxWait**                   | The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. You can enter zero or a negative value to wait indefinitely.                                                                                                              |\n-    | **minIdle**                   | The minimum number of active connections that can remain idle in the pool without extra ones being created, or enter zero to create none.                                                                                                                                                                                                    |\n-    | **testOnBorrow**              | The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another.                                                                                                                              |\n-    | **validationQuery**           | The SQL query that will be used to validate connections from this pool before returning them to the caller.                                                                                                                                                                                                                                  |\n-    | **validationInterval**        | The indication to avoid excess validation, and only run validation at the most, at this frequency (time in milliseconds). If a connection is due for validation,\u00a0but has been validated previously within this interval, it will not be validated again.                                                                                     |\n-    | **defaultAutoCommit**         | This property is **not** applicable to the Carbon database in WSO2 products because\u00a0auto committing\u00a0is usually handled at the code level, i.e., the default\u00a0auto commit\u00a0configuration specified for the RDBMS driver will be effective instead of this property element. Typically,\u00a0auto committing\u00a0is enabled for RDBMS drivers by default. \n-                                                                                                                                                                                                                                                                                                                                                    \n-      When\u00a0auto committing\u00a0is enabled, each SQL statement will be committed to the database as an individual transaction, as opposed to committing multiple statements as a single transaction.                                                                                                                                                     |\n-\n-        !!! info\n-    For more information on other parameters that can be defined in the\u00a0&lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file, see [Tomcat JDBC Connection Pool](http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes) .\n-\n-\n-        !!! warning\n-    The following elements are available only as a **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0 For more information, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) .\n-    This WUM update is only applicable to Carbon 4.4.11 and will be shipped out-out-the-box with Carbon versions newer than Carbon 4.4.35. For more information on Carbon compatibility, see [Release Matrix](https://wso2.com/products/carbon/release-matrix/) .\n-\n-\n-    | **Element**          | **Description**                                                                                                                                                                                                                                                                                                                                                                            |\n-    |----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-    | **commitOnReturn**   | If `defaultAutoCommit =false`, then you can set `commitOnReturn =true`, so that the pool can complete the transaction by calling the commit on the connection as it is returned to the pool. However, If `rollbackOnReturn =true` then this attribute is ignored. The default value is false. |\n-    | **rollbackOnReturn** | If `defaultAutoCommit =false`, then you can set `rollbackOnReturn =true` so that the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool. The default value is false.                                                                                                |\n-\n-    **Configuring the connection pool behavior on return\n-    ** When a database connection is returned to the pool, by default\u00a0 the product rolls back the pending transactions if defaultAutoCommit =true . However, if required you can disable the latter mentioned default behavior by disabling the `ConnectionRollbackOnReturnInterceptor` , which is\u00a0a JDBC-Pool JDBC interceptor,\u00a0and setting the connection pool behavior on return via the datasource configurations by using the following options.\n-\n-        !!! warning\n-    Disabling the `ConnectionRollbackOnReturnInterceptor` is only possible with the **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0For more information on updating WSO2 API Manager, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) . This WUM update is only applicable to Carbon 4.4.11.\n-\n-\n-    -   **Configure the connection pool to commit pending transactions on connection return**\n-        1.  Navigate to either one of the following locations based on your OS.\n-            -   On Linux/Mac OS: `<PRODUCT_HOME>/bin/wso2server.sh/`\n-            -   On Windows: `<PRODUCT_HOME>\\bin\\wso2server.bat`\n-        2.  Add the following JVM option:\n-\n-            ``` java\n-                        -Dndatasource.disable.rollbackOnReturn=true \\\n-            ```\n-\n-        3.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-        4.  Disable the `defaultAutoCommit` by defining it as false.\n-        5.  Add the `commitOnReturn` property and set it to true for all the datasources, including the custom datasources.\n-\n-            ``` html/xml\n-                            <datasource>\n-                                 ...\n-                                 <definition type=\"RDBMS\">\n-                                     <configuration>\n-                                           ...\n-                                           <defaultAutoCommit>false</defaultAutoCommit>\n-                                           <commitOnReturn>true</commitOnReturn>    \n-                                           ...\n-                                     </configuration>\n-                                 </definition>\n-                            </datasource>\n-            ```\n-\n-    -   **Configure the connection pool to rollback pending transactions on connection return**\n-\n-        1.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-        2.  Disable the `defaultAutoCommit` by defining it as false.\n-\n-        3.  Add the `rollbackOnReturn` property to the datasources.\n-\n-            ``` html/xml\n-                            <datasource>\n-                                 ...\n-                                 <definition type=\"RDBMS\">\n-                                     <configuration>\n-                                           ...\n-                                           <defaultAutoCommit>false</defaultAutoCommit> \n-                                           <rollbackOnReturn>true</rollbackOnReturn>\n-                                           ...\n-                                     </configuration>\n-                                 </definition>\n-                            </datasource>\n-            ```\n-\n-#### Configuring new\u00a0\u00a0datasources\u00a0to manage\u00a0registry or user management data\n-\n-Follow the steps below to configure new\u00a0datasources\u00a0to point to the\u00a0new\u00a0\u00a0databases you create to manage\u00a0registry and/or user management data separately.\n-\n-1.  Add a new\u00a0datasource\u00a0with similar configurations as the [`WSO2_CARBON_DB` datasource](#ChangingtoRemoteH2-Changingthedefaultdatabase) above to the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file. Change its elements with your custom values. For instructions, see [Setting up\u00a0datasource\u00a0configurations.](#ChangingtoRemoteH2-Settingupdatasourceconfigurations)\n-2.  If you are setting up a separate database to store registry-related data, update the following configurations in the &lt; `PRODUCT_HOME>/repository/conf/registry.xml` file.\n-\n-    ``` xml\n-            <dbConfig name=\"wso2registry\">\n-                <dataSource>jdbc/MY_DATASOURCE_NAME</dataSource>\n-            </dbConfig>\n+    ``` tab=\"Example\"\n+    [database.shared_db]\n+    type = \"h2\"\n+    url = \"jdbc:h2:tcp://localhost/~/shared_db\"\n+    username = \"regadmin\"\n+    password = \"regadmin\"\n+    driver = \"org.h2.Driver\"\n+    validationQuery = \"SELECT 1\"", "originalCommit": "c7be5c7b8cfbc8a789820c4ea7d3659e6c39759e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIwNjY5OA==", "url": "https://github.com/wso2/docs-apim/pull/627#discussion_r363206698", "bodyText": "Shall we change like below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_SHARED_DB` and `WSO2AM_DB` datasource\u00a0are configured in the `deployment.toml` file for the purpose of connecting to the default H2 databases.\n          \n          \n            \n            A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_SHARED_DB` and `WSO2AM_DB` datasource\u00a0are configured in the `deployment.toml` file for the purpose of connecting to the default embedded H2 databases.", "author": "npamudika", "createdAt": "2020-01-06T09:02:24Z", "path": "en/docs/InstallAndSetup/SettingUpDatabases/ChangingDefaultDatabases/changing-to-remote-h2.md", "diffHunk": "@@ -1,429 +1,148 @@\n-# Setting up Embedded H2\n+# Changing to remote H2\n \n-The following sections describe how to set up an embedded H2 database to replace the default H2 database in your WSO2 product:\n-\n--   [Setting up the database](#SettingupEmbeddedH2-Settingupthedatabase)\n--   [Setting up the drivers](#SettingupEmbeddedH2-Settingupthedrivers)\n+By default, WSO2 API Manager uses the embedded H2 database as the database for storing user management and registry data. Given below are the steps you need to follow in order to use remote H2 for this purpose.\n \n !!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n+    H2 is not recommended in production.\n+    \n+    The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL or MS SQL instead.\n+    \n+    You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n \n-### Setting up the database\n+## Setting up remote H2\n \n-Download and install the H2 database engine on your computer.\n-\n-!!! info\n-For instructions on installing DB2 Express-C, see [H2 installation guide.](http://www.h2database.com/html/quickstart.html)\n+The following sections describe how to set up a remote H2 database to replace the default H2 database in your WSO2 product:\n \n+-   [Setting up the drivers](#setting-up-the-drivers)\n+-   [Executing db scripts to create tables on Remote H2 database](#executing-db-scripts-to-create-tables-on-remote-h2-database)\n \n ### Setting up the drivers\n \n-WSO2 currently ships H2 database engine version h2-1.2.140.\\* and its related H2 database driver. If you want to use a different H2 database driver, take the following steps:\n-\n-1.  Delete the following H2 database-related JAR file, which is shipped with WSO2 products:\n-`<PRODUCT_HOME>/repository/components/plugins/h2-database-engine_1.2.140.wso2v3.jar`\n-2.  Find the JAR file of the new H2 database driver ( `<H2_HOME>/bin/h2-*.jar` , where `<H2_HOME>` is the H2 installation directory) and copy it to your WSO2 product's `<PRODUCT_HOME>/repository/components/lib/` directory.\n-\n-## What's next\n-\n-Next, you need to\u00a0configure your product with Embedded H2 database. For more information, see [Changing to Embedded H2](https://docs.wso2.com/display/ADMIN44x/Changing+to+Embedded+H2) .\n-\n-\n-# Changing to Embedded H2\n-\n-The following sections describe how to replace the default H2 database with Embedded H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoEmbeddedH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n-!!! tip\n-Before you begin\n-\n-You need to set up Embedded H2 before following the steps to configure your product with it. For more information, see [Setting up Embedded H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Embedded+H2) .\n-\n-\n-### Setting up\u00a0datasource\u00a0configurations\n-\n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Embedded H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoEmbeddedH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n-\n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n-\n-Follow the steps below to change the type of the default `WSO2_CARBON_DB` datasource.\n-\n-Edit the default\u00a0datasource\u00a0configuration in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file\u00a0as shown below.\n-\n-``` html/xml\n-    <datasource>\n-        <name>WSO2_CARBON_DB</name>\n-        <description>The datasource used for registry and user manager</description>\n-        <jndiConfig>\n-             <name>jdbc/WSO2CarbonDB</name>\n-        </jndiConfig>\n-        <definition type=\"RDBMS\">\n-             <configuration>\n-                 <url>jdbc:h2:repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000</url>\n-                 <username>wso2carbon</username>\n-                 <password>wso2carbon</password>\n-                 <driverClassName>org.h2.Driver</driverClassName>\n-                 <maxActive>50</maxActive>\n-                 <maxWait>60000</maxWait>\n-                 <minIdle>5</minIdle>\n-                 <testOnBorrow>true</testOnBorrow>\n-                 <validationQuery>SELECT 1</validationQuery>\n-                 <validationInterval>30000</validationInterval>\n-                 <defaultAutoCommit>false</defaultAutoCommit>\n-             </configuration>\n-        </definition>\n-    </datasource>\n-```\n-\n-The elements in the above configuration are described below:\n-\n-| Element                       | Description                                                                                                                                                                                                                                                                                                                                  |\n-|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **url**                       | The URL of the database. The default port for a DB2 instance is 50000.                                                                                                                                                                                                                                                                       |\n-| **username** and **password** | The name and password of the database user                                                                                                                                                                                                                                                                                                   |\n-| **driverClassName**           | The class name of the database driver                                                                                                                                                                                                                                                                                                        |\n-| **maxActive**                 | The maximum number of active connections that can beallocated \u00a0atthe same time\u00a0from this pool. Enter any negative value to denote an unlimited number of active connections.                                                                                                                                                                 |\n-| **maxWait**                   | The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. You can enter zero or a negative value to wait indefinitely.                                                                                                              |\n-| **minIdle**                   | The minimum number of active connections that can remain idle in the pool without extra ones being created, or enter zero to create none.                                                                                                                                                                                                    |\n-| **testOnBorrow**              | The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another.                                                                                                                              |\n-| **validationQuery**           | The SQL query that will be used to validate connections from this pool before returning them to the caller.                                                                                                                                                                                                                                  |\n-| **validationInterval**        | The indication to avoid excess validation, and only run validation at the most, at this frequency (time in milliseconds). If a connection is due for validation but has been validated previously within this interval, it will not be validated again.                                                                                      |\n-| **defaultAutoCommit**         | This property is **not** applicable to the Carbon database in WSO2 products because\u00a0auto committing\u00a0is usually handled at the code level, i.e., the default\u00a0auto commit\u00a0configuration specified for the RDBMS driver will be effective instead of this property element. Typically,\u00a0auto committing\u00a0is enabled for RDBMS drivers by default. \n-                                                                                                                                                                                                                                                                                                                                                \n-  When\u00a0auto committing\u00a0is enabled, each SQL statement will be committed to the database as an individual transaction, as opposed to committing multiple statements as a single transaction.                                                                                                                                                     |\n-\n-!!! info\n-For more information on other parameters that can be defined in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file, see [Tomcat JDBC Connection Pool](http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes) .\n-\n-\n-!!! warning\n-The following elements are available only as a **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0 For more information, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) .\n-This WUM update is only applicable to Carbon 4.4.11 and will be shipped out-out-the-box with Carbon versions newer than Carbon 4.4.35. For more information on Carbon compatibility, see [Release Matrix](https://wso2.com/products/carbon/release-matrix/) .\n-\n-\n-| **Element**          | **Description**                                                                                                                                                                                                                                                                                                                                                                |\n-|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **commitOnReturn**   | If `defaultAutoCommit =false`, then you can set `commitOnReturn =true`, so that the pool can complete the transaction by calling the commit on the connection as it is returned to the pool. However, If `rollbackOnReturn =true` then this attribute is ignored. The default value is false. |\n-| **rollbackOnReturn** | If `defaultAutoCommit =false`, then you can set `rollbackOnReturn =true` so that the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool. The default value is false.                                                                                            |\n-\n-**Configuring the connection pool behavior on return\n-** When a database connection is returned to the pool, by default\u00a0 the product rolls back the pending transactions if defaultAutoCommit =true . However, if required you can disable the latter mentioned default behavior by disabling the `ConnectionRollbackOnReturnInterceptor` , which is\u00a0a JDBC-Pool JDBC interceptor,\u00a0and setting the connection pool behavior on return via the datasource configurations by using the following options.\n-\n-!!! warning\n-Disabling the `ConnectionRollbackOnReturnInterceptor` is only possible with the **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0For more information on updating WSO2 API Manager, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) . This WUM update is only applicable to Carbon 4.4.11.\n-\n-\n--   **Configure the connection pool to commit pending transactions on connection return**\n-    1.  Navigate to either one of the following locations based on your OS.\n-        -   On Linux/Mac OS: `<PRODUCT_HOME>/bin/wso2server.sh/`\n-        -   On Windows: `<PRODUCT_HOME>\\bin\\wso2server.bat`\n-    2.  Add the following JVM option:\n-\n-        ``` java\n-                -Dndatasource.disable.rollbackOnReturn=true \\\n-        ```\n-\n-    3.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    4.  Disable the `defaultAutoCommit` by defining it as false.\n-    5.  Add the `commitOnReturn` property and set it to true for all the datasources, including the custom datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit>\n-                                   <commitOnReturn>true</commitOnReturn>    \n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n--   **Configure the connection pool to rollback pending transactions on connection return**\n-\n-    1.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    2.  Disable the `defaultAutoCommit` by defining it as false.\n-\n-    3.  Add the `rollbackOnReturn` property to the datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit> \n-                                   <rollbackOnReturn>true</rollbackOnReturn>\n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n-#### Configuring new\u00a0datasources\u00a0to manage\u00a0registry or user management data\n-\n-Follow the steps below to configure new\u00a0datasources\u00a0to point to the\u00a0new\u00a0database(s) you create to manage\u00a0registry and/or user management data separately.\n-\n-1.  Add a new\u00a0datasource\u00a0with similar configurations as the [`WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) above to the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\u00a0Change its elements with your custom values.\u00a0For instructions, see [Setting up\u00a0datasource\u00a0configurations.](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n-2.  If you are setting up a separate database to store registry-related data, update the following configurations in the &lt; `PRODUCT_HOME>/repository/conf/registry.xml` file.\n-\n-    ``` xml\n-            <dbConfig name=\"wso2registry\">\n-                <dataSource>jdbc/MY_DATASOURCE_NAME</dataSource>\n-            </dbConfig>\n-    ```\n-\n-3.  If you are setting up a separate database to store user management data, update the following configurations in the\u00a0&lt; `PRODUCT_HOME>/repository/conf/user-mgt.xml` file.\n-\n-    ``` xml\n-            <Configuration>\n-                <Property name=\"dataSource\">jdbc/MY_DATASOURCE_NAME</Property>\n-            </Configuration>\n-    ```\n+1. Unzip the WSO2 API Manager pack. Let's call it `<API-M_HOME>`.\n \n-### Creating database tables\n+1. Download the [h2 zip file](http://www.h2database.com/html/download.html),\u00a0and extract it.\n \n-To create the database tables, connect to the database that you created earlier and run the following scripts\u00a0in the\u00a0H2 shell or web console:\n+1. Copy the JAR file to the `<API-M_HOME>/repository/components/lib/` directory in all the nodes of the cluster.\n \n--   To create tables in the\u00a0registry and user manager database ( `WSO2CARBON_DB` ), use the below script:\n-\n-    ``` java\n-            <PRODUCT_HOME>/dbscripts/h2.sql\n-    ```\n-\n-Follow the steps below to run the script in Web console:\n+### Executing db scripts to create tables on remote H2 database\n \n 1.  Run the `./h2.sh` command to start the Web console.\n-2.  Copy the script text from the SQL file.\n-3.  Paste it into the console.\n-4.  Click **Run** .\n-5.  Restart the server.\n-\n-        !!! info\n-    You can create database tables automatically **when starting the product for the first time** by using the `-Dsetup` parameter as follows:\n-\n-    -   For Windows: `<PRODUCT_HOME>/bin/wso2server.bat -Dsetup`\n-\n-    -   For Linux: `<PRODUCT_HOME>/bin/wso2server.sh -Dsetup`\n-\n-        !!! warning\n-        Deprecation of -DSetup\n-    When proper Database Administrative (DBA) practices are followed, the systems (except analytics products) are not granted DDL (Data Definition) rights on the schema. Therefore, maintaining the `-DSetup` option is redundant\u00a0and\u00a0typically unusable. **As a result, from [January 2018 onwards](https://wso2.com/products/carbon/release-matrix/) WSO2 has deprecated the `-DSetup` option** . Note that the proper practice is for the DBA\u00a0to\u00a0run the DDL statements manually so that the DBA can examine\u00a0and\u00a0optimize any DDL statement (if necessary) based on the DBA best practices that are in place within the organization.\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/h2.sql`\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/apimgt/h2.sql`\n \n \n+## Changing to Remote H2\n \n+-   [Creating the datasource connection to Remote H2](#creating-the-datasource-connection-to-remote-h2)\n \n-# Changing to Remote H2\n-\n-The following sections describe how to replace the default H2 databases with Remote H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoRemoteH2-SettingupdatasourceconfigurationsSettingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoRemoteH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n+### Creating the datasource connection to Remote H2\n \n-!!! tip\n-Before you begin\n+A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_SHARED_DB` and `WSO2AM_DB` datasource\u00a0are configured in the `deployment.toml` file for the purpose of connecting to the default H2 databases.", "originalCommit": "c7be5c7b8cfbc8a789820c4ea7d3659e6c39759e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIwNzI3NA==", "url": "https://github.com/wso2/docs-apim/pull/627#discussion_r363207274", "bodyText": "Shall we change \"Remote\" to \"remote\"?", "author": "npamudika", "createdAt": "2020-01-06T09:04:25Z", "path": "en/docs/InstallAndSetup/SettingUpDatabases/ChangingDefaultDatabases/changing-to-remote-h2.md", "diffHunk": "@@ -1,429 +1,148 @@\n-# Setting up Embedded H2\n+# Changing to remote H2\n \n-The following sections describe how to set up an embedded H2 database to replace the default H2 database in your WSO2 product:\n-\n--   [Setting up the database](#SettingupEmbeddedH2-Settingupthedatabase)\n--   [Setting up the drivers](#SettingupEmbeddedH2-Settingupthedrivers)\n+By default, WSO2 API Manager uses the embedded H2 database as the database for storing user management and registry data. Given below are the steps you need to follow in order to use remote H2 for this purpose.\n \n !!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n+    H2 is not recommended in production.\n+    \n+    The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL or MS SQL instead.\n+    \n+    You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n \n-### Setting up the database\n+## Setting up remote H2\n \n-Download and install the H2 database engine on your computer.\n-\n-!!! info\n-For instructions on installing DB2 Express-C, see [H2 installation guide.](http://www.h2database.com/html/quickstart.html)\n+The following sections describe how to set up a remote H2 database to replace the default H2 database in your WSO2 product:\n \n+-   [Setting up the drivers](#setting-up-the-drivers)\n+-   [Executing db scripts to create tables on Remote H2 database](#executing-db-scripts-to-create-tables-on-remote-h2-database)\n \n ### Setting up the drivers\n \n-WSO2 currently ships H2 database engine version h2-1.2.140.\\* and its related H2 database driver. If you want to use a different H2 database driver, take the following steps:\n-\n-1.  Delete the following H2 database-related JAR file, which is shipped with WSO2 products:\n-`<PRODUCT_HOME>/repository/components/plugins/h2-database-engine_1.2.140.wso2v3.jar`\n-2.  Find the JAR file of the new H2 database driver ( `<H2_HOME>/bin/h2-*.jar` , where `<H2_HOME>` is the H2 installation directory) and copy it to your WSO2 product's `<PRODUCT_HOME>/repository/components/lib/` directory.\n-\n-## What's next\n-\n-Next, you need to\u00a0configure your product with Embedded H2 database. For more information, see [Changing to Embedded H2](https://docs.wso2.com/display/ADMIN44x/Changing+to+Embedded+H2) .\n-\n-\n-# Changing to Embedded H2\n-\n-The following sections describe how to replace the default H2 database with Embedded H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoEmbeddedH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n-!!! tip\n-Before you begin\n-\n-You need to set up Embedded H2 before following the steps to configure your product with it. For more information, see [Setting up Embedded H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Embedded+H2) .\n-\n-\n-### Setting up\u00a0datasource\u00a0configurations\n-\n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Embedded H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoEmbeddedH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n-\n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n-\n-Follow the steps below to change the type of the default `WSO2_CARBON_DB` datasource.\n-\n-Edit the default\u00a0datasource\u00a0configuration in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file\u00a0as shown below.\n-\n-``` html/xml\n-    <datasource>\n-        <name>WSO2_CARBON_DB</name>\n-        <description>The datasource used for registry and user manager</description>\n-        <jndiConfig>\n-             <name>jdbc/WSO2CarbonDB</name>\n-        </jndiConfig>\n-        <definition type=\"RDBMS\">\n-             <configuration>\n-                 <url>jdbc:h2:repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000</url>\n-                 <username>wso2carbon</username>\n-                 <password>wso2carbon</password>\n-                 <driverClassName>org.h2.Driver</driverClassName>\n-                 <maxActive>50</maxActive>\n-                 <maxWait>60000</maxWait>\n-                 <minIdle>5</minIdle>\n-                 <testOnBorrow>true</testOnBorrow>\n-                 <validationQuery>SELECT 1</validationQuery>\n-                 <validationInterval>30000</validationInterval>\n-                 <defaultAutoCommit>false</defaultAutoCommit>\n-             </configuration>\n-        </definition>\n-    </datasource>\n-```\n-\n-The elements in the above configuration are described below:\n-\n-| Element                       | Description                                                                                                                                                                                                                                                                                                                                  |\n-|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **url**                       | The URL of the database. The default port for a DB2 instance is 50000.                                                                                                                                                                                                                                                                       |\n-| **username** and **password** | The name and password of the database user                                                                                                                                                                                                                                                                                                   |\n-| **driverClassName**           | The class name of the database driver                                                                                                                                                                                                                                                                                                        |\n-| **maxActive**                 | The maximum number of active connections that can beallocated \u00a0atthe same time\u00a0from this pool. Enter any negative value to denote an unlimited number of active connections.                                                                                                                                                                 |\n-| **maxWait**                   | The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. You can enter zero or a negative value to wait indefinitely.                                                                                                              |\n-| **minIdle**                   | The minimum number of active connections that can remain idle in the pool without extra ones being created, or enter zero to create none.                                                                                                                                                                                                    |\n-| **testOnBorrow**              | The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another.                                                                                                                              |\n-| **validationQuery**           | The SQL query that will be used to validate connections from this pool before returning them to the caller.                                                                                                                                                                                                                                  |\n-| **validationInterval**        | The indication to avoid excess validation, and only run validation at the most, at this frequency (time in milliseconds). If a connection is due for validation but has been validated previously within this interval, it will not be validated again.                                                                                      |\n-| **defaultAutoCommit**         | This property is **not** applicable to the Carbon database in WSO2 products because\u00a0auto committing\u00a0is usually handled at the code level, i.e., the default\u00a0auto commit\u00a0configuration specified for the RDBMS driver will be effective instead of this property element. Typically,\u00a0auto committing\u00a0is enabled for RDBMS drivers by default. \n-                                                                                                                                                                                                                                                                                                                                                \n-  When\u00a0auto committing\u00a0is enabled, each SQL statement will be committed to the database as an individual transaction, as opposed to committing multiple statements as a single transaction.                                                                                                                                                     |\n-\n-!!! info\n-For more information on other parameters that can be defined in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file, see [Tomcat JDBC Connection Pool](http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes) .\n-\n-\n-!!! warning\n-The following elements are available only as a **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0 For more information, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) .\n-This WUM update is only applicable to Carbon 4.4.11 and will be shipped out-out-the-box with Carbon versions newer than Carbon 4.4.35. For more information on Carbon compatibility, see [Release Matrix](https://wso2.com/products/carbon/release-matrix/) .\n-\n-\n-| **Element**          | **Description**                                                                                                                                                                                                                                                                                                                                                                |\n-|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **commitOnReturn**   | If `defaultAutoCommit =false`, then you can set `commitOnReturn =true`, so that the pool can complete the transaction by calling the commit on the connection as it is returned to the pool. However, If `rollbackOnReturn =true` then this attribute is ignored. The default value is false. |\n-| **rollbackOnReturn** | If `defaultAutoCommit =false`, then you can set `rollbackOnReturn =true` so that the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool. The default value is false.                                                                                            |\n-\n-**Configuring the connection pool behavior on return\n-** When a database connection is returned to the pool, by default\u00a0 the product rolls back the pending transactions if defaultAutoCommit =true . However, if required you can disable the latter mentioned default behavior by disabling the `ConnectionRollbackOnReturnInterceptor` , which is\u00a0a JDBC-Pool JDBC interceptor,\u00a0and setting the connection pool behavior on return via the datasource configurations by using the following options.\n-\n-!!! warning\n-Disabling the `ConnectionRollbackOnReturnInterceptor` is only possible with the **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0For more information on updating WSO2 API Manager, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) . This WUM update is only applicable to Carbon 4.4.11.\n-\n-\n--   **Configure the connection pool to commit pending transactions on connection return**\n-    1.  Navigate to either one of the following locations based on your OS.\n-        -   On Linux/Mac OS: `<PRODUCT_HOME>/bin/wso2server.sh/`\n-        -   On Windows: `<PRODUCT_HOME>\\bin\\wso2server.bat`\n-    2.  Add the following JVM option:\n-\n-        ``` java\n-                -Dndatasource.disable.rollbackOnReturn=true \\\n-        ```\n-\n-    3.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    4.  Disable the `defaultAutoCommit` by defining it as false.\n-    5.  Add the `commitOnReturn` property and set it to true for all the datasources, including the custom datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit>\n-                                   <commitOnReturn>true</commitOnReturn>    \n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n--   **Configure the connection pool to rollback pending transactions on connection return**\n-\n-    1.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    2.  Disable the `defaultAutoCommit` by defining it as false.\n-\n-    3.  Add the `rollbackOnReturn` property to the datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit> \n-                                   <rollbackOnReturn>true</rollbackOnReturn>\n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n-#### Configuring new\u00a0datasources\u00a0to manage\u00a0registry or user management data\n-\n-Follow the steps below to configure new\u00a0datasources\u00a0to point to the\u00a0new\u00a0database(s) you create to manage\u00a0registry and/or user management data separately.\n-\n-1.  Add a new\u00a0datasource\u00a0with similar configurations as the [`WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) above to the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\u00a0Change its elements with your custom values.\u00a0For instructions, see [Setting up\u00a0datasource\u00a0configurations.](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n-2.  If you are setting up a separate database to store registry-related data, update the following configurations in the &lt; `PRODUCT_HOME>/repository/conf/registry.xml` file.\n-\n-    ``` xml\n-            <dbConfig name=\"wso2registry\">\n-                <dataSource>jdbc/MY_DATASOURCE_NAME</dataSource>\n-            </dbConfig>\n-    ```\n-\n-3.  If you are setting up a separate database to store user management data, update the following configurations in the\u00a0&lt; `PRODUCT_HOME>/repository/conf/user-mgt.xml` file.\n-\n-    ``` xml\n-            <Configuration>\n-                <Property name=\"dataSource\">jdbc/MY_DATASOURCE_NAME</Property>\n-            </Configuration>\n-    ```\n+1. Unzip the WSO2 API Manager pack. Let's call it `<API-M_HOME>`.\n \n-### Creating database tables\n+1. Download the [h2 zip file](http://www.h2database.com/html/download.html),\u00a0and extract it.\n \n-To create the database tables, connect to the database that you created earlier and run the following scripts\u00a0in the\u00a0H2 shell or web console:\n+1. Copy the JAR file to the `<API-M_HOME>/repository/components/lib/` directory in all the nodes of the cluster.\n \n--   To create tables in the\u00a0registry and user manager database ( `WSO2CARBON_DB` ), use the below script:\n-\n-    ``` java\n-            <PRODUCT_HOME>/dbscripts/h2.sql\n-    ```\n-\n-Follow the steps below to run the script in Web console:\n+### Executing db scripts to create tables on remote H2 database\n \n 1.  Run the `./h2.sh` command to start the Web console.\n-2.  Copy the script text from the SQL file.\n-3.  Paste it into the console.\n-4.  Click **Run** .\n-5.  Restart the server.\n-\n-        !!! info\n-    You can create database tables automatically **when starting the product for the first time** by using the `-Dsetup` parameter as follows:\n-\n-    -   For Windows: `<PRODUCT_HOME>/bin/wso2server.bat -Dsetup`\n-\n-    -   For Linux: `<PRODUCT_HOME>/bin/wso2server.sh -Dsetup`\n-\n-        !!! warning\n-        Deprecation of -DSetup\n-    When proper Database Administrative (DBA) practices are followed, the systems (except analytics products) are not granted DDL (Data Definition) rights on the schema. Therefore, maintaining the `-DSetup` option is redundant\u00a0and\u00a0typically unusable. **As a result, from [January 2018 onwards](https://wso2.com/products/carbon/release-matrix/) WSO2 has deprecated the `-DSetup` option** . Note that the proper practice is for the DBA\u00a0to\u00a0run the DDL statements manually so that the DBA can examine\u00a0and\u00a0optimize any DDL statement (if necessary) based on the DBA best practices that are in place within the organization.\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/h2.sql`\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/apimgt/h2.sql`\n \n \n+## Changing to Remote H2\n \n+-   [Creating the datasource connection to Remote H2](#creating-the-datasource-connection-to-remote-h2)\n \n-# Changing to Remote H2\n-\n-The following sections describe how to replace the default H2 databases with Remote H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoRemoteH2-SettingupdatasourceconfigurationsSettingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoRemoteH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n+### Creating the datasource connection to Remote H2\n \n-!!! tip\n-Before you begin\n+A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_SHARED_DB` and `WSO2AM_DB` datasource\u00a0are configured in the `deployment.toml` file for the purpose of connecting to the default H2 databases.\n \n--   Set up the database as explained in [Setting up Remote H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Remote+H2) .\n--   Download the H2 database driver and copy it to WSO2 IoT Server by following the steps under [Setting up drivers](https://docs.wso2.com/display/ADMIN44x/Setting+up+Remote+H2#SettingupRemoteH2-Settingupdrivers) .\n+After setting up the Remote H2 database to replace the default H2 database, either\u00a0change the default configurations of the `WSO2_SHARED_DB` and `WSO2AM_DB` datasource, or\u00a0configure a new\u00a0datasource\u00a0to point it to the new database as explained below.", "originalCommit": "c7be5c7b8cfbc8a789820c4ea7d3659e6c39759e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIwNzQzOA==", "url": "https://github.com/wso2/docs-apim/pull/627#discussion_r363207438", "bodyText": "Need to change Mysql to H2", "author": "npamudika", "createdAt": "2020-01-06T09:05:03Z", "path": "en/docs/InstallAndSetup/SettingUpDatabases/ChangingDefaultDatabases/changing-to-remote-h2.md", "diffHunk": "@@ -1,429 +1,148 @@\n-# Setting up Embedded H2\n+# Changing to remote H2\n \n-The following sections describe how to set up an embedded H2 database to replace the default H2 database in your WSO2 product:\n-\n--   [Setting up the database](#SettingupEmbeddedH2-Settingupthedatabase)\n--   [Setting up the drivers](#SettingupEmbeddedH2-Settingupthedrivers)\n+By default, WSO2 API Manager uses the embedded H2 database as the database for storing user management and registry data. Given below are the steps you need to follow in order to use remote H2 for this purpose.\n \n !!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n+    H2 is not recommended in production.\n+    \n+    The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL or MS SQL instead.\n+    \n+    You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n \n-### Setting up the database\n+## Setting up remote H2\n \n-Download and install the H2 database engine on your computer.\n-\n-!!! info\n-For instructions on installing DB2 Express-C, see [H2 installation guide.](http://www.h2database.com/html/quickstart.html)\n+The following sections describe how to set up a remote H2 database to replace the default H2 database in your WSO2 product:\n \n+-   [Setting up the drivers](#setting-up-the-drivers)\n+-   [Executing db scripts to create tables on Remote H2 database](#executing-db-scripts-to-create-tables-on-remote-h2-database)\n \n ### Setting up the drivers\n \n-WSO2 currently ships H2 database engine version h2-1.2.140.\\* and its related H2 database driver. If you want to use a different H2 database driver, take the following steps:\n-\n-1.  Delete the following H2 database-related JAR file, which is shipped with WSO2 products:\n-`<PRODUCT_HOME>/repository/components/plugins/h2-database-engine_1.2.140.wso2v3.jar`\n-2.  Find the JAR file of the new H2 database driver ( `<H2_HOME>/bin/h2-*.jar` , where `<H2_HOME>` is the H2 installation directory) and copy it to your WSO2 product's `<PRODUCT_HOME>/repository/components/lib/` directory.\n-\n-## What's next\n-\n-Next, you need to\u00a0configure your product with Embedded H2 database. For more information, see [Changing to Embedded H2](https://docs.wso2.com/display/ADMIN44x/Changing+to+Embedded+H2) .\n-\n-\n-# Changing to Embedded H2\n-\n-The following sections describe how to replace the default H2 database with Embedded H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoEmbeddedH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n-!!! tip\n-Before you begin\n-\n-You need to set up Embedded H2 before following the steps to configure your product with it. For more information, see [Setting up Embedded H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Embedded+H2) .\n-\n-\n-### Setting up\u00a0datasource\u00a0configurations\n-\n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Embedded H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoEmbeddedH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n-\n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n-\n-Follow the steps below to change the type of the default `WSO2_CARBON_DB` datasource.\n-\n-Edit the default\u00a0datasource\u00a0configuration in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file\u00a0as shown below.\n-\n-``` html/xml\n-    <datasource>\n-        <name>WSO2_CARBON_DB</name>\n-        <description>The datasource used for registry and user manager</description>\n-        <jndiConfig>\n-             <name>jdbc/WSO2CarbonDB</name>\n-        </jndiConfig>\n-        <definition type=\"RDBMS\">\n-             <configuration>\n-                 <url>jdbc:h2:repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000</url>\n-                 <username>wso2carbon</username>\n-                 <password>wso2carbon</password>\n-                 <driverClassName>org.h2.Driver</driverClassName>\n-                 <maxActive>50</maxActive>\n-                 <maxWait>60000</maxWait>\n-                 <minIdle>5</minIdle>\n-                 <testOnBorrow>true</testOnBorrow>\n-                 <validationQuery>SELECT 1</validationQuery>\n-                 <validationInterval>30000</validationInterval>\n-                 <defaultAutoCommit>false</defaultAutoCommit>\n-             </configuration>\n-        </definition>\n-    </datasource>\n-```\n-\n-The elements in the above configuration are described below:\n-\n-| Element                       | Description                                                                                                                                                                                                                                                                                                                                  |\n-|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **url**                       | The URL of the database. The default port for a DB2 instance is 50000.                                                                                                                                                                                                                                                                       |\n-| **username** and **password** | The name and password of the database user                                                                                                                                                                                                                                                                                                   |\n-| **driverClassName**           | The class name of the database driver                                                                                                                                                                                                                                                                                                        |\n-| **maxActive**                 | The maximum number of active connections that can beallocated \u00a0atthe same time\u00a0from this pool. Enter any negative value to denote an unlimited number of active connections.                                                                                                                                                                 |\n-| **maxWait**                   | The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. You can enter zero or a negative value to wait indefinitely.                                                                                                              |\n-| **minIdle**                   | The minimum number of active connections that can remain idle in the pool without extra ones being created, or enter zero to create none.                                                                                                                                                                                                    |\n-| **testOnBorrow**              | The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another.                                                                                                                              |\n-| **validationQuery**           | The SQL query that will be used to validate connections from this pool before returning them to the caller.                                                                                                                                                                                                                                  |\n-| **validationInterval**        | The indication to avoid excess validation, and only run validation at the most, at this frequency (time in milliseconds). If a connection is due for validation but has been validated previously within this interval, it will not be validated again.                                                                                      |\n-| **defaultAutoCommit**         | This property is **not** applicable to the Carbon database in WSO2 products because\u00a0auto committing\u00a0is usually handled at the code level, i.e., the default\u00a0auto commit\u00a0configuration specified for the RDBMS driver will be effective instead of this property element. Typically,\u00a0auto committing\u00a0is enabled for RDBMS drivers by default. \n-                                                                                                                                                                                                                                                                                                                                                \n-  When\u00a0auto committing\u00a0is enabled, each SQL statement will be committed to the database as an individual transaction, as opposed to committing multiple statements as a single transaction.                                                                                                                                                     |\n-\n-!!! info\n-For more information on other parameters that can be defined in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file, see [Tomcat JDBC Connection Pool](http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes) .\n-\n-\n-!!! warning\n-The following elements are available only as a **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0 For more information, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) .\n-This WUM update is only applicable to Carbon 4.4.11 and will be shipped out-out-the-box with Carbon versions newer than Carbon 4.4.35. For more information on Carbon compatibility, see [Release Matrix](https://wso2.com/products/carbon/release-matrix/) .\n-\n-\n-| **Element**          | **Description**                                                                                                                                                                                                                                                                                                                                                                |\n-|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **commitOnReturn**   | If `defaultAutoCommit =false`, then you can set `commitOnReturn =true`, so that the pool can complete the transaction by calling the commit on the connection as it is returned to the pool. However, If `rollbackOnReturn =true` then this attribute is ignored. The default value is false. |\n-| **rollbackOnReturn** | If `defaultAutoCommit =false`, then you can set `rollbackOnReturn =true` so that the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool. The default value is false.                                                                                            |\n-\n-**Configuring the connection pool behavior on return\n-** When a database connection is returned to the pool, by default\u00a0 the product rolls back the pending transactions if defaultAutoCommit =true . However, if required you can disable the latter mentioned default behavior by disabling the `ConnectionRollbackOnReturnInterceptor` , which is\u00a0a JDBC-Pool JDBC interceptor,\u00a0and setting the connection pool behavior on return via the datasource configurations by using the following options.\n-\n-!!! warning\n-Disabling the `ConnectionRollbackOnReturnInterceptor` is only possible with the **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0For more information on updating WSO2 API Manager, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) . This WUM update is only applicable to Carbon 4.4.11.\n-\n-\n--   **Configure the connection pool to commit pending transactions on connection return**\n-    1.  Navigate to either one of the following locations based on your OS.\n-        -   On Linux/Mac OS: `<PRODUCT_HOME>/bin/wso2server.sh/`\n-        -   On Windows: `<PRODUCT_HOME>\\bin\\wso2server.bat`\n-    2.  Add the following JVM option:\n-\n-        ``` java\n-                -Dndatasource.disable.rollbackOnReturn=true \\\n-        ```\n-\n-    3.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    4.  Disable the `defaultAutoCommit` by defining it as false.\n-    5.  Add the `commitOnReturn` property and set it to true for all the datasources, including the custom datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit>\n-                                   <commitOnReturn>true</commitOnReturn>    \n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n--   **Configure the connection pool to rollback pending transactions on connection return**\n-\n-    1.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    2.  Disable the `defaultAutoCommit` by defining it as false.\n-\n-    3.  Add the `rollbackOnReturn` property to the datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit> \n-                                   <rollbackOnReturn>true</rollbackOnReturn>\n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n-#### Configuring new\u00a0datasources\u00a0to manage\u00a0registry or user management data\n-\n-Follow the steps below to configure new\u00a0datasources\u00a0to point to the\u00a0new\u00a0database(s) you create to manage\u00a0registry and/or user management data separately.\n-\n-1.  Add a new\u00a0datasource\u00a0with similar configurations as the [`WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) above to the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\u00a0Change its elements with your custom values.\u00a0For instructions, see [Setting up\u00a0datasource\u00a0configurations.](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n-2.  If you are setting up a separate database to store registry-related data, update the following configurations in the &lt; `PRODUCT_HOME>/repository/conf/registry.xml` file.\n-\n-    ``` xml\n-            <dbConfig name=\"wso2registry\">\n-                <dataSource>jdbc/MY_DATASOURCE_NAME</dataSource>\n-            </dbConfig>\n-    ```\n-\n-3.  If you are setting up a separate database to store user management data, update the following configurations in the\u00a0&lt; `PRODUCT_HOME>/repository/conf/user-mgt.xml` file.\n-\n-    ``` xml\n-            <Configuration>\n-                <Property name=\"dataSource\">jdbc/MY_DATASOURCE_NAME</Property>\n-            </Configuration>\n-    ```\n+1. Unzip the WSO2 API Manager pack. Let's call it `<API-M_HOME>`.\n \n-### Creating database tables\n+1. Download the [h2 zip file](http://www.h2database.com/html/download.html),\u00a0and extract it.\n \n-To create the database tables, connect to the database that you created earlier and run the following scripts\u00a0in the\u00a0H2 shell or web console:\n+1. Copy the JAR file to the `<API-M_HOME>/repository/components/lib/` directory in all the nodes of the cluster.\n \n--   To create tables in the\u00a0registry and user manager database ( `WSO2CARBON_DB` ), use the below script:\n-\n-    ``` java\n-            <PRODUCT_HOME>/dbscripts/h2.sql\n-    ```\n-\n-Follow the steps below to run the script in Web console:\n+### Executing db scripts to create tables on remote H2 database\n \n 1.  Run the `./h2.sh` command to start the Web console.\n-2.  Copy the script text from the SQL file.\n-3.  Paste it into the console.\n-4.  Click **Run** .\n-5.  Restart the server.\n-\n-        !!! info\n-    You can create database tables automatically **when starting the product for the first time** by using the `-Dsetup` parameter as follows:\n-\n-    -   For Windows: `<PRODUCT_HOME>/bin/wso2server.bat -Dsetup`\n-\n-    -   For Linux: `<PRODUCT_HOME>/bin/wso2server.sh -Dsetup`\n-\n-        !!! warning\n-        Deprecation of -DSetup\n-    When proper Database Administrative (DBA) practices are followed, the systems (except analytics products) are not granted DDL (Data Definition) rights on the schema. Therefore, maintaining the `-DSetup` option is redundant\u00a0and\u00a0typically unusable. **As a result, from [January 2018 onwards](https://wso2.com/products/carbon/release-matrix/) WSO2 has deprecated the `-DSetup` option** . Note that the proper practice is for the DBA\u00a0to\u00a0run the DDL statements manually so that the DBA can examine\u00a0and\u00a0optimize any DDL statement (if necessary) based on the DBA best practices that are in place within the organization.\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/h2.sql`\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/apimgt/h2.sql`\n \n \n+## Changing to Remote H2\n \n+-   [Creating the datasource connection to Remote H2](#creating-the-datasource-connection-to-remote-h2)\n \n-# Changing to Remote H2\n-\n-The following sections describe how to replace the default H2 databases with Remote H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoRemoteH2-SettingupdatasourceconfigurationsSettingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoRemoteH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n+### Creating the datasource connection to Remote H2\n \n-!!! tip\n-Before you begin\n+A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_SHARED_DB` and `WSO2AM_DB` datasource\u00a0are configured in the `deployment.toml` file for the purpose of connecting to the default H2 databases.\n \n--   Set up the database as explained in [Setting up Remote H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Remote+H2) .\n--   Download the H2 database driver and copy it to WSO2 IoT Server by following the steps under [Setting up drivers](https://docs.wso2.com/display/ADMIN44x/Setting+up+Remote+H2#SettingupRemoteH2-Settingupdrivers) .\n+After setting up the Remote H2 database to replace the default H2 database, either\u00a0change the default configurations of the `WSO2_SHARED_DB` and `WSO2AM_DB` datasource, or\u00a0configure a new\u00a0datasource\u00a0to point it to the new database as explained below.\n \n+!!! note\n+    **If you are configuring API-M in a distributed setup** ,\u00a0do the changes in all the WSO2 API-M components.\n \n-### Setting up\u00a0datasource\u00a0configurations\n+Follow the steps below to change the type of the default datasource.\n \n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Remote H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoRemoteH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoRemoteH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n+1.  Open the `<API-M_HOME>/repository/conf/deployment.toml` configuration file and locate the `[database.shared_db]` and `[database.apim_db]` configuration elements.\n \n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n+1.  You simply have to update the URL pointing to your MySQL database, the username, and password required to access the database and the MySQL driver details as shown below.", "originalCommit": "c7be5c7b8cfbc8a789820c4ea7d3659e6c39759e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzMjM0Mw==", "url": "https://github.com/wso2/docs-apim/pull/627#discussion_r363232343", "bodyText": "Don't we need to specify the port, if we connects to a remote h2 database server?", "author": "npamudika", "createdAt": "2020-01-06T10:14:45Z", "path": "en/docs/InstallAndSetup/SettingUpDatabases/ChangingDefaultDatabases/changing-to-remote-h2.md", "diffHunk": "@@ -1,429 +1,148 @@\n-# Setting up Embedded H2\n+# Changing to remote H2\n \n-The following sections describe how to set up an embedded H2 database to replace the default H2 database in your WSO2 product:\n-\n--   [Setting up the database](#SettingupEmbeddedH2-Settingupthedatabase)\n--   [Setting up the drivers](#SettingupEmbeddedH2-Settingupthedrivers)\n+By default, WSO2 API Manager uses the embedded H2 database as the database for storing user management and registry data. Given below are the steps you need to follow in order to use remote H2 for this purpose.\n \n !!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n+    H2 is not recommended in production.\n+    \n+    The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL or MS SQL instead.\n+    \n+    You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n \n-### Setting up the database\n+## Setting up remote H2\n \n-Download and install the H2 database engine on your computer.\n-\n-!!! info\n-For instructions on installing DB2 Express-C, see [H2 installation guide.](http://www.h2database.com/html/quickstart.html)\n+The following sections describe how to set up a remote H2 database to replace the default H2 database in your WSO2 product:\n \n+-   [Setting up the drivers](#setting-up-the-drivers)\n+-   [Executing db scripts to create tables on Remote H2 database](#executing-db-scripts-to-create-tables-on-remote-h2-database)\n \n ### Setting up the drivers\n \n-WSO2 currently ships H2 database engine version h2-1.2.140.\\* and its related H2 database driver. If you want to use a different H2 database driver, take the following steps:\n-\n-1.  Delete the following H2 database-related JAR file, which is shipped with WSO2 products:\n-`<PRODUCT_HOME>/repository/components/plugins/h2-database-engine_1.2.140.wso2v3.jar`\n-2.  Find the JAR file of the new H2 database driver ( `<H2_HOME>/bin/h2-*.jar` , where `<H2_HOME>` is the H2 installation directory) and copy it to your WSO2 product's `<PRODUCT_HOME>/repository/components/lib/` directory.\n-\n-## What's next\n-\n-Next, you need to\u00a0configure your product with Embedded H2 database. For more information, see [Changing to Embedded H2](https://docs.wso2.com/display/ADMIN44x/Changing+to+Embedded+H2) .\n-\n-\n-# Changing to Embedded H2\n-\n-The following sections describe how to replace the default H2 database with Embedded H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoEmbeddedH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n-!!! tip\n-Before you begin\n-\n-You need to set up Embedded H2 before following the steps to configure your product with it. For more information, see [Setting up Embedded H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Embedded+H2) .\n-\n-\n-### Setting up\u00a0datasource\u00a0configurations\n-\n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Embedded H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoEmbeddedH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n-\n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n-\n-Follow the steps below to change the type of the default `WSO2_CARBON_DB` datasource.\n-\n-Edit the default\u00a0datasource\u00a0configuration in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file\u00a0as shown below.\n-\n-``` html/xml\n-    <datasource>\n-        <name>WSO2_CARBON_DB</name>\n-        <description>The datasource used for registry and user manager</description>\n-        <jndiConfig>\n-             <name>jdbc/WSO2CarbonDB</name>\n-        </jndiConfig>\n-        <definition type=\"RDBMS\">\n-             <configuration>\n-                 <url>jdbc:h2:repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000</url>\n-                 <username>wso2carbon</username>\n-                 <password>wso2carbon</password>\n-                 <driverClassName>org.h2.Driver</driverClassName>\n-                 <maxActive>50</maxActive>\n-                 <maxWait>60000</maxWait>\n-                 <minIdle>5</minIdle>\n-                 <testOnBorrow>true</testOnBorrow>\n-                 <validationQuery>SELECT 1</validationQuery>\n-                 <validationInterval>30000</validationInterval>\n-                 <defaultAutoCommit>false</defaultAutoCommit>\n-             </configuration>\n-        </definition>\n-    </datasource>\n-```\n-\n-The elements in the above configuration are described below:\n-\n-| Element                       | Description                                                                                                                                                                                                                                                                                                                                  |\n-|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **url**                       | The URL of the database. The default port for a DB2 instance is 50000.                                                                                                                                                                                                                                                                       |\n-| **username** and **password** | The name and password of the database user                                                                                                                                                                                                                                                                                                   |\n-| **driverClassName**           | The class name of the database driver                                                                                                                                                                                                                                                                                                        |\n-| **maxActive**                 | The maximum number of active connections that can beallocated \u00a0atthe same time\u00a0from this pool. Enter any negative value to denote an unlimited number of active connections.                                                                                                                                                                 |\n-| **maxWait**                   | The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. You can enter zero or a negative value to wait indefinitely.                                                                                                              |\n-| **minIdle**                   | The minimum number of active connections that can remain idle in the pool without extra ones being created, or enter zero to create none.                                                                                                                                                                                                    |\n-| **testOnBorrow**              | The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another.                                                                                                                              |\n-| **validationQuery**           | The SQL query that will be used to validate connections from this pool before returning them to the caller.                                                                                                                                                                                                                                  |\n-| **validationInterval**        | The indication to avoid excess validation, and only run validation at the most, at this frequency (time in milliseconds). If a connection is due for validation but has been validated previously within this interval, it will not be validated again.                                                                                      |\n-| **defaultAutoCommit**         | This property is **not** applicable to the Carbon database in WSO2 products because\u00a0auto committing\u00a0is usually handled at the code level, i.e., the default\u00a0auto commit\u00a0configuration specified for the RDBMS driver will be effective instead of this property element. Typically,\u00a0auto committing\u00a0is enabled for RDBMS drivers by default. \n-                                                                                                                                                                                                                                                                                                                                                \n-  When\u00a0auto committing\u00a0is enabled, each SQL statement will be committed to the database as an individual transaction, as opposed to committing multiple statements as a single transaction.                                                                                                                                                     |\n-\n-!!! info\n-For more information on other parameters that can be defined in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file, see [Tomcat JDBC Connection Pool](http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes) .\n-\n-\n-!!! warning\n-The following elements are available only as a **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0 For more information, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) .\n-This WUM update is only applicable to Carbon 4.4.11 and will be shipped out-out-the-box with Carbon versions newer than Carbon 4.4.35. For more information on Carbon compatibility, see [Release Matrix](https://wso2.com/products/carbon/release-matrix/) .\n-\n-\n-| **Element**          | **Description**                                                                                                                                                                                                                                                                                                                                                                |\n-|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **commitOnReturn**   | If `defaultAutoCommit =false`, then you can set `commitOnReturn =true`, so that the pool can complete the transaction by calling the commit on the connection as it is returned to the pool. However, If `rollbackOnReturn =true` then this attribute is ignored. The default value is false. |\n-| **rollbackOnReturn** | If `defaultAutoCommit =false`, then you can set `rollbackOnReturn =true` so that the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool. The default value is false.                                                                                            |\n-\n-**Configuring the connection pool behavior on return\n-** When a database connection is returned to the pool, by default\u00a0 the product rolls back the pending transactions if defaultAutoCommit =true . However, if required you can disable the latter mentioned default behavior by disabling the `ConnectionRollbackOnReturnInterceptor` , which is\u00a0a JDBC-Pool JDBC interceptor,\u00a0and setting the connection pool behavior on return via the datasource configurations by using the following options.\n-\n-!!! warning\n-Disabling the `ConnectionRollbackOnReturnInterceptor` is only possible with the **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0For more information on updating WSO2 API Manager, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) . This WUM update is only applicable to Carbon 4.4.11.\n-\n-\n--   **Configure the connection pool to commit pending transactions on connection return**\n-    1.  Navigate to either one of the following locations based on your OS.\n-        -   On Linux/Mac OS: `<PRODUCT_HOME>/bin/wso2server.sh/`\n-        -   On Windows: `<PRODUCT_HOME>\\bin\\wso2server.bat`\n-    2.  Add the following JVM option:\n-\n-        ``` java\n-                -Dndatasource.disable.rollbackOnReturn=true \\\n-        ```\n-\n-    3.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    4.  Disable the `defaultAutoCommit` by defining it as false.\n-    5.  Add the `commitOnReturn` property and set it to true for all the datasources, including the custom datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit>\n-                                   <commitOnReturn>true</commitOnReturn>    \n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n--   **Configure the connection pool to rollback pending transactions on connection return**\n-\n-    1.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    2.  Disable the `defaultAutoCommit` by defining it as false.\n-\n-    3.  Add the `rollbackOnReturn` property to the datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit> \n-                                   <rollbackOnReturn>true</rollbackOnReturn>\n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n-#### Configuring new\u00a0datasources\u00a0to manage\u00a0registry or user management data\n-\n-Follow the steps below to configure new\u00a0datasources\u00a0to point to the\u00a0new\u00a0database(s) you create to manage\u00a0registry and/or user management data separately.\n-\n-1.  Add a new\u00a0datasource\u00a0with similar configurations as the [`WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) above to the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\u00a0Change its elements with your custom values.\u00a0For instructions, see [Setting up\u00a0datasource\u00a0configurations.](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n-2.  If you are setting up a separate database to store registry-related data, update the following configurations in the &lt; `PRODUCT_HOME>/repository/conf/registry.xml` file.\n-\n-    ``` xml\n-            <dbConfig name=\"wso2registry\">\n-                <dataSource>jdbc/MY_DATASOURCE_NAME</dataSource>\n-            </dbConfig>\n-    ```\n-\n-3.  If you are setting up a separate database to store user management data, update the following configurations in the\u00a0&lt; `PRODUCT_HOME>/repository/conf/user-mgt.xml` file.\n-\n-    ``` xml\n-            <Configuration>\n-                <Property name=\"dataSource\">jdbc/MY_DATASOURCE_NAME</Property>\n-            </Configuration>\n-    ```\n+1. Unzip the WSO2 API Manager pack. Let's call it `<API-M_HOME>`.\n \n-### Creating database tables\n+1. Download the [h2 zip file](http://www.h2database.com/html/download.html),\u00a0and extract it.\n \n-To create the database tables, connect to the database that you created earlier and run the following scripts\u00a0in the\u00a0H2 shell or web console:\n+1. Copy the JAR file to the `<API-M_HOME>/repository/components/lib/` directory in all the nodes of the cluster.\n \n--   To create tables in the\u00a0registry and user manager database ( `WSO2CARBON_DB` ), use the below script:\n-\n-    ``` java\n-            <PRODUCT_HOME>/dbscripts/h2.sql\n-    ```\n-\n-Follow the steps below to run the script in Web console:\n+### Executing db scripts to create tables on remote H2 database\n \n 1.  Run the `./h2.sh` command to start the Web console.\n-2.  Copy the script text from the SQL file.\n-3.  Paste it into the console.\n-4.  Click **Run** .\n-5.  Restart the server.\n-\n-        !!! info\n-    You can create database tables automatically **when starting the product for the first time** by using the `-Dsetup` parameter as follows:\n-\n-    -   For Windows: `<PRODUCT_HOME>/bin/wso2server.bat -Dsetup`\n-\n-    -   For Linux: `<PRODUCT_HOME>/bin/wso2server.sh -Dsetup`\n-\n-        !!! warning\n-        Deprecation of -DSetup\n-    When proper Database Administrative (DBA) practices are followed, the systems (except analytics products) are not granted DDL (Data Definition) rights on the schema. Therefore, maintaining the `-DSetup` option is redundant\u00a0and\u00a0typically unusable. **As a result, from [January 2018 onwards](https://wso2.com/products/carbon/release-matrix/) WSO2 has deprecated the `-DSetup` option** . Note that the proper practice is for the DBA\u00a0to\u00a0run the DDL statements manually so that the DBA can examine\u00a0and\u00a0optimize any DDL statement (if necessary) based on the DBA best practices that are in place within the organization.\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/h2.sql`\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/apimgt/h2.sql`\n \n \n+## Changing to Remote H2\n \n+-   [Creating the datasource connection to Remote H2](#creating-the-datasource-connection-to-remote-h2)\n \n-# Changing to Remote H2\n-\n-The following sections describe how to replace the default H2 databases with Remote H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoRemoteH2-SettingupdatasourceconfigurationsSettingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoRemoteH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n+### Creating the datasource connection to Remote H2\n \n-!!! tip\n-Before you begin\n+A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_SHARED_DB` and `WSO2AM_DB` datasource\u00a0are configured in the `deployment.toml` file for the purpose of connecting to the default H2 databases.\n \n--   Set up the database as explained in [Setting up Remote H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Remote+H2) .\n--   Download the H2 database driver and copy it to WSO2 IoT Server by following the steps under [Setting up drivers](https://docs.wso2.com/display/ADMIN44x/Setting+up+Remote+H2#SettingupRemoteH2-Settingupdrivers) .\n+After setting up the Remote H2 database to replace the default H2 database, either\u00a0change the default configurations of the `WSO2_SHARED_DB` and `WSO2AM_DB` datasource, or\u00a0configure a new\u00a0datasource\u00a0to point it to the new database as explained below.\n \n+!!! note\n+    **If you are configuring API-M in a distributed setup** ,\u00a0do the changes in all the WSO2 API-M components.\n \n-### Setting up\u00a0datasource\u00a0configurations\n+Follow the steps below to change the type of the default datasource.\n \n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Remote H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoRemoteH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoRemoteH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n+1.  Open the `<API-M_HOME>/repository/conf/deployment.toml` configuration file and locate the `[database.shared_db]` and `[database.apim_db]` configuration elements.\n \n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n+1.  You simply have to update the URL pointing to your MySQL database, the username, and password required to access the database and the MySQL driver details as shown below.\n \n-Follow the steps below to change the type of the default `WSO2_CARBON_DB` datasource.\n+    | Element                       | Description                                                 |\n+    |-------------------------------|-------------------------------------------------------------|\n+    | **type**                      | The database type used                                      |\n+    | **url**                       | The URL of the database.                                    |\n+    | **username** and **password** | The name and password of the database user                  |\n+    | **driverClassName**           | The class name of the database driver                       |\n \n-1.  Edit the default\u00a0datasource\u00a0configuration in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file\u00a0as shown below.\n+    Sample configuration is shown below:\n \n-    ``` html/xml\n-        <datasource>\n-              <name>WSO2_CARBON_DB</name>\n-              <description>The datasource used for registry and user manager</description>\n-              <jndiConfig>\n-                   <name>jdbc/WSO2CarbonDB</name>\n-              </jndiConfig>\n-              <definition type=\"RDBMS\">\n-                   <configuration>\n-                       <url>jdbc:h2:tcp://localhost/~/registryDB;create=true</url>\n-                       <username>regadmin</username>\n-                       <password>regadmin</password>\n-                       <driverClassName>org.h2.Driver</driverClassName>\n-                       <maxActive>80</maxActive>\n-                       <maxWait>60000</maxWait>\n-                       <minIdle>5</minIdle>\n-                       <testOnBorrow>true</testOnBorrow>\n-                       <validationQuery>SELECT 1</validationQuery>\n-                       <validationInterval>30000</validationInterval>\n-                       <defaultAutoCommit>false</defaultAutoCommit>\n-                   </configuration>\n-              </definition>\n-        </datasource>\n+    ``` tab=\"Format\"\n+    type = \"h2\"\n+    url = \"jdbc:h2:tcp://localhost/<DATABASE_NAME>\"\n+    username = \"<USER_NAME>\"\n+    password = \"<PASSWORD>\"\n+    driver = \"org.h2.Driver\"\n+    validationQuery = \"SELECT 1\"\n     ```\n \n-    The elements in the above configuration are described below:\n-\n-    | Element                       | Description                                                                                                                                                                                                                                                                                                                                  |\n-    |-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-    | **url**                       | The URL of the database. The default port for a DB2 instance is 50000.                                                                                                                                                                                                                                                                       |\n-    | **username** and **password** | The name and password of the database user                                                                                                                                                                                                                                                                                                   |\n-    | **driverClassName**           | The class name of the database driver                                                                                                                                                                                                                                                                                                        |\n-    | **maxActive**                 | The maximum number of active connections that canbeallocated\u00a0atthesame time\u00a0from this pool. Enter any negative value to denote an unlimited number of active connections.                                                                                                                                                                    |\n-    | **maxWait**                   | The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. You can enter zero or a negative value to wait indefinitely.                                                                                                              |\n-    | **minIdle**                   | The minimum number of active connections that can remain idle in the pool without extra ones being created, or enter zero to create none.                                                                                                                                                                                                    |\n-    | **testOnBorrow**              | The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another.                                                                                                                              |\n-    | **validationQuery**           | The SQL query that will be used to validate connections from this pool before returning them to the caller.                                                                                                                                                                                                                                  |\n-    | **validationInterval**        | The indication to avoid excess validation, and only run validation at the most, at this frequency (time in milliseconds). If a connection is due for validation,\u00a0but has been validated previously within this interval, it will not be validated again.                                                                                     |\n-    | **defaultAutoCommit**         | This property is **not** applicable to the Carbon database in WSO2 products because\u00a0auto committing\u00a0is usually handled at the code level, i.e., the default\u00a0auto commit\u00a0configuration specified for the RDBMS driver will be effective instead of this property element. Typically,\u00a0auto committing\u00a0is enabled for RDBMS drivers by default. \n-                                                                                                                                                                                                                                                                                                                                                    \n-      When\u00a0auto committing\u00a0is enabled, each SQL statement will be committed to the database as an individual transaction, as opposed to committing multiple statements as a single transaction.                                                                                                                                                     |\n-\n-        !!! info\n-    For more information on other parameters that can be defined in the\u00a0&lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file, see [Tomcat JDBC Connection Pool](http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes) .\n-\n-\n-        !!! warning\n-    The following elements are available only as a **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0 For more information, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) .\n-    This WUM update is only applicable to Carbon 4.4.11 and will be shipped out-out-the-box with Carbon versions newer than Carbon 4.4.35. For more information on Carbon compatibility, see [Release Matrix](https://wso2.com/products/carbon/release-matrix/) .\n-\n-\n-    | **Element**          | **Description**                                                                                                                                                                                                                                                                                                                                                                            |\n-    |----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-    | **commitOnReturn**   | If `defaultAutoCommit =false`, then you can set `commitOnReturn =true`, so that the pool can complete the transaction by calling the commit on the connection as it is returned to the pool. However, If `rollbackOnReturn =true` then this attribute is ignored. The default value is false. |\n-    | **rollbackOnReturn** | If `defaultAutoCommit =false`, then you can set `rollbackOnReturn =true` so that the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool. The default value is false.                                                                                                |\n-\n-    **Configuring the connection pool behavior on return\n-    ** When a database connection is returned to the pool, by default\u00a0 the product rolls back the pending transactions if defaultAutoCommit =true . However, if required you can disable the latter mentioned default behavior by disabling the `ConnectionRollbackOnReturnInterceptor` , which is\u00a0a JDBC-Pool JDBC interceptor,\u00a0and setting the connection pool behavior on return via the datasource configurations by using the following options.\n-\n-        !!! warning\n-    Disabling the `ConnectionRollbackOnReturnInterceptor` is only possible with the **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0For more information on updating WSO2 API Manager, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) . This WUM update is only applicable to Carbon 4.4.11.\n-\n-\n-    -   **Configure the connection pool to commit pending transactions on connection return**\n-        1.  Navigate to either one of the following locations based on your OS.\n-            -   On Linux/Mac OS: `<PRODUCT_HOME>/bin/wso2server.sh/`\n-            -   On Windows: `<PRODUCT_HOME>\\bin\\wso2server.bat`\n-        2.  Add the following JVM option:\n-\n-            ``` java\n-                        -Dndatasource.disable.rollbackOnReturn=true \\\n-            ```\n-\n-        3.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-        4.  Disable the `defaultAutoCommit` by defining it as false.\n-        5.  Add the `commitOnReturn` property and set it to true for all the datasources, including the custom datasources.\n-\n-            ``` html/xml\n-                            <datasource>\n-                                 ...\n-                                 <definition type=\"RDBMS\">\n-                                     <configuration>\n-                                           ...\n-                                           <defaultAutoCommit>false</defaultAutoCommit>\n-                                           <commitOnReturn>true</commitOnReturn>    \n-                                           ...\n-                                     </configuration>\n-                                 </definition>\n-                            </datasource>\n-            ```\n-\n-    -   **Configure the connection pool to rollback pending transactions on connection return**\n-\n-        1.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-        2.  Disable the `defaultAutoCommit` by defining it as false.\n-\n-        3.  Add the `rollbackOnReturn` property to the datasources.\n-\n-            ``` html/xml\n-                            <datasource>\n-                                 ...\n-                                 <definition type=\"RDBMS\">\n-                                     <configuration>\n-                                           ...\n-                                           <defaultAutoCommit>false</defaultAutoCommit> \n-                                           <rollbackOnReturn>true</rollbackOnReturn>\n-                                           ...\n-                                     </configuration>\n-                                 </definition>\n-                            </datasource>\n-            ```\n-\n-#### Configuring new\u00a0\u00a0datasources\u00a0to manage\u00a0registry or user management data\n-\n-Follow the steps below to configure new\u00a0datasources\u00a0to point to the\u00a0new\u00a0\u00a0databases you create to manage\u00a0registry and/or user management data separately.\n-\n-1.  Add a new\u00a0datasource\u00a0with similar configurations as the [`WSO2_CARBON_DB` datasource](#ChangingtoRemoteH2-Changingthedefaultdatabase) above to the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file. Change its elements with your custom values. For instructions, see [Setting up\u00a0datasource\u00a0configurations.](#ChangingtoRemoteH2-Settingupdatasourceconfigurations)\n-2.  If you are setting up a separate database to store registry-related data, update the following configurations in the &lt; `PRODUCT_HOME>/repository/conf/registry.xml` file.\n-\n-    ``` xml\n-            <dbConfig name=\"wso2registry\">\n-                <dataSource>jdbc/MY_DATASOURCE_NAME</dataSource>\n-            </dbConfig>\n+    ``` tab=\"Example\"\n+    [database.shared_db]\n+    type = \"h2\"\n+    url = \"jdbc:h2:tcp://localhost/~/shared_db\"\n+    username = \"regadmin\"\n+    password = \"regadmin\"\n+    driver = \"org.h2.Driver\"\n+    validationQuery = \"SELECT 1\"\n+\n+    [database.apim_db]\n+    type = \"h2\"\n+    url = \"jdbc:h2:tcp://localhost/~/apim_db\"", "originalCommit": "c7be5c7b8cfbc8a789820c4ea7d3659e6c39759e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI1NTc4MQ==", "url": "https://github.com/wso2/docs-apim/pull/627#discussion_r363255781", "bodyText": "Updated the DB url via a6c4241", "author": "renuka-fernando", "createdAt": "2020-01-06T11:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzMjM0Mw=="}], "type": "inlineReview"}, {"oid": "5a31a973d7c5900c5fb0a6ed0e47b006f0eab2a1", "url": "https://github.com/wso2/docs-apim/commit/5a31a973d7c5900c5fb0a6ed0e47b006f0eab2a1", "message": "update \"Changing to Remote H2\" documentation\nwso2/docs-apim#624", "committedDate": "2020-01-06T10:45:09Z", "type": "commit"}, {"oid": "5a31a973d7c5900c5fb0a6ed0e47b006f0eab2a1", "url": "https://github.com/wso2/docs-apim/commit/5a31a973d7c5900c5fb0a6ed0e47b006f0eab2a1", "message": "update \"Changing to Remote H2\" documentation\nwso2/docs-apim#624", "committedDate": "2020-01-06T10:45:09Z", "type": "forcePushed"}, {"oid": "2e6e9ff8806e3a7274f8b2f762c7d54ef2b4481e", "url": "https://github.com/wso2/docs-apim/commit/2e6e9ff8806e3a7274f8b2f762c7d54ef2b4481e", "message": "update database url port\nwso2/docs-apim#624", "committedDate": "2020-01-06T11:26:45Z", "type": "commit"}, {"oid": "2e6e9ff8806e3a7274f8b2f762c7d54ef2b4481e", "url": "https://github.com/wso2/docs-apim/commit/2e6e9ff8806e3a7274f8b2f762c7d54ef2b4481e", "message": "update database url port\nwso2/docs-apim#624", "committedDate": "2020-01-06T11:26:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIwODcwMw==", "url": "https://github.com/wso2/docs-apim/pull/627#discussion_r532208703", "bodyText": "This has few typos but seems this doc is taken out from our documentation? if so we don't need to fix. @renuka-fernando", "author": "malinthaprasan", "createdAt": "2020-11-29T13:18:08Z", "path": "en/docs/InstallAndSetup/SettingUpDatabases/ChangingDefaultDatabases/changing-to-remote-h2.md", "diffHunk": "@@ -1,429 +1,135 @@\n-# Setting up Embedded H2\n+# Changing to remote H2\n \n-The following sections describe how to set up an embedded H2 database to replace the default H2 database in your WSO2 product:\n-\n--   [Setting up the database](#SettingupEmbeddedH2-Settingupthedatabase)\n--   [Setting up the drivers](#SettingupEmbeddedH2-Settingupthedrivers)\n+By default, WSO2 API Manager uses the embedded H2 database as the database for storing user management and registry data. Given below are the steps you need to follow in order to use remote H2 for this purpose.\n \n !!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n+    H2 is not recommended in production.\n+    \n+    The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL or MS SQL instead.\n+    \n+    You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n \n-### Setting up the database\n+## Setting up remote H2\n \n-Download and install the H2 database engine on your computer.\n-\n-!!! info\n-For instructions on installing DB2 Express-C, see [H2 installation guide.](http://www.h2database.com/html/quickstart.html)\n+The following sections describe how to set up a remote H2 database to replace the default embedded H2 database in your WSO2 product:\n \n+-   [Setting up the drivers](#setting-up-the-drivers)\n+-   [Executing db scripts to create tables on remote H2 database](#executing-db-scripts-to-create-tables-on-remote-h2-database)\n \n ### Setting up the drivers\n \n-WSO2 currently ships H2 database engine version h2-1.2.140.\\* and its related H2 database driver. If you want to use a different H2 database driver, take the following steps:\n-\n-1.  Delete the following H2 database-related JAR file, which is shipped with WSO2 products:\n-`<PRODUCT_HOME>/repository/components/plugins/h2-database-engine_1.2.140.wso2v3.jar`\n-2.  Find the JAR file of the new H2 database driver ( `<H2_HOME>/bin/h2-*.jar` , where `<H2_HOME>` is the H2 installation directory) and copy it to your WSO2 product's `<PRODUCT_HOME>/repository/components/lib/` directory.\n-\n-## What's next\n-\n-Next, you need to\u00a0configure your product with Embedded H2 database. For more information, see [Changing to Embedded H2](https://docs.wso2.com/display/ADMIN44x/Changing+to+Embedded+H2) .\n-\n-\n-# Changing to Embedded H2\n-\n-The following sections describe how to replace the default H2 database with Embedded H2:\n-\n--   [Setting up\u00a0datasource\u00a0configurations](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n--   [Creating database tables](#ChangingtoEmbeddedH2-Creatingdatabasetables)\n-\n-!!! warning\n-H2 is not recommended in production\n-\n-The embedded H2 database is NOT recommended\u00a0in enterprise testing and production environments.\u00a0It has lower performance, clustering limitations, and can cause file corruption failures.\u00a0Please\u00a0use an industry-standard RDBMS such as Oracle, PostgreSQL, MySQL, or MS SQL instead.\n-\n-You can use the embedded H2 database in development environments and as the local registry in a registry mount.\n-\n-!!! tip\n-Before you begin\n-\n-You need to set up Embedded H2 before following the steps to configure your product with it. For more information, see [Setting up Embedded H2](https://docs.wso2.com/display/ADMIN44x/Setting+up+Embedded+H2) .\n-\n-\n-### Setting up\u00a0datasource\u00a0configurations\n-\n-A\u00a0datasource\u00a0is used to establish the connection to a database. By default, `WSO2_CARBON_DB` datasource\u00a0is used to connect to the default \u00a0H2 database, which stores\u00a0registry and user management data. After setting up the Embedded H2 database to replace the default H2 database, either [change the default configurations of the `WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) ,\u00a0or [configure a new\u00a0datasource](#ChangingtoEmbeddedH2-Configuringnewdatasourcestomanageregistryorusermanagementdata) to point it to the new database as explained below.\n-\n-#### Changing the default\u00a0WSO2\\_CARBON\\_DB\u00a0datasource\n-\n-Follow the steps below to change the type of the default `WSO2_CARBON_DB` datasource.\n-\n-Edit the default\u00a0datasource\u00a0configuration in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file\u00a0as shown below.\n-\n-``` html/xml\n-    <datasource>\n-        <name>WSO2_CARBON_DB</name>\n-        <description>The datasource used for registry and user manager</description>\n-        <jndiConfig>\n-             <name>jdbc/WSO2CarbonDB</name>\n-        </jndiConfig>\n-        <definition type=\"RDBMS\">\n-             <configuration>\n-                 <url>jdbc:h2:repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000</url>\n-                 <username>wso2carbon</username>\n-                 <password>wso2carbon</password>\n-                 <driverClassName>org.h2.Driver</driverClassName>\n-                 <maxActive>50</maxActive>\n-                 <maxWait>60000</maxWait>\n-                 <minIdle>5</minIdle>\n-                 <testOnBorrow>true</testOnBorrow>\n-                 <validationQuery>SELECT 1</validationQuery>\n-                 <validationInterval>30000</validationInterval>\n-                 <defaultAutoCommit>false</defaultAutoCommit>\n-             </configuration>\n-        </definition>\n-    </datasource>\n-```\n-\n-The elements in the above configuration are described below:\n-\n-| Element                       | Description                                                                                                                                                                                                                                                                                                                                  |\n-|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **url**                       | The URL of the database. The default port for a DB2 instance is 50000.                                                                                                                                                                                                                                                                       |\n-| **username** and **password** | The name and password of the database user                                                                                                                                                                                                                                                                                                   |\n-| **driverClassName**           | The class name of the database driver                                                                                                                                                                                                                                                                                                        |\n-| **maxActive**                 | The maximum number of active connections that can beallocated \u00a0atthe same time\u00a0from this pool. Enter any negative value to denote an unlimited number of active connections.                                                                                                                                                                 |\n-| **maxWait**                   | The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. You can enter zero or a negative value to wait indefinitely.                                                                                                              |\n-| **minIdle**                   | The minimum number of active connections that can remain idle in the pool without extra ones being created, or enter zero to create none.                                                                                                                                                                                                    |\n-| **testOnBorrow**              | The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and another attempt will be made to borrow another.                                                                                                                              |\n-| **validationQuery**           | The SQL query that will be used to validate connections from this pool before returning them to the caller.                                                                                                                                                                                                                                  |\n-| **validationInterval**        | The indication to avoid excess validation, and only run validation at the most, at this frequency (time in milliseconds). If a connection is due for validation but has been validated previously within this interval, it will not be validated again.                                                                                      |\n-| **defaultAutoCommit**         | This property is **not** applicable to the Carbon database in WSO2 products because\u00a0auto committing\u00a0is usually handled at the code level, i.e., the default\u00a0auto commit\u00a0configuration specified for the RDBMS driver will be effective instead of this property element. Typically,\u00a0auto committing\u00a0is enabled for RDBMS drivers by default. \n-                                                                                                                                                                                                                                                                                                                                                \n-  When\u00a0auto committing\u00a0is enabled, each SQL statement will be committed to the database as an individual transaction, as opposed to committing multiple statements as a single transaction.                                                                                                                                                     |\n-\n-!!! info\n-For more information on other parameters that can be defined in the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file, see [Tomcat JDBC Connection Pool](http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes) .\n-\n-\n-!!! warning\n-The following elements are available only as a **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0 For more information, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) .\n-This WUM update is only applicable to Carbon 4.4.11 and will be shipped out-out-the-box with Carbon versions newer than Carbon 4.4.35. For more information on Carbon compatibility, see [Release Matrix](https://wso2.com/products/carbon/release-matrix/) .\n-\n-\n-| **Element**          | **Description**                                                                                                                                                                                                                                                                                                                                                                |\n-|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| **commitOnReturn**   | If `defaultAutoCommit =false`, then you can set `commitOnReturn =true`, so that the pool can complete the transaction by calling the commit on the connection as it is returned to the pool. However, If `rollbackOnReturn =true` then this attribute is ignored. The default value is false. |\n-| **rollbackOnReturn** | If `defaultAutoCommit =false`, then you can set `rollbackOnReturn =true` so that the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool. The default value is false.                                                                                            |\n-\n-**Configuring the connection pool behavior on return\n-** When a database connection is returned to the pool, by default\u00a0 the product rolls back the pending transactions if defaultAutoCommit =true . However, if required you can disable the latter mentioned default behavior by disabling the `ConnectionRollbackOnReturnInterceptor` , which is\u00a0a JDBC-Pool JDBC interceptor,\u00a0and setting the connection pool behavior on return via the datasource configurations by using the following options.\n-\n-!!! warning\n-Disabling the `ConnectionRollbackOnReturnInterceptor` is only possible with the **WUM** update and is effective from 14th September 2018 (2018-09-14).\u00a0For more information on updating WSO2 API Manager, see [Updating WSO2 Products](https://www.google.com/url?q=https%3A%2F%2Fdocs.wso2.com%2Fdisplay%2FADMIN44x%2FUpdating%2BWSO2%2BProducts&sa=D&sntz=1&usg=AFQjCNEMvqxxFtu8Qv8K4YugxNXrTfNtUA) . This WUM update is only applicable to Carbon 4.4.11.\n-\n-\n--   **Configure the connection pool to commit pending transactions on connection return**\n-    1.  Navigate to either one of the following locations based on your OS.\n-        -   On Linux/Mac OS: `<PRODUCT_HOME>/bin/wso2server.sh/`\n-        -   On Windows: `<PRODUCT_HOME>\\bin\\wso2server.bat`\n-    2.  Add the following JVM option:\n-\n-        ``` java\n-                -Dndatasource.disable.rollbackOnReturn=true \\\n-        ```\n-\n-    3.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    4.  Disable the `defaultAutoCommit` by defining it as false.\n-    5.  Add the `commitOnReturn` property and set it to true for all the datasources, including the custom datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit>\n-                                   <commitOnReturn>true</commitOnReturn>    \n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n--   **Configure the connection pool to rollback pending transactions on connection return**\n-\n-    1.  Navigate to the `<PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\n-    2.  Disable the `defaultAutoCommit` by defining it as false.\n-\n-    3.  Add the `rollbackOnReturn` property to the datasources.\n-\n-        ``` html/xml\n-                    <datasource>\n-                         ...\n-                         <definition type=\"RDBMS\">\n-                             <configuration>\n-                                   ...\n-                                   <defaultAutoCommit>false</defaultAutoCommit> \n-                                   <rollbackOnReturn>true</rollbackOnReturn>\n-                                   ...\n-                             </configuration>\n-                         </definition>\n-                    </datasource>\n-        ```\n-\n-#### Configuring new\u00a0datasources\u00a0to manage\u00a0registry or user management data\n-\n-Follow the steps below to configure new\u00a0datasources\u00a0to point to the\u00a0new\u00a0database(s) you create to manage\u00a0registry and/or user management data separately.\n-\n-1.  Add a new\u00a0datasource\u00a0with similar configurations as the [`WSO2_CARBON_DB` datasource](#ChangingtoEmbeddedH2-Changingthedefaultdatabase) above to the &lt; `PRODUCT_HOME>/repository/conf/datasources/master-datasources.xml` file.\u00a0Change its elements with your custom values.\u00a0For instructions, see [Setting up\u00a0datasource\u00a0configurations.](#ChangingtoEmbeddedH2-Settingupdatasourceconfigurations)\n-2.  If you are setting up a separate database to store registry-related data, update the following configurations in the &lt; `PRODUCT_HOME>/repository/conf/registry.xml` file.\n-\n-    ``` xml\n-            <dbConfig name=\"wso2registry\">\n-                <dataSource>jdbc/MY_DATASOURCE_NAME</dataSource>\n-            </dbConfig>\n-    ```\n-\n-3.  If you are setting up a separate database to store user management data, update the following configurations in the\u00a0&lt; `PRODUCT_HOME>/repository/conf/user-mgt.xml` file.\n-\n-    ``` xml\n-            <Configuration>\n-                <Property name=\"dataSource\">jdbc/MY_DATASOURCE_NAME</Property>\n-            </Configuration>\n-    ```\n+1.  Unzip the WSO2 API Manager pack. Let's call it `<API-M_HOME>`.\n \n-### Creating database tables\n+1.  Download the [h2 zip file](http://www.h2database.com/html/download.html),\u00a0and extract it.\n \n-To create the database tables, connect to the database that you created earlier and run the following scripts\u00a0in the\u00a0H2 shell or web console:\n+1.  Copy the JAR file to the `<API-M_HOME>/repository/components/lib/` directory in all the nodes of the cluster.\n \n--   To create tables in the\u00a0registry and user manager database ( `WSO2CARBON_DB` ), use the below script:\n-\n-    ``` java\n-            <PRODUCT_HOME>/dbscripts/h2.sql\n-    ```\n-\n-Follow the steps below to run the script in Web console:\n+### Executing db scripts to create tables on remote H2 database\n \n 1.  Run the `./h2.sh` command to start the Web console.\n-2.  Copy the script text from the SQL file.\n-3.  Paste it into the console.\n-4.  Click **Run** .\n-5.  Restart the server.\n-\n-        !!! info\n-    You can create database tables automatically **when starting the product for the first time** by using the `-Dsetup` parameter as follows:\n-\n-    -   For Windows: `<PRODUCT_HOME>/bin/wso2server.bat -Dsetup`\n-\n-    -   For Linux: `<PRODUCT_HOME>/bin/wso2server.sh -Dsetup`\n-\n-        !!! warning\n-        Deprecation of -DSetup\n-    When proper Database Administrative (DBA) practices are followed, the systems (except analytics products) are not granted DDL (Data Definition) rights on the schema. Therefore, maintaining the `-DSetup` option is redundant\u00a0and\u00a0typically unusable. **As a result, from [January 2018 onwards](https://wso2.com/products/carbon/release-matrix/) WSO2 has deprecated the `-DSetup` option** . Note that the proper practice is for the DBA\u00a0to\u00a0run the DDL statements manually so that the DBA can examine\u00a0and\u00a0optimize any DDL statement (if necessary) based on the DBA best practices that are in place within the organization.\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/h2.sql`\n \n+1.  To create tables in the registry and user manager database (`WSO2_SHARED_DB`) use the script: `<API-M_HOME>/dbscripts/apimgt/h2.sql`", "originalCommit": "2e6e9ff8806e3a7274f8b2f762c7d54ef2b4481e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}