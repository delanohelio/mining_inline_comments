{"pr_number": 2016, "pr_title": "add PingFederate connector documentation", "pr_createdAt": "2020-10-08T05:14:54Z", "pr_url": "https://github.com/wso2/docs-apim/pull/2016", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTU5Nw==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r501569597", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            WSO2 API Manager supports multiple Key Managers. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager and with the use of connectors it is capable of supporting any authorization server as a Key Manager.\n          \n          \n            \n            WSO2 API Manager supports multiple Key Managers at the same time. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager, and with the use of connectors, it is capable of supporting any authorization server as a Key Manager.", "author": "bhathiya", "createdAt": "2020-10-08T09:16:32Z", "path": "en/docs/administer/key-managers/configure-pingfederate-connector.md", "diffHunk": "@@ -0,0 +1,285 @@\n+# Configure PingFederate as a Key Manager\n+\n+WSO2 API Manager supports multiple Key Managers. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager and with the use of connectors it is capable of supporting any authorization server as a Key Manager.", "originalCommit": "0339377ee308a50ab0fbb2b77260b4dfdccb8290", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MTUxNQ==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r501571515", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Therefore, WSO2 API Manager can connect PingFederate out-of-the-box using the [WSO2 API-M PingFederate Connector](https://github.com/wso2-extensions/apim-km-pingfederate).\n          \n          \n            \n            As a part of that, WSO2 API Manager can connect PingFederate out-of-the-box using the [WSO2 API-M PingFederate Connector](https://github.com/wso2-extensions/apim-km-pingfederate).", "author": "bhathiya", "createdAt": "2020-10-08T09:19:46Z", "path": "en/docs/administer/key-managers/configure-pingfederate-connector.md", "diffHunk": "@@ -0,0 +1,285 @@\n+# Configure PingFederate as a Key Manager\n+\n+WSO2 API Manager supports multiple Key Managers. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager and with the use of connectors it is capable of supporting any authorization server as a Key Manager.\n+\n+Therefore, WSO2 API Manager can connect PingFederate out-of-the-box using the [WSO2 API-M PingFederate Connector](https://github.com/wso2-extensions/apim-km-pingfederate).", "originalCommit": "0339377ee308a50ab0fbb2b77260b4dfdccb8290", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NTY5OQ==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r501575699", "bodyText": "2 and 3 should be sub-points if 1 right?", "author": "bhathiya", "createdAt": "2020-10-08T09:26:30Z", "path": "en/docs/administer/key-managers/configure-pingfederate-connector.md", "diffHunk": "@@ -0,0 +1,285 @@\n+# Configure PingFederate as a Key Manager\n+\n+WSO2 API Manager supports multiple Key Managers. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager and with the use of connectors it is capable of supporting any authorization server as a Key Manager.\n+\n+Therefore, WSO2 API Manager can connect PingFederate out-of-the-box using the [WSO2 API-M PingFederate Connector](https://github.com/wso2-extensions/apim-km-pingfederate).\n+\n+Follow the instructions given below to configure PingFederate as a third-party Key Manager. \n+\n+\n+## Step 1 - Configure PingFederate\n+\n+1. Sign in to the PingFederate Management Console.\n+     \n+    `https://localhost:9999/pingfederate/app`.\n+\n+2. Click **OAuth Clients** and create a client with the following information in order to introspect the tokens.\n+     <table>\n+     <tr><td> CLIENT ID </td><td> apim-client </td></tr><tr>\n+     <td> ALLOWED GRANT TYPES </td><td> Access Token Validation (Client is a Resource Server) </td></tr>\n+     </table>\n+\n+    [![PingFederate add client]({{base_path}}/assets/img/administer/pingfederate-client-create-1.png)]({{base_path}}/assets/img/administer/pingfederate-client-create-1.png)\n+    [![PingFederate add client]({{base_path}}/assets/img/administer/pingfederate-client-create-2.png)]({{base_path}}/assets/img/administer/pingfederate-client-create-2.png)\n+\n+3. Generate and Store the CLIENT SECRET.\n+\n+     [![Keycloak client secret]({{base_path}}/assets/img/administer/pingfederate-client-secret.png)]({{base_path}}/assets/img/administer/pingfederate-client-secret.png)\n+\n+\n+## Step 2 - Configure Keycloak\n+\n+1. Import PingFederate certificate into the WSO2 API Manager truststore.\n+\n+    - The default PingFederate keystore can found from `SSL Server Certificates` under `Certificate & Key Management`.\n+\n+     [![SSL Server Certificate]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate.png)]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate.png)\n+\n+2. Export the certificate from SSL server certificates.", "originalCommit": "0339377ee308a50ab0fbb2b77260b4dfdccb8290", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NjA1OQ==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r501576059", "bodyText": "We have to mention that this OOTB support available only through wum (timestamp)", "author": "isharac", "createdAt": "2020-10-08T09:27:03Z", "path": "en/docs/administer/key-managers/configure-pingfederate-connector.md", "diffHunk": "@@ -0,0 +1,285 @@\n+# Configure PingFederate as a Key Manager\n+\n+WSO2 API Manager supports multiple Key Managers. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager and with the use of connectors it is capable of supporting any authorization server as a Key Manager.", "originalCommit": "0339377ee308a50ab0fbb2b77260b4dfdccb8290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MTg1NA==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r501581854", "bodyText": "this need to mention the wum timestamp", "author": "tharindu1st", "createdAt": "2020-10-08T09:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NjA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NjEzNA==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r501576134", "bodyText": "revert this.", "author": "bhathiya", "createdAt": "2020-10-08T09:27:11Z", "path": "en/mkdocs.yml", "diffHunk": "@@ -721,4 +722,4 @@ extra:\n         - type: linkedin\n           link: https://www.linkedin.com/company/wso2\n     site_version: 3.2.0\n-    base_path: https://apim.docs.wso2.com/en/3.2.0\n+    base_path: http://localhost:8000", "originalCommit": "0339377ee308a50ab0fbb2b77260b4dfdccb8290", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NjM5Mg==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r501576392", "bodyText": "Keycloak?", "author": "isharac", "createdAt": "2020-10-08T09:27:32Z", "path": "en/docs/administer/key-managers/configure-pingfederate-connector.md", "diffHunk": "@@ -0,0 +1,285 @@\n+# Configure PingFederate as a Key Manager\n+\n+WSO2 API Manager supports multiple Key Managers. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager and with the use of connectors it is capable of supporting any authorization server as a Key Manager.\n+\n+Therefore, WSO2 API Manager can connect PingFederate out-of-the-box using the [WSO2 API-M PingFederate Connector](https://github.com/wso2-extensions/apim-km-pingfederate).\n+\n+Follow the instructions given below to configure PingFederate as a third-party Key Manager. \n+\n+\n+## Step 1 - Configure PingFederate\n+\n+1. Sign in to the PingFederate Management Console.\n+     \n+    `https://localhost:9999/pingfederate/app`.\n+\n+2. Click **OAuth Clients** and create a client with the following information in order to introspect the tokens.\n+     <table>\n+     <tr><td> CLIENT ID </td><td> apim-client </td></tr><tr>\n+     <td> ALLOWED GRANT TYPES </td><td> Access Token Validation (Client is a Resource Server) </td></tr>\n+     </table>\n+\n+    [![PingFederate add client]({{base_path}}/assets/img/administer/pingfederate-client-create-1.png)]({{base_path}}/assets/img/administer/pingfederate-client-create-1.png)\n+    [![PingFederate add client]({{base_path}}/assets/img/administer/pingfederate-client-create-2.png)]({{base_path}}/assets/img/administer/pingfederate-client-create-2.png)\n+\n+3. Generate and Store the CLIENT SECRET.\n+\n+     [![Keycloak client secret]({{base_path}}/assets/img/administer/pingfederate-client-secret.png)]({{base_path}}/assets/img/administer/pingfederate-client-secret.png)\n+\n+\n+## Step 2 - Configure Keycloak", "originalCommit": "0339377ee308a50ab0fbb2b77260b4dfdccb8290", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3ODQ2OA==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r501578468", "bodyText": "need to revert this change", "author": "isharac", "createdAt": "2020-10-08T09:30:46Z", "path": "en/mkdocs.yml", "diffHunk": "@@ -721,4 +722,4 @@ extra:\n         - type: linkedin\n           link: https://www.linkedin.com/company/wso2\n     site_version: 3.2.0\n-    base_path: https://apim.docs.wso2.com/en/3.2.0\n+    base_path: http://localhost:8000", "originalCommit": "0339377ee308a50ab0fbb2b77260b4dfdccb8290", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "850f197f0f49d5bea27c0cf058012c2710af23d3", "url": "https://github.com/wso2/docs-apim/commit/850f197f0f49d5bea27c0cf058012c2710af23d3", "message": "add PingFederate connector documentation", "committedDate": "2020-10-20T09:39:49Z", "type": "commit"}, {"oid": "561df91adca36919fdb822c5087a6b6bf4c931b6", "url": "https://github.com/wso2/docs-apim/commit/561df91adca36919fdb822c5087a6b6bf4c931b6", "message": "Update en/docs/administer/key-managers/configure-pingfederate-connector.md\n\nCo-authored-by: Bhathiya Jayasekara <bhathiya@wso2.com>", "committedDate": "2020-10-20T09:39:50Z", "type": "commit"}, {"oid": "958d8f269e45458fc1f5b4e8076f67655085338e", "url": "https://github.com/wso2/docs-apim/commit/958d8f269e45458fc1f5b4e8076f67655085338e", "message": "Update en/docs/administer/key-managers/configure-pingfederate-connector.md\n\nCo-authored-by: Bhathiya Jayasekara <bhathiya@wso2.com>", "committedDate": "2020-10-20T09:39:50Z", "type": "commit"}, {"oid": "fc49fb21abe13a4a25a6e3ffae085418075cdad0", "url": "https://github.com/wso2/docs-apim/commit/fc49fb21abe13a4a25a6e3ffae085418075cdad0", "message": "add review changes", "committedDate": "2020-10-20T09:39:50Z", "type": "commit"}, {"oid": "fc49fb21abe13a4a25a6e3ffae085418075cdad0", "url": "https://github.com/wso2/docs-apim/commit/fc49fb21abe13a4a25a6e3ffae085418075cdad0", "message": "add review changes", "committedDate": "2020-10-20T09:39:50Z", "type": "forcePushed"}, {"oid": "34c2130bff81a730a370a3768a4313590674a54b", "url": "https://github.com/wso2/docs-apim/commit/34c2130bff81a730a370a3768a4313590674a54b", "message": "Reviewed and updated entire doc", "committedDate": "2020-10-20T17:09:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5OTU0Mw==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r508699543", "bodyText": "Is it correct to mention Okta here when we are speaking about Ping Federate?", "author": "Mariangela", "createdAt": "2020-10-20T17:11:15Z", "path": "en/docs/administer/key-managers/configure-pingfederate-connector.md", "diffHunk": "@@ -0,0 +1,285 @@\n+# Configure PingFederate as a Key Manager\n+\n+WSO2 API Manager supports multiple Key Managers. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager and with the use of connectors it is capable of supporting any authorization server as a Key Manager.\n+\n+Therefore, WSO2 API Manager can connect PingFederate out-of-the-box using the [WSO2 API-M PingFederate Connector](https://github.com/wso2-extensions/apim-km-pingfederate).\n+\n+Follow the instructions given below to configure PingFederate as a third-party Key Manager. \n+\n+\n+## Step 1 - Configure PingFederate\n+\n+1. Sign in to the PingFederate Management Console.\n+     \n+    `https://localhost:9999/pingfederate/app`.\n+\n+2. Click **OAuth Clients** and create a client with the following information in order to introspect the tokens.\n+     <table>\n+     <tr><td> CLIENT ID </td><td> apim-client </td></tr><tr>\n+     <td> ALLOWED GRANT TYPES </td><td> Access Token Validation (Client is a Resource Server) </td></tr>\n+     </table>\n+\n+    [![PingFederate add client]({{base_path}}/assets/img/administer/pingfederate-client-create-1.png)]({{base_path}}/assets/img/administer/pingfederate-client-create-1.png)\n+    [![PingFederate add client]({{base_path}}/assets/img/administer/pingfederate-client-create-2.png)]({{base_path}}/assets/img/administer/pingfederate-client-create-2.png)\n+\n+3. Generate and Store the CLIENT SECRET.\n+\n+     [![Keycloak client secret]({{base_path}}/assets/img/administer/pingfederate-client-secret.png)]({{base_path}}/assets/img/administer/pingfederate-client-secret.png)\n+\n+\n+## Step 2 - Configure Keycloak\n+\n+1. Import PingFederate certificate into the WSO2 API Manager truststore.\n+\n+    - The default PingFederate keystore can found from `SSL Server Certificates` under `Certificate & Key Management`.\n+\n+     [![SSL Server Certificate]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate.png)]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate.png)\n+\n+2. Export the certificate from SSL server certificates.\n+\n+     [![SSL Server Certificate Import]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate-export.png)]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate-export.png)\n+\n+\n+3. Import the certificate into the WSO2 API-M truststore.\n+\n+       ```\n+       keytool -import -trustcacerts -alias pingfederate -file ping.crt -keystore client-truststore.jks -storepass wso2carbon -noprompt\n+       ```\n+\n+4. Start WSO2 API Manager.\n+\n+     `<API-M_HOME>` refers to the root folder of the extracted WSO2 API-M distribution.\n+\n+5. Add a Key Manager.\n+\n+    1. Sign in to the Admin Portal. \n+\n+         `https://<hostname>:9443/admin`\n+\n+         `https://localhost:9443/admin`\n+\n+    2. Click Key Manager and then click **Add Key Manager**.\n+        \n+         [![Add new Key Manager]({{base_path}}/assets/img/administer/add-new-key-manager.png)]({{base_path}}/assets/img/administer/add-new-key-manager.png)\n+\n+    3. Add the following configuration to add a new Key Manager.\n+    \n+         [![Add PingFederate configurations]({{base_path}}/assets/img/administer/pingfederate-endpoints.png)]({{base_path}}/assets/img/administer/pingfederate-endpoints.png)\n+\n+         The following table provides definitions for each of the configurations.\n+\n+         <table>\n+            <tr class=\"header\">\n+            <th>Configuration</th>\n+            <th>Description</th>\n+            <th> </th>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Name</td>\n+            <td>The name of the authorization server.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Display Name</td>\n+            <td>A name to display on the UI.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Description</td>\n+            <td>A brief description of the Key Manager.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Key Manager Type</td>\n+            <td>The type of the Key Manager to be selected.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Well-known-url</td>\n+            <td>The well-known URL of the authorization server (Key Manager). </br>\n+            If the well-known URL is provided, other endpoints can be imported.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Issuer</td>\n+            <td>The issuer that consumes or validates the access tokens\n+            </br> e.g., https://localhost:9031</br>\n+               https://localhost:9031</td>\n+          <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td><b>Key Manager Endpoints</b></td>\n+            <td> </td>\n+            <td> </td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Client Registration Endpoint </td>\n+            <td>The endpoint to verify the identity and obtain profile information of the end-user based on the authentication performed by an authorization server.</br>\n+            e.g., https://localhost:9031/pf-ws/rest/oauth/clients\n+            </td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Introspection Endpoint</td>\n+            <td>The endpoint that allows authorized protected resources to query the authorization server to determine the set of metadata for a given token that was presented to them by an OAuth client.\n+            </br> e.g., \n+            https://localhost:9031/as/introspect.oauth2 </br>\n+            </td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Token Endpoint</td>\n+            <td>The endpoint that issues the access tokens.\n+            </br>\n+            e.g.,\n+            https://localhost:9031/as/token.oauth2</br>\n+            </td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Revoke Endpoint</td>\n+            <td>The endpoint that revokes the access tokens.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Userinfo Endpoint</td>\n+            <td>The endpoint that allows clients to verify the identity of the end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the end-user.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Authorize Endpoint</td>\n+            <td>The endpoint used to obtain an authorization grant from the resource owner via user-agent redirection.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Scope Management Endpoint </td>\n+            <td>The endpoint used to manage the scopes.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td><b>Connector Configurations</b></td>\n+            <td></td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Username</td>\n+            <td>The Administrative user's username to invoke Client registration endpoint. </td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Client Secret</td>\n+            <td>The Administrative user's password to invoke Client registration endpoint. </a>.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Client ID</td>\n+            <td>The client ID obtained from PingFederate to validate tokens from Introspection endpoint</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Client Secret</td>\n+            <td>The client secret obtained from PingFederate to validate tokens from Introspection endpoint.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td><b>Claim URIs</b></td>\n+            <td>Provide the claim URIs for the consumer key and the scopes.</td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Consumer Key Claim URI</td>\n+            <td>The claim URI for the consumer key.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Scopes Claim URI</td>\n+            <td>The claim URI for scopes.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Grant Types</td>\n+            <td>The supported grant types.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td><b>Certificates</b></td>\n+            <td></td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>PEM</td>\n+            <td>Either copy and paste the certificate in PEM format or upload the PEM file.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>JWKS</td>\n+            <td>The JSON Web Key Set (JWKS) endpoint is a read-only endpoint. This URL returns Keycloak's public key set in JSON web key set format.\n+            This contains the signing key(s) the Relying Party (RP) uses to validate signatures from PingFederate.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td><b>Advanced Configurations</b></td>\n+            <td>Token Generation</td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Token Generation</td>\n+            <td>Enables token generation via the authorization server.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Out Of Band Provisioning</td>\n+            <td>This enables the provisioning of Auth clients that have been created without the use of the Developer Portal, such as previously created Auth clients.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Oauth App Creation</td>\n+            <td>This enables the creation of Auth clients.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td><b>Token Validation Method</b></td>\n+            <td>The method used to validate the JWT signature.</td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Self Validate JWT</td>\n+            <td>The kid value is used to validate the JWT token signature. If the kid value is not present, `gateway_certificate_alias` is used.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Use introspect</td>\n+            <td>The JWKS endpoint is used to validate the JWT token signature.\n+            If this option is used to validate the tokens it is mandatory to add a Token Handling Option.\n+                For the Okta it should be <b>JWT</b> and it is required to specify a claim mapping as a unique identifier.", "originalCommit": "850f197f0f49d5bea27c0cf058012c2710af23d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwMTcxNA==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r508701714", "bodyText": "How come we do not have a section on \"generate keys using the PingFederate key manager\" similar to what we have for okta [1], Auth0, keycloak etc.?\n[1] https://apim.docs.wso2.com/en/latest/administer/key-managers/configure-okta-connector/#step-3-generate-keys-using-the-okta-key-manager", "author": "Mariangela", "createdAt": "2020-10-20T17:14:54Z", "path": "en/docs/administer/key-managers/configure-pingfederate-connector.md", "diffHunk": "@@ -0,0 +1,285 @@\n+# Configure PingFederate as a Key Manager\n+\n+WSO2 API Manager supports multiple Key Managers. As a result, WSO2 API Manager is prepacked with an inbuilt resident Key Manager and with the use of connectors it is capable of supporting any authorization server as a Key Manager.\n+\n+Therefore, WSO2 API Manager can connect PingFederate out-of-the-box using the [WSO2 API-M PingFederate Connector](https://github.com/wso2-extensions/apim-km-pingfederate).\n+\n+Follow the instructions given below to configure PingFederate as a third-party Key Manager. \n+\n+\n+## Step 1 - Configure PingFederate\n+\n+1. Sign in to the PingFederate Management Console.\n+     \n+    `https://localhost:9999/pingfederate/app`.\n+\n+2. Click **OAuth Clients** and create a client with the following information in order to introspect the tokens.\n+     <table>\n+     <tr><td> CLIENT ID </td><td> apim-client </td></tr><tr>\n+     <td> ALLOWED GRANT TYPES </td><td> Access Token Validation (Client is a Resource Server) </td></tr>\n+     </table>\n+\n+    [![PingFederate add client]({{base_path}}/assets/img/administer/pingfederate-client-create-1.png)]({{base_path}}/assets/img/administer/pingfederate-client-create-1.png)\n+    [![PingFederate add client]({{base_path}}/assets/img/administer/pingfederate-client-create-2.png)]({{base_path}}/assets/img/administer/pingfederate-client-create-2.png)\n+\n+3. Generate and Store the CLIENT SECRET.\n+\n+     [![Keycloak client secret]({{base_path}}/assets/img/administer/pingfederate-client-secret.png)]({{base_path}}/assets/img/administer/pingfederate-client-secret.png)\n+\n+\n+## Step 2 - Configure Keycloak\n+\n+1. Import PingFederate certificate into the WSO2 API Manager truststore.\n+\n+    - The default PingFederate keystore can found from `SSL Server Certificates` under `Certificate & Key Management`.\n+\n+     [![SSL Server Certificate]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate.png)]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate.png)\n+\n+2. Export the certificate from SSL server certificates.\n+\n+     [![SSL Server Certificate Import]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate-export.png)]({{base_path}}/assets/img/administer/ping-federate-ssl-certificate-export.png)\n+\n+\n+3. Import the certificate into the WSO2 API-M truststore.\n+\n+       ```\n+       keytool -import -trustcacerts -alias pingfederate -file ping.crt -keystore client-truststore.jks -storepass wso2carbon -noprompt\n+       ```\n+\n+4. Start WSO2 API Manager.\n+\n+     `<API-M_HOME>` refers to the root folder of the extracted WSO2 API-M distribution.\n+\n+5. Add a Key Manager.\n+\n+    1. Sign in to the Admin Portal. \n+\n+         `https://<hostname>:9443/admin`\n+\n+         `https://localhost:9443/admin`\n+\n+    2. Click Key Manager and then click **Add Key Manager**.\n+        \n+         [![Add new Key Manager]({{base_path}}/assets/img/administer/add-new-key-manager.png)]({{base_path}}/assets/img/administer/add-new-key-manager.png)\n+\n+    3. Add the following configuration to add a new Key Manager.\n+    \n+         [![Add PingFederate configurations]({{base_path}}/assets/img/administer/pingfederate-endpoints.png)]({{base_path}}/assets/img/administer/pingfederate-endpoints.png)\n+\n+         The following table provides definitions for each of the configurations.\n+\n+         <table>\n+            <tr class=\"header\">\n+            <th>Configuration</th>\n+            <th>Description</th>\n+            <th> </th>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Name</td>\n+            <td>The name of the authorization server.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Display Name</td>\n+            <td>A name to display on the UI.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Description</td>\n+            <td>A brief description of the Key Manager.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Key Manager Type</td>\n+            <td>The type of the Key Manager to be selected.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Well-known-url</td>\n+            <td>The well-known URL of the authorization server (Key Manager). </br>\n+            If the well-known URL is provided, other endpoints can be imported.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Issuer</td>\n+            <td>The issuer that consumes or validates the access tokens\n+            </br> e.g., https://localhost:9031</br>\n+               https://localhost:9031</td>\n+          <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td><b>Key Manager Endpoints</b></td>\n+            <td> </td>\n+            <td> </td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Client Registration Endpoint </td>\n+            <td>The endpoint to verify the identity and obtain profile information of the end-user based on the authentication performed by an authorization server.</br>\n+            e.g., https://localhost:9031/pf-ws/rest/oauth/clients\n+            </td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Introspection Endpoint</td>\n+            <td>The endpoint that allows authorized protected resources to query the authorization server to determine the set of metadata for a given token that was presented to them by an OAuth client.\n+            </br> e.g., \n+            https://localhost:9031/as/introspect.oauth2 </br>\n+            </td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Token Endpoint</td>\n+            <td>The endpoint that issues the access tokens.\n+            </br>\n+            e.g.,\n+            https://localhost:9031/as/token.oauth2</br>\n+            </td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Revoke Endpoint</td>\n+            <td>The endpoint that revokes the access tokens.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Userinfo Endpoint</td>\n+            <td>The endpoint that allows clients to verify the identity of the end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the end-user.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Authorize Endpoint</td>\n+            <td>The endpoint used to obtain an authorization grant from the resource owner via user-agent redirection.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Scope Management Endpoint </td>\n+            <td>The endpoint used to manage the scopes.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td><b>Connector Configurations</b></td>\n+            <td></td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Username</td>\n+            <td>The Administrative user's username to invoke Client registration endpoint. </td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Client Secret</td>\n+            <td>The Administrative user's password to invoke Client registration endpoint. </a>.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Client ID</td>\n+            <td>The client ID obtained from PingFederate to validate tokens from Introspection endpoint</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Client Secret</td>\n+            <td>The client secret obtained from PingFederate to validate tokens from Introspection endpoint.</td>\n+            <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td><b>Claim URIs</b></td>\n+            <td>Provide the claim URIs for the consumer key and the scopes.</td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Consumer Key Claim URI</td>\n+            <td>The claim URI for the consumer key.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Scopes Claim URI</td>\n+            <td>The claim URI for scopes.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Grant Types</td>\n+            <td>The supported grant types.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td><b>Certificates</b></td>\n+            <td></td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>PEM</td>\n+            <td>Either copy and paste the certificate in PEM format or upload the PEM file.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>JWKS</td>\n+            <td>The JSON Web Key Set (JWKS) endpoint is a read-only endpoint. This URL returns Keycloak's public key set in JSON web key set format.\n+            This contains the signing key(s) the Relying Party (RP) uses to validate signatures from PingFederate.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td><b>Advanced Configurations</b></td>\n+            <td>Token Generation</td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Token Generation</td>\n+            <td>Enables token generation via the authorization server.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Out Of Band Provisioning</td>\n+            <td>This enables the provisioning of Auth clients that have been created without the use of the Developer Portal, such as previously created Auth clients.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Oauth App Creation</td>\n+            <td>This enables the creation of Auth clients.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td><b>Token Validation Method</b></td>\n+            <td>The method used to validate the JWT signature.</td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>Self Validate JWT</td>\n+            <td>The kid value is used to validate the JWT token signature. If the kid value is not present, `gateway_certificate_alias` is used.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>Use introspect</td>\n+            <td>The JWKS endpoint is used to validate the JWT token signature.\n+            If this option is used to validate the tokens it is mandatory to add a Token Handling Option.\n+                For the Okta it should be <b>JWT</b> and it is required to specify a claim mapping as a unique identifier.\n+            </br>e.g.,; Claim Key : iss\n+            </br>Claim Value : https://localhost:9031 </td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td><b>Token Handling Options</b></td>\n+            <td>Provides a way to validate the token for this particular authorization server.\n+            This is mandatory if the Token Validation Method is <b>introspect</b></td>\n+            <td></td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>REFERENCE</td>\n+            <td>The tokens matching a specific regular expression (regEx) is validated.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td>JWT</td>\n+            <td>The tokens matching a specific JWT is validated.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+            <td>CUSTOM</td>\n+            <td>The token matching a custom pattern is validated.</td>\n+            <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+            <td><b>Claim Mappings</b></td>\n+            <td>Local and remote claim mapping.</td>\n+            <td>Optional</td>\n+          </tr>\n+          </table>", "originalCommit": "850f197f0f49d5bea27c0cf058012c2710af23d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NDc4MQ==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r509084781", "bodyText": "fixed", "author": "tharindu1st", "createdAt": "2020-10-21T08:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwMTcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwMjM1MA==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r508702350", "bodyText": "This change is incorrect. The base_path should be \"base_path: https://apim.docs.wso2.com/en/3.2.0\"", "author": "Mariangela", "createdAt": "2020-10-20T17:15:52Z", "path": "en/mkdocs.yml", "diffHunk": "@@ -719,4 +720,4 @@ extra:\n         - type: linkedin\n           link: https://www.linkedin.com/company/wso2\n     site_version: 3.2.0\n-    base_path: https://apim.docs.wso2.com/en/3.2.0\n+    base_path: http://localhost:8000", "originalCommit": "850f197f0f49d5bea27c0cf058012c2710af23d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNTE2Mg==", "url": "https://github.com/wso2/docs-apim/pull/2016#discussion_r509015162", "bodyText": "fixed", "author": "tharindu1st", "createdAt": "2020-10-21T06:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwMjM1MA=="}], "type": "inlineReview"}, {"oid": "0d2f1bc899d9b5e34fe79e472438b1ed59d59b33", "url": "https://github.com/wso2/docs-apim/commit/0d2f1bc899d9b5e34fe79e472438b1ed59d59b33", "message": "add changes", "committedDate": "2020-10-21T08:20:31Z", "type": "commit"}, {"oid": "8e7fcc2e89824395189cde8e2ba950a2a4833cfd", "url": "https://github.com/wso2/docs-apim/commit/8e7fcc2e89824395189cde8e2ba950a2a4833cfd", "message": "Updated the image link with the zoom option", "committedDate": "2020-10-21T08:45:06Z", "type": "commit"}]}