{"pr_number": 3284, "pr_title": "Cleanup", "pr_createdAt": "2020-11-07T09:31:57Z", "pr_url": "https://github.com/Anuken/Mindustry/pull/3284", "timeline": [{"oid": "ed36390f3cfa53bc2bcfa5e113b3f7c6796b1c06", "url": "https://github.com/Anuken/Mindustry/commit/ed36390f3cfa53bc2bcfa5e113b3f7c6796b1c06", "message": "Great cleanup", "committedDate": "2020-11-07T08:37:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1OTU3Ng==", "url": "https://github.com/Anuken/Mindustry/pull/3284#discussion_r519159576", "bodyText": "Maybe leave the \u02bbinstanceof` keyword here?", "author": "summetdev", "createdAt": "2020-11-07T09:53:26Z", "path": "core/src/mindustry/maps/SectorDamage.java", "diffHunk": "@@ -291,7 +291,7 @@ public static void writeParameters(SectorInfo info){\n \n                 sumHealth += unit.health*healthMult + unit.shield;\n                 sumDps += unit.type.dpsEstimate;\n-                if(unit.abilities.find(a -> a instanceof RepairFieldAbility) instanceof RepairFieldAbility h){\n+                if(unit.abilities.find(RepairFieldAbility.class::isInstance) instanceof RepairFieldAbility h){", "originalCommit": "ed36390f3cfa53bc2bcfa5e113b3f7c6796b1c06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1OTYwNQ==", "url": "https://github.com/Anuken/Mindustry/pull/3284#discussion_r519159605", "bodyText": "Same", "author": "summetdev", "createdAt": "2020-11-07T09:53:42Z", "path": "core/src/mindustry/type/Item.java", "diffHunk": "@@ -53,6 +53,6 @@ public ContentType getContentType(){\n \n     /** Allocates a new array containing all items that generate ores. */\n     public static Seq<Item> getAllOres(){\n-        return content.blocks().select(b -> b instanceof OreBlock).map(b -> ((Floor)b).itemDrop);\n+        return content.blocks().select(OreBlock.class::isInstance).map(b -> ((Floor)b).itemDrop);", "originalCommit": "ed36390f3cfa53bc2bcfa5e113b3f7c6796b1c06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1OTk2Mw==", "url": "https://github.com/Anuken/Mindustry/pull/3284#discussion_r519159963", "bodyText": "Maybe yes", "author": "skykatik", "createdAt": "2020-11-07T09:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1OTYwNQ=="}], "type": "inlineReview"}, {"oid": "f8914d0543110ceabe83af7fea035b870dab9c7e", "url": "https://github.com/Anuken/Mindustry/commit/f8914d0543110ceabe83af7fea035b870dab9c7e", "message": "Old style", "committedDate": "2020-11-07T10:01:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4OTE3MQ==", "url": "https://github.com/Anuken/Mindustry/pull/3284#discussion_r519189171", "bodyText": "not compatible with android", "author": "Anuken", "createdAt": "2020-11-07T15:36:10Z", "path": "core/src/mindustry/logic/LogicOp.java", "diffHunk": "@@ -4,7 +4,7 @@\n import arc.util.*;\n \n public enum LogicOp{\n-    add(\"+\", (a, b) -> a + b),\n+    add(\"+\", Double::sum),", "originalCommit": "f8914d0543110ceabe83af7fea035b870dab9c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4OTE4Mg==", "url": "https://github.com/Anuken/Mindustry/pull/3284#discussion_r519189182", "bodyText": "fails to compile for some java versions", "author": "Anuken", "createdAt": "2020-11-07T15:36:19Z", "path": "core/src/mindustry/logic/LogicOp.java", "diffHunk": "@@ -29,7 +29,7 @@\n     noise(\"noise\", LExecutor.noise::rawNoise2D),\n \n     not(\"not\", a -> ~(long)(a)),\n-    abs(\"abs\", a -> Math.abs(a)),\n+    abs(\"abs\", Math::abs),", "originalCommit": "f8914d0543110ceabe83af7fea035b870dab9c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4OTI0OA==", "url": "https://github.com/Anuken/Mindustry/pull/3284#discussion_r519189248", "bodyText": "this is awful, never use reflection in a place where standard java works just fine", "author": "Anuken", "createdAt": "2020-11-07T15:36:55Z", "path": "core/src/mindustry/graphics/MenuRenderer.java", "diffHunk": "@@ -42,7 +42,7 @@ public MenuRenderer(){\n     private void generate(){\n         world.beginMapLoad();\n         Tiles tiles = world.resize(width, height);\n-        Seq<Block> ores = content.blocks().select(b -> b instanceof OreBlock);\n+        Seq<Block> ores = content.blocks().select(OreBlock.class::isInstance);", "originalCommit": "f8914d0543110ceabe83af7fea035b870dab9c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4OTMxMQ==", "url": "https://github.com/Anuken/Mindustry/pull/3284#discussion_r519189311", "bodyText": "there's no reason to use method references when the result is longer code", "author": "Anuken", "createdAt": "2020-11-07T15:37:41Z", "path": "core/src/mindustry/core/Control.java", "diffHunk": "@@ -185,7 +186,7 @@ public Control(){\n                 if(state.isCampaign()){\n                     ui.announce(\"[accent]\" + state.rules.sector.name() + \"\\n\" +\n                         (state.rules.sector.info.resources.any() ? \"[lightgray]\" + bundle.get(\"sectors.resources\") + \"[white] \" +\n-                            state.rules.sector.info.resources.toString(\" \", u -> u.emoji()) : \"\"), 5);\n+                            state.rules.sector.info.resources.toString(\" \", UnlockableContent::emoji) : \"\"), 5);", "originalCommit": "f8914d0543110ceabe83af7fea035b870dab9c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f979cba0dc2bcbb5e9ed273d9d0bb0676ef336a", "url": "https://github.com/Anuken/Mindustry/commit/9f979cba0dc2bcbb5e9ed273d9d0bb0676ef336a", "message": "Rollback", "committedDate": "2020-11-07T16:46:37Z", "type": "commit"}, {"oid": "f84e780f3b83ef0a9d9455201848a3eb88b106bd", "url": "https://github.com/Anuken/Mindustry/commit/f84e780f3b83ef0a9d9455201848a3eb88b106bd", "message": "Merge branch 'master' into cleanup-2", "committedDate": "2020-11-09T16:21:01Z", "type": "commit"}]}