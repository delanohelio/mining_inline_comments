{"pr_number": 3323, "pr_title": "add file picker interface for mods", "pr_createdAt": "2020-11-10T08:33:29Z", "pr_url": "https://github.com/Anuken/Mindustry/pull/3323", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MjY1Mg==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520442652", "bodyText": "Did you mean readBinFile(purpose, ext, cons)?", "author": "Gdeft", "createdAt": "2020-11-10T10:11:16Z", "path": "core/assets/scripts/base.js", "diffHunk": "@@ -1,13 +1,18 @@\n \"use strict\";\n \n const log = function(context, obj){\n-    Vars.mods.getScripts().log(context, String(obj))\n+    Vars.mods.scripts.log(context, String(obj))\n }\n \n-const readString = path => Vars.mods.getScripts().readString(path)\n-const readBytes = path => Vars.mods.getScripts().readBytes(path)\n-const loadMusic = path => Vars.mods.getScripts().loadMusic(path)\n-const loadSound = path => Vars.mods.getScripts().loadSound(path)\n+const readString = path => Vars.mods.scripts.readString(path)\n+const readBytes = path => Vars.mods.scripts.readBytes(path)\n+const loadMusic = path => Vars.mods.scripts.loadMusic(path)\n+const loadSound = path => Vars.mods.scripts.loadSound(path)\n+\n+const readFile = (purpose, ext, cons) => Vars.mods.scripts.readFile(purpose, ext, cons);\n+const readBinFile = (purpose, ext, cons) => Vars.mods.scripts.readNinFile(purpose, ext, cons);", "originalCommit": "154a91a411a405a854e61ef749cd8bdebd5cf72c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5ODcxNw==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520598717", "bodyText": "nin", "author": "DeltaNedas", "createdAt": "2020-11-10T14:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MjY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3OTkzNQ==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520579935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ext == null ? fi -> true : fi -> fi.extEquals(ext),\n          \n          \n            \n                        fi -> ext == null || fi.extEquals(ext),", "author": "Anuken", "createdAt": "2020-11-10T13:56:17Z", "path": "core/src/mindustry/mod/Scripts.java", "diffHunk": "@@ -116,6 +118,47 @@ public Music loadMusic(String soundName){\n         return sound;\n     }\n \n+    /** Ask the user to select a file to read for a certain purpose like \"Please upload a sprite\"\n+        Extension can be null to select any file. */\n+    public void readFile(String purpose, String ext, Cons<String> string){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readString()));\n+    }\n+\n+    /** readFile but for a byte[] */\n+    public void readBinFile(String purpose, String ext, Cons<byte[]> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readBytes()));\n+    }\n+\n+    /** Ask the user to write a file.\n+        Extension can be null to allow any filename. */\n+    public void writeFile(String purpose, String ext, String contents){\n+        if(contents == null) contents = \"\";\n+        selectFile(false, purpose, ext, fi -> fi.writeString(contents));\n+    }\n+\n+    /** writeFile but for a byte[] */\n+    public void writeBinFile(String purpose, String ext, byte[] contents){\n+        if(contents == null) contents = new byte[0];\n+        selectFile(false, purpose, ext, fi -> fi.writeBytes(contents));\n+    }\n+\n+    private void selectFile(boolean open, String purpose, String ext, Cons<Fi> cons){\n+        purpose = purpose.startsWith(\"@\") ? Core.bundle.get(purpose.substring(1)) : purpose;\n+        platform.showFileChooser(open,\n+            ext == null ? fi -> true : fi -> fi.extEquals(ext),", "originalCommit": "154a91a411a405a854e61ef749cd8bdebd5cf72c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MDAzNQ==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520580035", "bodyText": "What's up with this indentation?", "author": "Anuken", "createdAt": "2020-11-10T13:56:25Z", "path": "core/src/mindustry/mod/Scripts.java", "diffHunk": "@@ -116,6 +118,47 @@ public Music loadMusic(String soundName){\n         return sound;\n     }\n \n+    /** Ask the user to select a file to read for a certain purpose like \"Please upload a sprite\"\n+        Extension can be null to select any file. */\n+    public void readFile(String purpose, String ext, Cons<String> string){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readString()));\n+    }\n+\n+    /** readFile but for a byte[] */\n+    public void readBinFile(String purpose, String ext, Cons<byte[]> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readBytes()));\n+    }\n+\n+    /** Ask the user to write a file.\n+        Extension can be null to allow any filename. */\n+    public void writeFile(String purpose, String ext, String contents){\n+        if(contents == null) contents = \"\";\n+        selectFile(false, purpose, ext, fi -> fi.writeString(contents));\n+    }\n+\n+    /** writeFile but for a byte[] */\n+    public void writeBinFile(String purpose, String ext, byte[] contents){\n+        if(contents == null) contents = new byte[0];\n+        selectFile(false, purpose, ext, fi -> fi.writeBytes(contents));\n+    }\n+\n+    private void selectFile(boolean open, String purpose, String ext, Cons<Fi> cons){\n+        purpose = purpose.startsWith(\"@\") ? Core.bundle.get(purpose.substring(1)) : purpose;\n+        platform.showFileChooser(open,\n+            ext == null ? fi -> true : fi -> fi.extEquals(ext),\n+            fi -> {\n+\t\t\t\ttry{", "originalCommit": "154a91a411a405a854e61ef749cd8bdebd5cf72c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTQ5MQ==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520599491", "bodyText": "^O", "author": "DeltaNedas", "createdAt": "2020-11-10T14:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MDAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0Mzc2NA==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520643764", "bodyText": "missed semicolon here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Core.scene.getDialog().title += \" - \" + purpose + (ext == null ? \"\" : \" [stat](.\" + ext + \")\"),\n          \n          \n            \n                    Core.scene.getDialog().title += \" - \" + purpose + (ext == null ? \"\" : \" [stat](.\" + ext + \")\");", "author": "summetdev", "createdAt": "2020-11-10T15:18:59Z", "path": "core/src/mindustry/mod/Scripts.java", "diffHunk": "@@ -116,6 +118,47 @@ public Music loadMusic(String soundName){\n         return sound;\n     }\n \n+    /** Ask the user to select a file to read for a certain purpose like \"Please upload a sprite\"\n+        Extension can be null to select any file. */\n+    public void readFile(String purpose, String ext, Cons<String> string){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readString()));\n+    }\n+\n+    /** readFile but for a byte[] */\n+    public void readBinFile(String purpose, String ext, Cons<byte[]> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readBytes()));\n+    }\n+\n+    /** Ask the user to write a file.\n+        Extension can be null to allow any filename. */\n+    public void writeFile(String purpose, String ext, String contents){\n+        if(contents == null) contents = \"\";\n+        selectFile(false, purpose, ext, fi -> fi.writeString(contents));\n+    }\n+\n+    /** writeFile but for a byte[] */\n+    public void writeBinFile(String purpose, String ext, byte[] contents){\n+        if(contents == null) contents = new byte[0];\n+        selectFile(false, purpose, ext, fi -> fi.writeBytes(contents));\n+    }\n+\n+    private void selectFile(boolean open, String purpose, String ext, Cons<Fi> cons){\n+        purpose = purpose.startsWith(\"@\") ? Core.bundle.get(purpose.substring(1)) : purpose;\n+        platform.showFileChooser(open,\n+            fi -> ext == null || fi.extEquals(ext),\n+            fi -> {\n+                try{\n+                    cons.get(fi);\n+                }catch(Exception e){\n+                    Log.err(\"Failed to select file '@' for a mod\", fi);\n+                    Log.err(e);\n+                }\n+            });\n+\n+        //add purpose and extension at the top\n+        Core.scene.getDialog().title += \" - \" + purpose + (ext == null ? \"\" : \" [stat](.\" + ext + \")\"),", "originalCommit": "949d0a237a67ef453523d34be3ce98f8dcee045f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0NTc0MA==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520645740", "bodyText": "actually, Arc also uses $ for bundle shortcurs.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    purpose = purpose.startsWith(\"@\") ? Core.bundle.get(purpose.substring(1)) : purpose;\n          \n          \n            \n                    purpose = purpose.startsWith(\"@\") ||  purpose.startsWith(\"$\") ? Core.bundle.get(purpose.substring(1)) : purpose;", "author": "summetdev", "createdAt": "2020-11-10T15:21:27Z", "path": "core/src/mindustry/mod/Scripts.java", "diffHunk": "@@ -116,6 +118,47 @@ public Music loadMusic(String soundName){\n         return sound;\n     }\n \n+    /** Ask the user to select a file to read for a certain purpose like \"Please upload a sprite\"\n+        Extension can be null to select any file. */\n+    public void readFile(String purpose, String ext, Cons<String> string){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readString()));\n+    }\n+\n+    /** readFile but for a byte[] */\n+    public void readBinFile(String purpose, String ext, Cons<byte[]> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readBytes()));\n+    }\n+\n+    /** Ask the user to write a file.\n+        Extension can be null to allow any filename. */\n+    public void writeFile(String purpose, String ext, String contents){\n+        if(contents == null) contents = \"\";\n+        selectFile(false, purpose, ext, fi -> fi.writeString(contents));\n+    }\n+\n+    /** writeFile but for a byte[] */\n+    public void writeBinFile(String purpose, String ext, byte[] contents){\n+        if(contents == null) contents = new byte[0];\n+        selectFile(false, purpose, ext, fi -> fi.writeBytes(contents));\n+    }\n+\n+    private void selectFile(boolean open, String purpose, String ext, Cons<Fi> cons){\n+        purpose = purpose.startsWith(\"@\") ? Core.bundle.get(purpose.substring(1)) : purpose;", "originalCommit": "949d0a237a67ef453523d34be3ce98f8dcee045f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwODU2Mg==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520708562", "bodyText": "anuke changed that, see Platform using @save/@OPEN", "author": "DeltaNedas", "createdAt": "2020-11-10T16:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0NTc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxMTQ4OQ==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r520711489", "bodyText": "I said Arc also uses $, see Label#104.", "author": "summetdev", "createdAt": "2020-11-10T16:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0NTc0MA=="}], "type": "inlineReview"}, {"oid": "9a28e147b86ce1b0678af326422b8259ab6d5b76", "url": "https://github.com/Anuken/Mindustry/commit/9a28e147b86ce1b0678af326422b8259ab6d5b76", "message": "add file picker interface for mods", "committedDate": "2020-11-11T07:47:52Z", "type": "forcePushed"}, {"oid": "d0f9d91f939626996709aa4d361a83d1e57b7e8a", "url": "https://github.com/Anuken/Mindustry/commit/d0f9d91f939626996709aa4d361a83d1e57b7e8a", "message": "add file picker interface for mods", "committedDate": "2020-11-11T08:26:11Z", "type": "forcePushed"}, {"oid": "01ab585bf789527e042ef0ef22c365e852e6c816", "url": "https://github.com/Anuken/Mindustry/commit/01ab585bf789527e042ef0ef22c365e852e6c816", "message": "add file picker interface for mods", "committedDate": "2020-11-11T10:06:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5OTE1MQ==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r521399151", "bodyText": "This is very hacky, and will fail on every platform except desktop. Android and iOS use native file chooser dialogs.", "author": "Anuken", "createdAt": "2020-11-11T14:33:18Z", "path": "core/src/mindustry/mod/Scripts.java", "diffHunk": "@@ -116,6 +118,48 @@ public Music loadMusic(String soundName){\n         return sound;\n     }\n \n+    /** Ask the user to select a file to read for a certain purpose like \"Please upload a sprite\"\n+        Extension can be null to select any file. */\n+    public void readFile(String purpose, String ext, Cons<String> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readString()));\n+    }\n+\n+    /** readFile but for a byte[] */\n+    public void readBinFile(String purpose, String ext, Cons<byte[]> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readBytes()));\n+    }\n+\n+    /** Ask the user to write a file.\n+        Extension can be null to allow any filename. */\n+    public void writeFile(String purpose, String ext, String contents){\n+        if(contents == null) contents = \"\";\n+\t\tfinal String fContents = contents;\n+        selectFile(false, purpose, ext, fi -> fi.writeString(fContents));\n+    }\n+\n+    /** writeFile but for a byte[] */\n+    public void writeBinFile(String purpose, String ext, byte[] contents){\n+        if(contents == null) contents = new byte[0];\n+\t\tfinal byte[] fContents = contents;\n+        selectFile(false, purpose, ext, fi -> fi.writeBytes(fContents));\n+    }\n+\n+    private void selectFile(boolean open, String purpose, String ext, Cons<Fi> cons){\n+        purpose = purpose.startsWith(\"@\") ? Core.bundle.get(purpose.substring(1)) : purpose;\n+        Vars.platform.showFileChooser(open, ext, fi -> {\n+            try{\n+                cons.get(fi);\n+            }catch(Exception e){\n+                Log.err(\"Failed to select file '@' for a mod\", fi);\n+                Log.err(e);\n+            }\n+        });\n+\n+        //add purpose and extension at the top\n+        Label title = Core.scene.getDialog().title;", "originalCommit": "01ab585bf789527e042ef0ef22c365e852e6c816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4OTEyOQ==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r521489129", "bodyText": "ill add an overload in Platform then", "author": "DeltaNedas", "createdAt": "2020-11-11T16:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5OTE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5OTQxMw==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r521399413", "bodyText": "Why is this indented?", "author": "Anuken", "createdAt": "2020-11-11T14:33:41Z", "path": "core/src/mindustry/mod/Scripts.java", "diffHunk": "@@ -116,6 +118,48 @@ public Music loadMusic(String soundName){\n         return sound;\n     }\n \n+    /** Ask the user to select a file to read for a certain purpose like \"Please upload a sprite\"\n+        Extension can be null to select any file. */\n+    public void readFile(String purpose, String ext, Cons<String> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readString()));\n+    }\n+\n+    /** readFile but for a byte[] */\n+    public void readBinFile(String purpose, String ext, Cons<byte[]> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readBytes()));\n+    }\n+\n+    /** Ask the user to write a file.\n+        Extension can be null to allow any filename. */\n+    public void writeFile(String purpose, String ext, String contents){\n+        if(contents == null) contents = \"\";\n+\t\tfinal String fContents = contents;", "originalCommit": "01ab585bf789527e042ef0ef22c365e852e6c816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4ODgxNQ==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r521488815", "bodyText": "oops", "author": "DeltaNedas", "createdAt": "2020-11-11T16:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5OTQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjIzMg==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r522326232", "bodyText": "You can't have a null extension supplied to the file chooser. On desktop platforms, it'll probably display nothing, and on other platforms it may just crash.", "author": "Anuken", "createdAt": "2020-11-12T18:32:06Z", "path": "core/src/mindustry/mod/Scripts.java", "diffHunk": "@@ -116,6 +118,46 @@ public Music loadMusic(String soundName){\n         return sound;\n     }\n \n+    /** Ask the user to select a file to read for a certain purpose like \"Please upload a sprite\"\n+        Extension can be null to select any file. */\n+    public void readFile(String purpose, String ext, Cons<String> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readString()));\n+    }\n+\n+    /** readFile but for a byte[] */\n+    public void readBinFile(String purpose, String ext, Cons<byte[]> cons){\n+        selectFile(true, purpose, ext, fi -> cons.get(fi.readBytes()));\n+    }\n+\n+    /** Ask the user to write a file.\n+        Extension can be null to allow any filename. */\n+    public void writeFile(String purpose, String ext, String contents){\n+        if(contents == null) contents = \"\";\n+        final String fContents = contents;\n+        selectFile(false, purpose, ext, fi -> fi.writeString(fContents));\n+    }\n+\n+    /** writeFile but for a byte[] */\n+    public void writeBinFile(String purpose, String ext, byte[] contents){\n+        if(contents == null) contents = new byte[0];\n+        final byte[] fContents = contents;\n+        selectFile(false, purpose, ext, fi -> fi.writeBytes(fContents));\n+    }\n+\n+    private void selectFile(boolean open, String purpose, String ext, Cons<Fi> cons){\n+        purpose = purpose.startsWith(\"@\") ? Core.bundle.get(purpose.substring(1)) : purpose;\n+        //add purpose and extension at the top\n+        String title = Core.bundle.get(open ? \"@open\": \"@save\") + \" - \" + purpose + (ext == null ? \"\" : \" (.\" + ext + \")\");\n+        Vars.platform.showFileChooser(open, title, ext, fi -> {", "originalCommit": "0c880678fc6d02f2583f3aff77cec5c1b0a91760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNzQyMg==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r522327422", "bodyText": "would \"\" function how i want null to?", "author": "DeltaNedas", "createdAt": "2020-11-12T18:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMTEyNQ==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r522331125", "bodyText": "For desktop: No.\nFor iOS/Android: There are multiple file chooser implementations and it's hard to figure out what will happen unless you test it manually.", "author": "Anuken", "createdAt": "2020-11-12T18:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMzg4Ng==", "url": "https://github.com/Anuken/Mindustry/pull/3323#discussion_r522333886", "bodyText": "ah well, everything has extensions set in stone might as well go with it.", "author": "DeltaNedas", "createdAt": "2020-11-12T18:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjIzMg=="}], "type": "inlineReview"}, {"oid": "6da6c9426d2692e7547b3ff73906a682bcf105f6", "url": "https://github.com/Anuken/Mindustry/commit/6da6c9426d2692e7547b3ff73906a682bcf105f6", "message": "add file picker interface for mods", "committedDate": "2020-11-12T23:21:49Z", "type": "commit"}, {"oid": "6da6c9426d2692e7547b3ff73906a682bcf105f6", "url": "https://github.com/Anuken/Mindustry/commit/6da6c9426d2692e7547b3ff73906a682bcf105f6", "message": "add file picker interface for mods", "committedDate": "2020-11-12T23:21:49Z", "type": "forcePushed"}, {"oid": "e9bcf9e8b82529f251b724e7bf10e8c469edc1a5", "url": "https://github.com/Anuken/Mindustry/commit/e9bcf9e8b82529f251b724e7bf10e8c469edc1a5", "message": "Merge branch 'master' into files", "committedDate": "2020-11-13T07:10:39Z", "type": "commit"}]}