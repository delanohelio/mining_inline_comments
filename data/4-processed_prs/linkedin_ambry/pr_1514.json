{"pr_number": 1514, "pr_title": "Make BlobUndeleted not an error in router and more tests", "pr_createdAt": "2020-05-09T00:18:18Z", "pr_url": "https://github.com/linkedin/ambry/pull/1514", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTIzMA==", "url": "https://github.com/linkedin/ambry/pull/1514#discussion_r426821230", "bodyText": "Instead of the logic in AmbryRequests to look up the life version again, could the life version be carried inside of the StoreException? You could create an UndeleteStoreException that extends StoreException and then AmbryRequests can handle it with an instanceof check:\nif (e instanceof UndeleteStoreException) {\n  response = Response(e.getErrorCode(), ((UndeleteStoreException) e).getLifeVersion());\n}\n\nI feel like this would keep the boundary between store logic and request handling logic more clear.", "author": "cgtz", "createdAt": "2020-05-18T18:37:37Z", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -727,22 +735,32 @@ public short undelete(MessageInfo info) throws StoreException {\n         Offset currentIndexEndOffset = index.getCurrentEndOffset();\n         if (!currentIndexEndOffset.equals(indexEndOffsetBeforeCheck)) {\n           FileSpan fileSpan = new FileSpan(indexEndOffsetBeforeCheck, currentIndexEndOffset);\n-          IndexValue value =\n-              index.findKey(info.getStoreKey(), fileSpan, EnumSet.allOf(PersistentIndex.IndexEntryType.class));\n+          IndexValue value = index.findKey(info.getStoreKey(), fileSpan,\n+              EnumSet.of(PersistentIndex.IndexEntryType.DELETE, PersistentIndex.IndexEntryType.UNDELETE));\n           if (value != null) {\n-            throw new StoreException(\"Cannot undelete id \" + info.getStoreKey() + \" since concurrent operation occurs\",\n-                StoreErrorCodes.Life_Version_Conflict);\n+            if (value.isUndelete() && value.getLifeVersion() == revisedLifeVersion) {\n+              // Might get an concurrent undelete from both replication and frontend. This is considered as an\n+              // successful operation and the exception will be captured by the catch statement below.\n+              throw new StoreException(", "originalCommit": "9f253c01658b8d57efe18c995bc27ba25fa6adb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1OTE1NQ==", "url": "https://github.com/linkedin/ambry/pull/1514#discussion_r426959155", "bodyText": "this is a good idea, updated.", "author": "justinlin-linkedin", "createdAt": "2020-05-19T00:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMzA3Mw==", "url": "https://github.com/linkedin/ambry/pull/1514#discussion_r426823073", "bodyText": "How is the life version field in the error UndeleteResponse used?", "author": "cgtz", "createdAt": "2020-05-18T18:41:22Z", "path": "ambry-router/src/main/java/com/github/ambry/router/UndeleteOperation.java", "diffHunk": "@@ -195,6 +194,7 @@ void handleResponse(ResponseInfo responseInfo, UndeleteResponse undeleteResponse\n               // This is first successful response.\n               lifeVersion = undeleteResponse.getLifeVersion();\n               firstResponseReplicaId = replica;\n+              operationTracker.onResponse(replica, TrackedRequestFinalState.SUCCESS);", "originalCommit": "9f253c01658b8d57efe18c995bc27ba25fa6adb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1OTU0NQ==", "url": "https://github.com/linkedin/ambry/pull/1514#discussion_r426959545", "bodyText": "when the error is Blob_Already_Undelete, we treat it as a successful operation, just like in DeleteOperation, when the error is Blob_Already_Deleted, it's considered as a successful operation. The lifeVersion will be used to compare with other ambry servers' lifeVersions.", "author": "justinlin-linkedin", "createdAt": "2020-05-19T00:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMzA3Mw=="}], "type": "inlineReview"}, {"oid": "ce66095af98fe98e64eba096c728604fd99f3737", "url": "https://github.com/linkedin/ambry/commit/ce66095af98fe98e64eba096c728604fd99f3737", "message": "Add IdUndeletedStoreException", "committedDate": "2020-05-19T00:13:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NzcwNw==", "url": "https://github.com/linkedin/ambry/pull/1514#discussion_r427567707", "bodyText": "nit: end file with newline", "author": "cgtz", "createdAt": "2020-05-19T20:05:45Z", "path": "ambry-api/src/main/java/com/github/ambry/store/IdUndeletedStoreException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+/**\n+ * This is a dedicated exception for {@link StoreErrorCodes#ID_Undeleted}. When {@link Store} throws an Exception\n+ * for {@link StoreErrorCodes#ID_Undeleted}, it's better that it throws an {@link IdUndeletedStoreException}.\n+ */\n+public class IdUndeletedStoreException extends StoreException {\n+  private final short lifeVersion;\n+\n+  /**\n+   * Constructor to create a {@link IdUndeletedStoreException}.\n+   * @param message The error message.\n+   * @param lifeVersion The lifeVersion.\n+   */\n+  public IdUndeletedStoreException(String message, short lifeVersion) {\n+    super(message, StoreErrorCodes.ID_Undeleted);\n+    this.lifeVersion = lifeVersion;\n+  }\n+\n+  /**\n+   * @return The lifeVersion for the current undelete record.\n+   */\n+  public short getLifeVersion() {\n+    return lifeVersion;\n+  }\n+}", "originalCommit": "f159f152adbea2bedb20d063385a6c527afc995b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2ODk0Ng==", "url": "https://github.com/linkedin/ambry/pull/1514#discussion_r427568946", "bodyText": "since there is no live site traffic performing undeletes yet, this schema change should be ok, right?", "author": "cgtz", "createdAt": "2020-05-19T20:08:05Z", "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/UndeleteResponse.java", "diffHunk": "@@ -62,6 +62,18 @@ public UndeleteResponse(int correlationId, String clientId, short lifeVersion) {\n     this.lifeVersion = lifeVersion;\n   }\n \n+  /**\n+   * Constructs a {@link UndeleteResponse} with a valid lifeVersion. The error code will be set to {@link ServerErrorCode#No_Error}.\n+   * @param correlationId correlationId of the undelete response.\n+   * @param clientId clientId of the undelete response.\n+   * @param lifeVersion a valid lifeVersion to return to client.\n+   * @param error error code returned in this undelete response.\n+   */\n+  public UndeleteResponse(int correlationId, String clientId, short lifeVersion, ServerErrorCode error) {\n+    super(RequestOrResponseType.UndeleteResponse, UNDELETE_RESPONSE_VERSION_1, correlationId, clientId, error);", "originalCommit": "f159f152adbea2bedb20d063385a6c527afc995b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3MjA0MA==", "url": "https://github.com/linkedin/ambry/pull/1514#discussion_r427572040", "bodyText": "that's right.", "author": "justinlin-linkedin", "createdAt": "2020-05-19T20:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2ODk0Ng=="}], "type": "inlineReview"}, {"oid": "1096f982768d1b13536c8a054141f878e351f38b", "url": "https://github.com/linkedin/ambry/commit/1096f982768d1b13536c8a054141f878e351f38b", "message": "Make BlobUndeleted not an error in router and more tests", "committedDate": "2020-05-19T20:35:04Z", "type": "commit"}, {"oid": "86e195fc6eb725f00410b45382f4395332594fee", "url": "https://github.com/linkedin/ambry/commit/86e195fc6eb725f00410b45382f4395332594fee", "message": "Add IdUndeletedStoreException", "committedDate": "2020-05-19T20:35:04Z", "type": "commit"}, {"oid": "904e0f5653ebee0fca61e6a86ca4cb5875422e2f", "url": "https://github.com/linkedin/ambry/commit/904e0f5653ebee0fca61e6a86ca4cb5875422e2f", "message": "More test", "committedDate": "2020-05-19T20:35:04Z", "type": "commit"}, {"oid": "4dbe868a98322acefd93bc85c1d2935932111298", "url": "https://github.com/linkedin/ambry/commit/4dbe868a98322acefd93bc85c1d2935932111298", "message": "Address comments", "committedDate": "2020-05-19T20:36:02Z", "type": "commit"}, {"oid": "4dbe868a98322acefd93bc85c1d2935932111298", "url": "https://github.com/linkedin/ambry/commit/4dbe868a98322acefd93bc85c1d2935932111298", "message": "Address comments", "committedDate": "2020-05-19T20:36:02Z", "type": "forcePushed"}, {"oid": "bdd7cf5cfa713199ab1db3c3b7617621c1eceea5", "url": "https://github.com/linkedin/ambry/commit/bdd7cf5cfa713199ab1db3c3b7617621c1eceea5", "message": "Addin testing event log to ambry-store;", "committedDate": "2020-05-19T21:05:05Z", "type": "commit"}]}