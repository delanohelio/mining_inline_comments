{"pr_number": 1644, "pr_title": "Install mysql 8.0 on travis and upgrade to Ubuntu xenial with openjdk11", "pr_createdAt": "2020-10-03T22:09:08Z", "pr_url": "https://github.com/linkedin/ambry/pull/1644", "timeline": [{"oid": "d40154ef0a57128cf4aa5f23170c389f2551dfa2", "url": "https://github.com/linkedin/ambry/commit/d40154ef0a57128cf4aa5f23170c389f2551dfa2", "message": "Install mysql 8.0 on travis server", "committedDate": "2020-10-03T22:05:57Z", "type": "commit"}, {"oid": "b191f77d6c48683eebdad9f61b89d25dc4820010", "url": "https://github.com/linkedin/ambry/commit/b191f77d6c48683eebdad9f61b89d25dc4820010", "message": "use db before adding tables", "committedDate": "2020-10-03T22:13:52Z", "type": "commit"}, {"oid": "71e164861e9d93581bb23156b72849ca29e94672", "url": "https://github.com/linkedin/ambry/commit/71e164861e9d93581bb23156b72849ca29e94672", "message": "Upgrade mysql before creating db", "committedDate": "2020-10-03T22:20:20Z", "type": "commit"}, {"oid": "e36536120beb8b2ec52e2153e1cc08ef78773581", "url": "https://github.com/linkedin/ambry/commit/e36536120beb8b2ec52e2153e1cc08ef78773581", "message": "Try xenial", "committedDate": "2020-10-03T22:50:43Z", "type": "commit"}, {"oid": "e4a6ff88670618bedbf51c308739a75bfb905a5c", "url": "https://github.com/linkedin/ambry/commit/e4a6ff88670618bedbf51c308739a75bfb905a5c", "message": "Try openjdk8 required by xenial", "committedDate": "2020-10-03T23:09:27Z", "type": "commit"}, {"oid": "d0ad9448016f14a622af7356301d7fc2c0a63f27", "url": "https://github.com/linkedin/ambry/commit/d0ad9448016f14a622af7356301d7fc2c0a63f27", "message": "remove oracle addons", "committedDate": "2020-10-03T23:20:49Z", "type": "commit"}, {"oid": "f1c84230246464dfc12b25903e74c50c8f9acafd", "url": "https://github.com/linkedin/ambry/commit/f1c84230246464dfc12b25903e74c50c8f9acafd", "message": "Add MySqlAccountServiceIntegrationTest", "committedDate": "2020-10-05T06:20:28Z", "type": "commit"}, {"oid": "18fb9fca4612751e22217050f297a37b99f8dbdd", "url": "https://github.com/linkedin/ambry/commit/18fb9fca4612751e22217050f297a37b99f8dbdd", "message": "add license", "committedDate": "2020-10-05T06:25:34Z", "type": "commit"}, {"oid": "8dcad1acc158c172babf5e75ab942645326ec994", "url": "https://github.com/linkedin/ambry/commit/8dcad1acc158c172babf5e75ab942645326ec994", "message": "Disable one test and print logs after failure", "committedDate": "2020-10-05T15:33:43Z", "type": "commit"}, {"oid": "d5b13af20fb6482aa68133ab7fd42b793ad4a5ce", "url": "https://github.com/linkedin/ambry/commit/d5b13af20fb6482aa68133ab7fd42b793ad4a5ce", "message": "Try openjdk11", "committedDate": "2020-10-05T17:38:06Z", "type": "commit"}, {"oid": "975b1e5b40399f2d1bb1fbfd60b409a9d1c5a8d6", "url": "https://github.com/linkedin/ambry/commit/975b1e5b40399f2d1bb1fbfd60b409a9d1c5a8d6", "message": "Simplify MySqlAccountServiceTest", "committedDate": "2020-10-06T17:41:21Z", "type": "commit"}, {"oid": "61dceab2eaca01dc8318d5eb1e936153b221113c", "url": "https://github.com/linkedin/ambry/commit/61dceab2eaca01dc8318d5eb1e936153b221113c", "message": "Add delay in test before memory leak check", "committedDate": "2020-10-07T16:56:51Z", "type": "commit"}, {"oid": "28126d20a3f35854a0e92b2799790f310b0b322f", "url": "https://github.com/linkedin/ambry/commit/28126d20a3f35854a0e92b2799790f310b0b322f", "message": "Add another sleep", "committedDate": "2020-10-07T17:12:39Z", "type": "commit"}, {"oid": "63fa285a6af8e653ac36dcee6ec0eca00011a768", "url": "https://github.com/linkedin/ambry/commit/63fa285a6af8e653ac36dcee6ec0eca00011a768", "message": "Merge branch 'master' of github.com:linkedin/ambry into travis-mysql8", "committedDate": "2020-10-07T17:50:42Z", "type": "commit"}, {"oid": "5ef5ad2464678897226c1e6176ffdc52cc4c3d1a", "url": "https://github.com/linkedin/ambry/commit/5ef5ad2464678897226c1e6176ffdc52cc4c3d1a", "message": "Fix package private access issue that is more strict in Java 11", "committedDate": "2020-10-07T20:05:15Z", "type": "commit"}, {"oid": "84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "url": "https://github.com/linkedin/ambry/commit/84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "message": "Merge branch 'master' of github.com:linkedin/ambry into travis-mysql8", "committedDate": "2020-10-07T20:15:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNzQ2NA==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501337464", "bodyText": "One optimization I just thought of, now that we are splitting unit and int tests into separate jobs, is that only the int test job needs mysql.  Can this step be done on per-job basis?  (Can be follow up PR.)", "author": "lightningrob", "createdAt": "2020-10-07T22:07:43Z", "path": ".travis.yml", "diffHunk": "@@ -13,12 +13,25 @@ cache:\n addons:\n   apt:\n     packages:\n-      - oracle-java8-installer\n-      - oracle-java8-unlimited-jce-policy\n+      #- oracle-java8-installer\n+      #- oracle-java8-unlimited-jce-policy\n+services:\n+  - mysql\n+before_install:\n+  - mysql --version\n+  - wget https://repo.mysql.com//mysql-apt-config_0.8.10-1_all.deb\n+  - sudo dpkg -i mysql-apt-config_0.8.10-1_all.deb\n+  - sudo apt-get update -q\n+  - sudo apt-get install -q -y --allow-unauthenticated -o Dpkg::Options::=--force-confnew mysql-server\n+  - sudo systemctl restart mysql\n+  - sudo mysql_upgrade\n+  - mysql --version\n+  - mysql -e 'CREATE DATABASE AccountMetadata;'\n+  - mysql -e 'USE AccountMetadata; SOURCE ./ambry-account/src/main/resources/AccountSchema.ddl;'", "originalCommit": "84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0OTcyOA==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501349728", "bodyText": "I think that may be possible, although I can't find documentation that explicitly says that you can change the services. However, I did find instructions for changing other parameters per each job: https://docs.travis-ci.com/user/build-matrix/#using-different-programming-languages-per-job\nSo, maybe moving services and before_install to the int test job will work:\njobs:\n  include:\n    - stage: test\n      name: \"Unit Tests\"\n      script: ./travis-unit-test.sh\n    - stage: test\n      name: \"Integration Tests\"\n      script: ./travis-int-test.sh\n      services:\n        - mysql\n      before_install:\n        ...\n    - stage: publish\n      name: \"Publish To Bintray\"\n      script: ./travis-publish.sh", "author": "cgtz", "createdAt": "2020-10-07T22:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNzQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzODI1NA==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501338254", "bodyText": "@Arun-LinkedIn I ran into collation errors when I ran the script on local Mysql db.  I couldn't find much info on utf8-bin,   Can we go with default collation for the char set?", "author": "lightningrob", "createdAt": "2020-10-07T22:09:46Z", "path": "ambry-account/src/main/resources/AccountSchema.ddl", "diffHunk": "@@ -26,7 +26,7 @@ CREATE TABLE IF NOT EXISTS Accounts\n     INDEX lmtIndex (lastModifiedTime),\n     INDEX statusIndex (status)\n )\n-CHARACTER SET utf8 COLLATE utf8-bin;", "originalCommit": "84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0ODY3MQ==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501448671", "bodyText": "Seems like default collation for char set uf8 (utf8_general_ci) is case-insensitive and hence complains of unique key violation for case insensitive duplicate account or container names. This is differing from our code logic which seems to do case-sensitive comparison. May be we can update our code logic if there are no existing case insensitive duplicates in PROD? EI has one such case - two accounts with names 'MayFlower' and 'mayflower'.", "author": "Arun-LinkedIn", "createdAt": "2020-10-08T04:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzODI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MTI1NQ==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501851255", "bodyText": "Since EI has such case, we probably need to maintain the case-sensitive comparison.", "author": "jsjtzyy", "createdAt": "2020-10-08T16:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzODI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1OTczOA==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501859738", "bodyText": "Running the script on local mysql instance throws the following error:\nERROR 1273 (HY000): Unknown collation: 'utf8'\nI'm not sure why it works on EI but we need an option that works consistently.", "author": "lightningrob", "createdAt": "2020-10-08T16:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzODI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4NDkxMg==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501884912", "bodyText": "Resolved by using utf8_bin.", "author": "lightningrob", "createdAt": "2020-10-08T17:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzODI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzODk1Ng==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501338956", "bodyText": "@Arun-LinkedIn Added the sleep after the assertion failed.  Thread removal may not be immediate.", "author": "lightningrob", "createdAt": "2020-10-07T22:11:27Z", "path": "ambry-account/src/test/java/com/github/ambry/account/MySqlAccountServiceTest.java", "diffHunk": "@@ -192,8 +189,9 @@ public void testBackgroundUpdater() throws InterruptedException, SQLException, I\n \n     // force shutdown background updater thread. As the default timeout value is 1 minute, it is possible that thread is\n     // present after close() due to actively executing task.\n-    ((MySqlAccountService) mySqlAccountService).getScheduler().shutdownNow();\n+    mySqlAccountService.getScheduler().shutdownNow();\n \n+    Thread.sleep(100);", "originalCommit": "84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0MzczMg==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501343732", "bodyText": "For cases where a poll with timeout is needed, we have a test utility that can be used:\nTestUtils.checkAndSleep(0, () -> numThreadsByThisName(MySqlAccountService.MYSQL_ACCOUNT_UPDATER_PREFIX), 200);", "author": "cgtz", "createdAt": "2020-10-07T22:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzODk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwMTUzNw==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501401537", "bodyText": "Good point.  I'll change that in a follow up PR.", "author": "lightningrob", "createdAt": "2020-10-08T01:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzODk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0MDUwMw==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501340503", "bodyText": "@justinlin-linkedin The test passes consistently (so far) with this sleep added. This is a temp fix.  A better one is to enhance the afterTest() to check the metrics repeatedly up to a timeout.", "author": "lightningrob", "createdAt": "2020-10-07T22:15:13Z", "path": "ambry-router/src/test/java/com/github/ambry/router/CryptoJobHandlerTest.java", "diffHunk": "@@ -73,6 +73,11 @@ public void before() {\n \n   @After\n   public void after() {\n+    // Add delay in case buffers are released in background\n+    try {\n+      Thread.sleep(500);", "originalCommit": "84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4NTQ5Mg==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501885492", "bodyText": "Added the changes to NettyByteBufLeakHelper.afterTest() in this PR.", "author": "lightningrob", "createdAt": "2020-10-08T17:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0MDUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0MTI4OQ==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501341289", "bodyText": "Note: added because modified line in MockStorageManager hits a compile error in JDK11 trying to access package private class Disk.", "author": "lightningrob", "createdAt": "2020-10-07T22:17:10Z", "path": "ambry-store/src/main/java/com/github/ambry/store/StorageManager.java", "diffHunk": "@@ -349,6 +349,14 @@ public boolean addBlobStore(ReplicaId replica) {\n     return true;\n   }\n \n+  /**\n+   * Helper utility to add replicaId to partitionToDiskManager.\n+   * @param replicaId the {@link ReplicaId} whose partition and disk to use.\n+   */\n+  protected void updatePartitionToDiskManager(ReplicaId replicaId) {\n+    partitionToDiskManager.put(replicaId.getPartitionId(), diskToDiskManager.get(replicaId.getDiskId()));", "originalCommit": "84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNDIxOQ==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501904219", "bodyText": "nit: [optional]  probably move this method to somewhere after public methods.", "author": "jsjtzyy", "createdAt": "2020-10-08T17:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0MTI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0MTUyMg==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501341522", "bodyText": "Oops, will remove.", "author": "lightningrob", "createdAt": "2020-10-07T22:17:45Z", "path": "ambry-store/src/test/java/com/github/ambry/store/BlobStoreStatsTest.java", "diffHunk": "@@ -42,6 +42,7 @@\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicInteger;\n import org.junit.After;\n+import org.junit.Ignore;", "originalCommit": "84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MjM4Mw==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501352383", "bodyText": "should this be in the integration-test directory instead of the test directory?", "author": "cgtz", "createdAt": "2020-10-07T22:45:45Z", "path": "ambry-account/src/test/java/com/github/ambry/account/MySqlAccountServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.account.mysql.AccountDao;\n+import com.github.ambry.account.mysql.ContainerDao;\n+import com.github.ambry.config.MySqlAccountServiceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.utils.SystemTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Utils;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.junit.Test;\n+\n+import static com.github.ambry.config.MySqlAccountServiceConfig.*;\n+import static com.github.ambry.utils.TestUtils.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+\n+/**\n+ * Integration tests for {@link MySqlAccountService}.\n+ */\n+public class MySqlAccountServiceIntegrationTest {", "originalCommit": "84ec9cd83e3d58f8dd501267f8fc7c08dd121323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwMTcwOA==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501401708", "bodyText": "Definitely.  My next PR will add more tests here so I'll also move the class.", "author": "lightningrob", "createdAt": "2020-10-08T01:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MjM4Mw=="}], "type": "inlineReview"}, {"oid": "12a28b4b5e28c181e53f75da3431d8832a893893", "url": "https://github.com/linkedin/ambry/commit/12a28b4b5e28c181e53f75da3431d8832a893893", "message": "Address review comments, add utf8_bin mysql collation\nAdd delayed retries in NettyByteBufLeakHelper to make tests more resilient", "committedDate": "2020-10-08T17:16:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwMjUzNw==", "url": "https://github.com/linkedin/ambry/pull/1644#discussion_r501902537", "bodyText": "nit: typo \"similar\"", "author": "jsjtzyy", "createdAt": "2020-10-08T17:47:37Z", "path": "ambry-account/src/test/java/com/github/ambry/account/MySqlAccountServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.account.mysql.AccountDao;\n+import com.github.ambry.account.mysql.ContainerDao;\n+import com.github.ambry.config.MySqlAccountServiceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.utils.SystemTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Utils;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.junit.Test;\n+\n+import static com.github.ambry.config.MySqlAccountServiceConfig.*;\n+import static com.github.ambry.utils.TestUtils.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+\n+/**\n+ * Integration tests for {@link MySqlAccountService}.\n+ */\n+public class MySqlAccountServiceIntegrationTest {\n+\n+  MySqlAccountService mySqlAccountService;\n+  MySqlAccountStore mySqlAccountStore;\n+  MySqlAccountServiceConfig accountServiceConfig;\n+  AccountServiceMetrics accountServiceMetrics;\n+  Properties mySqlConfigProps;\n+\n+  public MySqlAccountServiceIntegrationTest() throws Exception {\n+    mySqlConfigProps = Utils.loadPropsFromResource(\"mysql.properties\");\n+    mySqlConfigProps.setProperty(UPDATER_POLLING_INTERVAL_SECONDS, \"0\");\n+    mySqlConfigProps.setProperty(UPDATE_DISABLED, \"false\");\n+    accountServiceConfig = new MySqlAccountServiceConfig(new VerifiableProperties(mySqlConfigProps));\n+    accountServiceMetrics = new AccountServiceMetrics(new MetricRegistry());\n+    mySqlAccountStore = spy(new MySqlAccountStore(accountServiceConfig));\n+    // Start with empty database\n+    cleanup();\n+    mySqlAccountService = getAccountService();\n+  }\n+\n+  private MySqlAccountService getAccountService() throws Exception {\n+    accountServiceConfig = new MySqlAccountServiceConfig(new VerifiableProperties(mySqlConfigProps));\n+    // Don't initialize account store here as it may have preinitialized data\n+    return new MySqlAccountService(accountServiceMetrics, accountServiceConfig, mySqlAccountStore);\n+  }\n+\n+  /**\n+   * Tests in-memory cache is initialized with metadata from local file on start up\n+   * @throws IOException\n+   */\n+  @Test\n+  public void testInitCacheFromDisk() throws Exception {\n+    Path accountBackupDir = Paths.get(TestUtils.getTempDir(\"account-backup\")).toAbsolutePath();\n+    mySqlConfigProps.setProperty(BACKUP_DIRECTORY_KEY, accountBackupDir.toString());\n+\n+    // write test account to backup file\n+    long lastModifiedTime = 100;\n+    Account testAccount =\n+        new AccountBuilder((short) 1, \"testAccount\", Account.AccountStatus.ACTIVE).lastModifiedTime(lastModifiedTime)\n+            .build();\n+    Map<String, String> accountMap = new HashMap<>();\n+    accountMap.put(Short.toString(testAccount.getId()), testAccount.toJson(false).toString());\n+    String filename = BackupFileManager.getBackupFilename(1, SystemTime.getInstance().seconds());\n+    Path filePath = accountBackupDir.resolve(filename);\n+    BackupFileManager.writeAccountMapToFile(filePath, accountMap);\n+\n+    mySqlAccountService = getAccountService();\n+\n+    // verify cache is initialized on startup with test account from backup file\n+    assertEquals(\"Mismatch in number of accounts in cache\", 1, mySqlAccountService.getAllAccounts().size());\n+    assertEquals(\"Mismatch in account info in cache\", testAccount,\n+        mySqlAccountService.getAllAccounts().iterator().next());\n+\n+    // verify that mySqlAccountStore.getNewAccounts() is called with input argument \"lastModifiedTime\" value as 100\n+    verify(mySqlAccountStore, atLeastOnce()).getNewAccounts(lastModifiedTime);\n+    verify(mySqlAccountStore, atLeastOnce()).getNewContainers(lastModifiedTime);\n+  }\n+\n+  /**\n+   * Tests in-memory cache is updated with accounts from mysql db store on start up\n+   */\n+  @Test\n+  public void testInitCacheOnStartUp() throws Exception {\n+    Container testContainer =\n+        new ContainerBuilder((short) 1, \"testContainer\", Container.ContainerStatus.ACTIVE, \"testContainer\",\n+            (short) 1).build();\n+    Account testAccount = new AccountBuilder((short) 1, \"testAccount\", Account.AccountStatus.ACTIVE).containers(\n+        Collections.singleton(testContainer)).build();\n+    mySqlAccountStore.addAccounts(Collections.singletonList(testAccount));\n+    mySqlAccountStore.addContainers(Collections.singleton(testContainer));\n+    mySqlAccountService = getAccountService();\n+\n+    // Test in-memory cache is updated with accounts from mysql store on start up.\n+    List<Account> accounts = new ArrayList<>(mySqlAccountService.getAllAccounts());\n+    assertEquals(\"Mismatch in number of accounts\", 1, accounts.size());\n+    assertEquals(\"Mismatch in account information\", testAccount, accounts.get(0));\n+  }\n+\n+  /**\n+   * Tests creating and updating accounts through {@link MySqlAccountService}:\n+   * 1. add a new {@link Account};\n+   * 2. update existing {@link Account} by adding new {@link Container} to an existing {@link Account};\n+   */\n+  @Test\n+  public void testUpdateAccounts() throws Exception {\n+\n+    Container testContainer =\n+        new ContainerBuilder((short) 1, \"testContainer\", Container.ContainerStatus.ACTIVE, \"testContainer\",\n+            (short) 1).build();\n+    Account testAccount = new AccountBuilder((short) 1, \"testAccount\", Account.AccountStatus.ACTIVE).containers(\n+        Collections.singleton(testContainer)).build();\n+\n+    // 1. Addition of new account. Verify account is added to cache.\n+    mySqlAccountService.updateAccounts(Collections.singletonList(testAccount));\n+    List<Account> accounts = new ArrayList<>(mySqlAccountService.getAllAccounts());\n+    assertEquals(\"Mismatch in number of accounts\", 1, accounts.size());\n+    assertEquals(\"Mismatch in account retrieved by ID\", testAccount,\n+        mySqlAccountService.getAccountById(testAccount.getId()));\n+    assertEquals(\"Mismatch in account retrieved by name\", testAccount,\n+        mySqlAccountService.getAccountByName(testAccount.getName()));\n+\n+    // 2. Update existing account by adding new container. Verify account is updated in cache.\n+    Container testContainer2 =\n+        new ContainerBuilder((short) 2, \"testContainer2\", Container.ContainerStatus.ACTIVE, \"testContainer2\", (short) 1)\n+            .build();\n+    testAccount = new AccountBuilder(testAccount).addOrUpdateContainer(testContainer2).build();\n+    mySqlAccountService.updateAccounts(Collections.singletonList(testAccount));\n+    assertEquals(\"Mismatch in account retrieved by ID\", testAccount,\n+        mySqlAccountService.getAccountById(testAccount.getId()));\n+\n+    // 3. Update existing container. Verify container is updated in cache.\n+    testContainer = new ContainerBuilder(testContainer).setMediaScanDisabled(true).setCacheable(true).build();\n+    testAccount = new AccountBuilder(testAccount).addOrUpdateContainer(testContainer).build();\n+    mySqlAccountService.updateAccounts(Collections.singletonList(testAccount));\n+    assertEquals(\"Mismatch in account retrieved by ID\", testAccount,\n+        mySqlAccountService.getAccountById(testAccount.getId()));\n+  }\n+\n+  /**\n+   * Tests background updater for updating cache from mysql store periodically.\n+   */\n+  @Test\n+  public void testBackgroundUpdater() throws Exception {\n+\n+    mySqlConfigProps.setProperty(UPDATER_POLLING_INTERVAL_SECONDS, \"1\");\n+    Account testAccount = new AccountBuilder((short) 1, \"testAccount1\", Account.AccountStatus.ACTIVE).build();\n+    mySqlAccountService = getAccountService();\n+\n+    assertEquals(\"Background account updater thread should have been started\", 1,\n+        numThreadsByThisName(MySqlAccountService.MYSQL_ACCOUNT_UPDATER_PREFIX));\n+\n+    // Verify cache is empty.\n+    assertNull(\"Cache should be empty\", mySqlAccountService.getAccountById(testAccount.getId()));\n+\n+    // Add account to DB (could use second AS for this)\n+    mySqlAccountStore.addAccounts(Collections.singletonList(testAccount));\n+\n+    // sleep for polling interval time\n+    Thread.sleep(Long.parseLong(mySqlConfigProps.getProperty(UPDATER_POLLING_INTERVAL_SECONDS)) * 1000 + 100);\n+    // Verify account is added to cache by background updater.\n+    assertEquals(\"Mismatch in account retrieved by ID\", testAccount,\n+        mySqlAccountService.getAccountById(testAccount.getId()));\n+\n+    // verify that close() stops the background updater thread\n+    mySqlAccountService.close();\n+\n+    // force shutdown background updater thread. As the default timeout value is 1 minute, it is possible that thread is\n+    // present after close() due to actively executing task.\n+    mySqlAccountService.getScheduler().shutdownNow();\n+\n+    assertEquals(\"Background account updater thread should be stopped\", 0,\n+        numThreadsByThisName(MySqlAccountService.MYSQL_ACCOUNT_UPDATER_PREFIX));\n+  }\n+\n+  // TODO: test 2 separate AS, first one adds/updates container and other fetches from DB\n+\n+  /**\n+   * Tests following cases for name/id conflicts as specified in the JavaDoc of {@link AccountService#updateAccounts(Collection)}.\n+   *\n+   * Existing accounts\n+   * AccountId     AccountName\n+   *    1             \"a\"\n+   *    2             \"b\"\n+   *\n+   * Accounts will be updated in following order\n+   * Steps   AccountId   AccountName   If Conflict    Treatment                    Conflict reason\n+   *  A      1           \"a\"           no             replace existing record      N/A\n+   *  B      1           \"c\"           no             replace existing record      N/A\n+   *  C      3           \"d\"           no             add a new record             N/A\n+   *  D      4           \"c\"           yes            fail update                  conflicts with existing name.\n+   *  E      1           \"b\"           yes            fail update                  conflicts with existing name.\n+   *\n+   *\n+   */\n+  @Test\n+  public void testConflictingUpdatesWithAccounts() throws Exception {\n+\n+    // write two accounts (1, \"a\") and (2, \"b\")\n+    List<Account> existingAccounts = new ArrayList<>();\n+    existingAccounts.add(new AccountBuilder((short) 1, \"a\", Account.AccountStatus.ACTIVE).build());\n+    existingAccounts.add(new AccountBuilder((short) 2, \"b\", Account.AccountStatus.ACTIVE).build());\n+    mySqlAccountService.updateAccounts(existingAccounts);\n+\n+    // case A: verify updating status of account (1, \"a\") replaces existing record (1, \"a\")\n+    Account accountToUpdate =\n+        new AccountBuilder(mySqlAccountService.getAccountById((short) 1)).status(Account.AccountStatus.INACTIVE)\n+            .build();\n+    mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate));\n+    assertEquals(\"Mismatch in account information\", accountToUpdate, mySqlAccountService.getAccountById((short) 1));\n+\n+    // case B: verify updating name of account (1, \"a\") to (1, \"c\") replaces existing record (1, \"a\")\n+    accountToUpdate = new AccountBuilder(mySqlAccountService.getAccountById((short) 1)).name(\"c\").build();\n+    mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate));\n+    assertEquals(\"Mismatch in account information\", accountToUpdate, mySqlAccountService.getAccountById((short) 1));\n+\n+    // case C: verify adding new account (3, \"d\") adds new record (3, \"d\")\n+    accountToUpdate = new AccountBuilder((short) 3, \"d\", Account.AccountStatus.ACTIVE).build();\n+    mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate));\n+    assertEquals(\"Mismatch in account information\", accountToUpdate, mySqlAccountService.getAccountById((short) 3));\n+\n+    // case D: verify adding new account (4, \"c\") conflicts in name with (1, \"c\")\n+    accountToUpdate = new AccountBuilder((short) 4, \"c\", Account.AccountStatus.ACTIVE).build();\n+    assertFalse(\"Account update should fail due to name conflict\",\n+        mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate)));\n+    assertEquals(\"UpdateAccountErrorCount in metrics should be 1\", 1,\n+        accountServiceMetrics.updateAccountErrorCount.getCount());\n+\n+    // case E: verify updating name of account  (1, \"c\") to (1, \"b\") conflicts in name with (2, \"b\")\n+    accountToUpdate = new AccountBuilder(mySqlAccountService.getAccountById((short) 1)).name(\"b\").build();\n+    assertFalse(\"Account update should fail due to name conflict\",\n+        mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate)));\n+    assertEquals(\"UpdateAccountErrorCount in metrics should be 2\", 2,\n+        accountServiceMetrics.updateAccountErrorCount.getCount());\n+\n+    // verify there should be 3 accounts (1, \"c), (2, \"b) and (3, \"d) at the end of operation\n+    assertEquals(\"Mismatch in number of accounts\", 3, mySqlAccountService.getAllAccounts().size());\n+    assertEquals(\"Mismatch in name of account\", \"c\", mySqlAccountService.getAccountById((short) 1).getName());\n+    assertEquals(\"Mismatch in name of account\", \"b\", mySqlAccountService.getAccountById((short) 2).getName());\n+    assertEquals(\"Mismatch in name of account\", \"d\", mySqlAccountService.getAccountById((short) 3).getName());\n+  }\n+\n+  /**\n+   * Tests name/id conflicts in Containers\n+   */\n+  @Test\n+  public void testConflictingUpdatesWithContainers() throws Exception {\n+    List<Container> containersList = new ArrayList<>();\n+    containersList.add(\n+        new ContainerBuilder((short) 1, \"c1\", Container.ContainerStatus.ACTIVE, \"c1\", (short) 1).build());\n+    containersList.add(\n+        new ContainerBuilder((short) 2, \"c2\", Container.ContainerStatus.ACTIVE, \"c2\", (short) 1).build());\n+    Account accountToUpdate =\n+        new AccountBuilder((short) 1, \"a\", Account.AccountStatus.ACTIVE).containers(containersList).build();\n+\n+    // write account (1,a) with containers (1,c1), (2,c2)\n+    mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate));\n+    assertEquals(\"Mismatch in number of containers\", 2,\n+        mySqlAccountService.getAccountById(accountToUpdate.getId()).getAllContainers().size());\n+\n+    // case A: Verify that changing name of container (1,c1) to (1,c3) replaces existing record\n+    Container containerToUpdate =\n+        new ContainerBuilder((short) 1, \"c3\", Container.ContainerStatus.ACTIVE, \"c3\", (short) 1).build();\n+    accountToUpdate = new AccountBuilder(accountToUpdate).addOrUpdateContainer(containerToUpdate).build();\n+    mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate));\n+    assertEquals(\"Mismatch in container information\", containerToUpdate,\n+        mySqlAccountService.getAccountById((short) 1).getContainerById((short) 1));\n+\n+    // case B: Verify addition of new container (3,c3) conflicts in name with existing container (1,c3)\n+    containerToUpdate =\n+        new ContainerBuilder((short) 3, \"c3\", Container.ContainerStatus.ACTIVE, \"c3\", (short) 1).build();\n+    accountToUpdate =\n+        new AccountBuilder(accountToUpdate).containers(Collections.singletonList(containerToUpdate)).build();\n+    assertFalse(\"Account update should fail due to name conflict in containers\",\n+        mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate)));\n+    accountToUpdate = new AccountBuilder(accountToUpdate).removeContainer(containerToUpdate).build();\n+    assertEquals(\"UpdateAccountErrorCount in metrics should be 1\", 1,\n+        accountServiceMetrics.updateAccountErrorCount.getCount());\n+\n+    // case C: Verify addition of new container (3,c4) is successful\n+    containerToUpdate =\n+        new ContainerBuilder((short) 3, \"c4\", Container.ContainerStatus.ACTIVE, \"c4\", (short) 1).build();\n+    accountToUpdate = new AccountBuilder(accountToUpdate).addOrUpdateContainer(containerToUpdate).build();\n+    mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate));\n+    assertEquals(\"Mismatch in container information\", containerToUpdate,\n+        mySqlAccountService.getAccountById((short) 1).getContainerById((short) 3));\n+\n+    // case D: Verify updating name of container (3,c4) to c2 conflicts in name with existing container (2,c2)\n+    containerToUpdate =\n+        new ContainerBuilder(mySqlAccountService.getAccountById((short) 1).getContainerById((short) 3)).setName(\"c2\")\n+            .build();\n+    accountToUpdate = new AccountBuilder(accountToUpdate).addOrUpdateContainer(containerToUpdate).build();\n+    assertFalse(\"Account update should fail due to name conflict in containers\",\n+        mySqlAccountService.updateAccounts(Collections.singletonList(accountToUpdate)));\n+    assertEquals(\"UpdateAccountErrorCount in metrics should be 2\", 2,\n+        accountServiceMetrics.updateAccountErrorCount.getCount());\n+  }\n+\n+  // TODO: add updateContainers tests simiilar to Helix test", "originalCommit": "12a28b4b5e28c181e53f75da3431d8832a893893", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}