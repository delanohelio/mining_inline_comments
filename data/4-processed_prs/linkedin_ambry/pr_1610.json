{"pr_number": 1610, "pr_title": "Create a MessageInfo.Builder to help build MessageInfo", "pr_createdAt": "2020-08-25T00:06:30Z", "pr_url": "https://github.com/linkedin/ambry/pull/1610", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3MTY1OA==", "url": "https://github.com/linkedin/ambry/pull/1610#discussion_r477571658", "bodyText": "Can we move this class to a separate file and call it MessageInfoBuilder?", "author": "jsjtzyy", "createdAt": "2020-08-26T20:32:22Z", "path": "ambry-api/src/main/java/com/github/ambry/store/MessageInfo.java", "diffHunk": "@@ -295,4 +295,175 @@ public String toString() {\n         .append(\"]\");\n     return stringBuilder.toString();\n   }\n+\n+  /**\n+   * A builder class for {@link MessageInfo}.\n+   */\n+  public static class Builder {", "originalCommit": "24a1c182c837e24efc69048cc29b30271f762580", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NzU5Mg==", "url": "https://github.com/linkedin/ambry/pull/1610#discussion_r480377592", "bodyText": "I personally prefer to have Builder as a public static class of what it's building. I think this makes more sense since if the MessageInfo doesn't exist, this builder would not exist either.", "author": "justinlin-linkedin", "createdAt": "2020-08-31T20:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3MTY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NjQ0MA==", "url": "https://github.com/linkedin/ambry/pull/1610#discussion_r477576440", "bodyText": "nit: extra this", "author": "jsjtzyy", "createdAt": "2020-08-26T20:41:13Z", "path": "ambry-api/src/main/java/com/github/ambry/store/MessageInfo.java", "diffHunk": "@@ -295,4 +295,175 @@ public String toString() {\n         .append(\"]\");\n     return stringBuilder.toString();\n   }\n+\n+  /**\n+   * A builder class for {@link MessageInfo}.\n+   */\n+  public static class Builder {\n+    private StoreKey key;\n+    private short accountId;\n+    private short containerId;\n+    private long operationTimeMs;\n+    private long size;\n+\n+    private long expirationTimeInMs = Utils.Infinite_Time;\n+    private boolean isDeleted = false;\n+    private boolean isTtlUpdated = false;\n+    private boolean isUndeleted = false;\n+    private Long crc = null;\n+    private short lifeVersion = 0;\n+\n+    /**\n+     * Constructor to create a builder.\n+     * @param key The {@link StoreKey} associated with {@link MessageInfo}.\n+     * @param size The size of this this message in bytes.", "originalCommit": "24a1c182c837e24efc69048cc29b30271f762580", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NjgyMg==", "url": "https://github.com/linkedin/ambry/pull/1610#discussion_r477576822", "bodyText": "nit:  @return This builder.", "author": "jsjtzyy", "createdAt": "2020-08-26T20:41:51Z", "path": "ambry-api/src/main/java/com/github/ambry/store/MessageInfo.java", "diffHunk": "@@ -295,4 +295,175 @@ public String toString() {\n         .append(\"]\");\n     return stringBuilder.toString();\n   }\n+\n+  /**\n+   * A builder class for {@link MessageInfo}.\n+   */\n+  public static class Builder {\n+    private StoreKey key;\n+    private short accountId;\n+    private short containerId;\n+    private long operationTimeMs;\n+    private long size;\n+\n+    private long expirationTimeInMs = Utils.Infinite_Time;\n+    private boolean isDeleted = false;\n+    private boolean isTtlUpdated = false;\n+    private boolean isUndeleted = false;\n+    private Long crc = null;\n+    private short lifeVersion = 0;\n+\n+    /**\n+     * Constructor to create a builder.\n+     * @param key The {@link StoreKey} associated with {@link MessageInfo}.\n+     * @param size The size of this this message in bytes.\n+     * @param accountId accountId of the blob.\n+     * @param containerId containerId of the blob.\n+     * @param operationTimeMs operation time in ms.\n+     */\n+    public Builder(StoreKey key, long size, short accountId, short containerId, long operationTimeMs) {\n+      this.key = key;\n+      this.size = size;\n+      this.accountId = accountId;\n+      this.containerId = containerId;\n+      this.operationTimeMs = operationTimeMs;\n+    }\n+\n+    /**\n+     * Constructor to create a builder from {@link MessageInfo}.\n+     * @param info The {@link MessageInfo} to build from.\n+     */\n+    public Builder(final MessageInfo info) {\n+      this.key = info.getStoreKey();\n+      this.accountId = info.getAccountId();\n+      this.containerId = info.getContainerId();\n+      this.operationTimeMs = info.getOperationTimeMs();\n+      this.size = info.getSize();\n+      this.expirationTimeInMs = info.getExpirationTimeInMs();\n+      this.isDeleted = info.isDeleted();\n+      this.isTtlUpdated = info.isTtlUpdated();\n+      this.isUndeleted = info.isUndeleted();\n+      this.crc = info.getCrc();\n+      this.lifeVersion = info.getLifeVersion();\n+    }\n+\n+    /**\n+     * Builds a {@link MessageInfo} object.\n+     * @return A {@link MessageInfo} object.\n+     */\n+    public MessageInfo build() {\n+      return new MessageInfo(key, size, isDeleted, isTtlUpdated, isUndeleted, expirationTimeInMs, crc, accountId,\n+          containerId, operationTimeMs, lifeVersion);\n+    }\n+\n+    /**\n+     * Sets the key of the {@link MessageInfo} to build.\n+     * @param key the key to set.\n+     * @return This builder.\n+     */\n+    public Builder storeKey(StoreKey key) {\n+      this.key = key;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the accountId of the {@link MessageInfo} to build.\n+     * @param accountId the accountId to set.\n+     * @return This builder.\n+     */\n+    public Builder accountId(short accountId) {\n+      this.accountId = accountId;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the containerId of the {@link MessageInfo} to build.\n+     * @param containerId the containerId to set.\n+     * @return This builder.\n+     */\n+    public Builder containerId(short containerId) {\n+      this.containerId = containerId;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the operationTime in ms of the {@link MessageInfo} to build.\n+     * @param operationTimeMs the operationTime to set.\n+     * @return This builder.\n+     */\n+    public Builder operationTimeMs(long operationTimeMs) {\n+      this.operationTimeMs = operationTimeMs;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the size of the {@link MessageInfo} to build.\n+     * @param size the size to set.\n+     * @return This builder.\n+     */\n+    public Builder size(long size) {\n+      this.size = size;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets expirationTime in ms of the {@link MessageInfo} to build.\n+     * @param expirationTimeInMs the expirationTime to set\n+     * @return This builder.\n+     */\n+    public Builder expirationTimeInMs(long expirationTimeInMs) {\n+      this.expirationTimeInMs = expirationTimeInMs;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets isDeleted flag of the {@link MessageInfo} to build.\n+     * @param isDeleted the isDeleted to set.\n+     * @return This builder.\n+     */\n+    public Builder isDeleted(boolean isDeleted) {\n+      this.isDeleted = isDeleted;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets isTtlUpdated flag of the {@link MessageInfo} to build.\n+     * @param isTtlUpdated the isTtlUpdated to set.\n+     * @return This builder.\n+     */\n+    public Builder isTtlUpdated(boolean isTtlUpdated) {\n+      this.isTtlUpdated = isTtlUpdated;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets isUndeleted flag of the {@link MessageInfo} to build.\n+     * @param isUndeleted the isUndeleted to set.\n+     * @return This builder.\n+     */\n+    public Builder isUndeleted(boolean isUndeleted) {\n+      this.isUndeleted = isUndeleted;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets crc of the {@link MessageInfo} to build.\n+     * @param crc the crc to set.\n+     * @return", "originalCommit": "24a1c182c837e24efc69048cc29b30271f762580", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5NjgxNA==", "url": "https://github.com/linkedin/ambry/pull/1610#discussion_r477596814", "bodyText": "minor: replace receivedRequest.getBlobProperties() with properties", "author": "jsjtzyy", "createdAt": "2020-08-26T21:21:45Z", "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "diffHunk": "@@ -168,11 +169,15 @@ public void handlePutRequest(NetworkRequest request) throws IOException, Interru\n             new PutMessageFormatInputStream(receivedRequest.getBlobId(), receivedRequest.getBlobEncryptionKey(),\n                 receivedRequest.getBlobProperties(), receivedRequest.getUsermetadata(), receivedRequest.getBlobStream(),\n                 receivedRequest.getBlobSize(), receivedRequest.getBlobType());\n-        MessageInfo info = new MessageInfo(receivedRequest.getBlobId(), stream.getSize(), false, false, false,\n-            Utils.addSecondsToEpochTime(receivedRequest.getBlobProperties().getCreationTimeInMs(),\n-                receivedRequest.getBlobProperties().getTimeToLiveInSeconds()), receivedRequest.getCrc(),\n-            receivedRequest.getBlobProperties().getAccountId(), receivedRequest.getBlobProperties().getContainerId(),\n-            receivedRequest.getBlobProperties().getCreationTimeInMs(), MessageInfo.LIFE_VERSION_FROM_FRONTEND);\n+        BlobProperties properties = receivedRequest.getBlobProperties();\n+        long expirationTime = Utils.addSecondsToEpochTime(receivedRequest.getBlobProperties().getCreationTimeInMs(),\n+            receivedRequest.getBlobProperties().getTimeToLiveInSeconds());", "originalCommit": "24a1c182c837e24efc69048cc29b30271f762580", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6f3a8adb7ee926445bf2b2b343748fbd6b30758c", "url": "https://github.com/linkedin/ambry/commit/6f3a8adb7ee926445bf2b2b343748fbd6b30758c", "message": "Adding builder to messageinfo", "committedDate": "2020-08-31T20:19:08Z", "type": "commit"}, {"oid": "2b1bc5fee5445bae84ea9cb27eb3a1895a3d3430", "url": "https://github.com/linkedin/ambry/commit/2b1bc5fee5445bae84ea9cb27eb3a1895a3d3430", "message": "Add MessageInfo.Builder", "committedDate": "2020-08-31T20:19:08Z", "type": "commit"}, {"oid": "a40613f04c759baf2a352ba317441dd6339de785", "url": "https://github.com/linkedin/ambry/commit/a40613f04c759baf2a352ba317441dd6339de785", "message": "Address comments", "committedDate": "2020-08-31T20:20:57Z", "type": "commit"}, {"oid": "a40613f04c759baf2a352ba317441dd6339de785", "url": "https://github.com/linkedin/ambry/commit/a40613f04c759baf2a352ba317441dd6339de785", "message": "Address comments", "committedDate": "2020-08-31T20:20:57Z", "type": "forcePushed"}, {"oid": "08a8f32872078a89d78aefed66e1267ff9e6e4b1", "url": "https://github.com/linkedin/ambry/commit/08a8f32872078a89d78aefed66e1267ff9e6e4b1", "message": "Revert typo", "committedDate": "2020-08-31T22:02:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4OTk5OQ==", "url": "https://github.com/linkedin/ambry/pull/1610#discussion_r482189999", "bodyText": "looks like this one has slightly different behavior. The builder code always sets isDeleted to false. Was this intended?", "author": "cgtz", "createdAt": "2020-09-02T16:07:30Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -1255,10 +1252,7 @@ private void applyTtlUpdate(MessageInfo messageInfo, RemoteReplicaInfo remoteRep\n   private void applyUndelete(MessageInfo messageInfo, RemoteReplicaInfo remoteReplicaInfo) throws StoreException {\n     DataNodeId remoteNode = remoteReplicaInfo.getReplicaId().getDataNodeId();\n     try {\n-      messageInfo = new MessageInfo(messageInfo.getStoreKey(), messageInfo.getSize(), messageInfo.isDeleted(),\n-          messageInfo.isTtlUpdated(), true, messageInfo.getExpirationTimeInMs(), messageInfo.getCrc(),\n-          messageInfo.getAccountId(), messageInfo.getContainerId(), messageInfo.getOperationTimeMs(),\n-          messageInfo.getLifeVersion());\n+      messageInfo = new MessageInfo.Builder(messageInfo).isUndeleted(true).isDeleted(false).build();", "originalCommit": "08a8f32872078a89d78aefed66e1267ff9e6e4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NTA0NA==", "url": "https://github.com/linkedin/ambry/pull/1610#discussion_r482195044", "bodyText": "This method applyUndelete to local store, so I always set undelete to true and delete to false.", "author": "justinlin-linkedin", "createdAt": "2020-09-02T16:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4OTk5OQ=="}], "type": "inlineReview"}]}