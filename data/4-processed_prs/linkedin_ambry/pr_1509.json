{"pr_number": 1509, "pr_title": "Make verifySignedRequest method async", "pr_createdAt": "2020-05-06T20:45:11Z", "pr_url": "https://github.com/linkedin/ambry/pull/1509", "timeline": [{"oid": "0a0236b242a0a460935691927feee5b740faf842", "url": "https://github.com/linkedin/ambry/commit/0a0236b242a0a460935691927feee5b740faf842", "message": "Make verifySignedRequest method async\n\nUrlSigningService::verifySignedRequest() may need to call remote APIs to\nverify a signature or token. If the remote service is degraded and the\ncalls are slow, executing them synchronously can block handling of new\nincoming requests (since it is often called from preProcessRequest,\nwhich runs on the AsyncRequestWorker thread).\n\nThis PR makes the verifySignedRequest method callback/future based to\nallow for implementations to make such requests asynchronously.", "committedDate": "2020-05-06T20:48:50Z", "type": "commit"}, {"oid": "0a0236b242a0a460935691927feee5b740faf842", "url": "https://github.com/linkedin/ambry/commit/0a0236b242a0a460935691927feee5b740faf842", "message": "Make verifySignedRequest method async\n\nUrlSigningService::verifySignedRequest() may need to call remote APIs to\nverify a signature or token. If the remote service is degraded and the\ncalls are slow, executing them synchronously can block handling of new\nincoming requests (since it is often called from preProcessRequest,\nwhich runs on the AsyncRequestWorker thread).\n\nThis PR makes the verifySignedRequest method callback/future based to\nallow for implementations to make such requests asynchronously.", "committedDate": "2020-05-06T20:48:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA4MzQyMQ==", "url": "https://github.com/linkedin/ambry/pull/1509#discussion_r421083421", "bodyText": "nit: not used anywhere.", "author": "justinlin-linkedin", "createdAt": "2020-05-06T20:50:21Z", "path": "ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityService.java", "diffHunk": "@@ -38,6 +38,7 @@\n import java.util.Set;\n import java.util.TreeSet;\n import java.util.stream.Collectors;\n+import jdk.nashorn.internal.codegen.CompilerConstants;", "originalCommit": "0a0236b242a0a460935691927feee5b740faf842", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA4NTkwNg==", "url": "https://github.com/linkedin/ambry/pull/1509#discussion_r421085906", "bodyText": "I would encourage to be backward compatible here and keep the original method. Something like\nvoid verifySignedRequest(RestRequest restRequest);\n\ndefault void verifySignedRequest(RestRequest restRequest, Callback<Void> callback) {\n    verifySignedRequest(restRequest).\n    callback.onComplete(null, null);\n}\n\ndefault  Future<Void> verifySignedRequest(RestRequest restRequest) {\n    FutureResult<Void> futureResult = new FutureResult<>();\n    verifySignedRequest(restRequest, futureResult::done);\n    return futureResult;\n}", "author": "justinlin-linkedin", "createdAt": "2020-05-06T20:54:53Z", "path": "ambry-api/src/main/java/com/github/ambry/frontend/UrlSigningService.java", "diffHunk": "@@ -38,9 +41,21 @@\n   boolean isRequestSigned(RestRequest restRequest);\n \n   /**\n-   * Verifies that the signature in {@code restRequest} is valid.\n+   * Verifies that the signature in {@code restRequest} is valid. Any remote calls in the implementation should be made\n+   * asynchronously.\n    * @param restRequest the {@link RestRequest} to check.\n-   * @throws RestServiceException if there are problems verifying the URL.\n+   * @param callback the {@link Callback} that will be called after signature verification.\n    */\n-  void verifySignedRequest(RestRequest restRequest) throws RestServiceException;\n+  void verifySignedRequest(RestRequest restRequest, Callback<Void> callback);\n+\n+  /**\n+   * Similar to {@link #verifySignedRequest(RestRequest, Callback)}, but returns a future.\n+   * @param restRequest the {@link RestRequest} to check.\n+   * @return a {@link Future} that will be completed when signature verification is complete.\n+   */\n+  default Future<Void> verifySignedRequest(RestRequest restRequest) {", "originalCommit": "0a0236b242a0a460935691927feee5b740faf842", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjU3Ng==", "url": "https://github.com/linkedin/ambry/pull/1509#discussion_r421106576", "bodyText": "Agreed, changed it to be backwards compatible, since most implementations won't have the async need anyways. I got rid of the future based method since the method signature collides with void verifySignedRequest(RestRequest restRequest). I think that's okay since there is no need for that method if the blocking method still exists.", "author": "cgtz", "createdAt": "2020-05-06T21:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA4NTkwNg=="}], "type": "inlineReview"}, {"oid": "a7dfcfb18a2a3df75913fee2f5fa89ee989f696d", "url": "https://github.com/linkedin/ambry/commit/a7dfcfb18a2a3df75913fee2f5fa89ee989f696d", "message": "Address Justin's comments", "committedDate": "2020-05-06T21:32:18Z", "type": "commit"}]}