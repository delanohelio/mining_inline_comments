{"pr_number": 1542, "pr_title": "ambry server authorization changes.", "pr_createdAt": "2020-05-29T05:23:50Z", "pr_url": "https://github.com/linkedin/ambry/pull/1542", "timeline": [{"oid": "def1e02b4498bdf8333f99efe74e9d8fc00280ab", "url": "https://github.com/linkedin/ambry/commit/def1e02b4498bdf8333f99efe74e9d8fc00280ab", "message": "introducing the security service interface for ambry server. providing\na default implementation which basically allows everything and also\nhooking up with the netty http2 pipeline to enforce the security checks.", "committedDate": "2020-05-29T04:37:32Z", "type": "commit"}, {"oid": "0384e0cfb27b2b72d8bae0b4d02fe52723048ce6", "url": "https://github.com/linkedin/ambry/commit/0384e0cfb27b2b72d8bae0b4d02fe52723048ce6", "message": "fix the class for new metrics", "committedDate": "2020-05-29T05:00:07Z", "type": "commit"}, {"oid": "08965ad9d5cc706248a1aac16f45e5dbc111806b", "url": "https://github.com/linkedin/ambry/commit/08965ad9d5cc706248a1aac16f45e5dbc111806b", "message": "adding UT for the securityservice classes.", "committedDate": "2020-06-01T23:16:55Z", "type": "commit"}, {"oid": "1ec55e2cdf5c31bfc71f9e51ddfa8c3a23d24d05", "url": "https://github.com/linkedin/ambry/commit/1ec55e2cdf5c31bfc71f9e51ddfa8c3a23d24d05", "message": "some refactoring", "committedDate": "2020-06-01T23:48:48Z", "type": "commit"}, {"oid": "98916e870f18d89e2dff73855f586a00630d2f41", "url": "https://github.com/linkedin/ambry/commit/98916e870f18d89e2dff73855f586a00630d2f41", "message": "reformatting to follow coding guidelines.", "committedDate": "2020-06-01T23:58:35Z", "type": "commit"}, {"oid": "927a0fc13952881478bd9c40a4f97e182c88d8e1", "url": "https://github.com/linkedin/ambry/commit/927a0fc13952881478bd9c40a4f97e182c88d8e1", "message": "more cleanup and adding comments", "committedDate": "2020-06-02T04:07:22Z", "type": "commit"}, {"oid": "0e96e071bb7be8d10decadc9914530d6b0200c21", "url": "https://github.com/linkedin/ambry/commit/0e96e071bb7be8d10decadc9914530d6b0200c21", "message": "more counters", "committedDate": "2020-06-02T05:01:03Z", "type": "commit"}, {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a", "url": "https://github.com/linkedin/ambry/commit/5b7e789e813673565c6e8e824758139a6fc88d9a", "message": "merge from master", "committedDate": "2020-06-02T15:43:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNDY2MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434124661", "bodyText": "this is not needed here. Align with other.", "author": "zzmao", "createdAt": "2020-06-02T19:26:01Z", "path": "ambry-rest/src/main/java/com/github/ambry/rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -93,6 +96,7 @@ protected void initChannel(SocketChannel ch) throws Exception {\n     int peerPort = peerAddress.getPort();\n     SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(peerHost, peerPort, SSLFactory.Mode.SERVER));\n     pipeline.addLast(\"SslHandler\", sslHandler);\n+    pipeline.addLast(\"securityChecker\", this.serverSecurityChecker);", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NzM5Mg==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434187392", "bodyText": "fixed it.", "author": "ssen-li", "createdAt": "2020-06-02T21:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNDY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNjQ5Nw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434126497", "bodyText": "How do you think of moving this class to com.github.ambry.rest ? so that frontend can also leverage it if needed.", "author": "zzmao", "createdAt": "2020-06-02T19:29:26Z", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.router.Callback;\n+import io.netty.channel.ChannelHandlerContext;\n+\n+/**\n+ * Default implementation of {@link ServerSecurityService} for Ambry that doesn't do any validations.\n+ */\n+public class AmbryServerSecurityService implements ServerSecurityService {", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTA1Ng==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434189056", "bodyText": "frontend already has a SecurityService interface/class which does the security validations. This is defined in ambry-api and implmented in ambry-frontend. I mainly followed the same pattern from this frontend class to apply for server.", "author": "ssen-li", "createdAt": "2020-06-02T21:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNjQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzc1NA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434127754", "bodyText": "Move to com.github.ambry.rest?\nThis can also help ambry-api get rid of netty dependency.", "author": "zzmao", "createdAt": "2020-06-02T19:31:51Z", "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTc5OQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434131799", "bodyText": "You can return Future in validateRequest()\nThere are some prior code did so:\nGetBlobOperation\npublic Future<Long> readInto(AsyncWritableChannel asyncWritableChannel, Callback<Long> callback) {\n\nI prefer fewer interface. More interfaces means more maintenance.", "author": "zzmao", "createdAt": "2020-06-02T19:39:36Z", "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {\n+\n+  /**\n+   * Performs security validations (if any) before allowing the HTTP2 connection setup to be complete and invokes the\n+   * {@code callback} once done.\n+   * @param ctx the {@link ChannelHandlerContext} to process.\n+   * @param callback the callback to invoke once processing is finished.\n+   */\n+  void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback);\n+\n+  /**\n+   * Performs security validations (if any) on the individual stream {@link RestRequest} asynchronously and invokes the\n+   * {@link Callback} when the validation completes.\n+   * @param restRequest {@link RestRequest} upon which validations has to be performed\n+   * @param callback The {@link Callback} which will be invoked on the completion of the request. Cannot be null.\n+   */\n+  void validateRequest(RestRequest restRequest, Callback<Void> callback);\n+\n+  /**\n+   * Similar to {@link #validateConnection(ChannelHandlerContext, Callback)} but returns a {@link Future}\n+   * instead of requiring a callback.\n+   * @param ctx {@link ChannelHandlerContext} upon which validations has to be performed\n+   * @return a {@link Future} that is completed when the processing is done.\n+   */\n+  default Future<Void> validateConnection(ChannelHandlerContext ctx) {", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDE4MA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434160180", "bodyText": "+1", "author": "lightningrob", "createdAt": "2020-06-02T20:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjMyOA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434192328", "bodyText": "I disagree on this specific comment. I don't like the pattern of a single method both returning the future and taking a callback since this requires the implementation to deal with both at the same time (and pass them both around internally instead of just one object). I think using default methods is a good way to easily convert a callback based api into a future based one.", "author": "cgtz", "createdAt": "2020-06-02T21:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzM4OQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434193389", "bodyText": "I kind of followed the same pattern as defined for SecurityService interface defined for frontend, so kept the api similar to those.", "author": "ssen-li", "createdAt": "2020-06-02T21:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTEzNQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434199135", "bodyText": "Yep, I think I made the changes to SecurityService to use default methods for the future based APIs since I disliked the Future+callback in one method pattern, but there are multiple opinions on this.", "author": "cgtz", "createdAt": "2020-06-02T21:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNjg5Nw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434206897", "bodyText": "I can see @cgtz 's point about cumbersome implementation. I'm fine with default.", "author": "lightningrob", "createdAt": "2020-06-02T22:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjM4OQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434132389", "bodyText": "serverSecurityChecker -> serverSecurityHanlder ? To make it netty style.", "author": "zzmao", "createdAt": "2020-06-02T19:40:49Z", "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NzY3Nw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434187677", "bodyText": "renamed the class as suggested. serverSecurityChecker -> serverSecurityHandler.", "author": "ssen-li", "createdAt": "2020-06-02T21:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjg4MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434132881", "bodyText": "debug or trace level, otherwise too many logs.", "author": "zzmao", "createdAt": "2020-06-02T19:41:55Z", "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());\n+        } else {\n+          logger.debug(\"SSL handshake succedded for channel: {}\", ctx.channel(), future.cause());\n+          try {\n+            serverSecurityService.validateConnection(ctx, (r, e) -> {\n+              if (e != null) {\n+                logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+                serverMetrics.serverValidateConnectionFailure.inc();\n+                ctx.channel().close();\n+              } else {\n+                logger.info(\"security validation succeeded for channel: {}\", ctx.channel());", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4Nzg5Mg==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434187892", "bodyText": "changed it to debug.", "author": "ssen-li", "createdAt": "2020-06-02T21:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMzkzMA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434133930", "bodyText": "what If there is stream channel has been establish?", "author": "zzmao", "createdAt": "2020-06-02T19:44:00Z", "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());\n+        } else {\n+          logger.debug(\"SSL handshake succedded for channel: {}\", ctx.channel(), future.cause());\n+          try {\n+            serverSecurityService.validateConnection(ctx, (r, e) -> {\n+              if (e != null) {\n+                logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+                serverMetrics.serverValidateConnectionFailure.inc();\n+                ctx.channel().close();\n+              } else {\n+                logger.info(\"security validation succeeded for channel: {}\", ctx.channel());\n+                serverMetrics.serverValidateConnectionSuccess.inc();\n+              }\n+            });\n+          } catch (Exception e) {\n+            logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+            serverMetrics.serverValidateConnectionFailure.inc();\n+            ctx.channel().close();", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mjc4MA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434192780", "bodyText": "I verified that stream channel is not established at this point. Since this code is getting executed in the same nioEventLoopGroup thread, server will not be processing any other HTTP2 frames for this connection before this handshake callback finishes.", "author": "ssen-li", "createdAt": "2020-06-02T21:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMzkzMA=="}], "type": "inlineReview"}, {"oid": "bbb6853416ef1278b48324380106a10c85001495", "url": "https://github.com/linkedin/ambry/commit/bbb6853416ef1278b48324380106a10c85001495", "message": "addresing review comments. renamed the\nServerSecurityChecker->ServerSecurityHandler. added a new UT to increase\ntest coverage.", "committedDate": "2020-06-02T21:28:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjkwNw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434192907", "bodyText": "This interface looks a little netty focused and requires a new dependency for ambry-api. Could this method just take in the SSLSession object itself?\nAdditionally, I wanted to learn a bit more about the motivation for this method as opposed to doing all security validation at request time. Is this an optimization so that SSL related checks only have to be checked once since the peer certificate is the same for all requests on a single connection?", "author": "cgtz", "createdAt": "2020-06-02T21:44:25Z", "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {\n+\n+  /**\n+   * Performs security validations (if any) before allowing the HTTP2 connection setup to be complete and invokes the\n+   * {@code callback} once done.\n+   * @param ctx the {@link ChannelHandlerContext} to process.\n+   * @param callback the callback to invoke once processing is finished.\n+   */\n+  void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback);", "originalCommit": "bbb6853416ef1278b48324380106a10c85001495", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjA0MA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286040", "bodyText": "Thanks @cgtz for the idea. agree it is netty focused. I have changed the interface to accept SSLSession instead without loosing any information.\nYes, as mentioned in the document, currently I am planning to do the security validation on the certificate provided during the HTTP2 SSL connection setup itself. There is no separate certs/SSL negotiation for individual request stream inside the HTTP2 connection. So There is no need to do the cert validation on per request basis. I have added the validateRequest() interface now as well to do any extra security checks for individual request that we may want to do in future.", "author": "ssen-li", "createdAt": "2020-06-03T03:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NDgzMg==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434194832", "bodyText": "This may be a good place to use mockito since you only need to mock a very small selection of the many methods.", "author": "cgtz", "createdAt": "2020-06-02T21:48:57Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/rest/MockChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.ChannelProgressivePromise;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.DefaultChannelProgressivePromise;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.util.Attribute;\n+import io.netty.util.AttributeKey;\n+import io.netty.util.concurrent.EventExecutor;\n+import java.net.SocketAddress;\n+\n+/**\n+ * Mock class for ChannelHandlerContext\n+ */\n+\n+public class MockChannelHandlerContext implements ChannelHandlerContext {", "originalCommit": "bbb6853416ef1278b48324380106a10c85001495", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjI2OA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286268", "bodyText": "Thanks, this class is actually not needed anymore. I have used mock for the SSLSession object instead.", "author": "ssen-li", "createdAt": "2020-06-03T03:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NDgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NTM2OQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434195369", "bodyText": "let's try to see if we can avoid adding the netty-all dependency to ambry-api. If we cannot avoid it, we can remove the dependencies on netty-buffer, since netty-all includes it already.", "author": "cgtz", "createdAt": "2020-06-02T21:50:17Z", "path": "build.gradle", "diffHunk": "@@ -189,6 +189,7 @@ project(':ambry-api') {\n         compile \"org.codehaus.jackson:jackson-core-asl:$jacksonVersion\"\n         compile \"org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion\"\n         compile \"io.netty:netty-buffer:$nettyVersion\"\n+        compile \"io.netty:netty-all:$nettyVersion\"", "originalCommit": "bbb6853416ef1278b48324380106a10c85001495", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjI4Mg==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286282", "bodyText": "I have reverted the change in this file as it's no longer needed. I am passing SSLSession instead of ChannelHandlerContext in the validateConnection() interface.", "author": "ssen-li", "createdAt": "2020-06-03T03:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NTM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Njc3MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434196771", "bodyText": "I know some ambry test cases may have had this assert.fail pattern, but I think it is generally better to let the exception be thrown in test cases instead of catching it and wrapping it in an assert. Throwing the exception gives us the full stack trace (and still fails the test) which can be helpful in tracing down the issue if the test happens to fail.", "author": "cgtz", "createdAt": "2020-06-02T21:53:55Z", "path": "ambry-server/src/test/java/com/github/ambry/server/AmbryServerSecurityServiceTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.protocol.AmbryRequests;\n+import com.github.ambry.rest.MockChannelHandlerContext;\n+import com.github.ambry.rest.MockRestRequest;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.ThrowingConsumer;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class AmbryServerSecurityServiceTest {\n+  private final ServerSecurityService serverSecurityService =\n+      new AmbryServerSecurityService(new ServerConfig(new VerifiableProperties(new Properties())),\n+          new ServerMetrics(new MetricRegistry(), AmbryRequests.class, AmbryServer.class));\n+\n+  @Test\n+  public void validateConnectionTest() throws Exception {\n+    //ctx is null\n+    TestUtils.assertException(IllegalArgumentException.class,\n+        () -> serverSecurityService.validateConnection(null).get(), null);\n+\n+    //success case\n+    EmbeddedChannel channel = new EmbeddedChannel();\n+    ChannelHandlerContext ctx = new MockChannelHandlerContext(channel);\n+    try {\n+      serverSecurityService.validateConnection(ctx, (r, e) -> {\n+        Assert.assertNull(\"result not null\", r);\n+        Assert.assertNull(\"exception not null\", e);\n+      });\n+    } catch (Exception e) {\n+      Assert.fail(\"unexpected exception happened\" + e);", "originalCommit": "bbb6853416ef1278b48324380106a10c85001495", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjMwMA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286300", "bodyText": "Thanks for the suggestion. removed the try/catch.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Njc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1Nzg4OA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434157888", "bodyText": "Minor: terminating at the server.", "author": "lightningrob", "createdAt": "2020-06-02T20:31:14Z", "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjMxMA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286310", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1Nzg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1ODk3Mg==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434158972", "bodyText": "Minor: has to -> have to", "author": "lightningrob", "createdAt": "2020-06-02T20:33:20Z", "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {\n+\n+  /**\n+   * Performs security validations (if any) before allowing the HTTP2 connection setup to be complete and invokes the\n+   * {@code callback} once done.\n+   * @param ctx the {@link ChannelHandlerContext} to process.\n+   * @param callback the callback to invoke once processing is finished.\n+   */\n+  void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback);\n+\n+  /**\n+   * Performs security validations (if any) on the individual stream {@link RestRequest} asynchronously and invokes the\n+   * {@link Callback} when the validation completes.\n+   * @param restRequest {@link RestRequest} upon which validations has to be performed", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjMyMQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286321", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1ODk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MzM0MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434163341", "bodyText": "Should this be error?  How often does it happen?", "author": "lightningrob", "createdAt": "2020-06-02T20:42:00Z", "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjM2NA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286364", "bodyText": "SSL handshake may fails due to many reason like expired certs, not signed by same root ca, etc. None of these are frequent. I have changed the level to error.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MzM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NTI3MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434165271", "bodyText": "If you eat the exception, you shouldn't call super.channelActive() afterward.  Maybe better to rethrow?", "author": "lightningrob", "createdAt": "2020-06-02T20:45:48Z", "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());\n+        } else {\n+          logger.debug(\"SSL handshake succedded for channel: {}\", ctx.channel(), future.cause());\n+          try {\n+            serverSecurityService.validateConnection(ctx, (r, e) -> {\n+              if (e != null) {\n+                logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+                serverMetrics.serverValidateConnectionFailure.inc();\n+                ctx.channel().close();\n+              } else {\n+                logger.info(\"security validation succeeded for channel: {}\", ctx.channel());\n+                serverMetrics.serverValidateConnectionSuccess.inc();\n+              }\n+            });\n+          } catch (Exception e) {\n+            logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+            serverMetrics.serverValidateConnectionFailure.inc();\n+            ctx.channel().close();", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjM5MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286391", "bodyText": "This handshakefuture callback is not executed in the same code flow as channelActive. In channelActive() we are just registering the callback for ssl handshake completion future.  Actual handshake happens in separate code flow and once completed this callback will be called.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NTI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NTgzNA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434165834", "bodyText": "don't need this. here", "author": "lightningrob", "createdAt": "2020-06-02T20:47:02Z", "path": "ambry-rest/src/main/java/com/github/ambry/rest/StorageServerNettyFactory.java", "diffHunk": "@@ -61,10 +65,11 @@ public StorageServerNettyFactory(int http2Port, VerifiableProperties verifiableP\n     nettyMetrics = new NettyMetrics(metricRegistry);\n     Http2ClientConfig http2ClientConfig = new Http2ClientConfig(verifiableProperties);\n     ConnectionStatsHandler connectionStatsHandler = new ConnectionStatsHandler(nettyMetrics);\n+    this.serverSecurityChecker = new ServerSecurityChecker(serverSecurityService, serverMetrics);\n \n     Map<Integer, ChannelInitializer<SocketChannel>> initializers = Collections.singletonMap(http2Port,\n-        new StorageServerNettyChannelInitializer(nettyConfig, http2ClientConfig, performanceConfig, nettyMetrics, connectionStatsHandler,\n-            requestHandler, sslFactory, metricRegistry));\n+        new StorageServerNettyChannelInitializer(nettyConfig, http2ClientConfig, performanceConfig, nettyMetrics,\n+            connectionStatsHandler, requestHandler, sslFactory, metricRegistry, this.serverSecurityChecker));", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjQwNw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286407", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NTgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4Nzg1Ng==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434187856", "bodyText": "Can omit this.", "author": "lightningrob", "createdAt": "2020-06-02T21:32:41Z", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -232,6 +233,10 @@ public void startup() throws InstantiationException {\n         statsManager.start();\n       }\n \n+      ServerSecurityServiceFactory serverSecurityServiceFactory =\n+          Utils.getObj(serverConfig.serverSecurityServiceFactory, properties, this.metrics);", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjQyNQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286425", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4Nzg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDM1Ng==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434204356", "bodyText": "securityServiceValidateConnectionTimeInMs should be measured around this call.", "author": "lightningrob", "createdAt": "2020-06-02T22:13:20Z", "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());\n+        } else {\n+          logger.debug(\"SSL handshake succedded for channel: {}\", ctx.channel(), future.cause());\n+          try {\n+            serverSecurityService.validateConnection(ctx, (r, e) -> {", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjQ0NA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286444", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDcxNw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434204717", "bodyText": "The timers should be moved to the calling method.  This is a no-op impl that doesn't need to be timed.", "author": "lightningrob", "createdAt": "2020-06-02T22:14:23Z", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.router.Callback;\n+import io.netty.channel.ChannelHandlerContext;\n+\n+/**\n+ * Default implementation of {@link ServerSecurityService} for Ambry that doesn't do any validations.\n+ */\n+public class AmbryServerSecurityService implements ServerSecurityService {\n+  private boolean isOpen;\n+  private final ServerConfig serverConfig;\n+  private final ServerMetrics serverMetrics;\n+\n+  public AmbryServerSecurityService(ServerConfig serverConfig, ServerMetrics serverMetrics) {\n+    this.serverConfig = serverConfig;\n+    this.serverMetrics = serverMetrics;\n+    this.isOpen = true;\n+  }\n+\n+  @Override\n+  public void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback) {\n+    Exception exception = null;\n+    serverMetrics.securityServiceValidateConnectionRate.mark();\n+    long startTimeMs = System.currentTimeMillis();\n+    if (!isOpen) {\n+      exception = new RestServiceException(\"ServerSecurityService is closed\", RestServiceErrorCode.ServiceUnavailable);\n+    } else if (ctx == null) {\n+      throw new IllegalArgumentException(\"ctx is null\");\n+    }\n+    serverMetrics.securityServiceValidateConnectionTimeInMs.update(System.currentTimeMillis() - startTimeMs);", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjQ1OQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286459", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDg4Mw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434204883", "bodyText": "Remove timer.", "author": "lightningrob", "createdAt": "2020-06-02T22:14:54Z", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.router.Callback;\n+import io.netty.channel.ChannelHandlerContext;\n+\n+/**\n+ * Default implementation of {@link ServerSecurityService} for Ambry that doesn't do any validations.\n+ */\n+public class AmbryServerSecurityService implements ServerSecurityService {\n+  private boolean isOpen;\n+  private final ServerConfig serverConfig;\n+  private final ServerMetrics serverMetrics;\n+\n+  public AmbryServerSecurityService(ServerConfig serverConfig, ServerMetrics serverMetrics) {\n+    this.serverConfig = serverConfig;\n+    this.serverMetrics = serverMetrics;\n+    this.isOpen = true;\n+  }\n+\n+  @Override\n+  public void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback) {\n+    Exception exception = null;\n+    serverMetrics.securityServiceValidateConnectionRate.mark();\n+    long startTimeMs = System.currentTimeMillis();\n+    if (!isOpen) {\n+      exception = new RestServiceException(\"ServerSecurityService is closed\", RestServiceErrorCode.ServiceUnavailable);\n+    } else if (ctx == null) {\n+      throw new IllegalArgumentException(\"ctx is null\");\n+    }\n+    serverMetrics.securityServiceValidateConnectionTimeInMs.update(System.currentTimeMillis() - startTimeMs);\n+    callback.onCompletion(null, exception);\n+  }\n+\n+  @Override\n+  public void validateRequest(RestRequest restRequest, Callback<Void> callback) {\n+    Exception exception = null;\n+    serverMetrics.securityServiceValidateRequestRate.mark();\n+    long startTimeMs = System.currentTimeMillis();\n+    if (!isOpen) {\n+      exception = new RestServiceException(\"ServerSecurityService is closed\", RestServiceErrorCode.ServiceUnavailable);\n+    } else if (restRequest == null) {\n+      throw new IllegalArgumentException(\"restRequest is null\");\n+    }\n+    serverMetrics.securityServiceValidateRequestTimeInMs.update(System.currentTimeMillis() - startTimeMs);", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjQ2Nw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286467", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTE5OQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434205199", "bodyText": "Javadocs on class and methods.", "author": "lightningrob", "createdAt": "2020-06-02T22:15:42Z", "path": "ambry-server/src/test/java/com/github/ambry/server/AmbryServerSecurityServiceTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.protocol.AmbryRequests;\n+import com.github.ambry.rest.MockChannelHandlerContext;\n+import com.github.ambry.rest.MockRestRequest;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.ThrowingConsumer;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class AmbryServerSecurityServiceTest {", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjQ4MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286481", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTM3MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434205371", "bodyText": "2020", "author": "lightningrob", "createdAt": "2020-06-02T22:16:06Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/rest/MockChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjQ5Mg==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286492", "bodyText": "i have removed this class completely.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTcyMQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434205721", "bodyText": "Agree with Ze it would be best to avoid.  Also, doesn't netty-all include netty-buffer?", "author": "lightningrob", "createdAt": "2020-06-02T22:17:04Z", "path": "build.gradle", "diffHunk": "@@ -189,6 +189,7 @@ project(':ambry-api') {\n         compile \"org.codehaus.jackson:jackson-core-asl:$jacksonVersion\"\n         compile \"org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion\"\n         compile \"io.netty:netty-buffer:$nettyVersion\"\n+        compile \"io.netty:netty-all:$nettyVersion\"", "originalCommit": "5b7e789e813673565c6e8e824758139a6fc88d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjUxMA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434286510", "bodyText": "reverted this change as I have removed the dependency on netty-all from ambry-api anymore.", "author": "ssen-li", "createdAt": "2020-06-03T03:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTcyMQ=="}], "type": "inlineReview"}, {"oid": "bcaf581f0cd3ada5942fdd1697b6689c8f0def6f", "url": "https://github.com/linkedin/ambry/commit/bcaf581f0cd3ada5942fdd1697b6689c8f0def6f", "message": "addressing more review comments.\nchanging the validateConnection() api to accept a SSLSession instead\nof netty ChannelHandlerContext. It removes the netty dependency from\nambry-api as well, also removed the MockChannelHandlerContext class as\nthis is not needed anymore. also moved the timer update to calling\nmethod.", "committedDate": "2020-06-03T00:19:01Z", "type": "commit"}, {"oid": "178ad821861f9fbdd8957c06e39b743b292202ba", "url": "https://github.com/linkedin/ambry/commit/178ad821861f9fbdd8957c06e39b743b292202ba", "message": "a minor change to pass clusterMap object to the security service factory", "committedDate": "2020-06-03T22:07:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5OTk4Ng==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436199986", "bodyText": "s->S", "author": "zzmao", "createdAt": "2020-06-05T23:01:21Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java", "diffHunk": "@@ -422,6 +433,11 @@ public ServerMetrics(MetricRegistry registry, Class<?> requestClass, Class<?> se\n       serverShutdownTimeInMs = null;\n     }\n \n+    securityServiceValidateConnectionTimeInMs =\n+        registry.histogram(MetricRegistry.name(requestClass, \"securityServiceValidateConnectionTimeInMs\"));", "originalCommit": "178ad821861f9fbdd8957c06e39b743b292202ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMjEzMA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436212130", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-06T00:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5OTk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDAxMQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436200011", "bodyText": "s->S", "author": "zzmao", "createdAt": "2020-06-05T23:01:27Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java", "diffHunk": "@@ -422,6 +433,11 @@ public ServerMetrics(MetricRegistry registry, Class<?> requestClass, Class<?> se\n       serverShutdownTimeInMs = null;\n     }\n \n+    securityServiceValidateConnectionTimeInMs =\n+        registry.histogram(MetricRegistry.name(requestClass, \"securityServiceValidateConnectionTimeInMs\"));\n+    securityServiceValidateRequestTimeInMs =\n+        registry.histogram(MetricRegistry.name(requestClass, \"securityServiceValidateRequestTimeInMs\"));", "originalCommit": "178ad821861f9fbdd8957c06e39b743b292202ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwOTAxNw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436209017", "bodyText": "done.", "author": "ssen-li", "createdAt": "2020-06-05T23:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDI2Nw==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436200267", "bodyText": "Is ClusterMap needed?", "author": "zzmao", "createdAt": "2020-06-05T23:02:46Z", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerSecurityServiceFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.clustermap.ClusterMap;\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+\n+/**\n+ * Default implementation of {@link ServerSecurityServiceFactory} for Ambry\n+ * <p/>\n+ * Returns a new instance of {@link AmbryServerSecurityService} on {@link #getServerSecurityService()} call.\n+ */\n+public class AmbryServerSecurityServiceFactory implements ServerSecurityServiceFactory {\n+\n+  private final ServerConfig serverConfig;\n+  private final ServerMetrics serverMetrics;\n+\n+  public AmbryServerSecurityServiceFactory(VerifiableProperties verifiableProperties, ServerMetrics serverMetrics,\n+      ClusterMap clusterMap) {", "originalCommit": "178ad821861f9fbdd8957c06e39b743b292202ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwODk5Ng==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436208996", "bodyText": "this is needed in our ambryli repo to get the metricsregistry.", "author": "ssen-li", "createdAt": "2020-06-05T23:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NTg4MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436845881", "bodyText": "Why not just pass MetricRegistry into the factory? That is typically what is done for the other factories in the frontend.", "author": "cgtz", "createdAt": "2020-06-08T16:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2Nzk3MQ==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r437067971", "bodyText": "I changed the constructor to pass the MetricRegistry directly. Also @cgtz as discussed\n\nI have fixed the intTest failures by recreating the AmbryServer objects (reinitServer/reinitServers) when a server restart was intended in the test workflow.\nI could not change the ClusterAgentsFactory interface to include getMetricRegistry() api as few implementations(RecoveryTestClusterAgentsFactory) does not have their own metricRegistry. Also this change is not needed actually since intTest failures are fixed by properly reinitailizing the server objects.", "author": "ssen-li", "createdAt": "2020-06-09T00:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTEzMA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436201130", "bodyText": "Why pass in serverSecurityService here?\nBTW, this StorageRestRequestService will be deprecated in #1554", "author": "zzmao", "createdAt": "2020-06-05T23:07:17Z", "path": "ambry-server/src/main/java/com/github/ambry/server/StorageRestRequestService.java", "diffHunk": "@@ -31,9 +31,12 @@\n public class StorageRestRequestService implements RestRequestService {\n   private static final Logger logger = LoggerFactory.getLogger(StorageRestRequestService.class);\n   NettyServerRequestResponseChannel requestResponseChannel;\n+  ServerSecurityService serverSecurityService;\n \n-  public StorageRestRequestService(NettyServerRequestResponseChannel requestResponseChannel) {\n+  public StorageRestRequestService(NettyServerRequestResponseChannel requestResponseChannel,", "originalCommit": "178ad821861f9fbdd8957c06e39b743b292202ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwODk5MA==", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436208990", "bodyText": "reverted the changes in this file for now as this will be deprecated #1554 and any future validation on individual stream can be done in the new class", "author": "ssen-li", "createdAt": "2020-06-05T23:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTEzMA=="}], "type": "inlineReview"}, {"oid": "a42af346e7bb12fa343a5aeeab4e64b3a8d31e1d", "url": "https://github.com/linkedin/ambry/commit/a42af346e7bb12fa343a5aeeab4e64b3a8d31e1d", "message": "addressing review comments.\nnaming correction, reverting the changes in StorageRestRequestService as\nthis is not uesd right now.\nA change in ambry server startup sequence. this change is needed for\nambry server for proper initialization of other downstream security\nservices.", "committedDate": "2020-06-05T23:40:19Z", "type": "commit"}, {"oid": "fe6d262645702bb1a43d34032e6aa58e9bb7e33d", "url": "https://github.com/linkedin/ambry/commit/fe6d262645702bb1a43d34032e6aa58e9bb7e33d", "message": "addressing more review comments.\n1. passing metricregistry directly instead of clustermap to security\n   service factory class.\n2. moving the clustermap initialzation to constructor caused many\n   intTest failures because of the assumptions made that server are\nrestartable with shutdown/startup call. This is no longer true as some\ninitializations are happening in constructor itself.Made\ncorresponding fixes in MockCluster object to reinit the server objects\nwhen a shutdown/restart was called previously. allTests are passing\nnow.", "committedDate": "2020-06-08T23:58:16Z", "type": "commit"}]}