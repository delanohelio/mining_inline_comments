{"pr_number": 7320, "pr_title": "KEYCLOAK-14855 Added realm-specific localization texts which affect t\u2026", "pr_createdAt": "2020-08-05T13:27:03Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7320", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMTg2MQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r466401861", "bodyText": "Do we need the lines at all ? The same goes for changes in other property files.", "author": "pedroigor", "createdAt": "2020-08-06T13:13:34Z", "path": "themes/src/main/resources-community/theme/base/admin/messages/admin-messages_ca.properties", "diffHunk": "@@ -62,6 +62,9 @@ i18n-enabled=Internacionalitzaci\\u00F3 activa\n supported-locales=Idiomes suportats\n supported-locales.placeholder=Indica l''idioma i prem Intro\n default-locale=Idioma per defecte\n+#localization-upload-file=Upload localization JSON file", "originalCommit": "e94ce71af120772cda3c7573880880362fc34bda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyNDg5NA==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r475724894", "bodyText": "I thought it might be helpful for someone who will translate missing localization keys. If there are in the file, he / she does not need to search for the keys in the English version.", "author": "leischt", "createdAt": "2020-08-24T16:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMTg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNjE5OA==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r466406198", "bodyText": "In other places, where users upload files, we don't deal with the input stream directly and do not propagate it to downstream layers.\nI'm wondering if is not the case of expecting a Map already populated from the JSON payload.", "author": "pedroigor", "createdAt": "2020-08-06T13:20:23Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmLocalizationResource.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.resources.admin;\n+\n+import org.jboss.resteasy.plugins.providers.multipart.InputPart;\n+import org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataInput;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.ModelDuplicateException;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.cache.CacheRealmProvider;\n+import org.keycloak.services.resources.admin.permissions.AdminPermissionEvaluator;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.PATCH;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+\n+public class RealmLocalizationResource {\n+    private final RealmModel realm;\n+    private final AdminPermissionEvaluator auth;\n+\n+    @Context\n+    protected KeycloakSession session;\n+\n+    public RealmLocalizationResource(RealmModel realm, AdminPermissionEvaluator auth) {\n+        this.realm = realm;\n+        this.auth = auth;\n+    }\n+\n+    @Path(\"{locale}/{key}\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    public void addRealmLocalizationText(@PathParam(\"locale\") String locale, @PathParam(\"key\") String key,\n+            String text) {\n+        this.auth.realm().requireManageRealm();\n+        try {\n+            session.realmLocalizationProvider().saveLocalizationText(realm.getId(), locale, key, text);\n+        } catch (ModelDuplicateException e) {\n+            throw new BadRequestException(\n+                    String.format(\"Localization text %s for the locale %s and realm %s already exists.\",\n+                            key, locale, realm.getId()));\n+        }\n+    }\n+\n+\n+    /**\n+     * Import localization from uploaded JSON file\n+     */\n+    @POST\n+    @Path(\"{locale}\")\n+    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+    public void importRealmLocalizationTextsFromFile(@PathParam(\"locale\") String locale, MultipartFormDataInput input)", "originalCommit": "e94ce71af120772cda3c7573880880362fc34bda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyNTI0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r475725249", "bodyText": "Changed it :)", "author": "leischt", "createdAt": "2020-08-24T16:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNjE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxMTY4OQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r466411689", "bodyText": "I would avoid having the localization from the basic realm representation but use the new endpoint to obtain them, if necessary.", "author": "pedroigor", "createdAt": "2020-08-06T13:28:21Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmsAdminResource.java", "diffHunk": "@@ -92,10 +93,13 @@ public RealmsAdminResource(AdminAuth auth, TokenManager tokenManager) {\n     @NoCache\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<RealmRepresentation> getRealms() {\n+        Map<String, String> realmLocalization;\n+        String userLocale = auth.getToken().getLocale();\n         List<RealmRepresentation> reps = new ArrayList<RealmRepresentation>();\n         List<RealmModel> realms = session.realms().getRealms();\n         for (RealmModel realm : realms) {\n-            addRealmRep(reps, realm);\n+            realmLocalization = session.realms().getRealmLocalizationByLocale(realm.getId(), userLocale);", "originalCommit": "e94ce71af120772cda3c7573880880362fc34bda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4OTgxOA==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r481289818", "bodyText": "Are changes like this intentional?", "author": "ssilvert", "createdAt": "2020-09-01T16:48:46Z", "path": "themes/src/main/resources-community/theme/base/admin/messages/admin-messages_de.properties", "diffHunk": "@@ -706,16 +711,16 @@ group.assigned-roles.tooltip=Realm-Rollen die zur Gruppe zugeordnet sind\n #group.effective-roles-client.tooltip=Role mappings for this client. Some roles here might be inherited from a mapped composite role.\n \n group.move.success=Gruppe verschoben.\n-group.remove.confirm.title=Gruppe l\ufffdschen\n-group.remove.confirm.message=Sind Sie sicher, dass Sie die Gruppe \\u201E{{name}}\\u201C l\ufffdschen m\ufffdchten?\n-group.remove.success=Die Gruppe wurde gel\ufffdscht.\n+group.remove.confirm.title=Gruppe l\ufffdschen\n+group.remove.confirm.message=Sind Sie sicher, dass Sie die Gruppe \\u201E{{name}}\\u201C l\ufffdschen m\ufffdchten?\n+group.remove.success=Die Gruppe wurde gel\ufffdscht.", "originalCommit": "c7ff3c392e8c19a4980b23ec5ac978b2b3678887", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyMzYyMQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r483623621", "bodyText": "Sorry it seemed to be an encoding problem on my side. Should be fixed now.", "author": "leischt", "createdAt": "2020-09-04T13:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4OTgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzNjMxNA==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491136314", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(Current.realm != null && currentRealm != Current.realm.id) {\n          \n          \n            \n                    if(Current.realm !== null && currentRealm !== Current.realm.id) {", "author": "ssilvert", "createdAt": "2020-09-18T18:59:50Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -97,6 +97,18 @@ module.controller('GlobalCtrl', function($scope, $http, Auth, Current, $location\n         $scope.fragment = $location.path();\n         $scope.path = $location.path().substring(1).split(\"/\");\n     });\n+\n+    $scope.$watch(function() {\n+        return Current.realm;\n+    }, function() {\n+        if(Current.realm != null && currentRealm != Current.realm.id) {", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzOTM5NQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491139395", "bodyText": "I think we should remove this.", "author": "ssilvert", "createdAt": "2020-09-18T19:06:42Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");\n+            return;\n+        }\n+        $scope.realmSpecificLocales.push($scope.newLocale)\n+        $scope.selectedRealmSpecificLocales = $scope.newLocale;\n+        $scope.newLocale = null;\n+        Notifications.success(\"Locale was created.\");\n+    }\n+\n+    $scope.$watch(function() {\n+        return $scope.selectedRealmSpecificLocales;\n+    }, function() {\n+        if($scope.selectedRealmSpecificLocales != null) {\n+            $scope.updateRealmSpecificLocalizationTexts();\n+        }\n+    })\n+\n+    $scope.updateRealmSpecificLocales = function() {\n+        RealmSpecificLocales.get({id: realm.realm}, function (updated) {\n+            $scope.realmSpecificLocales = updated;\n+        })\n+    }\n+\n+    $scope.updateRealmSpecificLocalizationTexts = function() {\n+        RealmSpecificLocalizationTexts.get({id: realm.realm, locale: $scope.selectedRealmSpecificLocales }, function (updated) {\n+            $scope.localizationTexts = updated;\n+        })\n+    }\n+\n+    $scope.removeLocalizationText = function(key) {\n+        Dialog.confirmDelete(key, 'localization text', function() {\n+            RealmSpecificLocalizationText.remove({\n+                realm: realm.realm,\n+                locale: $scope.selectedRealmSpecificLocales,\n+                key: key\n+            }, function () {\n+                $scope.updateRealmSpecificLocalizationTexts();\n+                Notifications.success(\"Localization text removed.\");\n+            });\n+        });\n+    }\n+});\n+\n+module.controller('RealmLocalizationUploadCtrl', function($scope, Current, Realm, realm, serverInfo, $http, $route, Dialog, Notifications, $upload){\n+    $scope.realm = realm;\n+    $scope.locale = null;\n+    $scope.files = [];\n+\n+    $scope.onFileSelect = function($files) {\n+        $scope.files = $files;\n+    };\n+\n+    $scope.reset = function() {\n+        $scope.locale = null;\n+        $scope.files = null;\n+    };\n+\n+    $scope.save = function() {\n+\n+        if(!$scope.files || $scope.files.length === 0) {\n+            Notifications.error(\"Missing file. Please select a file to upload.\");\n+            return;\n+        }\n+        //$files: an array of files selected, each file has name, size, and type.\n+        for (var i = 0; i < $scope.files.length; i++) {\n+            var $file = $scope.files[i];\n+            $scope.upload = $upload.upload({\n+                url: authUrl + '/admin/realms/' + realm.realm + '/localization/' + $scope.locale,\n+                file: $file\n+            }).progress(function(evt) {\n+                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzOTkwMw==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491139903", "bodyText": "Localize.", "author": "ssilvert", "createdAt": "2020-09-18T19:07:50Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");\n+            return;\n+        }\n+        $scope.realmSpecificLocales.push($scope.newLocale)\n+        $scope.selectedRealmSpecificLocales = $scope.newLocale;\n+        $scope.newLocale = null;\n+        Notifications.success(\"Locale was created.\");\n+    }\n+\n+    $scope.$watch(function() {\n+        return $scope.selectedRealmSpecificLocales;\n+    }, function() {\n+        if($scope.selectedRealmSpecificLocales != null) {\n+            $scope.updateRealmSpecificLocalizationTexts();\n+        }\n+    })\n+\n+    $scope.updateRealmSpecificLocales = function() {\n+        RealmSpecificLocales.get({id: realm.realm}, function (updated) {\n+            $scope.realmSpecificLocales = updated;\n+        })\n+    }\n+\n+    $scope.updateRealmSpecificLocalizationTexts = function() {\n+        RealmSpecificLocalizationTexts.get({id: realm.realm, locale: $scope.selectedRealmSpecificLocales }, function (updated) {\n+            $scope.localizationTexts = updated;\n+        })\n+    }\n+\n+    $scope.removeLocalizationText = function(key) {\n+        Dialog.confirmDelete(key, 'localization text', function() {\n+            RealmSpecificLocalizationText.remove({\n+                realm: realm.realm,\n+                locale: $scope.selectedRealmSpecificLocales,\n+                key: key\n+            }, function () {\n+                $scope.updateRealmSpecificLocalizationTexts();\n+                Notifications.success(\"Localization text removed.\");\n+            });\n+        });\n+    }\n+});\n+\n+module.controller('RealmLocalizationUploadCtrl', function($scope, Current, Realm, realm, serverInfo, $http, $route, Dialog, Notifications, $upload){\n+    $scope.realm = realm;\n+    $scope.locale = null;\n+    $scope.files = [];\n+\n+    $scope.onFileSelect = function($files) {\n+        $scope.files = $files;\n+    };\n+\n+    $scope.reset = function() {\n+        $scope.locale = null;\n+        $scope.files = null;\n+    };\n+\n+    $scope.save = function() {\n+\n+        if(!$scope.files || $scope.files.length === 0) {\n+            Notifications.error(\"Missing file. Please select a file to upload.\");\n+            return;\n+        }\n+        //$files: an array of files selected, each file has name, size, and type.\n+        for (var i = 0; i < $scope.files.length; i++) {\n+            var $file = $scope.files[i];\n+            $scope.upload = $upload.upload({\n+                url: authUrl + '/admin/realms/' + realm.realm + '/localization/' + $scope.locale,\n+                file: $file\n+            }).progress(function(evt) {\n+                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\n+            }).then(function(response) {\n+                $scope.reset();\n+                Notifications.success(\"The localization data has been loaded from file.\");", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzOTk1NQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491139955", "bodyText": "Localize", "author": "ssilvert", "createdAt": "2020-09-18T19:07:58Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");\n+            return;\n+        }\n+        $scope.realmSpecificLocales.push($scope.newLocale)\n+        $scope.selectedRealmSpecificLocales = $scope.newLocale;\n+        $scope.newLocale = null;\n+        Notifications.success(\"Locale was created.\");\n+    }\n+\n+    $scope.$watch(function() {\n+        return $scope.selectedRealmSpecificLocales;\n+    }, function() {\n+        if($scope.selectedRealmSpecificLocales != null) {\n+            $scope.updateRealmSpecificLocalizationTexts();\n+        }\n+    })\n+\n+    $scope.updateRealmSpecificLocales = function() {\n+        RealmSpecificLocales.get({id: realm.realm}, function (updated) {\n+            $scope.realmSpecificLocales = updated;\n+        })\n+    }\n+\n+    $scope.updateRealmSpecificLocalizationTexts = function() {\n+        RealmSpecificLocalizationTexts.get({id: realm.realm, locale: $scope.selectedRealmSpecificLocales }, function (updated) {\n+            $scope.localizationTexts = updated;\n+        })\n+    }\n+\n+    $scope.removeLocalizationText = function(key) {\n+        Dialog.confirmDelete(key, 'localization text', function() {\n+            RealmSpecificLocalizationText.remove({\n+                realm: realm.realm,\n+                locale: $scope.selectedRealmSpecificLocales,\n+                key: key\n+            }, function () {\n+                $scope.updateRealmSpecificLocalizationTexts();\n+                Notifications.success(\"Localization text removed.\");\n+            });\n+        });\n+    }\n+});\n+\n+module.controller('RealmLocalizationUploadCtrl', function($scope, Current, Realm, realm, serverInfo, $http, $route, Dialog, Notifications, $upload){\n+    $scope.realm = realm;\n+    $scope.locale = null;\n+    $scope.files = [];\n+\n+    $scope.onFileSelect = function($files) {\n+        $scope.files = $files;\n+    };\n+\n+    $scope.reset = function() {\n+        $scope.locale = null;\n+        $scope.files = null;\n+    };\n+\n+    $scope.save = function() {\n+\n+        if(!$scope.files || $scope.files.length === 0) {\n+            Notifications.error(\"Missing file. Please select a file to upload.\");\n+            return;\n+        }\n+        //$files: an array of files selected, each file has name, size, and type.\n+        for (var i = 0; i < $scope.files.length; i++) {\n+            var $file = $scope.files[i];\n+            $scope.upload = $upload.upload({\n+                url: authUrl + '/admin/realms/' + realm.realm + '/localization/' + $scope.locale,\n+                file: $file\n+            }).progress(function(evt) {\n+                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\n+            }).then(function(response) {\n+                $scope.reset();\n+                Notifications.success(\"The localization data has been loaded from file.\");\n+            }).catch(function() {\n+                Notifications.error(\"The file can not be uploaded. Please verify the file.\");", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MDE0MA==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491140140", "bodyText": "Localize", "author": "ssilvert", "createdAt": "2020-09-18T19:08:26Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");\n+            return;\n+        }\n+        $scope.realmSpecificLocales.push($scope.newLocale)\n+        $scope.selectedRealmSpecificLocales = $scope.newLocale;\n+        $scope.newLocale = null;\n+        Notifications.success(\"Locale was created.\");", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MDE5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491140191", "bodyText": "Localize", "author": "ssilvert", "createdAt": "2020-09-18T19:08:33Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MDY2Mg==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491140662", "bodyText": "Localize", "author": "ssilvert", "createdAt": "2020-09-18T19:09:39Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");\n+            return;\n+        }\n+        $scope.realmSpecificLocales.push($scope.newLocale)\n+        $scope.selectedRealmSpecificLocales = $scope.newLocale;\n+        $scope.newLocale = null;\n+        Notifications.success(\"Locale was created.\");\n+    }\n+\n+    $scope.$watch(function() {\n+        return $scope.selectedRealmSpecificLocales;\n+    }, function() {\n+        if($scope.selectedRealmSpecificLocales != null) {\n+            $scope.updateRealmSpecificLocalizationTexts();\n+        }\n+    })\n+\n+    $scope.updateRealmSpecificLocales = function() {\n+        RealmSpecificLocales.get({id: realm.realm}, function (updated) {\n+            $scope.realmSpecificLocales = updated;\n+        })\n+    }\n+\n+    $scope.updateRealmSpecificLocalizationTexts = function() {\n+        RealmSpecificLocalizationTexts.get({id: realm.realm, locale: $scope.selectedRealmSpecificLocales }, function (updated) {\n+            $scope.localizationTexts = updated;\n+        })\n+    }\n+\n+    $scope.removeLocalizationText = function(key) {\n+        Dialog.confirmDelete(key, 'localization text', function() {\n+            RealmSpecificLocalizationText.remove({\n+                realm: realm.realm,\n+                locale: $scope.selectedRealmSpecificLocales,\n+                key: key\n+            }, function () {\n+                $scope.updateRealmSpecificLocalizationTexts();\n+                Notifications.success(\"Localization text removed.\");", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MDkyMQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491140921", "bodyText": "Localize", "author": "ssilvert", "createdAt": "2020-09-18T19:10:12Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");\n+            return;\n+        }\n+        $scope.realmSpecificLocales.push($scope.newLocale)\n+        $scope.selectedRealmSpecificLocales = $scope.newLocale;\n+        $scope.newLocale = null;\n+        Notifications.success(\"Locale was created.\");\n+    }\n+\n+    $scope.$watch(function() {\n+        return $scope.selectedRealmSpecificLocales;\n+    }, function() {\n+        if($scope.selectedRealmSpecificLocales != null) {\n+            $scope.updateRealmSpecificLocalizationTexts();\n+        }\n+    })\n+\n+    $scope.updateRealmSpecificLocales = function() {\n+        RealmSpecificLocales.get({id: realm.realm}, function (updated) {\n+            $scope.realmSpecificLocales = updated;\n+        })\n+    }\n+\n+    $scope.updateRealmSpecificLocalizationTexts = function() {\n+        RealmSpecificLocalizationTexts.get({id: realm.realm, locale: $scope.selectedRealmSpecificLocales }, function (updated) {\n+            $scope.localizationTexts = updated;\n+        })\n+    }\n+\n+    $scope.removeLocalizationText = function(key) {\n+        Dialog.confirmDelete(key, 'localization text', function() {\n+            RealmSpecificLocalizationText.remove({\n+                realm: realm.realm,\n+                locale: $scope.selectedRealmSpecificLocales,\n+                key: key\n+            }, function () {\n+                $scope.updateRealmSpecificLocalizationTexts();\n+                Notifications.success(\"Localization text removed.\");\n+            });\n+        });\n+    }\n+});\n+\n+module.controller('RealmLocalizationUploadCtrl', function($scope, Current, Realm, realm, serverInfo, $http, $route, Dialog, Notifications, $upload){\n+    $scope.realm = realm;\n+    $scope.locale = null;\n+    $scope.files = [];\n+\n+    $scope.onFileSelect = function($files) {\n+        $scope.files = $files;\n+    };\n+\n+    $scope.reset = function() {\n+        $scope.locale = null;\n+        $scope.files = null;\n+    };\n+\n+    $scope.save = function() {\n+\n+        if(!$scope.files || $scope.files.length === 0) {\n+            Notifications.error(\"Missing file. Please select a file to upload.\");", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MTAyMg==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491141022", "bodyText": "Localize", "author": "ssilvert", "createdAt": "2020-09-18T19:10:25Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");\n+            return;\n+        }\n+        $scope.realmSpecificLocales.push($scope.newLocale)\n+        $scope.selectedRealmSpecificLocales = $scope.newLocale;\n+        $scope.newLocale = null;\n+        Notifications.success(\"Locale was created.\");\n+    }\n+\n+    $scope.$watch(function() {\n+        return $scope.selectedRealmSpecificLocales;\n+    }, function() {\n+        if($scope.selectedRealmSpecificLocales != null) {\n+            $scope.updateRealmSpecificLocalizationTexts();\n+        }\n+    })\n+\n+    $scope.updateRealmSpecificLocales = function() {\n+        RealmSpecificLocales.get({id: realm.realm}, function (updated) {\n+            $scope.realmSpecificLocales = updated;\n+        })\n+    }\n+\n+    $scope.updateRealmSpecificLocalizationTexts = function() {\n+        RealmSpecificLocalizationTexts.get({id: realm.realm, locale: $scope.selectedRealmSpecificLocales }, function (updated) {\n+            $scope.localizationTexts = updated;\n+        })\n+    }\n+\n+    $scope.removeLocalizationText = function(key) {\n+        Dialog.confirmDelete(key, 'localization text', function() {\n+            RealmSpecificLocalizationText.remove({\n+                realm: realm.realm,\n+                locale: $scope.selectedRealmSpecificLocales,\n+                key: key\n+            }, function () {\n+                $scope.updateRealmSpecificLocalizationTexts();\n+                Notifications.success(\"Localization text removed.\");\n+            });\n+        });\n+    }\n+});\n+\n+module.controller('RealmLocalizationUploadCtrl', function($scope, Current, Realm, realm, serverInfo, $http, $route, Dialog, Notifications, $upload){\n+    $scope.realm = realm;\n+    $scope.locale = null;\n+    $scope.files = [];\n+\n+    $scope.onFileSelect = function($files) {\n+        $scope.files = $files;\n+    };\n+\n+    $scope.reset = function() {\n+        $scope.locale = null;\n+        $scope.files = null;\n+    };\n+\n+    $scope.save = function() {\n+\n+        if(!$scope.files || $scope.files.length === 0) {\n+            Notifications.error(\"Missing file. Please select a file to upload.\");\n+            return;\n+        }\n+        //$files: an array of files selected, each file has name, size, and type.\n+        for (var i = 0; i < $scope.files.length; i++) {\n+            var $file = $scope.files[i];\n+            $scope.upload = $upload.upload({\n+                url: authUrl + '/admin/realms/' + realm.realm + '/localization/' + $scope.locale,\n+                file: $file\n+            }).progress(function(evt) {\n+                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\n+            }).then(function(response) {\n+                $scope.reset();\n+                Notifications.success(\"The localization data has been loaded from file.\");\n+            }).catch(function() {\n+                Notifications.error(\"The file can not be uploaded. Please verify the file.\");\n+            });\n+        }\n+    };\n+\n+});\n+\n+module.controller('RealmLocalizationDetailCtrl', function($scope, Current, $location, Realm, realm, Notifications, locale, key, RealmSpecificLocalizationText, localizationText){\n+    $scope.realm = realm;\n+    $scope.locale = locale;\n+    $scope.key = key;\n+    $scope.value = ((localizationText)? localizationText.content : null);\n+\n+    $scope.create = !key;\n+\n+    $scope.save = function() {\n+        if ($scope.create) {\n+            RealmSpecificLocalizationText.save({\n+                realm: realm.realm,\n+                locale: $scope.locale,\n+                key: $scope.key\n+            }, $scope.value, function (data, headers) {\n+                $location.url(\"/realms/\" + realm.realm + \"/localization/\" + $scope.locale + \"/\" + $scope.key);\n+                Notifications.success(\"The localization text has been created.\");\n+            });\n+        } else {\n+            RealmSpecificLocalizationText.update({\n+                realm: realm.realm,\n+                locale: $scope.locale,\n+                key: $scope.key\n+            }, $scope.value, function (data, headers) {\n+                Notifications.success(\"The localization text has been created.\");", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MTM2Mw==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r491141363", "bodyText": "Localize", "author": "ssilvert", "createdAt": "2020-09-18T19:11:19Z", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -499,6 +511,132 @@ module.controller('RealmThemeCtrl', function($scope, Current, Realm, realm, serv\n     $scope.$watch('realm.internationalizationEnabled', updateSupported);\n });\n \n+module.controller('RealmLocalizationCtrl', function($scope, Current, Realm, realm, serverInfo, Notifications, RealmSpecificLocales, realmSpecificLocales, RealmSpecificLocalizationTexts, RealmSpecificLocalizationText, Dialog){\n+    $scope.realm = realm;\n+    $scope.realmSpecificLocales = realmSpecificLocales;\n+    $scope.newLocale = null;\n+    $scope.selectedRealmSpecificLocales = null;\n+    $scope.localizationTexts = null;\n+\n+    $scope.createLocale = function() {\n+        if(!$scope.newLocale) {\n+            Notifications.error(\"Missing locale.\");\n+            return;\n+        }\n+        $scope.realmSpecificLocales.push($scope.newLocale)\n+        $scope.selectedRealmSpecificLocales = $scope.newLocale;\n+        $scope.newLocale = null;\n+        Notifications.success(\"Locale was created.\");\n+    }\n+\n+    $scope.$watch(function() {\n+        return $scope.selectedRealmSpecificLocales;\n+    }, function() {\n+        if($scope.selectedRealmSpecificLocales != null) {\n+            $scope.updateRealmSpecificLocalizationTexts();\n+        }\n+    })\n+\n+    $scope.updateRealmSpecificLocales = function() {\n+        RealmSpecificLocales.get({id: realm.realm}, function (updated) {\n+            $scope.realmSpecificLocales = updated;\n+        })\n+    }\n+\n+    $scope.updateRealmSpecificLocalizationTexts = function() {\n+        RealmSpecificLocalizationTexts.get({id: realm.realm, locale: $scope.selectedRealmSpecificLocales }, function (updated) {\n+            $scope.localizationTexts = updated;\n+        })\n+    }\n+\n+    $scope.removeLocalizationText = function(key) {\n+        Dialog.confirmDelete(key, 'localization text', function() {\n+            RealmSpecificLocalizationText.remove({\n+                realm: realm.realm,\n+                locale: $scope.selectedRealmSpecificLocales,\n+                key: key\n+            }, function () {\n+                $scope.updateRealmSpecificLocalizationTexts();\n+                Notifications.success(\"Localization text removed.\");\n+            });\n+        });\n+    }\n+});\n+\n+module.controller('RealmLocalizationUploadCtrl', function($scope, Current, Realm, realm, serverInfo, $http, $route, Dialog, Notifications, $upload){\n+    $scope.realm = realm;\n+    $scope.locale = null;\n+    $scope.files = [];\n+\n+    $scope.onFileSelect = function($files) {\n+        $scope.files = $files;\n+    };\n+\n+    $scope.reset = function() {\n+        $scope.locale = null;\n+        $scope.files = null;\n+    };\n+\n+    $scope.save = function() {\n+\n+        if(!$scope.files || $scope.files.length === 0) {\n+            Notifications.error(\"Missing file. Please select a file to upload.\");\n+            return;\n+        }\n+        //$files: an array of files selected, each file has name, size, and type.\n+        for (var i = 0; i < $scope.files.length; i++) {\n+            var $file = $scope.files[i];\n+            $scope.upload = $upload.upload({\n+                url: authUrl + '/admin/realms/' + realm.realm + '/localization/' + $scope.locale,\n+                file: $file\n+            }).progress(function(evt) {\n+                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\n+            }).then(function(response) {\n+                $scope.reset();\n+                Notifications.success(\"The localization data has been loaded from file.\");\n+            }).catch(function() {\n+                Notifications.error(\"The file can not be uploaded. Please verify the file.\");\n+            });\n+        }\n+    };\n+\n+});\n+\n+module.controller('RealmLocalizationDetailCtrl', function($scope, Current, $location, Realm, realm, Notifications, locale, key, RealmSpecificLocalizationText, localizationText){\n+    $scope.realm = realm;\n+    $scope.locale = locale;\n+    $scope.key = key;\n+    $scope.value = ((localizationText)? localizationText.content : null);\n+\n+    $scope.create = !key;\n+\n+    $scope.save = function() {\n+        if ($scope.create) {\n+            RealmSpecificLocalizationText.save({\n+                realm: realm.realm,\n+                locale: $scope.locale,\n+                key: $scope.key\n+            }, $scope.value, function (data, headers) {\n+                $location.url(\"/realms/\" + realm.realm + \"/localization/\" + $scope.locale + \"/\" + $scope.key);\n+                Notifications.success(\"The localization text has been created.\");", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExODUyMQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r492118521", "bodyText": "This provider has many calls to em.flush(). These calls should be called only exceptionally, since they disrupt transaction processing. Are those really necessary?", "author": "hmlnarik", "createdAt": "2020-09-21T14:59:13Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmLocalizationProvider.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.models.jpa;\n+\n+import org.keycloak.models.RealmLocalizationProvider;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.jpa.entities.RealmLocalizationTextEntity;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaDelete;\n+import javax.persistence.criteria.Root;\n+\n+public class JpaRealmLocalizationProvider implements RealmLocalizationProvider {", "originalCommit": "3e328c4e9ae2a01a009efde83097b9e661fa6c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxOTEzMw==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498719133", "bodyText": "Is this change necessary?", "author": "hmlnarik", "createdAt": "2020-10-02T09:38:44Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmsAdminResource.java", "diffHunk": "@@ -92,6 +93,8 @@ public RealmsAdminResource(AdminAuth auth, TokenManager tokenManager) {\n     @NoCache\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<RealmRepresentation> getRealms() {\n+        Map<String, String> realmLocalization;\n+        String userLocale = auth.getToken().getLocale();", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxOTIwMg==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498719202", "bodyText": "Is this change necessary?", "author": "hmlnarik", "createdAt": "2020-10-02T09:38:51Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmsAdminResource.java", "diffHunk": "@@ -107,7 +110,8 @@ public RealmsAdminResource(AdminAuth auth, TokenManager tokenManager) {\n \n     protected void addRealmRep(List<RealmRepresentation> reps, RealmModel realm) {\n         if (AdminPermissions.realms(session, auth).canView(realm)) {\n-            reps.add(ModelToRepresentation.toRepresentation(realm, false));\n+            RealmRepresentation rep = ModelToRepresentation.toRepresentation(realm, false);\n+            reps.add(rep);", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxOTIyNg==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498719226", "bodyText": "Is this change necessary?", "author": "hmlnarik", "createdAt": "2020-10-02T09:38:55Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmsAdminResource.java", "diffHunk": "@@ -51,6 +51,7 @@\n import java.net.URI;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxOTQyMQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498719421", "bodyText": "Are changes in this file necessary?", "author": "hmlnarik", "createdAt": "2020-10-02T09:39:21Z", "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java", "diffHunk": "@@ -203,6 +203,7 @@ public RoleProvider roleLocalStorage() {\n         return getProvider(RoleProvider.class);\n     }\n \n+", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMDUzNQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498720535", "bodyText": "Please keep RealmModel / realmId as the first parameter of the added methods (applies to all of the added methods).\nIs there a reason why there is sometimes String realmId and RealmModel other times? Could this be done consistently with the rest of the methods in this class?", "author": "hmlnarik", "createdAt": "2020-10-02T09:41:44Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -85,6 +86,18 @@ default GroupModel createGroup(RealmModel realm, String name, GroupModel toParen\n     void removeExpiredClientInitialAccess();\n     void decreaseRemainingCount(RealmModel realm, ClientInitialAccessModel clientInitialAccess); // Separate provider method to ensure we decrease remainingCount atomically instead of doing classic update\n \n+    void saveLocalizationText(String realmId, String locale, String key, String text);\n+\n+    void saveLocalizationTexts(String locale, Map<String, String> localizationTexts, RealmModel realm);", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMTAyMg==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498721022", "bodyText": "Is this file still relevant?", "author": "hmlnarik", "createdAt": "2020-10-02T09:42:51Z", "path": "model/jpa/src/main/resources/META-INF/services/org.keycloak.models.LocalizationProviderFactory", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Copyright 2016 Red Hat, Inc. and/or its affiliates\n+# and other contributors as indicated by the @author tags.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.keycloak.models.jpa.JpaLocalizationProviderFactory", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMTY4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498721685", "bodyText": "Please add JavaDoc that describes the algorithm of patching. Is it plain replace or some sort of combination of existing and new items, are any items removed e.g. when a value is null or empty etc.?", "author": "hmlnarik", "createdAt": "2020-10-02T09:44:25Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmModel.java", "diffHunk": "@@ -558,4 +558,8 @@ default GroupModel createGroup(String name, GroupModel toParent) {\n     void removeDefaultClientScope(ClientScopeModel clientScope);\n     List<ClientScopeModel> getDefaultClientScopes(boolean defaultScope);\n \n+    void patchRealmLocalizationTexts(String locale, Map<String, String> localizationTexts);", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMjE2MQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498722161", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <column name=\"REALM_ID\" type=\"VARCHAR(36)\">\n          \n          \n            \n                        <column name=\"REALM_ID\" type=\"VARCHAR(255)\">", "author": "hmlnarik", "createdAt": "2020-10-02T09:45:19Z", "path": "model/jpa/src/main/resources/META-INF/jpa-changelog-11.1.0.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+  ~ * Copyright 2018 Red Hat, Inc. and/or its affiliates\n+  ~ * and other contributors as indicated by the @author tags.\n+  ~ *\n+  ~ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ * you may not use this file except in compliance with the License.\n+  ~ * You may obtain a copy of the License at\n+  ~ *\n+  ~ * http://www.apache.org/licenses/LICENSE-2.0\n+  ~ *\n+  ~ * Unless required by applicable law or agreed to in writing, software\n+  ~ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ * See the License for the specific language governing permissions and\n+  ~ * limitations under the License.\n+  -->\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n+\n+    <changeSet author=\"keycloak\" id=\"11.1.0-add-realm-localization-table\">\n+        <createTable tableName=\"REALM_LOCALIZATIONS\">\n+            <column name=\"TEXTS\" type=\"CLOB\">\n+                <constraints nullable=\"false\"/>\n+            </column>\n+            <column name=\"LOCALE\" type=\"VARCHAR(10)\">\n+                <constraints nullable=\"false\"/>\n+            </column>\n+            <column name=\"REALM_ID\" type=\"VARCHAR(36)\">", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MTAyOA==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r509061028", "bodyText": "This requirement needs to be addressed.", "author": "hmlnarik", "createdAt": "2020-10-21T07:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMjE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMzA3NQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498723075", "bodyText": "Can org.keycloak.util.JsonSerialization.mapper be used instead of this object?", "author": "hmlnarik", "createdAt": "2020-10-02T09:47:13Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/converter/MapStringConverter.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.models.jpa.converter;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Map;\n+import javax.persistence.AttributeConverter;\n+import org.jboss.logging.Logger;\n+\n+public class MapStringConverter implements AttributeConverter<Map<String, String>, String> {\n+    private static final ObjectMapper mapper = new ObjectMapper();", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMjEzNg==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498732136", "bodyText": "Can the order of the columns be consistent with the other tables, ie. key first (realm_id, locale), and only then the clob?", "author": "hmlnarik", "createdAt": "2020-10-02T10:07:08Z", "path": "model/jpa/src/main/resources/META-INF/jpa-changelog-11.1.0.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+  ~ * Copyright 2018 Red Hat, Inc. and/or its affiliates\n+  ~ * and other contributors as indicated by the @author tags.\n+  ~ *\n+  ~ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ * you may not use this file except in compliance with the License.\n+  ~ * You may obtain a copy of the License at\n+  ~ *\n+  ~ * http://www.apache.org/licenses/LICENSE-2.0\n+  ~ *\n+  ~ * Unless required by applicable law or agreed to in writing, software\n+  ~ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ * See the License for the specific language governing permissions and\n+  ~ * limitations under the License.\n+  -->\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n+\n+    <changeSet author=\"keycloak\" id=\"11.1.0-add-realm-localization-table\">\n+        <createTable tableName=\"REALM_LOCALIZATIONS\">\n+            <column name=\"TEXTS\" type=\"CLOB\">", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMjIxMw==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498732213", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <column name=\"LOCALE\" type=\"VARCHAR(10)\">\n          \n          \n            \n                        <column name=\"LOCALE\" type=\"VARCHAR(255)\">", "author": "hmlnarik", "createdAt": "2020-10-02T10:07:17Z", "path": "model/jpa/src/main/resources/META-INF/jpa-changelog-11.1.0.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+  ~ * Copyright 2018 Red Hat, Inc. and/or its affiliates\n+  ~ * and other contributors as indicated by the @author tags.\n+  ~ *\n+  ~ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ * you may not use this file except in compliance with the License.\n+  ~ * You may obtain a copy of the License at\n+  ~ *\n+  ~ * http://www.apache.org/licenses/LICENSE-2.0\n+  ~ *\n+  ~ * Unless required by applicable law or agreed to in writing, software\n+  ~ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ * See the License for the specific language governing permissions and\n+  ~ * limitations under the License.\n+  -->\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n+\n+    <changeSet author=\"keycloak\" id=\"11.1.0-add-realm-localization-table\">\n+        <createTable tableName=\"REALM_LOCALIZATIONS\">\n+            <column name=\"TEXTS\" type=\"CLOB\">\n+                <constraints nullable=\"false\"/>\n+            </column>\n+            <column name=\"LOCALE\" type=\"VARCHAR(10)\">", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczNDM4Ng==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498734386", "bodyText": "RealmAdapter would benefit from this being a Map. Could this be a Map<String, RealmLocalizationTextsEntity> rather than a Collection? Is there a reason for it being a Collection?", "author": "hmlnarik", "createdAt": "2020-10-02T10:12:07Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/entities/RealmEntity.java", "diffHunk": "@@ -243,6 +243,9 @@\n     @Column(name=\"ALLOW_USER_MANAGED_ACCESS\")\n     private boolean allowUserManagedAccess;\n \n+    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realmId\")\n+    Collection<RealmLocalizationTextsEntity> realmLocalizationTexts;", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjU2OA==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498772568", "bodyText": "The inputstream should be in try-with-resources block to be closed properly.", "author": "hmlnarik", "createdAt": "2020-10-02T11:47:31Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmLocalizationResource.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.resources.admin;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.HashMap;\n+import java.util.Set;\n+\n+import org.jboss.resteasy.plugins.providers.multipart.InputPart;\n+import org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataInput;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.ModelDuplicateException;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.services.resources.admin.permissions.AdminPermissionEvaluator;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.PATCH;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import org.keycloak.util.JsonSerialization;\n+\n+public class RealmLocalizationResource {\n+    private final RealmModel realm;\n+    private final AdminPermissionEvaluator auth;\n+\n+    @Context\n+    protected KeycloakSession session;\n+\n+    public RealmLocalizationResource(RealmModel realm, AdminPermissionEvaluator auth) {\n+        this.realm = realm;\n+        this.auth = auth;\n+    }\n+\n+    @Path(\"{locale}/{key}\")\n+    @PUT\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    public void saveRealmLocalizationText(@PathParam(\"locale\") String locale, @PathParam(\"key\") String key,\n+            String text) {\n+        this.auth.realm().requireManageRealm();\n+        try {\n+            session.realms().saveLocalizationText(realm.getId(), locale, key, text);\n+        } catch (ModelDuplicateException e) {\n+            throw new BadRequestException(\n+                    String.format(\"Localization text %s for the locale %s and realm %s already exists.\",\n+                            key, locale, realm.getId()));\n+        }\n+    }\n+\n+\n+    /**\n+     * Import localization from uploaded JSON file\n+     */\n+    @POST\n+    @Path(\"{locale}\")\n+    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+    public void patchRealmLocalizationTextsFromFile(@PathParam(\"locale\") String locale, MultipartFormDataInput input)\n+            throws IOException {\n+        this.auth.realm().requireManageRealm();\n+\n+        Map<String, List<InputPart>> formDataMap = input.getFormDataMap();\n+        if (!formDataMap.containsKey(\"file\")) {\n+            throw new BadRequestException();\n+        }\n+        InputPart file = formDataMap.get(\"file\").get(0);\n+        InputStream inputStream = file.getBody(InputStream.class, null);", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3ODYyMQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r498778621", "bodyText": "Since there is no Hibernate cache, any request to getRealmLocalizationTextsByLocale would read the getRealmLocalizationTexts() in full (all locale), then potentially find one and discard all the rest.\nCould this be done in a way that would either only read one localization bundle or always cache all? The latter may affect infinispan layer as well. This is related to the comment in RealmEntity.", "author": "hmlnarik", "createdAt": "2020-10-02T12:02:24Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -2345,6 +2345,56 @@ private ComponentEntity getComponentEntity(String id) {\n         return c;\n     }\n \n+    @Override\n+    public void patchRealmLocalizationTexts(String locale, Map<String, String> localizationTexts) {\n+        Collection<RealmLocalizationTextsEntity> currentLocalizationTexts = realm.getRealmLocalizationTexts();\n+        Optional<RealmLocalizationTextsEntity> localizationTextsEntityOptional = currentLocalizationTexts.stream().filter(t -> locale.equals(t.getLocale())).findAny();\n+        if(localizationTextsEntityOptional.isPresent()) {\n+            RealmLocalizationTextsEntity localizationTextsEntity = localizationTextsEntityOptional.get();\n+            localizationTextsEntity.getTexts().putAll(localizationTexts);\n+\n+            em.persist(localizationTextsEntity);\n+        }\n+        else {\n+            RealmLocalizationTextsEntity realmLocalizationTextsEntity = new RealmLocalizationTextsEntity();\n+            realmLocalizationTextsEntity.setRealmId(realm.getId());\n+            realmLocalizationTextsEntity.setLocale(locale);\n+            realmLocalizationTextsEntity.setTexts(localizationTexts);\n+\n+            em.persist(realmLocalizationTextsEntity);\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeRealmLocalizationTexts(String locale) {\n+        if (locale == null) return false;\n+        Optional<RealmLocalizationTextsEntity> localizationTextsEntity = realm.getRealmLocalizationTexts().stream().filter(t -> locale.equals(t.getLocale())).findAny();\n+        if (localizationTextsEntity.isPresent())\n+        {\n+            em.remove(localizationTextsEntity.get());\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Map<String, Map<String, String>> getRealmLocalizationTexts() {\n+        Map<String, Map<String, String>> localizationTexts = new HashMap<>();\n+        realm.getRealmLocalizationTexts().forEach(localizationTextsEntity -> {\n+            localizationTexts.put(localizationTextsEntity.getLocale(), localizationTextsEntity.getTexts());\n+        });\n+        return localizationTexts;\n+    }\n+\n+    @Override\n+    public Map<String, String> getRealmLocalizationTextsByLocale(String locale) {\n+        Optional<RealmLocalizationTextsEntity> localizationTextsEntity = realm.getRealmLocalizationTexts().stream().filter(l -> locale.equals(l.getLocale())).findAny();", "originalCommit": "bbd9cc3a9260ce97fb0b26ce47ceb42c1421620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e73563c94e2a60c7fc0be2d9a2e5c12a43253b56", "url": "https://github.com/keycloak/keycloak/commit/e73563c94e2a60c7fc0be2d9a2e5c12a43253b56", "message": "KEYCLOAK-14855 cleanup after rebase", "committedDate": "2020-10-13T13:55:44Z", "type": "forcePushed"}, {"oid": "46df137cdf72f95105ad9993bd13a905828f08d4", "url": "https://github.com/keycloak/keycloak/commit/46df137cdf72f95105ad9993bd13a905828f08d4", "message": "KEYCLOAK-14855 Added realm-specific localization texts which affect texts in every part of the UI (admin console / login page / personal info page / email templates). Also new API endpoints and a new UI screen to manage the realm-specific localization texts were introduced.", "committedDate": "2020-10-19T07:48:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MTQ0NQ==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r509061445", "bodyText": "Move this changeset to META-INF/jpa-changelog-12.0.0.xml", "author": "hmlnarik", "createdAt": "2020-10-21T07:48:49Z", "path": "model/jpa/src/main/resources/META-INF/jpa-changelog-12.1.0.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+  ~ * Copyright 2018 Red Hat, Inc. and/or its affiliates\n+  ~ * and other contributors as indicated by the @author tags.\n+  ~ *\n+  ~ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ * you may not use this file except in compliance with the License.\n+  ~ * You may obtain a copy of the License at\n+  ~ *\n+  ~ * http://www.apache.org/licenses/LICENSE-2.0\n+  ~ *\n+  ~ * Unless required by applicable law or agreed to in writing, software\n+  ~ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ * See the License for the specific language governing permissions and\n+  ~ * limitations under the License.\n+  -->\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n+\n+    <changeSet author=\"keycloak\" id=\"12.1.0-add-realm-localization-table\">", "originalCommit": "46df137cdf72f95105ad9993bd13a905828f08d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MTcxMA==", "url": "https://github.com/keycloak/keycloak/pull/7320#discussion_r509061710", "bodyText": "Please keep it at 12.0.0 and remove this line", "author": "hmlnarik", "createdAt": "2020-10-21T07:49:18Z", "path": "model/jpa/src/main/resources/META-INF/jpa-changelog-master.xml", "diffHunk": "@@ -68,5 +68,6 @@\n     <include file=\"META-INF/jpa-changelog-9.0.1.xml\"/>\n     <include file=\"META-INF/jpa-changelog-11.0.0.xml\"/>\n     <include file=\"META-INF/jpa-changelog-12.0.0.xml\"/>\n+    <include file=\"META-INF/jpa-changelog-12.1.0.xml\"/>", "originalCommit": "46df137cdf72f95105ad9993bd13a905828f08d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "83f120f062639c5c8fd768cfc36a2dd6aefd5a5e", "url": "https://github.com/keycloak/keycloak/commit/83f120f062639c5c8fd768cfc36a2dd6aefd5a5e", "message": "KEYCLOAK-14855 Added realm-specific localization texts which affect texts in every part of the UI (admin console / login page / personal info page / email templates). Also new API endpoints and a new UI screen to manage the realm-specific localization texts were introduced.", "committedDate": "2020-10-21T08:20:37Z", "type": "forcePushed"}, {"oid": "c5d587bcef3fb9504421beed89f6f4436edb1787", "url": "https://github.com/keycloak/keycloak/commit/c5d587bcef3fb9504421beed89f6f4436edb1787", "message": "KEYCLOAK-14855 Added realm-specific localization texts which affect texts in every part of the UI (admin console / login page / personal info page / email templates). Also new API endpoints and a new UI screen to manage the realm-specific localization texts were introduced.\n\nCo-authored-by: Daniel Fesenmeyer <daniel.fesenmeyer@bosch.io>", "committedDate": "2020-10-28T14:40:53Z", "type": "forcePushed"}, {"oid": "6e57dec37fb5c4455b1d4f43e28039beec25e7c8", "url": "https://github.com/keycloak/keycloak/commit/6e57dec37fb5c4455b1d4f43e28039beec25e7c8", "message": "KEYCLOAK-14855 Added realm-specific localization texts which affect texts in every part of the UI (admin console / login page / personal info page / email templates). Also new API endpoints and a new UI screen to manage the realm-specific localization texts were introduced.\n\nCo-authored-by: Daniel Fesenmeyer <daniel.fesenmeyer@bosch.io>", "committedDate": "2020-10-29T15:33:53Z", "type": "commit"}, {"oid": "6e57dec37fb5c4455b1d4f43e28039beec25e7c8", "url": "https://github.com/keycloak/keycloak/commit/6e57dec37fb5c4455b1d4f43e28039beec25e7c8", "message": "KEYCLOAK-14855 Added realm-specific localization texts which affect texts in every part of the UI (admin console / login page / personal info page / email templates). Also new API endpoints and a new UI screen to manage the realm-specific localization texts were introduced.\n\nCo-authored-by: Daniel Fesenmeyer <daniel.fesenmeyer@bosch.io>", "committedDate": "2020-10-29T15:33:53Z", "type": "forcePushed"}]}