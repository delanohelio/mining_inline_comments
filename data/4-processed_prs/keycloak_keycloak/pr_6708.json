{"pr_number": 6708, "pr_title": "KEYCLOAK-12838 DatasetLoader in performance swallows exceptions", "pr_createdAt": "2020-01-30T16:29:44Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6708", "timeline": [{"oid": "eabee82a5f257d041a06efaafe7bf1fbf4ad5ab5", "url": "https://github.com/keycloak/keycloak/commit/eabee82a5f257d041a06efaafe7bf1fbf4ad5ab5", "message": "KEYCLOAK-12838 DatasetLoader in performance swallows exceptions", "committedDate": "2020-01-31T17:19:10Z", "type": "commit"}, {"oid": "eabee82a5f257d041a06efaafe7bf1fbf4ad5ab5", "url": "https://github.com/keycloak/keycloak/commit/eabee82a5f257d041a06efaafe7bf1fbf4ad5ab5", "message": "KEYCLOAK-12838 DatasetLoader in performance swallows exceptions", "committedDate": "2020-01-31T17:19:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2MzQzMg==", "url": "https://github.com/keycloak/keycloak/pull/6708#discussion_r375863432", "bodyText": "logger().error(ex, \"Error occured in thread %s\", Thread.currentThread().getName());\nis probably easier one-line version of whole this change?", "author": "mposolda", "createdAt": "2020-02-06T14:26:32Z", "path": "testsuite/performance/tests/src/main/java/org/keycloak/performance/dataset/DatasetLoader.java", "diffHunk": "@@ -192,11 +190,16 @@ private synchronized boolean errorReported() {\n \n     private synchronized void reportError(Throwable ex) {\n         logProcessedEntityCounts(true);\n-        logger().error(\"Error occured: \" + ex);\n+        \n+        StringWriter sw = new StringWriter();\n+        ex.printStackTrace(new PrintWriter(sw));\n+        \n+        logger().error(String.format(\"Error occured in thread %s: %s\", Thread.currentThread().getName(), sw.toString()));", "originalCommit": "eabee82a5f257d041a06efaafe7bf1fbf4ad5ab5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2NDIyOA==", "url": "https://github.com/keycloak/keycloak/pull/6708#discussion_r375864228", "bodyText": "logger().info(\"Opening %d admin clients.\", TestConfig.numOfWorkers));\nis probably a bit easier version of this?", "author": "mposolda", "createdAt": "2020-02-06T14:27:54Z", "path": "testsuite/performance/tests/src/main/java/org/keycloak/performance/dataset/DatasetLoader.java", "diffHunk": "@@ -49,6 +51,7 @@ public DatasetLoader(Dataset dataset, boolean delete) {\n         Validate.notNull(dataset);\n         this.dataset = dataset;\n         this.delete = delete;\n+        logger().info(String.format(\"Opening %s admin clients.\", TestConfig.numOfWorkers));", "originalCommit": "eabee82a5f257d041a06efaafe7bf1fbf4ad5ab5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2NDkzMA==", "url": "https://github.com/keycloak/keycloak/pull/6708#discussion_r375864930", "bodyText": "logger().debug(\"Entity %s already exists.\", this));\nis a bit easier version of this?", "author": "mposolda", "createdAt": "2020-02-06T14:29:06Z", "path": "testsuite/performance/tests/src/main/java/org/keycloak/performance/dataset/Creatable.java", "diffHunk": "@@ -41,23 +42,26 @@ public default boolean createCheckingForConflict(Keycloak adminClient) {\n             } else {\n                 String responseBody = response.readEntity(String.class);\n                 response.close();\n-                if (response.getStatus() == 409) { // some endpoints dont't throw exception on 409, throwing here\n-                    throw new ClientErrorException(HTTP_409_SUFFIX, response);\n-                }\n-                if (responseBody != null && !responseBody.isEmpty()) {\n-                    logger().trace(responseBody);\n-                    setRepresentation(EntityTemplate.OBJECT_MAPPER.readValue(responseBody, (Class<REP>) getRepresentation().getClass()));\n-                } else {\n-                    setId(getCreatedId(response));\n+                switch (response.getStatus()) {\n+                    case 201: // created\n+                        if (responseBody != null && !responseBody.isEmpty()) {\n+                            logger().trace(String.format(\"Response status: %s, body: %s\", response.getStatus(), responseBody));\n+                            setRepresentation(EntityTemplate.OBJECT_MAPPER.readValue(responseBody, (Class<REP>) getRepresentation().getClass()));\n+                        } else {\n+                            setId(getCreatedId(response));\n+                        }\n+                        break;\n+                    case 409: // some client endpoints dont't throw exception on 409 response, throwing from here\n+                        throw new ClientErrorException(HTTP_409_SUFFIX, response);\n+                    default:\n+                        throw new RuntimeException(String.format(\"Error when creating entity %s.\", this), new WebApplicationException(response));\n                 }\n             }\n         } catch (ClientErrorException ex) {\n             if (ex.getResponse().getStatus() == 409) {\n                 conflict = true;\n-                logger().trace(\"entity already exists\");\n+                logger().debug(String.format(\"Entity %s already exists.\", this));", "originalCommit": "eabee82a5f257d041a06efaafe7bf1fbf4ad5ab5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}