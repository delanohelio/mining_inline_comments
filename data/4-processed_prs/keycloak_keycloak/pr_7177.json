{"pr_number": 7177, "pr_title": "KEYCLOAK-13206 Session Status iframe cannot access cookies when 3rd party cookies are blocked", "pr_createdAt": "2020-06-17T17:04:40Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7177", "timeline": [{"oid": "b9433660b5f413c0d8e3332c13f55c2b764794e5", "url": "https://github.com/keycloak/keycloak/commit/b9433660b5f413c0d8e3332c13f55c2b764794e5", "message": "KEYCLOAK-13206 Session Status iframe cannot access cookies when 3rd party cookies are blocked\n\nCo-authored-by: mhajas <mhajas@redhat.com>", "committedDate": "2020-06-17T17:07:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NjIxNg==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442056216", "bodyText": "You can't do this I'm afraid, as it is not correct behaviour with regards to the spec. According to the spec it should send unchanged if expected session matches actual state, or changed if it doesn't. See https://openid.net/specs/openid-connect-session-1_0.html#RPiframe", "author": "stianst", "createdAt": "2020-06-18T08:27:20Z", "path": "adapters/oidc/js/src/main/resources/login-status-iframe.html", "diffHunk": "@@ -54,7 +54,11 @@\n                         }\n                         if (!cookie) {\n                             if (sessionState != '') {\n-                                callback('changed');\n+                                // Adapter was authenticated (session ID exists) but session cookie is not found.\n+                                // Either user was logged out shortly after authentication but before this iframe could be\n+                                // loaded (usually just a few seconds), which is really a corner case, or 3rd part cookies\n+                                // are blocked which is the most probable scenario.\n+                                callback('cookie_not_found');", "originalCommit": "b9433660b5f413c0d8e3332c13f55c2b764794e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTM5Mw==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442111393", "bodyText": "@stianst I was thinking the same first, but then I realised this piece of code is visited only on the first iframe call. Every other call already has the init object/variable created so it will end up here: https://github.com/keycloak/keycloak/blob/master/adapters/oidc/js/src/main/resources/login-status-iframe.html#L71\nI can't see any other way how to find out whether 3rd party cookies are blocked. WDYT?", "author": "mhajas", "createdAt": "2020-06-18T09:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NjIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3MjgxOQ==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442172819", "bodyText": "Thanks for pointing this out. jFTR, with @stianst we were discussing changing the callback here to unchanged. But this brings other problems.\nThe main problem is how to tell the adapter that iframe doesn't work. So as I see it, we've got following options.\nOption 1\n\nFully comply with specs, i.e. return unchanged.\nAdapter doesn't know that iframe is not working.\nStandard check-sso (the one without iframe, not the silent one) won't work:\n\n  \n    \n      keycloak/adapters/oidc/js/src/main/resources/keycloak.js\n    \n    \n        Lines 283 to 288\n      in\n      ec9bf62\n    \n    \n    \n    \n\n        \n          \n           checkLoginIframe().then(function (unchanged) { \n        \n\n        \n          \n               if (!unchanged) { \n        \n\n        \n          \n                   kc.silentCheckSsoRedirectUri ? checkSsoSilently() : doLogin(false); \n        \n\n        \n          \n               } else { \n        \n\n        \n          \n                   initPromise.setSuccess(); \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nThis will have to be reworked not to rely on iframe at all.A redirect to KC would always be performed even if the user is not logged in. Regardless if iframe is enabled or not because we can't know if it works or not.\nInitialization with token also won't work as before:\n\n  \n    \n      keycloak/adapters/oidc/js/src/main/resources/keycloak.js\n    \n    \n        Lines 319 to 331\n      in\n      ec9bf62\n    \n    \n    \n    \n\n        \n          \n           if (initOptions.token && initOptions.refreshToken) { \n        \n\n        \n          \n               setToken(initOptions.token, initOptions.refreshToken, initOptions.idToken); \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (loginIframe.enable) { \n        \n\n        \n          \n                   setupCheckLoginIframe().then(function() { \n        \n\n        \n          \n                       checkLoginIframe().then(function (unchanged) { \n        \n\n        \n          \n                           if (unchanged) { \n        \n\n        \n          \n                               kc.onAuthSuccess && kc.onAuthSuccess(); \n        \n\n        \n          \n                               initPromise.setSuccess(); \n        \n\n        \n          \n                               scheduleCheckIframe(); \n        \n\n        \n          \n                           } else { \n        \n\n        \n          \n                               initPromise.setSuccess(); \n        \n\n        \n          \n                           } \n        \n    \n  \n\n\nThe token won't be checked.\nSilent check-sso cannot work and user will always have to invoke login manually.\n\nOption 2\n\nHybrid solution: fully comply with the specs by default, but our JS adapter would use a special \"mode\" of the login iframe so that it would use cookie_not_found in the callback.\nEverything would work as before, except obviously the silent check-sso and single logout.", "author": "vmuzikar", "createdAt": "2020-06-18T11:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NjIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3ODI2Mg==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442878262", "bodyText": "Scratch that, option 2 won't work. In case of non-silent check-sso, it wouldn't work. Even if the iframe would return cookie_not_found, it wouldn't return it in case of check-sso \u2013 it would always return unchaged which would make check-sso completely unusable with 3rd party cookies blocked. At the same time, forcing the browser to redirect to KC with prompt=none even if cookies aren't blocked is unnecessary overhead, so it's not an option either. That will have to be done only when cookies are blocked.\nI'll add an explicit and independent check for 3rd party cookies blocking when initializing the iframe, something like: https://github.com/mindmup/3rdpartycookiecheck. This will solve all the issues. Iframe will be still OIDC compliant (actually untouched by this PR) and at the same time automatically disabled if 3rd party cookies are blocked.", "author": "vmuzikar", "createdAt": "2020-06-19T14:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NjIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc1NA==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442111754", "bodyText": "Not sure this has any other simple solution but tests using this boolean will start failing once chrome will block 3rd party cookies by default. Do you have any idea, how to avoid this? Maybe some simple app with iframe within testsuite-providers which will check this? WDYT?", "author": "mhajas", "createdAt": "2020-06-18T09:59:11Z", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/SuiteContext.java", "diffHunk": "@@ -58,7 +60,9 @@\n      * True if the testsuite is running in the adapter backward compatibility testing mode,\n      * i.e. if the tests are running against newer auth server\n      */\n-    private static final boolean adapterCompatTesting = Boolean.parseBoolean(System.getProperty(\"testsuite.adapter.compat.testing\"));\n+    private static final boolean adapterCompatTesting = parseBoolean(System.getProperty(\"testsuite.adapter.compat.testing\"));\n+\n+    private static final boolean browserStrictCookies = parseBoolean(System.getProperty(\"browser.strict.cookies\"));", "originalCommit": "b9433660b5f413c0d8e3332c13f55c2b764794e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMzI0NA==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442133244", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final boolean browserStrictCookies = parseBoolean(System.getProperty(\"browser.strict.cookies\"));\n          \n          \n            \n                private static final boolean browserStrictCookies = parseBoolean(System.getProperty(\"browser.strict.cookies\")) && !\"localhost\".equals(AUTH_SERVER_HOST);", "author": "mhajas", "createdAt": "2020-06-18T10:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NDI3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442174279", "bodyText": "We won't be testing this with Chrome for now. We'll be using FF in controlled CI environment where we're using a stable version, not relying on auto updates.", "author": "vmuzikar", "createdAt": "2020-06-18T12:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE5MDQ2Nw==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442190467", "bodyText": "These tests are running in server pipeline with chrome. But I just realized, we can rely on the fact that server pipeline is using localhost by default.", "author": "mhajas", "createdAt": "2020-06-18T12:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE5MTM5NQ==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442191395", "bodyText": "Yes, with localhost cookies are not blocked.", "author": "vmuzikar", "createdAt": "2020-06-18T12:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMDEyOA==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r442210128", "bodyText": "Anyway, I think this part && !\"localhost\".equals(AUTH_SERVER_HOST); makes sense because if you run tests without auth.server.host or/and (not sure) auth.server.host2, tests will fail, because 3rd party are not blocked. Or maybe we can set some default values for hosts when browser.strict.cookies == true. Maybe using nip.io/xip.io WDYT?", "author": "mhajas", "createdAt": "2020-06-18T13:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMDc1Mg==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r443630752", "bodyText": "I wouldn't add the suggested comparison to localhost here. The browserStrictCookies property just tells us the browser treats cookies in some way and doesn't tell us when they'll be blocked. It's up to the test to know it.\nAlso, when the tests fail without setting proper hosts for server, it's actually correct behavior IMHO. It points out a miscofigured test.\nBut I agree maybe we could add a special Maven profile to set hosts to some precofigured values. But I'm not sure about it \u2013\u00a0if we want to hardcode a 3rd party services directly into POM. IMHO that belongs to the test pipeline.", "author": "vmuzikar", "createdAt": "2020-06-22T15:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4NTA5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r446185091", "bodyText": "Well, I think it should fail sooner than in the test if one fails to set hosts properly. However, it would be harder to implement it as we don't know whether we should enforce auth.server.host + app.server.host or auth.server.host + auth.server.host2. Unless we unify those two and use only auth/app.server.host. Do you have any idea how to solve it? If no we can probably leave it as it is.", "author": "mhajas", "createdAt": "2020-06-26T13:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc1NA=="}], "type": "inlineReview"}, {"oid": "990b091e2ab101af4922dbfa09e740454deaa368", "url": "https://github.com/keycloak/keycloak/commit/990b091e2ab101af4922dbfa09e740454deaa368", "message": "KEYCLOAK-13206 Session Status iframe cannot access cookies when 3rd party cookies are blocked\n\nCo-authored-by: mhajas <mhajas@redhat.com>", "committedDate": "2020-06-22T14:40:30Z", "type": "forcePushed"}, {"oid": "8cc0e25da6f4ea311bbdc7eb81ba8500b8a28577", "url": "https://github.com/keycloak/keycloak/commit/8cc0e25da6f4ea311bbdc7eb81ba8500b8a28577", "message": "KEYCLOAK-13206 Session Status iframe cannot access cookies when 3rd party cookies are blocked\n\nCo-authored-by: mhajas <mhajas@redhat.com>", "committedDate": "2020-06-30T15:10:56Z", "type": "commit"}, {"oid": "8cc0e25da6f4ea311bbdc7eb81ba8500b8a28577", "url": "https://github.com/keycloak/keycloak/commit/8cc0e25da6f4ea311bbdc7eb81ba8500b8a28577", "message": "KEYCLOAK-13206 Session Status iframe cannot access cookies when 3rd party cookies are blocked\n\nCo-authored-by: mhajas <mhajas@redhat.com>", "committedDate": "2020-06-30T15:10:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTg4Mw==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r512089883", "bodyText": "This breaks with any browser extension (e.g. FoxyGestures or React Dev Tools in Firefox) hat sends messages to new windows. Your code needs to be resilient to any message it does not recognize and not consider it an error.", "author": "ThiefMaster", "createdAt": "2020-10-26T16:19:56Z", "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -1276,6 +1294,45 @@\n             return promise.promise;\n         }\n \n+        function check3pCookiesSupported() {\n+            var promise = createPromise();\n+\n+            if (loginIframe.enable || kc.silentCheckSsoRedirectUri) {\n+                var iframe = document.createElement('iframe');\n+                iframe.setAttribute('src', kc.endpoints.thirdPartyCookiesIframe());\n+                iframe.setAttribute('title', 'keycloak-3p-check-iframe' );\n+                iframe.style.display = 'none';\n+                document.body.appendChild(iframe);\n+\n+                var messageCallback = function(event) {\n+                    if (iframe.contentWindow !== event.source) {\n+                        return;\n+                    }\n+\n+                    if (event.data !== \"supported\" && event.data !== \"unsupported\") {", "originalCommit": "8cc0e25da6f4ea311bbdc7eb81ba8500b8a28577", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNjY5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r512106691", "bodyText": "@ThiefMaster Thank you for reporting this. Could you please create a JIRA for this (if you haven't already) so we can triage this efficiently?", "author": "vmuzikar", "createdAt": "2020-10-26T16:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyNjQxMQ==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r512226411", "bodyText": "@vmuzikar thanks for the comment. I opened a ticket on your JIRA here.", "author": "saibot94", "createdAt": "2020-10-26T19:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExNDIwNA==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r523114204", "bodyText": "@saibot94 @ThiefMaster We've prepared a fix: #7609. Would you be please able to check it out if it fixes the issue in your use cases?", "author": "vmuzikar", "createdAt": "2020-11-13T17:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExODQyNg==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r523118426", "bodyText": "Just based on the code the fix looks like it will do the job :) If @saibot94 deploys it on his test instance (or if you have a test instance that's publicly accessible) I don't mind testing it to confirm it :)", "author": "ThiefMaster", "createdAt": "2020-11-13T17:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NTc5OQ==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r523155799", "bodyText": "Thanks! I'll deploy it and let you know, @ThiefMaster .", "author": "saibot94", "createdAt": "2020-11-13T18:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQxNDM0OA==", "url": "https://github.com/keycloak/keycloak/pull/7177#discussion_r523414348", "bodyText": "works fine!", "author": "ThiefMaster", "createdAt": "2020-11-14T12:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTg4Mw=="}], "type": "inlineReview"}]}