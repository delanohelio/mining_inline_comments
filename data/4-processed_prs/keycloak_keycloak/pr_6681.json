{"pr_number": 6681, "pr_title": "KEYCLOAK-12732 Improve SAMLAttribute parsing of unknown attributes", "pr_createdAt": "2020-01-21T11:07:59Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6681", "timeline": [{"oid": "6bc31c1f21c909511378858ebddb3b24b35d2ce9", "url": "https://github.com/keycloak/keycloak/commit/6bc31c1f21c909511378858ebddb3b24b35d2ce9", "message": "KEYCLOAK-12732 Improve SAMLAttribute parsing of unknown attributes\n\nWe now store all unknown attributes present on a SAMLAttribute element\nin the \"otherAttributes\" map associated with the element.\n\nPreviously only the x500:encoding attribute was handled while parsing\nattribute elements.", "committedDate": "2020-01-30T11:14:42Z", "type": "forcePushed"}, {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740", "url": "https://github.com/keycloak/keycloak/commit/e1101ae24ae45b5b315ebe06da3d7858773e7740", "message": "KEYCLOAK-12732 Improve SAMLAttribute parsing of unknown attributes\n\nWe now store all unknown attributes present on a SAMLAttribute element\nin the \"otherAttributes\" map associated with the element.\n\nPreviously only the x500:encoding attribute was handled while parsing\nattribute elements.", "committedDate": "2020-01-30T11:20:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMzgzOA==", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372903838", "bodyText": "this should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Set<String> DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES;\n          \n          \n            \n                private static final Set<QName> DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES = new HashSet<>(Arrays.asList(\n          \n          \n            \n                  SAMLAssertionQNames.ATTR_NAME.getQName(),\n          \n          \n            \n                  SAMLAssertionQNames.ATTR_FRIENDLY_NAME.getQName(),\n          \n          \n            \n                  SAMLAssertionQNames.ATTR_NAME_FORMAT.getQName()\n          \n          \n            \n                ));", "author": "hmlnarik", "createdAt": "2020-01-30T11:46:43Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -31,8 +42,16 @@\n \n     private static final SAMLAttributeParser INSTANCE = new SAMLAttributeParser();\n \n+    private final Set<String> DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES;", "originalCommit": "e1101ae24ae45b5b315ebe06da3d7858773e7740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDgxMQ==", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372904811", "bodyText": "Remove this whole block (l49-54) since this has moved to static initialization above.", "author": "hmlnarik", "createdAt": "2020-01-30T11:49:00Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -31,8 +42,16 @@\n \n     private static final SAMLAttributeParser INSTANCE = new SAMLAttributeParser();\n \n+    private final Set<String> DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES;\n+\n     private SAMLAttributeParser() {\n         super(SAMLAssertionQNames.ATTRIBUTE);\n+", "originalCommit": "e1101ae24ae45b5b315ebe06da3d7858773e7740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTA1NA==", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372905054", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n          \n          \n            \n                private static Map<QName, String> collectUnknownAttributesFrom(StartElement element) {", "author": "hmlnarik", "createdAt": "2020-01-30T11:49:42Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {", "originalCommit": "e1101ae24ae45b5b315ebe06da3d7858773e7740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTY5Nw==", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372905697", "bodyText": "remove the if statement and logger.trace (l94-96) with\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (LOGGER.isTraceEnabled()) {\n          \n          \n            \n                        logger.tracef(\"Adding attribute %s with value %s\", attributeQName, attributeValue);", "author": "hmlnarik", "createdAt": "2020-01-30T11:51:24Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n+\n+        Map<QName, String> otherAttributes = new HashMap<>();\n+\n+        Iterator<?> attributes = element.getAttributes();\n+        while (attributes.hasNext()) {\n+            Attribute currentAttribute = (Attribute) attributes.next();\n+            QName attributeQName = currentAttribute.getName();\n+            if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {\n+                continue;\n+            }\n+            String attributeValue = currentAttribute.getValue();\n+            otherAttributes.put(attributeQName, attributeValue);\n+            if (LOGGER.isTraceEnabled()) {", "originalCommit": "e1101ae24ae45b5b315ebe06da3d7858773e7740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NzA2OA==", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r373097068", "bodyText": "That's what I wanted to do in the first place, but there is no classic JBoss-Logging \"logger\" field available for this class, just the PicketLinkLogger LOGGER, which doesn't provide a tracef(...) method. That's why I added the guard to spare the string concat.", "author": "thomasdarimont", "createdAt": "2020-01-30T17:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1NzcwMg==", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r373257702", "bodyText": "I didn't want to add a JBoss-Logging logger just for this one logging statement.", "author": "thomasdarimont", "createdAt": "2020-01-31T00:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1OTMwNQ==", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r373359305", "bodyText": "I see, that makes sense then. Perhaps we should unify the logging to use single logging framework but that's definitely out of scope for this PR.", "author": "hmlnarik", "createdAt": "2020-01-31T08:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk2NTY2NA==", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372965664", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {\n          \n          \n            \n                        if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName)) {", "author": "hmlnarik", "createdAt": "2020-01-30T14:04:29Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n+\n+        Map<QName, String> otherAttributes = new HashMap<>();\n+\n+        Iterator<?> attributes = element.getAttributes();\n+        while (attributes.hasNext()) {\n+            Attribute currentAttribute = (Attribute) attributes.next();\n+            QName attributeQName = currentAttribute.getName();\n+            if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {", "originalCommit": "e1101ae24ae45b5b315ebe06da3d7858773e7740", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "abd5ef162ff4eab0d89a70c4a004c91fc6b55c3f", "url": "https://github.com/keycloak/keycloak/commit/abd5ef162ff4eab0d89a70c4a004c91fc6b55c3f", "message": "KEYCLOAK-12732 Improve SAMLAttribute parsing of unknown attributes\n\nWe now store all unknown attributes present on a SAMLAttribute element\nin the \"otherAttributes\" map associated with the element.\n\nPreviously only the x500:encoding attribute was handled while parsing\nattribute elements.", "committedDate": "2020-01-30T17:51:12Z", "type": "commit"}, {"oid": "abd5ef162ff4eab0d89a70c4a004c91fc6b55c3f", "url": "https://github.com/keycloak/keycloak/commit/abd5ef162ff4eab0d89a70c4a004c91fc6b55c3f", "message": "KEYCLOAK-12732 Improve SAMLAttribute parsing of unknown attributes\n\nWe now store all unknown attributes present on a SAMLAttribute element\nin the \"otherAttributes\" map associated with the element.\n\nPreviously only the x500:encoding attribute was handled while parsing\nattribute elements.", "committedDate": "2020-01-30T17:51:12Z", "type": "forcePushed"}]}