{"pr_number": 4641, "pr_title": "QACI-95 Refactor Payara Samples", "pr_createdAt": "2020-04-25T12:53:34Z", "pr_url": "https://github.com/payara/Payara/pull/4641", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNDUxOQ==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419434519", "bodyText": "The only test I see that requires a clean domain is the dataGridEncryptionWarning test, which surely could also be acheived by making the other test that creates the key clean up after itself properly?", "author": "Pandrex247", "createdAt": "2020-05-04T13:27:20Z", "path": "appserver/tests/payara-samples/samples/asadmin/src/test/java/fish/payara/samples/asadmin/SetHazelcastConfigurationTest.java", "diffHunk": "@@ -39,15 +39,22 @@\n  */\n package fish.payara.samples.asadmin;\n \n+import fish.payara.nucleus.hazelcast.HazelcastRuntimeConfiguration;\n+import fish.payara.samples.Unstable;\n+\n import org.glassfish.embeddable.CommandResult;\n import org.junit.Before;\n import org.junit.Test;\n-\n-import fish.payara.nucleus.hazelcast.HazelcastRuntimeConfiguration;\n+import org.junit.experimental.categories.Category;\n \n /**\n  * Verifies the correctness of the {@code SetHazelcastConfiguration} command.\n  */\n+@Category(Unstable.class)\n+// Fails from two reasons:\n+// 1) Requires completely new domain. Side effects of other tests break this one.", "originalCommit": "726655546a49325165a0e288228490a54061b3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzMyNA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419757324", "bodyText": "Both should clean up after their run. Or better we should have some architecture in tests so instead of testing \"random\" features in random order we could join them to some scenarios, use cases, categories/groups (?) and each category would start with a new domain. Then we can have a control over it, but imagine we would have thousand of tests in payara samples - which of those test result states interact with any other? The current state of things is not maintainable in larger scope.", "author": "dmatej", "createdAt": "2020-05-04T22:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNDUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNTA2Mw==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419435063", "bodyText": "Why are we introducing things that don't work on what is arguably the primary java version?", "author": "Pandrex247", "createdAt": "2020-05-04T13:28:05Z", "path": "appserver/tests/payara-samples/samples/asadmin/src/test/java/fish/payara/samples/asadmin/SetHazelcastConfigurationTest.java", "diffHunk": "@@ -39,15 +39,22 @@\n  */\n package fish.payara.samples.asadmin;\n \n+import fish.payara.nucleus.hazelcast.HazelcastRuntimeConfiguration;\n+import fish.payara.samples.Unstable;\n+\n import org.glassfish.embeddable.CommandResult;\n import org.junit.Before;\n import org.junit.Test;\n-\n-import fish.payara.nucleus.hazelcast.HazelcastRuntimeConfiguration;\n+import org.junit.experimental.categories.Category;\n \n /**\n  * Verifies the correctness of the {@code SetHazelcastConfiguration} command.\n  */\n+@Category(Unstable.class)\n+// Fails from two reasons:\n+// 1) Requires completely new domain. Side effects of other tests break this one.\n+// 2) On JDK8 fails because of usage of @Category annotation which has problems with", "originalCommit": "726655546a49325165a0e288228490a54061b3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1NjI0Mg==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419456242", "bodyText": "Agree. Eventually we might start using JUnit5 but this should be a planned step.", "author": "jbee", "createdAt": "2020-05-04T13:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNTA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczMDE1Nw==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419730157", "bodyText": "First Categories are used in JUnit4 as a standard for maybe 15 years and they do work.\nProbably this issue is caused by interaction with this in PayaraArquillianTestRunner or some of our other custom implementations \"hacking\" JUnit4 standards. But it is worthless to investigate, because the test does not work at all.\nAnd if it would, we would not need the category ;)", "author": "dmatej", "createdAt": "2020-05-04T21:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNTA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0NjAwMg==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419746002", "bodyText": "https://dzone.com/articles/closer-look-junit-categories (2010)", "author": "dmatej", "createdAt": "2020-05-04T21:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNTA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNDI5NQ==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419934295", "bodyText": "Okay, thought the issue here was related to use of a feature that was introduced later.", "author": "jbee", "createdAt": "2020-05-05T08:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNTA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxODQzNA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r420018434", "bodyText": "Maybe we should use categories instead of NotMicroCompatible too, but ... I think there will be more work with Andrew's point around repeatibility of tests. Probably it could spark some more stable (and faster and cheaper) architecture of tests, I will think about it :-)", "author": "dmatej", "createdAt": "2020-05-05T10:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNTA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0NTg1OQ==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419445859", "bodyText": "I'm not fond of this.\nA test that is disabled due to not having an environment variable set is never run.", "author": "Pandrex247", "createdAt": "2020-05-04T13:43:21Z", "path": "appserver/tests/payara-samples/samples/payara-expression-config-properties/pom.xml", "diffHunk": "@@ -105,4 +112,36 @@\n             </plugin>\n         </plugins>\n     </build>\n-</project>\n\\ No newline at end of file\n+    <profiles>\n+        <profile>\n+            <id>auto-skip-test</id>", "originalCommit": "726655546a49325165a0e288228490a54061b3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczMTAyMg==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419731022", "bodyText": "Repeatable tests should run without hacking computer environment. By default it only fails.", "author": "dmatej", "createdAt": "2020-05-04T21:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0NTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MjQ4OQ==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419752489", "bodyText": "I understand that in this case there was no other way possible - I plan to move this test to TC PR including jenkinsfile etc., so final state should be clean next week ;)", "author": "dmatej", "createdAt": "2020-05-04T21:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0NTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MjUwMA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457642500", "bodyText": "After this PR will make it to master I will rebase my TC branch and transform this test to TC.", "author": "dmatej", "createdAt": "2020-07-20T19:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0NTg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0NzE2Nw==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419447167", "bodyText": "Why less indent? 8 spaces is the default for breaking up long lines.\nAlso what's with the random empty comments?", "author": "Pandrex247", "createdAt": "2020-05-04T13:45:05Z", "path": "appserver/tests/payara-samples/samples/payara-expression-config-properties/src/test/java/fish/payara/samples/microprofile/config/expression/PayaraExpressionConfigPropertiesTest.java", "diffHunk": "@@ -71,14 +70,16 @@\n     @Deployment(testable = false)\n     public static WebArchive createDeployment() {\n         return ShrinkWrap.create(WebArchive.class, \"microprofile-config-expression.war\")\n-                .addPackage(\"fish.payara.samples.microprofile.config.expression\")\n-                .addAsManifestResource(new File(\"src/main/resources/META-INF/payara-expression-config.properties\"));\n+            .addPackage(ConfigServlet.class.getPackage()) //", "originalCommit": "726655546a49325165a0e288228490a54061b3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MDEyNA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419740124", "bodyText": "It is called a \"phantom comment\". In some circumstances it is best possible way to protected readable code from automatic reformatting.\nI don't see 2 block indent useful and always used 1 block, but yes, in Eclipse default is 2 blocks (8 spaces). Honestly I don't see it as a most important thing worth of discussion.", "author": "dmatej", "createdAt": "2020-05-04T21:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0NzE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTExNw==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419449117", "bodyText": "It shouldn't do? Tests should clean up after themselves.", "author": "Pandrex247", "createdAt": "2020-05-04T13:47:41Z", "path": "appserver/tests/payara-samples/samples/pom.xml", "diffHunk": "@@ -15,20 +15,26 @@\n     <name>Payara Samples - Profiled Tests</name>\n \n     <modules>\n+        <!-- This module must run first, because it collides with some change made by other test(s) -->\n+        <module>payara-expression-config-properties</module>", "originalCommit": "726655546a49325165a0e288228490a54061b3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MTQ1Nw==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r419741457", "bodyText": "They reuse the managed/remote domain, so you can never get to the state before all tests. But yes, it seems some (or all?) tests leave some garbage behind them. Btw this one too.", "author": "dmatej", "createdAt": "2020-05-04T21:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTExNw=="}], "type": "inlineReview"}, {"oid": "0e7db0f1ab281136ddfbff3de3b59f184b5fb20a", "url": "https://github.com/payara/Payara/commit/0e7db0f1ab281136ddfbff3de3b59f184b5fb20a", "message": "QACI-95 Excluded javax dependencies brought by smallrye-config", "committedDate": "2020-07-20T06:20:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMTc5OA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457631798", "bodyText": "Moved, because this tests were too far from building extras and payara embedded, which is hidden under a profile. That had two consequences:\n\nthe Payara Samples tested against old version of Payara Embedded\nsometimes the embedded wasn't built yet -> dependency issues.", "author": "dmatej", "createdAt": "2020-07-20T19:10:07Z", "path": "appserver/extras/embedded/tests/embedded-vs-jersey/pom.xml", "diffHunk": "@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>", "originalCommit": "d62652d3cba07a2c54d8ce537300de9683c8c4ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "49267331a176fad3d62ee4f54ef8f515344eff0f", "url": "https://github.com/payara/Payara/commit/49267331a176fad3d62ee4f54ef8f515344eff0f", "message": "QACI-95 Payara Embedded tests moved from Payara Samples to Payara Embedded", "committedDate": "2020-07-20T19:12:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNDA1NA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457634054", "bodyText": "Upgrade!", "author": "dmatej", "createdAt": "2020-07-20T19:14:36Z", "path": "appserver/tests/payara-samples/pom.xml", "diffHunk": "@@ -86,7 +82,7 @@\n             <dependency>\n                 <groupId>org.jboss.arquillian</groupId>\n                 <artifactId>arquillian-bom</artifactId>\n-                <version>1.5.0.Final</version>\n+                <version>1.6.0.Final</version>", "originalCommit": "49267331a176fad3d62ee4f54ef8f515344eff0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNDgxNA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457634814", "bodyText": "This was discovered when we discussed related dependency issues with @MattGill98", "author": "dmatej", "createdAt": "2020-07-20T19:15:56Z", "path": "appserver/tests/payara-samples/pom.xml", "diffHunk": "@@ -108,6 +104,16 @@\n                 <artifactId>smallrye-config</artifactId>\n                 <version>1.3.7</version>\n                 <scope>test</scope>\n+                <exclusions>", "originalCommit": "49267331a176fad3d62ee4f54ef8f515344eff0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNTEyMg==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457635122", "bodyText": "This configuration should be probably default.", "author": "dmatej", "createdAt": "2020-07-20T19:16:36Z", "path": "appserver/tests/payara-samples/pom.xml", "diffHunk": "@@ -238,6 +244,7 @@\n                         <systemPropertyVariables>\n                             <isUsingMicroProfile>${micro.isActive}</isUsingMicroProfile>\n                         </systemPropertyVariables>\n+                        <trimStackTrace>false</trimStackTrace>", "originalCommit": "49267331a176fad3d62ee4f54ef8f515344eff0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNzIyNQ==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457637225", "bodyText": "Probably better link:\nhttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-7183985", "author": "dmatej", "createdAt": "2020-07-20T19:20:25Z", "path": "appserver/tests/payara-samples/samples/asadmin/src/test/java/fish/payara/samples/asadmin/SetHazelcastConfigurationTest.java", "diffHunk": "@@ -39,15 +39,22 @@\n  */\n package fish.payara.samples.asadmin;\n \n+import fish.payara.nucleus.hazelcast.HazelcastRuntimeConfiguration;\n+import fish.payara.samples.Unstable;\n+\n import org.glassfish.embeddable.CommandResult;\n import org.junit.Before;\n import org.junit.Test;\n-\n-import fish.payara.nucleus.hazelcast.HazelcastRuntimeConfiguration;\n+import org.junit.experimental.categories.Category;\n \n /**\n  * Verifies the correctness of the {@code SetHazelcastConfiguration} command.\n  */\n+@Category(Unstable.class)\n+// Fails from two reasons:\n+// 1) Requires completely new domain. Side effects of other tests break this one.\n+// 2) On JDK8 fails because of usage of @Category annotation which has problems with\n+//    this bug: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8209742 (fixed in JDK11)", "originalCommit": "49267331a176fad3d62ee4f54ef8f515344eff0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNzc0OA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457637748", "bodyText": "Deleted trailing spaces.", "author": "dmatej", "createdAt": "2020-07-20T19:21:17Z", "path": "appserver/tests/payara-samples/samples/asadmin/src/test/java/fish/payara/samples/asadmin/SetHealthCheckServiceConfigurationTest.java", "diffHunk": "@@ -83,13 +83,13 @@ public void setUp() {\n ", "originalCommit": "49267331a176fad3d62ee4f54ef8f515344eff0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzODgwNw==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457638807", "bodyText": "Fixed to respect the current implementation.", "author": "dmatej", "createdAt": "2020-07-20T19:23:17Z", "path": "appserver/tests/payara-samples/samples/asadmin/src/test/java/fish/payara/samples/asadmin/SetHealthCheckServiceConfigurationTest.java", "diffHunk": "@@ -261,17 +261,17 @@ public void hogginThreadsThresholdDynamicAffectsConfigAndService() {\n \n     @Test\n     public void hogginThreadsRetryCountBelowMinimumCausesError() {\n-        CommandResult result = asadmin(\"set-healthcheck-service-configuration\", \n+        CommandResult result = asadmin(\"set-healthcheck-service-configuration\",\n                 \"--service\", \"ht\",\n                 \"--enabled\", \"true\",\n-                \"--hogging-threads-retry-count\", \"0\");", "originalCommit": "49267331a176fad3d62ee4f54ef8f515344eff0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MDE3NA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457640174", "bodyText": "I noticed the Jenkins build is much slower now. What is the cause? Is PayaraArquillianTestRunner slower than Arquillian? (just a first idea)\nEDIT: probably no. The reason is probably in enabling tests with secure endponts.", "author": "dmatej", "createdAt": "2020-07-20T19:25:55Z", "path": "appserver/tests/payara-samples/samples/ejb-invoker-secure-endpoint/src/test/java/fish/payara/samples/ejb/invoker/security/RemoteBeanBasicAuthTest.java", "diffHunk": "@@ -55,7 +56,8 @@\n  * BASIC Auth.\n  *\n  */\n-@RunWith(Arquillian.class)", "originalCommit": "49267331a176fad3d62ee4f54ef8f515344eff0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NDEwNA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457644104", "bodyText": "Ok, these tests are the cause of the slowdown. I will take a look once more if they couldn't be faster (unclosed rest clients or what?)", "author": "dmatej", "createdAt": "2020-07-20T19:33:43Z", "path": "appserver/tests/payara-samples/samples/pom.xml", "diffHunk": "@@ -43,25 +49,7 @@\n     </dependencyManagement>\n \n     <profiles>\n-\n-\t\t<profile>\n-\t\t\t<id>unstable</id>\n-\t\t\t<modules>\n-\t\t        <module>openid</module>\n-\t\t        <module>jaxws-tracing</module>\n-\t\t        <module>asadmin</module>\n-\t\t        <module>microprofile-endpoints</module>\n-         \t</modules>\n-\t\t</profile>\n-\t\t<profile>\n-\t\t\t<id>unstable-remote</id>\n-\t\t\t<modules>\n-                <module>ejb-invoker-secure-endpoint</module>", "originalCommit": "49267331a176fad3d62ee4f54ef8f515344eff0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwNTgzNA==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r457905834", "bodyText": "They do many restarts, that's why they are so slow. But that's out of the scope of this issue and I'm not sure if it is even resolvable.", "author": "dmatej", "createdAt": "2020-07-21T07:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NDEwNA=="}], "type": "inlineReview"}, {"oid": "b25ef7ae7ed2c0307770201acee3ebd918b332ef", "url": "https://github.com/payara/Payara/commit/b25ef7ae7ed2c0307770201acee3ebd918b332ef", "message": "QACI-95 Payara Embedded tests moved from Payara Samples to Payara Embedded", "committedDate": "2020-07-26T10:03:01Z", "type": "forcePushed"}, {"oid": "695d6b42e019714137154ab23b5fc78b58b18c61", "url": "https://github.com/payara/Payara/commit/695d6b42e019714137154ab23b5fc78b58b18c61", "message": "QACI-95 Another attempt for test stabilization\n\n- using annotations NotMicroCompatible and Category to respect capabilities\n  of the tested impl and dependencies of tests.\n- NotMicroCompatible has argument for string explanation\n- killed tabs and trimmed whitespaces again\n- arquillian update\n- disabled trimming of stacktraces in tests (how can you find what is broken?)\n- note: the SetHazelcastConfigurationTest crashes on JDK8 with profiles\n        unstable+payara-micro-managed. It is caused by the bug in JDK8,\n        fixed in JDK11.\n- using profile to detect if environment is suitable to run the test\n  - added profile auto-skip-test to expression-config-properties which\n    automatically skips the test if there are not configured env properties\n    in expected way. This test is a candidate for TestContainers as it\n    requires external environment configuration.\n- module samples-programmatic renamed to samples-micro-programmatic, which is not\n  executed if the payara-server-remote profile is activated.\n- similar for embedded-vs-jersey", "committedDate": "2020-08-03T08:16:36Z", "type": "commit"}, {"oid": "c61b0b4be32b6e2b4cb0b78f7d185e1642fccc0f", "url": "https://github.com/payara/Payara/commit/c61b0b4be32b6e2b4cb0b78f7d185e1642fccc0f", "message": "QACI-95 PayaraExpressionConfigPropertiesTest - dependencies on system state", "committedDate": "2020-08-03T08:16:36Z", "type": "commit"}, {"oid": "eff7a62be6060519ccd12c84792dfe9580a5de6b", "url": "https://github.com/payara/Payara/commit/eff7a62be6060519ccd12c84792dfe9580a5de6b", "message": "QACI-95 Stabilization of PayaraExpressionConfigPropertiesTest\n\n- somehow interacts with another test, so it must be executed before it.\n- always use target, not src dir", "committedDate": "2020-08-03T08:16:36Z", "type": "commit"}, {"oid": "1ec52ced1254a8579a4c5b2613f42aeb75d30cc3", "url": "https://github.com/payara/Payara/commit/1ec52ced1254a8579a4c5b2613f42aeb75d30cc3", "message": "QACI-95 Excluded javax dependencies brought by smallrye-config", "committedDate": "2020-08-03T08:16:36Z", "type": "commit"}, {"oid": "a7d3f007c6386c1d51d3d96d67cdaf067ede9803", "url": "https://github.com/payara/Payara/commit/a7d3f007c6386c1d51d3d96d67cdaf067ede9803", "message": "QACI-95 Rotate the server.log to avoid collisions with warnings from other tests", "committedDate": "2020-08-03T08:16:36Z", "type": "commit"}, {"oid": "f09817511d3f1fc0231cc7a229c2b7140d41f452", "url": "https://github.com/payara/Payara/commit/f09817511d3f1fc0231cc7a229c2b7140d41f452", "message": "QACI-95 Payara Embedded tests moved from Payara Samples to Payara Embedded", "committedDate": "2020-08-03T08:16:36Z", "type": "commit"}, {"oid": "f09817511d3f1fc0231cc7a229c2b7140d41f452", "url": "https://github.com/payara/Payara/commit/f09817511d3f1fc0231cc7a229c2b7140d41f452", "message": "QACI-95 Payara Embedded tests moved from Payara Samples to Payara Embedded", "committedDate": "2020-08-03T08:16:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5NzY4Nw==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r465197687", "bodyText": "This test consumed logs also from previous executions. Some of them logged warnings.", "author": "dmatej", "createdAt": "2020-08-04T17:02:02Z", "path": "appserver/tests/payara-samples/samples/rest-management/src/test/java/fish/payara/samples/rest/management/ServerLogTest.java", "diffHunk": "@@ -39,24 +39,41 @@\n  */\r\n package fish.payara.samples.rest.management;\r\n \r\n+import static org.junit.Assert.assertEquals;\r\n import static org.junit.Assert.assertFalse;\r\n \r\n+import fish.payara.samples.ServerOperations;\r\n+\r\n import java.util.Scanner;\r\n \r\n+import javax.ws.rs.client.Entity;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.junit.Before;\r\n import org.junit.Test;\r\n \r\n /**\r\n  * Tests to run against the server log\r\n  */\r\n public class ServerLogTest extends RestManagementTest {\r\n \r\n+    @Before\r\n+    public void resetLogging() throws Exception {\r", "originalCommit": "f09817511d3f1fc0231cc7a229c2b7140d41f452", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5ODA0Nw==", "url": "https://github.com/payara/Payara/pull/4641#discussion_r465198047", "bodyText": "Added possible explanation why it is not micro compatible.", "author": "dmatej", "createdAt": "2020-08-04T17:02:45Z", "path": "appserver/tests/payara-samples/test-utils/src/main/java/fish/payara/samples/NotMicroCompatible.java", "diffHunk": "@@ -48,15 +48,17 @@\n /**\n  * Annotation used to specify that a test is not applicable to Payara Micro\n  * Use in combination with <code>@RunWith(PayaraTestRunner.class)</code> or <code>@RunWith(PayaraArquillianTestRunner.class)</code> annotation\n- * \n+ *\n  * Can also be used in conjunction with <code>@SincePayara</code> to denote versioning\n- * \n+ *\n  * @see fish.payara.samples.*\n- * \n+ *\n  * @author Cuba Stanley\n  */\n @Target({ElementType.METHOD, ElementType.TYPE})\n @Retention(RetentionPolicy.RUNTIME)\n @Inherited\n-\n-public @interface NotMicroCompatible {}\n+public @interface NotMicroCompatible {", "originalCommit": "f09817511d3f1fc0231cc7a229c2b7140d41f452", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}