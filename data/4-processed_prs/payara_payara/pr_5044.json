{"pr_number": 5044, "pr_title": "FISH-1364 CUSTCOM-55 possibly stale log records are propagated", "pr_createdAt": "2020-12-10T20:20:31Z", "pr_url": "https://github.com/payara/Payara/pull/5044", "timeline": [{"oid": "3445ae7c3f11bbe06460832843b1acd7a3fe1d75", "url": "https://github.com/payara/Payara/commit/3445ae7c3f11bbe06460832843b1acd7a3fe1d75", "message": "force toString() during the same thread as the logging happens so objects\ndon't get passed around different threads in logging and have a chance to get\nout of sync and be inconsistent", "committedDate": "2020-12-10T20:32:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MDE4Nw==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r540490187", "bodyText": "What is param.getClass().equals(String.class) supposed to do?", "author": "sgflt", "createdAt": "2020-12-10T20:55:32Z", "path": "nucleus/common/common-util/src/main/java/com/sun/common/util/logging/GFLogRecord.java", "diffHunk": "@@ -84,4 +84,25 @@ public String getThreadName() {\n     public void setThreadName(String threadName) {\n         this.threadName = threadName;\n     }\n+\n+    /**\n+     * CUSTOM-55\n+     * in case of an object passed as a parameter, call it's toString() method\n+     * to resolve it's values in the current thread, instead of waiting for queues / et\n+     * so there is no possibility of state change of the object between thread\n+     * @param params\n+     * @return parameter array\n+     */\n+    private Object[] transform(Object[] params) {\n+        if (params == null) {\n+            return null;\n+        }\n+        for (int ii = 0; ii < params.length; ++ii) {\n+            Object param = params[ii];\n+            if (param != null && !param.getClass().equals(String.class)) {", "originalCommit": "3445ae7c3f11bbe06460832843b1acd7a3fe1d75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NjY3MQ==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r540496671", "bodyText": "See if it\u2019s already a string. I could use instanceof String instead I guess", "author": "lprimak", "createdAt": "2020-12-10T21:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MDE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUwMjU5Mg==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r540502592", "bodyText": "I think it is not useful at all. String,toString() returns this, so it is NOOP and the condition just obfuscates code. Or am I missing something?", "author": "sgflt", "createdAt": "2020-12-10T21:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MDE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUwNDQ2MA==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r540504460", "bodyText": "No you are not missing anything. You are right it\u2019s superfluous. I will remove that one", "author": "lprimak", "createdAt": "2020-12-10T21:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MDE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyOTM0Mw==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r540529343", "bodyText": "For example UniformLogFormatter expects in some code paths java.util.Collection or java.util.Map. Now paremeters are just strings so it may require some adjustment of formatters. (or different approach)", "author": "sgflt", "createdAt": "2020-12-10T22:02:31Z", "path": "nucleus/common/common-util/src/main/java/com/sun/common/util/logging/GFLogRecord.java", "diffHunk": "@@ -84,4 +84,25 @@ public String getThreadName() {\n     public void setThreadName(String threadName) {\n         this.threadName = threadName;\n     }\n+\n+    /**\n+     * CUSTOM-55\n+     * in case of an object passed as a parameter, call it's toString() method\n+     * to resolve it's values in the current thread, instead of waiting for queues / et\n+     * so there is no possibility of state change of the object between thread\n+     * @param params\n+     * @return parameter array\n+     */\n+    private Object[] transform(Object[] params) {\n+        if (params == null) {\n+            return null;\n+        }\n+        for (int ii = 0; ii < params.length; ++ii) {\n+            Object param = params[ii];\n+            if (param != null && !param.getClass().equals(String.class)) {\n+                params[ii] = params[ii].toString();", "originalCommit": "3445ae7c3f11bbe06460832843b1acd7a3fe1d75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NzEyMQ==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r540597121", "bodyText": "good catch, fixed", "author": "lprimak", "createdAt": "2020-12-11T00:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyOTM0Mw=="}], "type": "inlineReview"}, {"oid": "a3231dc8fb5b5793e0e9f6b079fbc10bfffd6919", "url": "https://github.com/payara/Payara/commit/a3231dc8fb5b5793e0e9f6b079fbc10bfffd6919", "message": "force toString() during the same thread as the logging happens so objects\ndon't get passed around different threads in logging and have a chance to get\nout of sync and be inconsistent\nAppend true parameters at the end of log record so logging handlers can access them,\nsuch as JSon logger", "committedDate": "2020-12-11T02:08:50Z", "type": "commit"}, {"oid": "a3231dc8fb5b5793e0e9f6b079fbc10bfffd6919", "url": "https://github.com/payara/Payara/commit/a3231dc8fb5b5793e0e9f6b079fbc10bfffd6919", "message": "force toString() during the same thread as the logging happens so objects\ndon't get passed around different threads in logging and have a chance to get\nout of sync and be inconsistent\nAppend true parameters at the end of log record so logging handlers can access them,\nsuch as JSon logger", "committedDate": "2020-12-11T02:08:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2NzIwMg==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r542167202", "bodyText": "I would probably use paramsIndex instead of originalIndex as a name", "author": "dmatej", "createdAt": "2020-12-14T07:35:13Z", "path": "nucleus/common/common-util/src/main/java/com/sun/common/util/logging/GFLogRecord.java", "diffHunk": "@@ -84,4 +84,31 @@ public String getThreadName() {\n     public void setThreadName(String threadName) {\n         this.threadName = threadName;\n     }\n+\n+    /**\n+     * CUSTOM-55\n+     * in case of an object passed as a parameter, call it's toString() method\n+     * to resolve it's values in the current thread, instead of waiting for queues / etc\n+     * so there is no possibility of state change of the object between threads\n+     * Append the original parameters at the end, as they are used for by some logging formatters,\n+     * such as JSON logging formatter for context\n+     *\n+     * @param params\n+     * @return parameter array\n+     */\n+    private Object[] transformParameters(Object[] params) {\n+        if (params == null) {\n+            return null;\n+        }\n+        Object[] result = new Object[params.length * 2];\n+        for (int stringIndex = 0, originalIndex = params.length; stringIndex < params.length;", "originalCommit": "a3231dc8fb5b5793e0e9f6b079fbc10bfffd6919", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1NzA2MQ==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r542557061", "bodyText": "Performance is unaffected because toString() gets called eventually anyway.\nJsonLogFormatIT works because now parameters include both strings and original objects.\nAll that's is original objects so memory consumption has only tiny increase at the end of the day, just due to object array being bigger", "author": "lprimak", "createdAt": "2020-12-14T17:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2NzIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1ODMyMQ==", "url": "https://github.com/payara/Payara/pull/5044#discussion_r542558321", "bodyText": "Also if we would use both SysLogHandler and FileLoggerHandler, GFLogRecord would be created in bot\n\nfixed", "author": "lprimak", "createdAt": "2020-12-14T17:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2NzIwMg=="}], "type": "inlineReview"}, {"oid": "89b4ad7a3acabfe7f6616c91dca32a76a4691d3a", "url": "https://github.com/payara/Payara/commit/89b4ad7a3acabfe7f6616c91dca32a76a4691d3a", "message": "refactored wrapping into GFLogRecord.wrap(), removed possible duplicate LogRecord wrapping\nrenamed index variable to be more descriptive", "committedDate": "2020-12-14T17:36:45Z", "type": "commit"}]}