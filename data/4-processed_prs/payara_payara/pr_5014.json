{"pr_number": 5014, "pr_title": "FISH-791 Update Hazelcast to 4.1, no tenant control", "pr_createdAt": "2020-11-28T06:31:13Z", "pr_url": "https://github.com/payara/Payara/pull/5014", "timeline": [{"oid": "702af0073a00910630e06eb90bd7afd0ad0503f7", "url": "https://github.com/payara/Payara/commit/702af0073a00910630e06eb90bd7afd0ad0503f7", "message": "Disentangled - Upgrade Payara to Hazelcast 4.1", "committedDate": "2020-12-03T19:47:25Z", "type": "forcePushed"}, {"oid": "e70cb90188a3fdb1b37a9c3bac8be36ac05339b0", "url": "https://github.com/payara/Payara/commit/e70cb90188a3fdb1b37a9c3bac8be36ac05339b0", "message": "Disentangled - Upgrade Payara to Hazelcast 4.1", "committedDate": "2020-12-03T22:03:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MTEzNg==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r536261136", "bodyText": "Same recommendations as the other PR. Package needs changing, and to Lombok or not to Lombok", "author": "MattGill98", "createdAt": "2020-12-04T17:31:43Z", "path": "appserver/tests/payara-samples/samples/clustered-singleton/clustered-singleton-test/src/main/java/com/flowlogix/clust/singleton/ClusteredSingletonEjbXml.java", "diffHunk": "@@ -37,24 +37,25 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.hazelcast;\n+package com.flowlogix.clust.singleton;", "originalCommit": "e70cb90188a3fdb1b37a9c3bac8be36ac05339b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MzI0MA==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r536263240", "bodyText": "This will be fixed with the other PR, as you said :)", "author": "lprimak", "createdAt": "2020-12-04T17:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MTEzNg=="}], "type": "inlineReview"}, {"oid": "c6ef8fa7f2474c30eb25fb95aef6018ef167146e", "url": "https://github.com/payara/Payara/commit/c6ef8fa7f2474c30eb25fb95aef6018ef167146e", "message": "Upgrade Payara to Hazelcast 4.1", "committedDate": "2020-12-05T05:37:44Z", "type": "forcePushed"}, {"oid": "fb81c7c8fad74ac0e1acc4a95acecdf294e6330a", "url": "https://github.com/payara/Payara/commit/fb81c7c8fad74ac0e1acc4a95acecdf294e6330a", "message": "Upgrade Payara to Hazelcast 4.1", "committedDate": "2020-12-05T05:43:56Z", "type": "forcePushed"}, {"oid": "f4784f3fa724ce0029c23a7995f31c0b4c6bba5b", "url": "https://github.com/payara/Payara/commit/f4784f3fa724ce0029c23a7995f31c0b4c6bba5b", "message": "Upgrade Payara to Hazelcast 4.1", "committedDate": "2020-12-08T18:10:58Z", "type": "forcePushed"}, {"oid": "9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "url": "https://github.com/payara/Payara/commit/9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "message": "Upgrade Payara to Hazelcast 4.1", "committedDate": "2020-12-08T18:29:14Z", "type": "commit"}, {"oid": "9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "url": "https://github.com/payara/Payara/commit/9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "message": "Upgrade Payara to Hazelcast 4.1", "committedDate": "2020-12-08T18:29:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNTg5Ng==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538735896", "bodyText": "Btw, could you kill all these comments?\n //To change body of generated methods, choose Tools | Templates.", "author": "dmatej", "createdAt": "2020-12-08T19:12:41Z", "path": "appserver/batch/hazelcast-jbatch-store/src/main/java/fish/payara/jbatch/persistence/hazelcast/HazelcastPersistenceService.java", "diffHunk": "@@ -56,8 +56,8 @@ and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n     private IMap jobInstanceMap;\n     private IMap checkpointMAP;\n     private HazelcastInstance theInstance;\n-    private IdGenerator jobInstanceIdGenerator;\n-    private IdGenerator checkpointIdGenerator;\n+    private FlakeIdGenerator jobInstanceIdGenerator;\n+    private FlakeIdGenerator checkpointIdGenerator;", "originalCommit": "9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNzU1MQ==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538737551", "bodyText": "For other reviewers: getIdGenerator is deprecated, this is in it's javadoc:\n\nThe implementation can produce duplicate IDs in case of network split, even with split-brain protection enabled (during short window while split-brain is detected). Use getFlakeIdGenerator(String) for an alternative implementation which does not suffer from this problem.", "author": "dmatej", "createdAt": "2020-12-08T19:15:16Z", "path": "appserver/batch/hazelcast-jbatch-store/src/main/java/fish/payara/jbatch/persistence/hazelcast/HazelcastPersistenceService.java", "diffHunk": "@@ -274,8 +274,8 @@ public void init(IBatchConfig batchConfig) {\n             theInstance = HazelcastInstance.class.cast(ctx.lookup(hazelcastJNDIName));\n             jobInstanceMap = theInstance.getMap(JOB_INSTANCE_MAP);\n             checkpointMAP = theInstance.getMap(CHECKPOINTMAP);\n-            jobInstanceIdGenerator = theInstance.getIdGenerator(JOB_INSTANCE_MAP+\"ID\");\n-            checkpointIdGenerator = theInstance.getIdGenerator(CHECKPOINTMAP + \"ID\");\n+            jobInstanceIdGenerator = theInstance.getFlakeIdGenerator(JOB_INSTANCE_MAP+\"ID\");", "originalCommit": "9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NDg2Ng==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538754866", "bodyText": "Please raise a separate issue for this, as it's out of scope for this PR", "author": "lprimak", "createdAt": "2020-12-08T19:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1Nzc5Nw==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538757797", "bodyText": "It is a misunderstanding, no new issue required, I just explained why you did it ;)", "author": "dmatej", "createdAt": "2020-12-08T19:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk4Njc1MA==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538986750", "bodyText": "oh ok :) I was wondering what's going on, got me confused, so I figured you know what you are talking about :)", "author": "lprimak", "createdAt": "2020-12-09T03:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNzU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczODA1MQ==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538738051", "bodyText": "Again, ILock is deprecated, FencedLock is used instead. Correct.", "author": "dmatej", "createdAt": "2020-12-08T19:16:03Z", "path": "appserver/common/container-common/src/main/java/com/sun/enterprise/container/common/impl/util/ClusteredSingletonLookupImplBase.java", "diffHunk": "@@ -63,7 +63,7 @@\n     private final String keyPrefix;\n     private final String mapKey;\n     private final AtomicReference<String> sessionHzKey = new AtomicReference<>();\n-    private final AtomicReference<ILock> lock = new AtomicReference<>();\n+    private final AtomicReference<FencedLock> lock = new AtomicReference<>();", "originalCommit": "9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0MzU2NQ==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538743565", "bodyText": "Could you move those fields to the beginning of the class?", "author": "dmatej", "createdAt": "2020-12-08T19:24:22Z", "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/cluster/MemberEvent.java", "diffHunk": "@@ -39,31 +39,33 @@\n  */\n package fish.payara.nucleus.cluster;\n \n-import com.hazelcast.core.Member;\n+import com.hazelcast.cluster.Member;\n import fish.payara.nucleus.hazelcast.HazelcastCore;\n+import java.util.UUID;\n \n /**\n  *\n  * @author Steve Millidge (Payara Foundation)\n  */\n public class MemberEvent {\n     \n-    public MemberEvent(Member member) {\n+    public MemberEvent(HazelcastCore hzCore, Member member) {\n+        this.hzCore = hzCore;\n         this.member = member;\n     }\n     \n-    public String getUuid() {\n+    public UUID getUuid() {\n         return member.getUuid();\n     }\n     \n     public String getServer() {\n-        return member.getStringAttribute(HazelcastCore.INSTANCE_ATTRIBUTE);\n+        return hzCore.getAttribute(member.getUuid(), HazelcastCore.INSTANCE_ATTRIBUTE);\n     }\n     \n     public String getServerGroup() {\n-        return member.getStringAttribute(HazelcastCore.INSTANCE_GROUP_ATTRIBUTE);\n+        return member.getAttribute(HazelcastCore.INSTANCE_GROUP_ATTRIBUTE);\n     }\n     \n-    private Member member;\n-    \n+    private final HazelcastCore hzCore;", "originalCommit": "9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NTM5NQ==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538755395", "bodyText": "Out of scope, again", "author": "lprimak", "createdAt": "2020-12-08T19:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0MzU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1ODczNg==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538758736", "bodyText": "Improving code quality by trivial steps is in the scope. But it depends on your decision, I just noticed it ;)", "author": "dmatej", "createdAt": "2020-12-08T19:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0MzU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0ODUwNw==", "url": "https://github.com/payara/Payara/pull/5014#discussion_r538748507", "bodyText": "Ok, seems this is related, it already did not work ...\nhazelcast/hazelcast#11867", "author": "dmatej", "createdAt": "2020-12-08T19:32:01Z", "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/HazelcastCore.java", "diffHunk": "@@ -349,10 +368,7 @@ private Config buildConfiguration() {\n                 config.setLiteMember(Boolean.parseBoolean(nodeConfig.getLite()));\n \n \n-                // set group config\n-                GroupConfig gc = config.getGroupConfig();\n-                gc.setName(configuration.getClusterGroupName());\n-                gc.setPassword(configuration.getClusterGroupPassword());\n+                config.setClusterName(configuration.getClusterGroupName());", "originalCommit": "9fcd8db2b9b707bd1bcb7f953e16036f44cf3453", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}