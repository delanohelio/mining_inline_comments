{"pr_number": 4422, "pr_title": "APPSERV-14 Slow SQL tracing views", "pr_createdAt": "2020-01-10T16:50:14Z", "pr_url": "https://github.com/payara/Payara/pull/4422", "timeline": [{"oid": "8df324d80b0fe65dba596b0c2ffa0ae1bce889bf", "url": "https://github.com/payara/Payara/commit/8df324d80b0fe65dba596b0c2ffa0ae1bce889bf", "message": "APPSERV-14 slow SQL monitoring (incomplete)", "committedDate": "2020-01-08T13:57:47Z", "type": "commit"}, {"oid": "f62cb4142a146841f13f8ae60fe2f8bdbc412adb", "url": "https://github.com/payara/Payara/commit/f62cb4142a146841f13f8ae60fe2f8bdbc412adb", "message": "Merge branch 'master' into APPSERV-14-slow-sql", "committedDate": "2020-01-08T14:14:23Z", "type": "commit"}, {"oid": "a511309c055af6cfe3bdbe4c253f83c69c9317ec", "url": "https://github.com/payara/Payara/commit/a511309c055af6cfe3bdbe4c253f83c69c9317ec", "message": "APPSERV-14 reverts changes to JdbcResourcesUtil.java", "committedDate": "2020-01-08T14:42:53Z", "type": "commit"}, {"oid": "7119b70021a5a9ab314560c69be185050b018689", "url": "https://github.com/payara/Payara/commit/7119b70021a5a9ab314560c69be185050b018689", "message": "APPSERV-11 APPSERV-14 fixed NPE when health check options are not initialised yet", "committedDate": "2020-01-08T15:02:18Z", "type": "commit"}, {"oid": "1908a9d3d10df0fe6ae3d4d0ae8909b3a48046df", "url": "https://github.com/payara/Payara/commit/1908a9d3d10df0fe6ae3d4d0ae8909b3a48046df", "message": "APPSERV-11 APPSERV-14 fixed NPE when health check options are not initialised yet (2)", "committedDate": "2020-01-08T15:08:18Z", "type": "commit"}, {"oid": "d2ab11c5459c3cd0aaa8647e8da0fcf9dc14accd", "url": "https://github.com/payara/Payara/commit/d2ab11c5459c3cd0aaa8647e8da0fcf9dc14accd", "message": "APPSERV-14 SQL max execution time metric and watch per pool", "committedDate": "2020-01-09T15:04:03Z", "type": "commit"}, {"oid": "0161e41f753578d5b657851b1bc1ace4ecee248a", "url": "https://github.com/payara/Payara/commit/0161e41f753578d5b657851b1bc1ace4ecee248a", "message": "APPSERV-14 adds annotations to server and webapp API", "committedDate": "2020-01-10T13:58:21Z", "type": "commit"}, {"oid": "a188f9a9c6325d577ad1ddd5abcf2b065b2a25ea", "url": "https://github.com/payara/Payara/commit/a188f9a9c6325d577ad1ddd5abcf2b065b2a25ea", "message": "APPSERV-14 show all watches and decoration as background area", "committedDate": "2020-01-10T15:39:18Z", "type": "commit"}, {"oid": "c50a42f30dae7286de08e7b7fa477ec52fe485af", "url": "https://github.com/payara/Payara/commit/c50a42f30dae7286de08e7b7fa477ec52fe485af", "message": "APPSERV-14 fixed gradient background for background areas", "committedDate": "2020-01-10T15:49:14Z", "type": "commit"}, {"oid": "3e67faaf9f175cd4ae900a8a3a3768ccb58700b3", "url": "https://github.com/payara/Payara/commit/3e67faaf9f175cd4ae900a8a3a3768ccb58700b3", "message": "APPSERV-14 fixed background area gradient-line alignment", "committedDate": "2020-01-10T16:48:41Z", "type": "commit"}, {"oid": "26c6ccd52f46aaf99154273c75bf359f8be947cd", "url": "https://github.com/payara/Payara/commit/26c6ccd52f46aaf99154273c75bf359f8be947cd", "message": "APPSERV-14 extends alert condition logic and fixes condition formatting", "committedDate": "2020-01-13T09:27:38Z", "type": "commit"}, {"oid": "cc1b94161d772ca0b5c303d0e704e55b308347c7", "url": "https://github.com/payara/Payara/commit/cc1b94161d772ca0b5c303d0e704e55b308347c7", "message": "APPSERV-14 series tag name wildcards", "committedDate": "2020-01-13T10:53:46Z", "type": "commit"}, {"oid": "bbad554175b88d9ae50460aebfd225bf9fdbea1c", "url": "https://github.com/payara/Payara/commit/bbad554175b88d9ae50460aebfd225bf9fdbea1c", "message": "APPSERV-14 fixed series tag name wild-cards", "committedDate": "2020-01-13T11:13:28Z", "type": "commit"}, {"oid": "7308b6fcd3f65433c4bd5c37503835a8b12d2279", "url": "https://github.com/payara/Payara/commit/7308b6fcd3f65433c4bd5c37503835a8b12d2279", "message": "APPSERV-14 completes annotations in alert tables", "committedDate": "2020-01-13T14:07:36Z", "type": "commit"}, {"oid": "bd038ee4a2d1870b121da8a79bba34c91c167050", "url": "https://github.com/payara/Payara/commit/bd038ee4a2d1870b121da8a79bba34c91c167050", "message": "APPSERV-14 alarm annotations via AnnotationTable component", "committedDate": "2020-01-13T17:35:47Z", "type": "commit"}, {"oid": "0044aa4522a6ebb5116f80488d78c9e232774be2", "url": "https://github.com/payara/Payara/commit/0044aa4522a6ebb5116f80488d78c9e232774be2", "message": "APPSERV-14 annotation fields setting; fixed: alert starts ends on cause data", "committedDate": "2020-01-14T10:16:46Z", "type": "commit"}, {"oid": "24dc17abf03cc89e6ae4d4a88c1b2fe5e7a23c4d", "url": "https://github.com/payara/Payara/commit/24dc17abf03cc89e6ae4d4a88c1b2fe5e7a23c4d", "message": "APPSERV-14 basic annotations table widget type", "committedDate": "2020-01-14T12:24:32Z", "type": "commit"}, {"oid": "fbfddf3e9e1c9ba32cd4aba0880a7d49a42c424d", "url": "https://github.com/payara/Payara/commit/fbfddf3e9e1c9ba32cd4aba0880a7d49a42c424d", "message": "APPSERV-14 annotation list and table", "committedDate": "2020-01-14T14:38:05Z", "type": "commit"}, {"oid": "415ad98655bd0f172f14eaca22907ffff4beb243", "url": "https://github.com/payara/Payara/commit/415ad98655bd0f172f14eaca22907ffff4beb243", "message": "APPSERV-14 fixed: do not show alerts for widget type annotation", "committedDate": "2020-01-14T14:53:42Z", "type": "commit"}, {"oid": "c9c0a648780badcb5388a3eeb7d5a911e994fc79", "url": "https://github.com/payara/Payara/commit/c9c0a648780badcb5388a3eeb7d5a911e994fc79", "message": "APPSERV-14 fixed CSS for annotation table font size", "committedDate": "2020-01-14T15:11:27Z", "type": "commit"}, {"oid": "d1204fa84161fa42a375a281683f58212f28ab93", "url": "https://github.com/payara/Payara/commit/d1204fa84161fa42a375a281683f58212f28ab93", "message": "APPSERV-14 adds widgets unique ids on page; adds SQL page preset", "committedDate": "2020-01-14T17:02:06Z", "type": "commit"}, {"oid": "da0b1adc9eefdb5d839f73d4c71f131b3948f76d", "url": "https://github.com/payara/Payara/commit/da0b1adc9eefdb5d839f73d4c71f131b3948f76d", "message": "APPSERV-14 SQL page details and styling", "committedDate": "2020-01-14T18:49:19Z", "type": "commit"}, {"oid": "b6031a5fd587239251c5be596fa2fb6dd49cf609", "url": "https://github.com/payara/Payara/commit/b6031a5fd587239251c5be596fa2fb6dd49cf609", "message": "APPSERV-14 restrict client-server data exchange to needed data for widget type; add instance coloring to annotation table with widget type specific legend", "committedDate": "2020-01-15T10:18:15Z", "type": "commit"}, {"oid": "029bd9f837ac1a73cca7a3daeabac89a9d567d4c", "url": "https://github.com/payara/Payara/commit/029bd9f837ac1a73cca7a3daeabac89a9d567d4c", "message": "APPSERV-14 adds request tracing watch and annotations", "committedDate": "2020-01-15T13:22:41Z", "type": "commit"}, {"oid": "7d0fb4ab37c09c01523a2335bd9446f813f462e0", "url": "https://github.com/payara/Payara/commit/7d0fb4ab37c09c01523a2335bd9446f813f462e0", "message": "APPSERV-14 scroll vertical when alerts or annotations list overflows; adds Alerts page preset", "committedDate": "2020-01-15T13:51:13Z", "type": "commit"}, {"oid": "03d32de4a514175520af8a012617605d1e3d8626", "url": "https://github.com/payara/Payara/commit/03d32de4a514175520af8a012617605d1e3d8626", "message": "APPSERV-14 fixes request tracing metric clears alerts properly", "committedDate": "2020-01-15T14:31:59Z", "type": "commit"}, {"oid": "15a6300ecd360ddd22abdbbcfea28a42c4a3759e", "url": "https://github.com/payara/Payara/commit/15a6300ecd360ddd22abdbbcfea28a42c4a3759e", "message": "APPSERV-14 adds coloring dependent legend for annotation tables and lists", "committedDate": "2020-01-15T14:32:30Z", "type": "commit"}, {"oid": "ac417d7d91ac2424fa09417cc0064ace27ec94c8", "url": "https://github.com/payara/Payara/commit/ac417d7d91ac2424fa09417cc0064ace27ec94c8", "message": "APPSERV-14 adds alert frame compaction; fixes annotation widget legend for undefined coloring", "committedDate": "2020-01-15T17:04:54Z", "type": "commit"}, {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "url": "https://github.com/payara/Payara/commit/9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "message": "Merge branch 'master' into APPSERV-14-slow-sql", "committedDate": "2020-01-17T10:50:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3NzkwMg==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367877902", "bodyText": "NB. This was not needed and even could cause outdated threshold to be used as listeners installed will not be replaced when a listener of same class is attempted to be installed again (which would happen later when a connection is created).", "author": "jbee", "createdAt": "2020-01-17T10:54:32Z", "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/com/sun/gjc/spi/ManagedConnectionFactoryImpl.java", "diffHunk": "@@ -1199,22 +1197,21 @@ public void setSqlTraceListeners(String sqlTraceListeners) {\n             detectSqlTraceListeners();\n         }\n     }\n-    \n+\n     public void setSlowQueryThresholdInSeconds(String seconds) {\n         spec.setDetail(DataSourceSpec.SLOWSQLLOGTHRESHOLD, seconds);\n         double threshold = Double.parseDouble(seconds);\n         if (threshold > 0) {\n             if (sqlTraceDelegator == null) {\n                 sqlTraceDelegator = new SQLTraceDelegator(getPoolName(), getApplicationName(), getModuleName());\n             }\n-            sqlTraceDelegator.registerSQLTraceListener(new SlowSQLLogger((long)(threshold * 1000), TimeUnit.MILLISECONDS));", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3OTg4MA==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367879880", "bodyText": "NB. isSlowQueryLoggingEnabled includes the null check.", "author": "jbee", "createdAt": "2020-01-17T10:58:57Z", "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/com/sun/gjc/spi/ManagedConnectionImpl.java", "diffHunk": "@@ -506,7 +511,7 @@ public Object getConnection(Subject sub, javax.resource.spi.ConnectionRequestInf\n         \n         if (sqlTraceDelegator == null) {\n             if ((requestTracing != null && requestTracing.isRequestTracingEnabled())\n-                    || (connectionPool != null && isSlowQueryLoggingEnabled())) {\n+                    || (isSlowQueryLoggingEnabled())) {", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDk4OQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367880989", "bodyText": "NB. Sadly this cannot share code with SQLTraceLogger which does almost the same as this has to be its own thread local otherwise the manipulation of the query happens multiple times if both listeners are installed which messes up the query.", "author": "jbee", "createdAt": "2020-01-17T11:01:16Z", "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import org.glassfish.api.jdbc.SQLTraceListener;\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.internal.api.Globals;\n+\n+/**\n+ * An adapter between the {@link SQLTraceListener} abstraction that is registered with implementation class as key and a\n+ * managed instance of the {@link SQLTraceStore}.\n+ * \n+ * @author Jan Bernitt\n+ */\n+public class SQLTraceStoreAdapter implements SQLTraceListener {\n+\n+    private static ThreadLocal<SQLQuery> currentQuery = new ThreadLocal<>();", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzA5MQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367917091", "bodyText": "Might be worth adding a simplified version of this comment to the code", "author": "Pandrex247", "createdAt": "2020-01-17T12:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MjI2OA==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367882268", "bodyText": "NB. Most interesting part is the class location. It had to be in a module that supports HK2 stuff and which ideally already depends on modules dealing with SQL tracing.", "author": "jbee", "createdAt": "2020-01-17T11:03:55Z", "path": "appserver/jdbc/jdbc-runtime/src/main/java/fish/payara/jdbc/SQLTraceStoreImpl.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.lang.Math.round;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.jdbc.config.JdbcConnectionPool;\n+import org.jvnet.hk2.annotations.Service;\n+\n+import com.sun.appserv.connectors.internal.api.ConnectorsUtil;\n+import com.sun.enterprise.config.serverbeans.Domain;\n+import com.sun.enterprise.config.serverbeans.ResourcePool;\n+\n+import fish.payara.monitoring.collect.MonitoringData;\n+import fish.payara.monitoring.collect.MonitoringDataCollector;\n+import fish.payara.monitoring.collect.MonitoringDataSource;\n+import fish.payara.monitoring.collect.MonitoringWatchCollector;\n+import fish.payara.monitoring.collect.MonitoringWatchSource;\n+\n+@Service\n+@Singleton\n+public class SQLTraceStoreImpl implements SQLTraceStore, MonitoringDataSource, MonitoringWatchSource {", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MzQwNg==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367883406", "bodyText": "NB. The watch for a metric provided by InMemoryMonitoringDataRepository had to be added here as this would otherwise cause a cyclic dependency between the two.", "author": "jbee", "createdAt": "2020-01-17T11:06:46Z", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/store/InMemoryAlarmService.java", "diffHunk": "@@ -108,11 +108,14 @@\n     public void init() {\n         isDas = serverEnv.isDas();\n         changedConfig(parseBoolean(serverConfig.getMonitoringService().getMonitoringEnabled()));\n-        Watch watch = new Watch(\"Metric Collection Duration\", new Metric(new Series(\"ns:monitoring CollectionDuration\")))\n-                .red(800L, 3, true, 800L, 5, false)\n-                .amber(600L, 3, true, 600L, 5, false)\n-                .green(-400L, 1, false, null, null, false);\n-        addWatch(watch);\n+        addWatch(new Watch(\"Metric Collection Duration\", new Metric(new Series(\"ns:monitoring CollectionDuration\")))", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDU3NQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367884575", "bodyText": "NB. Initially I thought evaluating alerts every two seconds is good enough. While this is true in general this does allow to miss value spikes that should cause an alert in case of most basic condition that only looks at the latest value. So it was changed to 1 second to make sure each value is considered.", "author": "jbee", "createdAt": "2020-01-17T11:09:56Z", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/store/InMemoryAlarmService.java", "diffHunk": "@@ -123,12 +126,12 @@ void changedConfig(boolean enabled) {\n         if (!enabled) {\n             checker.stop();\n         } else {\n-            checker.start(executor, 2, SECONDS, this::checkWatches);\n+            checker.start(executor, 1, SECONDS, this::checkWatches);", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4Njg3Nw==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367886877", "bodyText": "NB. Main reason this interface is needed is because of module dependencies.", "author": "jbee", "createdAt": "2020-01-17T11:16:16Z", "path": "nucleus/common/glassfish-api/src/main/java/org/glassfish/api/jdbc/SQLTraceStore.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.api.jdbc;\n+\n+import org.jvnet.hk2.annotations.Contract;\n+\n+@Contract\n+public interface SQLTraceStore {", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4Nzk5Mg==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367887992", "bodyText": "NB. It was a bug to not return this for any of the methods of MonitoringDataCollector because when the instance is used with chaining it should be the wrapper that is called (so it does its prefix thing), not the instance returned by self (that would not do the prefix thing). In practice this bug never had an effect as the only usage would not use chaining but for future this now works properly.", "author": "jbee", "createdAt": "2020-01-17T11:19:14Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/monitoring/collect/MonitoringDataCollector.java", "diffHunk": "@@ -88,14 +109,26 @@ default MonitoringDataCollector prefix(CharSequence prefix) {\n         MonitoringDataCollector self = this;\n         return new MonitoringDataCollector() {\n \n+            StringBuilder prefixed = new StringBuilder(prefix);\n+\n             @Override\n             public MonitoringDataCollector tag(CharSequence name, CharSequence value) {\n-                return self.tag(name, value);\n+                self.tag(name, value);\n+                return this;\n+            }\n+\n+            @Override\n+            public MonitoringDataCollector collect(CharSequence metric, long value) {\n+                prefixed.setLength(prefix.length());\n+                self.collect(prefixed.append(metric), value);\n+                return this;\n             }\n \n             @Override\n-            public MonitoringDataCollector collect(CharSequence key, long value) {\n-                return self.collect(new StringBuilder(prefix).append(key), value);\n+            public MonitoringDataCollector annotate(CharSequence metric, long value, String... attrs) {\n+                prefixed.setLength(prefix.length());\n+                self.annotate(prefixed.append(metric), value, attrs);\n+                return this;", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODQyOQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367888429", "bodyText": "NB. 10 turned out to be too flaky so I increased it.", "author": "jbee", "createdAt": "2020-01-17T11:20:20Z", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/HeapMemoryUsageHealthCheck.java", "diffHunk": "@@ -102,7 +102,7 @@ private static MemoryUsage getMemoryUsage() {\n \n     @Override\n     public void collect(MonitoringWatchCollector collector) {\n-        collectUsage(collector, \"ns:health HeapUsage\", \"Heap Usage\", 10, true);", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzU5Nw==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367917597", "bodyText": "Minor point: this comment seems to be floating in space a bit", "author": "Pandrex247", "createdAt": "2020-01-17T12:44:00Z", "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import org.glassfish.api.jdbc.SQLTraceListener;\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.internal.api.Globals;\n+\n+/**\n+ * An adapter between the {@link SQLTraceListener} abstraction that is registered with implementation class as key and a\n+ * managed instance of the {@link SQLTraceStore}.\n+ * \n+ * @author Jan Bernitt\n+ */\n+public class SQLTraceStoreAdapter implements SQLTraceListener {\n+\n+    private static ThreadLocal<SQLQuery> currentQuery = new ThreadLocal<>();\n+\n+    private final SQLTraceStore store;\n+\n+    public SQLTraceStoreAdapter() {\n+        this.store = Globals.getDefaultHabitat().getService(SQLTraceStore.class);\n+    }\n+\n+    @Override\n+    public void sqlTrace(SQLTraceRecord record) {\n+        if (record != null) {    \n+            switch (record.getMethodName()) {\n+\n+            // these calls capture a query string\n+            case \"nativeSQL\":\n+            case \"prepareCall\":\n+            case \"prepareStatement\":\n+            case \"addBatch\":\n+            {\n+                // acquire the SQL\n+                SQLQuery query = currentQuery.get();\n+                if (query == null) {\n+                    query = new SQLQuery();\n+                    currentQuery.set(query);\n+                }  \n+                if (record.getParams() != null && record.getParams().length > 0)\n+                    query.addSQL((String)record.getParams()[0]);\n+                break;\n+            }\n+            case \"execute\":\n+            case \"executeQuery\":\n+            case \"executeUpdate\":\n+            {\n+                // acquire the SQL\n+                SQLQuery query = currentQuery.get();\n+                if (query == null) {\n+                    query = new SQLQuery();\n+                    currentQuery.set(query);\n+                }                      // these can all run the SQL and contain SQL", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAzOQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368021039", "bodyText": "Personally I prefer Bean style: private fields with getters & setters.", "author": "Pandrex247", "createdAt": "2020-01-17T16:22:37Z", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.model;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+/**\n+ * An {@link SeriesAnnotation} is meta data linked to a {@link SeriesDataset} by having the same {@link Series} and\n+ * {@link #instance} and pointing to a {@link #time} that is in the range of {@link SeriesDataset}.\n+ * \n+ * The meta data attached is a list of key-value pairs.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.201\n+ */\n+public final class SeriesAnnotation implements Serializable {\n+\n+    public final long time;", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzODQ0OQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368038449", "bodyText": "So only with getter here, because it is final.\nBtw I use public final fields only in extremely short private classes, ie. value objects with multiple fields.", "author": "dmatej", "createdAt": "2020-01-17T16:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MDUwMg==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368070502", "bodyText": "I prefer less code and a getter for an immutable final field seems to me has no benefit and only costs but I can bring myself to add one anyway and call it a sacrifice for \"consistency\" and (other readers) \"readability\"  :D", "author": "jbee", "createdAt": "2020-01-17T18:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzE3MQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368027171", "bodyText": "Reason there is for Yoda-style? <(\u00b0.\u00b0)>", "author": "Pandrex247", "createdAt": "2020-01-17T16:34:47Z", "path": "nucleus/payara-modules/requesttracing-core/src/main/java/fish/payara/nucleus/requesttracing/RequestTracingService.java", "diffHunk": "@@ -563,26 +574,70 @@ public RequestTraceStoreInterface getRequestTraceStore() {\n     }\n \n     @Override\n-    public void collect(MonitoringDataCollector rootCollector) {\n-        MonitoringDataCollector tracingCollector = rootCollector.in(\"trace\");\n+    public void collect(MonitoringWatchCollector collector) {\n+        if (\"true\".equals(configuration.getEnabled())) {", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzODAxMQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368038011", "bodyText": "It is nullsafe and despite thera are two groups of developers, I like this more :D", "author": "dmatej", "createdAt": "2020-01-17T16:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTcxMg==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368065712", "bodyText": "yes, its null safe, in contrast to someVar.equals(\"stringConstant\")", "author": "jbee", "createdAt": "2020-01-17T18:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTU4Mg==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368031582", "bodyText": "\ud83d\udc4c", "author": "Pandrex247", "createdAt": "2020-01-17T16:43:55Z", "path": "appserver/monitoring-console/webapp/JS_DOCS.md", "diffHunk": "@@ -267,7 +316,7 @@ Mandatory members of `ENTRY` depend on `type` member. Variants are:\n 'text'     : { label, value, onChange }\n 'color'    : { label, value, defaultValue, onChange }\n ```\n-* `onChange` may be ommitted for _text_ inputs which makes the field _readonly_.\n+* `onChange` may be omitted for _text_ inputs which makes the field _readonly_.", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "49da5fa161f554f50678104dec3a121fe4125ebb", "url": "https://github.com/payara/Payara/commit/49da5fa161f554f50678104dec3a121fe4125ebb", "message": "APPSERV-14 addressed Andrew's comments", "committedDate": "2020-01-22T12:15:22Z", "type": "commit"}, {"oid": "46aaca97fbcec018ec1f16f05121f2b47a0e0fba", "url": "https://github.com/payara/Payara/commit/46aaca97fbcec018ec1f16f05121f2b47a0e0fba", "message": "APPSERV-14 fixed possible memory leak in case monitoring is disabled", "committedDate": "2020-01-22T13:06:47Z", "type": "commit"}]}