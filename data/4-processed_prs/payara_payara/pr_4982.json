{"pr_number": 4982, "pr_title": "FISH-338 Create HashiCorp MicroProfile Config Source", "pr_createdAt": "2020-11-04T17:58:55Z", "pr_url": "https://github.com/payara/Payara/pull/4982", "timeline": [{"oid": "6cc28aecccf1133894ca9e5a93198c4747a9ef1f", "url": "https://github.com/payara/Payara/commit/6cc28aecccf1133894ca9e5a93198c4747a9ef1f", "message": "FISH-338 Implement HashiCrop MicroProfile Config Source", "committedDate": "2020-11-04T17:55:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIzNDk4MQ==", "url": "https://github.com/payara/Payara/pull/4982#discussion_r521234981", "bodyText": "Shouldn't this at least log a warning or something?", "author": "jbee", "createdAt": "2020-11-11T09:42:44Z", "path": "appserver/payara-appserver-modules/microprofile/config-extensions/src/main/java/fish/payara/microprofile/config/extensions/hashicrop/HashiCropSecretsConfigSource.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.config.extensions.hashicrop;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.json.Json;\n+import javax.json.JsonException;\n+import javax.json.stream.JsonParser;\n+import javax.json.stream.JsonParser.Event;\n+import javax.ws.rs.ProcessingException;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.glassfish.config.support.TranslatedConfigView;\n+import org.jvnet.hk2.annotations.Service;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import fish.payara.microprofile.config.extensions.hashicrop.model.SecretHolder;\n+import fish.payara.nucleus.microprofile.config.source.extension.ConfiguredExtensionConfigSource;\n+\n+@Service(name = \"hashicrop-secrets-config-source\")\n+public class HashiCropSecretsConfigSource extends ConfiguredExtensionConfigSource<HashiCropSecretsConfigSourceConfiguration> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(HashiCropSecretsConfigSource.class.getName());\n+\n+    private Client client = ClientBuilder.newClient();\n+    private String hashiCropVaultToken;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void bootstrap() {\n+        try {\n+            // Get the HashiCrop Vault token.\n+            hashiCropVaultToken = TranslatedConfigView.getRealPasswordFromAlias(\"${ALIAS=HASHICROP_VAULT_TOKEN}\");\n+        } catch (KeyStoreException | CertificateException | IOException | NoSuchAlgorithmException | UnrecoverableKeyException ex) {\n+            LOGGER.log(Level.WARNING, \"Unable to get value from password aliases\", ex);\n+\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> getProperties() {\n+        Map<String, String> results = new HashMap<>();\n+\n+        if (hashiCropVaultToken == null) {\n+            printMisconfigurationMessage();\n+            return results;\n+        }\n+\n+        final WebTarget secretsTarget = client\n+                .target(configuration.getVaultAddress());\n+\n+        final Response secretsResponse = secretsTarget\n+                .request()\n+                .accept(MediaType.APPLICATION_JSON)\n+                .header(\"Authorization\", \"Bearer \" + hashiCropVaultToken)\n+                .get();\n+\n+        if (secretsResponse.getStatus() != 200) {\n+            return results;", "originalCommit": "6cc28aecccf1133894ca9e5a93198c4747a9ef1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIzNzA1MQ==", "url": "https://github.com/payara/Payara/pull/4982#discussion_r521237051", "bodyText": "Given the data is fetched and parsed each time getValue or getProperties is called I wonder how expensive this call is assumed to be. As MP config is now cached in general we do have some room but we should be considerate with the costs of a lookup as there can be many of these happening all the time.", "author": "jbee", "createdAt": "2020-11-11T09:46:18Z", "path": "appserver/payara-appserver-modules/microprofile/config-extensions/src/main/java/fish/payara/microprofile/config/extensions/hashicrop/HashiCropSecretsConfigSource.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.config.extensions.hashicrop;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.json.Json;\n+import javax.json.JsonException;\n+import javax.json.stream.JsonParser;\n+import javax.json.stream.JsonParser.Event;\n+import javax.ws.rs.ProcessingException;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.glassfish.config.support.TranslatedConfigView;\n+import org.jvnet.hk2.annotations.Service;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import fish.payara.microprofile.config.extensions.hashicrop.model.SecretHolder;\n+import fish.payara.nucleus.microprofile.config.source.extension.ConfiguredExtensionConfigSource;\n+\n+@Service(name = \"hashicrop-secrets-config-source\")\n+public class HashiCropSecretsConfigSource extends ConfiguredExtensionConfigSource<HashiCropSecretsConfigSourceConfiguration> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(HashiCropSecretsConfigSource.class.getName());\n+\n+    private Client client = ClientBuilder.newClient();\n+    private String hashiCropVaultToken;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void bootstrap() {\n+        try {\n+            // Get the HashiCrop Vault token.\n+            hashiCropVaultToken = TranslatedConfigView.getRealPasswordFromAlias(\"${ALIAS=HASHICROP_VAULT_TOKEN}\");\n+        } catch (KeyStoreException | CertificateException | IOException | NoSuchAlgorithmException | UnrecoverableKeyException ex) {\n+            LOGGER.log(Level.WARNING, \"Unable to get value from password aliases\", ex);\n+\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> getProperties() {\n+        Map<String, String> results = new HashMap<>();\n+\n+        if (hashiCropVaultToken == null) {\n+            printMisconfigurationMessage();\n+            return results;\n+        }\n+\n+        final WebTarget secretsTarget = client\n+                .target(configuration.getVaultAddress());\n+\n+        final Response secretsResponse = secretsTarget\n+                .request()\n+                .accept(MediaType.APPLICATION_JSON)\n+                .header(\"Authorization\", \"Bearer \" + hashiCropVaultToken)\n+                .get();\n+\n+        if (secretsResponse.getStatus() != 200) {\n+            return results;\n+        }\n+\n+        try {\n+            final String secretString = readSecretString((InputStream) secretsResponse.getEntity());\n+\n+            try (final StringReader reader = new StringReader(secretString)) {\n+                return readMap(reader);\n+            }\n+        } catch (ProcessingException | JsonException | IOException ex) {\n+            LOGGER.log(Level.WARNING, \"Unable to read secret value\", ex);\n+        }\n+\n+        return results;\n+    }\n+\n+    @Override\n+    public String getValue(String propertyName) {\n+        if (hashiCropVaultToken == null) {\n+            printMisconfigurationMessage();\n+            return null;\n+        }\n+        return getProperties().get(propertyName);", "originalCommit": "6cc28aecccf1133894ca9e5a93198c4747a9ef1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NTE5MQ==", "url": "https://github.com/payara/Payara/pull/4982#discussion_r522985191", "bodyText": "@jbee, would you be able to raise a JIRA for this issue as this will need to be changed in multiple other config sources.", "author": "MeroRai", "createdAt": "2020-11-13T14:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIzNzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzMjU3Ng==", "url": "https://github.com/payara/Payara/pull/4982#discussion_r523032576", "bodyText": "Created FISH-756", "author": "jbee", "createdAt": "2020-11-13T15:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIzNzA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDUxMQ==", "url": "https://github.com/payara/Payara/pull/4982#discussion_r521264511", "bodyText": "A comment explaining why this wrapper is used would be nice.", "author": "jbee", "createdAt": "2020-11-11T10:33:57Z", "path": "appserver/payara-appserver-modules/microprofile/config-extensions/src/main/java/fish/payara/microprofile/config/extensions/hashicrop/model/SecretHolder.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.config.extensions.hashicrop.model;\n+\n+import java.util.Map;\n+\n+public class SecretHolder {", "originalCommit": "6cc28aecccf1133894ca9e5a93198c4747a9ef1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e699b7bdeb0db3d6f4da3bd7baaa3d03a5049786", "url": "https://github.com/payara/Payara/commit/e699b7bdeb0db3d6f4da3bd7baaa3d03a5049786", "message": "Fixed a bug in admin console and added log message.", "committedDate": "2020-11-14T17:59:43Z", "type": "commit"}, {"oid": "e9a5e5769d3cd1217bb80c368456fff428515f45", "url": "https://github.com/payara/Payara/commit/e9a5e5769d3cd1217bb80c368456fff428515f45", "message": "FISH-338 Fixed Typos", "committedDate": "2020-11-15T00:49:47Z", "type": "commit"}, {"oid": "52ea42767b29dfd7e6572e352f0aeb60c8e72825", "url": "https://github.com/payara/Payara/commit/52ea42767b29dfd7e6572e352f0aeb60c8e72825", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-338", "committedDate": "2020-11-16T13:17:18Z", "type": "commit"}, {"oid": "899a29bc783e254bd2866ce05bc1bf351f455745", "url": "https://github.com/payara/Payara/commit/899a29bc783e254bd2866ce05bc1bf351f455745", "message": "FISH-338 add action report to the HashiCorp Config Source", "committedDate": "2020-11-16T14:19:00Z", "type": "commit"}, {"oid": "6a7e9af6792442ef73afc5b0790845d49fc6998e", "url": "https://github.com/payara/Payara/commit/6a7e9af6792442ef73afc5b0790845d49fc6998e", "message": "FISH-338 Write Hashicorp Test\n\nFix deserialisation error and write test for fetching properties from\nthe config source.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-11-20T00:05:03Z", "type": "commit"}, {"oid": "418be8231fabecda9a24c87c089ce582847bb004", "url": "https://github.com/payara/Payara/commit/418be8231fabecda9a24c87c089ce582847bb004", "message": "FISH-338 Added support for both version of KV Secrets Engine API", "committedDate": "2020-11-20T00:05:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxNzU4MQ==", "url": "https://github.com/payara/Payara/pull/4982#discussion_r527617581", "bodyText": "This line is confusing as a user. Should the path include the /data for a v2 API? Should it include the /kv? If this feature only supports KV stores I'd like to see that taken. I'd like this cleared up and explained in the admin console. Also I'd like to see failed responses log the endpoint that is actually called so they can debug it", "author": "MattGill98", "createdAt": "2020-11-20T11:04:51Z", "path": "appserver/payara-appserver-modules/microprofile/config-extensions/src/main/java/fish/payara/microprofile/config/extensions/hashicorp/HashiCorpSecretsConfigSource.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.config.extensions.hashicorp;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.json.Json;\n+import javax.json.JsonException;\n+import javax.json.stream.JsonParser;\n+import javax.json.stream.JsonParser.Event;\n+import javax.ws.rs.ProcessingException;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.glassfish.config.support.TranslatedConfigView;\n+import org.jvnet.hk2.annotations.Service;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import fish.payara.microprofile.config.extensions.hashicorp.model.SecretHolder;\n+import fish.payara.nucleus.microprofile.config.source.extension.ConfiguredExtensionConfigSource;\n+\n+@Service(name = \"hashicorp-secrets-config-source\")\n+public class HashiCorpSecretsConfigSource extends ConfiguredExtensionConfigSource<HashiCorpSecretsConfigSourceConfiguration> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(HashiCorpSecretsConfigSource.class.getName());\n+\n+    private Client client = ClientBuilder.newClient();\n+    protected String hashiCorpVaultToken;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void bootstrap() {\n+        try {\n+            // Get the HashiCorp Vault token.\n+            hashiCorpVaultToken = TranslatedConfigView.getRealPasswordFromAlias(\"${ALIAS=HASHICORP_VAULT_TOKEN}\");\n+        } catch (KeyStoreException | CertificateException | IOException | NoSuchAlgorithmException | UnrecoverableKeyException ex) {\n+            LOGGER.log(Level.WARNING, \"Unable to get value from password aliases\", ex);\n+\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> getProperties() {\n+        Map<String, String> results = new HashMap<>();\n+\n+        if (hashiCorpVaultToken == null) {\n+            printMisconfigurationMessage();\n+            return results;\n+        }\n+\n+        final WebTarget secretsTarget = client\n+                .target(configuration.getVaultAddress() + \"/v1\" + configuration.getPath());", "originalCommit": "418be8231fabecda9a24c87c089ce582847bb004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e664d2518b70c1dfeed23995bb4b1c05d556dcba", "url": "https://github.com/payara/Payara/commit/e664d2518b70c1dfeed23995bb4b1c05d556dcba", "message": "Add two new options to HashiCorp config source to allow a user to set Secrets Engine path and Secrets path.", "committedDate": "2020-11-20T17:05:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0MTM2Ng==", "url": "https://github.com/payara/Payara/pull/4982#discussion_r529341366", "bodyText": "Each method needs a null check to see if the other parameters are null", "author": "MattGill98", "createdAt": "2020-11-24T09:26:08Z", "path": "appserver/payara-appserver-modules/microprofile/config-extensions/src/main/java/fish/payara/microprofile/config/extensions/hashicorp/HashiCorpSecretsConfigSource.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.config.extensions.hashicorp;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.json.Json;\n+import javax.json.JsonException;\n+import javax.json.stream.JsonParser;\n+import javax.json.stream.JsonParser.Event;\n+import javax.ws.rs.ProcessingException;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.glassfish.config.support.TranslatedConfigView;\n+import org.jvnet.hk2.annotations.Service;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import fish.payara.microprofile.config.extensions.hashicorp.model.SecretHolder;\n+import fish.payara.nucleus.microprofile.config.source.extension.ConfiguredExtensionConfigSource;\n+\n+@Service(name = \"hashicorp-secrets-config-source\")\n+public class HashiCorpSecretsConfigSource extends ConfiguredExtensionConfigSource<HashiCorpSecretsConfigSourceConfiguration> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(HashiCorpSecretsConfigSource.class.getName());\n+\n+    private Client client = ClientBuilder.newClient();\n+    protected String hashiCorpVaultToken;\n+    protected String vaultAddress;\n+    protected String secretsEnginePath;\n+    protected String secretsPath;\n+    protected int apiVersion;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void bootstrap() {\n+        try {\n+            // Get the HashiCorp Vault token.\n+            hashiCorpVaultToken = TranslatedConfigView.getRealPasswordFromAlias(\"${ALIAS=HASHICORP_VAULT_TOKEN}\");\n+            vaultAddress = removeForwardSlashFromSuffixAndPrefix(configuration.getVaultAddress());\n+            secretsEnginePath = removeForwardSlashFromSuffixAndPrefix(configuration.getSecretsEnginePath());\n+            secretsPath = removeForwardSlashFromSuffixAndPrefix(configuration.getSecretsPath());\n+            apiVersion = Integer.parseInt(configuration.getApiVersion());\n+        } catch (KeyStoreException | CertificateException | IOException | NoSuchAlgorithmException | UnrecoverableKeyException ex) {\n+            LOGGER.log(Level.WARNING, \"Unable to get value from password aliases\", ex);\n+\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> getProperties() {\n+        Map<String, String> results = new HashMap<>();\n+\n+        if (hashiCorpVaultToken == null) {\n+            printMisconfigurationMessage();\n+            return results;\n+        }\n+", "originalCommit": "e664d2518b70c1dfeed23995bb4b1c05d556dcba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}