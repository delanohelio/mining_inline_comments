{"pr_number": 122, "pr_title": "Dev 1133", "pr_createdAt": "2020-02-06T23:21:18Z", "pr_url": "https://github.com/hartwigmedical/pipeline5/pull/122", "timeline": [{"oid": "0d54a4f0bbcdb7e5a2b640a6e318a4c75614a251", "url": "https://github.com/hartwigmedical/pipeline5/commit/0d54a4f0bbcdb7e5a2b640a6e318a4c75614a251", "message": "DEV-1133: Make max heap size a parameter", "committedDate": "2020-02-04T23:49:35Z", "type": "commit"}, {"oid": "850a2e110c376dad07364866a9948056adc6d0ae", "url": "https://github.com/hartwigmedical/pipeline5/commit/850a2e110c376dad07364866a9948056adc6d0ae", "message": "DEV-1133: Rename old sage commands to have hotspot in them", "committedDate": "2020-02-04T23:50:59Z", "type": "commit"}, {"oid": "ae77856b59144a3ab64cf16ea5bf642233a128b3", "url": "https://github.com/hartwigmedical/pipeline5/commit/ae77856b59144a3ab64cf16ea5bf642233a128b3", "message": "DEV-1133: Add new applications and commands", "committedDate": "2020-02-05T23:45:44Z", "type": "commit"}, {"oid": "dddc336e9ab86a2b4a0a5010b710c2608b1800fe", "url": "https://github.com/hartwigmedical/pipeline5/commit/dddc336e9ab86a2b4a0a5010b710c2608b1800fe", "message": "DEV-1133: Add new bcf tools builder", "committedDate": "2020-02-06T21:20:01Z", "type": "commit"}, {"oid": "d83fe6459eec3b2bfbe6665047242e29e7857aa8", "url": "https://github.com/hartwigmedical/pipeline5/commit/d83fe6459eec3b2bfbe6665047242e29e7857aa8", "message": "DEV-1133: Add SageV2 in parallel with strelka", "committedDate": "2020-02-06T22:57:48Z", "type": "commit"}, {"oid": "d8f392e62eaf8886d160ded4d4e9601dc06556b7", "url": "https://github.com/hartwigmedical/pipeline5/commit/d8f392e62eaf8886d160ded4d4e9601dc06556b7", "message": "DEV-1133: Rename reportable output (in anticipation of germline sage)", "committedDate": "2020-02-07T03:53:02Z", "type": "commit"}, {"oid": "7b006d02f21f08cb76a4133531f63474c04ad677", "url": "https://github.com/hartwigmedical/pipeline5/commit/7b006d02f21f08cb76a4133531f63474c04ad677", "message": "DEV-1133: Apply SAGE_PON filter for more than 2 reads except in hotspots where it should be more than 9", "committedDate": "2020-02-07T07:10:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwOTUyOA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376509528", "bodyText": "unacceptable", "author": "pauldwolfe", "createdAt": "2020-02-07T17:19:30Z", "path": "cluster/images/generate_imaging_script.sh", "diffHunk": "@@ -31,7 +31,7 @@ echo \"#!$(which sh) -e\"\n network=\"--network=${TYPE} --subnet=${TYPE}\"\n [[ \"${PROJECT}\" = \"${DEV_PROJECT}\" ]] && network=\"\"\n echo \"$GCL instances create ${sourceInstance} --description=\\\"Instance for ${TYPE} disk image creation\\\" --zone=${ZONE} ${network} --boot-disk-size 100\"\n-echo \"sleep 5\"\n+echo \"sleep 20\"", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwODkyNA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376608924", "bodyText": "We might need to contemplate a loop. 5 used to be \"always\" long enough.", "author": "nedleitch", "createdAt": "2020-02-07T21:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwOTUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTkxOA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376819918", "bodyText": "Oh dear. Have set to 10 seconds as a compromise. Haven't tested that it works for me but don't want to build a new image for no reason. Hopefully that is ok?", "author": "jonbaber", "createdAt": "2020-02-09T22:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwOTUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMTUzNA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376511534", "bodyText": "Could make this a \"withIndex\" builder method and then return a list of commands out of build?", "author": "pauldwolfe", "createdAt": "2020-02-07T17:24:15Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/command/BcfToolsCommandBuilder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.hartwig.pipeline.calling.command;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.unix.PipeCommands;\n+\n+public class BcfToolsCommandBuilder  {\n+\n+    private final String inputVcf;\n+    private final String outputVcf;\n+    private final List<BashCommand> pipedCommands = Lists.newArrayList();\n+    private String currentArguments = null;\n+\n+    public BcfToolsCommandBuilder(final String inputVcf, final String outputVcf) {\n+        this.inputVcf = inputVcf;\n+        this.outputVcf = outputVcf;\n+    }\n+\n+    public BcfToolsCommandBuilder includeHardPass() {\n+        return includeHardFilter(\"'FILTER=\\\"PASS\\\"'\");\n+    }\n+\n+    public BcfToolsCommandBuilder includeHardFilter(String expression) {\n+        addArguments(\"filter\", \"-i\", expression);\n+        return this;\n+    }\n+\n+    public BcfToolsCommandBuilder excludeSoftFilter(String expression, String softFilter) {\n+        addArguments(\"filter\", \"-e\", expression, \"-s\", softFilter, \"-m+\");\n+        return this;\n+    }\n+\n+    public BcfToolsCommandBuilder removeAnnotation(String annotation) {\n+        addArguments(\"annotate\", \"-x\", annotation);\n+        return this;\n+    }\n+\n+    public BcfToolsCommandBuilder addAnnotation(String file, String annotation) {\n+        addArguments(\"annotate\", \"-a\", file, \"-c\", annotation);\n+        return this;\n+    }\n+\n+    public BcfToolsCommandBuilder addAnnotation(String file, String annotation, String header) {\n+        addArguments(\"annotate\", \"-a\", file, \"-h\", header, \"-c\", annotation);\n+        return this;\n+    }\n+\n+    public BcfToolsCommandBuilder selectSample(String tumorSampleName) {\n+        addArguments(\"view\", \"-s\", tumorSampleName);\n+        return this;\n+    }\n+\n+    private void addArguments(String... argumentArray) {\n+        final String arguments = String.join(\" \", argumentArray);\n+        if (currentArguments == null) {\n+            currentArguments = String.join(\" \", Lists.newArrayList(arguments, inputVcf));\n+        } else {\n+            pipedCommands.add(new BcfToolsCommand(currentArguments, \"-O\", \"u\"));\n+            currentArguments = arguments;\n+        }\n+    }\n+\n+    public BashCommand build() {\n+        if (currentArguments == null) {\n+            throw new IllegalStateException(\"No bcftools command added.\");\n+        }\n+\n+        final List<BashCommand> finalCommands = Lists.newArrayList(pipedCommands);\n+        final BashCommand finalCommand = new BcfToolsCommand(currentArguments, \"-O\", \"z\", \"-o\", outputVcf);\n+        finalCommands.add(finalCommand);\n+\n+        return new PipeCommands(finalCommands.toArray(new BashCommand[finalCommands.size()]));\n+    }\n+\n+    public List<BashCommand> buildAndIndex() {", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMTkyOA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376511928", "bodyText": "could use Immutables to reduce the builder boilerplate", "author": "pauldwolfe", "createdAt": "2020-02-07T17:25:08Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/command/BcfToolsCommandBuilder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.hartwig.pipeline.calling.command;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.unix.PipeCommands;\n+\n+public class BcfToolsCommandBuilder  {", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMjM5Ng==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376822396", "bodyText": "Can I have a bit more detail please. I can't quite figure what you mean.", "author": "jonbaber", "createdAt": "2020-02-09T22:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMTkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE3NDc5Mw==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r377174793", "bodyText": "You could make a BclToolsBuilder interface, with an @immutable annotation, and all the construction methods as interface methods. Then let Immutables generate all the internal state of the builder, etc. Only awkward bit is you'd probable need to create a special build method or something to return an actual command... not that fussed about it, just if you think its a good idea.", "author": "pauldwolfe", "createdAt": "2020-02-10T16:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMTkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzODIwNA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r377438204", "bodyText": "Gotcha. Think i will leave it for this one.", "author": "jonbaber", "createdAt": "2020-02-11T04:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMTkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNTQ0Nw==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376515447", "bodyText": "For now this isn't strictly required as I suppose Purple (or anything else downstream) won't be using this VCF .", "author": "pauldwolfe", "createdAt": "2020-02-07T17:33:06Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/somatic/SageV2Caller.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.hartwig.pipeline.calling.somatic;\n+\n+import static com.hartwig.pipeline.resource.ResourceNames.BEDS;\n+import static com.hartwig.pipeline.resource.ResourceNames.MAPPABILITY;\n+import static com.hartwig.pipeline.resource.ResourceNames.SAGE;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.calling.FinalSubStage;\n+import com.hartwig.pipeline.calling.SubStageInputOutput;\n+import com.hartwig.pipeline.calling.substages.CosmicAnnotation;\n+import com.hartwig.pipeline.calling.substages.SnpEff;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.OutputFile;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.execution.vm.unix.UnzipToDirectoryCommand;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.report.ZippedVcfAndIndexComponent;\n+import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.storage.GoogleStorageLocation;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+import com.hartwig.pipeline.tertiary.TertiaryStage;\n+\n+public class SageV2Caller extends TertiaryStage<SageV2CallerOutput> {\n+\n+    public static final String NAMESPACE = \"sage\";\n+\n+    private OutputFile outputFile;\n+    private OutputFile sageOutputFile;\n+\n+    public SageV2Caller(final AlignmentPair alignmentPair) {\n+        super(alignmentPair);\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(final SomaticRunMetadata metadata) {\n+\n+        List<BashCommand> commands = Lists.newArrayList();\n+        commands.add(new UnzipToDirectoryCommand(VmDirectories.RESOURCES, Resource.SNPEFF_DB));\n+\n+        String tumorBamPath = getTumorBamDownload().getLocalTargetPath();\n+        String referenceBamPath = getReferenceBamDownload().getLocalTargetPath();\n+        String referenceGenomePath = Resource.REFERENCE_GENOME_FASTA;\n+        String tumorSampleName = metadata.tumor().sampleName();\n+        String referenceSampleName = metadata.reference().sampleName();\n+\n+        SageV2Application sageV2Application = new SageV2Application(Resource.of(SAGE, \"KnownHotspots.hg19.vcf.gz\"),\n+                Resource.of(SAGE, \"ActionableCodingPanel.hg19.bed.gz\"),\n+                Resource.of(BEDS, \"NA12878_GIAB_highconf_IllFB-IllGATKHC-CG-Ion-Solid_ALLCHROM_v3.2.2_highconf.bed\"),\n+                referenceGenomePath,\n+                tumorBamPath,\n+                referenceBamPath,\n+                tumorSampleName,\n+                referenceSampleName);\n+        sageOutputFile = sageV2Application.apply(SubStageInputOutput.empty(tumorSampleName)).outputFile();\n+\n+        SubStageInputOutput sageOutput = sageV2Application\n+                .andThen(new SageV2PassFilter(tumorSampleName))\n+                .andThen(new MappabilityAnnotation(Resource.of(MAPPABILITY, \"out_150_hg19.mappability.bed.gz\"), Resource.of(MAPPABILITY, \"mappability.hdr\")))\n+                .andThen(new PonAnnotation(\"sage.pon\", Resource.of(SAGE, \"SageGermlinePon.hg19.vcf.gz\"), \"PON_COUNT\"))\n+                .andThen(new SageV2PonFilter())\n+                .andThen(new SnpEff(Resource.SNPEFF_CONFIG))\n+                .andThen(new SageV2PostProcess(\"hg19\"))\n+                .andThen(FinalSubStage.of(new CosmicAnnotation(Resource.COSMIC_VCF_GZ, \"ID,INFO\")))\n+                .apply(SubStageInputOutput.empty(tumorSampleName));\n+\n+        commands.addAll(sageOutput.bash());\n+        outputFile = sageOutput.outputFile();\n+        return commands;\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(final BashStartupScript bash, final ResultsDirectory resultsDirectory) {\n+        return VirtualMachineJobDefinition.sageCalling(bash, resultsDirectory);\n+    }\n+\n+    @Override\n+    public SageV2CallerOutput output(final SomaticRunMetadata metadata, final PipelineStatus jobStatus, final RuntimeBucket bucket,\n+            final ResultsDirectory resultsDirectory) {\n+        return SageV2CallerOutput.builder()\n+                .status(jobStatus)\n+                .maybeFinalSomaticVcf(GoogleStorageLocation.of(bucket.name(), resultsDirectory.path(outputFile.fileName())))", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNTcyNA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376515724", "bodyText": "As mentioned before I think best we remove this until there is a downstream dependency, might confuse someone.", "author": "pauldwolfe", "createdAt": "2020-02-07T17:33:48Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/somatic/SageV2CallerOutput.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.hartwig.pipeline.calling.somatic;\n+\n+import java.util.Optional;\n+\n+import com.hartwig.pipeline.StageOutput;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.storage.GoogleStorageLocation;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface SageV2CallerOutput extends StageOutput {\n+\n+    default String name() {\n+        return SageV2Caller.NAMESPACE;\n+    }\n+\n+    PipelineStatus status();\n+\n+    Optional<GoogleStorageLocation> maybeFinalSomaticVcf();", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNzc5Mw==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376517793", "bodyText": "FYI i guess you've figured it out, but this will give you the default VM of 32 CPU and 120GB RAM. You can use VirtualMachinePerformanceProfile.custom() to tune that", "author": "pauldwolfe", "createdAt": "2020-02-07T17:38:45Z", "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/VirtualMachineJobDefinition.java", "diffHunk": "@@ -78,6 +78,14 @@ static VirtualMachineJobDefinition germlineCalling(BashStartupScript startupScri\n                 .build();\n     }\n \n+    static VirtualMachineJobDefinition sageCalling(BashStartupScript startupScript, ResultsDirectory resultsDirectory) {\n+        return ImmutableVirtualMachineJobDefinition.builder()", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODU2OA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376818568", "bodyText": "Yup. The default works nicely for me. I have got some profiling information here: https://github.com/hartwigmedical/hmftools/blob/master/sage/README2.md#performance-characteristics", "author": "jonbaber", "createdAt": "2020-02-09T21:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNzc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNzk4OA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376517988", "bodyText": "we generally don't prefix our tests with the work \"test\"", "author": "pauldwolfe", "createdAt": "2020-02-07T17:39:15Z", "path": "cluster/src/test/java/com/hartwig/pipeline/calling/command/BcfToolsCommandBuilderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.hartwig.pipeline.calling.command;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class BcfToolsCommandBuilderTest {\n+\n+    private BcfToolsCommandBuilder victim;\n+\n+    @Before\n+    public void setup() {\n+        victim = new BcfToolsCommandBuilder(\"input.vcf.gz\", \"output.vcf.gz\");\n+    }\n+\n+    @Test\n+    public void testIncludeHardPass() {", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNTQyMQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376615421", "bodyText": "Nit: inconsistency between class name and command", "author": "nedleitch", "createdAt": "2020-02-07T21:27:22Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/somatic/SageHotspotsAnnotation.java", "diffHunk": "@@ -20,6 +20,6 @@\n \n     @Override\n     public List<BashCommand> bash(final OutputFile input, final OutputFile output) {\n-        return Collections.singletonList(new SageAnnotationCommand(input.path(), sageHotspotVcf, knownHotspots, output.path()));\n+        return Collections.singletonList(new SageHotspotAnnotationCommand(input.path(), sageHotspotVcf, knownHotspots, output.path()));", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNjkyMg==", "url": "https://github.com/hartwigmedical/pipeline5/pull/122#discussion_r376616922", "bodyText": "Would some class constants be appropriate?", "author": "nedleitch", "createdAt": "2020-02-07T21:31:11Z", "path": "cluster/src/test/java/com/hartwig/pipeline/calling/command/BcfToolsCommandBuilderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.hartwig.pipeline.calling.command;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class BcfToolsCommandBuilderTest {\n+\n+    private BcfToolsCommandBuilder victim;\n+\n+    @Before\n+    public void setup() {\n+        victim = new BcfToolsCommandBuilder(\"input.vcf.gz\", \"output.vcf.gz\");\n+    }\n+\n+    @Test\n+    public void testIncludeHardPass() {\n+        String bash = victim.includeHardPass().build().asBash();\n+        assertThat(bash).contains(\"/opt/tools/bcftools/1.3.1/bcftools filter -i 'FILTER=\\\"PASS\\\"' input.vcf.gz -O z -o output.vcf.gz\");\n+    }\n+\n+    @Test\n+    public void testPiping() {\n+        String bash = victim.includeHardFilter(\"expression1\").includeHardFilter(\"expression2\").includeHardFilter(\"expression3\").build().asBash();\n+        assertThat(bash).contains(\"/opt/tools/bcftools/1.3.1/bcftools filter -i expression1 input.vcf.gz -O u | \");\n+        assertThat(bash).contains(\"| /opt/tools/bcftools/1.3.1/bcftools filter -i expression2 -O u | \");\n+        assertThat(bash).contains(\"| /opt/tools/bcftools/1.3.1/bcftools filter -i expression3 -O z -o output.vcf.gz\");", "originalCommit": "7b006d02f21f08cb76a4133531f63474c04ad677", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "592bb5016c9db96ab3744ed91827ea784f547c0e", "url": "https://github.com/hartwigmedical/pipeline5/commit/592bb5016c9db96ab3744ed91827ea784f547c0e", "message": "DEV-1133: Remove unused output", "committedDate": "2020-02-09T21:47:05Z", "type": "commit"}, {"oid": "1db0df5711c24ca1b449c05ce39979a2c30d05b3", "url": "https://github.com/hartwigmedical/pipeline5/commit/1db0df5711c24ca1b449c05ce39979a2c30d05b3", "message": "DEV-1133: Add class constants and rename test methods", "committedDate": "2020-02-09T21:55:27Z", "type": "commit"}, {"oid": "39177e471a4039adc24e09d876514a8126b62245", "url": "https://github.com/hartwigmedical/pipeline5/commit/39177e471a4039adc24e09d876514a8126b62245", "message": "DEV-1133: Reduce sleep to 10 seconds", "committedDate": "2020-02-09T22:28:34Z", "type": "commit"}, {"oid": "a7460309d0b22394ee59a3b4bd703324e6d5a6f6", "url": "https://github.com/hartwigmedical/pipeline5/commit/a7460309d0b22394ee59a3b4bd703324e6d5a6f6", "message": "DEV-1133: Consistent naming", "committedDate": "2020-02-09T22:29:05Z", "type": "commit"}, {"oid": "a67473483a734149886777198144061ec83505b4", "url": "https://github.com/hartwigmedical/pipeline5/commit/a67473483a734149886777198144061ec83505b4", "message": "DEV-1133: Make bcfcommandbuilder a command list builder", "committedDate": "2020-02-09T22:37:20Z", "type": "commit"}]}