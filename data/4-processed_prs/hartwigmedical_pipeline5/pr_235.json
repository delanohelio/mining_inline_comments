{"pr_number": 235, "pr_title": "Dev 1723 - Sage Germline Calling", "pr_createdAt": "2020-12-16T22:41:14Z", "pr_url": "https://github.com/hartwigmedical/pipeline5/pull/235", "timeline": [{"oid": "fdfde2f785af2bf6879abb36fd5caca1403a0200", "url": "https://github.com/hartwigmedical/pipeline5/commit/fdfde2f785af2bf6879abb36fd5caca1403a0200", "message": "DEV-1723: Sage Germline Calling", "committedDate": "2020-12-16T22:10:58Z", "type": "commit"}, {"oid": "fcf832f86d7c01ba10c5370f131480c2a30634f1", "url": "https://github.com/hartwigmedical/pipeline5/commit/fcf832f86d7c01ba10c5370f131480c2a30634f1", "message": "DEV-1723: Sage Germline Calling", "committedDate": "2020-12-16T22:32:06Z", "type": "commit"}, {"oid": "f65a4d6526f88650dd418d6ecd727145b46d0d4f", "url": "https://github.com/hartwigmedical/pipeline5/commit/f65a4d6526f88650dd418d6ecd727145b46d0d4f", "message": "Merge branch 'DEV-1723' of github.com:hartwigmedical/pipeline5 into DEV-1723", "committedDate": "2020-12-16T22:40:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NDU4OA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545164588", "bodyText": "Can we add a new toggle here so we can turn it off without disabling the GATK germline calling?", "author": "pauldwolfe", "createdAt": "2020-12-17T15:11:10Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.hartwig.pipeline.calling.sage;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.datatypes.DataType;\n+import com.hartwig.pipeline.datatypes.FileTypes;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.execution.vm.unix.UnzipToDirectoryCommand;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.reruns.PersistedDataset;\n+import com.hartwig.pipeline.resource.ResourceFiles;\n+import com.hartwig.pipeline.stages.SubStageInputOutput;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+public class SageGermlineCaller extends SageCaller {\n+\n+    public static final String NAMESPACE = \"sage_germline\";\n+\n+    private final ResourceFiles resourceFiles;\n+\n+    public SageGermlineCaller(final AlignmentPair alignmentPair, final ResourceFiles resourceFiles,\n+            final PersistedDataset persistedDataset) {\n+        super(alignmentPair, persistedDataset, DataType.SOMATIC_VARIANTS_SAGE);\n+        this.resourceFiles = resourceFiles;\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(final SomaticRunMetadata metadata) {\n+\n+        List<BashCommand> commands = Lists.newArrayList();\n+        commands.add(new UnzipToDirectoryCommand(VmDirectories.RESOURCES, resourceFiles.snpEffDb()));\n+\n+        String tumorBamPath = getTumorBamDownload().getLocalTargetPath();\n+        String referenceBamPath = getReferenceBamDownload().getLocalTargetPath();\n+        String tumorSampleName = metadata.tumor().sampleName();\n+        String referenceSampleName = metadata.reference().sampleName();\n+\n+        final SageCommandBuilder sageCommandBuilder =\n+                new SageCommandBuilder(resourceFiles).germlineMode(referenceSampleName, referenceBamPath, tumorSampleName, tumorBamPath);\n+        SageApplication sageApplication = new SageApplication(sageCommandBuilder);\n+        SageGermlinePostProcess sagePostProcess = new SageGermlinePostProcess(referenceSampleName, tumorSampleName, resourceFiles);\n+\n+        SubStageInputOutput sageOutput = sageApplication.andThen(sagePostProcess).apply(SubStageInputOutput.empty(tumorSampleName));\n+        commands.addAll(sageOutput.bash());\n+\n+        return commands;\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(final BashStartupScript bash, final ResultsDirectory resultsDirectory) {\n+        return VirtualMachineJobDefinition.sageGermlineCalling(bash, resultsDirectory);\n+    }\n+\n+    @Override\n+    public boolean shouldRun(final Arguments arguments) {\n+        return arguments.runGermlineCaller();", "originalCommit": "f65a4d6526f88650dd418d6ecd727145b46d0d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1NTQwMQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545555401", "bodyText": "Done. Added run_sage_germline_caller argument.", "author": "jonbaber", "createdAt": "2020-12-18T03:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NDU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NjkzNQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545166935", "bodyText": "What impact will this have downstream on reporting, etc? Will we need to do another rerun to make data homogenous again?\nWe could limit this impact of this change by not changing this namespace yet and making that a separate ticket.", "author": "pauldwolfe", "createdAt": "2020-12-17T15:14:12Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.hartwig.pipeline.calling.sage;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.datatypes.DataType;\n+import com.hartwig.pipeline.datatypes.FileTypes;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.execution.vm.unix.UnzipToDirectoryCommand;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.reruns.PersistedDataset;\n+import com.hartwig.pipeline.resource.ResourceFiles;\n+import com.hartwig.pipeline.stages.SubStageInputOutput;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+public class SageSomaticCaller extends SageCaller {\n+\n+    public static final String NAMESPACE = \"sage_somatic\";", "originalCommit": "f65a4d6526f88650dd418d6ecd727145b46d0d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1NTQ5Ng==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545555496", "bodyText": "Done. Reverted to sage.", "author": "jonbaber", "createdAt": "2020-12-18T03:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NjkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2OTUyMw==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545169523", "bodyText": "Maybe this guy is better only to implement in the somatic caller. Generally \"persisted output\" is only required for stages with other stages which depend on them, so you could leave this out of sage germline.", "author": "pauldwolfe", "createdAt": "2020-12-17T15:17:18Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.hartwig.pipeline.calling.sage;\n+\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.datatypes.DataType;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.metadata.AddDatatypeToFile;\n+import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.ReportComponent;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.SingleFileComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.report.ZippedVcfAndIndexComponent;\n+import com.hartwig.pipeline.reruns.PersistedDataset;\n+import com.hartwig.pipeline.reruns.PersistedLocations;\n+import com.hartwig.pipeline.storage.GoogleStorageLocation;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+import com.hartwig.pipeline.tertiary.TertiaryStage;\n+\n+public abstract class SageCaller extends TertiaryStage<SageOutput> {\n+\n+    private final PersistedDataset persistedDataset;\n+    private final DataType dataType;\n+\n+    public SageCaller(final AlignmentPair alignmentPair, final PersistedDataset persistedDataset, final DataType dataType) {\n+        super(alignmentPair);\n+        this.persistedDataset = persistedDataset;\n+        this.dataType = dataType;\n+    }\n+\n+    protected abstract String filteredOutput(final SomaticRunMetadata metadata);\n+\n+    protected abstract String unfilteredOutput(final SomaticRunMetadata metadata);\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(final BashStartupScript bash, final ResultsDirectory resultsDirectory) {\n+        return VirtualMachineJobDefinition.sageSomaticCalling(bash, resultsDirectory);\n+    }\n+\n+    @Override\n+    public SageOutput output(final SomaticRunMetadata metadata, final PipelineStatus jobStatus, final RuntimeBucket bucket,\n+            final ResultsDirectory resultsDirectory) {\n+        return outputBuilder(metadata, jobStatus, bucket, resultsDirectory).build();\n+    }\n+\n+    protected ImmutableSageOutput.Builder outputBuilder(final SomaticRunMetadata metadata, final PipelineStatus jobStatus,\n+            final RuntimeBucket bucket, final ResultsDirectory resultsDirectory) {\n+\n+        final String filteredOutputFile = filteredOutput(metadata);\n+        final String unfilteredOutputFile = unfilteredOutput(metadata);\n+\n+        return SageOutput.builder(namespace())\n+                .status(jobStatus)\n+                .addFailedLogLocations(GoogleStorageLocation.of(bucket.name(), RunLogComponent.LOG_FILE))\n+                .maybeFinalVcf(GoogleStorageLocation.of(bucket.name(), resultsDirectory.path(filteredOutputFile)))\n+                .addReportComponents(bqrComponent(metadata.tumor(), \"png\", bucket, resultsDirectory))\n+                .addReportComponents(bqrComponent(metadata.tumor(), \"tsv\", bucket, resultsDirectory))\n+                .addReportComponents(bqrComponent(metadata.reference(), \"png\", bucket, resultsDirectory))\n+                .addReportComponents(bqrComponent(metadata.reference(), \"tsv\", bucket, resultsDirectory))\n+                .addReportComponents(vcfComponent(unfilteredOutputFile, bucket, resultsDirectory))\n+                .addReportComponents(vcfComponent(filteredOutputFile, bucket, resultsDirectory))\n+                .addReportComponents(new RunLogComponent(bucket, namespace(), Folder.root(), resultsDirectory))\n+                .addReportComponents(new StartupScriptComponent(bucket, namespace(), Folder.root()))\n+                .addFurtherOperations(new AddDatatypeToFile(dataType, Folder.root(), namespace(), filteredOutputFile, metadata.barcode()));\n+    }\n+\n+    @Override\n+    public SageOutput skippedOutput(final SomaticRunMetadata metadata) {\n+        return SageOutput.builder(namespace()).status(PipelineStatus.SKIPPED).build();\n+    }\n+\n+    @Override\n+    public final SageOutput persistedOutput(final SomaticRunMetadata metadata) {", "originalCommit": "f65a4d6526f88650dd418d6ecd727145b46d0d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1NTY1OQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545555659", "bodyText": "Left as discussed in email thread as we will be running GATK and sage germline in parallel for a while.", "author": "jonbaber", "createdAt": "2020-12-18T03:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2OTUyMw=="}], "type": "inlineReview"}, {"oid": "9103d6a5de825bd4c9361ea4e76735dbc7d45a45", "url": "https://github.com/hartwigmedical/pipeline5/commit/9103d6a5de825bd4c9361ea4e76735dbc7d45a45", "message": "DEV-1723: Review Feedback\n- Keep existing sage namespace\n- Seperate flag to disable sage germline", "committedDate": "2020-12-18T03:43:39Z", "type": "commit"}]}