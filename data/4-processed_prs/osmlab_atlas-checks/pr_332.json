{"pr_number": 332, "pr_title": "Basic waterway checks", "pr_createdAt": "2020-07-23T14:52:58Z", "pr_url": "https://github.com/osmlab/atlas-checks/pull/332", "timeline": [{"oid": "5a2edb331e1f1b71aec88e6fa6260c65a1fec05d", "url": "https://github.com/osmlab/atlas-checks/commit/5a2edb331e1f1b71aec88e6fa6260c65a1fec05d", "message": "Standard waterway checks\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-08-04T14:07:04Z", "type": "forcePushed"}, {"oid": "1e7aff9029f667939b3735c8ced597f54e6f1aac", "url": "https://github.com/osmlab/atlas-checks/commit/1e7aff9029f667939b3735c8ced597f54e6f1aac", "message": "WaterWayCheck: Use elevations for better instructions\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-08-11T20:27:02Z", "type": "forcePushed"}, {"oid": "006d9481a99c8444f5fb445c0e13ed85c97af8ed", "url": "https://github.com/osmlab/atlas-checks/commit/006d9481a99c8444f5fb445c0e13ed85c97af8ed", "message": "ElevationUtilities: Support more compression formats.\n\nThe additional compression formats should be useful for integrating\nthird party data (e.g., object detections). This is from the new\nCompressionUtilities class.\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-08-12T13:34:58Z", "type": "forcePushed"}, {"oid": "4a630e08ed985011dc399267b2e5253c0cdb8fe0", "url": "https://github.com/osmlab/atlas-checks/commit/4a630e08ed985011dc399267b2e5253c0cdb8fe0", "message": "WaterWayChecks: Add tests for differing elevations\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-08-20T16:39:10Z", "type": "forcePushed"}, {"oid": "e691f4763f0ffb7eaf98350589a81aa8a028e0c3", "url": "https://github.com/osmlab/atlas-checks/commit/e691f4763f0ffb7eaf98350589a81aa8a028e0c3", "message": "WaterWayChecks: Add documentation\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-08-24T19:02:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MTQ2OQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r477541469", "bodyText": "nit: looks like we could move this check up a few lines before the elevation checks", "author": "seancoulter", "createdAt": "2020-08-26T19:34:25Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,453 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer.\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().last().boxAround(Distance.ONE_METER),\n+                        this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(\n+                l -> l.asPolyLine().contains(last) && !last.equals(l.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        CheckFlag flag = null;\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (line.isClosed())", "originalCommit": "e691f4763f0ffb7eaf98350589a81aa8a028e0c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MzkwMA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r477543900", "bodyText": "General question: is it possible to get a waterway that is an offender in multiple ways to this Check? E.g. a waterway that ends in a sink and crosses itself. If so we could append instructions together in one flag instead of returning only one instruction set per flag.", "author": "seancoulter", "createdAt": "2020-08-26T19:38:55Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,453 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer.\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().last().boxAround(Distance.ONE_METER),\n+                        this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(\n+                l -> l.asPolyLine().contains(last) && !last.equals(l.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)", "originalCommit": "e691f4763f0ffb7eaf98350589a81aa8a028e0c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NTAzMQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r477555031", "bodyText": "It is probably technically possible (so crossing waterways, waterway not properly connected to another waterway, and waterway going in the wrong direction).\nI'll look into appending instructions tomorrow.", "author": "tsmock", "createdAt": "2020-08-26T19:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MzkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0NTE4Ng==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r477545186", "bodyText": "nit: intersectingWaterways", "author": "seancoulter", "createdAt": "2020-08-26T19:41:13Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,453 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer.\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().last().boxAround(Distance.ONE_METER),\n+                        this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(\n+                l -> l.asPolyLine().contains(last) && !last.equals(l.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        CheckFlag flag = null;\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        else if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(object, first);\n+        }\n+        else if (isValidEndToCheck(line.getAtlas(), last) && !doesWaterwayEndInSink(line))\n+        {\n+            if (uphill)\n+            {\n+                flag = createUphillFlag(object, first);\n+            }\n+            else if (!endsWithBoundaryNode(object))\n+            {\n+                flag = createFlag(object,\n+                        this.getLocalizedInstruction(\n+                                FALLBACK_INSTRUCTIONS.indexOf(DOES_NOT_END_IN_SINK),\n+                                object.getOsmIdentifier()),\n+                        Collections.singletonList(last));\n+            }\n+        }\n+        final LineItem crossed = intersectsAnotherWaterWay(line);\n+        if (flag == null && crossed != null)\n+        {\n+            final Iterator<Location> intersections = crossed.asPolyLine()\n+                    .intersections(line.asPolyLine()).iterator();\n+            if (intersections.hasNext())\n+            {\n+                flag = createFlag(Sets.hashSet(object, crossed),\n+                        this.getLocalizedInstruction(\n+                                FALLBACK_INSTRUCTIONS.indexOf(CROSSES_WATERWAY),\n+                                object.getOsmIdentifier(), crossed.getOsmIdentifier()),\n+                        Arrays.asList(intersections.next()));\n+            }\n+        }\n+        if (flag == null)\n+        {\n+            return Optional.empty();\n+        }\n+        super.markAsFlagged(object.getOsmIdentifier());\n+        return Optional.of(flag);\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private CheckFlag createUphillFlag(final AtlasObject object, final Location first)\n+    {\n+        return createFlag(object,\n+                this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(GOES_UPHILL),\n+                        object.getOsmIdentifier(),\n+                        this.elevationUtils.getResolution(first).asMeters()));\n+    }\n+\n+    private boolean doesWaterwayEndInSink(final LineItem line)\n+    {\n+        return doesLineEndOnWaterway(line) || doesLineEndInSink(line) || doesLineEndInOcean(line);\n+    }\n+\n+    private LineItem intersectsAnotherWaterWay(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final Iterable<LineItem> intersectinWaterways = atlas.lineItemsIntersecting(line.bounds(),", "originalCommit": "e691f4763f0ffb7eaf98350589a81aa8a028e0c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NTQ5MQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r477555491", "bodyText": "pick: nit (I'll fix it, it would bug me as well if I didn't...)", "author": "tsmock", "createdAt": "2020-08-26T20:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0NTE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MTIwMA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r477551200", "bodyText": "We probably want to add that this check flags uphill waterways as well (docs/javadoc)\nI noticed it in a couple places, but wasn't sure if it was consistently mentioned", "author": "seancoulter", "createdAt": "2020-08-26T19:52:31Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,453 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer.\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().last().boxAround(Distance.ONE_METER),\n+                        this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(\n+                l -> l.asPolyLine().contains(last) && !last.equals(l.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        CheckFlag flag = null;\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        else if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(object, first);", "originalCommit": "e691f4763f0ffb7eaf98350589a81aa8a028e0c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NjE4OQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r477556189", "bodyText": "I'll do that (I wrote the docs, then wrote the test, then checked NZL, where there are many waterways that are going the wrong direction, and then wrote the elevation check code).", "author": "tsmock", "createdAt": "2020-08-26T20:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MTIwMA=="}], "type": "inlineReview"}, {"oid": "c0a8345c7fa4e2551cdd5cc7206eb2b9cc34091a", "url": "https://github.com/osmlab/atlas-checks/commit/c0a8345c7fa4e2551cdd5cc7206eb2b9cc34091a", "message": "WaterWayCheck: Append instructions to flag, if one exists\n\n* For example,\n  1. The waterway <xxx> does not end in a sink\n  (ocean/sinkhole/waterway/drain)\n  2. The waterway <xxx> crosses the waterway <yyy>.\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-08-27T14:02:45Z", "type": "forcePushed"}, {"oid": "dedbee4bb1565e14c80a79c616219be14b5c50bc", "url": "https://github.com/osmlab/atlas-checks/commit/dedbee4bb1565e14c80a79c616219be14b5c50bc", "message": "WaterWayCheck: FIXUP: Update docs to indicate that crossing waterways are found\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-08T13:11:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMjcyOQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485222729", "bodyText": "I think this would be more reusable if the 3 srtm values were given as the constructor parameters, instead of needing to be in a configuration.", "author": "Bentleysb", "createdAt": "2020-09-08T22:08:26Z", "path": "src/main/java/org/openstreetmap/atlas/checks/utility/ElevationUtilities.java", "diffHunk": "@@ -0,0 +1,361 @@\n+package org.openstreetmap.atlas.checks.utility;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.Longitude;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Used to determine assumed direction for some features (e.g. waterways). Assumptions are that any\n+ * SRTM file follows the specification here:\n+ * https://dds.cr.usgs.gov/srtm/version2_1/Documentation/Quickstart.pdf\n+ *\n+ * @author Taylor Smock\n+ */\n+public final class ElevationUtilities implements Serializable\n+{\n+    private static final long serialVersionUID = -5929570973909280629L;\n+    /**\n+     * The assumed file extension\n+     */\n+    private static final String SRTM_EXT = \"hgt\";\n+    /**\n+     * The assumed extent of a HGT SRTM file (lat/lon) in degrees\n+     */\n+    private static final int SRTM_EXTENT = 1;\n+    /**\n+     * A non-number when there is no elevation data available. This is currently returns\n+     * {@link Short#MIN_VALUE}.\n+     */\n+    public static final short NO_ELEVATION = Short.MIN_VALUE;\n+\n+    private static final short[][] EMPTY_MAP = new short[][] {};\n+\n+    /** Just an int for converting a decimal to a percentage */\n+    private static final int DECIMAL_TO_PERCENTAGE = 100;\n+\n+    /** A map of {lat, lon} pairs with a loaded srtm in a byte array */\n+    private final Map<Pair<Integer, Integer>, short[][]> loadedSrtm = new HashMap<>();\n+\n+    private final int srtmExtent;\n+\n+    private final String srtmExt;\n+\n+    private final String srtmPath;\n+\n+    /**\n+     * Configuration Keys in the Integrity Framework are based on the check simple classname.\n+     *\n+     * @param key\n+     *            key part for a specific configuration item defined for this class\n+     * @return complete key for lookup\n+     */\n+    private static String configurationKey(final String key)\n+    {\n+        return formatKey(\"elevationutilities\", key);\n+    }\n+\n+    private static <U, V> V configurationValue(final Configuration configuration, final String key,\n+            final U defaultValue, final Function<U, V> transform)\n+    {\n+        return configuration.get(configurationKey(key), defaultValue, transform).value();\n+    }\n+\n+    private static String formatKey(final String name, final String key)\n+    {\n+        return String.format(\"%s.%s\", name, key);\n+    }\n+\n+    /**\n+     * Create a configured ElevationUtilities\n+     *\n+     * @param configuration\n+     *            A configuration which should (at a minimum) have a file path for elevation files.\n+     */\n+    public ElevationUtilities(final Configuration configuration)", "originalCommit": "dedbee4bb1565e14c80a79c616219be14b5c50bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNjg0MA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485236840", "bodyText": "I'll go ahead and make another constructor (I'd like to leave the configuration option in).", "author": "tsmock", "createdAt": "2020-09-08T22:48:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMjcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjIyMQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485242221", "bodyText": "That sounds good.\nFor the configuration constructor, where in the configuration are you expecting the values to be? Are they part of a check object, their own object, or top level entities? It would also be good to have a unit test to make sure custom values are read in properly.", "author": "Bentleysb", "createdAt": "2020-09-08T23:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMjcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0ODE4NQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485248185", "bodyText": "I'm expecting them to be part of their own configuration section, e.g.\n{\n    \"elevationutilities\": {\n        \"elevation.srtm_extent\": \"1\" (degree),\n        \"elevation.srtm_ext\": \"hgt\" (file extension),\n        \"elevation.path\": \"elevation\"\n    }\n}\n(I copied/pasted from docs/utilities/elevationUtilities).\nI'll see if I can make a specific test for it tomorrow (I thought I had one for that somewhere, but it doesn't look like it).", "author": "tsmock", "createdAt": "2020-09-08T23:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMjcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMzM5Nw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485223397", "bodyText": "Nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String SRTM_EXT = \"hgt\";\n          \n          \n            \n                private static final String SRTM_EXTENTION = \"hgt\";", "author": "Bentleysb", "createdAt": "2020-09-08T22:10:21Z", "path": "src/main/java/org/openstreetmap/atlas/checks/utility/ElevationUtilities.java", "diffHunk": "@@ -0,0 +1,361 @@\n+package org.openstreetmap.atlas.checks.utility;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.Longitude;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Used to determine assumed direction for some features (e.g. waterways). Assumptions are that any\n+ * SRTM file follows the specification here:\n+ * https://dds.cr.usgs.gov/srtm/version2_1/Documentation/Quickstart.pdf\n+ *\n+ * @author Taylor Smock\n+ */\n+public final class ElevationUtilities implements Serializable\n+{\n+    private static final long serialVersionUID = -5929570973909280629L;\n+    /**\n+     * The assumed file extension\n+     */\n+    private static final String SRTM_EXT = \"hgt\";", "originalCommit": "dedbee4bb1565e14c80a79c616219be14b5c50bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNjU3Mg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485236572", "bodyText": "I've expanded EXT/Ext to the appropriately cased extension.", "author": "tsmock", "createdAt": "2020-09-08T22:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMzM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMzYwMw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485223603", "bodyText": "Nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final String srtmExt;\n          \n          \n            \n                private final String srtmExtension;", "author": "Bentleysb", "createdAt": "2020-09-08T22:10:55Z", "path": "src/main/java/org/openstreetmap/atlas/checks/utility/ElevationUtilities.java", "diffHunk": "@@ -0,0 +1,361 @@\n+package org.openstreetmap.atlas.checks.utility;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.Longitude;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Used to determine assumed direction for some features (e.g. waterways). Assumptions are that any\n+ * SRTM file follows the specification here:\n+ * https://dds.cr.usgs.gov/srtm/version2_1/Documentation/Quickstart.pdf\n+ *\n+ * @author Taylor Smock\n+ */\n+public final class ElevationUtilities implements Serializable\n+{\n+    private static final long serialVersionUID = -5929570973909280629L;\n+    /**\n+     * The assumed file extension\n+     */\n+    private static final String SRTM_EXT = \"hgt\";\n+    /**\n+     * The assumed extent of a HGT SRTM file (lat/lon) in degrees\n+     */\n+    private static final int SRTM_EXTENT = 1;\n+    /**\n+     * A non-number when there is no elevation data available. This is currently returns\n+     * {@link Short#MIN_VALUE}.\n+     */\n+    public static final short NO_ELEVATION = Short.MIN_VALUE;\n+\n+    private static final short[][] EMPTY_MAP = new short[][] {};\n+\n+    /** Just an int for converting a decimal to a percentage */\n+    private static final int DECIMAL_TO_PERCENTAGE = 100;\n+\n+    /** A map of {lat, lon} pairs with a loaded srtm in a byte array */\n+    private final Map<Pair<Integer, Integer>, short[][]> loadedSrtm = new HashMap<>();\n+\n+    private final int srtmExtent;\n+\n+    private final String srtmExt;", "originalCommit": "dedbee4bb1565e14c80a79c616219be14b5c50bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNjkxNg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485226916", "bodyText": "I am a bit confused what is happening at this point (some comments throughout this method would help). Is this considering a polyline to end in the ocean if it is to the east of a coast?", "author": "Bentleysb", "createdAt": "2020-09-08T22:20:30Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,467 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            if (isRightOf(coast, linePolyline.last())", "originalCommit": "dedbee4bb1565e14c80a79c616219be14b5c50bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mzk2MA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485243960", "bodyText": "There are two assumptions at play here:\n\nnatural=coastline follows the specification, and the ocean is to the right of the coastline way.\nThe geometry isn't so complicated that the waterway loops around the coastline (I can make a contrived example, but I haven't seen any real-world examples that couldn't be more accurately modeled).\n\nI've gone ahead and added some documentation.", "author": "tsmock", "createdAt": "2020-09-08T23:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNjkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0OTcwOQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485249709", "bodyText": "I see, thanks for the clarification and the docs. It might be worth it to add a note about the ocean specification assumption in either the flag instructions or the MapRoulette challenge instructions in the configuration. That way editors may be able to identify incorrectly modeled coastlines that are getting caught by this check.", "author": "Bentleysb", "createdAt": "2020-09-08T23:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNjkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyODczNQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485228735", "bodyText": "I think you can simplify this method by using Atlas.lineItemsContaining(Location), and filtering from there.", "author": "Bentleysb", "createdAt": "2020-09-08T22:25:37Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,467 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().last().boxAround(Distance.ONE_METER),", "originalCommit": "dedbee4bb1565e14c80a79c616219be14b5c50bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDU4Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485244583", "bodyText": "I didn't see that when I was coding. I probably have similar code in the other water check PR I made.\nThanks. :)", "author": "tsmock", "createdAt": "2020-09-08T23:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyODczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNzA0NA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485237044", "bodyText": "This needs a challenge object with the MapRoulette information.", "author": "Bentleysb", "createdAt": "2020-09-08T22:49:23Z", "path": "config/configuration.json", "diffHunk": "@@ -1068,5 +1068,13 @@\n       \"difficulty\": \"EASY\",\n       \"defaultPriority\": \"LOW\"\n     }\n+  },\n+  \"WaterWayCheck\": {", "originalCommit": "85289c0103464782c51f30a489463dc287840df6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7af4e84e30b41cb62fea75c6ba32b61352aaa1ac", "url": "https://github.com/osmlab/atlas-checks/commit/7af4e84e30b41cb62fea75c6ba32b61352aaa1ac", "message": "WaterWayCheck: Add additional information when a waterway crosses a coast but does NOT end in the ocean\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T16:47:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0NjUxMA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485746510", "bodyText": "You can simplify these configs with:\nocean: {\n  boundary: \"\",\n  valid: \"\"\n},\nwaterway: {\n elevation: {\n  distance.min.start.end: \"\",\n  resolution.min.uphill: \"\"\n },\n sink.tags.filters: \"\",\n tags.filters: \"\"\n\n}", "author": "danielduhh", "createdAt": "2020-09-09T16:22:53Z", "path": "config/configuration.json", "diffHunk": "@@ -1068,5 +1068,20 @@\n       \"difficulty\": \"EASY\",\n       \"defaultPriority\": \"LOW\"\n     }\n+  },\n+  \"WaterWayCheck\": {\n+    \"ocean.boundary\": \"natural->coastline\",\n+    \"ocean.valid\": \"natural->strait,channel,fjord,sound,bay|harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\",\n+    \"waterway.elevation.distance.min.start.end\": 450.0,\n+    \"waterway.elevation.resolution.min.uphill\": 1.0,\n+    \"waterway.sink.tags.filters\": \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\",\n+    \"waterway.tags.filters\": \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\",", "originalCommit": "d0c1f526ecc4f0dec48be419c2159f377898c543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1Nzk2Ng==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485757966", "bodyText": "Is this copied from OceanBleedingCheck? https://github.com/osmlab/atlas-checks/blob/dev/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/OceanBleedingCheck.java#L40\nIf so, lets pull them both out into a tag util that can be shared", "author": "danielduhh", "createdAt": "2020-09-09T16:36:17Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,472 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"", "originalCommit": "d0c1f526ecc4f0dec48be419c2159f377898c543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjg1MQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485802851", "bodyText": "IIRC, it is. I think I copied it, with the intention of seeing if I would have to change it. I never did.", "author": "tsmock", "createdAt": "2020-09-09T17:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1Nzk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNDQzMg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485904432", "bodyText": "I created another Utility class specifically for common filters.", "author": "tsmock", "createdAt": "2020-09-09T20:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1Nzk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1ODI2Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485758263", "bodyText": "nit: extra space", "author": "danielduhh", "createdAt": "2020-09-09T16:36:37Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,472 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+", "originalCommit": "d0c1f526ecc4f0dec48be419c2159f377898c543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1ODMzNQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485758335", "bodyText": "nit: extra space", "author": "danielduhh", "createdAt": "2020-09-09T16:36:41Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,472 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+", "originalCommit": "d0c1f526ecc4f0dec48be419c2159f377898c543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTY5OA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485761698", "bodyText": "Do you mind adding java docs here?", "author": "danielduhh", "createdAt": "2020-09-09T16:40:26Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,472 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(\n+                l -> l.asPolyLine().contains(last) && !last.equals(l.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        CheckFlag flag = null;\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(flag, object, first);\n+        }\n+        if (isValidEndToCheck(line.getAtlas(), last) && !doesWaterwayEndInSink(line)\n+                && !endsWithBoundaryNode(object))\n+        {\n+            final String instruction = this.getLocalizedInstruction(\n+                    FALLBACK_INSTRUCTIONS.indexOf(DOES_NOT_END_IN_SINK), object.getOsmIdentifier());\n+            if (flag == null)\n+            {\n+                flag = createFlag(object, instruction, Collections.singletonList(last));\n+            }\n+            else\n+            {\n+                flag.addObject(object, last, instruction);\n+            }\n+\n+        }\n+        final LineItem crossed = intersectsAnotherWaterWay(line);\n+        if (crossed != null)\n+        {\n+            final Iterator<Location> intersections = crossed.asPolyLine()\n+                    .intersections(line.asPolyLine()).iterator();\n+            if (intersections.hasNext())\n+            {\n+                final String instruction = this.getLocalizedInstruction(\n+                        FALLBACK_INSTRUCTIONS.indexOf(CROSSES_WATERWAY), object.getOsmIdentifier(),\n+                        crossed.getOsmIdentifier());\n+                if (flag == null)\n+                {\n+                    flag = createFlag(Sets.hashSet(object, crossed), instruction,\n+                            Arrays.asList(intersections.next()));\n+                }\n+                else\n+                {\n+                    flag.addObject(crossed, intersections.next(), instruction);\n+                }\n+            }\n+        }\n+        if (flag == null)\n+        {\n+            return Optional.empty();\n+        }\n+        super.markAsFlagged(object.getOsmIdentifier());\n+        return Optional.of(flag);\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private CheckFlag createUphillFlag(final CheckFlag flag, final AtlasObject object,", "originalCommit": "d0c1f526ecc4f0dec48be419c2159f377898c543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MjE4Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485762183", "bodyText": "Same comment here on documentation", "author": "danielduhh", "createdAt": "2020-09-09T16:41:03Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,472 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(\n+                l -> l.asPolyLine().contains(last) && !last.equals(l.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        CheckFlag flag = null;\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(flag, object, first);\n+        }\n+        if (isValidEndToCheck(line.getAtlas(), last) && !doesWaterwayEndInSink(line)\n+                && !endsWithBoundaryNode(object))\n+        {\n+            final String instruction = this.getLocalizedInstruction(\n+                    FALLBACK_INSTRUCTIONS.indexOf(DOES_NOT_END_IN_SINK), object.getOsmIdentifier());\n+            if (flag == null)\n+            {\n+                flag = createFlag(object, instruction, Collections.singletonList(last));\n+            }\n+            else\n+            {\n+                flag.addObject(object, last, instruction);\n+            }\n+\n+        }\n+        final LineItem crossed = intersectsAnotherWaterWay(line);\n+        if (crossed != null)\n+        {\n+            final Iterator<Location> intersections = crossed.asPolyLine()\n+                    .intersections(line.asPolyLine()).iterator();\n+            if (intersections.hasNext())\n+            {\n+                final String instruction = this.getLocalizedInstruction(\n+                        FALLBACK_INSTRUCTIONS.indexOf(CROSSES_WATERWAY), object.getOsmIdentifier(),\n+                        crossed.getOsmIdentifier());\n+                if (flag == null)\n+                {\n+                    flag = createFlag(Sets.hashSet(object, crossed), instruction,\n+                            Arrays.asList(intersections.next()));\n+                }\n+                else\n+                {\n+                    flag.addObject(crossed, intersections.next(), instruction);\n+                }\n+            }\n+        }\n+        if (flag == null)\n+        {\n+            return Optional.empty();\n+        }\n+        super.markAsFlagged(object.getOsmIdentifier());\n+        return Optional.of(flag);\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private CheckFlag createUphillFlag(final CheckFlag flag, final AtlasObject object,\n+            final Location first)\n+    {\n+        final String instruction = this.getLocalizedInstruction(\n+                FALLBACK_INSTRUCTIONS.indexOf(GOES_UPHILL), object.getOsmIdentifier(),\n+                this.elevationUtils.getResolution(first).asMeters());\n+        if (flag == null)\n+        {\n+            return createFlag(object, instruction);\n+        }\n+        flag.addInstruction(instruction);\n+        return flag;\n+    }\n+\n+    private boolean doesWaterwayEndInSink(final LineItem line)\n+    {\n+        return doesLineEndOnWaterway(line) || doesLineEndInSink(line) || doesLineEndInOcean(line);\n+    }\n+\n+    private LineItem intersectsAnotherWaterWay(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final Iterable<LineItem> intersectingWaterways = atlas.lineItemsIntersecting(line.bounds(),\n+                this.waterwayTagFilter::test);\n+        final Set<LineItem> sameLayerWays = Iterables.stream(intersectingWaterways)\n+                .filter(potential -> LayerTag.areOnSameLayer(line, potential)\n+                        && !waterwayConnects(line, potential))\n+                .collectToSet();\n+        sameLayerWays.removeIf(line::equals);\n+        if (sameLayerWays.isEmpty())\n+        {\n+            return null;\n+        }\n+        return sameLayerWays.iterator().next();\n+    }\n+\n+    private boolean waterwayConnects(final LineItem line, final LineItem potential)", "originalCommit": "d0c1f526ecc4f0dec48be419c2159f377898c543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MjMwOA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485762308", "bodyText": "Java docs here as well \ud83d\ude04", "author": "danielduhh", "createdAt": "2020-09-09T16:41:12Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,472 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain)\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(\n+                l -> l.asPolyLine().contains(last) && !last.equals(l.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        CheckFlag flag = null;\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(flag, object, first);\n+        }\n+        if (isValidEndToCheck(line.getAtlas(), last) && !doesWaterwayEndInSink(line)\n+                && !endsWithBoundaryNode(object))\n+        {\n+            final String instruction = this.getLocalizedInstruction(\n+                    FALLBACK_INSTRUCTIONS.indexOf(DOES_NOT_END_IN_SINK), object.getOsmIdentifier());\n+            if (flag == null)\n+            {\n+                flag = createFlag(object, instruction, Collections.singletonList(last));\n+            }\n+            else\n+            {\n+                flag.addObject(object, last, instruction);\n+            }\n+\n+        }\n+        final LineItem crossed = intersectsAnotherWaterWay(line);\n+        if (crossed != null)\n+        {\n+            final Iterator<Location> intersections = crossed.asPolyLine()\n+                    .intersections(line.asPolyLine()).iterator();\n+            if (intersections.hasNext())\n+            {\n+                final String instruction = this.getLocalizedInstruction(\n+                        FALLBACK_INSTRUCTIONS.indexOf(CROSSES_WATERWAY), object.getOsmIdentifier(),\n+                        crossed.getOsmIdentifier());\n+                if (flag == null)\n+                {\n+                    flag = createFlag(Sets.hashSet(object, crossed), instruction,\n+                            Arrays.asList(intersections.next()));\n+                }\n+                else\n+                {\n+                    flag.addObject(crossed, intersections.next(), instruction);\n+                }\n+            }\n+        }\n+        if (flag == null)\n+        {\n+            return Optional.empty();\n+        }\n+        super.markAsFlagged(object.getOsmIdentifier());\n+        return Optional.of(flag);\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private CheckFlag createUphillFlag(final CheckFlag flag, final AtlasObject object,\n+            final Location first)\n+    {\n+        final String instruction = this.getLocalizedInstruction(\n+                FALLBACK_INSTRUCTIONS.indexOf(GOES_UPHILL), object.getOsmIdentifier(),\n+                this.elevationUtils.getResolution(first).asMeters());\n+        if (flag == null)\n+        {\n+            return createFlag(object, instruction);\n+        }\n+        flag.addInstruction(instruction);\n+        return flag;\n+    }\n+\n+    private boolean doesWaterwayEndInSink(final LineItem line)\n+    {\n+        return doesLineEndOnWaterway(line) || doesLineEndInSink(line) || doesLineEndInOcean(line);\n+    }\n+\n+    private LineItem intersectsAnotherWaterWay(final LineItem line)", "originalCommit": "d0c1f526ecc4f0dec48be419c2159f377898c543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODU2MQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485768561", "bodyText": "getAtlas() can be an expensive operation. You should be able to store the atlas in the flag function in pass it to your helpers that need access to the entire atlas.", "author": "danielduhh", "createdAt": "2020-09-09T16:48:52Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,493 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();", "originalCommit": "7af4e84e30b41cb62fea75c6ba32b61352aaa1ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTk1Mg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485769952", "bodyText": "Please avoid single letter variables", "author": "danielduhh", "createdAt": "2020-09-09T16:50:36Z", "path": "src/main/java/org/openstreetmap/atlas/checks/utility/ElevationUtilities.java", "diffHunk": "@@ -0,0 +1,379 @@\n+package org.openstreetmap.atlas.checks.utility;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.Longitude;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Used to determine assumed direction for some features (e.g. waterways). Assumptions are that any\n+ * SRTM file follows the specification here:\n+ * https://dds.cr.usgs.gov/srtm/version2_1/Documentation/Quickstart.pdf\n+ *\n+ * @author Taylor Smock\n+ */\n+public final class ElevationUtilities implements Serializable\n+{\n+    private static final long serialVersionUID = -5929570973909280629L;\n+    /**\n+     * The assumed file extension\n+     */\n+    private static final String SRTM_EXTENSION = \"hgt\";\n+    /**\n+     * The assumed extent of a HGT SRTM file (lat/lon) in degrees\n+     */\n+    private static final double SRTM_EXTENT = 1;\n+    /**\n+     * A non-number when there is no elevation data available. This is currently returns\n+     * {@link Short#MIN_VALUE}.\n+     */\n+    public static final short NO_ELEVATION = Short.MIN_VALUE;\n+\n+    private static final short[][] EMPTY_MAP = new short[][] {};\n+\n+    /** Just an int for converting a decimal to a percentage */\n+    private static final int DECIMAL_TO_PERCENTAGE = 100;\n+\n+    /** A map of {lat, lon} pairs with a loaded srtm in a byte array */\n+    private final Map<Pair<Integer, Integer>, short[][]> loadedSrtm = new HashMap<>();\n+\n+    private final double srtmExtent;\n+\n+    private final String srtmExtension;\n+\n+    private final String srtmPath;\n+\n+    /**\n+     * Configuration Keys in the Integrity Framework are based on the check simple classname.\n+     *\n+     * @param key\n+     *            key part for a specific configuration item defined for this class\n+     * @return complete key for lookup\n+     */\n+    private static String configurationKey(final String key)\n+    {\n+        return formatKey(ElevationUtilities.class.getSimpleName(), key);\n+    }\n+\n+    private static <U, V> V configurationValue(final Configuration configuration, final String key,\n+            final U defaultValue, final Function<U, V> transform)\n+    {\n+        return configuration.get(configurationKey(key), defaultValue, transform).value();\n+    }\n+\n+    private static String formatKey(final String name, final String key)\n+    {\n+        return String.format(\"%s.%s\", name, key);\n+    }\n+\n+    /**\n+     * Create a configured ElevationUtilities\n+     *\n+     * @param configuration\n+     *            A configuration which should (at a minimum) have a file path for elevation files.\n+     */\n+    public ElevationUtilities(final Configuration configuration)\n+    {\n+        this(configurationValue(configuration, \"elevation.srtm_extent\", SRTM_EXTENT, i -> i),", "originalCommit": "7af4e84e30b41cb62fea75c6ba32b61352aaa1ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MTIxMQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485771211", "bodyText": "nit: please avoid single letter variables", "author": "danielduhh", "createdAt": "2020-09-09T16:52:06Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,493 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+\n+    private final TaggableFilter validOceanTags;\n+\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line crosses an coastline line\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line crosses a coastline\n+     */\n+    private boolean doesLineCrossCoast(final LineItem line)\n+    {\n+        final List<LineItem> lines = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        return !lines.isEmpty();\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream().filter(p -> p.getLeft().equals(max))\n+                    .map(Pair::getValue).collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(crosses.stream()\n+                    .flatMap(c -> Stream.of(c.first(), c.last())).toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(\n+                l -> l.asPolyLine().contains(last) && !last.equals(l.asPolyLine().last()));", "originalCommit": "7af4e84e30b41cb62fea75c6ba32b61352aaa1ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMjg3Nw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485812877", "bodyText": "Could be simplified as :  return difference != null && difference.asDegrees() > 0;", "author": "sayas01", "createdAt": "2020-09-09T18:01:12Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,529 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line crosses an coastline line\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line crosses a coastline\n+     */\n+    private boolean doesLineCrossCoast(final LineItem line)\n+    {\n+        final List<LineItem> lines = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        return !lines.isEmpty();\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream()\n+                    .filter(pair -> pair.getLeft().equals(max)).map(Pair::getValue)\n+                    .collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(\n+                    crosses.stream().flatMap(pCoast -> Stream.of(pCoast.first(), pCoast.last()))\n+                            .toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(tLine -> tLine.asPolyLine().contains(last)\n+                && !last.equals(tLine.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)", "originalCommit": "9fc57250231ab7ed93ec58b98505453f3e17e8f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzgxMg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485813812", "bodyText": "Same comment as https://github.com/osmlab/atlas-checks/pull/332/files#r485768561 on storing the atlas and passing it to helpers.", "author": "sayas01", "createdAt": "2020-09-09T18:02:53Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,529 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line crosses an coastline line\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line crosses a coastline\n+     */\n+    private boolean doesLineCrossCoast(final LineItem line)\n+    {\n+        final List<LineItem> lines = new ArrayList<>();\n+        line.getAtlas()", "originalCommit": "9fc57250231ab7ed93ec58b98505453f3e17e8f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4NzA2Mg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485887062", "bodyText": "I was kind of surprised by this. I expected that call to be pretty cheap. :(", "author": "tsmock", "createdAt": "2020-09-09T20:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNjIzMg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485816232", "bodyText": "Missing this keyword.", "author": "sayas01", "createdAt": "2020-09-09T18:07:26Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,529 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DEFAULT_VALID_OCEAN_TAGS = \"natural->strait,channel,fjord,sound,bay|\"\n+            + \"harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock\";\n+\n+    private static final String DEFAULT_OCEAN_BOUNDARY_TAGS = \"natural->coastline\";\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(\n+                this.configurationValue(configuration, \"ocean.valid\", DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line crosses an coastline line\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line crosses a coastline\n+     */\n+    private boolean doesLineCrossCoast(final LineItem line)\n+    {\n+        final List<LineItem> lines = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        return !lines.isEmpty();\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream()\n+                    .filter(pair -> pair.getLeft().equals(max)).map(Pair::getValue)\n+                    .collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(\n+                    crosses.stream().flatMap(pCoast -> Stream.of(pCoast.first(), pCoast.last()))\n+                            .toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(tLine -> tLine.asPolyLine().contains(last)\n+                && !last.equals(tLine.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        final Atlas atlas = line.getAtlas();\n+        CheckFlag flag = null;\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(flag, object, first);\n+        }\n+        if (isValidEndToCheck(line.getAtlas(), last) && !doesWaterwayEndInSink(line)\n+                && !endsWithBoundaryNode(object))\n+        {\n+            final String instruction = this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS\n+                    .indexOf(this.doesLineCrossCoast(line) ? DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN\n+                            : DOES_NOT_END_IN_SINK),\n+                    object.getOsmIdentifier());\n+            if (flag == null)\n+            {\n+                flag = createFlag(object, instruction, Collections.singletonList(last));\n+            }\n+            else\n+            {\n+                flag.addObject(object, last, instruction);\n+            }\n+\n+        }\n+        final LineItem crossed = intersectsAnotherWaterWay(atlas, line);\n+        if (crossed != null)\n+        {\n+            final Iterator<Location> intersections = crossed.asPolyLine()\n+                    .intersections(line.asPolyLine()).iterator();\n+            if (intersections.hasNext())\n+            {\n+                final String instruction = this.getLocalizedInstruction(\n+                        FALLBACK_INSTRUCTIONS.indexOf(CROSSES_WATERWAY), object.getOsmIdentifier(),\n+                        crossed.getOsmIdentifier());\n+                if (flag == null)\n+                {\n+                    flag = createFlag(Sets.hashSet(object, crossed), instruction,\n+                            Arrays.asList(intersections.next()));\n+                }\n+                else\n+                {\n+                    flag.addObject(crossed, intersections.next(), instruction);\n+                }\n+            }\n+        }\n+        if (flag == null)\n+        {\n+            return Optional.empty();\n+        }\n+        super.markAsFlagged(object.getOsmIdentifier());\n+        return Optional.of(flag);\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Create a flag for an object that goes uphill\n+     *\n+     * @param flag\n+     *            The flag to create/modify. May be {@code null}.\n+     * @param object\n+     *            The object to flag\n+     * @param first\n+     *            The first node of the way\n+     * @return The new CheckFlag (if the passed flag was {@code null}) or the modified CheckFlag.\n+     */\n+    private CheckFlag createUphillFlag(final CheckFlag flag, final AtlasObject object,\n+            final Location first)\n+    {\n+        CheckFlag returnFlag = flag;\n+        final String instruction = this.getLocalizedInstruction(\n+                FALLBACK_INSTRUCTIONS.indexOf(GOES_UPHILL), object.getOsmIdentifier(),\n+                this.elevationUtils.getResolution(first).asMeters());\n+        if (returnFlag == null)\n+        {\n+            return createFlag(object, instruction);\n+        }\n+        returnFlag.addInstruction(instruction);\n+        return returnFlag;\n+    }\n+\n+    /**\n+     * Check if the waterway ends in a sink (i.e., a location that can reasonably expected to have\n+     * no outflow).\n+     *\n+     * @param line\n+     *            The waterway item to check\n+     * @return {@code true} if the waterway ends in a sink.\n+     */\n+    private boolean doesWaterwayEndInSink(final LineItem line)\n+    {\n+        return doesLineEndOnWaterway(line) || doesLineEndInSink(line) || doesLineEndInOcean(line);", "originalCommit": "9fc57250231ab7ed93ec58b98505453f3e17e8f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3Mzc1Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485873753", "bodyText": "That wasn't part of the style guide. (The guide being ./gradlew spotlessCheck). Should look into updating that to force methods to have this as a qualifier?", "author": "tsmock", "createdAt": "2020-09-09T19:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMjI1Mg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r486002252", "bodyText": "I think it would be good to add it to spotlessCheck. @taylorsmock", "author": "sayas01", "createdAt": "2020-09-10T01:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNjIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODgzMA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485828830", "bodyText": "Should we pass the entire polyline as an argument to make sure there are no intermediate elevation changes? Might require a loop in getIncline() over all pairs of points in the polyline", "author": "seancoulter", "createdAt": "2020-09-09T18:30:32Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,526 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.CommonTagFilters;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.valid\", CommonTagFilters.DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", CommonTagFilters.DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream()\n+                    .filter(pair -> pair.getLeft().equals(max)).map(Pair::getValue)\n+                    .collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(\n+                    crosses.stream().flatMap(pCoast -> Stream.of(pCoast.first(), pCoast.last()))\n+                            .toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(tLine -> tLine.asPolyLine().contains(last)\n+                && !last.equals(tLine.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        final Atlas atlas = line.getAtlas();\n+        CheckFlag flag = null;\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        final double incline = this.elevationUtils.getIncline(first, last);", "originalCommit": "6d58c977f649f8629f03b1aa2fe7d61fefa415e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMTM3Mg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485831372", "bodyText": "I see from the next few lines that this might complicate the existing logic. So just if you think it's best !", "author": "seancoulter", "createdAt": "2020-09-09T18:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3ODQ0NA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485878444", "bodyText": "I elected to not do this for two reasons:\n\nThe elevation data may not be \"fine\" enough to determine elevation between two nearby points (and won't be, in most cases).\nThere may be a ditch that is lower than the surrounding terrain that is not accounted for in the elevation data (highly likely with SRTM data).\n\nBoth (1) and (2) would be ameliorated if the elevation data is sufficiently fine. However, public domain data from the SRTM NASA mission have ~30m resolution, at best. Other data sources may be in the public domain and may have sufficient resolution for this, but I was more focused on general incline for the line instead of specific incline between points. I suppose we could check that the incline between each point in the line is downwards, and then have a specific instruction set for that.", "author": "tsmock", "createdAt": "2020-09-09T19:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2Mjk2NA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485962964", "bodyText": "That's fair! To avoid over complicating the elevation part of the check I think it's fine as is. If we ever come across a dataset with finer resolution we could pull this out into a new check to look at the problem more closely", "author": "seancoulter", "createdAt": "2020-09-09T22:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NjMzMg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485976332", "bodyText": "I've added a comment to indicate that it can be expanded in the future, if it makes sense with available data sets.", "author": "tsmock", "createdAt": "2020-09-09T23:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNjAwMQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485836001", "bodyText": "Since LineItem uses its underlying Polyline to create bounds via a Rectangle and not a line, we might pick up some waterways that do not intersect the param waterway but instead intersect its bounds. To avoid that we could say\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Iterable<LineItem> intersectingWaterways = atlas.lineItemsIntersecting(line.bounds(),\n          \n          \n            \n                            this.waterwayTagFilter::test);\n          \n          \n            \n                    final Iterable<LineItem> intersectingWaterways = atlas.lineItemsIntersecting(line.bounds(), incoming -> this.waterwayTagFilter.test(incoming) && incoming.asPolyLine().intersects(line.asPolyLine());", "author": "seancoulter", "createdAt": "2020-09-09T18:44:02Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,526 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.CommonTagFilters;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.valid\", CommonTagFilters.DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", CommonTagFilters.DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream()\n+                    .filter(pair -> pair.getLeft().equals(max)).map(Pair::getValue)\n+                    .collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(\n+                    crosses.stream().flatMap(pCoast -> Stream.of(pCoast.first(), pCoast.last()))\n+                            .toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(tLine -> tLine.asPolyLine().contains(last)\n+                && !last.equals(tLine.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        final Atlas atlas = line.getAtlas();\n+        CheckFlag flag = null;\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(flag, object, first);\n+        }\n+        if (isValidEndToCheck(line.getAtlas(), last) && !doesWaterwayEndInSink(line)\n+                && !endsWithBoundaryNode(object))\n+        {\n+            final String instruction = this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS\n+                    .indexOf(this.doesLineCrossCoast(line) ? DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN\n+                            : DOES_NOT_END_IN_SINK),\n+                    object.getOsmIdentifier());\n+            if (flag == null)\n+            {\n+                flag = createFlag(object, instruction, Collections.singletonList(last));\n+            }\n+            else\n+            {\n+                flag.addObject(object, last, instruction);\n+            }\n+\n+        }\n+        final LineItem crossed = intersectsAnotherWaterWay(atlas, line);\n+        if (crossed != null)\n+        {\n+            final Iterator<Location> intersections = crossed.asPolyLine()\n+                    .intersections(line.asPolyLine()).iterator();\n+            if (intersections.hasNext())\n+            {\n+                final String instruction = this.getLocalizedInstruction(\n+                        FALLBACK_INSTRUCTIONS.indexOf(CROSSES_WATERWAY), object.getOsmIdentifier(),\n+                        crossed.getOsmIdentifier());\n+                if (flag == null)\n+                {\n+                    flag = createFlag(Sets.hashSet(object, crossed), instruction,\n+                            Arrays.asList(intersections.next()));\n+                }\n+                else\n+                {\n+                    flag.addObject(crossed, intersections.next(), instruction);\n+                }\n+            }\n+        }\n+        if (flag == null)\n+        {\n+            return Optional.empty();\n+        }\n+        super.markAsFlagged(object.getOsmIdentifier());\n+        return Optional.of(flag);\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Create a flag for an object that goes uphill\n+     *\n+     * @param flag\n+     *            The flag to create/modify. May be {@code null}.\n+     * @param object\n+     *            The object to flag\n+     * @param first\n+     *            The first node of the way\n+     * @return The new CheckFlag (if the passed flag was {@code null}) or the modified CheckFlag.\n+     */\n+    private CheckFlag createUphillFlag(final CheckFlag flag, final AtlasObject object,\n+            final Location first)\n+    {\n+        final CheckFlag returnFlag = flag;\n+        final String instruction = this.getLocalizedInstruction(\n+                FALLBACK_INSTRUCTIONS.indexOf(GOES_UPHILL), object.getOsmIdentifier(),\n+                this.elevationUtils.getResolution(first).asMeters());\n+        if (returnFlag == null)\n+        {\n+            return createFlag(object, instruction);\n+        }\n+        returnFlag.addInstruction(instruction);\n+        return returnFlag;\n+    }\n+\n+    /**\n+     * Check if a line crosses an coastline line\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line crosses a coastline\n+     */\n+    private boolean doesLineCrossCoast(final LineItem line)\n+    {\n+        final List<LineItem> lines = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        return !lines.isEmpty();\n+    }\n+\n+    /**\n+     * Check if the waterway ends in a sink (i.e., a location that can reasonably expected to have\n+     * no outflow).\n+     *\n+     * @param line\n+     *            The waterway item to check\n+     * @return {@code true} if the waterway ends in a sink.\n+     */\n+    private boolean doesWaterwayEndInSink(final LineItem line)\n+    {\n+        return doesLineEndOnWaterway(line) || doesLineEndInSink(line) || doesLineEndInOcean(line);\n+    }\n+\n+    /**\n+     * Get an intersecting waterway, if one exists.\n+     *\n+     * @param line\n+     *            The waterway to look for intersections for.\n+     * @return A crossing waterway, or {@code null} if no crossing waterway exists.\n+     */\n+    private LineItem intersectsAnotherWaterWay(final Atlas atlas, final LineItem line)\n+    {\n+        final Iterable<LineItem> intersectingWaterways = atlas.lineItemsIntersecting(line.bounds(),\n+                this.waterwayTagFilter::test);", "originalCommit": "6d58c977f649f8629f03b1aa2fe7d61fefa415e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzQ3NA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485837474", "bodyText": "Is there any reason why we only look at one intersecting waterway ?", "author": "seancoulter", "createdAt": "2020-09-09T18:46:56Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,526 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.CommonTagFilters;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.valid\", CommonTagFilters.DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", CommonTagFilters.DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream()\n+                    .filter(pair -> pair.getLeft().equals(max)).map(Pair::getValue)\n+                    .collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(\n+                    crosses.stream().flatMap(pCoast -> Stream.of(pCoast.first(), pCoast.last()))\n+                            .toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(tLine -> tLine.asPolyLine().contains(last)\n+                && !last.equals(tLine.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        final Atlas atlas = line.getAtlas();\n+        CheckFlag flag = null;\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(flag, object, first);\n+        }\n+        if (isValidEndToCheck(line.getAtlas(), last) && !doesWaterwayEndInSink(line)\n+                && !endsWithBoundaryNode(object))\n+        {\n+            final String instruction = this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS\n+                    .indexOf(this.doesLineCrossCoast(line) ? DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN\n+                            : DOES_NOT_END_IN_SINK),\n+                    object.getOsmIdentifier());\n+            if (flag == null)\n+            {\n+                flag = createFlag(object, instruction, Collections.singletonList(last));\n+            }\n+            else\n+            {\n+                flag.addObject(object, last, instruction);\n+            }\n+\n+        }\n+        final LineItem crossed = intersectsAnotherWaterWay(atlas, line);\n+        if (crossed != null)\n+        {\n+            final Iterator<Location> intersections = crossed.asPolyLine()\n+                    .intersections(line.asPolyLine()).iterator();\n+            if (intersections.hasNext())\n+            {\n+                final String instruction = this.getLocalizedInstruction(\n+                        FALLBACK_INSTRUCTIONS.indexOf(CROSSES_WATERWAY), object.getOsmIdentifier(),\n+                        crossed.getOsmIdentifier());\n+                if (flag == null)\n+                {\n+                    flag = createFlag(Sets.hashSet(object, crossed), instruction,\n+                            Arrays.asList(intersections.next()));\n+                }\n+                else\n+                {\n+                    flag.addObject(crossed, intersections.next(), instruction);\n+                }\n+            }\n+        }\n+        if (flag == null)\n+        {\n+            return Optional.empty();\n+        }\n+        super.markAsFlagged(object.getOsmIdentifier());\n+        return Optional.of(flag);\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Create a flag for an object that goes uphill\n+     *\n+     * @param flag\n+     *            The flag to create/modify. May be {@code null}.\n+     * @param object\n+     *            The object to flag\n+     * @param first\n+     *            The first node of the way\n+     * @return The new CheckFlag (if the passed flag was {@code null}) or the modified CheckFlag.\n+     */\n+    private CheckFlag createUphillFlag(final CheckFlag flag, final AtlasObject object,\n+            final Location first)\n+    {\n+        final CheckFlag returnFlag = flag;\n+        final String instruction = this.getLocalizedInstruction(\n+                FALLBACK_INSTRUCTIONS.indexOf(GOES_UPHILL), object.getOsmIdentifier(),\n+                this.elevationUtils.getResolution(first).asMeters());\n+        if (returnFlag == null)\n+        {\n+            return createFlag(object, instruction);\n+        }\n+        returnFlag.addInstruction(instruction);\n+        return returnFlag;\n+    }\n+\n+    /**\n+     * Check if a line crosses an coastline line\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line crosses a coastline\n+     */\n+    private boolean doesLineCrossCoast(final LineItem line)\n+    {\n+        final List<LineItem> lines = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        return !lines.isEmpty();\n+    }\n+\n+    /**\n+     * Check if the waterway ends in a sink (i.e., a location that can reasonably expected to have\n+     * no outflow).\n+     *\n+     * @param line\n+     *            The waterway item to check\n+     * @return {@code true} if the waterway ends in a sink.\n+     */\n+    private boolean doesWaterwayEndInSink(final LineItem line)\n+    {\n+        return doesLineEndOnWaterway(line) || doesLineEndInSink(line) || doesLineEndInOcean(line);\n+    }\n+\n+    /**\n+     * Get an intersecting waterway, if one exists.\n+     *\n+     * @param line\n+     *            The waterway to look for intersections for.\n+     * @return A crossing waterway, or {@code null} if no crossing waterway exists.\n+     */\n+    private LineItem intersectsAnotherWaterWay(final Atlas atlas, final LineItem line)\n+    {\n+        final Iterable<LineItem> intersectingWaterways = atlas.lineItemsIntersecting(line.bounds(),\n+                this.waterwayTagFilter::test);\n+        final Set<LineItem> sameLayerWays = Iterables.stream(intersectingWaterways)\n+                .filter(potential -> LayerTag.areOnSameLayer(line, potential)\n+                        && !waterwayConnects(line, potential))\n+                .collectToSet();\n+        sameLayerWays.removeIf(line::equals);\n+        if (sameLayerWays.isEmpty())\n+        {\n+            return null;\n+        }\n+        return sameLayerWays.iterator().next();", "originalCommit": "6d58c977f649f8629f03b1aa2fe7d61fefa415e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4MTIyNg==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485881226", "bodyText": "I was trying to \"flag\" each object as quickly as possible, to avoid significantly increasing processing times. Since then, I started working on a generic check for invalid tags (using TagInfo data and OSM Wiki Data items), and I learned a whole new meaning for \"long processing time\" (for reference, my 5 country test runs went from ~2 hours to 14+ hours, and in one case, almost 23 hours). I've gotten that back down to ~3 hours, and I'm looking for more optimizations for that, but this isn't in the same category at all.", "author": "tsmock", "createdAt": "2020-09-09T19:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzk1OQ==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485837959", "bodyText": "nit: could name this getIntersectingWaterway(s?)(...) as it's not returning a boolean", "author": "seancoulter", "createdAt": "2020-09-09T18:47:55Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,526 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.CommonTagFilters;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.valid\", CommonTagFilters.DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", CommonTagFilters.DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream()\n+                    .filter(pair -> pair.getLeft().equals(max)).map(Pair::getValue)\n+                    .collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(\n+                    crosses.stream().flatMap(pCoast -> Stream.of(pCoast.first(), pCoast.last()))\n+                            .toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)\n+        {\n+            final Line line = (Line) lineItem;\n+            final Location last = line.asPolyLine().last();\n+            final Set<LocationItem> one = Iterables.stream(line.getAtlas().nodesAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            final Set<LocationItem> two = Iterables.stream(line.getAtlas().pointsAt(last))\n+                    .filter(LocationItem.class::isInstance).map(LocationItem.class::cast)\n+                    .collectToSet();\n+            if (Stream.concat(one.stream(), two.stream())\n+                    .anyMatch(this.waterwaySinkTagFilter::test))\n+            {\n+                return true;\n+            }\n+        }\n+        else if (lineItem instanceof Edge)\n+        {\n+            return this.waterwaySinkTagFilter.test(((Edge) lineItem).end());\n+        }\n+        return lineItem.getAtlas()\n+                .areasCovering(lineItem.asPolyLine().last(), this.waterwaySinkTagFilter::test)\n+                .iterator().hasNext();\n+    }\n+\n+    /**\n+     * Check if the last location on a line also happens to be connected to a waterway.\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends on a waterway (the last node is part of a waterway)\n+     */\n+    public boolean doesLineEndOnWaterway(final LineItem line)\n+    {\n+        final List<LineItem> waterways = new ArrayList<>();\n+        line.getAtlas().lineItemsContaining(line.asPolyLine().last(), this.waterwayTagFilter::test)\n+                .forEach(waterways::add);\n+\n+        waterways.removeIf(line::equals);\n+        final Location last = line.asPolyLine().last();\n+        return waterways.stream().anyMatch(tLine -> tLine.asPolyLine().contains(last)\n+                && !last.equals(tLine.asPolyLine().last()));\n+    }\n+\n+    /**\n+     * Check if a location is to the right of a line (e.g., kerbs, cliffs, and oceans)\n+     *\n+     * @param line\n+     *            The line to compare the location to\n+     * @param location\n+     *            The location\n+     * @return {@code true} if the location is to the right of the line. If the location is on the\n+     *         line, or to the left of the line, we return {@code false}.\n+     */\n+    public boolean isRightOf(final PolyLine line, final Location location)\n+    {\n+        final PolyLine tLine = new PolyLine(location);\n+        final Segment closest = line.segments().stream()\n+                .min(Comparator.comparingDouble(s -> s.shortestDistanceTo(tLine).asMeters()))\n+                .orElse(null);\n+        if (closest != null)\n+        {\n+            final PolyLine testLine = new PolyLine(closest.first(), closest.last(), location);\n+            final Angle difference = testLine.headingDifference().orElse(null);\n+            if (difference != null && difference.asDegrees() > 0)\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a location is inside an atlas bounds\n+     *\n+     * @param atlas\n+     *            The atlas\n+     * @param location\n+     *            The location to check\n+     * @return {@code true} if the atlas contains the location inside its bounds\n+     */\n+    public boolean isValidEndToCheck(final Atlas atlas, final Location location)\n+    {\n+        return atlas.bounds().fullyGeometricallyEncloses(location);\n+    }\n+\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && object instanceof LineItem\n+                && this.waterwayTagFilter.test(object);\n+    }\n+\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final LineItem line = (LineItem) object;\n+        final Location last = line.asPolyLine().last();\n+        final Location first = line.asPolyLine().first();\n+        final Atlas atlas = line.getAtlas();\n+        CheckFlag flag = null;\n+        if (line.isClosed())\n+        {\n+            flag = createFlag(object,\n+                    this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS.indexOf(CIRCULAR_WATERWAY),\n+                            object.getOsmIdentifier()),\n+                    Collections.singletonList(line.asPolyLine().first()));\n+        }\n+        final double incline = this.elevationUtils.getIncline(first, last);\n+        final boolean uphill = !Double.isNaN(incline) && incline > 0\n+                && last.distanceTo(first).isGreaterThan(this.minDistanceStartEndElevationUphill);\n+        if (uphill && this.minResolutionDistance\n+                .isGreaterThanOrEqualTo(this.elevationUtils.getResolution(first)))\n+        {\n+            flag = createUphillFlag(flag, object, first);\n+        }\n+        if (isValidEndToCheck(line.getAtlas(), last) && !doesWaterwayEndInSink(line)\n+                && !endsWithBoundaryNode(object))\n+        {\n+            final String instruction = this.getLocalizedInstruction(FALLBACK_INSTRUCTIONS\n+                    .indexOf(this.doesLineCrossCoast(line) ? DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN\n+                            : DOES_NOT_END_IN_SINK),\n+                    object.getOsmIdentifier());\n+            if (flag == null)\n+            {\n+                flag = createFlag(object, instruction, Collections.singletonList(last));\n+            }\n+            else\n+            {\n+                flag.addObject(object, last, instruction);\n+            }\n+\n+        }\n+        final LineItem crossed = intersectsAnotherWaterWay(atlas, line);\n+        if (crossed != null)\n+        {\n+            final Iterator<Location> intersections = crossed.asPolyLine()\n+                    .intersections(line.asPolyLine()).iterator();\n+            if (intersections.hasNext())\n+            {\n+                final String instruction = this.getLocalizedInstruction(\n+                        FALLBACK_INSTRUCTIONS.indexOf(CROSSES_WATERWAY), object.getOsmIdentifier(),\n+                        crossed.getOsmIdentifier());\n+                if (flag == null)\n+                {\n+                    flag = createFlag(Sets.hashSet(object, crossed), instruction,\n+                            Arrays.asList(intersections.next()));\n+                }\n+                else\n+                {\n+                    flag.addObject(crossed, intersections.next(), instruction);\n+                }\n+            }\n+        }\n+        if (flag == null)\n+        {\n+            return Optional.empty();\n+        }\n+        super.markAsFlagged(object.getOsmIdentifier());\n+        return Optional.of(flag);\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Create a flag for an object that goes uphill\n+     *\n+     * @param flag\n+     *            The flag to create/modify. May be {@code null}.\n+     * @param object\n+     *            The object to flag\n+     * @param first\n+     *            The first node of the way\n+     * @return The new CheckFlag (if the passed flag was {@code null}) or the modified CheckFlag.\n+     */\n+    private CheckFlag createUphillFlag(final CheckFlag flag, final AtlasObject object,\n+            final Location first)\n+    {\n+        final CheckFlag returnFlag = flag;\n+        final String instruction = this.getLocalizedInstruction(\n+                FALLBACK_INSTRUCTIONS.indexOf(GOES_UPHILL), object.getOsmIdentifier(),\n+                this.elevationUtils.getResolution(first).asMeters());\n+        if (returnFlag == null)\n+        {\n+            return createFlag(object, instruction);\n+        }\n+        returnFlag.addInstruction(instruction);\n+        return returnFlag;\n+    }\n+\n+    /**\n+     * Check if a line crosses an coastline line\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line crosses a coastline\n+     */\n+    private boolean doesLineCrossCoast(final LineItem line)\n+    {\n+        final List<LineItem> lines = new ArrayList<>();\n+        line.getAtlas()\n+                .lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        return !lines.isEmpty();\n+    }\n+\n+    /**\n+     * Check if the waterway ends in a sink (i.e., a location that can reasonably expected to have\n+     * no outflow).\n+     *\n+     * @param line\n+     *            The waterway item to check\n+     * @return {@code true} if the waterway ends in a sink.\n+     */\n+    private boolean doesWaterwayEndInSink(final LineItem line)\n+    {\n+        return doesLineEndOnWaterway(line) || doesLineEndInSink(line) || doesLineEndInOcean(line);\n+    }\n+\n+    /**\n+     * Get an intersecting waterway, if one exists.\n+     *\n+     * @param line\n+     *            The waterway to look for intersections for.\n+     * @return A crossing waterway, or {@code null} if no crossing waterway exists.\n+     */\n+    private LineItem intersectsAnotherWaterWay(final Atlas atlas, final LineItem line)", "originalCommit": "6d58c977f649f8629f03b1aa2fe7d61fefa415e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MTQ5Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485841493", "bodyText": "if sonar is complaining about declaring a stream and not having a terminal operation applied, I think we can make this a one liner :)", "author": "seancoulter", "createdAt": "2020-09-09T18:54:35Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,526 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.CommonTagFilters;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);", "originalCommit": "6d58c977f649f8629f03b1aa2fe7d61fefa415e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4NDM2Ng==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485884366", "bodyText": "I'm not seeing this in sonar. Am I looking in the wrong place?\nhttps://sonarcloud.io/project/issues?id=org.openstreetmap.atlas%3Aatlas-checks&pullRequest=332&resolved=false", "author": "tsmock", "createdAt": "2020-09-09T19:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MTQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MTU5Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485961593", "bodyText": "Ah I misread -- your code is fine, Sonar would only complain if an operation was applied to the stream that wasn't a terminal operation. You've got the right place, and you should be able to integrate Sonar into your IDE as well depending on your IDE. check out this for IntelliJ if you haven't already - https://www.sonarlint.org/intellij/index.html", "author": "seancoulter", "createdAt": "2020-09-09T22:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MTQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NDU3NA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485974574", "bodyText": "I use Eclipse, and I do have it integrated.", "author": "tsmock", "createdAt": "2020-09-09T23:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MTQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjUxNw==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485846517", "bodyText": "I think we could have the same treatment of Lines and Edges here. If either feature has a node or point at its end that's a sink, return true", "author": "seancoulter", "createdAt": "2020-09-09T19:03:59Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/lines/WaterWayCheck.java", "diffHunk": "@@ -0,0 +1,526 @@\n+package org.openstreetmap.atlas.checks.validation.linear.lines;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.checks.utility.CommonTagFilters;\n+import org.openstreetmap.atlas.checks.utility.ElevationUtilities;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.PolyLine;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LineItem;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.SyntheticBoundaryNodeTag;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.collections.Sets;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Angle;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags waterways that do not have a sink (i.e., are not connected to another waterway),\n+ * are circular (so first node and last node are the same), or cross another waterway with the same\n+ * layer. It also looks for ways that may be going uphill (requires elevation data, see\n+ * {@link ElevationUtilities}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class WaterWayCheck extends BaseCheck<Long>\n+{\n+    /**\n+     * This comparator takes a polyline and segments, and compares the segments based off of the\n+     * location of the segment in the line.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private static class SegmentIndexComparator implements Comparator<Segment>\n+    {\n+        private final List<Segment> lineSegments;\n+\n+        /**\n+         * Initialize with a specific polyline to check\n+         *\n+         * @param line\n+         *            The line to check the index of segments against\n+         */\n+        SegmentIndexComparator(final PolyLine line)\n+        {\n+            this.lineSegments = line.segments();\n+        }\n+\n+        @Override\n+        public int compare(final Segment segment1, final Segment segment2)\n+        {\n+            final Segment segment1real = this.lineSegments.stream().filter(segment1::equals)\n+                    .findFirst().orElse(null);\n+            final Segment segment2real = this.lineSegments.stream().filter(segment2::equals)\n+                    .findFirst().orElse(null);\n+            final int segment1index = this.lineSegments.indexOf(segment1real);\n+            final int segment2index = this.lineSegments.indexOf(segment2real);\n+            return segment1index - segment2index;\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 2877101774578564205L;\n+    private static final String WATERWAY_SINK_TAG_FILTER_DEFAULT = \"natural->sinkhole|waterway->tidal_channel,drain|manhole->drain\";\n+    private static final String WATERWAY_TAG_FILTER_DEFAULT = \"waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised\";\n+\n+    private static final String DOES_NOT_END_IN_SINK = \"The waterway {0} does not end in a sink (ocean/sinkhole/waterway/drain).\";\n+    private static final String DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN = DOES_NOT_END_IN_SINK\n+            + \"\\nThe waterway crosses a coastline, which means it is possible for the coastline to have an incorrect direction.\\nLand should be to the LEFT of the coastline and the ocean should be to the RIGHT of the coastline (for more information, see https://wiki.osm.org/Tag:natural=coastline).\";\n+    private static final String CIRCULAR_WATERWAY = \"The waterway {0} loops back on itself. This is typically impossible.\";\n+    private static final String CROSSES_WATERWAY = \"The waterway {0} crosses the waterway {1}.\";\n+    private static final String GOES_UPHILL = \"The waterway {0} probably does not go up hill.\\nPlease check (source elevation data resolution was about {1} meters).\";\n+    private static final Distance MIN_RESOLUTION_DISTANCE = Distance.ONE_METER;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(DOES_NOT_END_IN_SINK,\n+            CIRCULAR_WATERWAY, CROSSES_WATERWAY, GOES_UPHILL,\n+            DOES_NOT_END_IN_SINK_BUT_CROSSING_OCEAN);\n+\n+    private final TaggableFilter waterwaySinkTagFilter;\n+    private final TaggableFilter waterwayTagFilter;\n+    private final TaggableFilter validOceanTags;\n+    private final TaggableFilter oceanBoundaryTags;\n+    private final ElevationUtilities elevationUtils;\n+    private final Distance minResolutionDistance;\n+    private final Distance minDistanceStartEndElevationUphill;\n+\n+    /**\n+     * Get intersecting segments of two polylines\n+     *\n+     * @param left\n+     *            The polyline whose segments will go in the key/left side of the pair\n+     * @param right\n+     *            The polyline whose segments will go in the value/right side of the pair\n+     * @return A collection of segments intersecting other segments. A segment *may* appear more\n+     *         than once.\n+     */\n+    public static Collection<Pair<Segment, Segment>> getIntersectingSegments(final PolyLine left,\n+            final PolyLine right)\n+    {\n+        final Collection<Pair<Segment, Segment>> intersectingSegments = new HashSet<>();\n+        for (final Segment leftSegment : left.segments())\n+        {\n+            for (final Segment rightSegment : right.segments())\n+            {\n+                if (leftSegment.intersects(rightSegment))\n+                {\n+                    intersectingSegments.add(Pair.of(leftSegment, rightSegment));\n+                }\n+            }\n+        }\n+        return intersectingSegments;\n+    }\n+\n+    /**\n+     * Check the atlas object for boundary nodes at its end\n+     *\n+     * @param object\n+     *            The atlas object to check\n+     * @return {@code true} if the object ends on a boundary\n+     */\n+    private static boolean endsWithBoundaryNode(final AtlasObject object)\n+    {\n+        if (!(object instanceof LineItem))\n+        {\n+            return false;\n+        }\n+        final LineItem lineItem = (LineItem) object;\n+        final Atlas atlas = object.getAtlas();\n+        final Location last = lineItem.asPolyLine().last();\n+        final Stream<Point> points = Iterables.asList(atlas.pointsAt(last)).stream();\n+        final Stream<Node> nodes = Iterables.asList(atlas.nodesAt(last)).stream();\n+        return Stream.concat(points, nodes).anyMatch(SyntheticBoundaryNodeTag::isBoundaryNode);\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public WaterWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.elevationUtils = new ElevationUtilities(configuration);\n+        this.waterwaySinkTagFilter = this.configurationValue(configuration,\n+                \"waterway.sink.tags.filters\", WATERWAY_SINK_TAG_FILTER_DEFAULT,\n+                TaggableFilter::forDefinition);\n+        this.waterwayTagFilter = this.configurationValue(configuration, \"waterway.tags.filters\",\n+                WATERWAY_TAG_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+\n+        /* Ocean data */\n+        this.validOceanTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.valid\", CommonTagFilters.DEFAULT_VALID_OCEAN_TAGS));\n+        this.oceanBoundaryTags = TaggableFilter.forDefinition(this.configurationValue(configuration,\n+                \"ocean.boundary\", CommonTagFilters.DEFAULT_OCEAN_BOUNDARY_TAGS));\n+\n+        /* End ocean data */\n+        /* Elevation settings */\n+        this.minResolutionDistance = this.configurationValue(configuration,\n+                \"waterway.elevation.resolution.min.uphill\", MIN_RESOLUTION_DISTANCE.asMeters(),\n+                Distance::meters);\n+        this.minDistanceStartEndElevationUphill = this.configurationValue(configuration,\n+                \"waterway.elevation.distance.min.start.end\",\n+                Distance.FIFTEEN_HUNDRED_FEET.asMeters(), Distance::meters);\n+        /* End elevation settings */\n+\n+    }\n+\n+    /**\n+     * Check if a line ends in an ocean\n+     *\n+     * @param line\n+     *            The line to check\n+     * @return {@code true} if the line ends in an ocean\n+     */\n+    public boolean doesLineEndInOcean(final LineItem line)\n+    {\n+        final Atlas atlas = line.getAtlas();\n+        final PolyLine linePolyline = line.asPolyLine();\n+        final Location last = linePolyline.last();\n+        if (atlas.areasCovering(last, this.validOceanTags::test).iterator().hasNext()\n+                || atlas.areasCovering(last, this.oceanBoundaryTags::test).iterator().hasNext())\n+        {\n+            return true;\n+        }\n+        final List<LineItem> lines = new ArrayList<>();\n+        atlas.lineItemsIntersecting(line.asPolyLine().bounds(), this.oceanBoundaryTags::test)\n+                .forEach(lines::add);\n+        final LineItem[] intersecting = lines.stream()\n+                .filter(l -> l.asPolyLine().intersects(linePolyline)).toArray(LineItem[]::new);\n+        final SegmentIndexComparator segmentComparator = new SegmentIndexComparator(linePolyline);\n+        for (final LineItem lineItem : intersecting)\n+        {\n+            // Get way segments from the two lines that intersect\n+            final Collection<Pair<Segment, Segment>> segs = getIntersectingSegments(linePolyline,\n+                    lineItem.asPolyLine());\n+            // Get the *latest* crossing segment of the waterway\n+            // (just in case the waterway crosses a coastline multiple times)\n+            final Segment max = segs.stream().map(Pair::getKey).distinct().max(segmentComparator)\n+                    .orElse(null);\n+            // Get the crossing segments of the coastline (probably just one)\n+            final Collection<Segment> crosses = segs.stream()\n+                    .filter(pair -> pair.getLeft().equals(max)).map(Pair::getValue)\n+                    .collect(Collectors.toSet());\n+            // Create a shortened coastline to use to check if the waterway ends inside the ocean\n+            final PolyLine coast = new PolyLine(\n+                    crosses.stream().flatMap(pCoast -> Stream.of(pCoast.first(), pCoast.last()))\n+                            .toArray(Location[]::new));\n+            // If the waterway ends to the right of the coastline, it ended in an ocean.\n+            // If the waterway ends on the coastline, it ended in an ocean.\n+            if (isRightOf(coast, linePolyline.last())\n+                    || lineItem.asPolyLine().contains(linePolyline.last()))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check if a line ends in a waterway sink\n+     *\n+     * @param lineItem\n+     *            The LineItem to check\n+     * @return {@code true} if the waterway can reasonably be expected to end\n+     */\n+    public boolean doesLineEndInSink(final LineItem lineItem)\n+    {\n+        // If the way is a sink, it obviously ends in a sink...\n+        if (this.waterwaySinkTagFilter.test(lineItem))\n+        {\n+            return true;\n+        }\n+        if (lineItem instanceof Line)", "originalCommit": "6d58c977f649f8629f03b1aa2fe7d61fefa415e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4NTk5NA==", "url": "https://github.com/osmlab/atlas-checks/pull/332#discussion_r485885994", "bodyText": "This goes back to trying to optimize to avoid significant increases in processing time. Again, compared to my latest in-progress check, this is peanuts. :)", "author": "tsmock", "createdAt": "2020-09-09T19:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjUxNw=="}], "type": "inlineReview"}, {"oid": "9dffafb5d6e74158230744f8d95f0e98d9c8dca4", "url": "https://github.com/osmlab/atlas-checks/commit/9dffafb5d6e74158230744f8d95f0e98d9c8dca4", "message": "Standard waterway checks\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "aa066310907e4d83bb0a9b2902f2243a1d08d8aa", "url": "https://github.com/osmlab/atlas-checks/commit/aa066310907e4d83bb0a9b2902f2243a1d08d8aa", "message": "WaterWayCheck: Add additional test for layer=-1 + no layer waterway connections\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "9e8a5563e5935dd33e84960298ffd92e9c96c758", "url": "https://github.com/osmlab/atlas-checks/commit/9e8a5563e5935dd33e84960298ffd92e9c96c758", "message": "ElevationUtilities: Check elevations with third-party data\n\n* Currently supports HGT files (either uncompressed or in a zip archive)\n* Can be used to give better instructions (e.g., waterway goes up a\n  hill)\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "56b371c8bb4101edf08ef9fe0f0880464c0e6c96", "url": "https://github.com/osmlab/atlas-checks/commit/56b371c8bb4101edf08ef9fe0f0880464c0e6c96", "message": "WaterWayCheck: Use elevations for better instructions\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "8e75fb922f469cee7cf61f708d2a16d7ee59ed8b", "url": "https://github.com/osmlab/atlas-checks/commit/8e75fb922f469cee7cf61f708d2a16d7ee59ed8b", "message": "WaterWayCheck: Check if the final node of a way is on a boundary.\n\nThis does not work with my sample files, since the waterways do not have\nthe synthetic tags, and sometimes a waterway that another waterway\nconnects to isn't in the atlas.\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "3512ac213c958d0b6a2353b2a20b294c70d45d0a", "url": "https://github.com/osmlab/atlas-checks/commit/3512ac213c958d0b6a2353b2a20b294c70d45d0a", "message": "ElevationUtilities: Support more compression formats.\n\nThe additional compression formats should be useful for integrating\nthird party data (e.g., object detections). This is from the new\nCompressionUtilities class.\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "13464ace4a4d40ce625324afe57aa1fe9966867e", "url": "https://github.com/osmlab/atlas-checks/commit/13464ace4a4d40ce625324afe57aa1fe9966867e", "message": "FIXUP: ElevationUtilities: Sonar\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "fbd52a57ddfaacb2147a3bf66579799b14f6cb69", "url": "https://github.com/osmlab/atlas-checks/commit/fbd52a57ddfaacb2147a3bf66579799b14f6cb69", "message": "ElevationUtilities: FIXUP sonar issues\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "d214aa8ec520bd15d4ab1a66646131bd684150ea", "url": "https://github.com/osmlab/atlas-checks/commit/d214aa8ec520bd15d4ab1a66646131bd684150ea", "message": "CompressionUtilities: Add tests\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "f6648695fa3ab49f43be0bdcb551f13ddbc8604c", "url": "https://github.com/osmlab/atlas-checks/commit/f6648695fa3ab49f43be0bdcb551f13ddbc8604c", "message": "ElevationUtilities: Expand tests slightly\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "2eda4c566aa4621e8be1b624a32c264ca562a526", "url": "https://github.com/osmlab/atlas-checks/commit/2eda4c566aa4621e8be1b624a32c264ca562a526", "message": "WaterWayChecks: Add tests for differing elevations\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:26:42Z", "type": "commit"}, {"oid": "e3fa74c4da2d590554fdb90a13fca2798b8e670c", "url": "https://github.com/osmlab/atlas-checks/commit/e3fa74c4da2d590554fdb90a13fca2798b8e670c", "message": "WaterWayChecks: Add documentation\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:27:03Z", "type": "commit"}, {"oid": "e6c1d6d7f3dc6e53026279977fc91d78f6ca21e2", "url": "https://github.com/osmlab/atlas-checks/commit/e6c1d6d7f3dc6e53026279977fc91d78f6ca21e2", "message": "WaterWayChecks: Update docs to include elevation check information\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:27:04Z", "type": "commit"}, {"oid": "eeac82805c10188cb9cc42baba7894229e11eef7", "url": "https://github.com/osmlab/atlas-checks/commit/eeac82805c10188cb9cc42baba7894229e11eef7", "message": "WaterWayCheck: FIXUP: Typo (intersectinWaterways -> intersectingWaterways)\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:27:04Z", "type": "commit"}, {"oid": "bf3afb1facbb63e3f3c565c3364e4be3d4de82a6", "url": "https://github.com/osmlab/atlas-checks/commit/bf3afb1facbb63e3f3c565c3364e4be3d4de82a6", "message": "WaterWayCheck: Append instructions to flag, if one exists\n\n* For example,\n  1. The waterway <xxx> does not end in a sink\n  (ocean/sinkhole/waterway/drain)\n  2. The waterway <xxx> crosses the waterway <yyy>.\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:27:04Z", "type": "commit"}, {"oid": "f9fd1df3ffc833dd93045b5f4ddebc3ba28d25ed", "url": "https://github.com/osmlab/atlas-checks/commit/f9fd1df3ffc833dd93045b5f4ddebc3ba28d25ed", "message": "WaterWayCheck: Add sample configuration\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:27:57Z", "type": "commit"}, {"oid": "3fe04d62c4fe963737a2b2f02bd20933e570b8ae", "url": "https://github.com/osmlab/atlas-checks/commit/3fe04d62c4fe963737a2b2f02bd20933e570b8ae", "message": "WaterWayCheck: FIXUP: Update docs to no longer indicate that a single issue ends the check\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "b6890eb4cda3dcc4c5cd9ba5d221b5cad50d79c1", "url": "https://github.com/osmlab/atlas-checks/commit/b6890eb4cda3dcc4c5cd9ba5d221b5cad50d79c1", "message": "WaterWayCheck: FIXUP: Update docs to indicate that crossing waterways are found\n\nSigned-off-by: Taylor Smock <taylor.smock@kaart.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "682912bd2f17d7edc570f4fffa3866f405ac7fd4", "url": "https://github.com/osmlab/atlas-checks/commit/682912bd2f17d7edc570f4fffa3866f405ac7fd4", "message": "ElevationUtilities: Expand EXT/Ext to extension (appropriately capitalized)\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "fb6f80cd8f431816dc8218a566c04403a1436400", "url": "https://github.com/osmlab/atlas-checks/commit/fb6f80cd8f431816dc8218a566c04403a1436400", "message": "ElevationUtilities: Add constructor for when a test wants to specify parameters manually\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "51199cc8884bade7ed74c1ea8f152c294dcf660f", "url": "https://github.com/osmlab/atlas-checks/commit/51199cc8884bade7ed74c1ea8f152c294dcf660f", "message": "WaterWayCheck: Improve documentation for a confusing code section\n\n* This mostly helps explain the coastline check.\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "18f0120ee804ce484a24822e53eab32355d62893", "url": "https://github.com/osmlab/atlas-checks/commit/18f0120ee804ce484a24822e53eab32355d62893", "message": "WaterWayCheck: Use Atlas.lineItemsContaining instead of Atlas.lineItemsIntersecting\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "61c497ffc2e47db31201f3012da6f4835ed4bb25", "url": "https://github.com/osmlab/atlas-checks/commit/61c497ffc2e47db31201f3012da6f4835ed4bb25", "message": "WaterWayCheck Configuration: Add challenge section\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "a36dde90acd10f3e7d18cb2f8089637e820f1fa8", "url": "https://github.com/osmlab/atlas-checks/commit/a36dde90acd10f3e7d18cb2f8089637e820f1fa8", "message": "ElevationUtilities: Add test for constructors\n\n* Also, modify so that the settings use the same casing as other\n  configuration settings\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "718a3aa6f7a600dc31328ebe8ca83850c8f7862d", "url": "https://github.com/osmlab/atlas-checks/commit/718a3aa6f7a600dc31328ebe8ca83850c8f7862d", "message": "WaterWayCheck: Add additional information when a waterway crosses a coast but does NOT end in the ocean\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "5056483de16491b53c20e5f4f5651e7f1e184719", "url": "https://github.com/osmlab/atlas-checks/commit/5056483de16491b53c20e5f4f5651e7f1e184719", "message": "WaterWayCheck: Make configuration prettier\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "4007aa9dfff7481cd99a91f0fb45f6a966f4689f", "url": "https://github.com/osmlab/atlas-checks/commit/4007aa9dfff7481cd99a91f0fb45f6a966f4689f", "message": "WaterWayCheck, ElevationUtilities: Avoid single character variables\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "a55a376921437371ccf1b7b98b1fb9faf1b8fc8b", "url": "https://github.com/osmlab/atlas-checks/commit/a55a376921437371ccf1b7b98b1fb9faf1b8fc8b", "message": "WaterWayCheck: Spacing\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "7a6ca2e90647ad52086f6ae6ea8c200d87951400", "url": "https://github.com/osmlab/atlas-checks/commit/7a6ca2e90647ad52086f6ae6ea8c200d87951400", "message": "WaterWayCheck: Get atlas in main check instead of submethod\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "d3c83a4b676b636fcf2b32c6bea9d5f4cc1adb1e", "url": "https://github.com/osmlab/atlas-checks/commit/d3c83a4b676b636fcf2b32c6bea9d5f4cc1adb1e", "message": "WaterWayCheck: Add more documentation\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "956239bd345e25a8e2cbc907595b851af4f3e344", "url": "https://github.com/osmlab/atlas-checks/commit/956239bd345e25a8e2cbc907595b851af4f3e344", "message": "CommonTagFilters: Move some filters OceanBleedingCheck and WaterWayCheck into a separate file for reuse\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "787c83639fe3deb7754b4bd3997e4e2bdc8b4766", "url": "https://github.com/osmlab/atlas-checks/commit/787c83639fe3deb7754b4bd3997e4e2bdc8b4766", "message": "WaterWayCheck: Formatting\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "cc7de20b6008f2f28a3288698d6e819d6058cc52", "url": "https://github.com/osmlab/atlas-checks/commit/cc7de20b6008f2f28a3288698d6e819d6058cc52", "message": "WaterWayCheck: FIXUP: Nitpicks and some simplifications\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "commit"}, {"oid": "cc7de20b6008f2f28a3288698d6e819d6058cc52", "url": "https://github.com/osmlab/atlas-checks/commit/cc7de20b6008f2f28a3288698d6e819d6058cc52", "message": "WaterWayCheck: FIXUP: Nitpicks and some simplifications\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:27:59Z", "type": "forcePushed"}, {"oid": "cf5f60c31c6d37ea26a38afb727384f40526866a", "url": "https://github.com/osmlab/atlas-checks/commit/cf5f60c31c6d37ea26a38afb727384f40526866a", "message": "WaterWayCheck: Ensure that intersecting waterways actually intersect\n\n* Originally, was just getting waterways based off of the bbox of the\n  original waterway\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T20:40:54Z", "type": "commit"}, {"oid": "bab9e932374ae7581a7a902163d73300ef050716", "url": "https://github.com/osmlab/atlas-checks/commit/bab9e932374ae7581a7a902163d73300ef050716", "message": "WaterWayCheck: Move flagging logic into separate methods\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T21:18:45Z", "type": "commit"}, {"oid": "56c6042880cd9d65c6d09513adb6b9b85aede9cf", "url": "https://github.com/osmlab/atlas-checks/commit/56c6042880cd9d65c6d09513adb6b9b85aede9cf", "message": "WaterWayCheck: Add comment expounding upon incline check and resolution of data\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>", "committedDate": "2020-09-09T23:28:10Z", "type": "commit"}]}