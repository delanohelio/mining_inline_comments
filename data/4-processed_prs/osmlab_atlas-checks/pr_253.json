{"pr_number": 253, "pr_title": "Edge-crossing-edge-check bug fix.", "pr_createdAt": "2020-02-06T18:01:59Z", "pr_url": "https://github.com/osmlab/atlas-checks/pull/253", "timeline": [{"oid": "48c0e35b9a1c0bae00e1183319ff8c0081de5323", "url": "https://github.com/osmlab/atlas-checks/commit/48c0e35b9a1c0bae00e1183319ff8c0081de5323", "message": "Edge-crossing-edge-check, working functionality.", "committedDate": "2020-02-06T18:00:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTIyNw==", "url": "https://github.com/osmlab/atlas-checks/pull/253#discussion_r375995227", "bodyText": "@Bentleysb Please take a look at this flag method and kindly let me know if these code changes are satisfying the functionality which we discussed.", "author": "smaheshwaram", "createdAt": "2020-02-06T18:05:10Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/EdgeCrossingEdgeCheck.java", "diffHunk": "@@ -105,22 +109,44 @@ public boolean validCheckForObject(final AtlasObject object)\n         // edges from being flagged more than once.\n         final Set<Edge> collectedEdges = new EdgeCrossingEdgeWalker((Edge) object,", "originalCommit": "48c0e35b9a1c0bae00e1183319ff8c0081de5323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMjI0Mg==", "url": "https://github.com/osmlab/atlas-checks/pull/253#discussion_r376512242", "bodyText": "This logic looks like it should deal with most of the determinism issues. For extremely complex networks of crossing edges there will still be some nondeterminism and duplication in the flags, but I think that should be within reasonable levels. It would be good to have some numbers on how much duplication this would have.", "author": "Bentleysb", "createdAt": "2020-02-07T17:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NzM4Nw==", "url": "https://github.com/osmlab/atlas-checks/pull/253#discussion_r379067387", "bodyText": "I updated the description on number of flags generated before and after code changes. We can not completely eradicate duplicates for complex networks. But, this code definitely works for taking care of duplicates by grouping the edges in one flag based on different conditions mentioned in the code.", "author": "smaheshwaram", "createdAt": "2020-02-13T19:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTIyNw=="}], "type": "inlineReview"}, {"oid": "eb27b721233f230d7328cd6e0bed4c97e6e5ee3d", "url": "https://github.com/osmlab/atlas-checks/commit/eb27b721233f230d7328cd6e0bed4c97e6e5ee3d", "message": "Edge-crossing-edge-check, making sure edges with same osm identifier won't be flagged duplicate.", "committedDate": "2020-02-11T21:08:34Z", "type": "commit"}, {"oid": "a37211c7dd574e04a5e7817c1013fafe8e6da9d9", "url": "https://github.com/osmlab/atlas-checks/commit/a37211c7dd574e04a5e7817c1013fafe8e6da9d9", "message": "Edge-crossing-edge-check, formatting fix.", "committedDate": "2020-02-12T19:00:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0OTA4NQ==", "url": "https://github.com/osmlab/atlas-checks/pull/253#discussion_r380349085", "bodyText": "I think we still want to do this for each crossing Edge. This will help cut down on duplicate processing and give clearer instructions on what needs to be changed.", "author": "Bentleysb", "createdAt": "2020-02-17T20:02:37Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/EdgeCrossingEdgeCheck.java", "diffHunk": "@@ -105,22 +109,46 @@ public boolean validCheckForObject(final AtlasObject object)\n         // edges from being flagged more than once.\n         final Set<Edge> collectedEdges = new EdgeCrossingEdgeWalker((Edge) object,\n                 this.getInvalidCrossingEdges()).collectEdges();\n-\n         if (collectedEdges.size() > 1)\n         {\n-            final CheckFlag newFlag = new CheckFlag(getTaskIdentifier(object));\n-            this.markAsFlagged(object.getIdentifier());\n-            newFlag.addObject(object);\n-            newFlag.addInstruction(this.getLocalizedInstruction(0, object.getOsmIdentifier()));\n-\n-            collectedEdges.forEach(invalidEdge ->\n+            final List<Tuple2<Long, Set<Edge>>> edgeCrossPairs = collectedEdges\n+                    .stream().filter(\n+                            e -> e.getOsmIdentifier() != object.getOsmIdentifier())\n+                    .map(e -> new Tuple2<>(e.getOsmIdentifier(),\n+                            new EdgeCrossingEdgeWalker(e, this.getInvalidCrossingEdges())\n+                                    .collectEdges()))\n+                    .collect(Collectors.toList());\n+            edgeCrossPairs.add(new Tuple2<>(object.getOsmIdentifier(), collectedEdges));\n+            final Optional<Tuple2<Long, Set<Edge>>> maxPair = edgeCrossPairs.stream().max(\n+                    (entry1, entry2) -> Integer.compare(entry1._2().size(), entry2._2().size()));\n+            if (maxPair.isPresent())\n             {\n-                this.markAsFlagged(invalidEdge.getIdentifier());\n-                newFlag.addObject(invalidEdge);\n-                newFlag.addInstruction(\n-                        this.getLocalizedInstruction(1, invalidEdge.getOsmIdentifier()));", "originalCommit": "a37211c7dd574e04a5e7817c1013fafe8e6da9d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwNDAwOA==", "url": "https://github.com/osmlab/atlas-checks/pull/253#discussion_r381604008", "bodyText": "As we discussed added intersecting edges locations to the flag.", "author": "smaheshwaram", "createdAt": "2020-02-19T23:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0OTA4NQ=="}], "type": "inlineReview"}, {"oid": "a2bf9f85272c326aa17699ea08e64d4fa9e47603", "url": "https://github.com/osmlab/atlas-checks/commit/a2bf9f85272c326aa17699ea08e64d4fa9e47603", "message": "Edge-crossover-edge, added functionality to collect all crossing edges locations.", "committedDate": "2020-02-19T23:11:05Z", "type": "commit"}, {"oid": "c7ad86bf171faff721064902b0560eec65a1c2db", "url": "https://github.com/osmlab/atlas-checks/commit/c7ad86bf171faff721064902b0560eec65a1c2db", "message": "Edge-crossing-edge, modified code to add edge to a flag and mark it as flagged if it has max size of crossing edges.", "committedDate": "2020-02-20T21:52:12Z", "type": "commit"}, {"oid": "85f8515fe87f10eaf1a185447a1560450c6f52f3", "url": "https://github.com/osmlab/atlas-checks/commit/85f8515fe87f10eaf1a185447a1560450c6f52f3", "message": "Edge-crossing-edge, fixing checkstyle issues.", "committedDate": "2020-02-20T22:01:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5NTYwNg==", "url": "https://github.com/osmlab/atlas-checks/pull/253#discussion_r382295606", "bodyText": "Please replace one letter variable names.", "author": "sayas01", "createdAt": "2020-02-20T22:32:07Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/EdgeCrossingEdgeCheck.java", "diffHunk": "@@ -105,22 +108,43 @@ public boolean validCheckForObject(final AtlasObject object)\n         // edges from being flagged more than once.\n         final Set<Edge> collectedEdges = new EdgeCrossingEdgeWalker((Edge) object,\n                 this.getInvalidCrossingEdges()).collectEdges();\n-\n         if (collectedEdges.size() > 1)\n         {\n-            final CheckFlag newFlag = new CheckFlag(getTaskIdentifier(object));\n-            this.markAsFlagged(object.getIdentifier());\n-            newFlag.addObject(object);\n-            newFlag.addInstruction(this.getLocalizedInstruction(0, object.getOsmIdentifier()));\n-\n-            collectedEdges.forEach(invalidEdge ->\n+            final List<Tuple2<Edge, Set<Edge>>> edgeCrossPairs = collectedEdges\n+                    .stream().filter(\n+                            e -> e.getOsmIdentifier() != object.getOsmIdentifier())", "originalCommit": "85f8515fe87f10eaf1a185447a1560450c6f52f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5NjEwOQ==", "url": "https://github.com/osmlab/atlas-checks/pull/253#discussion_r382296109", "bodyText": "Could you remove the return and curly brace to fix https://sonarcloud.io/project/issues?id=org.openstreetmap.atlas%3Aatlas-checks&open=AXBkpYtoPUfJDu18rpLu&pullRequest=253&resolved=false&types=CODE_SMELL", "author": "sayas01", "createdAt": "2020-02-20T22:33:18Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/EdgeCrossingEdgeCheck.java", "diffHunk": "@@ -105,22 +108,43 @@ public boolean validCheckForObject(final AtlasObject object)\n         // edges from being flagged more than once.\n         final Set<Edge> collectedEdges = new EdgeCrossingEdgeWalker((Edge) object,\n                 this.getInvalidCrossingEdges()).collectEdges();\n-\n         if (collectedEdges.size() > 1)\n         {\n-            final CheckFlag newFlag = new CheckFlag(getTaskIdentifier(object));\n-            this.markAsFlagged(object.getIdentifier());\n-            newFlag.addObject(object);\n-            newFlag.addInstruction(this.getLocalizedInstruction(0, object.getOsmIdentifier()));\n-\n-            collectedEdges.forEach(invalidEdge ->\n+            final List<Tuple2<Edge, Set<Edge>>> edgeCrossPairs = collectedEdges\n+                    .stream().filter(\n+                            e -> e.getOsmIdentifier() != object.getOsmIdentifier())\n+                    .map(e -> new Tuple2<>(e,\n+                            new EdgeCrossingEdgeWalker(e, this.getInvalidCrossingEdges())\n+                                    .collectEdges()))\n+                    .collect(Collectors.toList());\n+            edgeCrossPairs.add(new Tuple2<>((Edge) object, collectedEdges));\n+            final Optional<Tuple2<Edge, Set<Edge>>> maxPair = edgeCrossPairs.stream().max(\n+                    (entry1, entry2) -> Integer.compare(entry1._2().size(), entry2._2().size()));\n+            if (maxPair.isPresent())\n             {\n-                this.markAsFlagged(invalidEdge.getIdentifier());\n-                newFlag.addObject(invalidEdge);\n-                newFlag.addInstruction(\n-                        this.getLocalizedInstruction(1, invalidEdge.getOsmIdentifier()));\n-            });\n-            return Optional.of(newFlag);\n+                final int maxSize = (maxPair.get()._2()).size();\n+\n+                // max edges object is not the one passed to this flag.\n+                final List<Tuple2<Edge, Set<Edge>>> maxEdgePairs = edgeCrossPairs.stream()\n+                        .filter(crossPair -> (crossPair._2()).size() == maxSize)\n+                        .collect(Collectors.toList());\n+                final Optional<Tuple2<Edge, Set<Edge>>> minIdentifierPair = maxEdgePairs.stream()\n+                        .reduce((edge1, edge2) ->\n+                        {", "originalCommit": "85f8515fe87f10eaf1a185447a1560450c6f52f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf430011ab6de623462e9cb096778d6149e1ca5e", "url": "https://github.com/osmlab/atlas-checks/commit/bf430011ab6de623462e9cb096778d6149e1ca5e", "message": "Edge-crossing-edge, addressing review comments.", "committedDate": "2020-02-20T22:46:13Z", "type": "commit"}, {"oid": "efbb14e4ac3e9c50f7672584a21ad55eb4df5971", "url": "https://github.com/osmlab/atlas-checks/commit/efbb14e4ac3e9c50f7672584a21ad55eb4df5971", "message": "Merge branch 'dev' into edge-crossing-edge2", "committedDate": "2020-02-24T23:40:32Z", "type": "commit"}]}