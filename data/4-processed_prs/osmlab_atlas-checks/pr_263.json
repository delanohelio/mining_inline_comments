{"pr_number": 263, "pr_title": "[LineCrossingWaterBody] Expand waterbody definition and add flaggable items configurables", "pr_createdAt": "2020-02-20T18:25:34Z", "pr_url": "https://github.com/osmlab/atlas-checks/pull/263", "timeline": [{"oid": "bf076f1627ba865d74e45c860b8278faa20208f9", "url": "https://github.com/osmlab/atlas-checks/commit/bf076f1627ba865d74e45c860b8278faa20208f9", "message": "lcwb update to flag intersecting buildings", "committedDate": "2020-02-06T20:53:46Z", "type": "commit"}, {"oid": "37c6a16bbdb97b989280c10e9557f9708789e5bb", "url": "https://github.com/osmlab/atlas-checks/commit/37c6a16bbdb97b989280c10e9557f9708789e5bb", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates", "committedDate": "2020-02-10T19:07:24Z", "type": "commit"}, {"oid": "e96b8701e37fbaee34ecf31cc417f6fcda63ae19", "url": "https://github.com/osmlab/atlas-checks/commit/e96b8701e37fbaee34ecf31cc417f6fcda63ae19", "message": "small fixes; update instruction", "committedDate": "2020-02-10T19:07:50Z", "type": "commit"}, {"oid": "1c2d6d90b2f9f7c4ff48dbc756354f6257c96270", "url": "https://github.com/osmlab/atlas-checks/commit/1c2d6d90b2f9f7c4ff48dbc756354f6257c96270", "message": "LCWB add switch for flagging specific lineItems", "committedDate": "2020-02-12T23:22:37Z", "type": "commit"}, {"oid": "03ee4149f24306f2ea39f8127377d1cfa2342e0f", "url": "https://github.com/osmlab/atlas-checks/commit/03ee4149f24306f2ea39f8127377d1cfa2342e0f", "message": "nonoffending building tags; introduce level tag", "committedDate": "2020-02-13T19:03:58Z", "type": "commit"}, {"oid": "59c2dd670132220c66446a74b212cf26bcb4fb00", "url": "https://github.com/osmlab/atlas-checks/commit/59c2dd670132220c66446a74b212cf26bcb4fb00", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates", "committedDate": "2020-02-13T19:05:57Z", "type": "commit"}, {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "url": "https://github.com/osmlab/atlas-checks/commit/a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates", "committedDate": "2020-02-20T18:07:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MjgzNQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r382292835", "bodyText": "nit: If we can move all of these validations into a method and call it from here will have increase readability and easy to test.", "author": "smaheshwaram", "createdAt": "2020-02-20T22:25:41Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -146,23 +221,43 @@ private static boolean isBoundary(final AtlasEntity crossingLine)\n     public LineCrossingWaterBodyCheck(final Configuration configuration)\n     {\n         super(configuration);\n+        this.filterOffendingLineItems = this.configurationValue(configuration,\n+                \"intersectingLineItems.filter\", DEFAULT_OFFENDING_LINEITEM_FILTER);\n     }\n \n     @Override\n     public boolean validCheckForObject(final AtlasObject object)\n     {\n-        return TypePredicates.IS_AREA.test(object) && TagPredicates.IS_WATER_BODY.test(object);\n+        // We only consider water body areas, not linear water bodies\n+        return TypePredicates.IS_AREA.test(object) && !INVALID_WATER_BODY_TAGS.test(object)\n+                && VALID_WATER_BODY_TAGS.test(object);\n     }\n \n     @Override\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n-        // First retrieve the crossing edges and lines\n+        // First retrieve the crossing edges, lines, buildings\n         final Area objectAsArea = (Area) object;\n         final Polygon areaAsPolygon = objectAsArea.asPolygon();\n         final Atlas atlas = object.getAtlas();\n-        final Iterable<AtlasItem> crossingLinearItems = new MultiIterable<>(\n-                atlas.edgesIntersecting(areaAsPolygon), atlas.linesIntersecting(areaAsPolygon));\n+        final Iterable<AtlasItem> allCrossingItems = this.filterOffendingLineItems\n+                // If we're only looking for crossing buildings/railways/streets\n+                ? new MultiIterable<>(\n+                        atlas.lineItemsIntersecting(areaAsPolygon,\n+                                lineItem -> (lineItem instanceof Edge\n+                                        && HIGHWAY_TYPE_TO_FLAG.test((Edge) lineItem)", "originalCommit": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyMzM1MA==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r384223350", "bodyText": "Yup, good thinking", "author": "seancoulter", "createdAt": "2020-02-26T01:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MjgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5ODk1Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r382298953", "bodyText": "Wondering if we can move these to json file and do validation here will be good. It's just my opinion. Please use your better judgement.", "author": "smaheshwaram", "createdAt": "2020-02-20T22:40:13Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -66,6 +72,75 @@\n             + \"man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|ford->yes|winter_road->yes|snowmobile->yes|ski->yes\";\n     private static final TaggableFilter CAN_CROSS_WATER_BODY_FILTER = TaggableFilter\n             .forDefinition(CAN_CROSS_WATER_BODY_TAGS);\n+    private static final String OFFENDING_LINEITEMS = \"railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature\";\n+    private static final TaggableFilter IS_OFFENDER = TaggableFilter\n+            .forDefinition(OFFENDING_LINEITEMS);\n+    // Whether we should flag buildings that cross waterbodies\n+    private static final Predicate<Edge> HIGHWAY_TYPE_TO_FLAG = object -> object.highwayTag()\n+            .isMoreImportantThanOrEqualTo(HighwayTag.PATH)\n+            && Validators.isNotOfType(object, HighwayTag.class, HighwayTag.BUS_GUIDEWAY);\n+    // Whether we should limit flags to only streets, buildings, and railways\n+    private static final boolean DEFAULT_OFFENDING_LINEITEM_FILTER = false;\n+    private boolean filterOffendingLineItems;\n+    // Assume the object is an area based on atlas call\n+    private static final Predicate<AtlasObject> IS_BUILDING = object -> Validators\n+            .isNotOfType(object, BuildingTag.class, BuildingTag.NO);\n+    private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n+    private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n+            .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n+\n+    private static final String WATER_BODY_TAGS =\n+            // Lakes\n+            \"natural->spring,hot_spring&name->*\" + \"|natural->lake,pond\" + \"|water:type->lake\"\n+                    + \"|landuse->pond\" + \"|water->lake,pond,oxbow,salt_lake\" +\n+\n+                    // Rivers\n+                    \"|natural->stream\"\n+                    + \"|water->canal,river,lock,moat,riverbank,creek,stream,stream_pool\"\n+                    + \"|waterway->river,riverbank,brook,ditch,stream,creek,canal,derelict_canal\"\n+                    + \"|stream->*\" + \"|waterway->drain&name->*\" + \"|water->drain&name->*\" +\n+\n+                    // Reservoirs\n+                    \"|water->reservoir\" + \"|water->dam&natural->water\" + \"|landuse->reservoir\"\n+                    + \"|natural->reservoir\" + \"|seamark:type->dam&natural->water\" +\n+\n+                    // Miscellaneous\n+                    \"|natural->water\" + \"|waterway->water\" + \"|water->water,perennial\"\n+                    + \"|landuse->water\" +\n+\n+                    // Wetlands\n+                    \"|wetland->tidalflat,reedbed\" + \"|water->tidalflat,reedbed\"\n+                    + \"|natural->tidalflat,reedbed\" +\n+\n+                    // Lagoons\n+                    \"|natural->lagoon\" + \"|water->lagoon\" + \"|waterway->lagoon\" +\n+\n+                    // Intermittent/Dry lakes\n+                    \"|intermittent->dry\" + \"|seasonal->dry\" + \"|natural->dry_lake\" +\n+\n+                    // Unique\n+                    \"|waterway->billabong,navigablechannel,river;stream,reservoir\";\n+    private static final TaggableFilter VALID_WATER_BODY_TAGS = TaggableFilter\n+            .forDefinition(WATER_BODY_TAGS);\n+\n+    private static final String WATER_BODY_EXCLUDE_TAGS = \"natural->dock,water_point,floodway,spillway,wastewater,waterhole\"\n+            + \"|waterway->lock_gate,dock,water_point,floodway,spillway,wastewater,waterhole,culvert,dam,waterfall,fish_pass,dry_dock,construction,boat_lift,weir,breakwater,boatyard\"", "originalCommit": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5Nzc0OQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r383397749", "bodyText": "Rather than having this as a boolean switch, perhaps it would be more useful to have the configurable be a taggable filter. That way the user could easily select whatever lines they liked to be flagged.", "author": "Bentleysb", "createdAt": "2020-02-24T17:12:19Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -146,23 +221,43 @@ private static boolean isBoundary(final AtlasEntity crossingLine)\n     public LineCrossingWaterBodyCheck(final Configuration configuration)\n     {\n         super(configuration);\n+        this.filterOffendingLineItems = this.configurationValue(configuration,", "originalCommit": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyMzIyMQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r384223221", "bodyText": "Agreed. Done", "author": "seancoulter", "createdAt": "2020-02-26T01:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5Nzc0OQ=="}], "type": "inlineReview"}, {"oid": "64567e38d1df7ea8cc99122403e26ad68a40a32a", "url": "https://github.com/osmlab/atlas-checks/commit/64567e38d1df7ea8cc99122403e26ad68a40a32a", "message": "LCWB add more unit tests; make tags configurable", "committedDate": "2020-02-26T01:05:04Z", "type": "commit"}, {"oid": "934245d2a859c10f34e090306ef72324da05ba7a", "url": "https://github.com/osmlab/atlas-checks/commit/934245d2a859c10f34e090306ef72324da05ba7a", "message": "LCWB add more configurables", "committedDate": "2020-02-26T02:32:00Z", "type": "commit"}, {"oid": "6812677f5d9a9a75834b43561776c12725ba694e", "url": "https://github.com/osmlab/atlas-checks/commit/6812677f5d9a9a75834b43561776c12725ba694e", "message": "LCWB javadoc nit", "committedDate": "2020-02-26T19:26:13Z", "type": "commit"}, {"oid": "351ca48b845e4f2d72cf2cbe1150682fa820a00d", "url": "https://github.com/osmlab/atlas-checks/commit/351ca48b845e4f2d72cf2cbe1150682fa820a00d", "message": "spotlessApply", "committedDate": "2020-02-26T20:23:21Z", "type": "commit"}, {"oid": "76ea87da2701a0ee790d368a88d456aa61de7a73", "url": "https://github.com/osmlab/atlas-checks/commit/76ea87da2701a0ee790d368a88d456aa61de7a73", "message": "Merge branch 'dev' into lcwbUpdates", "committedDate": "2020-02-26T20:38:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwOTcxMQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r385309711", "bodyText": "Any reason to use this instead of BuildingTag.isBuilding()?", "author": "Bentleysb", "createdAt": "2020-02-27T19:01:53Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -35,56 +40,102 @@\n import org.openstreetmap.atlas.utilities.configuration.Configuration;\n \n /**\n- * Flags line items (edges or lines) that are crossing water bodies invalidly.\n+ * Flags line items (edges or lines) and optionally buildings that are crossing water bodies\n+ * invalidly. Configurable values and\n  * {@code LineCrossingWaterBodyCheck#canCrossWaterBody(AtlasItem)} and\n- * {@code Utilities#haveExplicitLocationsForIntersections(Polygon, AtlasItem)} is used to decide\n+ * {@code Utilities#haveExplicitLocationsForIntersections(Polygon, AtlasItem)} are used to decide\n  * whether a crossing is valid or not.\n  *\n  * @author mertk\n  * @author savannahostrowski\n  * @author sayana_saithu\n+ * @author seancoulter\n  */\n public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n {\n     private static final String LINEAR_INSTRUCTION = \"Linear item {0,number,#} is crossing water body invalidly.\";\n+    private static final String BUILDING_INSTRUCTION = \"Building item {0,number,#} is intersecting water body invalidly.\";\n     private static final String WATERBODY_INSTRUCTION = \"The water body with id {0,number,#} has invalid crossings.\";\n     private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(WATERBODY_INSTRUCTION,\n-            LINEAR_INSTRUCTION);\n+            LINEAR_INSTRUCTION, BUILDING_INSTRUCTION);\n     private static final String ADDRESS_PREFIX_KEY = \"addr\";\n     // Whitelist for line tags\n-\n     private static final Set<String> VALID_LINE_TAGS = Stream.of(NotesTag.KEY, SourceTag.KEY,\n             NaturalTag.KEY, PlaceTag.KEY, AdministrativeLevelTag.KEY).collect(Collectors.toSet());\n     // Whitelisted tags filter for multipolygon relations. Multipolygon relations with these tags\n-    // are\n-    // expected to cross water bodies.\n+    // are expected to cross water bodies.\n     private static final TaggableFilter VALID_RELATIONS_TAG_FILTER = TaggableFilter\n             .forDefinition(\"natural->*|place->*|landuse->*|waterway->*|admin_level->*|boundary->*\");\n-    private static final String CAN_CROSS_WATER_BODY_TAGS = \"waterway->*|boundary->*|landuse->*|\"\n+    private static final String DEFAULT_CAN_CROSS_WATER_BODY_TAGS = \"waterway->*|boundary->*|landuse->*|\"\n             + \"bridge->yes,viaduct,aqueduct,boardwalk,covered,low_water_crossing,movable,suspension|tunnel->yes,culvert,building_passage|\"\n             + \"embankment->yes|location->underwater,underground|power->line,minor_line|\"\n             + \"man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|ford->yes|winter_road->yes|snowmobile->yes|ski->yes\";\n-    private static final TaggableFilter CAN_CROSS_WATER_BODY_FILTER = TaggableFilter\n-            .forDefinition(CAN_CROSS_WATER_BODY_TAGS);\n-    private static final long serialVersionUID = 6048659185833217159L;\n+    private TaggableFilter canCrossWaterBodyFilter;\n+    private TaggableFilter lineItemsOffending;\n+    private boolean flagBuildings;\n+    private static final String DEFAULT_HIGHWAY_MINIMUM = \"TOLL_GANTRY\";\n+    private HighwayTag highwayMinimum;\n+    private static final List<String> DEFAULT_HIGHWAYS_EXCLUDE = Collections.emptyList();\n+    private List<HighwayTag> highwaysExclude;\n+    private static final Predicate<AtlasObject> IS_BUILDING = object -> Validators", "originalCommit": "76ea87da2701a0ee790d368a88d456aa61de7a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0207257af3d6610c5b428b119846dbab53f7c457", "url": "https://github.com/osmlab/atlas-checks/commit/0207257af3d6610c5b428b119846dbab53f7c457", "message": "LCWB use isBuilding()", "committedDate": "2020-02-27T19:52:13Z", "type": "commit"}, {"oid": "100e2d467ecfab9697e64074cdb3b6d4aeea9bde", "url": "https://github.com/osmlab/atlas-checks/commit/100e2d467ecfab9697e64074cdb3b6d4aeea9bde", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates", "committedDate": "2020-02-27T19:52:41Z", "type": "commit"}, {"oid": "da023d2d3d4790663bb767b7afa9f5cf562ce3f8", "url": "https://github.com/osmlab/atlas-checks/commit/da023d2d3d4790663bb767b7afa9f5cf562ce3f8", "message": "Merge branch 'lcwbUpdates' of https://github.com/seancoulter/atlas-checks into lcwbUpdates", "committedDate": "2020-02-27T19:53:10Z", "type": "commit"}, {"oid": "a9ec53f593205e8ab72b81207fdd4c78ddd22a93", "url": "https://github.com/osmlab/atlas-checks/commit/a9ec53f593205e8ab72b81207fdd4c78ddd22a93", "message": "Merge branch 'dev' into lcwbUpdates", "committedDate": "2020-03-02T18:58:09Z", "type": "commit"}, {"oid": "ce13f75e82746a74bc6200ff3eca4b5643a8ab6a", "url": "https://github.com/osmlab/atlas-checks/commit/ce13f75e82746a74bc6200ff3eca4b5643a8ab6a", "message": "LCWB warning suppression", "committedDate": "2020-03-02T19:18:25Z", "type": "commit"}, {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269", "url": "https://github.com/osmlab/atlas-checks/commit/fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269", "message": "Merge branch 'lcwbUpdates' of https://github.com/seancoulter/atlas-checks into lcwbUpdates", "committedDate": "2020-03-02T19:18:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMzYwMw==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r386613603", "bodyText": "nit: All the checks are enabled by default in this config.", "author": "sayas01", "createdAt": "2020-03-02T19:51:23Z", "path": "config/configuration.json", "diffHunk": "@@ -436,7 +436,16 @@\n       \"tags\": \"building\"\n     }\n   },\n-  \"LineCrossingWaterBodyCheck\": {},\n+  \"LineCrossingWaterBodyCheck\": {\n+    \"enabled\": true,", "originalCommit": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNDMwNQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r386614305", "bodyText": "We also need the instructions and description for this check.", "author": "dcastrowa", "createdAt": "2020-03-02T19:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMzYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTA1NA==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r386615054", "bodyText": "Sorry @dcastrowa , jumped the gun on the merge. Do one of you two mind adding the MR challenge details?", "author": "danielduhh", "createdAt": "2020-03-02T19:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMzYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0MzM3MQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r386743371", "bodyText": "Yup, this is going up with a PR very soon.", "author": "seancoulter", "createdAt": "2020-03-03T01:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMzYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3OTE0Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r387279143", "bodyText": "added these updates here: #266", "author": "seancoulter", "createdAt": "2020-03-03T20:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMzYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNDM4MA==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r386614380", "bodyText": "Also could you add the MR \"challenge\" field?", "author": "sayas01", "createdAt": "2020-03-02T19:52:50Z", "path": "config/configuration.json", "diffHunk": "@@ -436,7 +436,16 @@\n       \"tags\": \"building\"\n     }\n   },\n-  \"LineCrossingWaterBodyCheck\": {},\n+  \"LineCrossingWaterBodyCheck\": {\n+    \"enabled\": true,\n+    \"highway.minimum\": \"path\",\n+    \"highways.exclude\": [\n+      \"bus_guideway\"\n+    ],\n+    \"lineItems.offending\": \"railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature\",\n+    \"lineItems.non_offending\": \"waterway->*|boundary->*|landuse->*|bridge->yes,viaduct,aqueduct,boardwalk,covered,low_water_crossing,movable,suspension|tunnel->yes,culvert,building_passage|embankment->yes|location->underwater,underground|power->line,minor_line|man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|ford->yes|winter_road->yes|snowmobile->yes|ski->yes\",\n+    \"buildings.flag\": true", "originalCommit": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}