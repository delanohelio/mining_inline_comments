{"pr_number": 1273, "pr_title": "[SDL-0234] Proxy Library RPC Generation", "pr_createdAt": "2020-02-12T19:55:27Z", "pr_url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273", "timeline": [{"oid": "5c53a237d8550424b380782857603178e6d92556", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/5c53a237d8550424b380782857603178e6d92556", "message": "[SDL-0234] Proxy Library RPC Generation", "committedDate": "2020-02-12T19:36:17Z", "type": "commit"}, {"oid": "7622ce33a228d02bac133c1ce5ea7ae58dfb8268", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/7622ce33a228d02bac133c1ce5ea7ae58dfb8268", "message": "fixing android tests", "committedDate": "2020-02-13T18:55:06Z", "type": "commit"}, {"oid": "f008ba56aac1457279185429a768dc44cd078d94", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f008ba56aac1457279185429a768dc44cd078d94", "message": "fixing android tests", "committedDate": "2020-02-14T13:23:32Z", "type": "commit"}, {"oid": "b1d4c4e7b0bc6cd3e60e99021c31d0ccb9c221fe", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b1d4c4e7b0bc6cd3e60e99021c31d0ccb9c221fe", "message": "fixed android tests", "committedDate": "2020-02-14T15:50:08Z", "type": "commit"}, {"oid": "27c706641c7e4cc71a59c64efd85cbbd7dd27089", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/27c706641c7e4cc71a59c64efd85cbbd7dd27089", "message": "Removed customization for new enum elemets", "committedDate": "2020-02-14T16:05:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMzM1NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380203354", "bodyText": "Not sure if this is covered. As you mention `if the \"since\" attribute exists\". The since attribute is inherited from parent element so parameters can omit this parameter if the parameter was introduced with the function. Example:\n\n<enum name=\"Language\" since=\"1.0\"> explicitly since 1.0\n<element name=\"FR-CA\" internal_name=\"FR_CA\"> implicitly since 1.0\n<element name=\"DE-DE\" internal_name=\"DE_DE\" since=\"2.0\"> newly added language since 2.0\n\nJust wondering if @since would appear on every inline header.", "author": "kshala-ford", "createdAt": "2020-02-17T14:11:17Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2638 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n+\n+Some required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * smartdevicelink\n+        * protocol\n+            * enums\n+                * FunctionID.java\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID and MessageType -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+The only exception is the `<enum>` named `FunctionID`. This class should be stored in `com/smartdevicelink/protocol/enums` folder, as defined in the directory structure above.\n+\n+The package definition for `FunctionID` class also is different:\n+```java\n+package com.smartdevicelink.protocol.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.", "originalCommit": "27c706641c7e4cc71a59c64efd85cbbd7dd27089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3OTY2Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380279663", "bodyText": "@kshala-ford <element name=\"FR-CA\" internal_name=\"FR_CA\"> will not have the @since JavaDoc as described in the document. Should it appear based on the parent since attribute?", "author": "vladmu", "createdAt": "2020-02-17T16:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMzM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMzcyMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380303721", "bodyText": "Not really because @SInCE is added to the class\u2019s inline documentation but it would better appear in the ide documentary. I\u2019m okay to leave as is.", "author": "kshala-ford", "createdAt": "2020-02-17T17:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMzM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0OTA2MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380249060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `toString` 1method should be overridden to return the private field instead of the constant name.\n          \n          \n            \n            The `toString` method should be overridden to return the private field instead of the constant name.", "author": "kshala-ford", "createdAt": "2020-02-17T15:35:50Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2638 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n+\n+Some required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * smartdevicelink\n+        * protocol\n+            * enums\n+                * FunctionID.java\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID and MessageType -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+The only exception is the `<enum>` named `FunctionID`. This class should be stored in `com/smartdevicelink/protocol/enums` folder, as defined in the directory structure above.\n+\n+The package definition for `FunctionID` class also is different:\n+```java\n+package com.smartdevicelink.protocol.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `SyncMsgVersion -> SdlMsgVersion`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+The constant definition could have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<element>`, if exists.\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The constant definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute exists and is \"true\".\n+\n+### Constants without fields:\n+\n+This type of enums doesn't require constructor and requires additional method `valueForString` to be defined. It should return the Enum constant based on its string name, or `null` if the constant is not found.\n+```java\n+    /**\n+     * Convert String to [enum_name]\n+     *\n+     * @param value String\n+     * @return [enum_name]\n+     */\n+    public static [enum_name] valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`\n+\n+Example:\n+\n+XML:\n+```xml\n+    <enum name=\"GlobalProperty\" since=\"1.0\">\n+        <description>The different global properties.</description>\n+        <element name=\"USER_LOCATION\" since=\"6.0\">\n+            <description>Location of the user's seat of setGlobalProperties</description>\n+        </element>\n+        <element name=\"HELPPROMPT\" since=\"1.0\">\n+            <description>The property helpPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"TIMEOUTPROMPT\" since=\"1.0\">\n+            <description>The property timeoutPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPTITLE\" since=\"2.0\">\n+            <description>The property vrHelpTitle of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPITEMS\" since=\"2.0\">\n+            <description>The property array of vrHelp of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUNAME\" since=\"3.0\">\n+            <description>The property in-app menu name of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUICON\" since=\"3.0\">\n+            <description>The property in-app menu icon of setGlobalProperties</description>\n+        </element>\n+        <element name=\"KEYBOARDPROPERTIES\" since=\"3.0\">\n+            <description>The on-screen keyboard configuration of setGlobalProperties</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+/**\n+ * The different global properties.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum GlobalProperty {\n+    /**\n+     * Location of the user's seat of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 6.0.0\n+     */\n+    USER_LOCATION,\n+    /**\n+     * The property helpPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    HELPPROMPT,\n+    /**\n+     * The property timeoutPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    TIMEOUTPROMPT,\n+    /**\n+     * The property vrHelpTitle of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPTITLE,\n+    /**\n+     * The property array of vrHelp of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPITEMS,\n+    /**\n+     * The property in-app menu name of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUNAME,\n+    /**\n+     * The property in-app menu icon of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUICON,\n+    /**\n+     * The on-screen keyboard configuration of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    KEYBOARDPROPERTIES;\n+\n+    /**\n+     * Convert String to GlobalProperty\n+     *\n+     * @param value String\n+     * @return GlobalProperty\n+     */\n+    public static GlobalProperty valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+}\n+```\n+### Constants with fields\n+\n+This type of enums is divided into 3 additional types:\n+* field based on `\"internal_name\"` and `\"name\"` attributes of `<element>`\n+* field based on `\"value\"` attribute of `<element>`\n+* Special `FunctionID` Enum class\n+\n+#### Constants with field based on `\"internal_name\"` and `\"name\"` attributes\n+\n+In case if the `\"internal_name\"` attribute exists, this should be used for the constant name and the `\"name\"` attribute should be passed as a `String` field into Enum constant.\n+\n+The `\"internal_name\"` attribute should be normalized by following rules:\n+* If it starts with the same prefix as `<enum>` name, this prefix should be removed.\n+* After the prefix removal:\n+    * if the value starts from digit, the leading `_` (underscore) symbol should be added.\n+    * if the value starts with `_` (underscore) symbol and the next character is a letter of alphabet, the leading `_` (underscore) symbol should be removed.\n+\n+Constant definition:\n+```java\n+    [internal_name](\"[name]\")\n+```\n+Where `[internal_name]` is the normalized `\"internal_name\"` attribute of `<element>`, `[name]` is the `\"name\"` attribute.\n+\n+Private field:\n+```java\n+    private final String INTERNAL_NAME;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `toString` 1method should be overridden to return the private field instead of the constant name.", "originalCommit": "27c706641c7e4cc71a59c64efd85cbbd7dd27089", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1MDMxMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380250312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `getValue` 1method should be defined to return the private field value.\n          \n          \n            \n            The `getValue` method should be defined to return the private field value.", "author": "kshala-ford", "createdAt": "2020-02-17T15:38:01Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2638 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n+\n+Some required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * smartdevicelink\n+        * protocol\n+            * enums\n+                * FunctionID.java\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID and MessageType -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+The only exception is the `<enum>` named `FunctionID`. This class should be stored in `com/smartdevicelink/protocol/enums` folder, as defined in the directory structure above.\n+\n+The package definition for `FunctionID` class also is different:\n+```java\n+package com.smartdevicelink.protocol.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `SyncMsgVersion -> SdlMsgVersion`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+The constant definition could have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<element>`, if exists.\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The constant definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute exists and is \"true\".\n+\n+### Constants without fields:\n+\n+This type of enums doesn't require constructor and requires additional method `valueForString` to be defined. It should return the Enum constant based on its string name, or `null` if the constant is not found.\n+```java\n+    /**\n+     * Convert String to [enum_name]\n+     *\n+     * @param value String\n+     * @return [enum_name]\n+     */\n+    public static [enum_name] valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`\n+\n+Example:\n+\n+XML:\n+```xml\n+    <enum name=\"GlobalProperty\" since=\"1.0\">\n+        <description>The different global properties.</description>\n+        <element name=\"USER_LOCATION\" since=\"6.0\">\n+            <description>Location of the user's seat of setGlobalProperties</description>\n+        </element>\n+        <element name=\"HELPPROMPT\" since=\"1.0\">\n+            <description>The property helpPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"TIMEOUTPROMPT\" since=\"1.0\">\n+            <description>The property timeoutPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPTITLE\" since=\"2.0\">\n+            <description>The property vrHelpTitle of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPITEMS\" since=\"2.0\">\n+            <description>The property array of vrHelp of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUNAME\" since=\"3.0\">\n+            <description>The property in-app menu name of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUICON\" since=\"3.0\">\n+            <description>The property in-app menu icon of setGlobalProperties</description>\n+        </element>\n+        <element name=\"KEYBOARDPROPERTIES\" since=\"3.0\">\n+            <description>The on-screen keyboard configuration of setGlobalProperties</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+/**\n+ * The different global properties.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum GlobalProperty {\n+    /**\n+     * Location of the user's seat of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 6.0.0\n+     */\n+    USER_LOCATION,\n+    /**\n+     * The property helpPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    HELPPROMPT,\n+    /**\n+     * The property timeoutPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    TIMEOUTPROMPT,\n+    /**\n+     * The property vrHelpTitle of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPTITLE,\n+    /**\n+     * The property array of vrHelp of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPITEMS,\n+    /**\n+     * The property in-app menu name of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUNAME,\n+    /**\n+     * The property in-app menu icon of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUICON,\n+    /**\n+     * The on-screen keyboard configuration of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    KEYBOARDPROPERTIES;\n+\n+    /**\n+     * Convert String to GlobalProperty\n+     *\n+     * @param value String\n+     * @return GlobalProperty\n+     */\n+    public static GlobalProperty valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+}\n+```\n+### Constants with fields\n+\n+This type of enums is divided into 3 additional types:\n+* field based on `\"internal_name\"` and `\"name\"` attributes of `<element>`\n+* field based on `\"value\"` attribute of `<element>`\n+* Special `FunctionID` Enum class\n+\n+#### Constants with field based on `\"internal_name\"` and `\"name\"` attributes\n+\n+In case if the `\"internal_name\"` attribute exists, this should be used for the constant name and the `\"name\"` attribute should be passed as a `String` field into Enum constant.\n+\n+The `\"internal_name\"` attribute should be normalized by following rules:\n+* If it starts with the same prefix as `<enum>` name, this prefix should be removed.\n+* After the prefix removal:\n+    * if the value starts from digit, the leading `_` (underscore) symbol should be added.\n+    * if the value starts with `_` (underscore) symbol and the next character is a letter of alphabet, the leading `_` (underscore) symbol should be removed.\n+\n+Constant definition:\n+```java\n+    [internal_name](\"[name]\")\n+```\n+Where `[internal_name]` is the normalized `\"internal_name\"` attribute of `<element>`, `[name]` is the `\"name\"` attribute.\n+\n+Private field:\n+```java\n+    private final String INTERNAL_NAME;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `toString` 1method should be overridden to return the private field instead of the constant name.\n+```java\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+```\n+\n+The additional `valueForString` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForString` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"Dimension\" since=\"2.0\">\n+        <description>The supported dimensions of the GPS</description>\n+        <element name=\"NO_FIX\" internal_name=\"Dimension_NO_FIX\">\n+            <description>No GPS at all</description>\n+        </element>\n+        <element name=\"2D\" internal_name=\"Dimension_2D\">\n+            <description>Longitude and latitude</description>\n+        </element>\n+        <element name=\"3D\" internal_name=\"Dimension_3D\">\n+            <description>Longitude and latitude and altitude</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * The supported dimensions of the GPS\n+ *\n+ *\n+ * @since SmartDeviceLink 2.0.0\n+ */\n+public enum Dimension {\n+    /**\n+     * Longitude and latitude\n+     */\n+    _2D(\"2D\"),\n+    /**\n+     * Longitude and latitude and altitude\n+     */\n+    _3D(\"3D\"),\n+    /**\n+     * No GPS at all\n+     */\n+    NO_FIX(\"NO_FIX\");\n+\n+    private final String INTERNAL_NAME;\n+\n+    private Dimension(String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+\n+    public static Dimension valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for (Dimension anEnum : EnumSet.allOf(Dimension.class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+}\n+```\n+\n+#### Constants with field based on `\"value\"` attribute\n+\n+In case if the `\"value\"` attribute exists, this attribute should be passed as the `int` constant field.\n+\n+Constant definition:\n+```java\n+    [name]([value])\n+```\n+Where `[name]` is the `\"name\"` attribute of `<element>`, `[value]` is the `\"value\"` attribute.\n+\n+Private field:\n+```java\n+    private final int VALUE;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](int value) {\n+        this.VALUE = value;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `getValue` 1method should be defined to return the private field value.", "originalCommit": "27c706641c7e4cc71a59c64efd85cbbd7dd27089", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1MDY5OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380250698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static [enum_name] valueForString(int value) {\n          \n          \n            \n                public static [enum_name] valueForInt(int value) {", "author": "kshala-ford", "createdAt": "2020-02-17T15:38:38Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2638 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n+\n+Some required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * smartdevicelink\n+        * protocol\n+            * enums\n+                * FunctionID.java\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID and MessageType -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+The only exception is the `<enum>` named `FunctionID`. This class should be stored in `com/smartdevicelink/protocol/enums` folder, as defined in the directory structure above.\n+\n+The package definition for `FunctionID` class also is different:\n+```java\n+package com.smartdevicelink.protocol.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `SyncMsgVersion -> SdlMsgVersion`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+The constant definition could have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<element>`, if exists.\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The constant definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute exists and is \"true\".\n+\n+### Constants without fields:\n+\n+This type of enums doesn't require constructor and requires additional method `valueForString` to be defined. It should return the Enum constant based on its string name, or `null` if the constant is not found.\n+```java\n+    /**\n+     * Convert String to [enum_name]\n+     *\n+     * @param value String\n+     * @return [enum_name]\n+     */\n+    public static [enum_name] valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`\n+\n+Example:\n+\n+XML:\n+```xml\n+    <enum name=\"GlobalProperty\" since=\"1.0\">\n+        <description>The different global properties.</description>\n+        <element name=\"USER_LOCATION\" since=\"6.0\">\n+            <description>Location of the user's seat of setGlobalProperties</description>\n+        </element>\n+        <element name=\"HELPPROMPT\" since=\"1.0\">\n+            <description>The property helpPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"TIMEOUTPROMPT\" since=\"1.0\">\n+            <description>The property timeoutPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPTITLE\" since=\"2.0\">\n+            <description>The property vrHelpTitle of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPITEMS\" since=\"2.0\">\n+            <description>The property array of vrHelp of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUNAME\" since=\"3.0\">\n+            <description>The property in-app menu name of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUICON\" since=\"3.0\">\n+            <description>The property in-app menu icon of setGlobalProperties</description>\n+        </element>\n+        <element name=\"KEYBOARDPROPERTIES\" since=\"3.0\">\n+            <description>The on-screen keyboard configuration of setGlobalProperties</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+/**\n+ * The different global properties.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum GlobalProperty {\n+    /**\n+     * Location of the user's seat of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 6.0.0\n+     */\n+    USER_LOCATION,\n+    /**\n+     * The property helpPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    HELPPROMPT,\n+    /**\n+     * The property timeoutPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    TIMEOUTPROMPT,\n+    /**\n+     * The property vrHelpTitle of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPTITLE,\n+    /**\n+     * The property array of vrHelp of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPITEMS,\n+    /**\n+     * The property in-app menu name of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUNAME,\n+    /**\n+     * The property in-app menu icon of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUICON,\n+    /**\n+     * The on-screen keyboard configuration of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    KEYBOARDPROPERTIES;\n+\n+    /**\n+     * Convert String to GlobalProperty\n+     *\n+     * @param value String\n+     * @return GlobalProperty\n+     */\n+    public static GlobalProperty valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+}\n+```\n+### Constants with fields\n+\n+This type of enums is divided into 3 additional types:\n+* field based on `\"internal_name\"` and `\"name\"` attributes of `<element>`\n+* field based on `\"value\"` attribute of `<element>`\n+* Special `FunctionID` Enum class\n+\n+#### Constants with field based on `\"internal_name\"` and `\"name\"` attributes\n+\n+In case if the `\"internal_name\"` attribute exists, this should be used for the constant name and the `\"name\"` attribute should be passed as a `String` field into Enum constant.\n+\n+The `\"internal_name\"` attribute should be normalized by following rules:\n+* If it starts with the same prefix as `<enum>` name, this prefix should be removed.\n+* After the prefix removal:\n+    * if the value starts from digit, the leading `_` (underscore) symbol should be added.\n+    * if the value starts with `_` (underscore) symbol and the next character is a letter of alphabet, the leading `_` (underscore) symbol should be removed.\n+\n+Constant definition:\n+```java\n+    [internal_name](\"[name]\")\n+```\n+Where `[internal_name]` is the normalized `\"internal_name\"` attribute of `<element>`, `[name]` is the `\"name\"` attribute.\n+\n+Private field:\n+```java\n+    private final String INTERNAL_NAME;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `toString` 1method should be overridden to return the private field instead of the constant name.\n+```java\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+```\n+\n+The additional `valueForString` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForString` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"Dimension\" since=\"2.0\">\n+        <description>The supported dimensions of the GPS</description>\n+        <element name=\"NO_FIX\" internal_name=\"Dimension_NO_FIX\">\n+            <description>No GPS at all</description>\n+        </element>\n+        <element name=\"2D\" internal_name=\"Dimension_2D\">\n+            <description>Longitude and latitude</description>\n+        </element>\n+        <element name=\"3D\" internal_name=\"Dimension_3D\">\n+            <description>Longitude and latitude and altitude</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * The supported dimensions of the GPS\n+ *\n+ *\n+ * @since SmartDeviceLink 2.0.0\n+ */\n+public enum Dimension {\n+    /**\n+     * Longitude and latitude\n+     */\n+    _2D(\"2D\"),\n+    /**\n+     * Longitude and latitude and altitude\n+     */\n+    _3D(\"3D\"),\n+    /**\n+     * No GPS at all\n+     */\n+    NO_FIX(\"NO_FIX\");\n+\n+    private final String INTERNAL_NAME;\n+\n+    private Dimension(String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+\n+    public static Dimension valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for (Dimension anEnum : EnumSet.allOf(Dimension.class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+}\n+```\n+\n+#### Constants with field based on `\"value\"` attribute\n+\n+In case if the `\"value\"` attribute exists, this attribute should be passed as the `int` constant field.\n+\n+Constant definition:\n+```java\n+    [name]([value])\n+```\n+Where `[name]` is the `\"name\"` attribute of `<element>`, `[value]` is the `\"value\"` attribute.\n+\n+Private field:\n+```java\n+    private final int VALUE;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](int value) {\n+        this.VALUE = value;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `getValue` 1method should be defined to return the private field value.\n+```java\n+    public int getValue(){\n+        return VALUE;\n+    }\n+```\n+\n+The additional `valueForInt` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(int value) {", "originalCommit": "27c706641c7e4cc71a59c64efd85cbbd7dd27089", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1Mjc1Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380252756", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Struct class should should extend the base `RPCStruct` class:\n          \n          \n            \n            The Struct class should extend the base `RPCStruct` class:", "author": "kshala-ford", "createdAt": "2020-02-17T15:42:23Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2638 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n+\n+Some required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * smartdevicelink\n+        * protocol\n+            * enums\n+                * FunctionID.java\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID and MessageType -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+The only exception is the `<enum>` named `FunctionID`. This class should be stored in `com/smartdevicelink/protocol/enums` folder, as defined in the directory structure above.\n+\n+The package definition for `FunctionID` class also is different:\n+```java\n+package com.smartdevicelink.protocol.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `SyncMsgVersion -> SdlMsgVersion`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+The constant definition could have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<element>`, if exists.\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The constant definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute exists and is \"true\".\n+\n+### Constants without fields:\n+\n+This type of enums doesn't require constructor and requires additional method `valueForString` to be defined. It should return the Enum constant based on its string name, or `null` if the constant is not found.\n+```java\n+    /**\n+     * Convert String to [enum_name]\n+     *\n+     * @param value String\n+     * @return [enum_name]\n+     */\n+    public static [enum_name] valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`\n+\n+Example:\n+\n+XML:\n+```xml\n+    <enum name=\"GlobalProperty\" since=\"1.0\">\n+        <description>The different global properties.</description>\n+        <element name=\"USER_LOCATION\" since=\"6.0\">\n+            <description>Location of the user's seat of setGlobalProperties</description>\n+        </element>\n+        <element name=\"HELPPROMPT\" since=\"1.0\">\n+            <description>The property helpPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"TIMEOUTPROMPT\" since=\"1.0\">\n+            <description>The property timeoutPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPTITLE\" since=\"2.0\">\n+            <description>The property vrHelpTitle of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPITEMS\" since=\"2.0\">\n+            <description>The property array of vrHelp of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUNAME\" since=\"3.0\">\n+            <description>The property in-app menu name of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUICON\" since=\"3.0\">\n+            <description>The property in-app menu icon of setGlobalProperties</description>\n+        </element>\n+        <element name=\"KEYBOARDPROPERTIES\" since=\"3.0\">\n+            <description>The on-screen keyboard configuration of setGlobalProperties</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+/**\n+ * The different global properties.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum GlobalProperty {\n+    /**\n+     * Location of the user's seat of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 6.0.0\n+     */\n+    USER_LOCATION,\n+    /**\n+     * The property helpPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    HELPPROMPT,\n+    /**\n+     * The property timeoutPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    TIMEOUTPROMPT,\n+    /**\n+     * The property vrHelpTitle of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPTITLE,\n+    /**\n+     * The property array of vrHelp of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPITEMS,\n+    /**\n+     * The property in-app menu name of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUNAME,\n+    /**\n+     * The property in-app menu icon of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUICON,\n+    /**\n+     * The on-screen keyboard configuration of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    KEYBOARDPROPERTIES;\n+\n+    /**\n+     * Convert String to GlobalProperty\n+     *\n+     * @param value String\n+     * @return GlobalProperty\n+     */\n+    public static GlobalProperty valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+}\n+```\n+### Constants with fields\n+\n+This type of enums is divided into 3 additional types:\n+* field based on `\"internal_name\"` and `\"name\"` attributes of `<element>`\n+* field based on `\"value\"` attribute of `<element>`\n+* Special `FunctionID` Enum class\n+\n+#### Constants with field based on `\"internal_name\"` and `\"name\"` attributes\n+\n+In case if the `\"internal_name\"` attribute exists, this should be used for the constant name and the `\"name\"` attribute should be passed as a `String` field into Enum constant.\n+\n+The `\"internal_name\"` attribute should be normalized by following rules:\n+* If it starts with the same prefix as `<enum>` name, this prefix should be removed.\n+* After the prefix removal:\n+    * if the value starts from digit, the leading `_` (underscore) symbol should be added.\n+    * if the value starts with `_` (underscore) symbol and the next character is a letter of alphabet, the leading `_` (underscore) symbol should be removed.\n+\n+Constant definition:\n+```java\n+    [internal_name](\"[name]\")\n+```\n+Where `[internal_name]` is the normalized `\"internal_name\"` attribute of `<element>`, `[name]` is the `\"name\"` attribute.\n+\n+Private field:\n+```java\n+    private final String INTERNAL_NAME;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `toString` 1method should be overridden to return the private field instead of the constant name.\n+```java\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+```\n+\n+The additional `valueForString` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForString` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"Dimension\" since=\"2.0\">\n+        <description>The supported dimensions of the GPS</description>\n+        <element name=\"NO_FIX\" internal_name=\"Dimension_NO_FIX\">\n+            <description>No GPS at all</description>\n+        </element>\n+        <element name=\"2D\" internal_name=\"Dimension_2D\">\n+            <description>Longitude and latitude</description>\n+        </element>\n+        <element name=\"3D\" internal_name=\"Dimension_3D\">\n+            <description>Longitude and latitude and altitude</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * The supported dimensions of the GPS\n+ *\n+ *\n+ * @since SmartDeviceLink 2.0.0\n+ */\n+public enum Dimension {\n+    /**\n+     * Longitude and latitude\n+     */\n+    _2D(\"2D\"),\n+    /**\n+     * Longitude and latitude and altitude\n+     */\n+    _3D(\"3D\"),\n+    /**\n+     * No GPS at all\n+     */\n+    NO_FIX(\"NO_FIX\");\n+\n+    private final String INTERNAL_NAME;\n+\n+    private Dimension(String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+\n+    public static Dimension valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for (Dimension anEnum : EnumSet.allOf(Dimension.class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+}\n+```\n+\n+#### Constants with field based on `\"value\"` attribute\n+\n+In case if the `\"value\"` attribute exists, this attribute should be passed as the `int` constant field.\n+\n+Constant definition:\n+```java\n+    [name]([value])\n+```\n+Where `[name]` is the `\"name\"` attribute of `<element>`, `[value]` is the `\"value\"` attribute.\n+\n+Private field:\n+```java\n+    private final int VALUE;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](int value) {\n+        this.VALUE = value;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `getValue` 1method should be defined to return the private field value.\n+```java\n+    public int getValue(){\n+        return VALUE;\n+    }\n+```\n+\n+The additional `valueForInt` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(int value) {\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForInt` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"PredefinedWindows\" since=\"6.0\">\n+        <element name=\"DEFAULT_WINDOW\" value=\"0\">\n+            <description>The default window is a main window pre-created on behalf of the app.</description>\n+        </element>\n+        <element name=\"PRIMARY_WIDGET\" value=\"1\">\n+            <description>The primary widget of the app.</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ *\n+ * @since SmartDeviceLink 6.0.0\n+ */\n+public enum PredefinedWindows {\n+    /**\n+     * The default window is a main window pre-created on behalf of the app.\n+     */\n+    DEFAULT_WINDOW(0),\n+    /**\n+     * The primary widget of the app.\n+     */\n+    PRIMARY_WIDGET(1);\n+\n+    private final int VALUE;\n+    /**\n+     * Private constructor\n+     */\n+    private PredefinedWindows (int value) {\n+        this.VALUE = value;\n+    }\n+\n+    public static PredefinedWindows valueForInt(int value) {\n+        for (PredefinedWindows anEnum : EnumSet.allOf(PredefinedWindows.class)) {\n+            if (anEnum.getValue() == value) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public int getValue(){\n+        return VALUE;\n+    }\n+}\n+```\n+\n+### `FunctionID` Enum class\n+\n+Additionally to general rules for constant names and its fields there are some rules for the `FunctionID` Enum class:\n+  1. Uses of the `\"name\"` attribute shall be normalized by the removal of the ID suffix, e.g. `RegisterAppInterfaceID -> RegisterAppInterface`. \n+  1. The constant name should be `SCREAMING_SNIKE_CASE` formatted;\n+  1. The constant has 2 fields, the first is the `int` value of the `\"value\"` attribute and the second is the `String` value of normalized `\"name\"` attribute.\n+\n+Constant definition:\n+```java\n+    [constant_name]([value], \"[name]\")\n+```\n+Where `[constant_name]` is the normalized and `SCREAMING_SNIKE_CASE` formatted `\"name\"` attribute of `<element>`, `[name]` is the just normalized `\"name\"` attribute, `[value]` is the `\"value\"` attribute.\n+\n+Private fields:\n+```java\n+    private final int ID;\n+    private final String JSON_NAME;\n+```\n+\n+The private constructor should be defined to accept the value and name from the constant and and set the private fields.\n+```java\n+    private FunctionID(int id, String jsonName) {\n+        this.ID = id;\n+        this.JSON_NAME = jsonName;\n+    }\n+```\n+\n+The next custom imports, fields and methods are required for `FunctionID` Enum class:\n+\n+Imports:\n+```java\n+import java.util.EnumSet;\n+import java.util.Map.Entry;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+```\n+\n+Fields:\n+```java\n+    // MOCKED FUNCTIONS (NOT SENT FROM HEAD-UNIT)\n+    ON_LOCK_SCREEN_STATUS(-1, \"OnLockScreenStatus\"),\n+    ON_SDL_CHOICE_CHOSEN(-1, \"OnSdlChoiceChosen\"),\n+    ON_STREAM_RPC(-1, \"OnStreamRPC\"),\n+    STREAM_RPC(-1, \"StreamRPC\");\n+\n+    public static final int INVALID_ID = -1;\n+```\n+\n+Methods:\n+```java\n+    public int getId(){\n+        return this.ID;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.JSON_NAME;\n+    }\n+\n+    private static void initFunctionMap() {\n+        functionMap = new HashMap<String, Integer>(values().length);\n+\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            functionMap.put(value.toString(), value.getId());\n+        }\n+    }\n+\n+    public static String getFunctionName(int i) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Iterator<Entry<String, Integer>> iterator = functionMap.entrySet().iterator();\n+        while(iterator.hasNext()) {\n+            Entry<String, Integer> thisEntry = iterator.next();\n+            if(Integer.valueOf(i).equals(thisEntry.getValue())) {\n+                return thisEntry.getKey();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static int getFunctionId(String functionName) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Integer result = functionMap.get(functionName);\n+        return ( result == null ) ? INVALID_ID : result;\n+    }\n+\n+    /**\n+     * This method gives the corresponding FunctionID enum value for a string RPC\n+     *\n+     * @param name String value represents the name of the RPC\n+     * @return FunctionID represents the equivalent enum value for the provided string\n+     */\n+    public static FunctionID getEnumForString(String name) {\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            if(value.JSON_NAME.equals(name)){\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+\n+\n+\n+Full example:\n+\n+XML:\n+```xml\n+<enum name=\"FunctionID\" internal_scope=\"base\" since=\"1.0\">\n+    <description>Enumeration linking function names with function IDs in SmartDeviceLink protocol. Assumes enumeration starts at value 0.</description>\n+    <element name=\"RESERVED\" value=\"0\" since=\"1.0\" />\n+    <element name=\"RegisterAppInterfaceID\" value=\"1\" hexvalue=\"1\" since=\"1.0\" />\n+    <element name=\"SliderID\" value=\"26\" hexvalue=\"1A\" since=\"2.0\" />\n+</enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.protocol.enums;\n+\n+import java.util.EnumSet;\n+import java.util.Map.Entry;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+\n+/**\n+ * Enumeration linking function names with function IDs in SmartDeviceLink protocol. Assumes enumeration starts at\n+ * value 0.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum FunctionID {\n+    /**\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    RESERVED(0, \"RESERVED\"),\n+    /**\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    REGISTER_APP_INTERFACE(1, \"RegisterAppInterface\");\n+    /**\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    SLIDER(26, \"Slider\"),\n+\n+    // MOCKED FUNCTIONS (NOT SENT FROM HEAD-UNIT)\n+    ON_LOCK_SCREEN_STATUS(-1, \"OnLockScreenStatus\"),\n+    ON_SDL_CHOICE_CHOSEN(-1, \"OnSdlChoiceChosen\"),\n+    ON_STREAM_RPC(-1, \"OnStreamRPC\"),\n+    STREAM_RPC(-1, \"StreamRPC\");\n+\n+    public static final int                 INVALID_ID = -1;\n+\n+    private static HashMap<String, Integer> functionMap;\n+\n+    private final int                       ID;\n+    private final String                    JSON_NAME;\n+\n+    private FunctionID(int id, String jsonName) {\n+        this.ID = id;\n+        this.JSON_NAME = jsonName;\n+    }\n+\n+    public int getId(){\n+        return this.ID;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.JSON_NAME;\n+    }\n+\n+    private static void initFunctionMap() {\n+        functionMap = new HashMap<String, Integer>(values().length);\n+\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            functionMap.put(value.toString(), value.getId());\n+        }\n+    }\n+\n+    public static String getFunctionName(int i) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Iterator<Entry<String, Integer>> iterator = functionMap.entrySet().iterator();\n+        while(iterator.hasNext()) {\n+            Entry<String, Integer> thisEntry = iterator.next();\n+            if(Integer.valueOf(i).equals(thisEntry.getValue())) {\n+                return thisEntry.getKey();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static int getFunctionId(String functionName) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Integer result = functionMap.get(functionName);\n+        return ( result == null ) ? INVALID_ID : result;\n+    }\n+\n+    /**\n+     * This method gives the corresponding FunctionID enum value for a string RPC\n+     *\n+     * @param name String value represents the name of the RPC\n+     * @return FunctionID represents the equivalent enum value for the provided string\n+     */\n+    public static FunctionID getEnumForString(String name) {\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            if(value.JSON_NAME.equals(name)){\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+}\n+```\n+\n+## `<struct>`\n+\n+The Struct class should should extend the base `RPCStruct` class:", "originalCommit": "27c706641c7e4cc71a59c64efd85cbbd7dd27089", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NjMwNg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380256306", "bodyText": "I am curious about the implementation. What's the order of the constructor parameters? Is it following the order of mandatory params elements in the struct?", "author": "kshala-ford", "createdAt": "2020-02-17T15:49:02Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2638 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n+\n+Some required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * smartdevicelink\n+        * protocol\n+            * enums\n+                * FunctionID.java\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID and MessageType -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+The only exception is the `<enum>` named `FunctionID`. This class should be stored in `com/smartdevicelink/protocol/enums` folder, as defined in the directory structure above.\n+\n+The package definition for `FunctionID` class also is different:\n+```java\n+package com.smartdevicelink.protocol.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `SyncMsgVersion -> SdlMsgVersion`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+The constant definition could have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<element>`, if exists.\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The constant definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute exists and is \"true\".\n+\n+### Constants without fields:\n+\n+This type of enums doesn't require constructor and requires additional method `valueForString` to be defined. It should return the Enum constant based on its string name, or `null` if the constant is not found.\n+```java\n+    /**\n+     * Convert String to [enum_name]\n+     *\n+     * @param value String\n+     * @return [enum_name]\n+     */\n+    public static [enum_name] valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`\n+\n+Example:\n+\n+XML:\n+```xml\n+    <enum name=\"GlobalProperty\" since=\"1.0\">\n+        <description>The different global properties.</description>\n+        <element name=\"USER_LOCATION\" since=\"6.0\">\n+            <description>Location of the user's seat of setGlobalProperties</description>\n+        </element>\n+        <element name=\"HELPPROMPT\" since=\"1.0\">\n+            <description>The property helpPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"TIMEOUTPROMPT\" since=\"1.0\">\n+            <description>The property timeoutPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPTITLE\" since=\"2.0\">\n+            <description>The property vrHelpTitle of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPITEMS\" since=\"2.0\">\n+            <description>The property array of vrHelp of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUNAME\" since=\"3.0\">\n+            <description>The property in-app menu name of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUICON\" since=\"3.0\">\n+            <description>The property in-app menu icon of setGlobalProperties</description>\n+        </element>\n+        <element name=\"KEYBOARDPROPERTIES\" since=\"3.0\">\n+            <description>The on-screen keyboard configuration of setGlobalProperties</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+/**\n+ * The different global properties.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum GlobalProperty {\n+    /**\n+     * Location of the user's seat of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 6.0.0\n+     */\n+    USER_LOCATION,\n+    /**\n+     * The property helpPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    HELPPROMPT,\n+    /**\n+     * The property timeoutPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    TIMEOUTPROMPT,\n+    /**\n+     * The property vrHelpTitle of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPTITLE,\n+    /**\n+     * The property array of vrHelp of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPITEMS,\n+    /**\n+     * The property in-app menu name of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUNAME,\n+    /**\n+     * The property in-app menu icon of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUICON,\n+    /**\n+     * The on-screen keyboard configuration of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    KEYBOARDPROPERTIES;\n+\n+    /**\n+     * Convert String to GlobalProperty\n+     *\n+     * @param value String\n+     * @return GlobalProperty\n+     */\n+    public static GlobalProperty valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+}\n+```\n+### Constants with fields\n+\n+This type of enums is divided into 3 additional types:\n+* field based on `\"internal_name\"` and `\"name\"` attributes of `<element>`\n+* field based on `\"value\"` attribute of `<element>`\n+* Special `FunctionID` Enum class\n+\n+#### Constants with field based on `\"internal_name\"` and `\"name\"` attributes\n+\n+In case if the `\"internal_name\"` attribute exists, this should be used for the constant name and the `\"name\"` attribute should be passed as a `String` field into Enum constant.\n+\n+The `\"internal_name\"` attribute should be normalized by following rules:\n+* If it starts with the same prefix as `<enum>` name, this prefix should be removed.\n+* After the prefix removal:\n+    * if the value starts from digit, the leading `_` (underscore) symbol should be added.\n+    * if the value starts with `_` (underscore) symbol and the next character is a letter of alphabet, the leading `_` (underscore) symbol should be removed.\n+\n+Constant definition:\n+```java\n+    [internal_name](\"[name]\")\n+```\n+Where `[internal_name]` is the normalized `\"internal_name\"` attribute of `<element>`, `[name]` is the `\"name\"` attribute.\n+\n+Private field:\n+```java\n+    private final String INTERNAL_NAME;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `toString` 1method should be overridden to return the private field instead of the constant name.\n+```java\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+```\n+\n+The additional `valueForString` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForString` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"Dimension\" since=\"2.0\">\n+        <description>The supported dimensions of the GPS</description>\n+        <element name=\"NO_FIX\" internal_name=\"Dimension_NO_FIX\">\n+            <description>No GPS at all</description>\n+        </element>\n+        <element name=\"2D\" internal_name=\"Dimension_2D\">\n+            <description>Longitude and latitude</description>\n+        </element>\n+        <element name=\"3D\" internal_name=\"Dimension_3D\">\n+            <description>Longitude and latitude and altitude</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * The supported dimensions of the GPS\n+ *\n+ *\n+ * @since SmartDeviceLink 2.0.0\n+ */\n+public enum Dimension {\n+    /**\n+     * Longitude and latitude\n+     */\n+    _2D(\"2D\"),\n+    /**\n+     * Longitude and latitude and altitude\n+     */\n+    _3D(\"3D\"),\n+    /**\n+     * No GPS at all\n+     */\n+    NO_FIX(\"NO_FIX\");\n+\n+    private final String INTERNAL_NAME;\n+\n+    private Dimension(String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+\n+    public static Dimension valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for (Dimension anEnum : EnumSet.allOf(Dimension.class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+}\n+```\n+\n+#### Constants with field based on `\"value\"` attribute\n+\n+In case if the `\"value\"` attribute exists, this attribute should be passed as the `int` constant field.\n+\n+Constant definition:\n+```java\n+    [name]([value])\n+```\n+Where `[name]` is the `\"name\"` attribute of `<element>`, `[value]` is the `\"value\"` attribute.\n+\n+Private field:\n+```java\n+    private final int VALUE;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](int value) {\n+        this.VALUE = value;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `getValue` 1method should be defined to return the private field value.\n+```java\n+    public int getValue(){\n+        return VALUE;\n+    }\n+```\n+\n+The additional `valueForInt` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(int value) {\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForInt` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"PredefinedWindows\" since=\"6.0\">\n+        <element name=\"DEFAULT_WINDOW\" value=\"0\">\n+            <description>The default window is a main window pre-created on behalf of the app.</description>\n+        </element>\n+        <element name=\"PRIMARY_WIDGET\" value=\"1\">\n+            <description>The primary widget of the app.</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ *\n+ * @since SmartDeviceLink 6.0.0\n+ */\n+public enum PredefinedWindows {\n+    /**\n+     * The default window is a main window pre-created on behalf of the app.\n+     */\n+    DEFAULT_WINDOW(0),\n+    /**\n+     * The primary widget of the app.\n+     */\n+    PRIMARY_WIDGET(1);\n+\n+    private final int VALUE;\n+    /**\n+     * Private constructor\n+     */\n+    private PredefinedWindows (int value) {\n+        this.VALUE = value;\n+    }\n+\n+    public static PredefinedWindows valueForInt(int value) {\n+        for (PredefinedWindows anEnum : EnumSet.allOf(PredefinedWindows.class)) {\n+            if (anEnum.getValue() == value) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public int getValue(){\n+        return VALUE;\n+    }\n+}\n+```\n+\n+### `FunctionID` Enum class\n+\n+Additionally to general rules for constant names and its fields there are some rules for the `FunctionID` Enum class:\n+  1. Uses of the `\"name\"` attribute shall be normalized by the removal of the ID suffix, e.g. `RegisterAppInterfaceID -> RegisterAppInterface`. \n+  1. The constant name should be `SCREAMING_SNIKE_CASE` formatted;\n+  1. The constant has 2 fields, the first is the `int` value of the `\"value\"` attribute and the second is the `String` value of normalized `\"name\"` attribute.\n+\n+Constant definition:\n+```java\n+    [constant_name]([value], \"[name]\")\n+```\n+Where `[constant_name]` is the normalized and `SCREAMING_SNIKE_CASE` formatted `\"name\"` attribute of `<element>`, `[name]` is the just normalized `\"name\"` attribute, `[value]` is the `\"value\"` attribute.\n+\n+Private fields:\n+```java\n+    private final int ID;\n+    private final String JSON_NAME;\n+```\n+\n+The private constructor should be defined to accept the value and name from the constant and and set the private fields.\n+```java\n+    private FunctionID(int id, String jsonName) {\n+        this.ID = id;\n+        this.JSON_NAME = jsonName;\n+    }\n+```\n+\n+The next custom imports, fields and methods are required for `FunctionID` Enum class:\n+\n+Imports:\n+```java\n+import java.util.EnumSet;\n+import java.util.Map.Entry;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+```\n+\n+Fields:\n+```java\n+    // MOCKED FUNCTIONS (NOT SENT FROM HEAD-UNIT)\n+    ON_LOCK_SCREEN_STATUS(-1, \"OnLockScreenStatus\"),\n+    ON_SDL_CHOICE_CHOSEN(-1, \"OnSdlChoiceChosen\"),\n+    ON_STREAM_RPC(-1, \"OnStreamRPC\"),\n+    STREAM_RPC(-1, \"StreamRPC\");\n+\n+    public static final int INVALID_ID = -1;\n+```\n+\n+Methods:\n+```java\n+    public int getId(){\n+        return this.ID;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.JSON_NAME;\n+    }\n+\n+    private static void initFunctionMap() {\n+        functionMap = new HashMap<String, Integer>(values().length);\n+\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            functionMap.put(value.toString(), value.getId());\n+        }\n+    }\n+\n+    public static String getFunctionName(int i) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Iterator<Entry<String, Integer>> iterator = functionMap.entrySet().iterator();\n+        while(iterator.hasNext()) {\n+            Entry<String, Integer> thisEntry = iterator.next();\n+            if(Integer.valueOf(i).equals(thisEntry.getValue())) {\n+                return thisEntry.getKey();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static int getFunctionId(String functionName) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Integer result = functionMap.get(functionName);\n+        return ( result == null ) ? INVALID_ID : result;\n+    }\n+\n+    /**\n+     * This method gives the corresponding FunctionID enum value for a string RPC\n+     *\n+     * @param name String value represents the name of the RPC\n+     * @return FunctionID represents the equivalent enum value for the provided string\n+     */\n+    public static FunctionID getEnumForString(String name) {\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            if(value.JSON_NAME.equals(name)){\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+\n+\n+\n+Full example:\n+\n+XML:\n+```xml\n+<enum name=\"FunctionID\" internal_scope=\"base\" since=\"1.0\">\n+    <description>Enumeration linking function names with function IDs in SmartDeviceLink protocol. Assumes enumeration starts at value 0.</description>\n+    <element name=\"RESERVED\" value=\"0\" since=\"1.0\" />\n+    <element name=\"RegisterAppInterfaceID\" value=\"1\" hexvalue=\"1\" since=\"1.0\" />\n+    <element name=\"SliderID\" value=\"26\" hexvalue=\"1A\" since=\"2.0\" />\n+</enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.protocol.enums;\n+\n+import java.util.EnumSet;\n+import java.util.Map.Entry;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+\n+/**\n+ * Enumeration linking function names with function IDs in SmartDeviceLink protocol. Assumes enumeration starts at\n+ * value 0.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum FunctionID {\n+    /**\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    RESERVED(0, \"RESERVED\"),\n+    /**\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    REGISTER_APP_INTERFACE(1, \"RegisterAppInterface\");\n+    /**\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    SLIDER(26, \"Slider\"),\n+\n+    // MOCKED FUNCTIONS (NOT SENT FROM HEAD-UNIT)\n+    ON_LOCK_SCREEN_STATUS(-1, \"OnLockScreenStatus\"),\n+    ON_SDL_CHOICE_CHOSEN(-1, \"OnSdlChoiceChosen\"),\n+    ON_STREAM_RPC(-1, \"OnStreamRPC\"),\n+    STREAM_RPC(-1, \"StreamRPC\");\n+\n+    public static final int                 INVALID_ID = -1;\n+\n+    private static HashMap<String, Integer> functionMap;\n+\n+    private final int                       ID;\n+    private final String                    JSON_NAME;\n+\n+    private FunctionID(int id, String jsonName) {\n+        this.ID = id;\n+        this.JSON_NAME = jsonName;\n+    }\n+\n+    public int getId(){\n+        return this.ID;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.JSON_NAME;\n+    }\n+\n+    private static void initFunctionMap() {\n+        functionMap = new HashMap<String, Integer>(values().length);\n+\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            functionMap.put(value.toString(), value.getId());\n+        }\n+    }\n+\n+    public static String getFunctionName(int i) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Iterator<Entry<String, Integer>> iterator = functionMap.entrySet().iterator();\n+        while(iterator.hasNext()) {\n+            Entry<String, Integer> thisEntry = iterator.next();\n+            if(Integer.valueOf(i).equals(thisEntry.getValue())) {\n+                return thisEntry.getKey();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static int getFunctionId(String functionName) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Integer result = functionMap.get(functionName);\n+        return ( result == null ) ? INVALID_ID : result;\n+    }\n+\n+    /**\n+     * This method gives the corresponding FunctionID enum value for a string RPC\n+     *\n+     * @param name String value represents the name of the RPC\n+     * @return FunctionID represents the equivalent enum value for the provided string\n+     */\n+    public static FunctionID getEnumForString(String name) {\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            if(value.JSON_NAME.equals(name)){\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+}\n+```\n+\n+## `<struct>`\n+\n+The Struct class should should extend the base `RPCStruct` class:\n+```java\n+import com.smartdevicelink.proxy.RPCStruct;\n+```\n+\n+The name of the class is the value from the `\"name\"` attribute of `<struct>`. \n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>[param_name]</td>\n+ *      <td>[param_type|List<[param_type]>]</td>\n+ *      <td>[param_description]</td>\n+ *      <td>[Y|N]</td>\n+ *      <td>SmartDeviceLink [param_since]</td>\n+ *  </tr>\n+ * </table>\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<struct>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+* The `Parameter List` table should include all set of `<param>`.\n+* `[param_name]` is `\"name\"` attribute of the `<param>`.\n+* `[param_type]` is `\"type\"` attribute of the `<param>`, `[List<[param_type]>]` applied if `\"array\"` attribute of `<param>` is \"true\".\n+* `[param_description]` is `<description>` of the `<param>`, could be empty if not exists.\n+* `[Y|N]` means exactly `Y` character, if `\"mandatory\"` attribute of the `<param>` exists and is \"true\", `N` character otherwise.\n+* `[param_since]` should be present, if the `\"since\"` attribute of the `<param>` exists, and `[since]` is the `Major.Minor.Patch` formatted value of this attribute.\n+\n+There are all Enum classes that are used in the represented structure should be additionally imported. \n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<param>` should be mapped to the `public static final String` fields of the new class by following rules:\n+\n+1. The name of the fields is the `SCREAMING_SNAKE_CASE` formatted value of the `\"name\"` attribute of `<param>` with the `KEY_` prefix.\n+1. The value of the fields is the value of the `\"name\"` attribute of `<param>`\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `KEY_SYNC_MSG_VERSION -> KEY_SDL_MSG_VERSION`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+Field definition template:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+@Deprecated\n+public static final String [normalized_name] = \"[name]\";\n+```\n+Where:\n+* `[normalized_name]` is the normalized and `SCREAMING_SNAKE_CASE` formatted `\"name\"` attribute of `<param>`.\n+* `[name]` is the `\"name\"` attribute of `<param>`.\n+* `[description]` is `<description>` of the `<param>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The field definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<param>` exists and is \"true\".\n+\n+The Struct class contains 3 different constructors:\n+* without parameters.\n+* with `Hashtable` parameter.\n+* with all required parameters, based on `\"mandatory\"` attribute of the `<param>`\n+\n+### Constructor without parameters\n+\n+Template:\n+```java\n+    /**\n+     * Constructs a new [name] object\n+     */\n+    public [name]() { }\n+```\n+Where `[name]` is the value from the `\"name\"` attribute of `<struct>`.\n+\n+### Constructor with `Hashtable` parameter\n+\n+This constructor requires the import of `Hashtable` class\n+```java\n+import java.util.Hashtable;\n+```\n+\n+Template:\n+```java\n+    /**\n+     * Constructs a new [name] object indicated by the Hashtable parameter\\\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public [name](Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+```\n+Where `[name]` is the value from the `\"name\"` attribute of `<struct>`.\n+\n+### Constructor with all required parameters, based on `\"mandatory\"` attribute of the `<param>`", "originalCommit": "27c706641c7e4cc71a59c64efd85cbbd7dd27089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3ODEzNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380278135", "bodyText": "I am curious about the implementation. What's the order of the constructor parameters? Is it following the order of mandatory params elements in the struct?\n\nYes, it's following the order of mandatory parameters", "author": null, "createdAt": "2020-02-17T16:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NjMwNg=="}], "type": "inlineReview"}, {"oid": "53998b01d128548ad4848a5bcda9c4a6853be6b8", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/53998b01d128548ad4848a5bcda9c4a6853be6b8", "message": "Apply suggestions from code review\n\nCo-Authored-By: Kujtim Shala <kshala@ford.com>", "committedDate": "2020-02-17T16:39:23Z", "type": "commit"}, {"oid": "ffb3474105615caa428f32ec8d91f477f3285741", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ffb3474105615caa428f32ec8d91f477f3285741", "message": "More wide rule for responses", "committedDate": "2020-02-17T16:49:17Z", "type": "commit"}, {"oid": "a5a86d1c5f1bab8393c24a84dfaa96bb221e67fc", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a5a86d1c5f1bab8393c24a84dfaa96bb221e67fc", "message": "Added notice regarding Response functions ended with the 'Response' word itself.", "committedDate": "2020-02-17T16:53:41Z", "type": "commit"}, {"oid": "8ebf010e57cbfc1c1041ac14d734e2df84b8347e", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/8ebf010e57cbfc1c1041ac14d734e2df84b8347e", "message": "renaming groovy files to java", "committedDate": "2020-02-18T15:19:46Z", "type": "commit"}, {"oid": "d81628f15be7038419fcdbf4769690082cf59867", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/d81628f15be7038419fcdbf4769690082cf59867", "message": "renaming groovy files to java", "committedDate": "2020-02-18T15:22:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjgwMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380802802", "bodyText": "Is there a specific reason for removing these two lines?", "author": "bilal-alsharifi", "createdAt": "2020-02-18T16:53:52Z", "path": ".gitignore", "diffHunk": "@@ -69,8 +69,14 @@ proguard/\n build/\n .gradle\n /local.properties\n-/.idea/workspace.xml", "originalCommit": "d81628f15be7038419fcdbf4769690082cf59867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0OTYxMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r381949612", "bodyText": "This was just removed because whole .idea/ already included in .gitignore above. Maybe I'm missing something, so I will restore this 2 lines.", "author": null, "createdAt": "2020-02-20T11:46:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTY1MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380881650", "bodyText": "Can we remove the extra \\ in the end of this line? this also should be removed from the javadoc for the generated code. Also should be removed from all samples in this file that is generated from that template.", "author": "bilal-alsharifi", "createdAt": "2020-02-18T19:19:35Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2638 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n+\n+Some required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * smartdevicelink\n+        * protocol\n+            * enums\n+                * FunctionID.java\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID and MessageType -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+The only exception is the `<enum>` named `FunctionID`. This class should be stored in `com/smartdevicelink/protocol/enums` folder, as defined in the directory structure above.\n+\n+The package definition for `FunctionID` class also is different:\n+```java\n+package com.smartdevicelink.protocol.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"name\"` doesn't end with it and the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `SyncMsgVersion -> SdlMsgVersion`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+The constant definition could have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<element>`, if exists.\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The constant definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute exists and is \"true\".\n+\n+### Constants without fields:\n+\n+This type of enums doesn't require constructor and requires additional method `valueForString` to be defined. It should return the Enum constant based on its string name, or `null` if the constant is not found.\n+```java\n+    /**\n+     * Convert String to [enum_name]\n+     *\n+     * @param value String\n+     * @return [enum_name]\n+     */\n+    public static [enum_name] valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`\n+\n+Example:\n+\n+XML:\n+```xml\n+    <enum name=\"GlobalProperty\" since=\"1.0\">\n+        <description>The different global properties.</description>\n+        <element name=\"USER_LOCATION\" since=\"6.0\">\n+            <description>Location of the user's seat of setGlobalProperties</description>\n+        </element>\n+        <element name=\"HELPPROMPT\" since=\"1.0\">\n+            <description>The property helpPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"TIMEOUTPROMPT\" since=\"1.0\">\n+            <description>The property timeoutPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPTITLE\" since=\"2.0\">\n+            <description>The property vrHelpTitle of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPITEMS\" since=\"2.0\">\n+            <description>The property array of vrHelp of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUNAME\" since=\"3.0\">\n+            <description>The property in-app menu name of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUICON\" since=\"3.0\">\n+            <description>The property in-app menu icon of setGlobalProperties</description>\n+        </element>\n+        <element name=\"KEYBOARDPROPERTIES\" since=\"3.0\">\n+            <description>The on-screen keyboard configuration of setGlobalProperties</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+/**\n+ * The different global properties.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum GlobalProperty {\n+    /**\n+     * Location of the user's seat of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 6.0.0\n+     */\n+    USER_LOCATION,\n+    /**\n+     * The property helpPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    HELPPROMPT,\n+    /**\n+     * The property timeoutPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    TIMEOUTPROMPT,\n+    /**\n+     * The property vrHelpTitle of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPTITLE,\n+    /**\n+     * The property array of vrHelp of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPITEMS,\n+    /**\n+     * The property in-app menu name of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUNAME,\n+    /**\n+     * The property in-app menu icon of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUICON,\n+    /**\n+     * The on-screen keyboard configuration of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    KEYBOARDPROPERTIES;\n+\n+    /**\n+     * Convert String to GlobalProperty\n+     *\n+     * @param value String\n+     * @return GlobalProperty\n+     */\n+    public static GlobalProperty valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+}\n+```\n+### Constants with fields\n+\n+This type of enums is divided into 3 additional types:\n+* field based on `\"internal_name\"` and `\"name\"` attributes of `<element>`\n+* field based on `\"value\"` attribute of `<element>`\n+* Special `FunctionID` Enum class\n+\n+#### Constants with field based on `\"internal_name\"` and `\"name\"` attributes\n+\n+In case if the `\"internal_name\"` attribute exists, this should be used for the constant name and the `\"name\"` attribute should be passed as a `String` field into Enum constant.\n+\n+The `\"internal_name\"` attribute should be normalized by following rules:\n+* If it starts with the same prefix as `<enum>` name, this prefix should be removed.\n+* After the prefix removal:\n+    * if the value starts from digit, the leading `_` (underscore) symbol should be added.\n+    * if the value starts with `_` (underscore) symbol and the next character is a letter of alphabet, the leading `_` (underscore) symbol should be removed.\n+\n+Constant definition:\n+```java\n+    [internal_name](\"[name]\")\n+```\n+Where `[internal_name]` is the normalized `\"internal_name\"` attribute of `<element>`, `[name]` is the `\"name\"` attribute.\n+\n+Private field:\n+```java\n+    private final String INTERNAL_NAME;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `toString` method should be overridden to return the private field instead of the constant name.\n+```java\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+```\n+\n+The additional `valueForString` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForString` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"Dimension\" since=\"2.0\">\n+        <description>The supported dimensions of the GPS</description>\n+        <element name=\"NO_FIX\" internal_name=\"Dimension_NO_FIX\">\n+            <description>No GPS at all</description>\n+        </element>\n+        <element name=\"2D\" internal_name=\"Dimension_2D\">\n+            <description>Longitude and latitude</description>\n+        </element>\n+        <element name=\"3D\" internal_name=\"Dimension_3D\">\n+            <description>Longitude and latitude and altitude</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * The supported dimensions of the GPS\n+ *\n+ *\n+ * @since SmartDeviceLink 2.0.0\n+ */\n+public enum Dimension {\n+    /**\n+     * Longitude and latitude\n+     */\n+    _2D(\"2D\"),\n+    /**\n+     * Longitude and latitude and altitude\n+     */\n+    _3D(\"3D\"),\n+    /**\n+     * No GPS at all\n+     */\n+    NO_FIX(\"NO_FIX\");\n+\n+    private final String INTERNAL_NAME;\n+\n+    private Dimension(String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+\n+    public static Dimension valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for (Dimension anEnum : EnumSet.allOf(Dimension.class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+}\n+```\n+\n+#### Constants with field based on `\"value\"` attribute\n+\n+In case if the `\"value\"` attribute exists, this attribute should be passed as the `int` constant field.\n+\n+Constant definition:\n+```java\n+    [name]([value])\n+```\n+Where `[name]` is the `\"name\"` attribute of `<element>`, `[value]` is the `\"value\"` attribute.\n+\n+Private field:\n+```java\n+    private final int VALUE;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](int value) {\n+        this.VALUE = value;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `getValue` method should be defined to return the private field value.\n+```java\n+    public int getValue(){\n+        return VALUE;\n+    }\n+```\n+\n+The additional `valueForInt` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForInt(int value) {\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForInt` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"PredefinedWindows\" since=\"6.0\">\n+        <element name=\"DEFAULT_WINDOW\" value=\"0\">\n+            <description>The default window is a main window pre-created on behalf of the app.</description>\n+        </element>\n+        <element name=\"PRIMARY_WIDGET\" value=\"1\">\n+            <description>The primary widget of the app.</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ *\n+ * @since SmartDeviceLink 6.0.0\n+ */\n+public enum PredefinedWindows {\n+    /**\n+     * The default window is a main window pre-created on behalf of the app.\n+     */\n+    DEFAULT_WINDOW(0),\n+    /**\n+     * The primary widget of the app.\n+     */\n+    PRIMARY_WIDGET(1);\n+\n+    private final int VALUE;\n+    /**\n+     * Private constructor\n+     */\n+    private PredefinedWindows (int value) {\n+        this.VALUE = value;\n+    }\n+\n+    public static PredefinedWindows valueForInt(int value) {\n+        for (PredefinedWindows anEnum : EnumSet.allOf(PredefinedWindows.class)) {\n+            if (anEnum.getValue() == value) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public int getValue(){\n+        return VALUE;\n+    }\n+}\n+```\n+\n+### `FunctionID` Enum class\n+\n+Additionally to general rules for constant names and its fields there are some rules for the `FunctionID` Enum class:\n+  1. Uses of the `\"name\"` attribute shall be normalized by the removal of the ID suffix, e.g. `RegisterAppInterfaceID -> RegisterAppInterface`. \n+  1. The constant name should be `SCREAMING_SNIKE_CASE` formatted;\n+  1. The constant has 2 fields, the first is the `int` value of the `\"value\"` attribute and the second is the `String` value of normalized `\"name\"` attribute.\n+\n+Constant definition:\n+```java\n+    [constant_name]([value], \"[name]\")\n+```\n+Where `[constant_name]` is the normalized and `SCREAMING_SNIKE_CASE` formatted `\"name\"` attribute of `<element>`, `[name]` is the just normalized `\"name\"` attribute, `[value]` is the `\"value\"` attribute.\n+\n+Private fields:\n+```java\n+    private final int ID;\n+    private final String JSON_NAME;\n+```\n+\n+The private constructor should be defined to accept the value and name from the constant and and set the private fields.\n+```java\n+    private FunctionID(int id, String jsonName) {\n+        this.ID = id;\n+        this.JSON_NAME = jsonName;\n+    }\n+```\n+\n+The next custom imports, fields and methods are required for `FunctionID` Enum class:\n+\n+Imports:\n+```java\n+import java.util.EnumSet;\n+import java.util.Map.Entry;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+```\n+\n+Fields:\n+```java\n+    // MOCKED FUNCTIONS (NOT SENT FROM HEAD-UNIT)\n+    ON_LOCK_SCREEN_STATUS(-1, \"OnLockScreenStatus\"),\n+    ON_SDL_CHOICE_CHOSEN(-1, \"OnSdlChoiceChosen\"),\n+    ON_STREAM_RPC(-1, \"OnStreamRPC\"),\n+    STREAM_RPC(-1, \"StreamRPC\");\n+\n+    public static final int INVALID_ID = -1;\n+```\n+\n+Methods:\n+```java\n+    public int getId(){\n+        return this.ID;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.JSON_NAME;\n+    }\n+\n+    private static void initFunctionMap() {\n+        functionMap = new HashMap<String, Integer>(values().length);\n+\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            functionMap.put(value.toString(), value.getId());\n+        }\n+    }\n+\n+    public static String getFunctionName(int i) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Iterator<Entry<String, Integer>> iterator = functionMap.entrySet().iterator();\n+        while(iterator.hasNext()) {\n+            Entry<String, Integer> thisEntry = iterator.next();\n+            if(Integer.valueOf(i).equals(thisEntry.getValue())) {\n+                return thisEntry.getKey();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static int getFunctionId(String functionName) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Integer result = functionMap.get(functionName);\n+        return ( result == null ) ? INVALID_ID : result;\n+    }\n+\n+    /**\n+     * This method gives the corresponding FunctionID enum value for a string RPC\n+     *\n+     * @param name String value represents the name of the RPC\n+     * @return FunctionID represents the equivalent enum value for the provided string\n+     */\n+    public static FunctionID getEnumForString(String name) {\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            if(value.JSON_NAME.equals(name)){\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+\n+\n+\n+Full example:\n+\n+XML:\n+```xml\n+<enum name=\"FunctionID\" internal_scope=\"base\" since=\"1.0\">\n+    <description>Enumeration linking function names with function IDs in SmartDeviceLink protocol. Assumes enumeration starts at value 0.</description>\n+    <element name=\"RESERVED\" value=\"0\" since=\"1.0\" />\n+    <element name=\"RegisterAppInterfaceID\" value=\"1\" hexvalue=\"1\" since=\"1.0\" />\n+    <element name=\"SliderID\" value=\"26\" hexvalue=\"1A\" since=\"2.0\" />\n+</enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.protocol.enums;\n+\n+import java.util.EnumSet;\n+import java.util.Map.Entry;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+\n+/**\n+ * Enumeration linking function names with function IDs in SmartDeviceLink protocol. Assumes enumeration starts at\n+ * value 0.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum FunctionID {\n+    /**\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    RESERVED(0, \"RESERVED\"),\n+    /**\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    REGISTER_APP_INTERFACE(1, \"RegisterAppInterface\");\n+    /**\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    SLIDER(26, \"Slider\"),\n+\n+    // MOCKED FUNCTIONS (NOT SENT FROM HEAD-UNIT)\n+    ON_LOCK_SCREEN_STATUS(-1, \"OnLockScreenStatus\"),\n+    ON_SDL_CHOICE_CHOSEN(-1, \"OnSdlChoiceChosen\"),\n+    ON_STREAM_RPC(-1, \"OnStreamRPC\"),\n+    STREAM_RPC(-1, \"StreamRPC\");\n+\n+    public static final int                 INVALID_ID = -1;\n+\n+    private static HashMap<String, Integer> functionMap;\n+\n+    private final int                       ID;\n+    private final String                    JSON_NAME;\n+\n+    private FunctionID(int id, String jsonName) {\n+        this.ID = id;\n+        this.JSON_NAME = jsonName;\n+    }\n+\n+    public int getId(){\n+        return this.ID;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.JSON_NAME;\n+    }\n+\n+    private static void initFunctionMap() {\n+        functionMap = new HashMap<String, Integer>(values().length);\n+\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            functionMap.put(value.toString(), value.getId());\n+        }\n+    }\n+\n+    public static String getFunctionName(int i) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Iterator<Entry<String, Integer>> iterator = functionMap.entrySet().iterator();\n+        while(iterator.hasNext()) {\n+            Entry<String, Integer> thisEntry = iterator.next();\n+            if(Integer.valueOf(i).equals(thisEntry.getValue())) {\n+                return thisEntry.getKey();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static int getFunctionId(String functionName) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Integer result = functionMap.get(functionName);\n+        return ( result == null ) ? INVALID_ID : result;\n+    }\n+\n+    /**\n+     * This method gives the corresponding FunctionID enum value for a string RPC\n+     *\n+     * @param name String value represents the name of the RPC\n+     * @return FunctionID represents the equivalent enum value for the provided string\n+     */\n+    public static FunctionID getEnumForString(String name) {\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            if(value.JSON_NAME.equals(name)){\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+}\n+```\n+\n+## `<struct>`\n+\n+The Struct class should extend the base `RPCStruct` class:\n+```java\n+import com.smartdevicelink.proxy.RPCStruct;\n+```\n+\n+The name of the class is the value from the `\"name\"` attribute of `<struct>`. \n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>[param_name]</td>\n+ *      <td>[param_type|List<[param_type]>]</td>\n+ *      <td>[param_description]</td>\n+ *      <td>[Y|N]</td>\n+ *      <td>SmartDeviceLink [param_since]</td>\n+ *  </tr>\n+ * </table>\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<struct>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+* The `Parameter List` table should include all set of `<param>`.\n+* `[param_name]` is `\"name\"` attribute of the `<param>`.\n+* `[param_type]` is `\"type\"` attribute of the `<param>`, `[List<[param_type]>]` applied if `\"array\"` attribute of `<param>` is \"true\".\n+* `[param_description]` is `<description>` of the `<param>`, could be empty if not exists.\n+* `[Y|N]` means exactly `Y` character, if `\"mandatory\"` attribute of the `<param>` exists and is \"true\", `N` character otherwise.\n+* `[param_since]` should be present, if the `\"since\"` attribute of the `<param>` exists, and `[since]` is the `Major.Minor.Patch` formatted value of this attribute.\n+\n+There are all Enum classes that are used in the represented structure should be additionally imported. \n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<param>` should be mapped to the `public static final String` fields of the new class by following rules:\n+\n+1. The name of the fields is the `SCREAMING_SNAKE_CASE` formatted value of the `\"name\"` attribute of `<param>` with the `KEY_` prefix.\n+1. The value of the fields is the value of the `\"name\"` attribute of `<param>`\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `KEY_SYNC_MSG_VERSION -> KEY_SDL_MSG_VERSION`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+Field definition template:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+@Deprecated\n+public static final String [normalized_name] = \"[name]\";\n+```\n+Where:\n+* `[normalized_name]` is the normalized and `SCREAMING_SNAKE_CASE` formatted `\"name\"` attribute of `<param>`.\n+* `[name]` is the `\"name\"` attribute of `<param>`.\n+* `[description]` is `<description>` of the `<param>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The field definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<param>` exists and is \"true\".\n+\n+The Struct class contains 3 different constructors:\n+* without parameters.\n+* with `Hashtable` parameter.\n+* with all required parameters, based on `\"mandatory\"` attribute of the `<param>`\n+\n+### Constructor without parameters\n+\n+Template:\n+```java\n+    /**\n+     * Constructs a new [name] object\n+     */\n+    public [name]() { }\n+```\n+Where `[name]` is the value from the `\"name\"` attribute of `<struct>`.\n+\n+### Constructor with `Hashtable` parameter\n+\n+This constructor requires the import of `Hashtable` class\n+```java\n+import java.util.Hashtable;\n+```\n+\n+Template:\n+```java\n+    /**\n+     * Constructs a new [name] object indicated by the Hashtable parameter\\", "originalCommit": "d81628f15be7038419fcdbf4769690082cf59867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMDk4Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r382000987", "bodyText": "fixed", "author": null, "createdAt": "2020-02-20T13:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk0OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r380888949", "bodyText": "The javadoc for the @params & @return in the RPCs methods (constructors, getters and setters) don't have  description at all. The description only exists for the public static final String keys. Would be possible to remove the description from the keys and add it to the method params instead? because that is what the library code currently has.", "author": "bilal-alsharifi", "createdAt": "2020-02-18T19:33:21Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2638 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n+\n+Some required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * smartdevicelink\n+        * protocol\n+            * enums\n+                * FunctionID.java\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID and MessageType -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+The only exception is the `<enum>` named `FunctionID`. This class should be stored in `com/smartdevicelink/protocol/enums` folder, as defined in the directory structure above.\n+\n+The package definition for `FunctionID` class also is different:\n+```java\n+package com.smartdevicelink.protocol.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"name\"` doesn't end with it and the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `SyncMsgVersion -> SdlMsgVersion`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+The constant definition could have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<element>`, if exists.\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The constant definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute exists and is \"true\".\n+\n+### Constants without fields:\n+\n+This type of enums doesn't require constructor and requires additional method `valueForString` to be defined. It should return the Enum constant based on its string name, or `null` if the constant is not found.\n+```java\n+    /**\n+     * Convert String to [enum_name]\n+     *\n+     * @param value String\n+     * @return [enum_name]\n+     */\n+    public static [enum_name] valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`\n+\n+Example:\n+\n+XML:\n+```xml\n+    <enum name=\"GlobalProperty\" since=\"1.0\">\n+        <description>The different global properties.</description>\n+        <element name=\"USER_LOCATION\" since=\"6.0\">\n+            <description>Location of the user's seat of setGlobalProperties</description>\n+        </element>\n+        <element name=\"HELPPROMPT\" since=\"1.0\">\n+            <description>The property helpPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"TIMEOUTPROMPT\" since=\"1.0\">\n+            <description>The property timeoutPrompt of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPTITLE\" since=\"2.0\">\n+            <description>The property vrHelpTitle of setGlobalProperties</description>\n+        </element>\n+        <element name=\"VRHELPITEMS\" since=\"2.0\">\n+            <description>The property array of vrHelp of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUNAME\" since=\"3.0\">\n+            <description>The property in-app menu name of setGlobalProperties</description>\n+        </element>\n+        <element name=\"MENUICON\" since=\"3.0\">\n+            <description>The property in-app menu icon of setGlobalProperties</description>\n+        </element>\n+        <element name=\"KEYBOARDPROPERTIES\" since=\"3.0\">\n+            <description>The on-screen keyboard configuration of setGlobalProperties</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+/**\n+ * The different global properties.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum GlobalProperty {\n+    /**\n+     * Location of the user's seat of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 6.0.0\n+     */\n+    USER_LOCATION,\n+    /**\n+     * The property helpPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    HELPPROMPT,\n+    /**\n+     * The property timeoutPrompt of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    TIMEOUTPROMPT,\n+    /**\n+     * The property vrHelpTitle of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPTITLE,\n+    /**\n+     * The property array of vrHelp of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    VRHELPITEMS,\n+    /**\n+     * The property in-app menu name of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUNAME,\n+    /**\n+     * The property in-app menu icon of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    MENUICON,\n+    /**\n+     * The on-screen keyboard configuration of setGlobalProperties\n+     *\n+     * @since SmartDeviceLink 3.0.0\n+     */\n+    KEYBOARDPROPERTIES;\n+\n+    /**\n+     * Convert String to GlobalProperty\n+     *\n+     * @param value String\n+     * @return GlobalProperty\n+     */\n+    public static GlobalProperty valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+}\n+```\n+### Constants with fields\n+\n+This type of enums is divided into 3 additional types:\n+* field based on `\"internal_name\"` and `\"name\"` attributes of `<element>`\n+* field based on `\"value\"` attribute of `<element>`\n+* Special `FunctionID` Enum class\n+\n+#### Constants with field based on `\"internal_name\"` and `\"name\"` attributes\n+\n+In case if the `\"internal_name\"` attribute exists, this should be used for the constant name and the `\"name\"` attribute should be passed as a `String` field into Enum constant.\n+\n+The `\"internal_name\"` attribute should be normalized by following rules:\n+* If it starts with the same prefix as `<enum>` name, this prefix should be removed.\n+* After the prefix removal:\n+    * if the value starts from digit, the leading `_` (underscore) symbol should be added.\n+    * if the value starts with `_` (underscore) symbol and the next character is a letter of alphabet, the leading `_` (underscore) symbol should be removed.\n+\n+Constant definition:\n+```java\n+    [internal_name](\"[name]\")\n+```\n+Where `[internal_name]` is the normalized `\"internal_name\"` attribute of `<element>`, `[name]` is the `\"name\"` attribute.\n+\n+Private field:\n+```java\n+    private final String INTERNAL_NAME;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `toString` method should be overridden to return the private field instead of the constant name.\n+```java\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+```\n+\n+The additional `valueForString` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForString` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"Dimension\" since=\"2.0\">\n+        <description>The supported dimensions of the GPS</description>\n+        <element name=\"NO_FIX\" internal_name=\"Dimension_NO_FIX\">\n+            <description>No GPS at all</description>\n+        </element>\n+        <element name=\"2D\" internal_name=\"Dimension_2D\">\n+            <description>Longitude and latitude</description>\n+        </element>\n+        <element name=\"3D\" internal_name=\"Dimension_3D\">\n+            <description>Longitude and latitude and altitude</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * The supported dimensions of the GPS\n+ *\n+ *\n+ * @since SmartDeviceLink 2.0.0\n+ */\n+public enum Dimension {\n+    /**\n+     * Longitude and latitude\n+     */\n+    _2D(\"2D\"),\n+    /**\n+     * Longitude and latitude and altitude\n+     */\n+    _3D(\"3D\"),\n+    /**\n+     * No GPS at all\n+     */\n+    NO_FIX(\"NO_FIX\");\n+\n+    private final String INTERNAL_NAME;\n+\n+    private Dimension(String internalName) {\n+        this.INTERNAL_NAME = internalName;\n+    }\n+\n+    public static Dimension valueForString(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        for (Dimension anEnum : EnumSet.allOf(Dimension.class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return INTERNAL_NAME;\n+    }\n+}\n+```\n+\n+#### Constants with field based on `\"value\"` attribute\n+\n+In case if the `\"value\"` attribute exists, this attribute should be passed as the `int` constant field.\n+\n+Constant definition:\n+```java\n+    [name]([value])\n+```\n+Where `[name]` is the `\"name\"` attribute of `<element>`, `[value]` is the `\"value\"` attribute.\n+\n+Private field:\n+```java\n+    private final int VALUE;\n+```\n+\n+The private constructor should be defined to accept the value from the constant and and set the private field.\n+```java\n+    private [enum_name](int value) {\n+        this.VALUE = value;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `getValue` method should be defined to return the private field value.\n+```java\n+    public int getValue(){\n+        return VALUE;\n+    }\n+```\n+\n+The additional `valueForInt` should be defined. It should return the Enum constant based on the private field above, or `null` if the constant is not found.\n+```java\n+    public static [enum_name] valueForInt(int value) {\n+        for ([enum_name] anEnum : EnumSet.allOf([enum_name].class)) {\n+            if (anEnum.toString().equals(value)) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+Where `[enum_name]` is the `\"name\"` attribute of `<enum>`.\n+\n+The `valueForInt` method requires the import of `EnumSet` collection:\n+```java\n+import java.util.EnumSet;\n+```\n+\n+Full example:\n+\n+XML:\n+```xml\n+    <enum name=\"PredefinedWindows\" since=\"6.0\">\n+        <element name=\"DEFAULT_WINDOW\" value=\"0\">\n+            <description>The default window is a main window pre-created on behalf of the app.</description>\n+        </element>\n+        <element name=\"PRIMARY_WIDGET\" value=\"1\">\n+            <description>The primary widget of the app.</description>\n+        </element>\n+    </enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc.enums;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ *\n+ * @since SmartDeviceLink 6.0.0\n+ */\n+public enum PredefinedWindows {\n+    /**\n+     * The default window is a main window pre-created on behalf of the app.\n+     */\n+    DEFAULT_WINDOW(0),\n+    /**\n+     * The primary widget of the app.\n+     */\n+    PRIMARY_WIDGET(1);\n+\n+    private final int VALUE;\n+    /**\n+     * Private constructor\n+     */\n+    private PredefinedWindows (int value) {\n+        this.VALUE = value;\n+    }\n+\n+    public static PredefinedWindows valueForInt(int value) {\n+        for (PredefinedWindows anEnum : EnumSet.allOf(PredefinedWindows.class)) {\n+            if (anEnum.getValue() == value) {\n+                return anEnum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public int getValue(){\n+        return VALUE;\n+    }\n+}\n+```\n+\n+### `FunctionID` Enum class\n+\n+Additionally to general rules for constant names and its fields there are some rules for the `FunctionID` Enum class:\n+  1. Uses of the `\"name\"` attribute shall be normalized by the removal of the ID suffix, e.g. `RegisterAppInterfaceID -> RegisterAppInterface`. \n+  1. The constant name should be `SCREAMING_SNIKE_CASE` formatted;\n+  1. The constant has 2 fields, the first is the `int` value of the `\"value\"` attribute and the second is the `String` value of normalized `\"name\"` attribute.\n+\n+Constant definition:\n+```java\n+    [constant_name]([value], \"[name]\")\n+```\n+Where `[constant_name]` is the normalized and `SCREAMING_SNIKE_CASE` formatted `\"name\"` attribute of `<element>`, `[name]` is the just normalized `\"name\"` attribute, `[value]` is the `\"value\"` attribute.\n+\n+Private fields:\n+```java\n+    private final int ID;\n+    private final String JSON_NAME;\n+```\n+\n+The private constructor should be defined to accept the value and name from the constant and and set the private fields.\n+```java\n+    private FunctionID(int id, String jsonName) {\n+        this.ID = id;\n+        this.JSON_NAME = jsonName;\n+    }\n+```\n+\n+The next custom imports, fields and methods are required for `FunctionID` Enum class:\n+\n+Imports:\n+```java\n+import java.util.EnumSet;\n+import java.util.Map.Entry;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+```\n+\n+Fields:\n+```java\n+    // MOCKED FUNCTIONS (NOT SENT FROM HEAD-UNIT)\n+    ON_LOCK_SCREEN_STATUS(-1, \"OnLockScreenStatus\"),\n+    ON_SDL_CHOICE_CHOSEN(-1, \"OnSdlChoiceChosen\"),\n+    ON_STREAM_RPC(-1, \"OnStreamRPC\"),\n+    STREAM_RPC(-1, \"StreamRPC\");\n+\n+    public static final int INVALID_ID = -1;\n+```\n+\n+Methods:\n+```java\n+    public int getId(){\n+        return this.ID;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.JSON_NAME;\n+    }\n+\n+    private static void initFunctionMap() {\n+        functionMap = new HashMap<String, Integer>(values().length);\n+\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            functionMap.put(value.toString(), value.getId());\n+        }\n+    }\n+\n+    public static String getFunctionName(int i) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Iterator<Entry<String, Integer>> iterator = functionMap.entrySet().iterator();\n+        while(iterator.hasNext()) {\n+            Entry<String, Integer> thisEntry = iterator.next();\n+            if(Integer.valueOf(i).equals(thisEntry.getValue())) {\n+                return thisEntry.getKey();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static int getFunctionId(String functionName) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Integer result = functionMap.get(functionName);\n+        return ( result == null ) ? INVALID_ID : result;\n+    }\n+\n+    /**\n+     * This method gives the corresponding FunctionID enum value for a string RPC\n+     *\n+     * @param name String value represents the name of the RPC\n+     * @return FunctionID represents the equivalent enum value for the provided string\n+     */\n+    public static FunctionID getEnumForString(String name) {\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            if(value.JSON_NAME.equals(name)){\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+```\n+\n+\n+\n+Full example:\n+\n+XML:\n+```xml\n+<enum name=\"FunctionID\" internal_scope=\"base\" since=\"1.0\">\n+    <description>Enumeration linking function names with function IDs in SmartDeviceLink protocol. Assumes enumeration starts at value 0.</description>\n+    <element name=\"RESERVED\" value=\"0\" since=\"1.0\" />\n+    <element name=\"RegisterAppInterfaceID\" value=\"1\" hexvalue=\"1\" since=\"1.0\" />\n+    <element name=\"SliderID\" value=\"26\" hexvalue=\"1A\" since=\"2.0\" />\n+</enum>\n+```\n+\n+Output:\n+```java\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.protocol.enums;\n+\n+import java.util.EnumSet;\n+import java.util.Map.Entry;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+\n+/**\n+ * Enumeration linking function names with function IDs in SmartDeviceLink protocol. Assumes enumeration starts at\n+ * value 0.\n+ *\n+ *\n+ * @since SmartDeviceLink 1.0.0\n+ */\n+public enum FunctionID {\n+    /**\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    RESERVED(0, \"RESERVED\"),\n+    /**\n+     * @since SmartDeviceLink 1.0.0\n+     */\n+    REGISTER_APP_INTERFACE(1, \"RegisterAppInterface\");\n+    /**\n+     * @since SmartDeviceLink 2.0.0\n+     */\n+    SLIDER(26, \"Slider\"),\n+\n+    // MOCKED FUNCTIONS (NOT SENT FROM HEAD-UNIT)\n+    ON_LOCK_SCREEN_STATUS(-1, \"OnLockScreenStatus\"),\n+    ON_SDL_CHOICE_CHOSEN(-1, \"OnSdlChoiceChosen\"),\n+    ON_STREAM_RPC(-1, \"OnStreamRPC\"),\n+    STREAM_RPC(-1, \"StreamRPC\");\n+\n+    public static final int                 INVALID_ID = -1;\n+\n+    private static HashMap<String, Integer> functionMap;\n+\n+    private final int                       ID;\n+    private final String                    JSON_NAME;\n+\n+    private FunctionID(int id, String jsonName) {\n+        this.ID = id;\n+        this.JSON_NAME = jsonName;\n+    }\n+\n+    public int getId(){\n+        return this.ID;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.JSON_NAME;\n+    }\n+\n+    private static void initFunctionMap() {\n+        functionMap = new HashMap<String, Integer>(values().length);\n+\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            functionMap.put(value.toString(), value.getId());\n+        }\n+    }\n+\n+    public static String getFunctionName(int i) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Iterator<Entry<String, Integer>> iterator = functionMap.entrySet().iterator();\n+        while(iterator.hasNext()) {\n+            Entry<String, Integer> thisEntry = iterator.next();\n+            if(Integer.valueOf(i).equals(thisEntry.getValue())) {\n+                return thisEntry.getKey();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static int getFunctionId(String functionName) {\n+        if(functionMap == null) {\n+            initFunctionMap();\n+        }\n+\n+        Integer result = functionMap.get(functionName);\n+        return ( result == null ) ? INVALID_ID : result;\n+    }\n+\n+    /**\n+     * This method gives the corresponding FunctionID enum value for a string RPC\n+     *\n+     * @param name String value represents the name of the RPC\n+     * @return FunctionID represents the equivalent enum value for the provided string\n+     */\n+    public static FunctionID getEnumForString(String name) {\n+        for(FunctionID value : EnumSet.allOf(FunctionID.class)) {\n+            if(value.JSON_NAME.equals(name)){\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+}\n+```\n+\n+## `<struct>`\n+\n+The Struct class should extend the base `RPCStruct` class:\n+```java\n+import com.smartdevicelink.proxy.RPCStruct;\n+```\n+\n+The name of the class is the value from the `\"name\"` attribute of `<struct>`. \n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>[param_name]</td>\n+ *      <td>[param_type|List<[param_type]>]</td>\n+ *      <td>[param_description]</td>\n+ *      <td>[Y|N]</td>\n+ *      <td>SmartDeviceLink [param_since]</td>\n+ *  </tr>\n+ * </table>\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<struct>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+* The `Parameter List` table should include all set of `<param>`.\n+* `[param_name]` is `\"name\"` attribute of the `<param>`.\n+* `[param_type]` is `\"type\"` attribute of the `<param>`, `[List<[param_type]>]` applied if `\"array\"` attribute of `<param>` is \"true\".\n+* `[param_description]` is `<description>` of the `<param>`, could be empty if not exists.\n+* `[Y|N]` means exactly `Y` character, if `\"mandatory\"` attribute of the `<param>` exists and is \"true\", `N` character otherwise.\n+* `[param_since]` should be present, if the `\"since\"` attribute of the `<param>` exists, and `[since]` is the `Major.Minor.Patch` formatted value of this attribute.\n+\n+There are all Enum classes that are used in the represented structure should be additionally imported. \n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<param>` should be mapped to the `public static final String` fields of the new class by following rules:\n+\n+1. The name of the fields is the `SCREAMING_SNAKE_CASE` formatted value of the `\"name\"` attribute of `<param>` with the `KEY_` prefix.\n+1. The value of the fields is the value of the `\"name\"` attribute of `<param>`\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `KEY_SYNC_MSG_VERSION -> KEY_SDL_MSG_VERSION`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+\n+Field definition template:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+@Deprecated\n+public static final String [normalized_name] = \"[name]\";\n+```\n+Where:\n+* `[normalized_name]` is the normalized and `SCREAMING_SNAKE_CASE` formatted `\"name\"` attribute of `<param>`.\n+* `[name]` is the `\"name\"` attribute of `<param>`.\n+* `[description]` is `<description>` of the `<param>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`, if it's defined in the custom mapping.\n+\n+The field definition should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<param>` exists and is \"true\".\n+\n+The Struct class contains 3 different constructors:\n+* without parameters.\n+* with `Hashtable` parameter.\n+* with all required parameters, based on `\"mandatory\"` attribute of the `<param>`\n+\n+### Constructor without parameters\n+\n+Template:\n+```java\n+    /**\n+     * Constructs a new [name] object\n+     */\n+    public [name]() { }\n+```\n+Where `[name]` is the value from the `\"name\"` attribute of `<struct>`.\n+\n+### Constructor with `Hashtable` parameter\n+\n+This constructor requires the import of `Hashtable` class\n+```java\n+import java.util.Hashtable;\n+```\n+\n+Template:\n+```java\n+    /**\n+     * Constructs a new [name] object indicated by the Hashtable parameter\\\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public [name](Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+```\n+Where `[name]` is the value from the `\"name\"` attribute of `<struct>`.\n+\n+### Constructor with all required parameters, based on `\"mandatory\"` attribute of the `<param>`\n+This constructor requires the import of `NonNull` annotation\n+```java\n+import android.support.annotation.NonNull;\n+```\n+\n+The constructor should include all set of `<param>` with the `\"mandatory\"` attribute is \"true\". JavaDoc should include all constructor parameters and the constructor should call all corresponding setters inside itself.\n+\n+Template:\n+```java\n+    /**\n+     * Constructs a new [name] object\n+     *\n+     * @param [param_name]\n+     */\n+    public [name](@NonNull [param_type|List<[param_type]>] [param_name]) {\n+        this();\n+        [setter_name]([param_name]);\n+    }\n+```\n+Where:\n+* `[name]` is the value from the `\"name\"` attribute of `<struct>`.\n+* `[param_name]` is `\"name\"` attribute of the `<param>`.\n+* `[param_type]` is `\"type\"` attribute of the `<param>`, `[List<[param_type]>]` applied if `\"array\"` attribute of `<param>` is \"true\".\n+* `[setter_name]` is the name of the corresponding setter method\n+\n+For each `<param>` the getter and setter methods should be defined in the class:\n+\n+1. The name of the setter/getter is the `PascalCase` formatted value of the `\"name\"` attribute with the `get` prefix for the getter, for the setter the prefix should be `set`.\n+1. Uses of the \"sync\" prefix shall be replaced with \"sdl\" (where it would not break functionality). E.g. `SyncMsgVersion -> SdlMsgVersion`. This applies to member variables and their accessors. The key used when creating the RPC message JSON should match that of the RPC Spec.\n+1. The setter method:\n+    * Accepts the single parameter with the type defined in the `\"type\"` attribute and the name defined in the `\"name\"` attribute of the `<param>`;\n+    * The parameter should be decorated by `@NonNull` annotation if the `\"mandatory\"` attribute of the `<param>` is \"true\";\n+    * Should call the `setValue` method, where the first parameter is the value of the corresponding static field described above, the second is the value passed into setter;\n+1. The getter method:\n+    * If `\"type\"` attribute of the `<param>` has the one of `Boolean`, `Integer` or `String`\n+        * the getter should call and return the corresponding `getBoolean`, `getInteger` or `getString` method, the parameter of that method is the value of the corresponding static field described above;\n+    * If `\"type\"` attribute of the `<param>` is `Float`:\n+        * the getter should call the `getValue` method, the parameter of that method is the value of the corresponding static field described above;\n+        * the getter should return `SdlDataTypeConverter.objectToFloat(object)` where the `object` is the value previously received from `getValue`;\n+    * If the `<param>` has the `\"type\"` attribute value as the one of `<enum>` or `<struct>` name:\n+        * The getter should call and return the result of the `getObject` method, where the first parameter is the corresponding Struct or Enum class, the second is the value of the corresponding static field described above;\n+\n+Setter template:\n+```java\n+    /**\n+     * Sets the [name].\n+     * [description]\n+     *\n+     * @param [name]", "originalCommit": "d81628f15be7038419fcdbf4769690082cf59867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU3MTk4OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r382571989", "bodyText": "Hello @bilal-alsharifi\nparameter description moved to getter/setter/constructor javadoc as you described", "author": null, "createdAt": "2020-02-21T13:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5Nzg3NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r382597874", "bodyText": "Thanks @ksologubov for making the change", "author": "bilal-alsharifi", "createdAt": "2020-02-21T14:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NDc3Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r382644773", "bodyText": "@ksologubov  would it be possible to make the param description starts on the same line as the param? that applies to the @retrun as well.", "author": "bilal-alsharifi", "createdAt": "2020-02-21T15:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1MzQ3OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r382653478", "bodyText": "also, if we can move the @since comments from the public static final String keys to the getter/setters as well. Because developers will look at the docs for the methods not the keys", "author": "bilal-alsharifi", "createdAt": "2020-02-21T15:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1OTQxMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r382659411", "bodyText": "So the expected result for iconResumed for example will be something like this :\npublic static final String KEY_ICON_RESUMED = \"iconResumed\";\n\n/**\n * Sets the iconResumed.\n *\n * @param iconResumed Existence of apps icon at system. If true, apps icon was resumed at system.\n * If false, apps icon is not resumed at system\n *\n * @since SmartDeviceLink 5.0.0\n */\npublic void setIconResumed(Boolean iconResumed) {\n    setParameters(KEY_ICON_RESUMED, iconResumed);\n}\n\n/**\n * Gets the iconResumed.\n *\n * @return Boolean Existence of apps icon at system. If true, apps icon was resumed at system.\n * If false, apps icon is not resumed at system\n *\n * @since SmartDeviceLink 5.0.0\n */\npublic Boolean getIconResumed() {\n    return getBoolean(KEY_ICON_RESUMED);\n}", "author": "bilal-alsharifi", "createdAt": "2020-02-21T15:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2MDU4NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r382660585", "bodyText": "Thanks for example Bilal, I'm going to update this", "author": null, "createdAt": "2020-02-21T15:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4ODI1NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383888254", "bodyText": "@bilal-alsharifi Generator was corrected per your comments", "author": null, "createdAt": "2020-02-25T13:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk0OQ=="}], "type": "inlineReview"}, {"oid": "a15ae81f4de172f0664424a6fa922af899692a83", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a15ae81f4de172f0664424a6fa922af899692a83", "message": "replacing sync in names", "committedDate": "2020-02-20T10:55:52Z", "type": "commit"}, {"oid": "95275d621d38f4b00329dd79a52049e6ec789b8d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/95275d621d38f4b00329dd79a52049e6ec789b8d", "message": "removing corner cases and mapping", "committedDate": "2020-02-20T10:56:45Z", "type": "commit"}, {"oid": "72f1aa50bf95e74356e76f57835ff7ecc4ff05ff", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/72f1aa50bf95e74356e76f57835ff7ecc4ff05ff", "message": "replacing sync in names", "committedDate": "2020-02-20T10:57:36Z", "type": "commit"}, {"oid": "7e1e227fe101301e324747814a464f1640cbceb5", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/7e1e227fe101301e324747814a464f1640cbceb5", "message": "replacing sync in names fix", "committedDate": "2020-02-20T11:18:14Z", "type": "commit"}, {"oid": "70ad26ceabaf57804ebf96f7e13e692c27387bb3", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/70ad26ceabaf57804ebf96f7e13e692c27387bb3", "message": "replacing sync in names fix", "committedDate": "2020-02-20T11:25:15Z", "type": "commit"}, {"oid": "03700ac57501a88f76719b8e4497113927bad85b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/03700ac57501a88f76719b8e4497113927bad85b", "message": "fixes per review comments", "committedDate": "2020-02-20T13:34:24Z", "type": "commit"}, {"oid": "52b1d3b591410e37224d5bd0bd746bfbdaf5bbcf", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/52b1d3b591410e37224d5bd0bd746bfbdaf5bbcf", "message": "fixes per review comments", "committedDate": "2020-02-20T14:35:59Z", "type": "commit"}, {"oid": "4038f645ae3b798c1c4a428089f6cb903a2bb13a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4038f645ae3b798c1c4a428089f6cb903a2bb13a", "message": "parameter description moved to getter/setter/constructor javadoc per review comments", "committedDate": "2020-02-21T13:05:18Z", "type": "commit"}, {"oid": "451a51303f3c3de8dc3e6bfd8813b00e5df85bfe", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/451a51303f3c3de8dc3e6bfd8813b00e5df85bfe", "message": "parameter description moved to getter/setter/constructor javadoc per review comments", "committedDate": "2020-02-21T13:05:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3OTEzNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383479135", "bodyText": "The generator is making the firsRun as deprecated for some reason:\n/**\n * @deprecated\n */\n@Deprecated\nprivate Boolean firstRun;", "author": "bilal-alsharifi", "createdAt": "2020-02-24T19:51:40Z", "path": "utils/generator/templates/scripts/OnHMIStatus_format.java", "diffHunk": "@@ -0,0 +1,25 @@\n+\n+    @Override", "originalCommit": "4038f645ae3b798c1c4a428089f6cb903a2bb13a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4ODQxNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383888415", "bodyText": "fixed", "author": null, "createdAt": "2020-02-25T13:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3OTEzNQ=="}], "type": "inlineReview"}, {"oid": "3052b673dc547585c090d9a24e1f493b5c7c9833", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3052b673dc547585c090d9a24e1f493b5c7c9833", "message": "fixed as per review comments", "committedDate": "2020-02-25T13:47:25Z", "type": "commit"}, {"oid": "f212753cc3c7d163b7d46c5eb896bec83559d5c5", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f212753cc3c7d163b7d46c5eb896bec83559d5c5", "message": "fixed as per review comments", "committedDate": "2020-02-25T15:26:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwNjY1OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383506659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    :param file_name: output js file\n          \n          \n            \n                    :param file_name: output java file", "author": "bilal-alsharifi", "createdAt": "2020-02-24T20:50:42Z", "path": "utils/generator/generator.py", "diffHunk": "@@ -0,0 +1,443 @@\n+\"\"\"This is main runner of generator\n+\n+\"\"\"\n+import logging\n+import re\n+import sys\n+import datetime\n+from argparse import ArgumentParser\n+from collections import namedtuple, OrderedDict\n+from inspect import getfile\n+from json import JSONDecodeError, loads\n+from os.path import basename\n+from pprint import pformat\n+from time import sleep\n+from xml.etree.ElementTree import ParseError as XMLSchemaError\n+\n+from jinja2 import Environment, FileSystemLoader, TemplateNotFound, UndefinedError\n+from pathlib2 import Path\n+from xmlschema import XMLSchema\n+\n+ROOT = Path(__file__).absolute().parents[0]\n+\n+sys.path.append(ROOT.joinpath('rpc_spec/InterfaceParser').as_posix())\n+\n+try:\n+    from parsers.sdl_rpc_v2 import Parser\n+    from parsers.parse_error import ParseError as InterfaceError\n+    from model.interface import Interface\n+    from transformers.generate_error import GenerateError\n+    from transformers.common_producer import InterfaceProducerCommon\n+    from transformers.enums_producer import EnumsProducer\n+    from transformers.functions_producer import FunctionsProducer\n+    from transformers.structs_producer import StructsProducer\n+except ImportError as message:\n+    print('{}. probably you did not initialize submodule'.format(message))\n+    sys.exit(1)\n+\n+\n+class Generator:\n+    \"\"\"\n+    This class contains only technical features, as follow:\n+    - parsing command-line arguments, or evaluating required Paths interactively;\n+    - calling parsers to get Model from xml;\n+    - calling producers to transform initial Model to dict used in jinja2 templates\n+    Not required to be covered by unit tests cause contains only technical features.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.logger = logging.getLogger(self.__class__.__name__)\n+        self._env = None\n+\n+    @property\n+    def env(self):\n+        \"\"\"\n+        :return: jinja2 Environment\n+        \"\"\"\n+        return self._env\n+\n+    @env.setter\n+    def env(self, value):\n+        \"\"\"\n+        :param value: path with directory with templates\n+        :return: jinja2 Environment\n+        \"\"\"\n+        if not Path(value).exists():\n+            self.logger.critical('Directory with templates not found %s', value)\n+            sys.exit(1)\n+        else:\n+            self._env = Environment(loader=FileSystemLoader(value))\n+\n+    @property\n+    def get_version(self):\n+        \"\"\"\n+        :return: current version of Generator\n+        \"\"\"\n+        return InterfaceProducerCommon.version\n+\n+    def config_logging(self, verbose):\n+        \"\"\"\n+        Configure logging\n+        :param verbose: boolean\n+        \"\"\"\n+        handler = logging.StreamHandler()\n+        handler.setFormatter(logging.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n+                                               datefmt='%m-%d %H:%M'))\n+        if verbose:\n+            handler.setLevel(logging.DEBUG)\n+            self.logger.setLevel(logging.DEBUG)\n+        else:\n+            handler.setLevel(logging.ERROR)\n+            self.logger.setLevel(logging.ERROR)\n+        logging.getLogger().handlers.clear()\n+        root_logger = logging.getLogger()\n+        root_logger.addHandler(handler)\n+\n+    def evaluate_source_xml_xsd(self, xml, xsd):\n+        \"\"\"\n+        :param xml: path to MOBILE_API.xml file\n+        :param xsd: path to .xsd file (optional)\n+        :return: validated path to .xsd file\n+        \"\"\"\n+        if not Path(xml).exists():\n+            self.logger.critical('File not found: %s', xml)\n+            sys.exit(1)\n+\n+        if xsd and Path(xsd).exists():\n+            return xsd\n+\n+        replace = xml.replace('.xml', '.xsd')\n+        if xsd and not Path(xsd).exists():\n+            self.logger.critical('File not found: %s', xsd)\n+            sys.exit(1)\n+        elif not xsd and not Path(replace).exists():\n+            self.logger.critical('File not found: %s', replace)\n+            sys.exit(1)\n+        else:\n+            return replace\n+\n+    def evaluate_output_directory(self, output_directory):\n+        \"\"\"\n+        :param output_directory: path to output_directory\n+        :return: validated path to output_directory\n+        \"\"\"\n+        if output_directory.startswith('/'):\n+            path = Path(output_directory).absolute().resolve()\n+        else:\n+            path = ROOT.joinpath(output_directory).resolve()\n+        if not path.exists():\n+            self.logger.warning('Directory not found: %s, trying to create it', path)\n+            try:\n+                path.mkdir(parents=True, exist_ok=True)\n+            except OSError as message1:\n+                self.logger.critical('Failed to create directory %s, %s', path.as_posix(), message1)\n+                sys.exit(1)\n+        return path\n+\n+    def get_parser(self):\n+        \"\"\"\n+        Parsing command-line arguments, or evaluating required Paths interactively.\n+        :return: an instance of argparse.ArgumentParser\n+        \"\"\"\n+\n+        if len(sys.argv) == 2 and sys.argv[1] in ('-v', '--version'):\n+            print(self.get_version)\n+            sys.exit(0)\n+\n+        Paths = namedtuple('Paths', 'name path')\n+        xml = Paths('source_xml', ROOT.joinpath('rpc_spec/MOBILE_API.xml'))\n+        required_source = not xml.path.exists()\n+\n+        out = Paths('output_directory', ROOT.parents[1].joinpath('base/src/main/java/'))\n+        output_required = not out.path.exists()\n+\n+        parser = ArgumentParser(description='Proxy Library RPC Generator')\n+        parser.add_argument('-v', '--version', action='store_true', help='print the version and exit')\n+        parser.add_argument('-xml', '--source-xml', '--input-file', required=required_source,\n+                            help='should point to MOBILE_API.xml')\n+        parser.add_argument('-xsd', '--source-xsd', required=False)\n+        parser.add_argument('-d', '--output-directory', required=output_required,\n+                            help='define the place where the generated output should be placed')\n+        parser.add_argument('-t', '--templates-directory', nargs='?', default=ROOT.joinpath('templates').as_posix(),\n+                            help='path to directory with templates')\n+        parser.add_argument('-r', '--regex-pattern', required=False,\n+                            help='only elements matched with defined regex pattern will be parsed and generated')\n+        parser.add_argument('--verbose', action='store_true', help='display additional details like logs etc')\n+        parser.add_argument('-e', '--enums', required=False, action='store_true',\n+                            help='only specified elements will be generated, if present')\n+        parser.add_argument('-s', '--structs', required=False, action='store_true',\n+                            help='only specified elements will be generated, if present')\n+        parser.add_argument('-m', '-f', '--functions', required=False, action='store_true',\n+                            help='only specified elements will be generated, if present')\n+        parser.add_argument('-y', '--overwrite', action='store_true',\n+                            help='force overwriting of existing files in output directory, ignore confirmation message')\n+        parser.add_argument('-n', '--skip', action='store_true',\n+                            help='skip overwriting of existing files in output directory, ignore confirmation message')\n+\n+        args, unknown = parser.parse_known_args()\n+\n+        if unknown:\n+            self.logger.critical('found unknown arguments: %s', ' '.join(unknown))\n+            parser.print_help(sys.stderr)\n+            sys.exit(1)\n+\n+        if args.skip and args.overwrite:\n+            self.logger.critical('please select only one option skip or overwrite')\n+            sys.exit(1)\n+\n+        if not args.enums and not args.structs and not args.functions:\n+            args.enums = args.structs = args.functions = True\n+\n+        for intermediate in (xml, out):\n+            if not getattr(args, intermediate.name) and intermediate.path.exists():\n+                while True:\n+                    try:\n+                        confirm = input('Confirm default path {} for {} Y/Enter = yes, N = no'\n+                                        .format(intermediate.path, intermediate.name))\n+                        if confirm.lower() == 'y' or not confirm:\n+                            self.logger.warning('%s set to %s', intermediate.name, intermediate.path)\n+                            setattr(args, intermediate.name, intermediate.path.as_posix())\n+                            sleep(0.05)\n+                            break\n+                        if confirm.lower() == 'n':\n+                            self.logger.warning('provide argument %s', intermediate.name)\n+                            sys.exit(1)\n+                    except KeyboardInterrupt:\n+                        print('\\nThe user interrupted the execution of the program')\n+                        sys.exit(1)\n+\n+        self.config_logging(args.verbose)\n+\n+        args.source_xsd = self.evaluate_source_xml_xsd(args.source_xml, args.source_xsd)\n+\n+        args.output_directory = self.evaluate_output_directory(args.output_directory)\n+\n+        self.env = args.templates_directory\n+\n+        self.logger.info('parsed arguments:\\n%s', pformat((vars(args))))\n+        return args\n+\n+    def versions_compatibility_validating(self):\n+        \"\"\"version of generator script requires the same or lesser version of parser script.\n+        if the parser script needs to fix a bug (and becomes, e.g. 1.0.1) and the generator script stays at 1.0.0.\n+        As long as the generator script is the same or greater major version, it should be parsable.\n+        This requires some level of backward compatibility. E.g. they have to be the same major version.\n+\n+        \"\"\"\n+\n+        regex = r'(\\d+\\.\\d+).(\\d)'\n+\n+        parser_origin = Parser().get_version\n+        parser_split = re.findall(regex, parser_origin).pop()\n+        generator_split = re.findall(regex, self.get_version).pop()\n+\n+        parser_major = float(parser_split[0])\n+        generator_major = float(generator_split[0])\n+\n+        if parser_major > generator_major:\n+            self.logger.critical('Generator (%s) requires the same or lesser version of Parser (%s)',\n+                                 self.get_version, parser_origin)\n+            sys.exit(1)\n+\n+        self.logger.info('Parser type: %s, version %s,\\tGenerator version %s',\n+                         basename(getfile(Parser().__class__)), parser_origin, self.get_version)\n+\n+    def get_paths(self, file_name=ROOT.joinpath('paths.ini')):\n+        \"\"\"\n+        :param file_name: path to file with Paths\n+        :return: namedtuple with Paths to key elements\n+        \"\"\"\n+        fields = ('struct_class', 'request_class', 'response_class',\n+                  'notification_class', 'enums_package', 'structs_package', 'functions_package')\n+        intermediate = OrderedDict()\n+        try:\n+            with file_name.open('r') as file:\n+                for line in file:\n+                    if line.startswith('#'):\n+                        self.logger.warning('commented property %s, which will be skipped', line.strip())\n+                        continue\n+                    if re.match(r'^(\\w+)\\s?=\\s?(.+)', line):\n+                        if len(line.split('=')) > 2:\n+                            self.logger.critical('can not evaluate value, too many separators %s', str(line))\n+                            sys.exit(1)\n+                        name, var = line.partition('=')[::2]\n+                        if name.strip() in intermediate:\n+                            self.logger.critical('duplicate key %s', name)\n+                            sys.exit(1)\n+                        intermediate[name.strip().lower()] = var.strip()\n+        except FileNotFoundError as message1:\n+            self.logger.critical(message1)\n+            sys.exit(1)\n+\n+        for line in fields:\n+            if line not in intermediate:\n+                self.logger.critical('in %s missed fields: %s ', file, str(line))\n+                sys.exit(1)\n+\n+        Paths = namedtuple('Paths', ' '.join(fields))\n+        return Paths(**intermediate)\n+\n+    def get_mappings(self, file_name=ROOT.joinpath('mapping.json')):\n+        \"\"\"\n+        The key name in *.json is equal to property named in jinja2 templates\n+        :param file_name: path to file with manual mappings\n+        :return: dictionary with custom manual mappings\n+        \"\"\"\n+\n+        try:\n+            with file_name.open('r') as file:\n+                intermediate = file.readlines()\n+            return loads(''.join(intermediate))\n+        except (FileNotFoundError, JSONDecodeError) as message1:\n+            self.logger.warning(message1)\n+            return OrderedDict()\n+\n+    def write_file(self, file_name, template, data):\n+        \"\"\"\n+        Calling producer/transformer instance to transform initial Model to dict used in jinja2 templates.\n+        Applying transformed dict to jinja2 templates and writing to appropriate file\n+        :param file_name: output js file", "originalCommit": "4038f645ae3b798c1c4a428089f6cb903a2bb13a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNDA4Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385704083", "bodyText": "fixed, thanks", "author": null, "createdAt": "2020-02-28T13:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwNjY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwNjgyMA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383506820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    :param data: transformed moder ready for apply to Jinja2 template\n          \n          \n            \n                    :param data: transformed model ready for apply to Jinja2 template", "author": "bilal-alsharifi", "createdAt": "2020-02-24T20:51:00Z", "path": "utils/generator/generator.py", "diffHunk": "@@ -0,0 +1,443 @@\n+\"\"\"This is main runner of generator\n+\n+\"\"\"\n+import logging\n+import re\n+import sys\n+import datetime\n+from argparse import ArgumentParser\n+from collections import namedtuple, OrderedDict\n+from inspect import getfile\n+from json import JSONDecodeError, loads\n+from os.path import basename\n+from pprint import pformat\n+from time import sleep\n+from xml.etree.ElementTree import ParseError as XMLSchemaError\n+\n+from jinja2 import Environment, FileSystemLoader, TemplateNotFound, UndefinedError\n+from pathlib2 import Path\n+from xmlschema import XMLSchema\n+\n+ROOT = Path(__file__).absolute().parents[0]\n+\n+sys.path.append(ROOT.joinpath('rpc_spec/InterfaceParser').as_posix())\n+\n+try:\n+    from parsers.sdl_rpc_v2 import Parser\n+    from parsers.parse_error import ParseError as InterfaceError\n+    from model.interface import Interface\n+    from transformers.generate_error import GenerateError\n+    from transformers.common_producer import InterfaceProducerCommon\n+    from transformers.enums_producer import EnumsProducer\n+    from transformers.functions_producer import FunctionsProducer\n+    from transformers.structs_producer import StructsProducer\n+except ImportError as message:\n+    print('{}. probably you did not initialize submodule'.format(message))\n+    sys.exit(1)\n+\n+\n+class Generator:\n+    \"\"\"\n+    This class contains only technical features, as follow:\n+    - parsing command-line arguments, or evaluating required Paths interactively;\n+    - calling parsers to get Model from xml;\n+    - calling producers to transform initial Model to dict used in jinja2 templates\n+    Not required to be covered by unit tests cause contains only technical features.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.logger = logging.getLogger(self.__class__.__name__)\n+        self._env = None\n+\n+    @property\n+    def env(self):\n+        \"\"\"\n+        :return: jinja2 Environment\n+        \"\"\"\n+        return self._env\n+\n+    @env.setter\n+    def env(self, value):\n+        \"\"\"\n+        :param value: path with directory with templates\n+        :return: jinja2 Environment\n+        \"\"\"\n+        if not Path(value).exists():\n+            self.logger.critical('Directory with templates not found %s', value)\n+            sys.exit(1)\n+        else:\n+            self._env = Environment(loader=FileSystemLoader(value))\n+\n+    @property\n+    def get_version(self):\n+        \"\"\"\n+        :return: current version of Generator\n+        \"\"\"\n+        return InterfaceProducerCommon.version\n+\n+    def config_logging(self, verbose):\n+        \"\"\"\n+        Configure logging\n+        :param verbose: boolean\n+        \"\"\"\n+        handler = logging.StreamHandler()\n+        handler.setFormatter(logging.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n+                                               datefmt='%m-%d %H:%M'))\n+        if verbose:\n+            handler.setLevel(logging.DEBUG)\n+            self.logger.setLevel(logging.DEBUG)\n+        else:\n+            handler.setLevel(logging.ERROR)\n+            self.logger.setLevel(logging.ERROR)\n+        logging.getLogger().handlers.clear()\n+        root_logger = logging.getLogger()\n+        root_logger.addHandler(handler)\n+\n+    def evaluate_source_xml_xsd(self, xml, xsd):\n+        \"\"\"\n+        :param xml: path to MOBILE_API.xml file\n+        :param xsd: path to .xsd file (optional)\n+        :return: validated path to .xsd file\n+        \"\"\"\n+        if not Path(xml).exists():\n+            self.logger.critical('File not found: %s', xml)\n+            sys.exit(1)\n+\n+        if xsd and Path(xsd).exists():\n+            return xsd\n+\n+        replace = xml.replace('.xml', '.xsd')\n+        if xsd and not Path(xsd).exists():\n+            self.logger.critical('File not found: %s', xsd)\n+            sys.exit(1)\n+        elif not xsd and not Path(replace).exists():\n+            self.logger.critical('File not found: %s', replace)\n+            sys.exit(1)\n+        else:\n+            return replace\n+\n+    def evaluate_output_directory(self, output_directory):\n+        \"\"\"\n+        :param output_directory: path to output_directory\n+        :return: validated path to output_directory\n+        \"\"\"\n+        if output_directory.startswith('/'):\n+            path = Path(output_directory).absolute().resolve()\n+        else:\n+            path = ROOT.joinpath(output_directory).resolve()\n+        if not path.exists():\n+            self.logger.warning('Directory not found: %s, trying to create it', path)\n+            try:\n+                path.mkdir(parents=True, exist_ok=True)\n+            except OSError as message1:\n+                self.logger.critical('Failed to create directory %s, %s', path.as_posix(), message1)\n+                sys.exit(1)\n+        return path\n+\n+    def get_parser(self):\n+        \"\"\"\n+        Parsing command-line arguments, or evaluating required Paths interactively.\n+        :return: an instance of argparse.ArgumentParser\n+        \"\"\"\n+\n+        if len(sys.argv) == 2 and sys.argv[1] in ('-v', '--version'):\n+            print(self.get_version)\n+            sys.exit(0)\n+\n+        Paths = namedtuple('Paths', 'name path')\n+        xml = Paths('source_xml', ROOT.joinpath('rpc_spec/MOBILE_API.xml'))\n+        required_source = not xml.path.exists()\n+\n+        out = Paths('output_directory', ROOT.parents[1].joinpath('base/src/main/java/'))\n+        output_required = not out.path.exists()\n+\n+        parser = ArgumentParser(description='Proxy Library RPC Generator')\n+        parser.add_argument('-v', '--version', action='store_true', help='print the version and exit')\n+        parser.add_argument('-xml', '--source-xml', '--input-file', required=required_source,\n+                            help='should point to MOBILE_API.xml')\n+        parser.add_argument('-xsd', '--source-xsd', required=False)\n+        parser.add_argument('-d', '--output-directory', required=output_required,\n+                            help='define the place where the generated output should be placed')\n+        parser.add_argument('-t', '--templates-directory', nargs='?', default=ROOT.joinpath('templates').as_posix(),\n+                            help='path to directory with templates')\n+        parser.add_argument('-r', '--regex-pattern', required=False,\n+                            help='only elements matched with defined regex pattern will be parsed and generated')\n+        parser.add_argument('--verbose', action='store_true', help='display additional details like logs etc')\n+        parser.add_argument('-e', '--enums', required=False, action='store_true',\n+                            help='only specified elements will be generated, if present')\n+        parser.add_argument('-s', '--structs', required=False, action='store_true',\n+                            help='only specified elements will be generated, if present')\n+        parser.add_argument('-m', '-f', '--functions', required=False, action='store_true',\n+                            help='only specified elements will be generated, if present')\n+        parser.add_argument('-y', '--overwrite', action='store_true',\n+                            help='force overwriting of existing files in output directory, ignore confirmation message')\n+        parser.add_argument('-n', '--skip', action='store_true',\n+                            help='skip overwriting of existing files in output directory, ignore confirmation message')\n+\n+        args, unknown = parser.parse_known_args()\n+\n+        if unknown:\n+            self.logger.critical('found unknown arguments: %s', ' '.join(unknown))\n+            parser.print_help(sys.stderr)\n+            sys.exit(1)\n+\n+        if args.skip and args.overwrite:\n+            self.logger.critical('please select only one option skip or overwrite')\n+            sys.exit(1)\n+\n+        if not args.enums and not args.structs and not args.functions:\n+            args.enums = args.structs = args.functions = True\n+\n+        for intermediate in (xml, out):\n+            if not getattr(args, intermediate.name) and intermediate.path.exists():\n+                while True:\n+                    try:\n+                        confirm = input('Confirm default path {} for {} Y/Enter = yes, N = no'\n+                                        .format(intermediate.path, intermediate.name))\n+                        if confirm.lower() == 'y' or not confirm:\n+                            self.logger.warning('%s set to %s', intermediate.name, intermediate.path)\n+                            setattr(args, intermediate.name, intermediate.path.as_posix())\n+                            sleep(0.05)\n+                            break\n+                        if confirm.lower() == 'n':\n+                            self.logger.warning('provide argument %s', intermediate.name)\n+                            sys.exit(1)\n+                    except KeyboardInterrupt:\n+                        print('\\nThe user interrupted the execution of the program')\n+                        sys.exit(1)\n+\n+        self.config_logging(args.verbose)\n+\n+        args.source_xsd = self.evaluate_source_xml_xsd(args.source_xml, args.source_xsd)\n+\n+        args.output_directory = self.evaluate_output_directory(args.output_directory)\n+\n+        self.env = args.templates_directory\n+\n+        self.logger.info('parsed arguments:\\n%s', pformat((vars(args))))\n+        return args\n+\n+    def versions_compatibility_validating(self):\n+        \"\"\"version of generator script requires the same or lesser version of parser script.\n+        if the parser script needs to fix a bug (and becomes, e.g. 1.0.1) and the generator script stays at 1.0.0.\n+        As long as the generator script is the same or greater major version, it should be parsable.\n+        This requires some level of backward compatibility. E.g. they have to be the same major version.\n+\n+        \"\"\"\n+\n+        regex = r'(\\d+\\.\\d+).(\\d)'\n+\n+        parser_origin = Parser().get_version\n+        parser_split = re.findall(regex, parser_origin).pop()\n+        generator_split = re.findall(regex, self.get_version).pop()\n+\n+        parser_major = float(parser_split[0])\n+        generator_major = float(generator_split[0])\n+\n+        if parser_major > generator_major:\n+            self.logger.critical('Generator (%s) requires the same or lesser version of Parser (%s)',\n+                                 self.get_version, parser_origin)\n+            sys.exit(1)\n+\n+        self.logger.info('Parser type: %s, version %s,\\tGenerator version %s',\n+                         basename(getfile(Parser().__class__)), parser_origin, self.get_version)\n+\n+    def get_paths(self, file_name=ROOT.joinpath('paths.ini')):\n+        \"\"\"\n+        :param file_name: path to file with Paths\n+        :return: namedtuple with Paths to key elements\n+        \"\"\"\n+        fields = ('struct_class', 'request_class', 'response_class',\n+                  'notification_class', 'enums_package', 'structs_package', 'functions_package')\n+        intermediate = OrderedDict()\n+        try:\n+            with file_name.open('r') as file:\n+                for line in file:\n+                    if line.startswith('#'):\n+                        self.logger.warning('commented property %s, which will be skipped', line.strip())\n+                        continue\n+                    if re.match(r'^(\\w+)\\s?=\\s?(.+)', line):\n+                        if len(line.split('=')) > 2:\n+                            self.logger.critical('can not evaluate value, too many separators %s', str(line))\n+                            sys.exit(1)\n+                        name, var = line.partition('=')[::2]\n+                        if name.strip() in intermediate:\n+                            self.logger.critical('duplicate key %s', name)\n+                            sys.exit(1)\n+                        intermediate[name.strip().lower()] = var.strip()\n+        except FileNotFoundError as message1:\n+            self.logger.critical(message1)\n+            sys.exit(1)\n+\n+        for line in fields:\n+            if line not in intermediate:\n+                self.logger.critical('in %s missed fields: %s ', file, str(line))\n+                sys.exit(1)\n+\n+        Paths = namedtuple('Paths', ' '.join(fields))\n+        return Paths(**intermediate)\n+\n+    def get_mappings(self, file_name=ROOT.joinpath('mapping.json')):\n+        \"\"\"\n+        The key name in *.json is equal to property named in jinja2 templates\n+        :param file_name: path to file with manual mappings\n+        :return: dictionary with custom manual mappings\n+        \"\"\"\n+\n+        try:\n+            with file_name.open('r') as file:\n+                intermediate = file.readlines()\n+            return loads(''.join(intermediate))\n+        except (FileNotFoundError, JSONDecodeError) as message1:\n+            self.logger.warning(message1)\n+            return OrderedDict()\n+\n+    def write_file(self, file_name, template, data):\n+        \"\"\"\n+        Calling producer/transformer instance to transform initial Model to dict used in jinja2 templates.\n+        Applying transformed dict to jinja2 templates and writing to appropriate file\n+        :param file_name: output js file\n+        :param template: name of template\n+        :param data: transformed moder ready for apply to Jinja2 template", "originalCommit": "4038f645ae3b798c1c4a428089f6cb903a2bb13a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNDExOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385704119", "bodyText": "fixed, thanks", "author": null, "createdAt": "2020-02-28T13:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwNjgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383941200", "bodyText": "Can we confirm that the licenses for all libraries are among the accepted licenses in the contribution agreement:\nhttps://docs.google.com/forms/d/e/1FAIpQLSdsgJY33VByaX482zHzi-xUm49JNnmuJOyAM6uegPQ2LXYVfA\nAnd if so, add a section for the generator in the third-party libraries here:\nhttps://github.com/smartdevicelink/sdl_java_suite/blob/master/third_party.md", "author": "bilal-alsharifi", "createdAt": "2020-02-25T15:12:52Z", "path": "utils/generator/requirements.txt", "diffHunk": "@@ -0,0 +1,5 @@\n+xmlschema", "originalCommit": "3052b673dc547585c090d9a24e1f493b5c7c9833", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNDkwNg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385704906", "bodyText": "Bilal, docs.google.com link is not working for me, could you please check it?\nI committed section for generator and it's dependencies in third_party.md", "author": null, "createdAt": "2020-02-28T13:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxOTU5MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385719590", "bodyText": "You are right. Sorry about that. This is the working link:\nhttps://docs.google.com/forms/d/1VNR8EUd5b46cQ7uNbCq1fJmnu0askNpUp5dudLKRGpU/viewform", "author": "bilal-alsharifi", "createdAt": "2020-02-28T14:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTI1Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385729252", "bodyText": "We using pylint python library for python code checks/linting. It licensed under GPL license per project page https://github.com/PyCQA/pylint. Could you please confirm we need to remove this dependency and consider other library for code checks (which distributed under supported license)?\nAll other dependencies is under allowed list of licenses (MIT, BSD3 and Apache2.0)", "author": null, "createdAt": "2020-02-28T14:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczNDA0OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385734049", "bodyText": "@bilal-alsharifi meanwhile we have used PyLint based on the case that it is already used in smartdevicelink/sdl_core interface_generator Is that wrong and outdated usage with the unsupported license too?", "author": "vladmu", "createdAt": "2020-02-28T14:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNzQzMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385807433", "bodyText": "Good point. @theresalech do you know what we should do in that case?", "author": "bilal-alsharifi", "createdAt": "2020-02-28T16:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMjE5MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385832190", "bodyText": "By the way, I already tried to replace pylint with flake8 which is licensed by MIT license https://pypi.org/project/flake8/ and it works fine for code checks, so we can replace it without a problem. Both pylint and flake8 are 2 most popular python code check tools so I don't think it will be a problem. flake8 also was among dependencies for sdl_core interface generator.", "author": null, "createdAt": "2020-02-28T17:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1ODAwNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385858007", "bodyText": "That is great then. Thanks for doing that.", "author": "bilal-alsharifi", "createdAt": "2020-02-28T18:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1MDQzOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r386050439", "bodyText": "No problem, moved this to PR branch", "author": null, "createdAt": "2020-02-29T19:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3NDA2OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383974068", "bodyText": "I dont get why only \"simple\" enums have javadoc for methods like toString(), valueForString()`, and getValue() ... We recommend adding javadoc to all public methods.", "author": "bilal-alsharifi", "createdAt": "2020-02-25T16:01:20Z", "path": "utils/generator/templates/enum_template.java", "diffHunk": "@@ -0,0 +1,201 @@\n+{% extends \"base_template.java\" %}\n+{% block body %}\n+public enum {{class_name}} {\n+    {%- for param in params %}\n+    {%- if param.description is defined or param.since is defined %}\n+    /**\n+     {%- if param.description is defined %}\n+     {%- for d in param.description %}\n+     * {{d}}\n+     {%- endfor %}{% endif -%}\n+     {%- if param.description is defined and (param.since is defined or param.see is defined) %}\n+     *\n+     {%- endif %}\n+     {%- if param.since is defined %}\n+     * @since SmartDeviceLink {{param.since}}\n+     {%- endif %}\n+     {%- if param.see is defined %}\n+     * @see {{param.see}}\n+     {%- endif %}\n+     */\n+    {%- endif %}\n+    {%- if param.deprecated is defined %}\n+    @Deprecated\n+    {%- endif %}\n+    {%- if kind == \"simple\" %}\n+    {{param.name}}{{ \",\" if not loop.last }}\n+    {%- elif kind == \"custom\" %}\n+    {{param.name}}({{param.internal}}){{ \",\" if not loop.last }}\n+    {%- elif kind == \"complex\" %}\n+    {{param.name}}({{param.value}}, {{param.internal}}){{ \",\" if not loop.last }}\n+    {%- endif %}\n+    {%- endfor %};\n+\n+    {%- if kind == \"simple\" %}\n+\n+    /**", "originalCommit": "f212753cc3c7d163b7d46c5eb896bec83559d5c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3NDg5Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383974893", "bodyText": "I have another question: should each enum have an entry in the mapping.json to specify its kind? because I don't see one for HMILevel for example. Like in the future, if we want to add a new enum and this enum follows the specs with no corner cases, do we still need to alter the mapping?", "author": "bilal-alsharifi", "createdAt": "2020-02-25T16:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3NDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNjYxNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385706614", "bodyText": "Added additional javadocs as per your comment. No, kind is coming by default from code logic, depending on \"value\" and \"internal\" name attributes of enum element. All support for corner cases (mapping code) and mapping.json itself was removed completely to comply with committee decision.", "author": null, "createdAt": "2020-02-28T13:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3NDA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4OTY0Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r383989646", "bodyText": "SetDisplayLayout is not deprecated in the proxies (even though it is deprecated in the specs). If we decide to keep the mappings, that should be included as a corner case.", "author": "bilal-alsharifi", "createdAt": "2020-02-25T16:41:50Z", "path": "utils/generator/templates/struct_function_template.java", "diffHunk": "@@ -0,0 +1,80 @@\n+{% extends \"base_template.java\" %}\n+\n+{% block body %}\n+public class {{class_name}} extends {{extends_class}} {\n+    {%- if params is defined %}\n+    {%- for p in params %}\n+    {%- if p.see is defined or p.deprecated is not none %}\n+    /**\n+     {%- if p.deprecated is not none %}\n+     * @deprecated", "originalCommit": "f212753cc3c7d163b7d46c5eb896bec83559d5c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNjgwNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385706805", "bodyText": "As we removed mapping leaving it as is", "author": null, "createdAt": "2020-02-28T13:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4OTY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NzE3OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r384067178", "bodyText": "The javadoc for both params is the same", "author": "bilal-alsharifi", "createdAt": "2020-02-25T19:09:37Z", "path": "utils/generator/templates/function_template.java", "diffHunk": "@@ -0,0 +1,62 @@\n+{% extends \"struct_function_template.java\" %}\n+\n+    {%- block constructor_simple %}\n+    public {{class_name}}() {\n+        super(FunctionID.{{function_id}}.toString());\n+    }{% endblock -%}\n+\n+    {%- block constructor_complex %}\n+    {%- if kind is defined and kind == \"response\" %}\n+\n+    /**\n+     * Constructs a new {{class_name}} object\n+     *\n+     * @param success    whether the request is successfully processed", "originalCommit": "f212753cc3c7d163b7d46c5eb896bec83559d5c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNzMxNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385707314", "bodyText": "It was the same across all java library, including RPCResponse.java where this methods defined. Although I updated this comments to different ones in generator template.", "author": null, "createdAt": "2020-02-28T13:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NzE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDA0NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r384070045", "bodyText": "I am not sure why we hardcode a specific constructor for the Responses in the template. I guess if we follow the same generic rule that creates constructor with all mandatory params in the same order as they appear in the SPEC, that will be better. Any thoughts?", "author": "bilal-alsharifi", "createdAt": "2020-02-25T19:15:15Z", "path": "utils/generator/templates/function_template.java", "diffHunk": "@@ -0,0 +1,62 @@\n+{% extends \"struct_function_template.java\" %}\n+\n+    {%- block constructor_simple %}\n+    public {{class_name}}() {\n+        super(FunctionID.{{function_id}}.toString());\n+    }{% endblock -%}\n+\n+    {%- block constructor_complex %}\n+    {%- if kind is defined and kind == \"response\" %}\n+\n+    /**\n+     * Constructs a new {{class_name}} object\n+     *\n+     * @param success    whether the request is successfully processed\n+     * @param resultCode whether the request is successfully processed\n+     */\n+    public {{class_name}}(@NonNull Boolean success, @NonNull Result resultCode) {", "originalCommit": "f212753cc3c7d163b7d46c5eb896bec83559d5c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDQ1MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r384070451", "bodyText": "This incorrectly creating constructors for some RPCs. Look at ButtonPressResponse for example. it generates two different constructors that differ only in the params order.", "author": "bilal-alsharifi", "createdAt": "2020-02-25T19:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNzUxMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385707511", "bodyText": "I got the issue, going to fix this", "author": null, "createdAt": "2020-02-28T13:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNzYyOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r387027629", "bodyText": "fixed", "author": null, "createdAt": "2020-03-03T13:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyNDg1NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r384124855", "bodyText": "is not that duplicate of what is done in line 65? that applies to other producers as well.", "author": "bilal-alsharifi", "createdAt": "2020-02-25T21:04:28Z", "path": "utils/generator/transformers/structs_producer.py", "diffHunk": "@@ -0,0 +1,138 @@\n+\"\"\"\n+Structs transformation\n+\"\"\"\n+\n+import logging\n+import textwrap\n+from collections import namedtuple, OrderedDict\n+\n+from model.param import Param\n+from model.struct import Struct\n+from transformers.common_producer import InterfaceProducerCommon\n+\n+\n+class StructsProducer(InterfaceProducerCommon):\n+    \"\"\"\n+    Structs transformation\n+    \"\"\"\n+\n+    def __init__(self, paths, enum_names, struct_names, mapping=None):\n+        super(StructsProducer, self).__init__(\n+            container_name='members',\n+            enums_package=paths.enums_package,\n+            structs_package=paths.structs_package,\n+            enum_names=enum_names,\n+            struct_names=struct_names,\n+            package_name=paths.structs_package,\n+            mapping=mapping['structs'] if mapping and 'structs' in mapping else {},\n+            all_mapping=mapping if mapping else {})\n+        self.logger = logging.getLogger('StructsProducer')\n+        self.struct_class = paths.struct_class\n+\n+    def transform(self, item: Struct) -> dict:\n+        \"\"\"\n+        Override\n+        :param item: particular element from initial Model\n+        :return: dictionary to be applied to jinja2 template\n+        \"\"\"\n+        class_name = self.replace_sync(item.name[:1].upper() + item.name[1:])\n+\n+        imports = {'java.util.Hashtable'}\n+        extends_class = self.struct_class\n+\n+        imports.add(extends_class)\n+        extends_class = extends_class.rpartition('.')[-1]\n+\n+        params = OrderedDict()\n+\n+        for param in getattr(item, self.container_name).values():\n+            param.name = self.replace_sync(param.name)\n+            i, p = self.extract_param(param)\n+            imports.update(i)\n+            params[param.name] = p\n+\n+        render = OrderedDict()\n+        render['class_name'] = class_name\n+        render['extends_class'] = extends_class\n+        render['package_name'] = self.package_name\n+        render['imports'] = imports", "originalCommit": "f212753cc3c7d163b7d46c5eb896bec83559d5c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNzY0MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385707641", "bodyText": "Removed duplication, thanks", "author": null, "createdAt": "2020-02-28T13:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyNDg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMjQwMA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r384132400", "bodyText": "Would it be possible to trigger the tests on every push using Git Workflow CI? similar to how we do that for Android, JavaSE, and JavaEE tests here:\nhttps://github.com/smartdevicelink/sdl_java_suite/blob/develop/.github/workflows/android.yml", "author": "bilal-alsharifi", "createdAt": "2020-02-25T21:19:47Z", "path": "utils/generator/test/runner.py", "diffHunk": "@@ -0,0 +1,41 @@\n+\"\"\"\n+Main entry point to run all tests\n+\"\"\"\n+import sys\n+from pathlib import Path\n+from unittest import TestLoader, TestSuite, TextTestRunner\n+\n+PATH = Path(__file__).absolute()\n+\n+sys.path.append(PATH.parents[1].joinpath('rpc_spec/InterfaceParser').as_posix())\n+sys.path.append(PATH.parents[1].as_posix())\n+\n+try:\n+    from test_order import TestOrder\n+    from test_enums import TestEnumsProducer\n+    from test_functions import TestFunctionsProducer\n+    from test_structs import TestStructsProducer\n+    from test_code_format_and_quality import CodeFormatAndQuality\n+except ImportError as message:\n+    print('{}. probably you did not initialize submodule'.format(message))\n+    sys.exit(1)\n+\n+\n+def main():\n+    \"\"\"\n+    Main entry point to run all tests\n+    \"\"\"\n+\n+    suite = TestSuite()\n+    suite.addTests(TestLoader().loadTestsFromTestCase(TestOrder))\n+    suite.addTests(TestLoader().loadTestsFromTestCase(TestFunctionsProducer))\n+    suite.addTests(TestLoader().loadTestsFromTestCase(TestEnumsProducer))\n+    suite.addTests(TestLoader().loadTestsFromTestCase(TestStructsProducer))\n+    suite.addTests(TestLoader().loadTestsFromTestCase(CodeFormatAndQuality))\n+\n+    runner = TextTestRunner(verbosity=2)\n+    runner.run(suite)\n+\n+\n+if __name__ == '__main__':", "originalCommit": "f212753cc3c7d163b7d46c5eb896bec83559d5c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwNzkxMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r385707912", "bodyText": "I will add this to github actions file.", "author": null, "createdAt": "2020-02-28T13:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMjQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNzMzMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r387027332", "bodyText": "Added tests to github actions, build works fine", "author": null, "createdAt": "2020-03-03T13:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMjQwMA=="}], "type": "inlineReview"}, {"oid": "53c5b494bfde7200d700fbf7cc2215aac7191cad", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/53c5b494bfde7200d700fbf7cc2215aac7191cad", "message": "fixed as per review comments", "committedDate": "2020-02-26T12:25:49Z", "type": "commit"}, {"oid": "4c6c99ae65523d8e780497af0ede4d183f741fb4", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4c6c99ae65523d8e780497af0ede4d183f741fb4", "message": "fixed as per review comments", "committedDate": "2020-02-26T12:25:51Z", "type": "commit"}, {"oid": "ed37a95463d7e91df1518bb9b95cace356439284", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ed37a95463d7e91df1518bb9b95cace356439284", "message": "Merge branch 'SDL-0234-no-corner-cases' into SDL-0234-Proxy-Library-RPC-Generation\n\n# Conflicts:\n#\tutils/generator/mapping.json\n#\tutils/generator/templates/scripts/OnHMIStatus_format.java", "committedDate": "2020-02-26T14:22:07Z", "type": "commit"}, {"oid": "3a0182a6c4680511057fcc7e87ff02d263a10727", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3a0182a6c4680511057fcc7e87ff02d263a10727", "message": "removed customization code", "committedDate": "2020-02-26T19:10:05Z", "type": "commit"}, {"oid": "ca852ea4472142f592174122d5cea9b21454c098", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ca852ea4472142f592174122d5cea9b21454c098", "message": "removed customization in templates", "committedDate": "2020-02-27T19:11:49Z", "type": "commit"}, {"oid": "dbcf447dfc692ba38458b3467b15f77b7d66c3eb", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/dbcf447dfc692ba38458b3467b15f77b7d66c3eb", "message": "fixes per review comments", "committedDate": "2020-02-28T13:47:25Z", "type": "commit"}, {"oid": "9bc7102b06a9dd6384d488a9b4ac73e85793e612", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/9bc7102b06a9dd6384d488a9b4ac73e85793e612", "message": "replacing pylint with flake8 because of license issues", "committedDate": "2020-02-29T18:57:12Z", "type": "commit"}, {"oid": "bef2c8cb2cfeb9cac7e606f09550558d16d3a11c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/bef2c8cb2cfeb9cac7e606f09550558d16d3a11c", "message": "Fixes per review comments", "committedDate": "2020-03-01T20:18:43Z", "type": "commit"}, {"oid": "378f1e7acb69843bad6336da78a6c6a71e4f7cd4", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/378f1e7acb69843bad6336da78a6c6a71e4f7cd4", "message": "fixed enum tests for mapinngless implementation", "committedDate": "2020-03-02T15:49:44Z", "type": "commit"}, {"oid": "133fda22f860c22002655580d06cca8e51c234f3", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/133fda22f860c22002655580d06cca8e51c234f3", "message": "fixed struct/function tests for mapinngless implementation", "committedDate": "2020-03-02T19:02:02Z", "type": "commit"}, {"oid": "3b73dd6c60d07e0ef6474a26bb5a79b0fa026efb", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3b73dd6c60d07e0ef6474a26bb5a79b0fa026efb", "message": "added RPC generator tests to github actions", "committedDate": "2020-03-02T19:08:34Z", "type": "commit"}, {"oid": "018c89e425f3c1795e637bb6b729a157ccbb5158", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/018c89e425f3c1795e637bb6b729a157ccbb5158", "message": "update README for generator and fixed templates", "committedDate": "2020-03-03T11:41:54Z", "type": "commit"}, {"oid": "ea7a63125ed4eb79de20ba0287f9ccb283337738", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ea7a63125ed4eb79de20ba0287f9ccb283337738", "message": "added python modules installation to github workflow", "committedDate": "2020-03-03T12:00:51Z", "type": "commit"}, {"oid": "11d9f79f88fc8f25dc868c7ace1ffeef21082d6d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/11d9f79f88fc8f25dc868c7ace1ffeef21082d6d", "message": "Merge branch 'develop' into SDL-0234-Proxy-Library-RPC-Generation", "committedDate": "2020-03-04T15:50:40Z", "type": "commit"}, {"oid": "59c229add7e0cfb9d22bc0f68c86c1d07b4716df", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/59c229add7e0cfb9d22bc0f68c86c1d07b4716df", "message": "Explicitly removing file before overriding content", "committedDate": "2020-03-04T17:37:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NTAwNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r387895004", "bodyText": "Can we remove the extra line here? this generates an extra line at the end of all functions and structs.", "author": "bilal-alsharifi", "createdAt": "2020-03-04T19:46:54Z", "path": "utils/generator/templates/struct_function_template.java", "diffHunk": "@@ -0,0 +1,70 @@\n+{% extends \"base_template.java\" %}\n+\n+{% block body %}\n+public class {{class_name}} extends {{extends_class}} {\n+    {%- if params is defined and ((kind is defined and kind != \"response\") or kind is not defined) %}\n+    {%- for p in params %}\n+    {%- if p.see is defined or p.deprecated is not none %}\n+    /**\n+     {%- if p.deprecated is not none %}\n+     * @deprecated\n+     {%- endif %}\n+     {%- if p.see is defined %}\n+     * @see {{p.see}}\n+     {%- endif %}\n+     */\n+    {%- endif %}\n+    {%- if p.deprecated is not none %}\n+    @Deprecated\n+    {%- endif %}\n+    {%- if p.name is defined %}\n+    private {% if p.modifier is defined %}{{p.modifier}} {% endif %}{{p.return_type}} {{p.name}}{% if p.value is defined %} = {{p.value}}{% endif %};\n+    {%- else %}\n+    public static final String {{p.key}} = \"{{p.origin}}\";\n+    {%- endif %}\n+    {%- endfor %}\n+    {%- endif %}\n+\n+    /**\n+     * Constructs a new {{class_name}} object\n+     */\n+    {%- block constructor_simple %}\n+    {% endblock %}\n+\n+    /**\n+     * Constructs a new {{class_name}} object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public {{class_name}}(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+    {%- if params is defined %}\n+    {%- set constructor = [] %}\n+    {%- for p in params|selectattr('mandatory') %}{{ constructor.append('@NonNull ' + p.return_type + ' ' + p.last) or '' }}\n+    {%- endfor %}\n+    {%- if constructor|length > 0 %}\n+\n+    /**\n+     * Constructs a new {{class_name}} object\n+     *\n+     {%- for p in params|selectattr('mandatory') %}\n+     {%- include \"javadoc_template.java\" %}\n+     {%- endfor %}\n+     */\n+    public {{class_name}}({{ constructor|join(', ') }}) {\n+        this();\n+        {%- for p in params|selectattr('mandatory') %}\n+        set{{p.title}}({{p.last}});\n+        {%- endfor %}\n+    }\n+    {%- endif %}\n+    {%- endif %}\n+\n+    {%- if params is defined and ((kind is defined and kind != \"response\") or kind is not defined) %}\n+    {%- block setter %}\n+    {%- endblock%}\n+    {%- endif %}\n+", "originalCommit": "59c229add7e0cfb9d22bc0f68c86c1d07b4716df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1NTQ4NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r387955485", "bodyText": "Sure, removed", "author": null, "createdAt": "2020-03-04T21:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NTAwNA=="}], "type": "inlineReview"}, {"oid": "ef29730fa3697dc4b896895b8a44be375a927447", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ef29730fa3697dc4b896895b8a44be375a927447", "message": "removed extra line in struct/function template", "committedDate": "2020-03-04T21:49:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NTM4Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r388945383", "bodyText": "Would it be possible to require 3.8 since 3.5 will reach its end of life in the end of 2020?", "author": "bilal-alsharifi", "createdAt": "2020-03-06T14:49:55Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2256 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 or later pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).", "originalCommit": "ef29730fa3697dc4b896895b8a44be375a927447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3NjM2Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r388976367", "bodyText": "@bilal-alsharifi the code is compatible with 3.5 thus minimum required version is 3.5. This part just notifies that the generator will not work with previous versions. Even after 3.5 will reach EoL, the code will be compatible with that version until somebody puts the incompatible code. Do we still need this fix here?", "author": "vladmu", "createdAt": "2020-03-06T15:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NTM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxODU4Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389018583", "bodyText": "but stating that we are going to support a relatively old version will prevent us from using any of the features in the newer python version. Maybe 3.8 is very new. I suggest something in the middle like 3.6 or 3.7. Let's wait on doing that though until we discuss it with the other teams to make sure all platforms align on that.", "author": "bilal-alsharifi", "createdAt": "2020-03-06T16:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NTM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4MjczNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390182737", "bodyText": "@bilal-alsharifi the document states \"3.5 or later\" therefore, I don't think this note prevents you from using the newest features if needed. This only about the current state of the generator, but if someone puts incompatible features in the future, the document should be adjusted simultaneously.", "author": "vladmu", "createdAt": "2020-03-10T09:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NTM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2MDY0Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390360642", "bodyText": "@bilal-alsharifi done in 7599c41 the same way as discussed with @joeljfischer in iOS PR smartdevicelink/sdl_ios#1556 (comment)", "author": "vladmu", "createdAt": "2020-03-10T14:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NTM4Mw=="}], "type": "inlineReview"}, {"oid": "3e68111569fde73d8c8a5dad444fdf9a4195bcf7", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3e68111569fde73d8c8a5dad444fdf9a4195bcf7", "message": "change requested in review", "committedDate": "2020-03-06T16:36:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjYwNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389032604", "bodyText": "Can we also rename this var to be VALUE instead of INTERNAL_NAME?", "author": "bilal-alsharifi", "createdAt": "2020-03-06T17:13:57Z", "path": "utils/generator/templates/enum_template.java", "diffHunk": "@@ -0,0 +1,126 @@\n+{% extends \"base_template.java\" %}\n+{% block body %}\n+public enum {{class_name}} {\n+    {%- for param in params %}\n+    {%- if param.description is defined or param.since is defined %}\n+    /**\n+     {%- if param.description is defined %}\n+     {%- for d in param.description %}\n+     * {{d}}\n+     {%- endfor %}{% endif -%}\n+     {%- if param.description is defined and (param.since is defined or param.see is defined) %}\n+     *\n+     {%- endif %}\n+     {%- if param.since is defined %}\n+     * @since SmartDeviceLink {{param.since}}\n+     {%- endif %}\n+     {%- if param.see is defined %}\n+     * @see {{param.see}}\n+     {%- endif %}\n+     */\n+    {%- endif %}\n+    {%- if param.deprecated is defined %}\n+    @Deprecated\n+    {%- endif %}\n+    {%- if kind == \"simple\" %}\n+    {{param.name}}{{ \",\" if not loop.last }}\n+    {%- elif kind == \"complex\" %}\n+    {{param.name}}({{param.value}}){{ \",\" if not loop.last }}\n+    {%- elif kind == \"custom\" %}\n+    {{param.name}}({{param.internal}}){{ \",\" if not loop.last }}\n+    {%- endif %}\n+    {%- endfor %};\n+\n+    {%- if kind == \"simple\" %}\n+\n+    /**\n+     * Convert String to {{class_name}}\n+     *\n+     * @param value String\n+     * @return {{class_name}}\n+     */\n+    public static {{class_name}} valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+    {%- elif kind == \"complex\" or kind == \"custom\" %}\n+    {%- if return_type == \"String\" %}\n+\n+    private final String INTERNAL_NAME;", "originalCommit": "3e68111569fde73d8c8a5dad444fdf9a4195bcf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2NTA5MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389065090", "bodyText": "done", "author": "o-mishch", "createdAt": "2020-03-06T18:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NDQyMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389074423", "bodyText": "Thanks", "author": "bilal-alsharifi", "createdAt": "2020-03-06T18:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjg2MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389032860", "bodyText": "and also rename this var to be value", "author": "bilal-alsharifi", "createdAt": "2020-03-06T17:14:26Z", "path": "utils/generator/templates/enum_template.java", "diffHunk": "@@ -0,0 +1,126 @@\n+{% extends \"base_template.java\" %}\n+{% block body %}\n+public enum {{class_name}} {\n+    {%- for param in params %}\n+    {%- if param.description is defined or param.since is defined %}\n+    /**\n+     {%- if param.description is defined %}\n+     {%- for d in param.description %}\n+     * {{d}}\n+     {%- endfor %}{% endif -%}\n+     {%- if param.description is defined and (param.since is defined or param.see is defined) %}\n+     *\n+     {%- endif %}\n+     {%- if param.since is defined %}\n+     * @since SmartDeviceLink {{param.since}}\n+     {%- endif %}\n+     {%- if param.see is defined %}\n+     * @see {{param.see}}\n+     {%- endif %}\n+     */\n+    {%- endif %}\n+    {%- if param.deprecated is defined %}\n+    @Deprecated\n+    {%- endif %}\n+    {%- if kind == \"simple\" %}\n+    {{param.name}}{{ \",\" if not loop.last }}\n+    {%- elif kind == \"complex\" %}\n+    {{param.name}}({{param.value}}){{ \",\" if not loop.last }}\n+    {%- elif kind == \"custom\" %}\n+    {{param.name}}({{param.internal}}){{ \",\" if not loop.last }}\n+    {%- endif %}\n+    {%- endfor %};\n+\n+    {%- if kind == \"simple\" %}\n+\n+    /**\n+     * Convert String to {{class_name}}\n+     *\n+     * @param value String\n+     * @return {{class_name}}\n+     */\n+    public static {{class_name}} valueForString(String value) {\n+        try {\n+            return valueOf(value);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+    {%- elif kind == \"complex\" or kind == \"custom\" %}\n+    {%- if return_type == \"String\" %}\n+\n+    private final String INTERNAL_NAME;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private {{class_name}}(String internalName) {", "originalCommit": "3e68111569fde73d8c8a5dad444fdf9a4195bcf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2NDk3Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389064976", "bodyText": "class_name renamed to value", "author": "o-mishch", "createdAt": "2020-03-06T18:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3MzQ2MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389073460", "bodyText": "@o-mishch Thanks for making the change. I meant renaming internalName to value though. Sorry I did not mean the class name. Can we change the class name back and just change internalName to value. and INTERNAL_NAME to VALUE", "author": "bilal-alsharifi", "createdAt": "2020-03-06T18:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MTc3NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389081775", "bodyText": "Like the following :\nprivate {{class_name}}(String value) {\n\tthis.VALUE = value;\n}", "author": "bilal-alsharifi", "createdAt": "2020-03-06T18:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NDA3Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389154077", "bodyText": "done", "author": "o-mishch", "createdAt": "2020-03-06T21:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY4NzgxOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389687819", "bodyText": "Thanks", "author": "bilal-alsharifi", "createdAt": "2020-03-09T13:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMjg2MA=="}], "type": "inlineReview"}, {"oid": "6d70c17439145a26fef155ec8edb87021dcc9c56", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/6d70c17439145a26fef155ec8edb87021dcc9c56", "message": "rename to VALUE", "committedDate": "2020-03-06T18:19:15Z", "type": "commit"}, {"oid": "3243f401a073ec894b411964ec4e782c81d8dcf1", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3243f401a073ec894b411964ec4e782c81d8dcf1", "message": "rename to VALUE", "committedDate": "2020-03-06T21:31:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDk1Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389744956", "bodyText": "The README.md seems to be a bit outdated now. Can we update it to reflect the latest changes like mapping removal and enum simplifications?", "author": "bilal-alsharifi", "createdAt": "2020-03-09T14:57:04Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2256 @@\n+# Proxy Library RPC Generator\n+\n+## Overview", "originalCommit": "3243f401a073ec894b411964ec4e782c81d8dcf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0Njc1NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389946755", "bodyText": "@ksologubov, @vladmu could you have look", "author": "o-mishch", "createdAt": "2020-03-09T20:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5OTY1MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390399651", "bodyText": "Readme updated", "author": null, "createdAt": "2020-03-10T15:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2ODYyMA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389868620", "bodyText": "do you think we can remove this l.name[0].isdigit() from the condition since it is already covered in l.name != self.converted(l.name)?", "author": "bilal-alsharifi", "createdAt": "2020-03-09T18:06:44Z", "path": "utils/generator/transformers/enums_producer.py", "diffHunk": "@@ -0,0 +1,118 @@\n+\"\"\"\n+Enums transformation\n+\"\"\"\n+\n+import logging\n+import textwrap\n+from collections import namedtuple, OrderedDict\n+\n+from model.enum import Enum\n+from model.enum_element import EnumElement\n+from transformers.common_producer import InterfaceProducerCommon\n+\n+\n+class EnumsProducer(InterfaceProducerCommon):\n+    \"\"\"\n+    Enums transformation\n+    \"\"\"\n+\n+    def __init__(self, paths):\n+        super(EnumsProducer, self).__init__(\n+            container_name='elements',\n+            enums_package=None,\n+            structs_package=None,\n+            package_name=paths.enums_package)\n+        self.logger = logging.getLogger('EnumsProducer')\n+        self._params = namedtuple('params', 'origin name internal description since value deprecated')\n+\n+    @staticmethod\n+    def converted(name):\n+        if name[0].isdigit():\n+            name = '_' + name\n+        if '-' in name:\n+            name = name.replace('-', '_')\n+        return name\n+\n+    def transform(self, item: Enum) -> dict:\n+        \"\"\"\n+        Override\n+        :param item: particular element from initial Model\n+        :return: dictionary to be applied to jinja2 template\n+        \"\"\"\n+        imports = set()\n+        params = OrderedDict()\n+        if any(map(lambda l: l.name != self.converted(l.name) and getattr(l, 'value', None) is not None,\n+                   getattr(item, self.container_name).values())):\n+            kind = 'complex'\n+            imports.add('java.util.EnumSet')\n+        elif any(map(lambda l:\n+                     l.name != self.converted(l.name) or l.name[0].isdigit() or getattr(l, 'value', None) is not None,", "originalCommit": "3243f401a073ec894b411964ec4e782c81d8dcf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NTk3MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389945971", "bodyText": "yes, you right.\nDeleting it.", "author": "o-mishch", "createdAt": "2020-03-09T20:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2ODYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NTc3MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389875771", "bodyText": "I am just wondering about what enums have the complex  kind? I don't see any of them do. However, if I made a case like that in the MOBILE_API.xml. Like this one, for example, the generator will not work well in that case:\n<enum name=\"PredefinedWindows\" since=\"6.0\">\n    <element name=\"0DEFAULT_WINDOW\" value=\"0\">\n        <description>The default window is a main window pre-created on behalf of the app.</description>\n    </element>\n    <element name=\"1PRIMARY_WIDGET\" value=\"1\">\n        <description>The primary widget of the app.</description>\n    </element>\n</enum>", "author": "bilal-alsharifi", "createdAt": "2020-03-09T18:19:47Z", "path": "utils/generator/transformers/enums_producer.py", "diffHunk": "@@ -0,0 +1,118 @@\n+\"\"\"\n+Enums transformation\n+\"\"\"\n+\n+import logging\n+import textwrap\n+from collections import namedtuple, OrderedDict\n+\n+from model.enum import Enum\n+from model.enum_element import EnumElement\n+from transformers.common_producer import InterfaceProducerCommon\n+\n+\n+class EnumsProducer(InterfaceProducerCommon):\n+    \"\"\"\n+    Enums transformation\n+    \"\"\"\n+\n+    def __init__(self, paths):\n+        super(EnumsProducer, self).__init__(\n+            container_name='elements',\n+            enums_package=None,\n+            structs_package=None,\n+            package_name=paths.enums_package)\n+        self.logger = logging.getLogger('EnumsProducer')\n+        self._params = namedtuple('params', 'origin name internal description since value deprecated')\n+\n+    @staticmethod\n+    def converted(name):\n+        if name[0].isdigit():\n+            name = '_' + name\n+        if '-' in name:\n+            name = name.replace('-', '_')\n+        return name\n+\n+    def transform(self, item: Enum) -> dict:\n+        \"\"\"\n+        Override\n+        :param item: particular element from initial Model\n+        :return: dictionary to be applied to jinja2 template\n+        \"\"\"\n+        imports = set()\n+        params = OrderedDict()\n+        if any(map(lambda l: l.name != self.converted(l.name) and getattr(l, 'value', None) is not None,\n+                   getattr(item, self.container_name).values())):", "originalCommit": "3243f401a073ec894b411964ec4e782c81d8dcf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NTk1MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389945950", "bodyText": "the idea of that type was to cover cases like that:\nsdl_java_suite/base/src/main/java/com/smartdevicelink/protocol/enums/FunctionID.java\nSYNC_P_DATA(65537, \"SyncPData\"),\nbut as we agreed to skip such cases, I agree that complex kind is useless.\nDeleting it.", "author": "o-mishch", "createdAt": "2020-03-09T20:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NTc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODA0Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389928043", "bodyText": "I am a little confused about what that generates exactly.", "author": "bilal-alsharifi", "createdAt": "2020-03-09T19:59:36Z", "path": "utils/generator/templates/struct_function_template.java", "diffHunk": "@@ -0,0 +1,69 @@\n+{% extends \"base_template.java\" %}\n+\n+{% block body %}\n+public class {{class_name}} extends {{extends_class}} {\n+    {%- if params is defined and ((kind is defined and kind != \"response\") or kind is not defined) %}\n+    {%- for p in params %}\n+    {%- if p.see is defined or p.deprecated is not none %}\n+    /**\n+     {%- if p.deprecated is not none %}\n+     * @deprecated\n+     {%- endif %}\n+     {%- if p.see is defined %}\n+     * @see {{p.see}}\n+     {%- endif %}\n+     */\n+    {%- endif %}\n+    {%- if p.deprecated is not none %}\n+    @Deprecated\n+    {%- endif %}\n+    {%- if p.name is defined %}\n+    private {% if p.modifier is defined %}{{p.modifier}} {% endif %}{{p.return_type}} {{p.name}}{% if p.value is defined %} = {{p.value}}{% endif %};", "originalCommit": "3243f401a073ec894b411964ec4e782c81d8dcf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NTkzMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389945931", "bodyText": "I didn't understand about what exactly line of code you are talking about, e.g. following xml:\n<struct name=\"DisplayCapabilities\" deprecated=\"true\" since=\"6.0\">\n        <param name=\"displayType\" type=\"DisplayType\" mandatory=\"true\" deprecated=\"true\" since=\"5.0\">\nwill be represent as following java code:\n@Deprecated\npublic class DisplayCapabilities extends RPCStruct {\n    /**\n     * @deprecated\n     */\n    @Deprecated\n    public static final String KEY_DISPLAY_TYPE = \"displayType\";\nIf you're mean following:\n{% if p.modifier is defined %}{{p.modifier}} {% endif %}\nI guess it was added for some kind of manual customisation, and after we decide to do any manual customisation I believe it also useless.\nDeleting it.", "author": "o-mishch", "createdAt": "2020-03-09T20:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTExMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389959112", "bodyText": "I am referring to lines 20 & 21. It is adding a field with a private modifier. However, I am not sure in which case an RPC can have a field with a private modifier.", "author": "bilal-alsharifi", "createdAt": "2020-03-09T21:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3NzczNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390177735", "bodyText": ".name\nwas using for manual customisation.\nDeleting it.", "author": "o-mishch", "createdAt": "2020-03-10T09:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODc0Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389928746", "bodyText": "This template has some issues with generating responses. All the responses are generated without any getters or setters.", "author": "bilal-alsharifi", "createdAt": "2020-03-09T20:01:00Z", "path": "utils/generator/templates/struct_function_template.java", "diffHunk": "@@ -0,0 +1,69 @@\n+{% extends \"base_template.java\" %}", "originalCommit": "3243f401a073ec894b411964ec4e782c81d8dcf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NTkyMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r389945921", "bodyText": "there was redundant check:\n    {%- if params is defined and ((kind is defined and kind != \"response\") or kind is not defined) %}\nAfter deleting works well", "author": "o-mishch", "createdAt": "2020-03-09T20:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2Mjg3Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390262876", "bodyText": "But in original RPC library all function responses does not have any getters/setters as well as parameters list. Only requests have getters/setters and parameters list. For responses parameters \"success\" and \"resultCode\" defined in RPCResponse (as well as getters/setters for it).", "author": null, "createdAt": "2020-03-10T11:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5MTQ4Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390291487", "bodyText": "The shared getters/ setters are placed in the base RPCResponse class. But also each response has its own getters and setters. For example:\n\n  \n    \n      sdl_java_suite/base/src/main/java/com/smartdevicelink/proxy/rpc/GetVehicleDataResponse.java\n    \n    \n         Line 108\n      in\n      797b7a1\n    \n    \n    \n    \n\n        \n          \n           public void setGps(GPSData gps) {", "author": "bilal-alsharifi", "createdAt": "2020-03-10T12:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NzY5OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390297698", "bodyText": "Got it, thanks, working on it", "author": null, "createdAt": "2020-03-10T13:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyODc0Ng=="}], "type": "inlineReview"}, {"oid": "57524acd2c7a4ca30ed1b3db627d0eca21b96cf4", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/57524acd2c7a4ca30ed1b3db627d0eca21b96cf4", "message": "change requested in review", "committedDate": "2020-03-09T20:34:54Z", "type": "commit"}, {"oid": "c2007ce816f72d063ab30dacb4b705077901a935", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/c2007ce816f72d063ab30dacb4b705077901a935", "message": "change requested in review", "committedDate": "2020-03-10T09:15:04Z", "type": "commit"}, {"oid": "4e7eb49dee3bebc5a1c35b1dcdd1546a8e4d0f1a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4e7eb49dee3bebc5a1c35b1dcdd1546a8e4d0f1a", "message": "fix test to be compartible with 3.5", "committedDate": "2020-03-10T10:54:19Z", "type": "commit"}, {"oid": "be2c1be0e7f577fb310d2dee5bce50f7b6e8a615", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/be2c1be0e7f577fb310d2dee5bce50f7b6e8a615", "message": "Ignore test function names case", "committedDate": "2020-03-10T11:04:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM1ODI0OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390358249", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The script requires Python 3.5 or later pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).\n          \n          \n            \n            The script requires **Python 3** pre-installed on the host system. The minimal supported Python 3 version is **3.7.6**. It may work on versions back to 3.5 (the minimal version that has not yet reached [the end-of-life](https://devguide.python.org/devcycle/#end-of-life-branches)), but this is not supported and may break in the future.", "author": "vladmu", "createdAt": "2020-03-10T14:33:32Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2256 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires Python 3.5 or later pre-installed in the system. This is the minimal Python 3 version that has not reached the end-of-life (https://devguide.python.org/devcycle/#end-of-life-branches).", "originalCommit": "ef29730fa3697dc4b896895b8a44be375a927447", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7599c4180f36c420179a492e5eb09cd6c34e5eda", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/7599c4180f36c420179a492e5eb09cd6c34e5eda", "message": "Update utils/generator/README.md", "committedDate": "2020-03-10T14:33:48Z", "type": "commit"}, {"oid": "60bc014eda6b91774f510c2d7917251ddacb88e1", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/60bc014eda6b91774f510c2d7917251ddacb88e1", "message": "upper case enum element names and missing response parameters", "committedDate": "2020-03-10T14:38:54Z", "type": "commit"}, {"oid": "acf387b708b45fead6450f1327c94071ef6b658c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/acf387b708b45fead6450f1327c94071ef6b658c", "message": "readme changes for simplified enums and removed mappings", "committedDate": "2020-03-10T15:25:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390589184", "bodyText": "I think that case doesn't exist anymore in the code. Also, I believe, the case where we replace \"-\" with \"_\" is not mentioned in the readme.", "author": "bilal-alsharifi", "createdAt": "2020-03-10T20:25:02Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2245 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires **Python 3** pre-installed on the host system. The minimal supported Python 3 version is **3.7.6**. It may work on versions back to 3.5 (the minimal version that has not yet reached [the end-of-life](https://devguide.python.org/devcycle/#end-of-life-branches)), but this is not supported and may break in the future.\n+\n+Required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+python3 -m pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+```shell script\n+git submodule update --init\n+```\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`. FunctionID enum generation is skipped as discussed due to high complexity of structure. \n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"name\"` doesn't end with it and the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+    * if the name starts from digit, the leading `_` (underscore) symbol should be added.", "originalCommit": "acf387b708b45fead6450f1327c94071ef6b658c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5MjIyNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390892227", "bodyText": "No, this exists because there is Enums which will fail without it, e.g. BitsPerSample\nelement name=\"8_BIT\" should be converted to _8_BIT", "author": null, "createdAt": "2020-03-11T10:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MjE1MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390952151", "bodyText": "I meant the other point:\n\nif the name starts with _ (underscore) symbol and the next character is a letter of alphabet, the leading _ (underscore) symbol should be removed.\n\ndo we still have this case?", "author": "bilal-alsharifi", "createdAt": "2020-03-11T13:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MjY0MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390952640", "bodyText": "Also, I am not sure why, but the CI doesn't pass on this PR.", "author": "bilal-alsharifi", "createdAt": "2020-03-11T13:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4MzY2Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390983662", "bodyText": "Thanks, Bilal, updated on both questions, waiting for current build to see the problem.", "author": null, "createdAt": "2020-03-11T13:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5Njg2MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r390996860", "bodyText": "Awesome. It passes now. Thanks.", "author": "bilal-alsharifi", "createdAt": "2020-03-11T14:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMDg5Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r391030896", "bodyText": "As I see from history it was failing either on android artifacts download with 504 error or git checkout which is far from RPC generator changes.", "author": null, "createdAt": "2020-03-11T14:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MjA4OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r391042089", "bodyText": "Yes, that is strange. it fails again now and keeps failing when I restart it.\nFailing on downloading the Android artifacts is normal and happens rarely sometimes but simply restarting the action fixes it. However, I have never seen it failing on checkout before. I am guessing it is something has to do with checking out out the submodule that was added here:\n\n  \n    \n      sdl_java_suite/.github/workflows/android.yml\n    \n    \n         Line 13\n      in\n      07ad3ee\n    \n    \n    \n    \n\n        \n          \n           submodules: true \n        \n    \n  \n\n\nMaybe try to remove that line (just for testing) and see if it passes the checkout stage. There are other alternatives available online to checkout submodules if that is what is causing the issue.", "author": "bilal-alsharifi", "createdAt": "2020-03-11T15:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0ODA2Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r391048067", "bodyText": "Agree, removed my android.yml changes, let's see if build will be stable without checking out submodules", "author": null, "createdAt": "2020-03-11T15:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2OTY0Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r391069643", "bodyText": "It is still failing on the checkout stage which is strange. I am still guessing it is something has to do with submodules addition because it passes on all other PRs. Can you please try to remove the .gitmodules (just temporarily) to see if that makes it pass?", "author": "bilal-alsharifi", "createdAt": "2020-03-11T15:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQ4NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r391170485", "bodyText": "It could be a bug in the checkout action. I have made PR #1305  to update the actions android.yml to the latest version. It is merged into develop now. Can you merge the latest develop into your branch to see if that fixes the issue?", "author": "bilal-alsharifi", "createdAt": "2020-03-11T18:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMzY4NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r391313684", "bodyText": "I was able to fix this with checkout@master action. Details is in last comments of actions/checkout#81\nIn short, checkout@v2 did not work with submodules at all now, but updated submodule processing was already comitted to master of checkout action. It will be moved soon to v2 tag", "author": null, "createdAt": "2020-03-11T22:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxMTgxOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r391611819", "bodyText": "Awesome. Thanks for doing that research. We can keep the master tag for now and change to v2 later when the fix is merged.", "author": "bilal-alsharifi", "createdAt": "2020-03-12T13:15:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NDU4MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r402284581", "bodyText": "@ksologubov can we try v2 tag again? it seems to be fixed now.", "author": "bilal-alsharifi", "createdAt": "2020-04-02T12:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0MzYxNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r402343615", "bodyText": "@bilal-alsharifi  set to v2, works good", "author": null, "createdAt": "2020-04-02T14:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0NTM1MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r402345351", "bodyText": "Awesome. Thanks", "author": "bilal-alsharifi", "createdAt": "2020-04-02T14:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4OTE4NA=="}], "type": "inlineReview"}, {"oid": "2779af7c585acfdb00fb048c3f4d62e9b2fc084b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/2779af7c585acfdb00fb048c3f4d62e9b2fc084b", "message": "removed non-existing case and added dash replacement in generator readme", "committedDate": "2020-03-11T13:49:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMDY2NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r391000664", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * if the name consists of `-` (dash) then it replaced with `_` (underscore)\n          \n          \n            \n                * if the name contains a `-` (dash) then it should be replaced with `_` (underscore)", "author": "bilal-alsharifi", "createdAt": "2020-03-11T14:15:03Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2245 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires **Python 3** pre-installed on the host system. The minimal supported Python 3 version is **3.7.6**. It may work on versions back to 3.5 (the minimal version that has not yet reached [the end-of-life](https://devguide.python.org/devcycle/#end-of-life-branches)), but this is not supported and may break in the future.\n+\n+Required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+python3 -m pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+```shell script\n+git submodule update --init\n+```\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`. FunctionID enum generation is skipped as discussed due to high complexity of structure. \n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"name\"` doesn't end with it and the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n+\n+Example:\n+```shell script\n+# <struct name=\"VehicleDataResult\" />\n+com/smartdevicelink/proxy/rpc/VehicleDataResult.java\n+\n+# <function name=\"AddCommand\" messagetype=\"request\" />\n+com/smartdevicelink/proxy/rpc/AddCommand.java\n+# <function name=\"AddCommand\" messagetype=\"response\" />\n+com/smartdevicelink/proxy/rpc/AddCommandResponse.java\n+# <function name=\"OnLanguageChange\" messagetype=\"notification\" />\n+com/smartdevicelink/proxy/rpc/OnLanguageChange.java\n+```\n+\n+The package definition for Struct or Function classes is:\n+```java\n+package com.smartdevicelink.proxy.rpc;\n+``` \n+\n+## The License Header\n+\n+All files should start from the comment with the license information.\n+\n+```java\n+/*\n+ * Copyright (c) 2017 - [year], SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+```\n+Where `[year]` in the copyright line is the current year.\n+\n+## `<enum>`\n+\n+The name of the class is the value from the `\"name\"` attribute of `<enum>`.\n+\n+The class should have the next JavaDoc comment:\n+```java\n+/**\n+ * [description]\n+ *\n+ * @deprecated\n+ * @since SmartDeviceLink [since_version]\n+ * @see [see_reference]\n+ */\n+```\n+Where:\n+* `[description]` is `<description>` of the current `<enum>`, if exists.\n+* `@deprecated` indicates the deprecation state if the `\"deprecated\"` attribute exists and is \"true\".\n+* `@since` should be present, if the `\"since\"` attribute exists, and `[since_version]` is the `Major.Minor.Patch` formatted value of this attribute.\n+* `@see` shows the custom reference in `[see_reference]`.\n+\n+The class should have the `@Deprecated` decorator if the `\"deprecated\"` attribute of the `<enum>` exists and is \"true\".\n+\n+The set of `<element>` should be mapped to the set of Enum constants. Based on the `<element>` attributes, constants could be with or without fields.\n+\n+The following list are general rules for constant names and its fields:\n+1. The `\"name\"` attribute of `<element>` is the default name of the constant.\n+    * if the name starts from digit, the leading `_` (underscore) symbol should be added.\n+    * if the name consists of `-` (dash) then it replaced with `_` (underscore)", "originalCommit": "2779af7c585acfdb00fb048c3f4d62e9b2fc084b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "07ad3eee3682e0ce9306b523821f0d3e85dbcc95", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/07ad3eee3682e0ce9306b523821f0d3e85dbcc95", "message": "fixed syntax in readme\n\nCo-Authored-By: Bilal Alsharifi <599206+bilal-alsharifi@users.noreply.github.com>", "committedDate": "2020-03-11T14:17:51Z", "type": "commit"}, {"oid": "ddce53273f2c9f91c1321e2afcacecc0f89f689a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ddce53273f2c9f91c1321e2afcacecc0f89f689a", "message": "removed generator tests from run", "committedDate": "2020-03-11T15:14:57Z", "type": "commit"}, {"oid": "b7a4d947ddca3be7da8e43dfe0444c504264ca19", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b7a4d947ddca3be7da8e43dfe0444c504264ca19", "message": "Merge branch 'develop' into SDL-0234-Proxy-Library-RPC-Generation", "committedDate": "2020-03-11T21:52:26Z", "type": "commit"}, {"oid": "744d2bfd76beb8f9adcc3158dca176ef05da270a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/744d2bfd76beb8f9adcc3158dca176ef05da270a", "message": "trying with checkout@master as per last comments in https://github.com/actions/checkout/issues/81", "committedDate": "2020-03-12T10:12:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r398140117", "bodyText": "Can we make the readme file more concise similar to how the iOS one?\nhttps://github.com/vladmu/sdl_ios/blob/SDL-0234-Proxy-Library-RPC-Generation/generator/README.md\nIt is currently very lengthy and it will be hard to keep it updated in the future whenever we make an update to the generator.", "author": "bilal-alsharifi", "createdAt": "2020-03-25T20:14:39Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,2245 @@\n+# Proxy Library RPC Generator", "originalCommit": "744d2bfd76beb8f9adcc3158dca176ef05da270a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5ODIyMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r398398221", "bodyText": "@bilal-alsharifi it is lengthy due to numerous full examples with big license headers included in the document, which are absent in iOS readme. Will the removal of those examples solve the problem?", "author": "vladmu", "createdAt": "2020-03-26T08:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5NzMxNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r398497317", "bodyText": "If we remove all full examples as @vladmu suggested, README size will decrease 3 times, from 2450 lines to only 850 lines which is the same as we have in sdl_ios. @bilal-alsharifi please confirm if this looks good for you.", "author": null, "createdAt": "2020-03-26T11:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NDQ1NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r398694454", "bodyText": "I think samples are important to explain the rules. iOS also has sample codes. We can use fewer samples, pick classes with fewer properties as samples, and remove the license header form the samples in the readme to make the readme file shorter and easier to maintain. Please use the iOS one as a reference:\nhttps://github.com/vladmu/sdl_ios/tree/SDL-0234-Proxy-Library-RPC-Generation/generator", "author": "bilal-alsharifi", "createdAt": "2020-03-26T16:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxODIzMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r398718231", "bodyText": "@bilal-alsharifi that iOS document was based on this Java document, and it just does not include the full examples, almost all other sections and their order are similar. So it is hard to understand what you want to change here. I've proposed above to remove FULL examples from the document, all SHORT samples stay in place. Please review simplified readme @ksologubov provided here (7da2be7)  and if that doesn't fit your expectation, please provide us more details about what you would like to change exactly. Thank you!", "author": "vladmu", "createdAt": "2020-03-26T16:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0Njg1OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r398746858", "bodyText": "Thanks, @vladmu for the details. I looked at the android simplified readme. I don't see any generated java sample code at all in it. I see snippets from the templates but not java code. However, in iOS, there are some full but concise samples like this for example. We just would like the readme to be easy to read but not extremely long.\nAs I suggested earlier, using fewer samples, picking classes with fewer properties as samples, and removing the license header from the samples may reduce the size of the file but still keep it self contained.", "author": "bilal-alsharifi", "createdAt": "2020-03-26T17:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0OTA5Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r398749092", "bodyText": "Like for example, before today's updates, the readme had three lengthy full sample for the <struct> section. After the update, they are all removed. I think having one concise sample that covers the basic cases will be a good balance between the two cases. Please let me know if you have any questions.", "author": "bilal-alsharifi", "createdAt": "2020-03-26T17:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NjM3Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r398756373", "bodyText": "Ok, got it, thank you, will update with basic samples", "author": null, "createdAt": "2020-03-26T17:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1NzE5MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r399257191", "bodyText": "@bilal-alsharifi Hi Bilal, I updated README with samples, could you please check", "author": null, "createdAt": "2020-03-27T13:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4MzQ2Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r399283463", "bodyText": "Thank you. I will review that.", "author": "bilal-alsharifi", "createdAt": "2020-03-27T13:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDExNw=="}], "type": "inlineReview"}, {"oid": "3ad127044d54c0abeca4bad0969095c92f499a89", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3ad127044d54c0abeca4bad0969095c92f499a89", "message": "updating to latest rpc_spec", "committedDate": "2020-03-26T09:56:44Z", "type": "commit"}, {"oid": "7da2be78ce3d0b0e6e2381e33d972cabcd9377ec", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/7da2be78ce3d0b0e6e2381e33d972cabcd9377ec", "message": "removed numeric enums and simplified README", "committedDate": "2020-03-26T13:48:02Z", "type": "commit"}, {"oid": "34e7dea6ead985493a29a8a059e3694fce3d12dd", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/34e7dea6ead985493a29a8a059e3694fce3d12dd", "message": "Updated readme with simplified examples", "committedDate": "2020-03-27T13:15:54Z", "type": "commit"}, {"oid": "28eb6fb530287ae5040753ee4c9e5575a5dec126", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/28eb6fb530287ae5040753ee4c9e5575a5dec126", "message": "Replacing keywords", "committedDate": "2020-03-30T17:11:00Z", "type": "commit"}, {"oid": "b804421f0a91a48192bdf20f368b22a7a0ea84b4", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b804421f0a91a48192bdf20f368b22a7a0ea84b4", "message": "Replacing additional cases", "committedDate": "2020-03-31T15:20:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MTMyOA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r401781328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n          \n          \n            \n            Please also make sure before usage the `utils/generator/rpc_spec` Git submodule is successfully initialized, because the script uses the XML parser provided there.", "author": "bilal-alsharifi", "createdAt": "2020-04-01T17:19:59Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,1077 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires **Python 3** pre-installed on the host system. The minimal supported Python 3 version is **3.7.6**. It may work on versions back to 3.5 (the minimal version that has not yet reached [the end-of-life](https://devguide.python.org/devcycle/#end-of-life-branches)), but this is not supported and may break in the future.\n+\n+Required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+python3 -m pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.", "originalCommit": "34e7dea6ead985493a29a8a059e3694fce3d12dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MzI1NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r401783254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n          \n          \n            \n            The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](https://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)", "author": "bilal-alsharifi", "createdAt": "2020-04-01T17:23:15Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,1077 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires **Python 3** pre-installed on the host system. The minimal supported Python 3 version is **3.7.6**. It may work on versions back to 3.5 (the minimal version that has not yet reached [the end-of-life](https://devguide.python.org/devcycle/#end-of-life-branches)), but this is not supported and may break in the future.\n+\n+Required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+python3 -m pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+```shell script\n+git submodule update --init\n+```\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)", "originalCommit": "34e7dea6ead985493a29a8a059e3694fce3d12dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4NjYzMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r401786632", "bodyText": "This line can be removed now because the generator follows the RPC Sepc with no exceptional rules. It is not based on any specific commit in develop anymore.", "author": "bilal-alsharifi", "createdAt": "2020-04-01T17:28:36Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,1077 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires **Python 3** pre-installed on the host system. The minimal supported Python 3 version is **3.7.6**. It may work on versions back to 3.5 (the minimal version that has not yet reached [the end-of-life](https://devguide.python.org/devcycle/#end-of-life-branches)), but this is not supported and may break in the future.\n+\n+Required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+python3 -m pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+```shell script\n+git submodule update --init\n+```\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.", "originalCommit": "34e7dea6ead985493a29a8a059e3694fce3d12dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4ODQ2OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r401788469", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`. FunctionID enum generation is skipped as discussed due to high complexity of structure. \n          \n          \n            \n            Each Enum class should be stored as a single file in the folder named `com/smartdevicelink/rpc/enums` and the name of the file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`. FunctionID enum generation is skipped due to the high complexity of structure.", "author": "bilal-alsharifi", "createdAt": "2020-04-01T17:31:38Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,1077 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires **Python 3** pre-installed on the host system. The minimal supported Python 3 version is **3.7.6**. It may work on versions back to 3.5 (the minimal version that has not yet reached [the end-of-life](https://devguide.python.org/devcycle/#end-of-life-branches)), but this is not supported and may break in the future.\n+\n+Required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+python3 -m pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+```shell script\n+git submodule update --init\n+```\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`. FunctionID enum generation is skipped as discussed due to high complexity of structure. ", "originalCommit": "34e7dea6ead985493a29a8a059e3694fce3d12dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4OTc2NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r401789764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"name\"` doesn't end with it and the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.\n          \n          \n            \n            Each Struct or Function class should be stored as a single file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"name\"` doesn't end with it and the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.", "author": "bilal-alsharifi", "createdAt": "2020-04-01T17:33:41Z", "path": "utils/generator/README.md", "diffHunk": "@@ -0,0 +1,1077 @@\n+# Proxy Library RPC Generator\n+\n+## Overview\n+\n+This script provides the possibility to auto-generate Java code based on a given SDL MOBILE_API XML specification.\n+\n+## Requirements\n+\n+The script requires **Python 3** pre-installed on the host system. The minimal supported Python 3 version is **3.7.6**. It may work on versions back to 3.5 (the minimal version that has not yet reached [the end-of-life](https://devguide.python.org/devcycle/#end-of-life-branches)), but this is not supported and may break in the future.\n+\n+Required libraries are described in `requirements.txt` and should be pre-installed by the command:\n+```shell script\n+python3 -m pip install -r requirements.txt\n+```\n+Please also make sure before usage the 'utils/generator/rpc_spec' Git submodule is successfully initialized, because the script uses the XML parser provided there.\n+```shell script\n+git submodule update --init\n+```\n+\n+## Usage\n+```shell script\n+usage: generator.py [-h] [-v] [-xml SOURCE_XML] [-xsd SOURCE_XSD]\n+                    [-d OUTPUT_DIRECTORY] [-t [TEMPLATES_DIRECTORY]]\n+                    [-r REGEX_PATTERN] [--verbose] [-e] [-s] [-m] [-y] [-n]\n+\n+Proxy Library RPC Generator\n+\n+optional arguments:\n+  -h, --help            show this help message and exit\n+  -v, --version         print the version and exit\n+  -xml SOURCE_XML, --source-xml SOURCE_XML, --input-file SOURCE_XML\n+                        should point to MOBILE_API.xml\n+  -xsd SOURCE_XSD, --source-xsd SOURCE_XSD\n+  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n+                        define the place where the generated output should be\n+                        placed\n+  -t [TEMPLATES_DIRECTORY], --templates-directory [TEMPLATES_DIRECTORY]\n+                        path to directory with templates\n+  -r REGEX_PATTERN, --regex-pattern REGEX_PATTERN\n+                        only elements matched with defined regex pattern will\n+                        be parsed and generated\n+  --verbose             display additional details like logs etc\n+  -e, --enums           only specified elements will be generated, if present\n+  -s, --structs         only specified elements will be generated, if present\n+  -m, -f, --functions   only specified elements will be generated, if present\n+  -y, --overwrite       force overwriting of existing files in output\n+                        directory, ignore confirmation message\n+  -n, --skip            skip overwriting of existing files in output\n+                        directory, ignore confirmation message\n+```\n+\n+# Java Transformation rules\n+\n+## Overview\n+These are the general transformation rules for RPC classes of SDL Java Suite Library. The description of base classes, already included in the library, is not provided here, for details please view the source code. \n+\n+The JavaDoc is used for inline documentation of generated code. All non-XML values should follow Contributing to SDL Projects [CONTRIBUTING.md](ttps://github.com/smartdevicelink/sdl_android/blob/master/.github/CONTRIBUTING.md)\n+\n+These rules based on the current `develop` branch state (commit:`7e6a16c027bcdd0fb523a9993dc59b0171167aea`) of [`smartdevicelink/sdl_java_suite`](https://github.com/smartdevicelink/sdl_java_suite) repository.\n+\n+## Output Directory Structure and Package definitions\n+\n+The generator script creates corresponding RPC classes for `<enum>`, `<struct>` and `<function>` elements of `MOBILE_API.xml`.\n+According to existing structure of Java Suite the output directory will contain following folders and files:\n+\n+* com\n+    * proxy\n+        * rpc\n+            * enums\n+                * `[- all <enum> classes except FunctionID -]`\n+            * `[- all <struct> classes -]`\n+            * `[- all <function> classes -]`\n+\n+Each Enum class should be stored as a single script file in the folder named `com/smartdevicelink/rpc/enums` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<enum>` followed by the extension `.java`. FunctionID enum generation is skipped as discussed due to high complexity of structure. \n+\n+Example:\n+```shell script\n+# <enum name=\"ImageType\" />\n+com/smartdevicelink/proxy/rpc/enums/ImageType.java\n+```\n+\n+Each Enum class should include the package definition:\n+```java\n+package com.smartdevicelink.proxy.rpc.enums;\n+``` \n+\n+Each Struct or Function class should be stored as a single script file in the folder named `com/smartdevicelink/proxy/rpc` and the name of the script file should be equal to the value from the `\"name\"` attribute of `<struct>` or `<function>` (followed by additional suffix `Response` if the `\"name\"` doesn't end with it and the `\"messagetype\"` attribute is set to `response`) followed by the extension `.java`.", "originalCommit": "34e7dea6ead985493a29a8a059e3694fce3d12dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b32aa48a1bf68f79af1712a2ec4fc65498a1cb6", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/5b32aa48a1bf68f79af1712a2ec4fc65498a1cb6", "message": "README corrections per review", "committedDate": "2020-04-02T09:20:51Z", "type": "commit"}, {"oid": "e19949be9a9f52bc8c824e553f2f0c2d090a604b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e19949be9a9f52bc8c824e553f2f0c2d090a604b", "message": "README corrections per review", "committedDate": "2020-04-02T09:24:47Z", "type": "commit"}, {"oid": "eef9ba2b3450d78d04f731a45c4a21e2d84547ef", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/eef9ba2b3450d78d04f731a45c4a21e2d84547ef", "message": "Return to stable version of github action checkout", "committedDate": "2020-04-02T13:38:24Z", "type": "commit"}, {"oid": "a03cf3d111f4e95c9082c2c2d066790c6f7c4fd4", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a03cf3d111f4e95c9082c2c2d066790c6f7c4fd4", "message": "moving generators to repository root", "committedDate": "2020-04-08T15:28:28Z", "type": "commit"}, {"oid": "3b55ed856f6a3c77c05bfa3703354926f5b1d988", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3b55ed856f6a3c77c05bfa3703354926f5b1d988", "message": "fixed enum tests after previous changes", "committedDate": "2020-04-08T15:34:49Z", "type": "commit"}, {"oid": "590fc819e80eb39f250d3c22bd150840f1999dbb", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/590fc819e80eb39f250d3c22bd150840f1999dbb", "message": "fixed path in github action file", "committedDate": "2020-04-08T16:02:56Z", "type": "commit"}, {"oid": "18b4c49d14cf6086e258327d845cc4db0ec67832", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/18b4c49d14cf6086e258327d845cc4db0ec67832", "message": "Return to stable version of github action checkout", "committedDate": "2020-04-08T16:48:32Z", "type": "commit"}, {"oid": "e3c4b4f98135760ebe934b2e92af9a6a656fb83b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e3c4b4f98135760ebe934b2e92af9a6a656fb83b", "message": "moving generators to repository root", "committedDate": "2020-04-08T16:54:25Z", "type": "commit"}, {"oid": "f509c1307b4a2b763ca656ffe6d8a311d6ac9942", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f509c1307b4a2b763ca656ffe6d8a311d6ac9942", "message": "fixed enum tests after previous changes", "committedDate": "2020-04-08T16:55:08Z", "type": "commit"}, {"oid": "56408fc28c57ebf54353ff0d727ebd445f7e938d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/56408fc28c57ebf54353ff0d727ebd445f7e938d", "message": "fixed path in github action file", "committedDate": "2020-04-08T16:55:08Z", "type": "commit"}, {"oid": "7a4ff35bf41fbaff7a021e71c3dd826c0f6a5e4b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/7a4ff35bf41fbaff7a021e71c3dd826c0f6a5e4b", "message": "fixed tests", "committedDate": "2020-04-09T09:13:28Z", "type": "commit"}, {"oid": "0e7012dd5026e08423526ba9becd8709a07ecd6b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/0e7012dd5026e08423526ba9becd8709a07ecd6b", "message": "Merge branch 'SDL-0234-keywords' into SDL-0234-Proxy-Library-RPC-Generation\n\n# Conflicts:\n#\tgenerator/rpc_spec", "committedDate": "2020-04-15T14:39:49Z", "type": "commit"}, {"oid": "be7f985834c2eb9535887396f30b7e839e2acf1c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/be7f985834c2eb9535887396f30b7e839e2acf1c", "message": "Merge branch 'develop' into SDL-0234-Proxy-Library-RPC-Generation", "committedDate": "2020-04-15T15:30:13Z", "type": "commit"}, {"oid": "445d30b8087076ee90b4ef049624694208cb7e6f", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/445d30b8087076ee90b4ef049624694208cb7e6f", "message": "fixed default path", "committedDate": "2020-04-21T08:21:04Z", "type": "commit"}, {"oid": "b7b175feb8a8351edd30ad61e2dab4f152b19071", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b7b175feb8a8351edd30ad61e2dab4f152b19071", "message": "fixed struct element naming", "committedDate": "2020-04-21T17:02:25Z", "type": "commit"}, {"oid": "a9a3d5123af107b033618ca4fae97c5bdccf2296", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a9a3d5123af107b033618ca4fae97c5bdccf2296", "message": "removed caseless keyword matching", "committedDate": "2020-04-21T17:36:24Z", "type": "commit"}, {"oid": "ac1591d7549caecf47ed4509a19f55760b800f22", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ac1591d7549caecf47ed4509a19f55760b800f22", "message": "updated rpc_spec to latest", "committedDate": "2020-04-22T19:19:00Z", "type": "commit"}, {"oid": "ab1c57ab740ce35e45347d2c3fd2fd31ccd20c25", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ab1c57ab740ce35e45347d2c3fd2fd31ccd20c25", "message": "readme update", "committedDate": "2020-04-22T21:36:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MTE2OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r413361169", "bodyText": "The comparison in this method seems to be case sensitive. It should be insensitive.", "author": "bilal-alsharifi", "createdAt": "2020-04-22T21:57:41Z", "path": "generator/transformers/common_producer.py", "diffHunk": "@@ -0,0 +1,120 @@\n+\"\"\"\n+Common transformation\n+\"\"\"\n+\n+import logging\n+import re\n+from abc import ABC\n+from collections import namedtuple\n+\n+from model.array import Array\n+from model.enum import Enum\n+from model.struct import Struct\n+\n+\n+class InterfaceProducerCommon(ABC):\n+    \"\"\"\n+    Common transformation\n+    \"\"\"\n+\n+    version = '1.0.0'\n+\n+    def __init__(self, container_name, enums_package, structs_package, package_name,\n+                 enum_names=(), struct_names=(), key_words=()):\n+        self.logger = logging.getLogger('Generator.InterfaceProducerCommon')\n+        self.container_name = container_name\n+        self.enum_names = enum_names\n+        self.struct_names = struct_names\n+        self.key_words = key_words\n+        self.enums_package = enums_package\n+        self.structs_package = structs_package\n+        self.package_name = package_name\n+        self._params = namedtuple('params', 'deprecated description key last mandatory origin return_type since title '\n+                                            'param_doc name')\n+\n+    @property\n+    def get_version(self):\n+        return self.version\n+\n+    @property\n+    def params(self):\n+        \"\"\"\n+        :return: namedtuple params(name='', origin='')\n+        \"\"\"\n+        return self._params\n+\n+    @staticmethod\n+    def key(param: str):\n+        \"\"\"\n+        Convert param string to uppercase and inserting underscores\n+        :param param: camel case string\n+        :return: string in uppercase with underscores\n+        \"\"\"\n+        if re.match(r'^[A-Z_\\d]+$', param):\n+            return param\n+        else:\n+            return re.sub(r'([a-z]|[A-Z]{2,})([A-Z]|\\d$)', r'\\1_\\2', param).upper()\n+\n+    @staticmethod\n+    def ending_cutter(n: str):\n+        \"\"\"\n+        If string not contains only uppercase letters and end with 'ID' deleting 'ID' from end of string\n+        :param n: string to evaluate and deleting 'ID' from end of string\n+        :return: if match cut string else original string\n+        \"\"\"\n+        if re.match(r'^\\w+[a-z]+([A-Z]{2,})?ID$', n):\n+            return n[:-2]\n+        else:\n+            return n\n+\n+    @staticmethod\n+    def extract_description(d):\n+        \"\"\"\n+        Evaluate, align and delete @TODO\n+        :param d: list with description\n+        :return: evaluated string\n+        \"\"\"\n+        return re.sub(r'(\\s{2,}|\\n|\\[@TODO.+)', ' ', ''.join(d)).strip() if d else ''\n+\n+    @staticmethod\n+    def replace_sync(name):\n+        \"\"\"\n+        :param name: string with item name\n+        :return: string with replaced 'sync' to 'Sdl'\n+        \"\"\"\n+        if name:\n+            return re.sub(r'^([sS])ync(.+)$', r'\\1dl\\2', name)\n+        return name\n+\n+    def replace_keywords(self, name: str = '') -> str:", "originalCommit": "ab1c57ab740ce35e45347d2c3fd2fd31ccd20c25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY3Nzg4NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1273#discussion_r413677884", "bodyText": "@bilal-alsharifi restored case insensitive matching, and also fixed functionID parameter replacement, thanks", "author": null, "createdAt": "2020-04-23T09:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MTE2OQ=="}], "type": "inlineReview"}, {"oid": "48ef92606d4a351812c30f45d676a28b630d27cd", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/48ef92606d4a351812c30f45d676a28b630d27cd", "message": "Revert \"removed caseless keyword matching\"", "committedDate": "2020-04-23T09:00:23Z", "type": "commit"}, {"oid": "350709d30f512dd024dda2751fda51c53ac8ff7a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/350709d30f512dd024dda2751fda51c53ac8ff7a", "message": "correct key name processing", "committedDate": "2020-04-23T09:25:18Z", "type": "commit"}]}