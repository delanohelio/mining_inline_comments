{"pr_number": 1063, "pr_title": "Refactor JMX resources to use Spring instead of custom prutsel", "pr_createdAt": "2020-09-15T11:56:44Z", "pr_url": "https://github.com/ibissource/iaf/pull/1063", "timeline": [{"oid": "215967e397770313f0f210cada4637b6dea773f2", "url": "https://github.com/ibissource/iaf/commit/215967e397770313f0f210cada4637b6dea773f2", "message": "Refactor JMX resources to use Spring instead of custom prutsel", "committedDate": "2020-09-15T11:33:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NzAxNQ==", "url": "https://github.com/ibissource/iaf/pull/1063#discussion_r488657015", "bodyText": "Dat zal de super toch wel doen?", "author": "gvanbrakel", "createdAt": "2020-09-15T13:15:15Z", "path": "core/src/main/java/nl/nn/adapterframework/configuration/BasicAdapterServiceImpl.java", "diffHunk": "@@ -1,47 +1,80 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n package nl.nn.adapterframework.configuration;\n \n-import nl.nn.adapterframework.core.IAdapter;\n-import nl.nn.adapterframework.util.LogUtil;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.ObjectName;\n \n import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.jmx.export.MBeanExporter;\n+\n+import nl.nn.adapterframework.core.IAdapter;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n- * This implemention of {@link AdapterService} also registers the adapters to Jmx, and configures the registered Adapters.\n+ * This implementation of {@link AdapterService} also registers the adapters to a JMX server, and configures the registered Adapters.\n \n- * @author Michiel Meeuwissen\n+ * @author Niels Meijer\n  * @since 5.0.29\n  */\n-public class BasicAdapterServiceImpl extends AdapterServiceImpl {\n-\n-    private static final Logger LOG = LogUtil.getLogger(BasicAdapterServiceImpl.class);\n-\n-    @Override\n-    public void registerAdapter(IAdapter adapter) throws ConfigurationException {\n-        super.registerAdapter(adapter);\n-        try {\n-            // Throws javax.management.InstanceAlreadyExistsException when testing on\n-            // WebSphere 7. This code has probably never been enabled as previously it was\n-            // part of Configuration.java and was surrounded with \"if (isEnableJMX())\" with\n-            // enableJMX being false by default.\n-            LOG.debug(\"Registering adapter [\" + adapter.getName() + \"] to the JMX server\");\n-            JmxMbeanHelper.hookupAdapter(adapter);\n-            LOG.info(\"[\" + adapter.getName() + \"] registered to the JMX server\");\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-        adapter.configure();\n-    }\n-\n-    @Override\n-    public void unRegisterAdapter(IAdapter adapter) {\n-        super.unRegisterAdapter(adapter);\n-        try {\n-            JmxMbeanHelper.unhookAdapter(adapter);\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-    }\n+public class BasicAdapterServiceImpl extends AdapterServiceImpl implements ApplicationContextAware, InitializingBean {\n \n-}\n+\tprivate final Logger log = LogUtil.getLogger(BasicAdapterServiceImpl.class);\n+\tprivate MBeanExporter mBeanManager = null;\n+\tprivate static Map<IAdapter, ObjectName> registeredAdapters = new HashMap<>();\n+\n+\t@Override\n+\tpublic void afterPropertiesSet() throws Exception {\n+\t\tif(mBeanManager == null) {\n+\t\t\tthrow new BeanCreationException(\"unable to load JmxMBeanManager\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void registerAdapter(IAdapter adapter) throws ConfigurationException {\n+\t\tsuper.registerAdapter(adapter);\n \n+\t\tlog.debug(\"Registering adapter [\" + adapter.getName() + \"] to the JMX server\");\n+\t\tsynchronized(registeredAdapters) {\n+\t\t\tObjectName name = mBeanManager.registerManagedResource(adapter);\n+\t\t\tregisteredAdapters.put(adapter, name);\n+\t\t}\n+\t\tlog.info(\"[\" + adapter.getName() + \"] registered to the JMX server\");\n \n+\t\tadapter.configure();", "originalCommit": "215967e397770313f0f210cada4637b6dea773f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NDgyOA==", "url": "https://github.com/ibissource/iaf/pull/1063#discussion_r488754828", "bodyText": "Ja dat dacht ik ook, gaan nu een aantal tests door kapot", "author": "nielsm5", "createdAt": "2020-09-15T15:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NzAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1ODEwMg==", "url": "https://github.com/ibissource/iaf/pull/1063#discussion_r488658102", "bodyText": "Hier mag toch wel een stukje commentaar bij", "author": "gvanbrakel", "createdAt": "2020-09-15T13:16:49Z", "path": "core/src/main/java/nl/nn/adapterframework/configuration/Configuration.java", "diffHunk": "@@ -63,7 +63,7 @@\n     private final List<JobDef> scheduledJobs = new ArrayList<JobDef>();\n \n     private String name;\n-    private String version;\n+    private String version = Integer.toHexString(this.hashCode());", "originalCommit": "215967e397770313f0f210cada4637b6dea773f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac225c6c430553b395c48c0e31802a930200a81b", "url": "https://github.com/ibissource/iaf/commit/ac225c6c430553b395c48c0e31802a930200a81b", "message": "Fix Junit Tests", "committedDate": "2020-09-15T13:32:08Z", "type": "commit"}, {"oid": "c523c6cc9ee65a7256d32e764a5a124b575099b6", "url": "https://github.com/ibissource/iaf/commit/c523c6cc9ee65a7256d32e764a5a124b575099b6", "message": "Fix more Junit tests and remove ScanningAdapterService", "committedDate": "2020-09-15T15:21:09Z", "type": "commit"}, {"oid": "c55f47da7cd5394f05a6ab0f568c21a59e548229", "url": "https://github.com/ibissource/iaf/commit/c55f47da7cd5394f05a6ab0f568c21a59e548229", "message": "Add comment regarding configuration version", "committedDate": "2020-09-15T15:23:27Z", "type": "commit"}, {"oid": "a7fe889f76660f4718142c428d7f4e369edc41ac", "url": "https://github.com/ibissource/iaf/commit/a7fe889f76660f4718142c428d7f4e369edc41ac", "message": "Add pipeline to test adapter", "committedDate": "2020-09-15T15:32:58Z", "type": "commit"}, {"oid": "ab3a03e78f25bdfcfd2cbd761ef622c4fe2aca4b", "url": "https://github.com/ibissource/iaf/commit/ab3a03e78f25bdfcfd2cbd761ef622c4fe2aca4b", "message": "Remove version from configuration", "committedDate": "2020-09-16T07:35:03Z", "type": "commit"}, {"oid": "fb2b6093db49cb6b129130d2af9804ed5c406732", "url": "https://github.com/ibissource/iaf/commit/fb2b6093db49cb6b129130d2af9804ed5c406732", "message": "Add ability to enable JmxAttribute setters", "committedDate": "2020-09-16T07:52:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxNzY4MQ==", "url": "https://github.com/ibissource/iaf/pull/1063#discussion_r491817681", "bodyText": "Laten we deze class JmxRegisteringAdapterService noemen, want dat is wat hij doet. Er is niks basics aan.", "author": "gvanbrakel", "createdAt": "2020-09-21T06:34:57Z", "path": "core/src/main/java/nl/nn/adapterframework/configuration/BasicAdapterServiceImpl.java", "diffHunk": "@@ -1,47 +1,77 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n package nl.nn.adapterframework.configuration;\n \n-import nl.nn.adapterframework.core.IAdapter;\n-import nl.nn.adapterframework.util.LogUtil;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.ObjectName;\n \n import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.jmx.export.MBeanExporter;\n+\n+import nl.nn.adapterframework.core.IAdapter;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n- * This implemention of {@link AdapterService} also registers the adapters to Jmx, and configures the registered Adapters.\n+ * This implementation of {@link AdapterService} registers the adapters to a JMX server.\n \n- * @author Michiel Meeuwissen\n- * @since 5.0.29\n+ * @author Niels Meijer\n  */\n-public class BasicAdapterServiceImpl extends AdapterServiceImpl {\n-\n-    private static final Logger LOG = LogUtil.getLogger(BasicAdapterServiceImpl.class);\n-\n-    @Override\n-    public void registerAdapter(IAdapter adapter) throws ConfigurationException {\n-        super.registerAdapter(adapter);\n-        try {\n-            // Throws javax.management.InstanceAlreadyExistsException when testing on\n-            // WebSphere 7. This code has probably never been enabled as previously it was\n-            // part of Configuration.java and was surrounded with \"if (isEnableJMX())\" with\n-            // enableJMX being false by default.\n-            LOG.debug(\"Registering adapter [\" + adapter.getName() + \"] to the JMX server\");\n-            JmxMbeanHelper.hookupAdapter(adapter);\n-            LOG.info(\"[\" + adapter.getName() + \"] registered to the JMX server\");\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-        adapter.configure();\n-    }\n-\n-    @Override\n-    public void unRegisterAdapter(IAdapter adapter) {\n-        super.unRegisterAdapter(adapter);\n-        try {\n-            JmxMbeanHelper.unhookAdapter(adapter);\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-    }\n+public class BasicAdapterServiceImpl extends AdapterServiceImpl implements ApplicationContextAware, InitializingBean {", "originalCommit": "fb2b6093db49cb6b129130d2af9804ed5c406732", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}