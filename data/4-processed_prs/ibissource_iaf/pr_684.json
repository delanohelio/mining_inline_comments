{"pr_number": 684, "pr_title": "Refactor TimeoutGuardPipe", "pr_createdAt": "2020-05-06T20:39:38Z", "pr_url": "https://github.com/ibissource/iaf/pull/684", "timeline": [{"oid": "7bd447848a52284a3eec3df377ffda5bb1d1476e", "url": "https://github.com/ibissource/iaf/commit/7bd447848a52284a3eec3df377ffda5bb1d1476e", "message": "Refactor TimeoutGuardPipe", "committedDate": "2020-05-06T14:29:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MTg4OQ==", "url": "https://github.com/ibissource/iaf/pull/684#discussion_r421261889", "bodyText": "In deze kill() moet ook het eigenlijke werk afgebroken worden. Je moet  op een of andere manier hebben om in descender classes dat te kunnen implementeren. Anders is deze aanpassing van de regen in de drup", "author": "gvanbrakel", "createdAt": "2020-05-07T06:13:23Z", "path": "core/src/main/java/nl/nn/adapterframework/pipes/TimeoutGuardPipe.java", "diffHunk": "@@ -97,21 +60,20 @@ public PipeRunResult doPipe(Message message, IPipeLineSession session) throws Pi\n \t\t\ttimeout_work = Integer.valueOf(timeout_work_str);\n \t\t}\n \n-\t\tDoPipe doPipe = new DoPipe(message, session, Thread.currentThread().getName(), ThreadContext.peek());\n-\t\tExecutorService service = Executors.newSingleThreadExecutor();\n-\t\tFuture<Message> future = service.submit(doPipe);\n-\t\tObject result = null;\n+\t\tlog.debug(getLogPrefix(session) + \"setting timeout of [\" + timeout_work + \"] s\");\n+\t\tTimeoutGuard tg = new TimeoutGuard(timeout_work, getName()) {\n+\t\t\t@Override\n+\t\t\tprotected void kill() {\n+\t\t\t\tthrow new IllegalStateException(\"exceeds timeout of [\" + timeout_work + \"] s, interupting\");\n+\t\t\t}", "originalCommit": "7bd447848a52284a3eec3df377ffda5bb1d1476e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17210b4a0e0845984f368a09e79eef577e399241", "url": "https://github.com/ibissource/iaf/commit/17210b4a0e0845984f368a09e79eef577e399241", "message": "Fix compilation issues", "committedDate": "2020-05-07T12:32:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2NzI0NQ==", "url": "https://github.com/ibissource/iaf/pull/684#discussion_r421967245", "bodyText": "killPipe() moet iets hebben waardoor hij weet wat hij moet killen: een class of een handle die je meegeeft bij het creeren van de TimeoutGuard", "author": "gvanbrakel", "createdAt": "2020-05-08T06:34:29Z", "path": "core/src/main/java/nl/nn/adapterframework/pipes/TimeoutGuardPipe.java", "diffHunk": "@@ -97,39 +61,57 @@ public PipeRunResult doPipe(Message message, IPipeLineSession session) throws Pi\n \t\t\ttimeout_work = Integer.valueOf(timeout_work_str);\n \t\t}\n \n-\t\tDoPipe doPipe = new DoPipe(message, session, Thread.currentThread().getName(), ThreadContext.peek());\n-\t\tExecutorService service = Executors.newSingleThreadExecutor();\n-\t\tFuture<Message> future = service.submit(doPipe);\n-\t\tObject result = null;\n+\t\tlog.debug(getLogPrefix(session) + \"setting timeout of [\" + timeout_work + \"] s\");\n+\t\tTimeoutGuard tg = new TimeoutGuard(timeout_work, getName()) {\n+\t\t\t@Override\n+\t\t\tprotected void kill() {\n+\t\t\t\t//The guard automatically kills the current thread, additional threads maybe 'killed' by implementing killPipe.\n+\t\t\t\tkillPipe();\n+\t\t\t}\n+\t\t};\n+\n \t\ttry {\n-\t\t\tlog.debug(getLogPrefix(session) + \"setting timeout of [\" + timeout_work + \"] s\");\n-\t\t\tresult = future.get(timeout_work, TimeUnit.SECONDS);\n+\t\t\treturn doPipeWithTimeoutGuarded(message, session);\n \t\t} catch (Exception e) {\n-\t\t\tString msg;\n-\t\t\tif (e instanceof TimeoutException) {\n-\t\t\t\tString errorMsg = getLogPrefix(session) + \"exceeds timeout of [\" + timeout_work + \"] s, interupting\";\n-\t\t\t\tfuture.cancel(true);\n-\t\t\t\tmsg = e.getClass().getName() + \": \" + errorMsg;\n-\t\t\t} else {\n-\t\t\t\tmsg = e.getClass().getName();\n-\t\t\t}\n+\t\t\tString msg = e.getClass().getName();\n \n \t\t\tif (isThrowException()) {\n \t\t\t\tthrow new PipeRunException(this, msg, e);\n \t\t\t} else {\n \t\t\t\tString msgString = msg + \": \" + e.getMessage();\n \t\t\t\tlog.error(msgString, e);\n \t\t\t\tString msgCdataString = \"<![CDATA[\" + msgString + \"]]>\";\n-\t\t\t\tresult = \"<error>\" + msgCdataString + \"</error>\";\n+\t\t\t\tMessage errorMessage = new Message(\"<error>\" + msgCdataString + \"</error>\");\n+\t\t\t\treturn new PipeRunResult(getForward(), errorMessage);\n \t\t\t}\n \t\t} finally {\n-\t\t\tservice.shutdown();\n+\t\t\tif(tg.cancel()) {\n+\t\t\t\t//Throw a TimeOutException\n+\t\t\t\tString msgString = \"TimeOutException\";\n+\t\t\t\tException e = new TimeOutException(\"exceeds timeout of [\" + timeout_work + \"] s, interupting\");\n+\t\t\t\tif (isThrowException()) {\n+\t\t\t\t\tthrow new PipeRunException(this, msgString, e);\n+\t\t\t\t} else {\n+\t\t\t\t\t//This is used for the old console, where a message is displayed\n+\t\t\t\t\tlog.error(msgString, e);\n+\t\t\t\t\tString msgCdataString = \"<![CDATA[\" + msgString + \": \"+ e.getMessage() + \"]]>\";\n+\t\t\t\t\tMessage errorMessage = new Message(\"<error>\" + msgCdataString + \"</error>\");\n+\t\t\t\t\treturn new PipeRunResult(getForward(), errorMessage);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n-\t\treturn new PipeRunResult(getForward(), result);\n \t}\n \n-\tpublic Message doPipeWithTimeoutGuarded(Message input, IPipeLineSession session) throws PipeRunException {\n-\t\treturn input;\n+\t/**\n+\t * doPipe wrapped around a TimeoutGuard\n+\t */\n+\tpublic abstract PipeRunResult doPipeWithTimeoutGuarded(Message input, IPipeLineSession session) throws PipeRunException;\n+\n+\t/**\n+\t * optional implementation to kill additional threads if the pipe may have created those.\n+\t */\n+\tprotected void killPipe() {\n+\t\t//kill other threads", "originalCommit": "17210b4a0e0845984f368a09e79eef577e399241", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2ODU4OA==", "url": "https://github.com/ibissource/iaf/pull/684#discussion_r421968588", "bodyText": "En wat kan hier nou uit timen? En hoe wordt dat gekilled na een timeout?", "author": "gvanbrakel", "createdAt": "2020-05-08T06:37:52Z", "path": "core/src/main/java/nl/nn/adapterframework/webcontrol/pipes/ConfigurationBase.java", "diffHunk": "@@ -40,10 +41,10 @@\n \tprotected static final String CONFIG_ALL = \"*ALL*\";\n \n \t@Override\n-\tpublic Message doPipeWithTimeoutGuarded(Message input, IPipeLineSession session) throws PipeRunException {\n+\tpublic PipeRunResult doPipeWithTimeoutGuarded(Message input, IPipeLineSession session) throws PipeRunException {\n \t\tString method = (String) session.get(\"method\");\n \t\tif (method.equalsIgnoreCase(\"GET\")) {\n-\t\t\treturn Message.asMessage(doGet(session));\n+\t\t\treturn new PipeRunResult(getForward(), doGet(session));", "originalCommit": "17210b4a0e0845984f368a09e79eef577e399241", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2OTQ3OQ==", "url": "https://github.com/ibissource/iaf/pull/684#discussion_r421969479", "bodyText": "En wat kan hier nou uit timen? En hoe wordt dat gekilled na een timeout?\nAls dat is via de timeout van de FixedQuerySender, dan is de timeout van deze pipe niet nodig.", "author": "gvanbrakel", "createdAt": "2020-05-08T06:40:03Z", "path": "core/src/main/java/nl/nn/adapterframework/webcontrol/pipes/ExecuteJdbcProperties.java", "diffHunk": "@@ -48,12 +49,12 @@ public void configure() throws ConfigurationException {\n \t}\n \n \t@Override\n-\tpublic Message doPipeWithTimeoutGuarded(Message input, IPipeLineSession session) throws PipeRunException {\n+\tpublic PipeRunResult doPipeWithTimeoutGuarded(Message input, IPipeLineSession session) throws PipeRunException {\n \t\tString method = (String) session.get(\"method\");\n \t\tif (method.equalsIgnoreCase(\"GET\")) {\n-\t\t\treturn Message.asMessage(doGet(session));\n+\t\t\treturn new PipeRunResult(getForward(), doGet(session));\n \t\t} else if (method.equalsIgnoreCase(\"POST\")) {\n-\t\t\treturn Message.asMessage(doPost(session));\n+\t\t\treturn new PipeRunResult(getForward(), doPost(session));", "originalCommit": "17210b4a0e0845984f368a09e79eef577e399241", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}