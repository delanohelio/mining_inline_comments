{"pr_number": 547, "pr_title": "Avoid using temporary files for writing MsSql Blobs and Clobs ", "pr_createdAt": "2020-03-30T07:02:36Z", "pr_url": "https://github.com/ibissource/iaf/pull/547", "timeline": [{"oid": "bdc6ed298c18c8ee0b0a9f807439c5c3a388f4a7", "url": "https://github.com/ibissource/iaf/commit/bdc6ed298c18c8ee0b0a9f807439c5c3a388f4a7", "message": "Introduction of property jdbc.datasource.default", "committedDate": "2020-03-27T10:08:33Z", "type": "commit"}, {"oid": "1d7b33b81efbc71fd1451f6375dbdfdd57504c3d", "url": "https://github.com/ibissource/iaf/commit/1d7b33b81efbc71fd1451f6375dbdfdd57504c3d", "message": "Support for Microsoft MS SQL JDBC driver", "committedDate": "2020-03-27T16:17:58Z", "type": "commit"}, {"oid": "425ba97d052aa24b75920480fc29538131fe761b", "url": "https://github.com/ibissource/iaf/commit/425ba97d052aa24b75920480fc29538131fe761b", "message": "Microsoft MS SQL JDBC driver in context", "committedDate": "2020-03-27T16:18:37Z", "type": "commit"}, {"oid": "4086c85416a0873d48ebb488ccbabe31c9cd6bba", "url": "https://github.com/ibissource/iaf/commit/4086c85416a0873d48ebb488ccbabe31c9cd6bba", "message": "Convert result query too", "committedDate": "2020-03-30T06:52:46Z", "type": "commit"}, {"oid": "a2822a23ade46aa010e5adf380823e681533366f", "url": "https://github.com/ibissource/iaf/commit/a2822a23ade46aa010e5adf380823e681533366f", "message": "Support for converting Oracle queries to MsSql", "committedDate": "2020-03-30T06:54:04Z", "type": "commit"}, {"oid": "85dd28fc04fdb1fe6aecd1a39aea5a3fbb0abf66", "url": "https://github.com/ibissource/iaf/commit/85dd28fc04fdb1fe6aecd1a39aea5a3fbb0abf66", "message": "Add Docker database setup", "committedDate": "2020-03-30T06:59:21Z", "type": "commit"}, {"oid": "f51aa8cab5fc21f76bd446440c4cd63c2e11df58", "url": "https://github.com/ibissource/iaf/commit/f51aa8cab5fc21f76bd446440c4cd63c2e11df58", "message": "Fix JdbcQueryListener test for MsSql", "committedDate": "2020-03-30T07:01:24Z", "type": "commit"}, {"oid": "dc7357ee02316ab62b627e24698d45a39bbc71f3", "url": "https://github.com/ibissource/iaf/commit/dc7357ee02316ab62b627e24698d45a39bbc71f3", "message": "Disable WebSpher specific BLOB/CLOB processing using temporary files", "committedDate": "2020-03-30T10:14:29Z", "type": "commit"}, {"oid": "a7d76350291ee8933746ceced0b846a54247c6eb", "url": "https://github.com/ibissource/iaf/commit/a7d76350291ee8933746ceced0b846a54247c6eb", "message": "Fix Codacy issue", "committedDate": "2020-03-30T10:23:10Z", "type": "commit"}, {"oid": "202c5be495b4c83170dc316a5b03df9b990c2282", "url": "https://github.com/ibissource/iaf/commit/202c5be495b4c83170dc316a5b03df9b990c2282", "message": "Add mssql xa datasource", "committedDate": "2020-03-30T10:41:35Z", "type": "commit"}, {"oid": "d828cf9fd528cfcc86a93882c10a6ae53587c263", "url": "https://github.com/ibissource/iaf/commit/d828cf9fd528cfcc86a93882c10a6ae53587c263", "message": "Add MsSql XA datasource in context", "committedDate": "2020-03-30T10:42:34Z", "type": "commit"}, {"oid": "cf1ffeecf6b328632767dbb9aec152735b64af3a", "url": "https://github.com/ibissource/iaf/commit/cf1ffeecf6b328632767dbb9aec152735b64af3a", "message": "Merge branch 'master' into MsSql", "committedDate": "2020-03-30T10:46:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMDY5NA==", "url": "https://github.com/ibissource/iaf/pull/547#discussion_r400120694", "bodyText": "Moet dit niet WeAreFrank! zijn? en 2020?", "author": "nielsm5", "createdAt": "2020-03-30T11:32:45Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/OracleToMSSQLTranslator.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+   Copyright 2019 Nationale-Nederlanden", "originalCommit": "cf1ffeecf6b328632767dbb9aec152735b64af3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMjUzOQ==", "url": "https://github.com/ibissource/iaf/pull/547#discussion_r400122539", "bodyText": "Deze er uit en misschien wat log statements er in?", "author": "nielsm5", "createdAt": "2020-03-30T11:36:09Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/OracleToMSSQLTranslator.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+   Copyright 2019 Nationale-Nederlanden\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.jdbc.dbms;\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n+\n+import nl.nn.adapterframework.jdbc.JdbcException;\n+import nl.nn.adapterframework.jdbc.QueryContext;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+/**\n+ * Class to translate Oracle queries to MS SQL Server.\n+ * \n+ * @author Carlo Camiletti\n+ */\n+public class OracleToMSSQLTranslator {\n+\t\n+\tprivate static Logger log = LogUtil.getLogger(OracleToMSSQLTranslator.class);\n+\n+\tpublic static String convertQuery(QueryContext queryContext, boolean canModifyQueryContext) throws JdbcException, SQLException {\n+\t\tif (StringUtils.isEmpty(queryContext.getQuery()))\n+\t\t\treturn null;\n+\n+\t\t// query can start with comment (multiple lines) which should not be\n+\t\t// converted\n+\t\tStringBuilder queryComment = new StringBuilder();\n+\t\tStringBuilder queryStatement = new StringBuilder();\n+\t\tboolean comment = true;\n+\t\tString[] lines = queryContext.getQuery().split(\"\\\\r?\\\\n\");\n+\t\tfor (String line : lines) {\n+\t\t\t// ignore empty lines\n+\t\t\tif (line.trim().length() > 0) {\n+\t\t\t\tif (comment && line.trim().startsWith(\"--\")) {\n+\t\t\t\t\tqueryComment.append(line.trim() + System.lineSeparator());\n+\t\t\t\t} else {\n+\t\t\t\t\tcomment = false;\n+\t\t\t\t\tqueryStatement.append(line.trim() + System.lineSeparator());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tString originalQuery = queryStatement.toString().trim();\n+\t\t// add spaces around following characters: ,;()=\n+\t\tString orgQueryReadyForSplit = originalQuery.replaceAll(\"([,;\\\\(\\\\)=])\", \" $1 \").trim();\n+\t\tboolean removedEOS = false;\n+\t\t// remove last character if it is a semi-colon\n+\t\tString orgQueryReadyForSplitEOS = StringUtils.removeEnd(orgQueryReadyForSplit, \";\");\n+\t\tif (!orgQueryReadyForSplit.equals(orgQueryReadyForSplitEOS)) {\n+\t\t\tremovedEOS = true;\n+\t\t}\n+\t\t// split on whitespaces excepts whitespaces between single quotes\n+\t\tString[] split = orgQueryReadyForSplitEOS.split(\"\\\\s+(?=([^']*'[^']*')*[^']*$)\");\n+\t\tString[] newSplit = convertQuery(split);\n+\t\tif (newSplit == null) {\n+\t\t\tlog.debug(\"ignore oracle query [\" + queryComment.toString() + originalQuery + \"]\");\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (compareStringArrays(split, newSplit)) {\n+\t\t\tlog.debug(\"oracle query [\" + queryComment.toString() + originalQuery + \"] not converted\");\n+\t\t\treturn queryContext.getQuery();\n+\t\t} else {\n+\t\t\tString convertedQuery = getConvertedQueryAsString(newSplit, removedEOS);\n+\t\t\tlog.debug(\"converted oracle query [\" + queryComment.toString() + originalQuery + \"] to [\" + queryComment.toString() + convertedQuery + \"]\");\n+\t\t\treturn queryComment.toString() + convertedQuery;\n+\t\t}\n+\t}\n+\n+\tprivate static String getConvertedQueryAsString(String[] newSplit, boolean removedEOS) {\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tfor (int i = 0; i < newSplit.length; i++) {\n+\t\t\tif (i > 0 && !\"(\".equals(newSplit[i]) && !\",\".equals(newSplit[i]) && !\")\".equals(newSplit[i]) && !\"=\".equals(newSplit[i]) && !\"(\".equals(newSplit[i - 1]) && !\"=\".equals(newSplit[i - 1])) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(newSplit[i]);\n+\t\t}\n+\t\treturn sb.toString() + (removedEOS ? \";\" : \"\");\n+\t}\n+\n+\tprivate static boolean isOracleKeyPresent(List<String> splitString, String key) {\n+\t\treturn splitString.stream()\n+    \t\t\t.filter(s -> s.toUpperCase().contains(key)).findAny().isPresent();\n+\t}\n+\t\n+\tprivate static String[] convertQuery(String[] split) {\n+\t\tList<String> splitString = Arrays.asList(Arrays.copyOf(split, split.length));\n+\t\t\n+\t\tif (isOracleKeyPresent(splitString, OracleKeyWords.NEXTVAL.key())) {\n+\t\t\tsplitString = convertSequenceFunction(splitString);\n+\t\t}\n+\t\tif (isOracleKeyPresent(splitString, OracleKeyWords.CURRVAL.key())) {\n+\t\t\tsplitString = convertCurrvalSequenceQuery(splitString);\n+\t\t}\n+\t\tif (isOracleKeyPresent(splitString, OracleKeyWords.DUAL.key())) {\n+\t\t\tsplitString = convertQueryFromDual(splitString);\n+\t\t}\n+\t\tif (isOracleKeyPresent(splitString, OracleKeyWords.FOR_UPDATE.key())) { \n+\t\t\tsplitString = convertQuerySelectOneWhereForUpdate(splitString);\n+\t\t}\n+\t\tif (isOracleKeyPresent(splitString, OracleKeyWords.EMPTY_BLOB.key())) {\n+\t\t\tsplitString = convertQueryClobBlobFuntion(splitString);\n+\t\t}\n+\t\tif (isOracleKeyPresent(splitString, OracleKeyWords.EMPTY_CLOB.key())) {\n+\t\t\tsplitString = convertQueryClobBlobFuntion(splitString);\n+\t\t}\n+\t\tif (isOracleKeyPresent(splitString, OracleKeyWords.SYSDATE.key())) {\n+\t\t\tsplitString = convert(splitString, OracleKeyWords.SYSDATE.key(), MsSqlServerDbmsSupport.GET_DATE);\n+\t\t}\n+\t\tif (isOracleKeyPresent(splitString, OracleKeyWords.SYSTIMESTAMP.key())) {\n+\t\t\tsplitString = convert(splitString, OracleKeyWords.SYSTIMESTAMP.key(), MsSqlServerDbmsSupport.CURRENT_TIMESTAMP);\n+\t\t}\n+\t\treturn splitString.toArray(new String[splitString.size()]);\n+\t}\n+\n+\tprivate static List<String> convert(List<String> splitString, String oracleFunction, String mssqlFunction) {\n+        List<String> remove = splitString.stream()\n+    \t\t\t.filter(s -> s.contains(oracleFunction))\n+    \t\t\t.map(s -> s.replaceAll(\"[^.^_^a-zA-Z0-9\\\\s+]\", \"\"))\n+    \t\t\t.collect(Collectors.toList());\n+\n+        remove.forEach(rem -> {\n+        \tint index = splitString.indexOf(rem);\n+        \tsplitString.set(index, mssqlFunction);\n+        });\n+        \n+        return splitString;\n+\t}\n+\n+\tprivate static List<String> convertQuerySelectOneWhereForUpdate(List<String> splitString) {\n+\t\tList<String> query = new LinkedList<String>(splitString);\n+\t\ttry {\n+\t\t\tquery.remove(splitString.size()-1);\n+\t\t\tquery.remove(splitString.size()-2);\n+\t\t\tint index = splitString.indexOf(\"WHERE\");\n+\t\t\tquery.add(index, MsSqlServerDbmsSupport.WITH_UPDLOCK_ROWLOCK);\n+\t\t}catch(Exception e) {\n+\t\t\tSystem.out.println(e);\n+\t\t}\n+\t\treturn query;\n+\t}\n+\t\n+\tprivate static List<String> convertQueryClobBlobFuntion(List<String> splitString) {\n+\t\tString[] newarr = splitString.toArray(new String[splitString.size()]);\n+\t\tList<String> newSplit = new ArrayList<>();\n+\t\tfor (int i = 0; i < newarr.length; i++) {\n+\t\t\tif ((\"EMPTY_BLOB\".equalsIgnoreCase(newarr[i]) || \"EMPTY_CLOB\".equalsIgnoreCase(newarr[i])) && (i + 2) < newarr.length && \"(\".equals(newarr[i + 1]) && \")\".equals(newarr[i + 2])) {\n+\t\t\t\tnewSplit.add(MsSqlServerDbmsSupport.DEFAULT_BLOB_VALUE);\n+\t\t\t\ti = i + 2;\n+\t\t\t} else {\n+\t\t\t\tnewSplit.add(newarr[i]);\n+\t\t\t}\n+\t\t}\n+\t\treturn newSplit;\n+\t}\n+\n+\tprivate static List<String> convertSequenceFunction(List<String> splitString) {\n+        List<String> remove = splitString.stream()\n+    \t\t\t.filter(s -> s.contains(\".NEXTVAL\"))\n+    \t\t\t.map(s -> s.replaceAll(\"[^.^_^a-zA-Z0-9\\\\s+]\", \"\"))\n+    \t\t\t.collect(Collectors.toList());\n+\n+        remove.forEach(rem -> {\n+        \tint index = splitString.indexOf(rem);\n+        \tsplitString.set(index, MsSqlServerDbmsSupport.NEXT_VALUE_FOR.concat(rem.split(\"\\\\.\")[0]));\n+        });\n+        \n+        return splitString;\n+\t}\n+\t\n+\tprivate static List<String> convertCurrvalSequenceQuery(List<String> splitString) {\n+        String sequenceName = splitString.stream()\n+    \t\t\t.filter(s -> s.contains(\".CURRVAL\"))\n+    \t\t\t.map(s -> s.replaceAll(\"[^.^_^a-zA-Z0-9\\\\s+]\", \"\")).findFirst().get();\n+        \n+        String query = MsSqlServerDbmsSupport.SELECT_CURRENT_VALUE.concat(\"'\" + sequenceName.split(\"\\\\.\")[0] + \"'\");\n+        String queryForSplit = query.replaceAll(\"([,;\\\\(\\\\)=])\", \" $1 \").trim();\n+        String[] split = queryForSplit.split(\"\\\\s+(?=([^']*'[^']*')*[^']*$)\");\n+        return Arrays.asList(split);\n+\t}\t\n+\n+\tprivate static List<String> convertQueryFromDual(List<String> splitString) {\n+\t\tList<String> query = new LinkedList<String>(splitString);\n+\t\t\n+\t\tfor (int i=0; i<query.size(); i++) {\n+\t\t\tString item = query.get(i);\n+//\t\t\tSystem.out.print(item+\" \");", "originalCommit": "cf1ffeecf6b328632767dbb9aec152735b64af3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzE4MA==", "url": "https://github.com/ibissource/iaf/pull/547#discussion_r400137180", "bodyText": "De maxActive is wel belangrijk, anders starten sommige adapter wanneer er meer database adapters zijn dan beschikbare connecties", "author": "nielsm5", "createdAt": "2020-03-30T12:03:38Z", "path": "test/src/main/webapp/META-INF/context.xml", "diffHunk": "@@ -1,16 +1,82 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <Context>\n \t<Resource\n-\t\tname=\"jdbc/ibis4test\"\n-\t\ttype=\"javax.sql.DataSource\"\n-\t\tusername=\"testiaf_user\"\n+\t\tname=\"jdbc/ibis4test-h2\"\n+\t\ttype=\"org.h2.jdbcx.JdbcDataSource\"\n+\t\tfactory=\"org.apache.naming.factory.BeanFactory\" \n+\t\tURL=\"jdbc:h2:file:./ibis4test;MODE=Oracle;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE\"\n+\t/>\n+\t<Resource\n+\t\tname=\"jdbc/ibis4test-oracle\"\n+\t\tfactory=\"org.apache.naming.factory.BeanFactory\"\n+\t\ttype=\"oracle.jdbc.xa.client.OracleXADataSource\"\n+\t\tURL=\"jdbc:oracle:thin:@localhost:1521:xe\"\n+\t\tuser=\"testiaf_user\"\n \t\tpassword=\"testiaf_user\"\n-\t\tdriverClassName=\"oracle.jdbc.driver.OracleDriver\"\n-\t\turl=\"jdbc:oracle:thin:@localhost:1521:xe\"\n-\t\tmaxActive=\"50\"", "originalCommit": "cf1ffeecf6b328632767dbb9aec152735b64af3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MDU3Mg==", "url": "https://github.com/ibissource/iaf/pull/547#discussion_r400170572", "bodyText": "maxActive is een setting van oracle.jdbc.driver.OracleDriver. Die zit niet op oracle.jdbc.xa.client.OracleXADataSource", "author": "gvanbrakel", "createdAt": "2020-03-30T12:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzQ0Mg==", "url": "https://github.com/ibissource/iaf/pull/547#discussion_r400137442", "bodyText": "waar is dit voor?", "author": "nielsm5", "createdAt": "2020-03-30T12:04:04Z", "path": "core/src/main/resources/springWAS.xml", "diffHunk": "@@ -24,6 +24,7 @@\n \t\tfactory-method=\"getTransactionManager\"\n \t/>\n \n+<!-- Disable WebSphereMsSqlServerDbmsSupport temporarily, to see if BLOB/CLOB handling can be supported without temporary files", "originalCommit": "cf1ffeecf6b328632767dbb9aec152735b64af3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2Nzc3MQ==", "url": "https://github.com/ibissource/iaf/pull/547#discussion_r400167771", "bodyText": "Dit was omdat destijds de BLOBs en CLOBs het niet deden in WebSphere, omdat updateClob() het niet deed. Ik denk dat dat inmiddels is verholpen in WebSphere en/of de JDBC driver, of dat er sowieso een andere JDBC driver is, die het probleem niet heeft, waardoor de 'fix' niet meer nodig is.", "author": "gvanbrakel", "createdAt": "2020-03-30T12:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzQ0Mg=="}], "type": "inlineReview"}, {"oid": "848fad0a6dadbc933e44111c797143fd1641acfe", "url": "https://github.com/ibissource/iaf/commit/848fad0a6dadbc933e44111c797143fd1641acfe", "message": "Fix issues", "committedDate": "2020-03-30T13:10:00Z", "type": "commit"}, {"oid": "fc28507a285031a4bce765a673e862a27a0af63b", "url": "https://github.com/ibissource/iaf/commit/fc28507a285031a4bce765a673e862a27a0af63b", "message": "Use javax.sql.Datasource interface for Oracle instead of BeanFactory", "committedDate": "2020-03-30T14:02:27Z", "type": "commit"}, {"oid": "8154843b6b0a49ec46ced5a453da60fdf66830ee", "url": "https://github.com/ibissource/iaf/commit/8154843b6b0a49ec46ced5a453da60fdf66830ee", "message": "configure proper line endings", "committedDate": "2020-03-30T15:16:37Z", "type": "commit"}]}