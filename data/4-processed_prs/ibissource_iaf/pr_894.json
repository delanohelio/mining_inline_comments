{"pr_number": 894, "pr_title": "Use Message in HttpSender(s)", "pr_createdAt": "2020-06-30T19:05:59Z", "pr_url": "https://github.com/ibissource/iaf/pull/894", "timeline": [{"oid": "c7cc60ff15e3faadd36d040d1bd37eddf50e6575", "url": "https://github.com/ibissource/iaf/commit/c7cc60ff15e3faadd36d040d1bd37eddf50e6575", "message": "Allow binary content on httpsender", "committedDate": "2020-06-30T12:40:08Z", "type": "commit"}, {"oid": "925df1ec8afb46c0a81aeb110c0da105a7925179", "url": "https://github.com/ibissource/iaf/commit/925df1ec8afb46c0a81aeb110c0da105a7925179", "message": "Covert output from String to Message", "committedDate": "2020-06-30T13:42:34Z", "type": "commit"}, {"oid": "fc752c8f2263e5ae3844c66de2a9fbcca26d5b6b", "url": "https://github.com/ibissource/iaf/commit/fc752c8f2263e5ae3844c66de2a9fbcca26d5b6b", "message": "Formatting", "committedDate": "2020-06-30T14:52:17Z", "type": "commit"}, {"oid": "3e22c2aba8b6d5fa81f4fb5924968ae75dc01cca", "url": "https://github.com/ibissource/iaf/commit/3e22c2aba8b6d5fa81f4fb5924968ae75dc01cca", "message": "Convert integration test to unit test", "committedDate": "2020-06-30T14:57:30Z", "type": "commit"}, {"oid": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "url": "https://github.com/ibissource/iaf/commit/d5e65d8c73143254fda074cb4d206c8ffb73bf58", "message": "Fix urlencoded messages", "committedDate": "2020-06-30T19:05:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1OTUwMw==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448159503", "bodyText": "Ik zou hier new Message(soapmsg) gebruiken, omdat je weet dat het een string is.\nDan weet je ook dat je een waarschuwing krijgt als je ooit van soapmsg een Message maakt, en het dan dus opruimt.", "author": "gvanbrakel", "createdAt": "2020-07-01T07:08:49Z", "path": "core/src/main/java/nl/nn/adapterframework/http/WebServiceSender.java", "diffHunk": "@@ -116,28 +117,32 @@ protected HttpRequestBase getMethod(URI uri, String message, ParameterValueList\n \t\t}\n \n \t\tString soapmsg;\n-\t\tif (isSoap()) {\n-\t\t\tsoapmsg = soapWrapper.putInEnvelope(message, getEncodingStyle(), serviceNamespaceURI, null, getNamespaceDefs());\n-\t\t} else {\n-\t\t\tsoapmsg = message;\n+\t\ttry {\n+\t\t\tif (isSoap()) {\n+\t\t\t\tsoapmsg = soapWrapper.putInEnvelope(message.asString(), getEncodingStyle(), serviceNamespaceURI, null, getNamespaceDefs());\n+\t\t\t} else {\n+\t\t\t\tsoapmsg = message.asString();\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new SenderException(getLogPrefix()+\"error reading message\", e);\n \t\t}\n \n \t\tif (wsscf!=null) {\n \t\t\tsoapmsg = soapWrapper.signMessage(soapmsg, wsscf.getUsername(), wsscf.getPassword(), isWssPasswordDigest());\n \t\t}\n \t\tif (log.isDebugEnabled()) log.debug(getLogPrefix()+\"SOAPMSG [\" + soapmsg + \"]\");\n \n-\t\tHttpRequestBase method = super.getMethod(uri, soapmsg, parameters, session);\n+\t\tHttpRequestBase method = super.getMethod(uri, Message.asMessage(soapmsg), parameters, session);", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2MjE3Mg==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448162172", "bodyText": "Ik snap niet wat je hier test / hoe deze test werkt:\nJe stopt er onzin in, er moet een specifieke file uit komen.", "author": "gvanbrakel", "createdAt": "2020-07-01T07:14:22Z", "path": "core/src/test/java/nl/nn/adapterframework/http/HttpSenderTest.java", "diffHunk": "@@ -141,6 +144,31 @@ public void simpleMockedHttpGet() throws Throwable {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void simpleMockedHttpGetEncodeMessage() throws Throwable {\n+\t\tHttpSender sender = getSender(false); //Cannot add headers (aka parameters) for this test!\n+\t\tMessage input = new Message(\"this is my dynamic url\");\n+\n+\t\ttry {\n+\t\t\tIPipeLineSession pls = new PipeLineSessionBase(session);\n+\n+\t\t\tsender.setMethodType(\"GET\");\n+\t\t\tsender.setEncodeMessages(true);\n+\n+\t\t\tsender.configure();\n+\t\t\tsender.open();\n+\n+\t\t\tString result = sender.sendMessage(input, pls).asString();\n+\t\t\tassertEquals(getFile(\"simpleMockedHttpGetEncodeMessage.txt\"), result.trim());\n+\t\t} catch (SenderException e) {\n+\t\t\tthrow e.getCause();\n+\t\t} finally {\n+\t\t\tif (sender != null) {\n+\t\t\t\tsender.close();\n+\t\t\t}\n+\t\t}\n+\t}\n+", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2MzQ5Ng==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448163496", "bodyText": "Waar komt dit nu opeens vandaan?", "author": "gvanbrakel", "createdAt": "2020-07-01T07:16:59Z", "path": "test/src/test/testtool/ApiListener/04/md-select.xml", "diffHunk": "@@ -13,5 +13,6 @@\n \t\t\t</column>\n \t\t</columns>\n \t\t<where>SLOTID IN ('ApiListenerDuplicateCheck', 'ApiListenerDuplicateCheck-Errors')</where>\n+\t\t<order>TYPE</order>", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2NTEyNg==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448165126", "bodyText": "Hier zou je ook message als Message door kunnen geven, in plaats van als String", "author": "gvanbrakel", "createdAt": "2020-07-01T07:20:14Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -188,18 +210,31 @@ public void configure() throws ConfigurationException {\n \t}\n \n \t@Override\n-\tprotected HttpRequestBase getMethod(URI url, String message, ParameterValueList parameters, IPipeLineSession session) throws SenderException {\n+\tprotected HttpRequestBase getMethod(URI url, Message message, ParameterValueList parameters, IPipeLineSession session) throws SenderException {\n+\t\tif (isEncodeMessages()) {\n+\t\t\ttry {\n+\t\t\t\tmessage = new Message(URLEncoder.encode(message.asString(), getCharSet()));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tthrow new SenderException(getLogPrefix()+\"unable to encode message\",e);\n+\t\t\t}\n+\t\t}\n+\n \t\tURI uri = null;\n \t\ttry {\n \t\t\turi = encodeQueryParameters(url);\n \t\t} catch (UnsupportedEncodingException | URISyntaxException e) {\n \t\t\tthrow new SenderException(\"error encoding queryparameters in url [\"+url.toString()+\"]\", e);\n \t\t}\n \n-\t\tif(isParamsInUrl())\n+\t\tif(postType.equals(PostType.URLENCODED) || postType.equals(PostType.FORMDATA) || postType.equals(PostType.MTOM)) {\n+\t\t\ttry {\n+\t\t\t\treturn getMultipartPostMethodWithParamsInBody(uri, message.asString(), parameters, session);", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2NzM0OQ==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448167349", "bodyText": "Hier zou je in plaats van een ByteArrayEntity ook de content pas kunnen streamen als het nodig is.", "author": "gvanbrakel", "createdAt": "2020-07-01T07:24:26Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -243,33 +281,50 @@ protected HttpRequestBase getMethod(URI uri, String message, ParameterValueList\n \t\t\t\treturn method;\n \t\t\t} else if (getMethodType().equals(\"POST\")) {\n \t\t\t\tHttpPost method = new HttpPost(relativePath.toString());\n-\t\t\t\tif (parameters!=null) {\n-\t\t\t\t\tStringBuffer msg = new StringBuffer(message);\n-\t\t\t\t\tappendParameters(true,msg,parameters);\n-\t\t\t\t\tif (StringUtils.isEmpty(message) && msg.length()>1) {\n-\t\t\t\t\t\tmessage=msg.substring(1);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tmessage=msg.toString();\n+\n+\t\t\t\tHttpEntity entity;\n+\t\t\t\tif(postType.equals(PostType.RAW)) {\n+\t\t\t\t\tString messageString = message.asString();\n+\t\t\t\t\tif (parameters!=null) {\n+\t\t\t\t\t\tStringBuffer msg = new StringBuffer(messageString);\n+\t\t\t\t\t\tappendParameters(true,msg,parameters);\n+\t\t\t\t\t\tif (StringUtils.isEmpty(messageString) && msg.length()>1) {\n+\t\t\t\t\t\t\tmessageString=msg.substring(1);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmessageString=msg.toString();\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t\tentity = new ByteArrayEntity(messageString.getBytes(getCharSet()), getFullContentType());\n+\t\t\t\t} else if(postType.equals(PostType.BINARY)) {\n+\t\t\t\t\tentity = new ByteArrayEntity(message.asByteArray(getCharSet()), getFullContentType());", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2Nzc3Mg==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448167772", "bodyText": "Code lijkt me hetzelfde als bij Post", "author": "gvanbrakel", "createdAt": "2020-07-01T07:25:17Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -243,33 +281,50 @@ protected HttpRequestBase getMethod(URI uri, String message, ParameterValueList\n \t\t\t\treturn method;\n \t\t\t} else if (getMethodType().equals(\"POST\")) {\n \t\t\t\tHttpPost method = new HttpPost(relativePath.toString());\n-\t\t\t\tif (parameters!=null) {\n-\t\t\t\t\tStringBuffer msg = new StringBuffer(message);\n-\t\t\t\t\tappendParameters(true,msg,parameters);\n-\t\t\t\t\tif (StringUtils.isEmpty(message) && msg.length()>1) {\n-\t\t\t\t\t\tmessage=msg.substring(1);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tmessage=msg.toString();\n+\n+\t\t\t\tHttpEntity entity;\n+\t\t\t\tif(postType.equals(PostType.RAW)) {\n+\t\t\t\t\tString messageString = message.asString();\n+\t\t\t\t\tif (parameters!=null) {\n+\t\t\t\t\t\tStringBuffer msg = new StringBuffer(messageString);\n+\t\t\t\t\t\tappendParameters(true,msg,parameters);\n+\t\t\t\t\t\tif (StringUtils.isEmpty(messageString) && msg.length()>1) {\n+\t\t\t\t\t\t\tmessageString=msg.substring(1);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmessageString=msg.toString();\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t\tentity = new ByteArrayEntity(messageString.getBytes(getCharSet()), getFullContentType());\n+\t\t\t\t} else if(postType.equals(PostType.BINARY)) {\n+\t\t\t\t\tentity = new ByteArrayEntity(message.asByteArray(getCharSet()), getFullContentType());\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow new SenderException(\"PostType [\"+postType.name()+\"] not allowed!\");\n \t\t\t\t}\n \n-\t\t\t\tHttpEntity entity = new ByteArrayEntity(message.getBytes(getCharSet()), getFullContentType());\n-\n \t\t\t\tmethod.setEntity(entity);\n \t\t\t\treturn method;\n \t\t\t}\n \t\t\tif (getMethodType().equals(\"PUT\")) {\n \t\t\t\tHttpPut method = new HttpPut(relativePath.toString());\n-\t\t\t\tif (parameters!=null) {\n-\t\t\t\t\tStringBuffer msg = new StringBuffer(message);\n-\t\t\t\t\tappendParameters(true,msg,parameters);\n-\t\t\t\t\tif (StringUtils.isEmpty(message) && msg.length()>1) {\n-\t\t\t\t\t\tmessage=msg.substring(1);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tmessage=msg.toString();\n+\t\t\t\tHttpEntity entity;\n+\t\t\t\tif(postType.equals(PostType.RAW)) {\n+\t\t\t\t\tString messageString = message.asString();\n+\t\t\t\t\tif (parameters!=null) {\n+\t\t\t\t\t\tStringBuffer msg = new StringBuffer(messageString);\n+\t\t\t\t\t\tappendParameters(true,msg,parameters);\n+\t\t\t\t\t\tif (StringUtils.isEmpty(messageString) && msg.length()>1) {\n+\t\t\t\t\t\t\tmessageString=msg.substring(1);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmessageString=msg.toString();\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t\tentity = new ByteArrayEntity(messageString.getBytes(getCharSet()), getFullContentType());\n+\t\t\t\t} else if(postType.equals(PostType.BINARY)) {\n+\t\t\t\t\tentity = new ByteArrayEntity(message.asByteArray(getCharSet()), getFullContentType());\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow new SenderException(\"PostType [\"+postType.name()+\"] not allowed!\");\n \t\t\t\t}\n-\t\t\t\tHttpEntity entity = new ByteArrayEntity(message.getBytes(getCharSet()), getFullContentType());\n+", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2ODQzNA==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448168434", "bodyText": "Oepsie!", "author": "gvanbrakel", "createdAt": "2020-07-01T07:26:26Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -377,7 +435,8 @@ protected HttpEntity createMultiPartEntity(String message, ParameterValueList pa\n \t\tMultipartEntityBuilder entity = MultipartEntityBuilder.create();\n \n \t\tentity.setCharset(Charset.forName(getCharSet()));\n-\t\tif(isMtomEnabled())\n+\t\tSystem.out.println(postType);", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2OTY3NA==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448169674", "bodyText": "Je hoeft er hier geen byte array van te maken", "author": "gvanbrakel", "createdAt": "2020-07-01T07:28:49Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -550,21 +608,28 @@ public String getResponseBodyAsString(HttpResponseHandler responseHandler) throw\n \t\treturn responseBody;\n \t}\n \n-\tpublic String getResponseBodyAsBase64(InputStream is) throws IOException {\n+\tpublic Message getResponseBodyAsBase64(InputStream is) throws IOException {\n \t\tbyte[] bytes = Misc.streamToBytes(is);\n \t\tif (bytes == null) {\n \t\t\treturn null;\n \t\t}\n \n \t\tif (log.isDebugEnabled()) log.debug(getLogPrefix()+\"base64 encodes response body\");\n-\t\treturn Base64.encodeBase64String(bytes);\n+\t\treturn new Message( Base64.encodeBase64String(bytes) );", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTQwNw==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448175407", "bodyText": "Nu moet je wel oppassen: Als je dit result teruggeeft als result van de sender, dan wordt de stream pas gelezen als de method al geclosed is. Dan moet je dus of 1) die close uitstellen totdat de close van het readen van de stream of 2) deze inputstream naar een outputream schrijven.\nOptie 1) is een beetje tricky, omdat het lastig is te garanderen dat die stream werkelijk altijd gelezen en geclosed wordt.  Het is niet zo safe als een try { ... } finally zeg maar.", "author": "gvanbrakel", "createdAt": "2020-07-01T07:39:49Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -578,7 +643,7 @@ public static String handleMultipartResponse(String mimeType, InputStream inputS\n \t\t\t\t\t\tcharset = contentType.getCharset().name();\n \n \t\t\t\t\tInputStream bodyPartInputStream = bodyPart.getInputStream();\n-\t\t\t\t\tresult = Misc.streamToString(bodyPartInputStream, charset);\n+\t\t\t\t\tresult = new Message(bodyPartInputStream, charset);", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NjA0Mg==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448176042", "bodyText": "Hier nog een IbisDoc bij", "author": "gvanbrakel", "createdAt": "2020-07-01T07:40:56Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -628,12 +693,29 @@ public static void streamResponseBody(InputStream is, String contentType,\n \t\t}\n \t}\n \n+\tpublic void setPostType(String type) throws ConfigurationException {", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NjQyNA==", "url": "https://github.com/ibissource/iaf/pull/894#discussion_r448176424", "bodyText": "Als er ibisdoc is, dan de javadoc weghalen als die hetzelfde zegt", "author": "gvanbrakel", "createdAt": "2020-07-01T07:41:43Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -628,12 +693,29 @@ public static void streamResponseBody(InputStream is, String contentType,\n \t\t}\n \t}\n \n+\tpublic void setPostType(String type) throws ConfigurationException {\n+\t\ttry {\n+\t\t\tthis.postType = PostType.valueOf(type.toUpperCase());\n+\t\t}\n+\t\tcatch (IllegalArgumentException iae) {\n+\t\t\tthrow new ConfigurationException(\"unknown postType [\"+type+\"]. Must be one of \"+ Arrays.asList(PostType.values()));\n+\t\t}\n+\t}\n+\n \t/**\n \t * When false and methodeType=POST, request parameters are put in the request body instead of in the url\n \t * @IbisDoc.default true\n \t */", "originalCommit": "d5e65d8c73143254fda074cb4d206c8ffb73bf58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2697f9ddbf4812aa4b8336ff0e5f9b437e1819b", "url": "https://github.com/ibissource/iaf/commit/c2697f9ddbf4812aa4b8336ff0e5f9b437e1819b", "message": "code style + feedback Gerrit", "committedDate": "2020-07-01T09:48:47Z", "type": "commit"}]}