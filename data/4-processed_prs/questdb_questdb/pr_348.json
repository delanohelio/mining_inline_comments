{"pr_number": 348, "pr_title": "feature(griffin) - LT JOIN ", "pr_createdAt": "2020-06-01T19:24:54Z", "pr_url": "https://github.com/questdb/questdb/pull/348", "timeline": [{"oid": "36ede63a26adec9256a3a3fd96ecec98df9abbdb", "url": "https://github.com/questdb/questdb/commit/36ede63a26adec9256a3a3fd96ecec98df9abbdb", "message": "fix(griffin) - lt join", "committedDate": "2020-06-01T09:06:34Z", "type": "commit"}, {"oid": "1d0697a758d0b4c0657aa003eed4cdf19b55ed0e", "url": "https://github.com/questdb/questdb/commit/1d0697a758d0b4c0657aa003eed4cdf19b55ed0e", "message": "fix(griffin) - lt join", "committedDate": "2020-06-01T11:16:01Z", "type": "commit"}, {"oid": "d2a3bdbf4101bb2f86e632539d05f1d745971604", "url": "https://github.com/questdb/questdb/commit/d2a3bdbf4101bb2f86e632539d05f1d745971604", "message": "fix(griffin) - lt join", "committedDate": "2020-06-01T17:55:10Z", "type": "commit"}, {"oid": "a811f4fe34f239a7904e62dc7e43674b323cf8ec", "url": "https://github.com/questdb/questdb/commit/a811f4fe34f239a7904e62dc7e43674b323cf8ec", "message": "fix(griffin) - lt join", "committedDate": "2020-06-01T19:40:33Z", "type": "commit"}, {"oid": "6e0180a0bb02ad32bf85906fcadcf2a41a61cfe9", "url": "https://github.com/questdb/questdb/commit/6e0180a0bb02ad32bf85906fcadcf2a41a61cfe9", "message": "fix(griffin) - lt join", "committedDate": "2020-06-01T20:48:23Z", "type": "commit"}, {"oid": "0c35b3c935d0051aaff3691a9b7246f27935f200", "url": "https://github.com/questdb/questdb/commit/0c35b3c935d0051aaff3691a9b7246f27935f200", "message": "fix(griffin) - lt join", "committedDate": "2020-06-02T09:00:09Z", "type": "commit"}, {"oid": "cb7aa3df057f6db6453b323a70c8ae5e0649e20a", "url": "https://github.com/questdb/questdb/commit/cb7aa3df057f6db6453b323a70c8ae5e0649e20a", "message": "fix(griffin) - lt join", "committedDate": "2020-06-02T11:01:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3MjIwNw==", "url": "https://github.com/questdb/questdb/pull/348#discussion_r434472207", "bodyText": "This is similar to asof join. Can we make factory constructor a functional interface? These factories take the same args. This way we can remove code duplication", "author": "bluestreak01", "createdAt": "2020-06-03T10:37:04Z", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -242,6 +267,133 @@ private RecordCursorFactory createFullFatAsOfJoin(\n         return master;\n     }\n \n+    @NotNull\n+    private RecordCursorFactory createFullFatLtJoin(", "originalCommit": "cb7aa3df057f6db6453b323a70c8ae5e0649e20a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3MjQ5Mw==", "url": "https://github.com/questdb/questdb/pull/348#discussion_r434472493", "bodyText": "this is good candidate for a list lookup and branch removal", "author": "bluestreak01", "createdAt": "2020-06-03T10:37:36Z", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1607,7 +1803,7 @@ private RecordCursorFactory generateTableQuery(\n                 throw e;\n             }\n \n-            boolean requiresTimestamp = model.getJoinType() == QueryModel.JOIN_ASOF || model.getJoinType() == QueryModel.JOIN_CROSS;\n+            boolean requiresTimestamp = model.getJoinType() == QueryModel.JOIN_ASOF || model.getJoinType() == QueryModel.JOIN_CROSS || model.getJoinType() == QueryModel.JOIN_LT;", "originalCommit": "cb7aa3df057f6db6453b323a70c8ae5e0649e20a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3MzI5Mg==", "url": "https://github.com/questdb/questdb/pull/348#discussion_r434473292", "bodyText": "another list lookup, also feels that for implied timestamp we should use same joins that participate in requiredTimestamp just above. Do you mind checking why CROSS join isn't present here?", "author": "bluestreak01", "createdAt": "2020-06-03T10:39:03Z", "path": "core/src/main/java/io/questdb/griffin/SqlOptimiser.java", "diffHunk": "@@ -609,7 +609,7 @@ private void createImpliedDependencies(QueryModel parent) {\n         JoinContext jc;\n         for (int i = 0, n = models.size(); i < n; i++) {\n             QueryModel m = models.getQuick(i);\n-            if (m.getJoinType() == QueryModel.JOIN_ASOF || m.getJoinType() == QueryModel.JOIN_SPLICE) {\n+            if (m.getJoinType() == QueryModel.JOIN_ASOF || m.getJoinType() == QueryModel.JOIN_SPLICE || m.getJoinType() == QueryModel.JOIN_LT) {", "originalCommit": "cb7aa3df057f6db6453b323a70c8ae5e0649e20a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8b48ea73934c21d47565900a2392588263f2ff64", "url": "https://github.com/questdb/questdb/commit/8b48ea73934c21d47565900a2392588263f2ff64", "message": "fix(griffin) - lt join", "committedDate": "2020-06-03T11:35:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzAyOQ==", "url": "https://github.com/questdb/questdb/pull/348#discussion_r434603029", "bodyText": "could we make this a static final variable? Annoyingly this is an allocating call in java", "author": "bluestreak01", "createdAt": "2020-06-03T14:18:18Z", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -753,14 +627,15 @@ private RecordCursorFactory generateJoins(QueryModel model, SqlExecutionContext\n                                     );\n                                 }\n                             } else {\n-                                master = createFullFatAsOfJoin(\n+                                master = createFullFatJoin(\n                                         master,\n                                         masterMetadata,\n                                         masterAlias,\n                                         slave,\n                                         slaveMetadata,\n                                         slaveModel.getName(),\n-                                        slaveModel.getJoinKeywordPosition()\n+                                        slaveModel.getJoinKeywordPosition(),\n+                                        SqlCodeGenerator::createFullFatAsOfJoin", "originalCommit": "8b48ea73934c21d47565900a2392588263f2ff64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a5aae4d46b07c7c39cdfe6b3ca1ca52b77ad223a", "url": "https://github.com/questdb/questdb/commit/a5aae4d46b07c7c39cdfe6b3ca1ca52b77ad223a", "message": "test for milli Timestamp", "committedDate": "2020-06-03T19:13:45Z", "type": "commit"}, {"oid": "e98e8ff8c9c17160cc4c61c054c458241776b936", "url": "https://github.com/questdb/questdb/commit/e98e8ff8c9c17160cc4c61c054c458241776b936", "message": "fix(griffin) - lt join", "committedDate": "2020-06-03T20:53:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4MDI5Mw==", "url": "https://github.com/questdb/questdb/pull/348#discussion_r434980293", "bodyText": "I mean sparse array. I wouldn't think loop is faster than || comparison. Probably not. Using sparse array lookup will look like:\nboolean requiresTimeatamp = joinsRequiringTimestamp[model.getJoinType()];", "author": "bluestreak01", "createdAt": "2020-06-04T04:05:25Z", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1953,6 +2028,15 @@ private RecordCursorFactory generateTableQuery(\n         }\n     }\n \n+    private boolean requiresTimestamp(int joinType) {", "originalCommit": "e98e8ff8c9c17160cc4c61c054c458241776b936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "04862822c59ee73961211e6930791920626c5fe4", "url": "https://github.com/questdb/questdb/commit/04862822c59ee73961211e6930791920626c5fe4", "message": "fix(griffin) - lt join", "committedDate": "2020-06-04T08:40:13Z", "type": "commit"}]}