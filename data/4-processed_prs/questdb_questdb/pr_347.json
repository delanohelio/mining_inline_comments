{"pr_number": 347, "pr_title": "chore(griffin): Limit the number of rows returned in HTTP requests (h\u2026", "pr_createdAt": "2020-06-01T14:39:54Z", "pr_url": "https://github.com/questdb/questdb/pull/347", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MTg2Nw==", "url": "https://github.com/questdb/questdb/pull/347#discussion_r433371867", "bodyText": "comparison to MAX_VALUE seems redundant", "author": "bluestreak01", "createdAt": "2020-06-01T17:13:40Z", "path": "core/src/main/java/io/questdb/cutlass/http/processors/TextQueryProcessor.java", "diffHunk": "@@ -361,6 +361,10 @@ private boolean parseUrl(\n             skip = 0;\n         }\n \n+        if (configuration.getMaxQueryResponseRowLimit() != Long.MAX_VALUE && (stop - skip) > configuration.getMaxQueryResponseRowLimit()) {", "originalCommit": "d69da73001e3a2edfd773538b5a25cae30e3f481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3NjU2MA==", "url": "https://github.com/questdb/questdb/pull/347#discussion_r433376560", "bodyText": "I would also try to use min/max functions, in case Java can JIT those without branches", "author": "bluestreak01", "createdAt": "2020-06-01T17:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MTg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3Mjg0OA==", "url": "https://github.com/questdb/questdb/pull/347#discussion_r433372848", "bodyText": "This is going to be hard to trace in multi-user environment. Compiled model for what SQL? Which FD?", "author": "bluestreak01", "createdAt": "2020-06-01T17:15:28Z", "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -1106,6 +1106,7 @@ private CompiledQuery compileUsingModel(SqlExecutionContext executionContext) th\n         ExecutionModel executionModel = compileExecutionModel(executionContext);\n         switch (executionModel.getModelType()) {\n             case ExecutionModel.QUERY:\n+                LOG.info().$(\"Compiled model: \").$((QueryModel) executionModel).$();", "originalCommit": "d69da73001e3a2edfd773538b5a25cae30e3f481", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3NTg3MA==", "url": "https://github.com/questdb/questdb/pull/347#discussion_r433375870", "bodyText": "it would be useful to track network usage per connection to try to find offenders. When total usage goes up, what do we do?\nlog structure is \"action done/doing [context_variable=value, context_variable2=value, ....]\"", "author": "bluestreak01", "createdAt": "2020-06-01T17:21:07Z", "path": "core/src/main/java/io/questdb/cutlass/http/processors/JsonQueryProcessor.java", "diffHunk": "@@ -264,7 +264,7 @@ protected static void header(\n     }\n \n     private static void readyForNextRequest(HttpConnectionContext context) {\n-        LOG.debug().$(\"all sent [fd=\").$(context.getFd()).$(']').$();\n+        LOG.info().$(\"Request complete, \").$(context.getTotalBytesSent()).$(\" bytes sent [fd=\").$(context.getFd()).$(']').$();", "originalCommit": "d69da73001e3a2edfd773538b5a25cae30e3f481", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3NjIxOA==", "url": "https://github.com/questdb/questdb/pull/347#discussion_r433376218", "bodyText": "same, comparison to MAX_VALUE is redundant", "author": "bluestreak01", "createdAt": "2020-06-01T17:21:46Z", "path": "core/src/main/java/io/questdb/cutlass/http/processors/JsonQueryProcessor.java", "diffHunk": "@@ -405,6 +405,10 @@ private boolean parseUrl(\n             skip = 0;\n         }\n \n+        if (configuration.getMaxQueryResponseRowLimit() != Long.MAX_VALUE && (stop - skip) > configuration.getMaxQueryResponseRowLimit()) {", "originalCommit": "d69da73001e3a2edfd773538b5a25cae30e3f481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3NzUyMQ==", "url": "https://github.com/questdb/questdb/pull/347#discussion_r433377521", "bodyText": "Thats true, but most of the time maxQueryResponseRowLimit will be  Long.MAX_VALUE, I wanted to avoid the additional subtraction", "author": "patrickSpaceSurfer", "createdAt": "2020-06-01T17:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3NjIxOA=="}], "type": "inlineReview"}, {"oid": "048da23fffc020d19e39913e2597285f34911fab", "url": "https://github.com/questdb/questdb/commit/048da23fffc020d19e39913e2597285f34911fab", "message": "chore(griffin): Limit the number of rows returned in HTTP requests (http.security.max.response.rows)", "committedDate": "2020-06-02T10:36:30Z", "type": "commit"}, {"oid": "a65f45c7501e73abc6d73e588b76f7f8d2f3afc6", "url": "https://github.com/questdb/questdb/commit/a65f45c7501e73abc6d73e588b76f7f8d2f3afc6", "message": "chore(griffin): Add more logging to HTTP queries", "committedDate": "2020-06-02T10:36:30Z", "type": "commit"}, {"oid": "22f2a5625d043ac83e81a77b0215ad6da846e1a8", "url": "https://github.com/questdb/questdb/commit/22f2a5625d043ac83e81a77b0215ad6da846e1a8", "message": "chore(griffin): Log QueryModel when SQL is first compiled", "committedDate": "2020-06-02T10:36:30Z", "type": "commit"}, {"oid": "5e27530968b74f9c9cce522f3080016178aec38d", "url": "https://github.com/questdb/questdb/commit/5e27530968b74f9c9cce522f3080016178aec38d", "message": "chore(griffin): Log QueryModel when SQL is first compiled", "committedDate": "2020-06-02T13:03:59Z", "type": "commit"}, {"oid": "1ac478b1fa5c54cee90acd0ca2bae2e07f6e9827", "url": "https://github.com/questdb/questdb/commit/1ac478b1fa5c54cee90acd0ca2bae2e07f6e9827", "message": "chore(griffin): Log QueryModel when SQL is first compiled", "committedDate": "2020-06-02T14:11:14Z", "type": "commit"}, {"oid": "1ac478b1fa5c54cee90acd0ca2bae2e07f6e9827", "url": "https://github.com/questdb/questdb/commit/1ac478b1fa5c54cee90acd0ca2bae2e07f6e9827", "message": "chore(griffin): Log QueryModel when SQL is first compiled", "committedDate": "2020-06-02T14:11:14Z", "type": "forcePushed"}, {"oid": "b1563dc59ff923ed9e0a5dedae436ff3ab45856a", "url": "https://github.com/questdb/questdb/commit/b1563dc59ff923ed9e0a5dedae436ff3ab45856a", "message": "chore(griffin): Log more requests information", "committedDate": "2020-06-02T14:27:14Z", "type": "commit"}, {"oid": "c1ab6d771e3d415577c05417d00e0153357debb6", "url": "https://github.com/questdb/questdb/commit/c1ab6d771e3d415577c05417d00e0153357debb6", "message": "chore(griffin): Add tests for security configuration", "committedDate": "2020-06-02T15:53:19Z", "type": "commit"}]}