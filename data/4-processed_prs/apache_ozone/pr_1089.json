{"pr_number": 1089, "pr_title": "HDDS-3705. [OFS] Implement getTrashRoots for trash cleanup", "pr_createdAt": "2020-06-17T21:27:59Z", "pr_url": "https://github.com/apache/ozone/pull/1089", "timeline": [{"oid": "92901dd0f37deb2d02a880305479e688d29af8a8", "url": "https://github.com/apache/ozone/commit/92901dd0f37deb2d02a880305479e688d29af8a8", "message": "Crude implementation of getTrashRoots for OFS. Untested.\n\n(cherry picked from commit c563260011aa00a36568c57cda7254e82c15c59c)\n\nConflicts:\nhadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "committedDate": "2020-06-30T18:54:40Z", "type": "commit"}, {"oid": "92901dd0f37deb2d02a880305479e688d29af8a8", "url": "https://github.com/apache/ozone/commit/92901dd0f37deb2d02a880305479e688d29af8a8", "message": "Crude implementation of getTrashRoots for OFS. Untested.\n\n(cherry picked from commit c563260011aa00a36568c57cda7254e82c15c59c)\n\nConflicts:\nhadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "committedDate": "2020-06-30T18:54:40Z", "type": "forcePushed"}, {"oid": "3f84de37a42191dac1ba6f033f987c8d6304df90", "url": "https://github.com/apache/ozone/commit/3f84de37a42191dac1ba6f033f987c8d6304df90", "message": "Check if trash path is a directory.\n\nChange-Id: Ib429ea98bfc3c9d088dc5ce88fe48d0447963713", "committedDate": "2020-07-01T07:07:16Z", "type": "commit"}, {"oid": "d0ac17309148900370d4672fdb17f49dc638479b", "url": "https://github.com/apache/ozone/commit/d0ac17309148900370d4672fdb17f49dc638479b", "message": "Add new test.\n\nChange-Id: Ib9f27fb1f75829befd48643b203cabb637830343", "committedDate": "2020-07-01T07:07:25Z", "type": "commit"}, {"oid": "001a897284260a3666b55c19b460026e710da2b7", "url": "https://github.com/apache/ozone/commit/001a897284260a3666b55c19b460026e710da2b7", "message": "Add getTrashRoots java doc.\n\nChange-Id: I166339f3740475920880ef9f7b338f06d1902c85", "committedDate": "2020-07-01T07:21:14Z", "type": "commit"}, {"oid": "3a4f20a53317403f080a5d48ff41839a36f4a42d", "url": "https://github.com/apache/ozone/commit/3a4f20a53317403f080a5d48ff41839a36f4a42d", "message": "Amend ObjectStore#listVolumesByUser java doc.\n\nChange-Id: I8cc0f28f3f6c8c92304c7795635fb3d68e01d2fe", "committedDate": "2020-07-01T07:21:33Z", "type": "commit"}, {"oid": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780", "url": "https://github.com/apache/ozone/commit/e163f2c26ea5ed74150dc19a68a4eaeeb40fe780", "message": "Fix test.\n\nChange-Id: Ia8ba7a528332f3bc8b4e73cb636f753080e5105b", "committedDate": "2020-07-07T18:12:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMjMyMQ==", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451102321", "bodyText": "NIT: forEach is unnecessary as we have assert the size is 1.", "author": "xiaoyuyao", "createdAt": "2020-07-07T19:46:04Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -871,4 +876,103 @@ public void testFailToDeleteRoot() throws IOException {\n     Assert.assertFalse(fs.delete(new Path(\"/\"), true));\n   }\n \n+  /**\n+   * Test getTrashRoots() in OFS. Different from the existing test for o3fs.\n+   */\n+  @Test\n+  public void testGetTrashRoots() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    OzoneVolume volume1 = objectStore.getVolume(volumeName);\n+    String prevOwner = volume1.getOwner();\n+    // Set owner of the volume to current user, so it will show up in vol list\n+    Assert.assertTrue(volume1.setOwner(username));\n+\n+    Path trashRoot1 = new Path(bucketPath, TRASH_PREFIX);\n+    Path user1Trash1 = new Path(trashRoot1, username);\n+    // When user trash dir isn't been created\n+    Assert.assertEquals(0, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(0, fs.getTrashRoots(true).size());\n+    // Let's create our first user1 (current user) trash dir.\n+    fs.mkdirs(user1Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=1\n+    Collection<FileStatus> res = fs.getTrashRoots(false);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(", "originalCommit": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMzQ2Nw==", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451113467", "bodyText": "done d997ac0", "author": "smengcl", "createdAt": "2020-07-07T20:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMjMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMzIwNw==", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451103207", "bodyText": "Can we assert the trash roots is for user one with invoke getTrashRoots(false)?", "author": "xiaoyuyao", "createdAt": "2020-07-07T19:47:41Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -871,4 +876,103 @@ public void testFailToDeleteRoot() throws IOException {\n     Assert.assertFalse(fs.delete(new Path(\"/\"), true));\n   }\n \n+  /**\n+   * Test getTrashRoots() in OFS. Different from the existing test for o3fs.\n+   */\n+  @Test\n+  public void testGetTrashRoots() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    OzoneVolume volume1 = objectStore.getVolume(volumeName);\n+    String prevOwner = volume1.getOwner();\n+    // Set owner of the volume to current user, so it will show up in vol list\n+    Assert.assertTrue(volume1.setOwner(username));\n+\n+    Path trashRoot1 = new Path(bucketPath, TRASH_PREFIX);\n+    Path user1Trash1 = new Path(trashRoot1, username);\n+    // When user trash dir isn't been created\n+    Assert.assertEquals(0, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(0, fs.getTrashRoots(true).size());\n+    // Let's create our first user1 (current user) trash dir.\n+    fs.mkdirs(user1Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=1\n+    Collection<FileStatus> res = fs.getTrashRoots(false);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+    res = fs.getTrashRoots(true);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+\n+    // Create one more trash for user2 in the same bucket\n+    Path user2Trash1 = new Path(trashRoot1, \"testuser2\");\n+    fs.mkdirs(user2Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=2\n+    Assert.assertEquals(1, fs.getTrashRoots(false).size());", "originalCommit": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyNjg1Mg==", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451126852", "bodyText": "sure thing. done in ebf104b", "author": "smengcl", "createdAt": "2020-07-07T20:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMzIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMzY4Mg==", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451103682", "bodyText": "I see you have the assertion here for user1Trash1. So you can ignore the previous comment.", "author": "xiaoyuyao", "createdAt": "2020-07-07T19:48:35Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -871,4 +876,103 @@ public void testFailToDeleteRoot() throws IOException {\n     Assert.assertFalse(fs.delete(new Path(\"/\"), true));\n   }\n \n+  /**\n+   * Test getTrashRoots() in OFS. Different from the existing test for o3fs.\n+   */\n+  @Test\n+  public void testGetTrashRoots() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    OzoneVolume volume1 = objectStore.getVolume(volumeName);\n+    String prevOwner = volume1.getOwner();\n+    // Set owner of the volume to current user, so it will show up in vol list\n+    Assert.assertTrue(volume1.setOwner(username));\n+\n+    Path trashRoot1 = new Path(bucketPath, TRASH_PREFIX);\n+    Path user1Trash1 = new Path(trashRoot1, username);\n+    // When user trash dir isn't been created\n+    Assert.assertEquals(0, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(0, fs.getTrashRoots(true).size());\n+    // Let's create our first user1 (current user) trash dir.\n+    fs.mkdirs(user1Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=1\n+    Collection<FileStatus> res = fs.getTrashRoots(false);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+    res = fs.getTrashRoots(true);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+\n+    // Create one more trash for user2 in the same bucket\n+    Path user2Trash1 = new Path(trashRoot1, \"testuser2\");\n+    fs.mkdirs(user2Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=2\n+    Assert.assertEquals(1, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(2, fs.getTrashRoots(true).size());\n+\n+    // Create a new bucket in the same volume\n+    final String bucketName2 = \"trashroottest2\";\n+    volume1.createBucket(bucketName2);\n+    Path bucketPath2 = new Path(volumePath, bucketName2);\n+    Path trashRoot2 = new Path(bucketPath2, TRASH_PREFIX);\n+    Path user1Trash2 = new Path(trashRoot2, username);\n+    // Create a file at the trash location, it shouldn't be recognized as trash\n+    try (FSDataOutputStream out1 = fs.create(user1Trash2)) {\n+      out1.write(123);\n+    }\n+    // Results should still be getTrashRoots(false)=1, gTR(true)=2\n+    Assert.assertEquals(1, fs.getTrashRoots(false).size());\n+    res.forEach(e -> Assert.assertEquals(", "originalCommit": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjcxMQ==", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451112711", "bodyText": "I don't think we should throw RuntimeException here. We can log a warning and return an empty collection instead.", "author": "xiaoyuyao", "createdAt": "2020-07-07T20:06:01Z", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -516,6 +520,62 @@ public FileStatusAdapter getFileStatus(String path, URI uri,\n     }\n   }\n \n+  /**\n+   * Get trash roots for current user or all users.\n+   *\n+   * Note:\n+   * 1. When allUsers flag is false, this only returns the trash roots for\n+   * those that the current user has access to.\n+   * 2. Also it is not particularly efficient to use this API when there are\n+   * a lot of volumes and buckets as the client has to iterate through all\n+   * buckets in all volumes.\n+   *\n+   * @param allUsers return trashRoots of all users if true, used by emptier\n+   * @param fs Pointer to the current OFS FileSystem\n+   * @return\n+   */\n+  public Collection<FileStatus> getTrashRoots(boolean allUsers,\n+      BasicRootedOzoneFileSystem fs) {\n+    List<FileStatus> ret = new ArrayList<>();\n+    try {\n+      Iterator<? extends OzoneVolume> iterVol;\n+      String username = UserGroupInformation.getCurrentUser().getUserName();\n+      if (allUsers) {\n+        iterVol = objectStore.listVolumes(\"\");\n+      } else {\n+        iterVol = objectStore.listVolumesByUser(username, \"\", \"\");\n+      }\n+      while (iterVol.hasNext()) {\n+        OzoneVolume volume = iterVol.next();\n+        Path volumePath = new Path(OZONE_URI_DELIMITER, volume.getName());\n+        Iterator<? extends OzoneBucket> bucketIter = volume.listBuckets(\"\");\n+        while (bucketIter.hasNext()) {\n+          OzoneBucket bucket = bucketIter.next();\n+          Path bucketPath = new Path(volumePath, bucket.getName());\n+          Path trashRoot = new Path(bucketPath, FileSystem.TRASH_PREFIX);\n+          if (allUsers) {\n+            if (fs.exists(trashRoot)) {\n+              for (FileStatus candidate : fs.listStatus(trashRoot)) {\n+                if (fs.exists(candidate.getPath()) && candidate.isDirectory()) {\n+                  ret.add(candidate);\n+                }\n+              }\n+            }\n+          } else {\n+            Path userTrash = new Path(trashRoot, username);\n+            if (fs.exists(userTrash) &&\n+                fs.getFileStatus(userTrash).isDirectory()) {\n+              ret.add(fs.getFileStatus(userTrash));\n+            }\n+          }\n+        }\n+      }\n+    } catch (IOException ex) {\n+      throw new RuntimeException(ex);", "originalCommit": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyOTE0Mg==", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451129142", "bodyText": "done 1940f99", "author": "smengcl", "createdAt": "2020-07-07T20:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjcxMQ=="}], "type": "inlineReview"}, {"oid": "d997ac0fb09b0145824ae8196e6b9bb47956c086", "url": "https://github.com/apache/ozone/commit/d997ac0fb09b0145824ae8196e6b9bb47956c086", "message": "res.forEach -> checkFirstFileStatusPath\n\nChange-Id: I4b855a3e6f44b53c77aab6d4b782c98a8efdf295", "committedDate": "2020-07-07T20:07:24Z", "type": "commit"}, {"oid": "ebf104b3d6b0c6531ce2bec33fe00c996fcb16cf", "url": "https://github.com/apache/ozone/commit/ebf104b3d6b0c6531ce2bec33fe00c996fcb16cf", "message": "Check owner for fs.getTrashRoots(false).\n\nChange-Id: I2bc42ad1d50dccc227f615daca2b86434fffc523", "committedDate": "2020-07-07T20:33:52Z", "type": "commit"}, {"oid": "1940f99f524ef589b2c5a1613031f3cb7b1066b4", "url": "https://github.com/apache/ozone/commit/1940f99f524ef589b2c5a1613031f3cb7b1066b4", "message": "getTrashRoots: Log and return empty on IOException instead of throwing RuntimeException.\n\nChange-Id: Id6c705e62ac6c66ffc25ae468a4288d79e0c03df", "committedDate": "2020-07-07T20:38:26Z", "type": "commit"}]}