{"pr_number": 1473, "pr_title": "HDDS-4266: CreateFile : store parent dir entries into DirTable and file entry into separate FileTable", "pr_createdAt": "2020-10-04T16:44:52Z", "pr_url": "https://github.com/apache/ozone/pull/1473", "timeline": [{"oid": "233e481e177bec74a5aad9c7c5cf7262ffead02a", "url": "https://github.com/apache/ozone/commit/233e481e177bec74a5aad9c7c5cf7262ffead02a", "message": "HDDS-4266: CreateFile : store parent dir entries into DirTable and file entry into separate FileTable", "committedDate": "2020-10-04T16:39:21Z", "type": "commit"}, {"oid": "21ef5e51d857ce2aa17cf26071ef0ee3f19dcb5b", "url": "https://github.com/apache/ozone/commit/21ef5e51d857ce2aa17cf26071ef0ee3f19dcb5b", "message": "Fixed checkstyle warnings and UT failures", "committedDate": "2020-10-05T03:57:02Z", "type": "commit"}, {"oid": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "url": "https://github.com/apache/ozone/commit/c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "message": "Fixed unit test failure - TestCleanupTableInfo", "committedDate": "2020-10-05T05:04:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NDQ1Nw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499384457", "bodyText": "Why not add setFileName here?", "author": "linyiqun", "createdAt": "2020-10-05T07:12:33Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -413,7 +461,8 @@ public KeyInfo getProtobuf(boolean ignorePipeline) {\n         .addAllMetadata(KeyValueUtil.toProtobuf(metadata))\n         .addAllAcls(OzoneAclUtil.toProtobuf(acls))\n         .setObjectID(objectID)\n-        .setUpdateID(updateID);\n+        .setUpdateID(updateID)\n+        .setParentID(parentObjectID);", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MDA3OQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500470079", "bodyText": "I am not persisting fileName, which is already the last name in the path component(keyName). I have added logic to prepare filename from Keyname. Hope this is fine?", "author": "rakeshadr", "createdAt": "2020-10-06T17:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NDQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNTczMA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500805730", "bodyText": "Yes, makes sense to me.", "author": "linyiqun", "createdAt": "2020-10-07T07:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NDQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NTk5NQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499385995", "bodyText": "Not the change of current PR but was introduced in last PR of HDDS-2949.\n/**\n   * Given a volume, bucket and a key, return the corresponding DB prefixKey\n   * key.\n   *\n   * @param parentObjectId - parent object Id\n   * @param pathComponentName   - path component name\n   * @return DB directory key as String.\n   */\n  String getOzonePathKey(long parentObjectId, String pathComponentName);\nCan we update above comment? It's not correct.", "author": "linyiqun", "createdAt": "2020-10-05T07:16:04Z", "path": "hadoop-ozone/interface-storage/src/main/java/org/apache/hadoop/ozone/om/OMMetadataManager.java", "diffHunk": "@@ -399,4 +399,15 @@ String getMultipartKey(String volume, String bucket, String key, String\n    * @return DB directory key as String.\n    */\n   String getOzonePathKey(long parentObjectId, String pathComponentName);", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwOTg3MA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500909870", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NTk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NzYzMQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499387631", "bodyText": "Can we add openFileTable structure as well here?", "author": "linyiqun", "createdAt": "2020-10-05T07:19:56Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "diffHunk": "@@ -129,6 +132,8 @@\n    * |----------------------------------------------------------------------|\n    * |  directoryTable    | parentId/directoryName -> DirectoryInfo         |\n    * |----------------------------------------------------------------------|\n+   * |  fileTable         | parentId/fileName -> FileInfo                   |\n+   * |----------------------------------------------------------------------|", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwOTk1Ng==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500909956", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NzYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMDUyMQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499400521", "bodyText": "We could use  OmDirectoryInfo#getPath to simplified for this, there is already one method doing this.", "author": "linyiqun", "createdAt": "2020-10-05T07:46:12Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMFileCreateResponseV1.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.file;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmDirectoryInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Response for create file request layout version1.\n+ */\n+public class OMFileCreateResponseV1 extends OMFileCreateResponse {\n+\n+  private List<OmDirectoryInfo> parentDirInfos;\n+\n+  public OMFileCreateResponseV1(@Nonnull OMResponse omResponse,\n+                                @Nonnull OmKeyInfo omKeyInfo,\n+                                @Nonnull List<OmDirectoryInfo> parentDirInfos,\n+                                long openKeySessionID,\n+                                @Nonnull OmVolumeArgs omVolumeArgs,\n+                                @Nonnull OmBucketInfo omBucketInfo) {\n+    super(omResponse, omKeyInfo, new ArrayList<>(), openKeySessionID,\n+        omVolumeArgs, omBucketInfo);\n+    this.parentDirInfos = parentDirInfos;\n+  }\n+\n+  @Override\n+  protected void addToDBBatch(OMMetadataManager omMetadataMgr,\n+                              BatchOperation batchOp) throws IOException {\n+\n+    /**\n+     * Create parent directory entries during Key Create - do not wait\n+     * for Key Commit request.\n+     * XXX handle stale directory entries.\n+     */\n+    if (parentDirInfos != null) {\n+      for (OmDirectoryInfo parentKeyInfo : parentDirInfos) {\n+        String parentKey = omMetadataMgr.getOzonePathKey(\n+                parentKeyInfo.getParentObjectID(), parentKeyInfo.getName());", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDAzOA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910038", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMDUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2OTU2NQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499569565", "bodyText": "Nit: Remove this empty line.", "author": "linyiqun", "createdAt": "2020-10-05T12:44:13Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "diffHunk": "@@ -346,6 +369,7 @@ protected static DBStoreBuilder addOMTablesAndCodecs(DBStoreBuilder builder) {\n         .addCodec(S3SecretValue.class, new S3SecretValueCodec())\n         .addCodec(OmPrefixInfo.class, new OmPrefixInfoCodec())\n         .addCodec(OmDirectoryInfo.class, new OmDirectoryInfoCodec())\n+", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDA4MQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910081", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2OTU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3NjUyOA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499576528", "bodyText": "Can we rename method #getAllParentDirInfo to #getAllMissingParentDirInfo to make this more readable?", "author": "linyiqun", "createdAt": "2020-10-05T12:55:24Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequestV1.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.file;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.apache.hadoop.ozone.security.acl.OzoneObj;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+import static org.apache.hadoop.ozone.om.request.file.OMFileRequest.OMDirectoryResult.*;\n+\n+/**\n+ * Handles create file request layout version1.\n+ */\n+public class OMFileCreateRequestV1 extends OMFileCreateRequest {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(OMFileCreateRequestV1.class);\n+  public OMFileCreateRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CreateFileRequest createFileRequest = getOmRequest().getCreateFileRequest();\n+    KeyArgs keyArgs = createFileRequest.getKeyArgs();\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(keyArgs);\n+\n+    String volumeName = keyArgs.getVolumeName();\n+    String bucketName = keyArgs.getBucketName();\n+    String keyName = keyArgs.getKeyName();\n+\n+    // if isRecursive is true, file would be created even if parent\n+    // directories does not exist.\n+    boolean isRecursive = createFileRequest.getIsRecursive();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"File create for : \" + volumeName + \"/\" + bucketName + \"/\"\n+          + keyName + \":\" + isRecursive);\n+    }\n+\n+    // if isOverWrite is true, file would be over written.\n+    boolean isOverWrite = createFileRequest.getIsOverwrite();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumCreateFile();\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    boolean acquiredLock = false;\n+\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    final List<OmKeyLocationInfo> locations = new ArrayList<>();\n+    List<OmDirectoryInfo> missingParentInfos;\n+\n+    OMClientResponse omClientResponse = null;\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+        getOmRequest());\n+    IOException exception = null;\n+    Result result = null;\n+    try {\n+      keyArgs = resolveBucketLink(ozoneManager, keyArgs, auditMap);\n+      volumeName = keyArgs.getVolumeName();\n+      bucketName = keyArgs.getBucketName();\n+\n+      if (keyName.length() == 0) {\n+        // Check if this is the root of the filesystem.\n+        throw new OMException(\"Can not write to directory: \" + keyName,\n+                OMException.ResultCodes.NOT_A_FILE);\n+      }\n+\n+      // check Acl\n+      checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n+          IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n+\n+      // acquire lock\n+      acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+          volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      OmKeyInfo dbFileInfo = null;\n+\n+      OMFileRequest.OMPathInfoV1 pathInfoV1 =\n+              OMFileRequest.verifyDirectoryKeysInPath(omMetadataManager,\n+                      volumeName, bucketName, keyName, Paths.get(keyName));\n+\n+      if (pathInfoV1.getDirectoryResult()\n+              == OMFileRequest.OMDirectoryResult.FILE_EXISTS) {\n+        String dbFileKey = omMetadataManager.getOzonePathKey(\n+                pathInfoV1.getLastKnownParentId(),\n+                pathInfoV1.getLeafNodeName());\n+        dbFileInfo = omMetadataManager.getKeyTable().get(dbFileKey);\n+        if (dbFileInfo != null) {\n+          ozoneManager.getKeyManager().refresh(dbFileInfo);\n+        }\n+      }\n+\n+      // check if the file or directory already existed in OM\n+      checkPathAlreadyExists(keyName, isOverWrite, pathInfoV1);\n+\n+      if (!isRecursive) {\n+        checkAllParentsExist(ozoneManager, keyArgs, pathInfoV1);\n+      }\n+\n+      // add all missing parents to dir table\n+      missingParentInfos = OMDirectoryCreateRequestV1.getAllParentDirInfo(\n+              ozoneManager, keyArgs, pathInfoV1, trxnLogIndex);", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDEyMA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910120", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3NjUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MzU1OQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499583559", "bodyText": "Can we use omMetadataManager.getOzonePathKey to construct db key name instead of?", "author": "linyiqun", "createdAt": "2020-10-05T13:06:26Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequestV1.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.AuditLogger;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.KEY_NOT_FOUND;\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles CommitKey request.\n+ */\n+public class OMKeyCommitRequestV1 extends OMKeyCommitRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMKeyCommitRequestV1.class);\n+\n+  public OMKeyCommitRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CommitKeyRequest commitKeyRequest = getOmRequest().getCommitKeyRequest();\n+\n+    KeyArgs commitKeyArgs = commitKeyRequest.getKeyArgs();\n+\n+    String volumeName = commitKeyArgs.getVolumeName();\n+    String bucketName = commitKeyArgs.getBucketName();\n+    String keyName = commitKeyArgs.getKeyName();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumKeyCommits();\n+\n+    AuditLogger auditLogger = ozoneManager.getAuditLogger();\n+\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(commitKeyArgs);\n+\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+            getOmRequest());\n+\n+    IOException exception = null;\n+    OmKeyInfo omKeyInfo = null;\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    OMClientResponse omClientResponse = null;\n+    boolean bucketLockAcquired = false;\n+    Result result;\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    try {\n+      commitKeyArgs = resolveBucketLink(ozoneManager, commitKeyArgs, auditMap);\n+      volumeName = commitKeyArgs.getVolumeName();\n+      bucketName = commitKeyArgs.getBucketName();\n+\n+      // check Acl\n+      checkKeyAclsInOpenKeyTable(ozoneManager, volumeName, bucketName,\n+              keyName, IAccessAuthorizer.ACLType.WRITE,\n+              commitKeyRequest.getClientID());\n+\n+\n+      String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+      Iterator<Path> pathComponents = Paths.get(keyName).iterator();\n+      String dbOpenFileKey = null;\n+\n+      List<OmKeyLocationInfo> locationInfoList = new ArrayList<>();\n+      for (KeyLocation keyLocation : commitKeyArgs.getKeyLocationsList()) {\n+        locationInfoList.add(OmKeyLocationInfo.getFromProtobuf(keyLocation));\n+      }\n+\n+      bucketLockAcquired =\n+              omMetadataManager.getLock().acquireLock(BUCKET_LOCK,\n+                      volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      String fileName = OzoneFSUtils.getFileName(keyName);\n+      omBucketInfo = omMetadataManager.getBucketTable().get(bucketKey);\n+      long bucketId = omBucketInfo.getObjectID();\n+      long parentID = getParentID(bucketId, pathComponents, keyName,\n+              omMetadataManager);\n+      String dbFileKey = omMetadataManager.getOzonePathKey(parentID, fileName);\n+      dbOpenFileKey = omMetadataManager.getOpenFileName(parentID, fileName,\n+              commitKeyRequest.getClientID());\n+\n+      omKeyInfo = omMetadataManager.getOpenKeyTable().get(dbOpenFileKey);\n+      if (omKeyInfo == null) {\n+        throw new OMException(\"Failed to commit key, as \" + dbOpenFileKey +\n+                \"entry is not found in the OpenKey table\", KEY_NOT_FOUND);\n+      }\n+      omKeyInfo.setDataSize(commitKeyArgs.getDataSize());\n+\n+      omKeyInfo.setModificationTime(commitKeyArgs.getModificationTime());\n+\n+      // Update the block length for each block\n+      omKeyInfo.updateLocationInfoList(locationInfoList);\n+\n+      // Set the UpdateID to current transactionLogIndex\n+      omKeyInfo.setUpdateID(trxnLogIndex, ozoneManager.isRatisEnabled());\n+\n+      // Add to cache of open key table and key table.\n+      omMetadataManager.getOpenKeyTable().addCacheEntry(\n+              new CacheKey<>(dbFileKey),\n+              new CacheValue<>(Optional.absent(), trxnLogIndex));\n+\n+      omMetadataManager.getKeyTable().addCacheEntry(\n+              new CacheKey<>(dbFileKey),\n+              new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n+\n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      int factor = omKeyInfo.getFactor().getNumber();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      // update usedBytes atomically.\n+      // Block was pre-requested and UsedBytes updated when createKey and\n+      // AllocatedBlock. The space occupied by the Key shall be based on\n+      // the actual Key size, and the total Block size applied before should\n+      // be subtracted.\n+      long correctedSpace = omKeyInfo.getDataSize() * factor -\n+              locationInfoList.size() * scmBlockSize * factor;\n+      omVolumeArgs.getUsedBytes().add(correctedSpace);\n+      omBucketInfo.getUsedBytes().add(correctedSpace);\n+\n+      omClientResponse = new OMKeyCommitResponse(omResponse.build(),\n+              omKeyInfo, dbFileKey, dbOpenFileKey, omVolumeArgs, omBucketInfo);\n+\n+      result = Result.SUCCESS;\n+    } catch (IOException ex) {\n+      result = Result.FAILURE;\n+      exception = ex;\n+      omClientResponse = new OMKeyCommitResponseV1(createErrorOMResponse(\n+              omResponse, exception));\n+    } finally {\n+      addResponseToDoubleBuffer(trxnLogIndex, omClientResponse,\n+              omDoubleBufferHelper);\n+\n+      if(bucketLockAcquired) {\n+        omMetadataManager.getLock().releaseLock(BUCKET_LOCK, volumeName,\n+                bucketName);\n+      }\n+    }\n+\n+    auditLog(auditLogger, buildAuditMessage(OMAction.COMMIT_KEY, auditMap,\n+            exception, getOmRequest().getUserInfo()));\n+\n+    switch (result) {\n+    case SUCCESS:\n+      // As when we commit the key, then it is visible in ozone, so we should\n+      // increment here.\n+      // As key also can have multiple versions, we need to increment keys\n+      // only if version is 0. Currently we have not complete support of\n+      // versioning of keys. So, this can be revisited later.\n+      if (omKeyInfo.getKeyLocationVersions().size() == 1) {\n+        omMetrics.incNumKeys();\n+      }\n+      LOG.debug(\"Key committed. Volume:{}, Bucket:{}, Key:{}\", volumeName,\n+              bucketName, keyName);\n+      break;\n+    case FAILURE:\n+      LOG.error(\"Key commit failed. Volume:{}, Bucket:{}, Key:{}. Exception:{}\",\n+              volumeName, bucketName, keyName, exception);\n+      omMetrics.incNumKeyCommitFails();\n+      break;\n+    default:\n+      LOG.error(\"Unrecognized Result for OMKeyCommitRequest: {}\",\n+              commitKeyRequest);\n+    }\n+\n+    return omClientResponse;\n+  }\n+\n+  /**\n+   * Get parent id for the user given path.\n+   *\n+   * @param bucketId          bucket id\n+   * @param pathComponents    fie path elements\n+   * @param keyName           user given key name\n+   * @param omMetadataManager metadata manager\n+   * @return lastKnownParentID\n+   * @throws IOException DB failure or parent not exists in DirectoryTable\n+   */\n+  private long getParentID(long bucketId, Iterator<Path> pathComponents,\n+                                        String keyName,\n+                                        OMMetadataManager omMetadataManager)\n+          throws IOException {\n+\n+    long lastKnownParentId = bucketId;\n+    boolean parentFound = true; // default bucketID as parent\n+    OmDirectoryInfo omDirectoryInfo = null;\n+    while (pathComponents.hasNext()) {\n+      String nodeName = pathComponents.next().toString();\n+      // Reached last component, which would be a file. Returns its parentID.\n+      if (!pathComponents.hasNext()) {\n+        return lastKnownParentId;\n+      }\n+      String dbNodeName = lastKnownParentId + \"/\" + nodeName;", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDE2OA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910168", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MzU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5MjU2Mg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499592562", "bodyText": "For the cleanuptable annotation of OMKeyCommitResponseV1, we should remove OPEN_KEY_TABLE, KEY_TABLE I think. When OMKeyCommitResponseV1 is used, we should only use OPEN_FILE_TABLE, FILE_TABLE tables.", "author": "linyiqun", "createdAt": "2020-10-05T13:20:17Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMKeyCommitResponseV1.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.*;\n+\n+/**\n+ * Response for CommitKey request layout version V1.\n+ */\n+@CleanupTableInfo(cleanupTables = {OPEN_KEY_TABLE, KEY_TABLE,\n+        OPEN_FILE_TABLE, FILE_TABLE})\n+public class OMKeyCommitResponseV1 extends OMKeyCommitResponse {", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDIzMQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910231", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5MjU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NjU2NQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499596565", "bodyText": "Seems we lack of below logic compared with original OMFileCreateResponse logic.\n    // update volume usedBytes.\n    omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n        omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n        omVolumeArgs);\n    // update bucket usedBytes.\n    omMetadataManager.getBucketTable().putWithBatch(batchOperation,\n        omMetadataManager.getBucketKey(omVolumeArgs.getVolume(),\n            omBucketInfo.getBucketName()), omBucketInfo);", "author": "linyiqun", "createdAt": "2020-10-05T13:26:07Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMFileCreateResponseV1.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.file;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmDirectoryInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Response for create file request layout version1.\n+ */\n+public class OMFileCreateResponseV1 extends OMFileCreateResponse {\n+\n+  private List<OmDirectoryInfo> parentDirInfos;\n+\n+  public OMFileCreateResponseV1(@Nonnull OMResponse omResponse,\n+                                @Nonnull OmKeyInfo omKeyInfo,\n+                                @Nonnull List<OmDirectoryInfo> parentDirInfos,\n+                                long openKeySessionID,\n+                                @Nonnull OmVolumeArgs omVolumeArgs,\n+                                @Nonnull OmBucketInfo omBucketInfo) {\n+    super(omResponse, omKeyInfo, new ArrayList<>(), openKeySessionID,\n+        omVolumeArgs, omBucketInfo);\n+    this.parentDirInfos = parentDirInfos;\n+  }\n+\n+  @Override\n+  protected void addToDBBatch(OMMetadataManager omMetadataMgr,\n+                              BatchOperation batchOp) throws IOException {\n+\n+    /**\n+     * Create parent directory entries during Key Create - do not wait\n+     * for Key Commit request.\n+     * XXX handle stale directory entries.\n+     */\n+    if (parentDirInfos != null) {\n+      for (OmDirectoryInfo parentKeyInfo : parentDirInfos) {\n+        String parentKey = omMetadataMgr.getOzonePathKey(\n+                parentKeyInfo.getParentObjectID(), parentKeyInfo.getName());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"putWithBatch adding parent : key {} info : {}\", parentKey,\n+                  parentKeyInfo);\n+        }\n+        omMetadataMgr.getDirectoryTable().putWithBatch(batchOp, parentKey,\n+                parentKeyInfo);\n+      }\n+    }\n+\n+    String openKey = omMetadataMgr.getOpenFileName(\n+            getOmKeyInfo().getParentObjectID(), getOmKeyInfo().getFileName(),\n+            getOpenKeySessionID());\n+    omMetadataMgr.getOpenKeyTable().putWithBatch(batchOp, openKey,\n+            getOmKeyInfo());", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDMxOA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910318", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NjU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMzAwMw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499603003", "bodyText": "We should add annotation for cleanup table.\n@CleanupTableInfo(cleanupTables = OPEN_FILE_TABLE)", "author": "linyiqun", "createdAt": "2020-10-05T13:35:20Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMFileCreateResponseV1.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.file;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmDirectoryInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Response for create file request layout version1.\n+ */\n+public class OMFileCreateResponseV1 extends OMFileCreateResponse {", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDM3MQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910371", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMzAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwOTQwMw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499609403", "bodyText": "Wrong log instance name used.", "author": "linyiqun", "createdAt": "2020-10-05T13:44:39Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestOzoneFileOps.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.\u2002\u2002See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.\u2002\u2002The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.\u2002\u2002You may obtain a copy of the License at\n+ *\n+ * \u2002\u2002\u2002\u2002 http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.ozone;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.hadoop.hdds.utils.db.TableIterator;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.TestDataUtil;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmDirectoryInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.util.StringUtils;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_FS_ITERATE_BATCH_SIZE;\n+\n+/**\n+ * Test verifies the entries and operations in file table, open file table etc.\n+ */\n+public class TestOzoneFileOps {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(300000);\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(TestOzoneDirectory.class);", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDQyNA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910424", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwOTQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMjAzOQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499612039", "bodyText": "Remove this unused line.", "author": "linyiqun", "createdAt": "2020-10-05T13:48:26Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestOzoneFileOps.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.\u2002\u2002See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.\u2002\u2002The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.\u2002\u2002You may obtain a copy of the License at\n+ *\n+ * \u2002\u2002\u2002\u2002 http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.ozone;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.hadoop.hdds.utils.db.TableIterator;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.TestDataUtil;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmDirectoryInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.util.StringUtils;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_FS_ITERATE_BATCH_SIZE;\n+\n+/**\n+ * Test verifies the entries and operations in file table, open file table etc.\n+ */\n+public class TestOzoneFileOps {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(300000);\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(TestOzoneDirectory.class);\n+\n+  private MiniOzoneCluster cluster;\n+  private FileSystem fs;\n+  private String volumeName;\n+  private String bucketName;\n+\n+  @Before\n+  public void setupOzoneFileSystem()\n+          throws IOException, TimeoutException, InterruptedException {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    conf.setInt(FS_TRASH_INTERVAL_KEY, 1);\n+    conf.set(OMConfigKeys.OZONE_OM_LAYOUT_VERSION, \"V1\");\n+    conf.setBoolean(OMConfigKeys.OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    cluster = MiniOzoneCluster.newBuilder(conf)\n+            .setNumDatanodes(3)\n+            .build();\n+    cluster.waitForClusterToBeReady();\n+    // create a volume and a bucket to be used by OzoneFileSystem\n+    OzoneBucket bucket = TestDataUtil.createVolumeAndBucket(cluster);\n+    volumeName = bucket.getVolumeName();\n+    bucketName = bucket.getName();\n+\n+    String rootPath = String.format(\"%s://%s.%s/\",\n+            OzoneConsts.OZONE_URI_SCHEME, bucket.getName(),\n+            bucket.getVolumeName());\n+\n+    // Set the fs.defaultFS and start the filesystem\n+    conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+    // Set the number of keys to be processed during batch operate.\n+    conf.setInt(OZONE_FS_ITERATE_BATCH_SIZE, 5);\n+    fs = FileSystem.get(conf);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    IOUtils.closeQuietly(fs);\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test(timeout = 300_000)\n+  public void testCreateFile() throws Exception {\n+    // Op 1. create dir -> /d1/d2/d3/d4/\n+    Path parent = new Path(\"/d1/d2/\");\n+    Path file = new Path(parent, \"file1\");\n+    fs.create(file);\n+    ArrayList<String> openFileKeys = new ArrayList<>();\n+\n+    OMMetadataManager omMgr = cluster.getOzoneManager().getMetadataManager();\n+    OmBucketInfo omBucketInfo = omMgr.getBucketTable().get(\n+            omMgr.getBucketKey(volumeName, bucketName));\n+    Assert.assertNotNull(\"Failed to find bucketInfo\", omBucketInfo);\n+\n+    ArrayList<String> dirKeys = new ArrayList<>();\n+    long d1ObjectID = verifyDirKey(omBucketInfo.getObjectID(), \"d1\", \"/d1\",\n+            dirKeys, omMgr);\n+    long d2ObjectID = verifyDirKey(d1ObjectID, \"d2\", \"/d1/d2\", dirKeys,\n+            omMgr);\n+    openFileKeys.add(d2ObjectID + OzoneConsts.OM_KEY_PREFIX + file.getName());\n+\n+    // verify entries in directory table\n+    TableIterator<String, ? extends\n+            Table.KeyValue<String, OmDirectoryInfo>> iterator =\n+            omMgr.getDirectoryTable().iterator();\n+    iterator.seekToFirst();\n+    int count = dirKeys.size();\n+    Assert.assertEquals(\"Unexpected directory table entries!\", 2, count);\n+    while (iterator.hasNext()) {\n+      count--;\n+      Table.KeyValue<String, OmDirectoryInfo> value = iterator.next();\n+      verifyKeyFormat(value.getKey(), dirKeys);\n+    }\n+    Assert.assertEquals(\"Unexpected directory table entries!\", 0, count);\n+\n+    // verify entries in directory table\n+    TableIterator<String, ? extends\n+            Table.KeyValue<String, OmKeyInfo>> keysItr =\n+            omMgr.getOpenKeyTable().iterator();\n+    keysItr.seekToFirst();\n+\n+    // Assert.assertEquals(\"Unexpected directory table entries!\", 2, count);", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDUyMA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910520", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMjAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMjQzOQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499612439", "bodyText": "The comment should be 'verify entries in open key table'", "author": "linyiqun", "createdAt": "2020-10-05T13:48:59Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestOzoneFileOps.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.\u2002\u2002See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.\u2002\u2002The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.\u2002\u2002You may obtain a copy of the License at\n+ *\n+ * \u2002\u2002\u2002\u2002 http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.ozone;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.hadoop.hdds.utils.db.TableIterator;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.TestDataUtil;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmDirectoryInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.util.StringUtils;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_FS_ITERATE_BATCH_SIZE;\n+\n+/**\n+ * Test verifies the entries and operations in file table, open file table etc.\n+ */\n+public class TestOzoneFileOps {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(300000);\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(TestOzoneDirectory.class);\n+\n+  private MiniOzoneCluster cluster;\n+  private FileSystem fs;\n+  private String volumeName;\n+  private String bucketName;\n+\n+  @Before\n+  public void setupOzoneFileSystem()\n+          throws IOException, TimeoutException, InterruptedException {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    conf.setInt(FS_TRASH_INTERVAL_KEY, 1);\n+    conf.set(OMConfigKeys.OZONE_OM_LAYOUT_VERSION, \"V1\");\n+    conf.setBoolean(OMConfigKeys.OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    cluster = MiniOzoneCluster.newBuilder(conf)\n+            .setNumDatanodes(3)\n+            .build();\n+    cluster.waitForClusterToBeReady();\n+    // create a volume and a bucket to be used by OzoneFileSystem\n+    OzoneBucket bucket = TestDataUtil.createVolumeAndBucket(cluster);\n+    volumeName = bucket.getVolumeName();\n+    bucketName = bucket.getName();\n+\n+    String rootPath = String.format(\"%s://%s.%s/\",\n+            OzoneConsts.OZONE_URI_SCHEME, bucket.getName(),\n+            bucket.getVolumeName());\n+\n+    // Set the fs.defaultFS and start the filesystem\n+    conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+    // Set the number of keys to be processed during batch operate.\n+    conf.setInt(OZONE_FS_ITERATE_BATCH_SIZE, 5);\n+    fs = FileSystem.get(conf);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    IOUtils.closeQuietly(fs);\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test(timeout = 300_000)\n+  public void testCreateFile() throws Exception {\n+    // Op 1. create dir -> /d1/d2/d3/d4/\n+    Path parent = new Path(\"/d1/d2/\");\n+    Path file = new Path(parent, \"file1\");\n+    fs.create(file);\n+    ArrayList<String> openFileKeys = new ArrayList<>();\n+\n+    OMMetadataManager omMgr = cluster.getOzoneManager().getMetadataManager();\n+    OmBucketInfo omBucketInfo = omMgr.getBucketTable().get(\n+            omMgr.getBucketKey(volumeName, bucketName));\n+    Assert.assertNotNull(\"Failed to find bucketInfo\", omBucketInfo);\n+\n+    ArrayList<String> dirKeys = new ArrayList<>();\n+    long d1ObjectID = verifyDirKey(omBucketInfo.getObjectID(), \"d1\", \"/d1\",\n+            dirKeys, omMgr);\n+    long d2ObjectID = verifyDirKey(d1ObjectID, \"d2\", \"/d1/d2\", dirKeys,\n+            omMgr);\n+    openFileKeys.add(d2ObjectID + OzoneConsts.OM_KEY_PREFIX + file.getName());\n+\n+    // verify entries in directory table\n+    TableIterator<String, ? extends\n+            Table.KeyValue<String, OmDirectoryInfo>> iterator =\n+            omMgr.getDirectoryTable().iterator();\n+    iterator.seekToFirst();\n+    int count = dirKeys.size();\n+    Assert.assertEquals(\"Unexpected directory table entries!\", 2, count);\n+    while (iterator.hasNext()) {\n+      count--;\n+      Table.KeyValue<String, OmDirectoryInfo> value = iterator.next();\n+      verifyKeyFormat(value.getKey(), dirKeys);\n+    }\n+    Assert.assertEquals(\"Unexpected directory table entries!\", 0, count);\n+\n+    // verify entries in directory table", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDU2NQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910565", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMjQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNTMyOQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499625329", "bodyText": "Suppose here logic is same with TestOMFileCreateRequest.\nCan we fully reused the existed unit tests in TestOMFileCreateRequest?\nMaybe that we can extend TestOMFileCreateRequest and override ozone configuration we set for V1 version .", "author": "linyiqun", "createdAt": "2020-10-05T14:07:14Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/file/TestOMFileCreateRequestV1.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.file;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.om.helpers.OmDirectoryInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfo;\n+import org.apache.hadoop.ozone.om.request.TestOMRequestUtils;\n+import org.apache.hadoop.ozone.om.request.key.TestOMKeyRequestV1;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.CreateFileRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.KeyArgs;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.util.StringUtils;\n+import org.apache.hadoop.util.Time;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Status.VOLUME_NOT_FOUND;\n+import static org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Status.BUCKET_NOT_FOUND;\n+import static org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Status.FILE_ALREADY_EXISTS;\n+import static org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Status.NOT_A_FILE;\n+import static org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Status.DIRECTORY_NOT_FOUND;\n+\n+/**\n+ * Tests OMFileCreateRequest V1 layout version.\n+ */\n+public class TestOMFileCreateRequestV1 extends TestOMKeyRequestV1 {", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDkxMA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910910", "bodyText": "Great idea. Done in the latest commit.", "author": "rakeshadr", "createdAt": "2020-10-07T10:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNTMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyODAxMQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499628011", "bodyText": "Similar comment above. Can we try to reuse the common logics here?", "author": "linyiqun", "createdAt": "2020-10-05T14:11:01Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCommitRequestV1.java", "diffHunk": "@@ -0,0 +1,379 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfo;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.TestOMRequestUtils;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.CommitKeyRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.KeyArgs;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.KeyLocation;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.util.Time;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class tests OMKeyCommitRequestV1 class.\n+ */\n+public class TestOMKeyCommitRequestV1 extends TestOMKeyRequestV1 {", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDk3NQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500910975", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyODAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NjI3Mg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499976272", "bodyText": "Can we also add a getPath method like that in OmDirectoryInfo? This can be conveniently used in other places.", "author": "linyiqun", "createdAt": "2020-10-06T02:48:07Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -126,6 +144,23 @@ public void setDataSize(long size) {\n     this.dataSize = size;\n   }\n \n+  public void setFileName(String fileName) {\n+    this.fileName = fileName;\n+  }\n+\n+  public String getFileName() {\n+    return fileName;\n+  }\n+\n+  public void setParentObjectID(long parentObjectID) {\n+    this.parentObjectID = parentObjectID;\n+  }\n+\n+  public long getParentObjectID() {\n+    return parentObjectID;\n+  }\n+", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMTI5Nw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500911297", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NjI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3OTc1MQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r499979751", "bodyText": "We should additionally increase dir created metric since we created missing parent dirs.", "author": "linyiqun", "createdAt": "2020-10-06T03:02:30Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequestV1.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.file;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.apache.hadoop.ozone.security.acl.OzoneObj;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+import static org.apache.hadoop.ozone.om.request.file.OMFileRequest.OMDirectoryResult.*;\n+\n+/**\n+ * Handles create file request layout version1.\n+ */\n+public class OMFileCreateRequestV1 extends OMFileCreateRequest {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(OMFileCreateRequestV1.class);\n+  public OMFileCreateRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CreateFileRequest createFileRequest = getOmRequest().getCreateFileRequest();\n+    KeyArgs keyArgs = createFileRequest.getKeyArgs();\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(keyArgs);\n+\n+    String volumeName = keyArgs.getVolumeName();\n+    String bucketName = keyArgs.getBucketName();\n+    String keyName = keyArgs.getKeyName();\n+\n+    // if isRecursive is true, file would be created even if parent\n+    // directories does not exist.\n+    boolean isRecursive = createFileRequest.getIsRecursive();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"File create for : \" + volumeName + \"/\" + bucketName + \"/\"\n+          + keyName + \":\" + isRecursive);\n+    }\n+\n+    // if isOverWrite is true, file would be over written.\n+    boolean isOverWrite = createFileRequest.getIsOverwrite();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumCreateFile();\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    boolean acquiredLock = false;\n+\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    final List<OmKeyLocationInfo> locations = new ArrayList<>();\n+    List<OmDirectoryInfo> missingParentInfos;\n+\n+    OMClientResponse omClientResponse = null;\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+        getOmRequest());\n+    IOException exception = null;\n+    Result result = null;\n+    try {\n+      keyArgs = resolveBucketLink(ozoneManager, keyArgs, auditMap);\n+      volumeName = keyArgs.getVolumeName();\n+      bucketName = keyArgs.getBucketName();\n+\n+      if (keyName.length() == 0) {\n+        // Check if this is the root of the filesystem.\n+        throw new OMException(\"Can not write to directory: \" + keyName,\n+                OMException.ResultCodes.NOT_A_FILE);\n+      }\n+\n+      // check Acl\n+      checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n+          IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n+\n+      // acquire lock\n+      acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+          volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      OmKeyInfo dbFileInfo = null;\n+\n+      OMFileRequest.OMPathInfoV1 pathInfoV1 =\n+              OMFileRequest.verifyDirectoryKeysInPath(omMetadataManager,\n+                      volumeName, bucketName, keyName, Paths.get(keyName));\n+\n+      if (pathInfoV1.getDirectoryResult()\n+              == OMFileRequest.OMDirectoryResult.FILE_EXISTS) {\n+        String dbFileKey = omMetadataManager.getOzonePathKey(\n+                pathInfoV1.getLastKnownParentId(),\n+                pathInfoV1.getLeafNodeName());\n+        dbFileInfo = omMetadataManager.getKeyTable().get(dbFileKey);\n+        if (dbFileInfo != null) {\n+          ozoneManager.getKeyManager().refresh(dbFileInfo);\n+        }\n+      }\n+\n+      // check if the file or directory already existed in OM\n+      checkPathAlreadyExists(keyName, isOverWrite, pathInfoV1);\n+\n+      if (!isRecursive) {\n+        checkAllParentsExist(ozoneManager, keyArgs, pathInfoV1);\n+      }\n+\n+      // add all missing parents to dir table\n+      missingParentInfos = OMDirectoryCreateRequestV1.getAllParentDirInfo(\n+              ozoneManager, keyArgs, pathInfoV1, trxnLogIndex);\n+\n+      // do open key\n+      OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n+          omMetadataManager.getBucketKey(volumeName, bucketName));\n+\n+      OmKeyInfo omFileInfo = prepareFileInfo(omMetadataManager, keyArgs,\n+              dbFileInfo, keyArgs.getDataSize(), locations,\n+              getFileEncryptionInfo(keyArgs), ozoneManager.getPrefixManager(),\n+              bucketInfo, pathInfoV1, trxnLogIndex,\n+              ozoneManager.isRatisEnabled());\n+\n+      long openVersion = omFileInfo.getLatestVersionLocations().getVersion();\n+      long clientID = createFileRequest.getClientID();\n+      String dbOpenFileName = omMetadataManager.getOpenFileName(\n+              pathInfoV1.getLastKnownParentId(), pathInfoV1.getLeafNodeName(),\n+              clientID);\n+\n+      // Append new blocks\n+      List<OmKeyLocationInfo> newLocationList = keyArgs.getKeyLocationsList()\n+          .stream().map(OmKeyLocationInfo::getFromProtobuf)\n+          .collect(Collectors.toList());\n+      omFileInfo.appendNewBlocks(newLocationList, false);\n+\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      omBucketInfo = getBucketInfo(omMetadataManager, volumeName, bucketName);\n+      // check volume quota\n+      long preAllocatedSpace = newLocationList.size()\n+          * ozoneManager.getScmBlockSize()\n+          * omFileInfo.getFactor().getNumber();\n+      checkVolumeQuotaInBytes(omVolumeArgs, preAllocatedSpace);\n+\n+      // Add to cache entry can be done outside of lock for this openKey.\n+      // Even if bucket gets deleted, when commitKey we shall identify if\n+      // bucket gets deleted.\n+      omMetadataManager.getOpenKeyTable().addCacheEntry(\n+          new CacheKey<>(dbOpenFileName),\n+          new CacheValue<>(Optional.of(omFileInfo), trxnLogIndex));\n+\n+      // Add cache entries for the prefix directories.\n+      // Skip adding for the file key itself, until Key Commit.\n+      OMFileRequest.addDirectoryTableCacheEntries(omMetadataManager,\n+              Optional.absent(), Optional.of(missingParentInfos),\n+              trxnLogIndex);\n+\n+      // update usedBytes atomically.\n+      omVolumeArgs.getUsedBytes().add(preAllocatedSpace);\n+      omBucketInfo.getUsedBytes().add(preAllocatedSpace);\n+\n+      // Prepare response\n+      omResponse.setCreateFileResponse(CreateFileResponse.newBuilder()\n+          .setKeyInfo(omFileInfo.getProtobuf())\n+          .setID(clientID)\n+          .setOpenVersion(openVersion).build())\n+          .setCmdType(Type.CreateFile);\n+      omClientResponse = new OMFileCreateResponseV1(omResponse.build(),\n+          omFileInfo, missingParentInfos, clientID, omVolumeArgs, omBucketInfo);\n+\n+      result = Result.SUCCESS;", "originalCommit": "c3ed678081f61b757c6f4181c16ad3fd45b3bb44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMTQ3OQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500911479", "bodyText": "Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3OTc1MQ=="}], "type": "inlineReview"}, {"oid": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "url": "https://github.com/apache/ozone/commit/75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "message": "Fixed code review comments", "committedDate": "2020-10-06T17:18:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MjI4Mg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500642282", "bodyText": "Why do we need to refresh here?\nBecause if override key, we add new blocks as the latest version, and use the latest blocks only.", "author": "bharatviswa504", "createdAt": "2020-10-06T22:57:49Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequestV1.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.file;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.apache.hadoop.ozone.security.acl.OzoneObj;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+import static org.apache.hadoop.ozone.om.request.file.OMFileRequest.OMDirectoryResult.*;\n+\n+/**\n+ * Handles create file request layout version1.\n+ */\n+public class OMFileCreateRequestV1 extends OMFileCreateRequest {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(OMFileCreateRequestV1.class);\n+  public OMFileCreateRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CreateFileRequest createFileRequest = getOmRequest().getCreateFileRequest();\n+    KeyArgs keyArgs = createFileRequest.getKeyArgs();\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(keyArgs);\n+\n+    String volumeName = keyArgs.getVolumeName();\n+    String bucketName = keyArgs.getBucketName();\n+    String keyName = keyArgs.getKeyName();\n+\n+    // if isRecursive is true, file would be created even if parent\n+    // directories does not exist.\n+    boolean isRecursive = createFileRequest.getIsRecursive();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"File create for : \" + volumeName + \"/\" + bucketName + \"/\"\n+          + keyName + \":\" + isRecursive);\n+    }\n+\n+    // if isOverWrite is true, file would be over written.\n+    boolean isOverWrite = createFileRequest.getIsOverwrite();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumCreateFile();\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    boolean acquiredLock = false;\n+\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    final List<OmKeyLocationInfo> locations = new ArrayList<>();\n+    List<OmDirectoryInfo> missingParentInfos;\n+    int numKeysCreated = 0;\n+\n+    OMClientResponse omClientResponse = null;\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+        getOmRequest());\n+    IOException exception = null;\n+    Result result = null;\n+    try {\n+      keyArgs = resolveBucketLink(ozoneManager, keyArgs, auditMap);\n+      volumeName = keyArgs.getVolumeName();\n+      bucketName = keyArgs.getBucketName();\n+\n+      if (keyName.length() == 0) {\n+        // Check if this is the root of the filesystem.\n+        throw new OMException(\"Can not write to directory: \" + keyName,\n+                OMException.ResultCodes.NOT_A_FILE);\n+      }\n+\n+      // check Acl\n+      checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n+          IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n+\n+      // acquire lock\n+      acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+          volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      OmKeyInfo dbFileInfo = null;\n+\n+      OMFileRequest.OMPathInfoV1 pathInfoV1 =\n+              OMFileRequest.verifyDirectoryKeysInPath(omMetadataManager,\n+                      volumeName, bucketName, keyName, Paths.get(keyName));\n+\n+      if (pathInfoV1.getDirectoryResult()\n+              == OMFileRequest.OMDirectoryResult.FILE_EXISTS) {\n+        String dbFileKey = omMetadataManager.getOzonePathKey(\n+                pathInfoV1.getLastKnownParentId(),\n+                pathInfoV1.getLeafNodeName());\n+        dbFileInfo = omMetadataManager.getKeyTable().get(dbFileKey);\n+        if (dbFileInfo != null) {\n+          ozoneManager.getKeyManager().refresh(dbFileInfo);", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMzcxNQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500913715", "bodyText": "It makes sense to skip this refresh. FYI, I've followed existing code path. Reference:", "author": "rakeshadr", "createdAt": "2020-10-07T10:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MjI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MzIwMg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501043202", "bodyText": "Yes, checked that but we are writing new requests, if we can make it better that would be nice.", "author": "bharatviswa504", "createdAt": "2020-10-07T14:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MjI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDg0OA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501204848", "bodyText": "OK, got it. I will remove it in the next commit.", "author": "rakeshadr", "createdAt": "2020-10-07T17:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MjI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MjU4Mw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500642583", "bodyText": "Can we skip quota implementation, as it is incorrect. (I am fine with leaving if it needs rework, we can open another Jira to fix the issue for new classes also)\nFor more info refer this\nhttps://issues.apache.org/jira/browse/HDDS-4308", "author": "bharatviswa504", "createdAt": "2020-10-06T22:58:44Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequestV1.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.file;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.apache.hadoop.ozone.security.acl.OzoneObj;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+import static org.apache.hadoop.ozone.om.request.file.OMFileRequest.OMDirectoryResult.*;\n+\n+/**\n+ * Handles create file request layout version1.\n+ */\n+public class OMFileCreateRequestV1 extends OMFileCreateRequest {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(OMFileCreateRequestV1.class);\n+  public OMFileCreateRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CreateFileRequest createFileRequest = getOmRequest().getCreateFileRequest();\n+    KeyArgs keyArgs = createFileRequest.getKeyArgs();\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(keyArgs);\n+\n+    String volumeName = keyArgs.getVolumeName();\n+    String bucketName = keyArgs.getBucketName();\n+    String keyName = keyArgs.getKeyName();\n+\n+    // if isRecursive is true, file would be created even if parent\n+    // directories does not exist.\n+    boolean isRecursive = createFileRequest.getIsRecursive();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"File create for : \" + volumeName + \"/\" + bucketName + \"/\"\n+          + keyName + \":\" + isRecursive);\n+    }\n+\n+    // if isOverWrite is true, file would be over written.\n+    boolean isOverWrite = createFileRequest.getIsOverwrite();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumCreateFile();\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    boolean acquiredLock = false;\n+\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    final List<OmKeyLocationInfo> locations = new ArrayList<>();\n+    List<OmDirectoryInfo> missingParentInfos;\n+    int numKeysCreated = 0;\n+\n+    OMClientResponse omClientResponse = null;\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+        getOmRequest());\n+    IOException exception = null;\n+    Result result = null;\n+    try {\n+      keyArgs = resolveBucketLink(ozoneManager, keyArgs, auditMap);\n+      volumeName = keyArgs.getVolumeName();\n+      bucketName = keyArgs.getBucketName();\n+\n+      if (keyName.length() == 0) {\n+        // Check if this is the root of the filesystem.\n+        throw new OMException(\"Can not write to directory: \" + keyName,\n+                OMException.ResultCodes.NOT_A_FILE);\n+      }\n+\n+      // check Acl\n+      checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n+          IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n+\n+      // acquire lock\n+      acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+          volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      OmKeyInfo dbFileInfo = null;\n+\n+      OMFileRequest.OMPathInfoV1 pathInfoV1 =\n+              OMFileRequest.verifyDirectoryKeysInPath(omMetadataManager,\n+                      volumeName, bucketName, keyName, Paths.get(keyName));\n+\n+      if (pathInfoV1.getDirectoryResult()\n+              == OMFileRequest.OMDirectoryResult.FILE_EXISTS) {\n+        String dbFileKey = omMetadataManager.getOzonePathKey(\n+                pathInfoV1.getLastKnownParentId(),\n+                pathInfoV1.getLeafNodeName());\n+        dbFileInfo = omMetadataManager.getKeyTable().get(dbFileKey);\n+        if (dbFileInfo != null) {\n+          ozoneManager.getKeyManager().refresh(dbFileInfo);\n+        }\n+      }\n+\n+      // check if the file or directory already existed in OM\n+      checkPathAlreadyExists(keyName, isOverWrite, pathInfoV1);\n+\n+      if (!isRecursive) {\n+        checkAllParentsExist(ozoneManager, keyArgs, pathInfoV1);\n+      }\n+\n+      // add all missing parents to dir table\n+      missingParentInfos =\n+              OMDirectoryCreateRequestV1.getAllMissingParentDirInfo(\n+                      ozoneManager, keyArgs, pathInfoV1, trxnLogIndex);\n+\n+      // total number of keys created.\n+      numKeysCreated = missingParentInfos.size();\n+\n+      // do open key\n+      OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n+          omMetadataManager.getBucketKey(volumeName, bucketName));\n+\n+      OmKeyInfo omFileInfo = prepareFileInfo(omMetadataManager, keyArgs,\n+              dbFileInfo, keyArgs.getDataSize(), locations,\n+              getFileEncryptionInfo(keyArgs), ozoneManager.getPrefixManager(),\n+              bucketInfo, pathInfoV1, trxnLogIndex,\n+              ozoneManager.isRatisEnabled());\n+\n+      long openVersion = omFileInfo.getLatestVersionLocations().getVersion();\n+      long clientID = createFileRequest.getClientID();\n+      String dbOpenFileName = omMetadataManager.getOpenFileName(\n+              pathInfoV1.getLastKnownParentId(), pathInfoV1.getLeafNodeName(),\n+              clientID);\n+\n+      // Append new blocks\n+      List<OmKeyLocationInfo> newLocationList = keyArgs.getKeyLocationsList()\n+          .stream().map(OmKeyLocationInfo::getFromProtobuf)\n+          .collect(Collectors.toList());\n+      omFileInfo.appendNewBlocks(newLocationList, false);\n+\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNzkwMA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501207900", "bodyText": "I've raised HDDS-4321 jira to track the changes and update to the branch.", "author": "rakeshadr", "createdAt": "2020-10-07T18:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MjU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5Njk0Nw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502696947", "bodyText": "Thanks.", "author": "bharatviswa504", "createdAt": "2020-10-09T22:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MjU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500649202", "bodyText": "For file create requests even enableFSPaths is disabled still should create entries in openfileTable only right?", "author": "bharatviswa504", "createdAt": "2020-10-06T23:20:15Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "diffHunk": "@@ -227,6 +247,9 @@ protected OmMetadataManagerImpl() {\n \n   @Override\n   public Table<String, OmKeyInfo> getOpenKeyTable() {\n+    if (enableFSPaths && OzoneManagerRatisUtils.isOmLayoutVersionV1()) {", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxNDc1MA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500914750", "bodyText": "The idea here is, will use the tables only if enableFSPaths is true and with V1 version.\nThis new tables will contain only the metadata in new format keys <id/fileName> for better debugging/maintenance.  All the keys with old format will go to existing tables itself.", "author": "rakeshadr", "createdAt": "2020-10-07T10:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM1MDU5NA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502350594", "bodyText": "Good catch @bharatviswa504. Please feel free to add if anything else needed. Thanks again!\nBased on our offline discussions, below is the expected behavior for diff requests:\nV1 feature version : Following ops shouldn't depend on enableFSPaths flag\n\nFileCreate  -----> Look into dirTable for parents. Then create entries in openFileTable and on close add it to fileTable.\nDirCreate  -----> Create entries in dirTable\nFile/DirDelete -> Look into fileTable and dirTable for the keys.\nFile/DirRename-> Look into fileTable and dirTable for the keys.\n\nV1 feature version & enableFSPaths=true\n\nKeyCreate ---> Look into dirTable for parents. Create entries in openFileTable and on close add it to fileTable.\nKeyDelete ---> Look into fileTable and dirTable for the keys.\nKeyRename -> supported only in ozone shell. It should look into fileTable and dirTable for the keys.\n\nV1 feature version & enableFSPaths=false\n\nKeyCreate ---> Create entries in openFileTable and on close add it to fileTable, but the parentId is the bucketId and the key \"dir1/dir2/dir3/file1\" will be stored into fileTable like \"512/dir1/dir2/dir3/file1\". Assume bucketId is 512.\nKeyDelete ---> Look into fileTable for the keys.\nKeyRename -> supported only in ozone shell. It should look into fileTable for the keys.\n\nIn this PR, will handle only FileCreate request and not provided checks for enableFSPaths in KeyCommit. Will do this changes in latest commit.\nLater, I will raise subsequent jiras for handling KeyCreate/KeyCommit and other ops.", "author": "rakeshadr", "createdAt": "2020-10-09T10:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5MzA5NQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502393095", "bodyText": "@rakeshadr , the V1 feature is a new key format and is not compatible with old format. enableFSPaths flag\nis not behaves as a switch of this feature here? If not, what is enableFSPaths used for? Maybe I am missing something, : ).", "author": "linyiqun", "createdAt": "2020-10-09T12:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyNTE0OA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502525148", "bodyText": "Thanks @linyiqun for the comment. It seems the above comment was not clear. I had done few corrections to the above comment.\nYes, V1 represents new key format.\nAdding background about  ozone.om.enable.filesystem.paths -> this is the config to enable/disable enableFSPaths feature. Basically here the idea is to provide s3/fs inter-op. Please refer jira https://issues.apache.org/jira/browse/HDDS-4097 for more details. If the flag is enabled, then the user given key will be normalized and stored in FS semantics format by OM and it will be 100% FS semantics. If it is false, the key won't be normalized and it will be 100% S3 semantics.\nFor example, user created a key \"/dir1/dir2/dir3/file1\" from S3 API. Now,  if the flag is enabled the key will be normalized and create intermediate directories for the file1.\nMore Details:-\nThe cases I mentioned above - V1 feature version & enableFSPaths=true is 100% FS semantics and V1 feature version & enableFSPaths=false is 100% S3 semantics\nAssume the key is /dir1/dir2/dir3/file-1. Again assume V1 feature version enabled and bucketId is 512.\nNow,\nenableFSPaths=true, which is 100% FS semantics.\nIt stores as \"512/dir1:1025\", \"1025/dir2:1026\" and \"1026/dir3:1027\" into dirTable and \"1027:file1\" into openFiletable and on close move it to fileTable\nenableFSPaths=false, which is 100% S3 semantics.\nIt stores as \"512/dir1/dir2/dir3/file1:1025\" into openFileTable and on close move it to fileTable. Here still maintains the parentID/Key format, but the key will be the fullpath and not a normalized path. Here the key can be anything like /dir1////dir2////dir3///file1.\nPlease let me know if any more details needed.", "author": "rakeshadr", "createdAt": "2020-10-09T15:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0NjA4OA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502546088", "bodyText": "Just to add one more point here\nthis is FS API, so the usage of the flag is of no effect, as this is FS API (File create) not an Object Store API.\nBut KeyCommitRequest is common for both FS/Object Store we need special handling over there.", "author": "bharatviswa504", "createdAt": "2020-10-09T16:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NTk5Mw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502565993", "bodyText": "Sure, I will add special handling in KeyCommit code while implementing KeyCreate request. Hope that make sense to you.", "author": "rakeshadr", "createdAt": "2020-10-09T17:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5NzE1OA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502697158", "bodyText": "Fine with me.", "author": "bharatviswa504", "createdAt": "2020-10-09T22:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NTA5MQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502755091", "bodyText": "Get it, Thanks @rakeshadr and @bharatviswa504 for the very clear explanation!", "author": "linyiqun", "createdAt": "2020-10-10T06:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500652488", "bodyText": "Looks like in new version we don't need to store full keyName in OmKeyInfo, but we still store it, as OMKeyInfoCodec has still set Keyname and convert to proto.\n\n public KeyInfo getProtobuf(boolean ignorePipeline) {\n    long latestVersion = keyLocationVersions.size() == 0 ? -1 :\n        keyLocationVersions.get(keyLocationVersions.size() - 1).getVersion();\n\n    List<KeyLocationList> keyLocations = new ArrayList<>();\n    for (OmKeyLocationInfoGroup locationInfoGroup : keyLocationVersions) {\n      keyLocations.add(locationInfoGroup.getProtobuf(ignorePipeline));\n    }\n\n    KeyInfo.Builder kb = KeyInfo.newBuilder()\n        .setVolumeName(volumeName)\n        .setBucketName(bucketName)\n        .setKeyName(keyName)", "author": "bharatviswa504", "createdAt": "2020-10-06T23:31:32Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequestV1.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.file;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponse;\n+import org.apache.hadoop.ozone.om.response.file.OMFileCreateResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.apache.hadoop.ozone.security.acl.OzoneObj;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+import static org.apache.hadoop.ozone.om.request.file.OMFileRequest.OMDirectoryResult.*;\n+\n+/**\n+ * Handles create file request layout version1.\n+ */\n+public class OMFileCreateRequestV1 extends OMFileCreateRequest {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(OMFileCreateRequestV1.class);\n+  public OMFileCreateRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CreateFileRequest createFileRequest = getOmRequest().getCreateFileRequest();\n+    KeyArgs keyArgs = createFileRequest.getKeyArgs();\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(keyArgs);\n+\n+    String volumeName = keyArgs.getVolumeName();\n+    String bucketName = keyArgs.getBucketName();\n+    String keyName = keyArgs.getKeyName();\n+\n+    // if isRecursive is true, file would be created even if parent\n+    // directories does not exist.\n+    boolean isRecursive = createFileRequest.getIsRecursive();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"File create for : \" + volumeName + \"/\" + bucketName + \"/\"\n+          + keyName + \":\" + isRecursive);\n+    }\n+\n+    // if isOverWrite is true, file would be over written.\n+    boolean isOverWrite = createFileRequest.getIsOverwrite();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumCreateFile();\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    boolean acquiredLock = false;\n+\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    final List<OmKeyLocationInfo> locations = new ArrayList<>();\n+    List<OmDirectoryInfo> missingParentInfos;\n+    int numKeysCreated = 0;\n+\n+    OMClientResponse omClientResponse = null;\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+        getOmRequest());\n+    IOException exception = null;\n+    Result result = null;\n+    try {\n+      keyArgs = resolveBucketLink(ozoneManager, keyArgs, auditMap);\n+      volumeName = keyArgs.getVolumeName();\n+      bucketName = keyArgs.getBucketName();\n+\n+      if (keyName.length() == 0) {\n+        // Check if this is the root of the filesystem.\n+        throw new OMException(\"Can not write to directory: \" + keyName,\n+                OMException.ResultCodes.NOT_A_FILE);\n+      }\n+\n+      // check Acl\n+      checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n+          IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n+\n+      // acquire lock\n+      acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+          volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      OmKeyInfo dbFileInfo = null;\n+\n+      OMFileRequest.OMPathInfoV1 pathInfoV1 =\n+              OMFileRequest.verifyDirectoryKeysInPath(omMetadataManager,\n+                      volumeName, bucketName, keyName, Paths.get(keyName));\n+\n+      if (pathInfoV1.getDirectoryResult()\n+              == OMFileRequest.OMDirectoryResult.FILE_EXISTS) {\n+        String dbFileKey = omMetadataManager.getOzonePathKey(\n+                pathInfoV1.getLastKnownParentId(),\n+                pathInfoV1.getLeafNodeName());\n+        dbFileInfo = omMetadataManager.getKeyTable().get(dbFileKey);\n+        if (dbFileInfo != null) {\n+          ozoneManager.getKeyManager().refresh(dbFileInfo);\n+        }\n+      }\n+\n+      // check if the file or directory already existed in OM\n+      checkPathAlreadyExists(keyName, isOverWrite, pathInfoV1);\n+\n+      if (!isRecursive) {\n+        checkAllParentsExist(ozoneManager, keyArgs, pathInfoV1);\n+      }\n+\n+      // add all missing parents to dir table\n+      missingParentInfos =\n+              OMDirectoryCreateRequestV1.getAllMissingParentDirInfo(\n+                      ozoneManager, keyArgs, pathInfoV1, trxnLogIndex);\n+\n+      // total number of keys created.\n+      numKeysCreated = missingParentInfos.size();\n+\n+      // do open key\n+      OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n+          omMetadataManager.getBucketKey(volumeName, bucketName));\n+\n+      OmKeyInfo omFileInfo = prepareFileInfo(omMetadataManager, keyArgs,\n+              dbFileInfo, keyArgs.getDataSize(), locations,\n+              getFileEncryptionInfo(keyArgs), ozoneManager.getPrefixManager(),\n+              bucketInfo, pathInfoV1, trxnLogIndex,\n+              ozoneManager.isRatisEnabled());\n+\n+      long openVersion = omFileInfo.getLatestVersionLocations().getVersion();\n+      long clientID = createFileRequest.getClientID();\n+      String dbOpenFileName = omMetadataManager.getOpenFileName(\n+              pathInfoV1.getLastKnownParentId(), pathInfoV1.getLeafNodeName(),\n+              clientID);\n+\n+      // Append new blocks\n+      List<OmKeyLocationInfo> newLocationList = keyArgs.getKeyLocationsList()\n+          .stream().map(OmKeyLocationInfo::getFromProtobuf)\n+          .collect(Collectors.toList());\n+      omFileInfo.appendNewBlocks(newLocationList, false);\n+\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      omBucketInfo = getBucketInfo(omMetadataManager, volumeName, bucketName);\n+      // check volume quota\n+      long preAllocatedSpace = newLocationList.size()\n+          * ozoneManager.getScmBlockSize()\n+          * omFileInfo.getFactor().getNumber();\n+      checkVolumeQuotaInBytes(omVolumeArgs, preAllocatedSpace);\n+\n+      // Add to cache entry can be done outside of lock for this openKey.\n+      // Even if bucket gets deleted, when commitKey we shall identify if\n+      // bucket gets deleted.\n+      omMetadataManager.getOpenKeyTable().addCacheEntry(\n+          new CacheKey<>(dbOpenFileName),\n+          new CacheValue<>(Optional.of(omFileInfo), trxnLogIndex));\n+\n+      // Add cache entries for the prefix directories.\n+      // Skip adding for the file key itself, until Key Commit.\n+      OMFileRequest.addDirectoryTableCacheEntries(omMetadataManager,\n+              Optional.absent(), Optional.of(missingParentInfos),\n+              trxnLogIndex);\n+\n+      // update usedBytes atomically.\n+      omVolumeArgs.getUsedBytes().add(preAllocatedSpace);\n+      omBucketInfo.getUsedBytes().add(preAllocatedSpace);\n+\n+      // Prepare response\n+      omResponse.setCreateFileResponse(CreateFileResponse.newBuilder()\n+          .setKeyInfo(omFileInfo.getProtobuf())\n+          .setID(clientID)\n+          .setOpenVersion(openVersion).build())\n+          .setCmdType(Type.CreateFile);\n+      omClientResponse = new OMFileCreateResponseV1(omResponse.build(),\n+          omFileInfo, missingParentInfos, clientID, omVolumeArgs, omBucketInfo);", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MzAzMQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500653031", "bodyText": "Why can't we use keyName as leaf node name for new requests, so that we don't need to store full pathName for OmKeyInfo for new request processing.", "author": "bharatviswa504", "createdAt": "2020-10-06T23:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxOTMzNA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500919334", "bodyText": "OMKeyInfo is exposed to Ozone client, so I have kept 'keyName' as it is. Anyway fileName can be extracted from the  keyName so that I thought of reducing the load on DB.\nHope this make sense to you.", "author": "rakeshadr", "createdAt": "2020-10-07T10:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MTc2Mw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501041763", "bodyText": "But now OmKeyInfo has entire keyPath which is not really needed to be persisted to DB in this new V1 Request.", "author": "bharatviswa504", "createdAt": "2020-10-07T14:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxNTY1OA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501215658", "bodyText": "I completely agree with you that, V1 need only the fileName in DB.\nOn a second thought, do we need to maintain two different OMKeyInfo#keyName semantics in DB. For 100% S3 , 'keyName' stores full path. For 100% FS, 'keyName' stores only the fileName in the value part.\nmessage keyInfo {\n       ....\n       required string keyName = 3;", "author": "rakeshadr", "createdAt": "2020-10-07T18:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNDg3OA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501414878", "bodyText": "Yes. Because if we store the entire keyPath in DB when rename, then if we change the only parentObjectID and then leave keyName then they will diverge.\nAnd also this is FS API not called from S3.", "author": "bharatviswa504", "createdAt": "2020-10-08T02:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjU4NQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501436585", "bodyText": "Fully agreed with you, thanks for pointing out the rename case.\nHow about store fileName in the keyName field in DB. Then, while populating OmKeyInfo logically will prepare fullPath in keyName and will store fileName separately.", "author": "rakeshadr", "createdAt": "2020-10-08T04:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0MzM5Nw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501443397", "bodyText": "Yes, you read my mind :)\nIt works perfectly.", "author": "bharatviswa504", "createdAt": "2020-10-08T04:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NTg5MA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501645890", "bodyText": "Done the changes in new commit", "author": "rakeshadr", "createdAt": "2020-10-08T11:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5OTgxMQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502699811", "bodyText": "Added to the cache correctly(With KeyName as leaf node name), but in response class, we passed omKeyInfo this should be also the same thing which we have added to the cache right?", "author": "bharatviswa504", "createdAt": "2020-10-09T22:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNDUzMw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502734533", "bodyText": "Inside OMFileCreateResponseV1#addToDBBatch() method has the actual call to the DB, it is doing the changes in utility OMFileRequest function. I have done this way to ensure that, only when updating the TableCache and persisting to the Table it makes the DB representation as keyName=leafNodeName. All the other places(any functional checks inside OM, logging inside OM, client response etc..) will have the keyName=fullPath and fileName=leafNodeName.\nOMFileRequest.addToOpenFileTable(omMetadataMgr, batchOp, getOmKeyInfo(),\n         getOpenKeySessionID());\n\nAlso, for better code maintenance, I will be adding these conversion in OMFileRequest utility functions. Hope this is fine for you?", "author": "rakeshadr", "createdAt": "2020-10-10T02:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5Njg4Mg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r503496882", "bodyText": "With the current approach in PR looks like we do unnecessarily one more time copy object. What we add to the cache, if we pass the same instance to Response class then same can be persisted (Even for this, we can follow current model, same instance is in cache and Response classes, and get always return copy object). With this way cache and Response classes uses the same instance, and anyway in logging in createRequest we use Keyname, I see no issue over there.", "author": "bharatviswa504", "createdAt": "2020-10-12T19:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyODUwNg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r503628506", "bodyText": "Sure, updated patch by addressing this point. Thanks!", "author": "rakeshadr", "createdAt": "2020-10-13T02:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDM4MQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500674381", "bodyText": "checkDirectoryAlreadyExists check is missing which is added by HDDS-4155", "author": "bharatviswa504", "createdAt": "2020-10-07T00:46:22Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequestV1.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.AuditLogger;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.KEY_NOT_FOUND;\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles CommitKey request.\n+ */\n+public class OMKeyCommitRequestV1 extends OMKeyCommitRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMKeyCommitRequestV1.class);\n+\n+  public OMKeyCommitRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CommitKeyRequest commitKeyRequest = getOmRequest().getCommitKeyRequest();\n+\n+    KeyArgs commitKeyArgs = commitKeyRequest.getKeyArgs();\n+\n+    String volumeName = commitKeyArgs.getVolumeName();\n+    String bucketName = commitKeyArgs.getBucketName();\n+    String keyName = commitKeyArgs.getKeyName();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumKeyCommits();\n+\n+    AuditLogger auditLogger = ozoneManager.getAuditLogger();\n+\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(commitKeyArgs);\n+\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+            getOmRequest());\n+\n+    IOException exception = null;\n+    OmKeyInfo omKeyInfo = null;\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    OMClientResponse omClientResponse = null;\n+    boolean bucketLockAcquired = false;\n+    Result result;\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    try {\n+      commitKeyArgs = resolveBucketLink(ozoneManager, commitKeyArgs, auditMap);\n+      volumeName = commitKeyArgs.getVolumeName();\n+      bucketName = commitKeyArgs.getBucketName();\n+\n+      // check Acl\n+      checkKeyAclsInOpenKeyTable(ozoneManager, volumeName, bucketName,\n+              keyName, IAccessAuthorizer.ACLType.WRITE,\n+              commitKeyRequest.getClientID());\n+\n+\n+      String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+      Iterator<Path> pathComponents = Paths.get(keyName).iterator();\n+      String dbOpenFileKey = null;\n+\n+      List<OmKeyLocationInfo> locationInfoList = new ArrayList<>();\n+      for (KeyLocation keyLocation : commitKeyArgs.getKeyLocationsList()) {\n+        locationInfoList.add(OmKeyLocationInfo.getFromProtobuf(keyLocation));\n+      }\n+\n+      bucketLockAcquired =\n+              omMetadataManager.getLock().acquireLock(BUCKET_LOCK,\n+                      volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      String fileName = OzoneFSUtils.getFileName(keyName);\n+      omBucketInfo = omMetadataManager.getBucketTable().get(bucketKey);\n+      long bucketId = omBucketInfo.getObjectID();\n+      long parentID = getParentID(bucketId, pathComponents, keyName,\n+              omMetadataManager);\n+      String dbFileKey = omMetadataManager.getOzonePathKey(parentID, fileName);\n+      dbOpenFileKey = omMetadataManager.getOpenFileName(parentID, fileName,\n+              commitKeyRequest.getClientID());\n+", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxOTYwMA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500919600", "bodyText": "Thanks for pointing out this. Good point. Done in latest commit.", "author": "rakeshadr", "createdAt": "2020-10-07T10:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk3NjI1Nw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500976257", "bodyText": "checkDirectoryAlreadyExists check is specific for enabling OzoneFileSystem, do we really need to apply this here?", "author": "linyiqun", "createdAt": "2020-10-07T12:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MDY3OQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501040679", "bodyText": "Yes, KeycommitRequest is common for KeyCreate/FileCreate", "author": "bharatviswa504", "createdAt": "2020-10-07T14:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDkzOQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500674939", "bodyText": "acquireLock -> acquireWriteLock. The old method is deprecated.", "author": "bharatviswa504", "createdAt": "2020-10-07T00:48:41Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequestV1.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.AuditLogger;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.KEY_NOT_FOUND;\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles CommitKey request.\n+ */\n+public class OMKeyCommitRequestV1 extends OMKeyCommitRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMKeyCommitRequestV1.class);\n+\n+  public OMKeyCommitRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CommitKeyRequest commitKeyRequest = getOmRequest().getCommitKeyRequest();\n+\n+    KeyArgs commitKeyArgs = commitKeyRequest.getKeyArgs();\n+\n+    String volumeName = commitKeyArgs.getVolumeName();\n+    String bucketName = commitKeyArgs.getBucketName();\n+    String keyName = commitKeyArgs.getKeyName();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumKeyCommits();\n+\n+    AuditLogger auditLogger = ozoneManager.getAuditLogger();\n+\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(commitKeyArgs);\n+\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+            getOmRequest());\n+\n+    IOException exception = null;\n+    OmKeyInfo omKeyInfo = null;\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    OMClientResponse omClientResponse = null;\n+    boolean bucketLockAcquired = false;\n+    Result result;\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    try {\n+      commitKeyArgs = resolveBucketLink(ozoneManager, commitKeyArgs, auditMap);\n+      volumeName = commitKeyArgs.getVolumeName();\n+      bucketName = commitKeyArgs.getBucketName();\n+\n+      // check Acl\n+      checkKeyAclsInOpenKeyTable(ozoneManager, volumeName, bucketName,\n+              keyName, IAccessAuthorizer.ACLType.WRITE,\n+              commitKeyRequest.getClientID());\n+\n+\n+      String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+      Iterator<Path> pathComponents = Paths.get(keyName).iterator();\n+      String dbOpenFileKey = null;\n+\n+      List<OmKeyLocationInfo> locationInfoList = new ArrayList<>();\n+      for (KeyLocation keyLocation : commitKeyArgs.getKeyLocationsList()) {\n+        locationInfoList.add(OmKeyLocationInfo.getFromProtobuf(keyLocation));\n+      }\n+\n+      bucketLockAcquired =\n+              omMetadataManager.getLock().acquireLock(BUCKET_LOCK,", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxOTc0MQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500919741", "bodyText": "Good one. Done in latest commit", "author": "rakeshadr", "createdAt": "2020-10-07T10:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NjIwMA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500676200", "bodyText": "Can we move this to a common method, and call the new method from both old version and this new version.", "author": "bharatviswa504", "createdAt": "2020-10-07T00:53:39Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequestV1.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.AuditLogger;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.KEY_NOT_FOUND;\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles CommitKey request.\n+ */\n+public class OMKeyCommitRequestV1 extends OMKeyCommitRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMKeyCommitRequestV1.class);\n+\n+  public OMKeyCommitRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CommitKeyRequest commitKeyRequest = getOmRequest().getCommitKeyRequest();\n+\n+    KeyArgs commitKeyArgs = commitKeyRequest.getKeyArgs();\n+\n+    String volumeName = commitKeyArgs.getVolumeName();\n+    String bucketName = commitKeyArgs.getBucketName();\n+    String keyName = commitKeyArgs.getKeyName();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumKeyCommits();\n+\n+    AuditLogger auditLogger = ozoneManager.getAuditLogger();\n+\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(commitKeyArgs);\n+\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+            getOmRequest());\n+\n+    IOException exception = null;\n+    OmKeyInfo omKeyInfo = null;\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    OMClientResponse omClientResponse = null;\n+    boolean bucketLockAcquired = false;\n+    Result result;\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    try {\n+      commitKeyArgs = resolveBucketLink(ozoneManager, commitKeyArgs, auditMap);\n+      volumeName = commitKeyArgs.getVolumeName();\n+      bucketName = commitKeyArgs.getBucketName();\n+\n+      // check Acl\n+      checkKeyAclsInOpenKeyTable(ozoneManager, volumeName, bucketName,\n+              keyName, IAccessAuthorizer.ACLType.WRITE,\n+              commitKeyRequest.getClientID());\n+\n+\n+      String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+      Iterator<Path> pathComponents = Paths.get(keyName).iterator();\n+      String dbOpenFileKey = null;\n+\n+      List<OmKeyLocationInfo> locationInfoList = new ArrayList<>();\n+      for (KeyLocation keyLocation : commitKeyArgs.getKeyLocationsList()) {\n+        locationInfoList.add(OmKeyLocationInfo.getFromProtobuf(keyLocation));\n+      }\n+\n+      bucketLockAcquired =\n+              omMetadataManager.getLock().acquireLock(BUCKET_LOCK,\n+                      volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      String fileName = OzoneFSUtils.getFileName(keyName);\n+      omBucketInfo = omMetadataManager.getBucketTable().get(bucketKey);\n+      long bucketId = omBucketInfo.getObjectID();\n+      long parentID = getParentID(bucketId, pathComponents, keyName,\n+              omMetadataManager);\n+      String dbFileKey = omMetadataManager.getOzonePathKey(parentID, fileName);\n+      dbOpenFileKey = omMetadataManager.getOpenFileName(parentID, fileName,\n+              commitKeyRequest.getClientID());\n+\n+      omKeyInfo = omMetadataManager.getOpenKeyTable().get(dbOpenFileKey);\n+      if (omKeyInfo == null) {\n+        throw new OMException(\"Failed to commit key, as \" + dbOpenFileKey +\n+                \"entry is not found in the OpenKey table\", KEY_NOT_FOUND);\n+      }\n+      omKeyInfo.setDataSize(commitKeyArgs.getDataSize());\n+\n+      omKeyInfo.setModificationTime(commitKeyArgs.getModificationTime());\n+\n+      // Update the block length for each block\n+      omKeyInfo.updateLocationInfoList(locationInfoList);\n+\n+      // Set the UpdateID to current transactionLogIndex\n+      omKeyInfo.setUpdateID(trxnLogIndex, ozoneManager.isRatisEnabled());\n+\n+      // Add to cache of open key table and key table.\n+      omMetadataManager.getOpenKeyTable().addCacheEntry(\n+              new CacheKey<>(dbFileKey),\n+              new CacheValue<>(Optional.absent(), trxnLogIndex));\n+\n+      omMetadataManager.getKeyTable().addCacheEntry(\n+              new CacheKey<>(dbFileKey),\n+              new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n+\n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      int factor = omKeyInfo.getFactor().getNumber();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      // update usedBytes atomically.\n+      // Block was pre-requested and UsedBytes updated when createKey and\n+      // AllocatedBlock. The space occupied by the Key shall be based on\n+      // the actual Key size, and the total Block size applied before should\n+      // be subtracted.\n+      long correctedSpace = omKeyInfo.getDataSize() * factor -\n+              locationInfoList.size() * scmBlockSize * factor;\n+      omVolumeArgs.getUsedBytes().add(correctedSpace);\n+      omBucketInfo.getUsedBytes().add(correctedSpace);\n+\n+      omClientResponse = new OMKeyCommitResponse(omResponse.build(),\n+              omKeyInfo, dbFileKey, dbOpenFileKey, omVolumeArgs, omBucketInfo);\n+\n+      result = Result.SUCCESS;\n+    } catch (IOException ex) {\n+      result = Result.FAILURE;\n+      exception = ex;\n+      omClientResponse = new OMKeyCommitResponseV1(createErrorOMResponse(\n+              omResponse, exception));\n+    } finally {\n+      addResponseToDoubleBuffer(trxnLogIndex, omClientResponse,\n+              omDoubleBufferHelper);\n+\n+      if(bucketLockAcquired) {\n+        omMetadataManager.getLock().releaseLock(BUCKET_LOCK, volumeName,\n+                bucketName);\n+      }\n+    }\n+\n+    auditLog(auditLogger, buildAuditMessage(OMAction.COMMIT_KEY, auditMap,\n+            exception, getOmRequest().getUserInfo()));\n+\n+    switch (result) {", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxOTc5OQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500919799", "bodyText": "Sure.", "author": "rakeshadr", "createdAt": "2020-10-07T10:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NjIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NjU4Mw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500676583", "bodyText": "OMKeyCommitResponse -> OMKeyCommitResponseV1", "author": "bharatviswa504", "createdAt": "2020-10-07T00:55:06Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequestV1.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.AuditLogger;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.*;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.KEY_NOT_FOUND;\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles CommitKey request.\n+ */\n+public class OMKeyCommitRequestV1 extends OMKeyCommitRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMKeyCommitRequestV1.class);\n+\n+  public OMKeyCommitRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CommitKeyRequest commitKeyRequest = getOmRequest().getCommitKeyRequest();\n+\n+    KeyArgs commitKeyArgs = commitKeyRequest.getKeyArgs();\n+\n+    String volumeName = commitKeyArgs.getVolumeName();\n+    String bucketName = commitKeyArgs.getBucketName();\n+    String keyName = commitKeyArgs.getKeyName();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumKeyCommits();\n+\n+    AuditLogger auditLogger = ozoneManager.getAuditLogger();\n+\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(commitKeyArgs);\n+\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+            getOmRequest());\n+\n+    IOException exception = null;\n+    OmKeyInfo omKeyInfo = null;\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    OMClientResponse omClientResponse = null;\n+    boolean bucketLockAcquired = false;\n+    Result result;\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    try {\n+      commitKeyArgs = resolveBucketLink(ozoneManager, commitKeyArgs, auditMap);\n+      volumeName = commitKeyArgs.getVolumeName();\n+      bucketName = commitKeyArgs.getBucketName();\n+\n+      // check Acl\n+      checkKeyAclsInOpenKeyTable(ozoneManager, volumeName, bucketName,\n+              keyName, IAccessAuthorizer.ACLType.WRITE,\n+              commitKeyRequest.getClientID());\n+\n+\n+      String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+      Iterator<Path> pathComponents = Paths.get(keyName).iterator();\n+      String dbOpenFileKey = null;\n+\n+      List<OmKeyLocationInfo> locationInfoList = new ArrayList<>();\n+      for (KeyLocation keyLocation : commitKeyArgs.getKeyLocationsList()) {\n+        locationInfoList.add(OmKeyLocationInfo.getFromProtobuf(keyLocation));\n+      }\n+\n+      bucketLockAcquired =\n+              omMetadataManager.getLock().acquireLock(BUCKET_LOCK,\n+                      volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      String fileName = OzoneFSUtils.getFileName(keyName);\n+      omBucketInfo = omMetadataManager.getBucketTable().get(bucketKey);\n+      long bucketId = omBucketInfo.getObjectID();\n+      long parentID = getParentID(bucketId, pathComponents, keyName,\n+              omMetadataManager);\n+      String dbFileKey = omMetadataManager.getOzonePathKey(parentID, fileName);\n+      dbOpenFileKey = omMetadataManager.getOpenFileName(parentID, fileName,\n+              commitKeyRequest.getClientID());\n+\n+      omKeyInfo = omMetadataManager.getOpenKeyTable().get(dbOpenFileKey);\n+      if (omKeyInfo == null) {\n+        throw new OMException(\"Failed to commit key, as \" + dbOpenFileKey +\n+                \"entry is not found in the OpenKey table\", KEY_NOT_FOUND);\n+      }\n+      omKeyInfo.setDataSize(commitKeyArgs.getDataSize());\n+\n+      omKeyInfo.setModificationTime(commitKeyArgs.getModificationTime());\n+\n+      // Update the block length for each block\n+      omKeyInfo.updateLocationInfoList(locationInfoList);\n+\n+      // Set the UpdateID to current transactionLogIndex\n+      omKeyInfo.setUpdateID(trxnLogIndex, ozoneManager.isRatisEnabled());\n+\n+      // Add to cache of open key table and key table.\n+      omMetadataManager.getOpenKeyTable().addCacheEntry(\n+              new CacheKey<>(dbFileKey),\n+              new CacheValue<>(Optional.absent(), trxnLogIndex));\n+\n+      omMetadataManager.getKeyTable().addCacheEntry(\n+              new CacheKey<>(dbFileKey),\n+              new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n+\n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      int factor = omKeyInfo.getFactor().getNumber();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      // update usedBytes atomically.\n+      // Block was pre-requested and UsedBytes updated when createKey and\n+      // AllocatedBlock. The space occupied by the Key shall be based on\n+      // the actual Key size, and the total Block size applied before should\n+      // be subtracted.\n+      long correctedSpace = omKeyInfo.getDataSize() * factor -\n+              locationInfoList.size() * scmBlockSize * factor;\n+      omVolumeArgs.getUsedBytes().add(correctedSpace);\n+      omBucketInfo.getUsedBytes().add(correctedSpace);\n+\n+      omClientResponse = new OMKeyCommitResponse(omResponse.build(),", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxOTkxNQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500919915", "bodyText": "Good catch. Done in latest commit", "author": "rakeshadr", "createdAt": "2020-10-07T10:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NjU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NzMxMQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500677311", "bodyText": "These 3 are set, not used anywhere.", "author": "bharatviswa504", "createdAt": "2020-10-07T00:58:02Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMKeyCommitResponseV1.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.*;\n+\n+/**\n+ * Response for CommitKey request layout version V1.\n+ */\n+@CleanupTableInfo(cleanupTables = {OPEN_FILE_TABLE, FILE_TABLE})\n+public class OMKeyCommitResponseV1 extends OMKeyCommitResponse {\n+\n+  private OmKeyInfo omKeyInfo;\n+  private String ozoneKeyName;\n+  private String openKeyName;\n+\n+  public OMKeyCommitResponseV1(@Nonnull OMResponse omResponse,\n+                               @Nonnull OmKeyInfo omKeyInfo,\n+                               String ozoneKeyName, String openKeyName,\n+                               @Nonnull OmVolumeArgs omVolumeArgs,\n+                               @Nonnull OmBucketInfo omBucketInfo) {\n+    super(omResponse, omKeyInfo, ozoneKeyName, openKeyName, omVolumeArgs,\n+            omBucketInfo);\n+    this.omKeyInfo = omKeyInfo;", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyMDAwNg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500920006", "bodyText": "Sure. Done!", "author": "rakeshadr", "createdAt": "2020-10-07T10:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NzMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc4MjcwOA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500782708", "bodyText": "openFileTable should have additional id after parentId/fileName and fileTable key should be parentId/fileName.", "author": "linyiqun", "createdAt": "2020-10-07T07:06:03Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "diffHunk": "@@ -129,6 +132,10 @@\n    * |----------------------------------------------------------------------|\n    * |  directoryTable    | parentId/directoryName -> DirectoryInfo         |\n    * |----------------------------------------------------------------------|\n+   * |  fileTable         | parentId/fileName/id -> FileInfo                |\n+   * |----------------------------------------------------------------------|\n+   * |  openFileTable     | parentId/fileName -> FileInfo                   |", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyMDExMg==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500920112", "bodyText": "Thanks again. Done in latest commit", "author": "rakeshadr", "createdAt": "2020-10-07T10:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc4MjcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5NTY3Ng==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500795676", "bodyText": "assertNotNull check can be removed as we already check this in verifyPathInOpenKeyTable.", "author": "linyiqun", "createdAt": "2020-10-07T07:31:06Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/file/TestOMFileCreateRequest.java", "diffHunk": "@@ -146,7 +141,7 @@ public void testValidateAndUpdateCache() throws Exception {\n \n     // Check open table whether key is added or not.\n \n-    omKeyInfo = omMetadataManager.getOpenKeyTable().get(openKey);\n+    omKeyInfo = verifyPathInOpenKeyTable(keyName, id, true);\n     Assert.assertNotNull(omKeyInfo);", "originalCommit": "75b3ba9bfb1846cc215a10385ff4d0d4c0c6166f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyMDE4OQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500920189", "bodyText": "Done in latest commit", "author": "rakeshadr", "createdAt": "2020-10-07T10:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5NTY3Ng=="}], "type": "inlineReview"}, {"oid": "64975e250744839bf58a002a53abef4f9034b671", "url": "https://github.com/apache/ozone/commit/64975e250744839bf58a002a53abef4f9034b671", "message": "Fixed code review comments", "committedDate": "2020-10-07T11:04:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MDk5Mw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r500980993", "bodyText": "Seems we forget to reuse processResult in OMKeyCommitRequest.", "author": "linyiqun", "createdAt": "2020-10-07T12:44:08Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequest.java", "diffHunk": "@@ -253,4 +253,33 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n     return omClientResponse;\n   }\n+\n+  protected void processResult(CommitKeyRequest commitKeyRequest,", "originalCommit": "64975e250744839bf58a002a53abef4f9034b671", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMjEzNw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501022137", "bodyText": "oops, thanks a lot @linyiqun  for the detailed code reviews. I have fixed this in my latest commit.", "author": "rakeshadr", "createdAt": "2020-10-07T13:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MDk5Mw=="}], "type": "inlineReview"}, {"oid": "3d7d11ae794666030920067ea7e7f32eb0ba968d", "url": "https://github.com/apache/ozone/commit/3d7d11ae794666030920067ea7e7f32eb0ba968d", "message": "Fixed checkstyle warnings and review comments", "committedDate": "2020-10-07T13:39:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNTAzMQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501415031", "bodyText": "protected boolean checkDirectoryAlreadyExists(String volumeName,\n      String bucketName, String keyName, OMMetadataManager omMetadataManager)\n      throws IOException {\n    if (omMetadataManager.getKeyTable().isExist(\n        omMetadataManager.getOzoneDirKey(volumeName, bucketName,\n            keyName))) {\n      return true;\n    }\n    return false;\n  }\nOriginal logic(OMKeyRequest#checkDirectoryAlreadyExists) is to check if there is the same name dir key already stored in key table.\nFor here,  the logic is that we should use new file key to check if that existed in file table, not check the dir table.\ncheckDirectoryAlreadyExists will always throw OMException error once OzoneFileSystem enabled under above logic, because parents dir is already created during File create request.", "author": "linyiqun", "createdAt": "2020-10-08T02:39:20Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequestV1.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.audit.AuditLogger;\n+import org.apache.hadoop.ozone.audit.OMAction;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmDirectoryInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfo;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMKeyCommitResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.CommitKeyRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.KeyArgs;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.KeyLocation;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.KEY_NOT_FOUND;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.NOT_A_FILE;\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles CommitKey request layout version V1.\n+ */\n+public class OMKeyCommitRequestV1 extends OMKeyCommitRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMKeyCommitRequestV1.class);\n+\n+  public OMKeyCommitRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"methodlength\")\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    CommitKeyRequest commitKeyRequest = getOmRequest().getCommitKeyRequest();\n+\n+    KeyArgs commitKeyArgs = commitKeyRequest.getKeyArgs();\n+\n+    String volumeName = commitKeyArgs.getVolumeName();\n+    String bucketName = commitKeyArgs.getBucketName();\n+    String keyName = commitKeyArgs.getKeyName();\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumKeyCommits();\n+\n+    AuditLogger auditLogger = ozoneManager.getAuditLogger();\n+\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(commitKeyArgs);\n+\n+    OMResponse.Builder omResponse = OmResponseUtil.getOMResponseBuilder(\n+            getOmRequest());\n+\n+    IOException exception = null;\n+    OmKeyInfo omKeyInfo = null;\n+    OmVolumeArgs omVolumeArgs = null;\n+    OmBucketInfo omBucketInfo = null;\n+    OMClientResponse omClientResponse = null;\n+    boolean bucketLockAcquired = false;\n+    Result result;\n+\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    try {\n+      commitKeyArgs = resolveBucketLink(ozoneManager, commitKeyArgs, auditMap);\n+      volumeName = commitKeyArgs.getVolumeName();\n+      bucketName = commitKeyArgs.getBucketName();\n+\n+      // check Acl\n+      checkKeyAclsInOpenKeyTable(ozoneManager, volumeName, bucketName,\n+              keyName, IAccessAuthorizer.ACLType.WRITE,\n+              commitKeyRequest.getClientID());\n+\n+\n+      String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+      Iterator<Path> pathComponents = Paths.get(keyName).iterator();\n+      String dbOpenFileKey = null;\n+\n+      List<OmKeyLocationInfo> locationInfoList = new ArrayList<>();\n+      for (KeyLocation keyLocation : commitKeyArgs.getKeyLocationsList()) {\n+        locationInfoList.add(OmKeyLocationInfo.getFromProtobuf(keyLocation));\n+      }\n+\n+      bucketLockAcquired =\n+              omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+                      volumeName, bucketName);\n+\n+      validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n+\n+      String fileName = OzoneFSUtils.getFileName(keyName);\n+      omBucketInfo = omMetadataManager.getBucketTable().get(bucketKey);\n+      long bucketId = omBucketInfo.getObjectID();\n+      long parentID = getParentID(bucketId, pathComponents, keyName,\n+              omMetadataManager, ozoneManager);\n+      String dbFileKey = omMetadataManager.getOzonePathKey(parentID, fileName);\n+      dbOpenFileKey = omMetadataManager.getOpenFileName(parentID, fileName,\n+              commitKeyRequest.getClientID());\n+\n+      omKeyInfo = omMetadataManager.getOpenKeyTable().get(dbOpenFileKey);\n+      if (omKeyInfo == null) {\n+        throw new OMException(\"Failed to commit key, as \" + dbOpenFileKey +\n+                \"entry is not found in the OpenKey table\", KEY_NOT_FOUND);\n+      }\n+      omKeyInfo.setDataSize(commitKeyArgs.getDataSize());\n+\n+      omKeyInfo.setModificationTime(commitKeyArgs.getModificationTime());\n+\n+      // Update the block length for each block\n+      omKeyInfo.updateLocationInfoList(locationInfoList);\n+\n+      // Set the UpdateID to current transactionLogIndex\n+      omKeyInfo.setUpdateID(trxnLogIndex, ozoneManager.isRatisEnabled());\n+\n+      // Add to cache of open key table and key table.\n+      omMetadataManager.getOpenKeyTable().addCacheEntry(\n+              new CacheKey<>(dbFileKey),\n+              new CacheValue<>(Optional.absent(), trxnLogIndex));\n+\n+      omMetadataManager.getKeyTable().addCacheEntry(\n+              new CacheKey<>(dbFileKey),\n+              new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n+\n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      int factor = omKeyInfo.getFactor().getNumber();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      // update usedBytes atomically.\n+      // Block was pre-requested and UsedBytes updated when createKey and\n+      // AllocatedBlock. The space occupied by the Key shall be based on\n+      // the actual Key size, and the total Block size applied before should\n+      // be subtracted.\n+      long correctedSpace = omKeyInfo.getDataSize() * factor -\n+              locationInfoList.size() * scmBlockSize * factor;\n+      omVolumeArgs.getUsedBytes().add(correctedSpace);\n+      omBucketInfo.getUsedBytes().add(correctedSpace);\n+\n+      omClientResponse = new OMKeyCommitResponseV1(omResponse.build(),\n+              omKeyInfo, dbFileKey, dbOpenFileKey, omVolumeArgs, omBucketInfo);\n+\n+      result = Result.SUCCESS;\n+    } catch (IOException ex) {\n+      result = Result.FAILURE;\n+      exception = ex;\n+      omClientResponse = new OMKeyCommitResponseV1(createErrorOMResponse(\n+              omResponse, exception));\n+    } finally {\n+      addResponseToDoubleBuffer(trxnLogIndex, omClientResponse,\n+              omDoubleBufferHelper);\n+\n+      if(bucketLockAcquired) {\n+        omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n+                bucketName);\n+      }\n+    }\n+\n+    auditLog(auditLogger, buildAuditMessage(OMAction.COMMIT_KEY, auditMap,\n+            exception, getOmRequest().getUserInfo()));\n+\n+    processResult(commitKeyRequest, volumeName, bucketName, keyName, omMetrics,\n+            exception, omKeyInfo, result);\n+\n+    return omClientResponse;\n+  }\n+\n+\n+  /**\n+   * Check for directory exists with same name, if it exists throw error.\n+   *\n+   * @param keyName                  key name\n+   * @param ozoneManager             Ozone Manager\n+   * @param reachedLastPathComponent true if the path component is a fileName\n+   * @throws IOException if directory exists with same name\n+   */\n+  private void checkDirectoryAlreadyExists(String keyName,\n+                                           OzoneManager ozoneManager,\n+                                           boolean reachedLastPathComponent)\n+          throws IOException {\n+    // Reached last component, which would be a file. Returns its parentID.\n+    if (reachedLastPathComponent && ozoneManager.getEnableFileSystemPaths()) {\n+      throw new OMException(\"Can not create file: \" + keyName +\n+              \" as there is already directory in the given path\", NOT_A_FILE);\n+    }\n+  }\n+\n+  /**\n+   * Get parent id for the user given path.\n+   *\n+   * @param bucketId          bucket id\n+   * @param pathComponents    fie path elements\n+   * @param keyName           user given key name\n+   * @param omMetadataManager metadata manager\n+   * @return lastKnownParentID\n+   * @throws IOException DB failure or parent not exists in DirectoryTable\n+   */\n+  private long getParentID(long bucketId, Iterator<Path> pathComponents,\n+                           String keyName, OMMetadataManager omMetadataManager,\n+                           OzoneManager ozoneManager)\n+          throws IOException {\n+\n+    long lastKnownParentId = bucketId;\n+\n+    // If no sub-dirs then bucketID is the root/parent.\n+    if(!pathComponents.hasNext()){\n+      return bucketId;\n+    }\n+\n+    OmDirectoryInfo omDirectoryInfo;\n+    while (pathComponents.hasNext()) {\n+      String nodeName = pathComponents.next().toString();\n+      boolean reachedLastPathComponent = !pathComponents.hasNext();\n+      String dbNodeName =\n+              omMetadataManager.getOzonePathKey(lastKnownParentId, nodeName);\n+\n+      omDirectoryInfo = omMetadataManager.\n+              getDirectoryTable().get(dbNodeName);\n+      if (omDirectoryInfo != null) {\n+        checkDirectoryAlreadyExists(keyName, ozoneManager,\n+                reachedLastPathComponent);", "originalCommit": "3d7d11ae794666030920067ea7e7f32eb0ba968d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyMzc0NA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501423744", "bodyText": "Thanks for the comment. I think the logic is fine, but will discuss for better clarity and happy to fix if we finds any gap.\nYes, the existing logic in OMKeyRequest#checkDirectoryAlreadyExists checks the directory existence for the given committing fileName.\nNew logic also does the directory existence check against DirTable for the given committing fileName. FileTable stores only the file information <parentID/fileName> and will not know about the DirInfo.\nFor example,  committing fileName is /dir1/dir2/dir3/file1.\nExisting Logic:\nstep-1) It will add trailing slash - /dir1/dir2/dir3/file1/ as the directory key entries represented by trailing slash.\nstep-2) Then check /dir1/dir2/dir3/file1/ in the KeyTable.\nNew Logic:\nstep-1) Traverse till the leaf node. I have used a flag boolean reachedLastPathComponent = !pathComponents.hasNext(); to mark that the traversal reached till end.\nstep-2) Once it reached the last path element, if it finds an OmDirectoryInfo from DirTable corresponding to the 'file1' then it throws OMException.\n\n    omDirectoryInfo = omMetadataManager.\n              getDirectoryTable().get(dbNodeName);\n      if (omDirectoryInfo != null) {\n        checkDirectoryAlreadyExists(keyName, ozoneManager,\n                reachedLastPathComponent);\n        lastKnownParentId = omDirectoryInfo.getObjectID();\n      }", "author": "rakeshadr", "createdAt": "2020-10-08T03:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNTAzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNzMwOQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r501717309", "bodyText": "Thanks for the detailed explanation, I missed that fileName can also be passed during directory key entries check.", "author": "linyiqun", "createdAt": "2020-10-08T13:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxNTAzMQ=="}], "type": "inlineReview"}, {"oid": "b0c589b838e210096ec3b7e6cba6206dabdb92ca", "url": "https://github.com/apache/ozone/commit/b0c589b838e210096ec3b7e6cba6206dabdb92ca", "message": "Fixed review comment - store fileName into keyName field in DB", "committedDate": "2020-10-08T11:26:22Z", "type": "commit"}, {"oid": "7e99c056dfb3378b6f3baed010b6effc7e2362b0", "url": "https://github.com/apache/ozone/commit/7e99c056dfb3378b6f3baed010b6effc7e2362b0", "message": "Fixed UT failure - TestOzoneDirector#verifyDirKey", "committedDate": "2020-10-08T13:54:47Z", "type": "commit"}, {"oid": "0d41f95fb47dca706d588bdb304297da10098941", "url": "https://github.com/apache/ozone/commit/0d41f95fb47dca706d588bdb304297da10098941", "message": "Fixed review comment - Removed enableFSPaths flag dependency during Dir,File Create & Commit ops", "committedDate": "2020-10-09T11:07:13Z", "type": "commit"}, {"oid": "a190b3de213d1665129ae2fc0f7c6907b7e9d325", "url": "https://github.com/apache/ozone/commit/a190b3de213d1665129ae2fc0f7c6907b7e9d325", "message": "Fixed TestOmMetadataManager test failure - modified 'omLayoutVersionV1' default value to false", "committedDate": "2020-10-09T12:30:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDM1NQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502690355", "bodyText": "Looks for every key commit now we do 2 times copy once to get from the table and here.\nI understand the reason.\nNothing needs to be done here, just mentioning the difference between the original request and V1.", "author": "bharatviswa504", "createdAt": "2020-10-09T22:14:58Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -453,4 +456,145 @@ public static void addDirectoryTableCacheEntries(\n     }\n   }\n \n+  /**\n+   * Adding Key info to the openFile Table cache.\n+   *\n+   * @param omMetadataManager OM Metadata Manager\n+   * @param dbOpenFileName    open file name key\n+   * @param omFileInfo        key info\n+   * @param fileName          file name\n+   * @param trxnLogIndex      transaction log index\n+   */\n+  public static void addOpenFileTableCacheEntry(\n+          OMMetadataManager omMetadataManager, String dbOpenFileName,\n+          @Nullable OmKeyInfo omFileInfo, String fileName, long trxnLogIndex) {\n+\n+    Optional<OmKeyInfo> keyInfoOptional = Optional.absent();\n+    if (omFileInfo != null) {\n+      // New key format for the openFileTable.\n+      // For example, the user given key path is '/a/b/c/d/e/file1', then in DB\n+      // keyName field stores only the leaf node name, which is 'file1'.\n+      OmKeyInfo dbOmFileInfo = omFileInfo.copyObject();", "originalCommit": "a190b3de213d1665129ae2fc0f7c6907b7e9d325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNDY3Nw==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r502734677", "bodyText": "OK:-)", "author": "rakeshadr", "createdAt": "2020-10-10T02:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDM1NQ=="}], "type": "inlineReview"}, {"oid": "a36513af35216cc32693c1207a4dea6c083a77de", "url": "https://github.com/apache/ozone/commit/a36513af35216cc32693c1207a4dea6c083a77de", "message": "Fixed review comment: pass modified OmKeyInfo with fileName as keyName to Response class", "committedDate": "2020-10-13T02:14:36Z", "type": "commit"}, {"oid": "1f22f1d491381af3e9bc9ffa84a8218b9f06a5fb", "url": "https://github.com/apache/ozone/commit/1f22f1d491381af3e9bc9ffa84a8218b9f06a5fb", "message": "Fixed review comment: Removed additional copyObject of OmKeyInfo", "committedDate": "2020-10-13T13:36:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzEyNA==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r504127124", "bodyText": "Minor: There is no return from this method.\nCan be fixed in further jiras.", "author": "bharatviswa504", "createdAt": "2020-10-13T17:17:33Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -466,27 +465,22 @@ public static void addDirectoryTableCacheEntries(\n    * @param trxnLogIndex      transaction log index\n    * @return dbOmFileInfo, which keeps leaf node name in keyName field", "originalCommit": "1f22f1d491381af3e9bc9ffa84a8218b9f06a5fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzQ1OQ==", "url": "https://github.com/apache/ozone/pull/1473#discussion_r504133459", "bodyText": "Noted. Will take care in next PR.", "author": "rakeshadr", "createdAt": "2020-10-13T17:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzEyNA=="}], "type": "inlineReview"}]}