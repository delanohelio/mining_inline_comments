{"pr_number": 688, "pr_title": "HDDS-2995. Add integration test for Recon's Passive SCM state.", "pr_createdAt": "2020-03-16T14:15:34Z", "pr_url": "https://github.com/apache/ozone/pull/688", "timeline": [{"oid": "d6fc45910854a950d898f6b34c5697763ea857fb", "url": "https://github.com/apache/ozone/commit/d6fc45910854a950d898f6b34c5697763ea857fb", "message": "HDDS-2995. Add integration test for Recon's Passive SCM state.", "committedDate": "2020-03-16T14:13:36Z", "type": "commit"}, {"oid": "5a4a3b0bc1fad57ca260361be877b87177ec0f09", "url": "https://github.com/apache/ozone/commit/5a4a3b0bc1fad57ca260361be877b87177ec0f09", "message": "HDDS-2995. Fix compilation issue.", "committedDate": "2020-03-16T14:46:59Z", "type": "commit"}, {"oid": "9226f3285d5fdcb9c3de79e882fc80c66860bbe6", "url": "https://github.com/apache/ozone/commit/9226f3285d5fdcb9c3de79e882fc80c66860bbe6", "message": "HDDS-2995. Fix checkstyle issue.", "committedDate": "2020-03-16T14:54:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNjM3Mw==", "url": "https://github.com/apache/ozone/pull/688#discussion_r393236373", "bodyText": "Nit: Fix typo", "author": "vivekratnavel", "createdAt": "2020-03-16T18:39:22Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconAsPassiveScm.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.hdds.HddsConfigKeys.HDDS_CONTAINER_REPORT_INTERVAL;\n+import static org.apache.hadoop.hdds.HddsConfigKeys.HDDS_PIPELINE_REPORT_INTERVAL;\n+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor.ONE;\n+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationType.RATIS;\n+import static org.apache.hadoop.ozone.container.ozoneimpl.TestOzoneContainer.runTestOzoneContainerViaDataNode;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.XceiverClientGrpc;\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerInfo;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.node.NodeManager;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineNotFoundException;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.hdds.scm.server.StorageContainerManager;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.test.LambdaTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**\n+ * Recon's passive SCM integration tests.\n+ */\n+public class TestReconAsPassiveScm {\n+\n+  private MiniOzoneCluster cluster = null;\n+  private OzoneConfiguration conf;\n+\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void init() throws Exception {\n+    conf = new OzoneConfiguration();\n+    conf.set(HDDS_CONTAINER_REPORT_INTERVAL, \"5s\");\n+    conf.set(HDDS_PIPELINE_REPORT_INTERVAL, \"5s\");\n+    cluster =  MiniOzoneCluster.newBuilder(conf).setNumDatanodes(3)\n+        .includeRecon(true).build();\n+    cluster.waitForClusterToBeReady();\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test(timeout = 120000)\n+  public void testDatanodeRegistrationAndReports() throws Exception {\n+    ReconStorageContainerManagerFacade reconScm =\n+        (ReconStorageContainerManagerFacade)\n+        cluster.getReconServer().getReconStorageContainerManager();\n+    StorageContainerManager scm = cluster.getStorageContainerManager();\n+    PipelineManager reconPipelineManager = reconScm.getPipelineManager();\n+    PipelineManager scmPipelineManager = scm.getPipelineManager();\n+\n+    LambdaTestUtils.await(60000, 5000,\n+        () -> (reconPipelineManager.getPipelines().size() == 4));\n+\n+    // Verify if Recon has all the pipelines from SCM.\n+    scmPipelineManager.getPipelines().forEach(p -> {\n+      try {\n+        assertNotNull(reconPipelineManager.getPipeline(p.getId()));\n+      } catch (PipelineNotFoundException e) {\n+        Assert.fail();\n+      }\n+    });\n+\n+    // Verify we can never create a pipeline in Recon.\n+    LambdaTestUtils.intercept(UnsupportedOperationException.class,\n+        \"Trying to create pipeline in Recon, which is prohibited!\",\n+        () -> reconPipelineManager.createPipeline(RATIS, ONE));\n+\n+    ContainerManager scmContainerManager = scm.getContainerManager();\n+    assertTrue(scmContainerManager.getContainerIDs().isEmpty());\n+\n+    // Verify if Recon regix  stered all the nodes.", "originalCommit": "9226f3285d5fdcb9c3de79e882fc80c66860bbe6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNzk0Mg==", "url": "https://github.com/apache/ozone/pull/688#discussion_r393237942", "bodyText": "Can we reduce the interval to 2s instead of 5s? This will help reduce overall runtime of the test.", "author": "vivekratnavel", "createdAt": "2020-03-16T18:42:24Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconAsPassiveScm.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.hdds.HddsConfigKeys.HDDS_CONTAINER_REPORT_INTERVAL;\n+import static org.apache.hadoop.hdds.HddsConfigKeys.HDDS_PIPELINE_REPORT_INTERVAL;\n+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor.ONE;\n+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationType.RATIS;\n+import static org.apache.hadoop.ozone.container.ozoneimpl.TestOzoneContainer.runTestOzoneContainerViaDataNode;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.XceiverClientGrpc;\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerInfo;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.node.NodeManager;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineNotFoundException;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.hdds.scm.server.StorageContainerManager;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.test.LambdaTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**\n+ * Recon's passive SCM integration tests.\n+ */\n+public class TestReconAsPassiveScm {\n+\n+  private MiniOzoneCluster cluster = null;\n+  private OzoneConfiguration conf;\n+\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void init() throws Exception {\n+    conf = new OzoneConfiguration();\n+    conf.set(HDDS_CONTAINER_REPORT_INTERVAL, \"5s\");\n+    conf.set(HDDS_PIPELINE_REPORT_INTERVAL, \"5s\");\n+    cluster =  MiniOzoneCluster.newBuilder(conf).setNumDatanodes(3)\n+        .includeRecon(true).build();\n+    cluster.waitForClusterToBeReady();\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test(timeout = 120000)\n+  public void testDatanodeRegistrationAndReports() throws Exception {\n+    ReconStorageContainerManagerFacade reconScm =\n+        (ReconStorageContainerManagerFacade)\n+        cluster.getReconServer().getReconStorageContainerManager();\n+    StorageContainerManager scm = cluster.getStorageContainerManager();\n+    PipelineManager reconPipelineManager = reconScm.getPipelineManager();\n+    PipelineManager scmPipelineManager = scm.getPipelineManager();\n+\n+    LambdaTestUtils.await(60000, 5000,", "originalCommit": "9226f3285d5fdcb9c3de79e882fc80c66860bbe6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0NDU4Mg==", "url": "https://github.com/apache/ozone/pull/688#discussion_r393244582", "bodyText": "Since the pipeline & container report interval is 5s, making the check interval lesser than 5 seconds may not help us.", "author": "avijayanhwx", "createdAt": "2020-03-16T18:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNzk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0MTM2MQ==", "url": "https://github.com/apache/ozone/pull/688#discussion_r393241361", "bodyText": "Can we reduce the interval from 30s to 5s?", "author": "vivekratnavel", "createdAt": "2020-03-16T18:49:00Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconAsPassiveScm.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.hdds.HddsConfigKeys.HDDS_CONTAINER_REPORT_INTERVAL;\n+import static org.apache.hadoop.hdds.HddsConfigKeys.HDDS_PIPELINE_REPORT_INTERVAL;\n+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor.ONE;\n+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationType.RATIS;\n+import static org.apache.hadoop.ozone.container.ozoneimpl.TestOzoneContainer.runTestOzoneContainerViaDataNode;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.XceiverClientGrpc;\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerInfo;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.node.NodeManager;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineNotFoundException;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.hdds.scm.server.StorageContainerManager;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.test.LambdaTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**\n+ * Recon's passive SCM integration tests.\n+ */\n+public class TestReconAsPassiveScm {\n+\n+  private MiniOzoneCluster cluster = null;\n+  private OzoneConfiguration conf;\n+\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void init() throws Exception {\n+    conf = new OzoneConfiguration();\n+    conf.set(HDDS_CONTAINER_REPORT_INTERVAL, \"5s\");\n+    conf.set(HDDS_PIPELINE_REPORT_INTERVAL, \"5s\");\n+    cluster =  MiniOzoneCluster.newBuilder(conf).setNumDatanodes(3)\n+        .includeRecon(true).build();\n+    cluster.waitForClusterToBeReady();\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test(timeout = 120000)\n+  public void testDatanodeRegistrationAndReports() throws Exception {\n+    ReconStorageContainerManagerFacade reconScm =\n+        (ReconStorageContainerManagerFacade)\n+        cluster.getReconServer().getReconStorageContainerManager();\n+    StorageContainerManager scm = cluster.getStorageContainerManager();\n+    PipelineManager reconPipelineManager = reconScm.getPipelineManager();\n+    PipelineManager scmPipelineManager = scm.getPipelineManager();\n+\n+    LambdaTestUtils.await(60000, 5000,\n+        () -> (reconPipelineManager.getPipelines().size() == 4));\n+\n+    // Verify if Recon has all the pipelines from SCM.\n+    scmPipelineManager.getPipelines().forEach(p -> {\n+      try {\n+        assertNotNull(reconPipelineManager.getPipeline(p.getId()));\n+      } catch (PipelineNotFoundException e) {\n+        Assert.fail();\n+      }\n+    });\n+\n+    // Verify we can never create a pipeline in Recon.\n+    LambdaTestUtils.intercept(UnsupportedOperationException.class,\n+        \"Trying to create pipeline in Recon, which is prohibited!\",\n+        () -> reconPipelineManager.createPipeline(RATIS, ONE));\n+\n+    ContainerManager scmContainerManager = scm.getContainerManager();\n+    assertTrue(scmContainerManager.getContainerIDs().isEmpty());\n+\n+    // Verify if Recon regix  stered all the nodes.\n+    NodeManager reconNodeManager = reconScm.getScmNodeManager();\n+    NodeManager scmNodeManager = scm.getScmNodeManager();\n+    assertEquals(scmNodeManager.getAllNodes().size(),\n+        reconNodeManager.getAllNodes().size());\n+\n+    // Create container\n+    ContainerManager reconContainerManager = reconScm.getContainerManager();\n+    ContainerInfo containerInfo =\n+        scmContainerManager.allocateContainer(RATIS, ONE, \"test\");\n+    long containerID = containerInfo.getContainerID();\n+    Pipeline pipeline =\n+        scmPipelineManager.getPipeline(containerInfo.getPipelineID());\n+    XceiverClientGrpc client = new XceiverClientGrpc(pipeline, conf);\n+    runTestOzoneContainerViaDataNode(containerID, client);\n+\n+    // Verify Recon picked up the new container that was created.\n+    assertEquals(scmContainerManager.getContainerIDs(),\n+        reconContainerManager.getContainerIDs());\n+  }\n+\n+  @Test(timeout = 120000)\n+  public void testReconRestart() throws Exception {\n+    final OzoneStorageContainerManager reconScm =\n+            cluster.getReconServer().getReconStorageContainerManager();\n+    StorageContainerManager scm = cluster.getStorageContainerManager();\n+\n+    // Stop Recon\n+    ContainerManager scmContainerManager = scm.getContainerManager();\n+    assertTrue(scmContainerManager.getContainerIDs().isEmpty());\n+    ContainerManager reconContainerManager = reconScm.getContainerManager();\n+    assertTrue(reconContainerManager.getContainerIDs().isEmpty());\n+\n+    LambdaTestUtils.await(60000, 5000,\n+        () -> (reconScm.getScmNodeManager().getAllNodes().size() == 3));\n+\n+    cluster.stopRecon();\n+\n+    // Create container in SCM.\n+    ContainerInfo containerInfo =\n+        scmContainerManager.allocateContainer(RATIS, ONE, \"test\");\n+    long containerID = containerInfo.getContainerID();\n+    PipelineManager scmPipelineManager = scm.getPipelineManager();\n+    Pipeline pipeline =\n+        scmPipelineManager.getPipeline(containerInfo.getPipelineID());\n+    XceiverClientGrpc client = new XceiverClientGrpc(pipeline, conf);\n+    runTestOzoneContainerViaDataNode(containerID, client);\n+    assertFalse(scmContainerManager.getContainerIDs().isEmpty());\n+\n+    // Close a pipeline\n+    Optional<Pipeline> pipelineToClose = scmPipelineManager\n+        .getPipelines(RATIS, ONE)\n+        .stream()\n+        .filter(p -> !p.getId().equals(containerInfo.getPipelineID()))\n+        .findFirst();\n+    assertTrue(pipelineToClose.isPresent());\n+    scmPipelineManager.finalizeAndDestroyPipeline(pipelineToClose.get(), false);\n+\n+    // Start Recon\n+    cluster.startRecon();\n+\n+    // Verify if Recon has all the nodes on restart (even if heartbeats are\n+    // not yet received).\n+    NodeManager reconNodeManager = reconScm.getScmNodeManager();\n+    NodeManager scmNodeManager = scm.getScmNodeManager();\n+    assertEquals(scmNodeManager.getAllNodes().size(),\n+        reconNodeManager.getAllNodes().size());\n+\n+    // Verify Recon picks up new container, close pipeline SCM actions.\n+    OzoneStorageContainerManager newReconScm =\n+        cluster.getReconServer().getReconStorageContainerManager();\n+    PipelineManager reconPipelineManager = newReconScm.getPipelineManager();\n+    assertFalse(\n+        reconPipelineManager.containsPipeline(pipelineToClose.get().getId()));\n+\n+    LambdaTestUtils.await(300000, 30000,", "originalCommit": "9226f3285d5fdcb9c3de79e882fc80c66860bbe6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0NDA5OA==", "url": "https://github.com/apache/ozone/pull/688#discussion_r393244098", "bodyText": "Yes, will do.", "author": "avijayanhwx", "createdAt": "2020-03-16T18:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0MTM2MQ=="}], "type": "inlineReview"}, {"oid": "b274531e1645af6b632249ed3a247038621fe9ea", "url": "https://github.com/apache/ozone/commit/b274531e1645af6b632249ed3a247038621fe9ea", "message": "HDDS-2995. Reduce interval time for checking condition.", "committedDate": "2020-03-16T19:16:07Z", "type": "commit"}, {"oid": "d94f38c7aa481933a39b20d95c2db0664b18799d", "url": "https://github.com/apache/ozone/commit/d94f38c7aa481933a39b20d95c2db0664b18799d", "message": "Merge remote-tracking branch 'upstream/master' into HDDS-2995-master", "committedDate": "2020-03-16T21:21:28Z", "type": "commit"}]}