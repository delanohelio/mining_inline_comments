{"pr_number": 1664, "pr_title": "HDDS-4540. Add a new OM admin operation to submit the OMPrepareRequest.", "pr_createdAt": "2020-12-06T06:18:35Z", "pr_url": "https://github.com/apache/ozone/pull/1664", "timeline": [{"oid": "c8bc481abff2a01703c2ae2c60552a84e057b326", "url": "https://github.com/apache/ozone/commit/c8bc481abff2a01703c2ae2c60552a84e057b326", "message": "HDDS-4540. Add a new OM admin operation to submit the OMPrepareRequest.", "committedDate": "2020-12-06T06:14:43Z", "type": "commit"}, {"oid": "ceb4ef86295c5605466756d80ebd658b963fd893", "url": "https://github.com/apache/ozone/commit/ceb4ef86295c5605466756d80ebd658b963fd893", "message": "Fix checkstyle.", "committedDate": "2020-12-06T06:22:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2NzE1Mw==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537067153", "bodyText": "Can you complete this javadoc to let it more understandable?", "author": "linyiqun", "createdAt": "2020-12-06T15:59:15Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -587,4 +587,14 @@ default boolean recoverTrash(String volumeName, String bucketName,\n     return false;\n   }\n \n+  /**\n+   *\n+   * @param flushWaitTimeout\n+   * @param flushCheckInterval\n+   * @return\n+   */\n+  default long prepareOzoneManager(long flushWaitTimeout,", "originalCommit": "ceb4ef86295c5605466756d80ebd658b963fd893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDM3NA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537250374", "bodyText": "Thanks, done!", "author": "avijayanhwx", "createdAt": "2020-12-07T05:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2NzE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2OTA3Mw==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537069073", "bodyText": "Shall we need to add 'required = true' for this option?", "author": "linyiqun", "createdAt": "2020-12-06T16:09:42Z", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import java.util.concurrent.Callable;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+\n+import picocli.CommandLine;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"prepare\",\n+    description = \"Prepares OM\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class\n+)\n+public class PrepareSubCommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(\n+      names = {\"-id\", \"--service-id\"},\n+      description = \"Ozone Manager Service ID\"", "originalCommit": "ceb4ef86295c5605466756d80ebd658b963fd893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDQyMw==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537250423", "bodyText": "Yes, I have added it.", "author": "avijayanhwx", "createdAt": "2020-12-07T05:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2OTA3Mw=="}], "type": "inlineReview"}, {"oid": "705480118164c4c68b34e574656abd64e1b60003", "url": "https://github.com/apache/ozone/commit/705480118164c4c68b34e574656abd64e1b60003", "message": "Address review comments.", "committedDate": "2020-12-07T05:58:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzY1Mw==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537797653", "bodyText": "By removing the if (!success) condition, we will unnecessarily wait an extra flushCheckInterval after the OM is prepared. Minor issue, but could save us a few seconds of waiting.", "author": "errose28", "createdAt": "2020-12-07T20:08:55Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMPrepareRequest.java", "diffHunk": "@@ -162,9 +167,7 @@ private static void waitForLogIndex(long indexToWaitFor,\n             && (ratisTxnIndex >= indexToWaitFor);\n       }\n \n-      if (!success) {\n-        Thread.sleep(DOUBLE_BUFFER_FLUSH_CHECK_INTERVAL.toMillis());\n-      }\n+      Thread.sleep(flushCheckInterval.toMillis());", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NjI4MA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537896280", "bodyText": "Good catch, this refactor was due to a merge mistake.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5OTM4Ng==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537799386", "bodyText": "nit: Is txn a standard abbreviation for transaction that is used in the docs and the user would be expected to recognize? Seems best not to use non-standard abbreviations in user facing documentation.", "author": "errose28", "createdAt": "2020-12-07T20:11:37Z", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import java.util.concurrent.Callable;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+\n+import picocli.CommandLine;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"prepare\",\n+    description = \"Prepares Ozone Manager for upgrade/downgrade, by applying \" +\n+        \"all pending transactions, taking a Ratis snapshot at the last txn \" +\n+        \"and purging all logs on each OM instance. The returned txn id \" +\n+        \"corresponds to the last txn in the quorum in which the snapshot is \" +\n+        \"taken.\",", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTc4Ng==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537895786", "bodyText": "I have used the full word in the description, and marked the parameter as \"hidden\".", "author": "avijayanhwx", "createdAt": "2020-12-07T22:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5OTM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNTQyMg==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537805422", "bodyText": "I feel like this flag name and description might be too low level for the UI, since the double buffer is more of an implementation detail. For example, the user would not be expected to know whether the double buffer flush is a mandatory part of prepare (it is), or if this is just a convenience and they can just set this to a low number and if the flush doesn't complete in time expect the OM to still prepare. Maybe just --prepare-timeout for the flag? We can use the flush timeout terminology within the client, request, and protos.\nIf the user sets this too low, they will get an error message saying the flush did not complete in time. Then they can retry with a higher value. So this is just a thought and might not be necessary.", "author": "errose28", "createdAt": "2020-12-07T20:21:23Z", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import java.util.concurrent.Callable;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+\n+import picocli.CommandLine;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"prepare\",\n+    description = \"Prepares Ozone Manager for upgrade/downgrade, by applying \" +\n+        \"all pending transactions, taking a Ratis snapshot at the last txn \" +\n+        \"and purging all logs on each OM instance. The returned txn id \" +\n+        \"corresponds to the last txn in the quorum in which the snapshot is \" +\n+        \"taken.\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class\n+)\n+public class PrepareSubCommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(\n+      names = {\"-id\", \"--service-id\"},\n+      description = \"Ozone Manager Service ID\",\n+      required = true\n+  )\n+  private String omServiceId;\n+\n+  @CommandLine.Option(\n+      names = {\"-ft\", \"--flush-wait-timeout\"},\n+      description = \"Max time to wait for OM Double Buffer flush in seconds.\",", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NzE3MA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537897170", "bodyText": "Refactored this to transaction-apply-wait-timeout, and marked this field as hidden. Since I am expecting a global \"prepare-timeout\" parameter for the client which includes the wait for each OM to be prepared, I have used a more applicable parameter name here. But, I agree this is an internal detail and hence I have moved it to a hidden field.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNjgzNw==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537806837", "bodyText": "nit: Can we make the 5 a static constant in this class so it is easier to find and update if needed?", "author": "errose28", "createdAt": "2020-12-07T20:23:32Z", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import java.util.concurrent.Callable;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+\n+import picocli.CommandLine;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"prepare\",\n+    description = \"Prepares Ozone Manager for upgrade/downgrade, by applying \" +\n+        \"all pending transactions, taking a Ratis snapshot at the last txn \" +\n+        \"and purging all logs on each OM instance. The returned txn id \" +\n+        \"corresponds to the last txn in the quorum in which the snapshot is \" +\n+        \"taken.\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class\n+)\n+public class PrepareSubCommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(\n+      names = {\"-id\", \"--service-id\"},\n+      description = \"Ozone Manager Service ID\",\n+      required = true\n+  )\n+  private String omServiceId;\n+\n+  @CommandLine.Option(\n+      names = {\"-ft\", \"--flush-wait-timeout\"},\n+      description = \"Max time to wait for OM Double Buffer flush in seconds.\",\n+      defaultValue = \"300\"\n+  )\n+  private long flushWaitTime;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    OzoneManagerProtocol client = parent.createOmClient(omServiceId);\n+    long prepareTxnId = client.prepareOzoneManager(flushWaitTime, 5);", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NzI5Mg==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537897292", "bodyText": "Added this as a hidden parameter as well.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNjgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxMzcwNA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537813704", "bodyText": "Can we add some identifying information for these time units in this method? We could use java.time.Duration, or since they are being passed right into a proto, just adding Seconds onto their variable names might be enough.", "author": "errose28", "createdAt": "2020-12-07T20:34:39Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -1547,6 +1547,32 @@ public boolean recoverTrash(String volumeName, String bucketName,\n     return recoverResponse.getResponse();\n   }\n \n+  @Override\n+  public long prepareOzoneManager(long flushWaitTimeout,\n+                                  long flushCheckInterval) throws IOException {", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NzM2OA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537897368", "bodyText": "Done.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxMzcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNTIyOQ==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537815229", "bodyText": "Similar to above, can we add Seconds on to these variable names to make sure the sender and receiver are on the same page with how these time durations are interpreted?", "author": "errose28", "createdAt": "2020-12-07T20:37:16Z", "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1079,7 +1079,12 @@ message FinalizeUpgradeProgressResponse {\n }\n \n message PrepareRequest {\n+    required PrepareRequestArgs args = 1;\n+}\n \n+message PrepareRequestArgs {\n+    optional uint64 flushWaitTimeOut = 1 [default = 300];\n+    optional uint64 flushWaitCheckInterval = 2 [default = 5];", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NzQwMg==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537897402", "bodyText": "Done.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNTIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNDk1NA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537824954", "bodyText": "This could fail in a slow cluster if the above keys haven't made it to every OM's log yet. Probably unlikely, but if we leave the await call in, we reduce some potential flakiness with this test without sacrificing its guarantees.", "author": "errose28", "createdAt": "2020-12-07T20:53:30Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerPrepare.java", "diffHunk": "@@ -112,26 +100,17 @@ public void testPrepareWithTransactions() throws Exception {\n \n     // Make sure all OMs have logs from writing data, so we can check that\n     // they are purged after prepare.\n-    for (OzoneManager om: cluster.getOzoneManagersList()) {\n-      LambdaTestUtils.await(timeoutMillis, 1000,\n-          () -> logFilesPresentInRatisPeer(om));\n-    }\n+    cluster.getOzoneManagersList().forEach(om ->\n+        Assert.assertTrue(logFilesPresentInRatisPeer(om)));", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NzQ3NA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537897474", "bodyText": "Fixed it.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNDk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjkxNQ==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537826915", "bodyText": "nit: Can we make the flush timeout and check interval constants in this class used for all the tests? Right now its fairly clear, but if someone has to come back and fix this test later because its timing out or taking too long, having the time configs easily visible will help.", "author": "errose28", "createdAt": "2020-12-07T20:56:51Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerPrepare.java", "diffHunk": "@@ -112,26 +100,17 @@ public void testPrepareWithTransactions() throws Exception {\n \n     // Make sure all OMs have logs from writing data, so we can check that\n     // they are purged after prepare.\n-    for (OzoneManager om: cluster.getOzoneManagersList()) {\n-      LambdaTestUtils.await(timeoutMillis, 1000,\n-          () -> logFilesPresentInRatisPeer(om));\n-    }\n+    cluster.getOzoneManagersList().forEach(om ->\n+        Assert.assertTrue(logFilesPresentInRatisPeer(om)));\n \n-    OzoneManager leader = cluster.getOMLeader();\n-    OMResponse omResponse = submitPrepareRequest(leader.getOmRatisServer());\n-    // Get the log index of the prepare request.\n+    OzoneManagerProtocol ozoneManagerClient =\n+        ozClient.getObjectStore().getClientProxy().getOzoneManagerClient();\n     long prepareRequestLogIndex =\n-        omResponse.getPrepareResponse().getTxnID();\n+        ozoneManagerClient.prepareOzoneManager(300, 5);", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NzUxMg==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537897512", "bodyText": "Done.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMDQxOA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537830418", "bodyText": "nit: Is there any benefit to using a random index over a fixed one? When observing the test run from logs, we now need to search the messages to determine which OM was taken down on this run (also distinguish the deliberate takedown from a crash or JVM pause induced leader change), instead of having that info beforehand.", "author": "errose28", "createdAt": "2020-12-07T21:02:37Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerPrepare.java", "diffHunk": "@@ -152,11 +131,10 @@ public void testPrepareWithTransactions() throws Exception {\n    * Checks that third OM received all transactions and is prepared.\n    * @throws Exception\n    */\n-  // TODO: Fix this test so it passes.\n-  //   @Test\n+//  @Test\n   public void testPrepareDownedOM() throws Exception {\n     // Index of the OM that will be shut down during this test.\n-    final int shutdownOMIndex = 2;\n+    final int shutdownOMIndex = new Random().nextInt(3);", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTIyNA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537895224", "bodyText": "Reverted this change.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMDQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjUwOQ==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537836509", "bodyText": "Can we replace this with a waitAndCheckPrepared call? Then we know that the logs have also been removed as well.", "author": "errose28", "createdAt": "2020-12-07T21:12:44Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerPrepare.java", "diffHunk": "@@ -217,15 +188,11 @@ public void testPrepareDownedOM() throws Exception {\n     // Since prepare was the last Ratis transaction, it should have all data\n     // it missed once it receives the prepare transaction.\n     cluster.restartOzoneManager(downedOM, true);\n-    // Wait for other OMs to catch this one up on transactions.\n-    LambdaTestUtils.await(timeoutMillis, 1000,\n-        () -> downedOM.getRatisSnapshotIndex() == prepareIndex);\n-    checkPrepared(downedOM, prepareIndex);\n+    LambdaTestUtils.await(timeoutMillis, 2000,\n+        () -> checkPrepared(downedOM, prepareIndex));", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDA2Nw==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537894067", "bodyText": "Given that we have already made sure that there are no logs present in the functional OMs, I believe that it is sufficient to check just the prepare request apply marker in the downed OM.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzODcyOA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537838728", "bodyText": "Do we still need this method? Since we are no longer immediately checking the leader and waiting on all 3 OMs, can we just put these lines in waitAndCheckPrepared? This method on its own is kind of misleading, since it no longer checks that the logs have been removed, and therefore doesn't do a full check for preparedness.", "author": "errose28", "createdAt": "2020-12-07T21:16:37Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerPrepare.java", "diffHunk": "@@ -266,61 +233,23 @@ private void writeTestData(ObjectStore store, String volumeName,\n     keyStream.close();\n   }\n \n-  private OMRequest buildPrepareRequest() {\n-    PrepareRequest requestProto = PrepareRequest.newBuilder().build();\n-\n-    return OMRequest.newBuilder()\n-        .setPrepareRequest(requestProto)\n-        .setCmdType(Type.Prepare)\n-        .setClientId(UUID.randomUUID().toString())\n-        .build();\n-  }\n-\n   private void waitAndCheckPrepared(OzoneManager om,\n       long prepareRequestLogIndex) throws Exception {\n     // Log files are deleted after the snapshot is taken,\n     // So once log files have been deleted, OM should be prepared.\n     LambdaTestUtils.await(timeoutMillis, 1000,\n         () -> !logFilesPresentInRatisPeer(om));\n-    checkPrepared(om, prepareRequestLogIndex);\n+    Assert.assertTrue(checkPrepared(om, prepareRequestLogIndex));\n   }\n \n-  private void checkPrepared(OzoneManager om, long prepareRequestLogIndex)\n+  private boolean checkPrepared(OzoneManager om, long prepareRequestLogIndex)", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDM4MQ==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537894381", "bodyText": "Due to my last comment, this still has one usage.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzODcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MTk4MA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537841980", "bodyText": "Should we add this check in PrepareSubCommand as well to give the user a specific error message if they pass a bad value? I'm not sure how the client handles these precondition generated exceptions and presents them to the user.", "author": "errose28", "createdAt": "2020-12-07T21:22:09Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -1547,6 +1547,32 @@ public boolean recoverTrash(String volumeName, String bucketName,\n     return recoverResponse.getResponse();\n   }\n \n+  @Override\n+  public long prepareOzoneManager(long flushWaitTimeout,\n+                                  long flushCheckInterval) throws IOException {\n+    Preconditions.checkArgument(flushWaitTimeout > 0,\n+        \"flushWaitTimeout has to be > zero\");", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTA3MA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537895070", "bodyText": "Changed this to match the command's user parameter name.", "author": "avijayanhwx", "createdAt": "2020-12-07T22:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0Mzk3OQ==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r537843979", "bodyText": "If the user passes in a value for flush wait timeout that is less than the hardcoded flush check interval, they will see this message. This is confusing to them since it indicates the problem is flush check interval, which they have no knowledge of. They must also guess as to what the flush check interval value is to make sure their flush wait timeout is two times that when they try again.\nSimilar to above, a min value check on the user passed flush wait timeout to make sure it is large enough (or automatically set flush check interval based on the passed value) might be good to add in PrepareSubCommand.", "author": "errose28", "createdAt": "2020-12-07T21:25:27Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -1547,6 +1547,32 @@ public boolean recoverTrash(String volumeName, String bucketName,\n     return recoverResponse.getResponse();\n   }\n \n+  @Override\n+  public long prepareOzoneManager(long flushWaitTimeout,\n+                                  long flushCheckInterval) throws IOException {\n+    Preconditions.checkArgument(flushWaitTimeout > 0,\n+        \"flushWaitTimeout has to be > zero\");\n+\n+    Preconditions.checkArgument(flushCheckInterval > 0 &&\n+            flushCheckInterval < flushWaitTimeout / 2,\n+        \"flushCheckInterval has to be > zero and < half of \" +\n+            \"flushWaitTimeout to make sense.\");", "originalCommit": "705480118164c4c68b34e574656abd64e1b60003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg2MzEyNA==", "url": "https://github.com/apache/ozone/pull/1664#discussion_r538863124", "bodyText": "Since the timeout command is now hidden this is probably okay.", "author": "errose28", "createdAt": "2020-12-08T22:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0Mzk3OQ=="}], "type": "inlineReview"}, {"oid": "558357d377df2f0e0fb3201f98fb336dc5d22ea9", "url": "https://github.com/apache/ozone/commit/558357d377df2f0e0fb3201f98fb336dc5d22ea9", "message": "Address review comments.", "committedDate": "2020-12-07T22:41:16Z", "type": "commit"}, {"oid": "6f8e03d85d8da01170a48fa6007c18f2a36b348f", "url": "https://github.com/apache/ozone/commit/6f8e03d85d8da01170a48fa6007c18f2a36b348f", "message": "Add wait for log file absence check.", "committedDate": "2020-12-07T22:47:15Z", "type": "commit"}, {"oid": "6f8e03d85d8da01170a48fa6007c18f2a36b348f", "url": "https://github.com/apache/ozone/commit/6f8e03d85d8da01170a48fa6007c18f2a36b348f", "message": "Add wait for log file absence check.", "committedDate": "2020-12-07T22:47:15Z", "type": "forcePushed"}]}