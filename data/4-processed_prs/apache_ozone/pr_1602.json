{"pr_number": 1602, "pr_title": "HDDS-4392. [DOC] Add Recon architecture to docs", "pr_createdAt": "2020-11-19T02:08:44Z", "pr_url": "https://github.com/apache/ozone/pull/1602", "timeline": [{"oid": "e98accf126c4c1a59334fbff0f1261a9a5e75a7e", "url": "https://github.com/apache/ozone/commit/e98accf126c4c1a59334fbff0f1261a9a5e75a7e", "message": "HDDS-4392. Add Recon architecture to docs", "committedDate": "2020-11-19T02:04:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMDQ3Mw==", "url": "https://github.com/apache/ozone/pull/1602#discussion_r526600473", "bodyText": "Minor nit: replace faster querying with allows independently query SCM database.", "author": "swagle", "createdAt": "2020-11-19T05:19:05Z", "path": "hadoop-hdds/docs/content/concept/Recon.md", "diffHunk": "@@ -0,0 +1,166 @@\n+---\n+title: \"Recon\"\n+date: \"2020-10-27\"\n+weight: 8\n+menu: \n+  main:\n+     parent: Architecture\n+summary: Recon serves as a management and monitoring console for Ozone.\n+---\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+Recon serves as a management and monitoring console for Ozone. It gives a \n+bird's-eye view of Ozone and helps users troubleshoot any issues by presenting\n+the current state of the cluster through REST based APIs and rich web UI.\n+    \n+\n+## High Level Design\n+\n+{{<figure src=\"/concept/ReconHighLevelDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+On a high level, Recon collects and aggregates metadata from Ozone Manager (OM), \n+Storage Container Manager (SCM) and Datanodes (DN) and acts as a central \n+management and monitoring console. Ozone administrators can use Recon to query \n+the current state of the system without overloading OM or SCM. \n+\n+Recon maintains multiple databases to enable batch processing, faster querying \n+and to persist aggregate information. It maintains a local copy of OM db and \n+SCM db along with a SQL database for persisting aggregate information.\n+\n+Recon also integrates with Prometheus to provide a HTTP endpoint to query Prometheus \n+for Ozone metrics and also to display a few crucial point in time metrics in \n+the web UI.\n+\n+## Recon and Ozone Manager\n+\n+{{<figure src=\"/concept/ReconOmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon gets a full snapshot of OM rocks db initially from the leader OM's HTTP \n+endpoint, untars the file and initializes RocksDB for querying locally. The\n+database is kept in sync by periodically requesting delta updates from the leader\n+OM via RPC calls from the last applied sequence id. If for any reason, the delta \n+updates could not be retrieved or applied to the local db, a full snapshot is \n+requested again to keep the local db in sync with OM db. Due to this, Recon can \n+show stale information since the local db will not always be in sync.\n+\n+The db updates retrieved from OM is then converted into a batch of events for \n+further processing by OM db tasks via [Recon Tasks Framework](#tasks-framework). \n+\n+\n+## Recon and Storage Container Manager\n+\n+{{<figure src=\"/concept/ReconScmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon also acts as a passive SCM for datanodes. When Recon is configured in the\n+cluster, all the datanodes register with Recon and send heartbeats, container \n+reports, incremental container reports etc. to Recon similar to SCM. Recon uses\n+all the information it gets from datanodes to construct its own copy of SCM rocks db \n+locally. Recon never sends any command to datanodes in response and just acts as\n+a passive SCM for faster querying of SCM database.  ", "originalCommit": "e98accf126c4c1a59334fbff0f1261a9a5e75a7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMDgzMg==", "url": "https://github.com/apache/ozone/pull/1602#discussion_r526600832", "bodyText": "Duplication below. Task framework will use all the dbs, from this statement I get the impression that only SCM will be.", "author": "swagle", "createdAt": "2020-11-19T05:20:13Z", "path": "hadoop-hdds/docs/content/concept/Recon.md", "diffHunk": "@@ -0,0 +1,166 @@\n+---\n+title: \"Recon\"\n+date: \"2020-10-27\"\n+weight: 8\n+menu: \n+  main:\n+     parent: Architecture\n+summary: Recon serves as a management and monitoring console for Ozone.\n+---\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+Recon serves as a management and monitoring console for Ozone. It gives a \n+bird's-eye view of Ozone and helps users troubleshoot any issues by presenting\n+the current state of the cluster through REST based APIs and rich web UI.\n+    \n+\n+## High Level Design\n+\n+{{<figure src=\"/concept/ReconHighLevelDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+On a high level, Recon collects and aggregates metadata from Ozone Manager (OM), \n+Storage Container Manager (SCM) and Datanodes (DN) and acts as a central \n+management and monitoring console. Ozone administrators can use Recon to query \n+the current state of the system without overloading OM or SCM. \n+\n+Recon maintains multiple databases to enable batch processing, faster querying \n+and to persist aggregate information. It maintains a local copy of OM db and \n+SCM db along with a SQL database for persisting aggregate information.\n+\n+Recon also integrates with Prometheus to provide a HTTP endpoint to query Prometheus \n+for Ozone metrics and also to display a few crucial point in time metrics in \n+the web UI.\n+\n+## Recon and Ozone Manager\n+\n+{{<figure src=\"/concept/ReconOmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon gets a full snapshot of OM rocks db initially from the leader OM's HTTP \n+endpoint, untars the file and initializes RocksDB for querying locally. The\n+database is kept in sync by periodically requesting delta updates from the leader\n+OM via RPC calls from the last applied sequence id. If for any reason, the delta \n+updates could not be retrieved or applied to the local db, a full snapshot is \n+requested again to keep the local db in sync with OM db. Due to this, Recon can \n+show stale information since the local db will not always be in sync.\n+\n+The db updates retrieved from OM is then converted into a batch of events for \n+further processing by OM db tasks via [Recon Tasks Framework](#tasks-framework). \n+\n+\n+## Recon and Storage Container Manager\n+\n+{{<figure src=\"/concept/ReconScmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon also acts as a passive SCM for datanodes. When Recon is configured in the\n+cluster, all the datanodes register with Recon and send heartbeats, container \n+reports, incremental container reports etc. to Recon similar to SCM. Recon uses\n+all the information it gets from datanodes to construct its own copy of SCM rocks db \n+locally. Recon never sends any command to datanodes in response and just acts as\n+a passive SCM for faster querying of SCM database.  \n+\n+The data in local SCM db is consumed by all the SCM db tasks triggered at ", "originalCommit": "e98accf126c4c1a59334fbff0f1261a9a5e75a7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMjAyOA==", "url": "https://github.com/apache/ozone/pull/1602#discussion_r528502028", "bodyText": "Nit. for faster lookup of SCM metadata.\n(DB lookups are not done in SCM mostly.)", "author": "avijayanhwx", "createdAt": "2020-11-23T07:10:08Z", "path": "hadoop-hdds/docs/content/concept/Recon.md", "diffHunk": "@@ -0,0 +1,166 @@\n+---\n+title: \"Recon\"\n+date: \"2020-10-27\"\n+weight: 8\n+menu: \n+  main:\n+     parent: Architecture\n+summary: Recon serves as a management and monitoring console for Ozone.\n+---\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+Recon serves as a management and monitoring console for Ozone. It gives a \n+bird's-eye view of Ozone and helps users troubleshoot any issues by presenting\n+the current state of the cluster through REST based APIs and rich web UI.\n+    \n+\n+## High Level Design\n+\n+{{<figure src=\"/concept/ReconHighLevelDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+On a high level, Recon collects and aggregates metadata from Ozone Manager (OM), \n+Storage Container Manager (SCM) and Datanodes (DN) and acts as a central \n+management and monitoring console. Ozone administrators can use Recon to query \n+the current state of the system without overloading OM or SCM. \n+\n+Recon maintains multiple databases to enable batch processing, faster querying \n+and to persist aggregate information. It maintains a local copy of OM db and \n+SCM db along with a SQL database for persisting aggregate information.\n+\n+Recon also integrates with Prometheus to provide a HTTP endpoint to query Prometheus \n+for Ozone metrics and also to display a few crucial point in time metrics in \n+the web UI.\n+\n+## Recon and Ozone Manager\n+\n+{{<figure src=\"/concept/ReconOmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon gets a full snapshot of OM rocks db initially from the leader OM's HTTP \n+endpoint, untars the file and initializes RocksDB for querying locally. The\n+database is kept in sync by periodically requesting delta updates from the leader\n+OM via RPC calls from the last applied sequence id. If for any reason, the delta \n+updates could not be retrieved or applied to the local db, a full snapshot is \n+requested again to keep the local db in sync with OM db. Due to this, Recon can \n+show stale information since the local db will not always be in sync.\n+\n+The db updates retrieved from OM is then converted into a batch of events for \n+further processing by OM db tasks via [Recon Tasks Framework](#tasks-framework). \n+\n+\n+## Recon and Storage Container Manager\n+\n+{{<figure src=\"/concept/ReconScmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon also acts as a passive SCM for datanodes. When Recon is configured in the\n+cluster, all the datanodes register with Recon and send heartbeats, container \n+reports, incremental container reports etc. to Recon similar to SCM. Recon uses\n+all the information it gets from datanodes to construct its own copy of SCM rocks db \n+locally. Recon never sends any command to datanodes in response and just acts as\n+a passive SCM for faster querying of SCM database.  ", "originalCommit": "e98accf126c4c1a59334fbff0f1261a9a5e75a7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMjQ3MQ==", "url": "https://github.com/apache/ozone/pull/1602#discussion_r528502471", "bodyText": "Nit. Task framework", "author": "avijayanhwx", "createdAt": "2020-11-23T07:11:33Z", "path": "hadoop-hdds/docs/content/concept/Recon.md", "diffHunk": "@@ -0,0 +1,166 @@\n+---\n+title: \"Recon\"\n+date: \"2020-10-27\"\n+weight: 8\n+menu: \n+  main:\n+     parent: Architecture\n+summary: Recon serves as a management and monitoring console for Ozone.\n+---\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+Recon serves as a management and monitoring console for Ozone. It gives a \n+bird's-eye view of Ozone and helps users troubleshoot any issues by presenting\n+the current state of the cluster through REST based APIs and rich web UI.\n+    \n+\n+## High Level Design\n+\n+{{<figure src=\"/concept/ReconHighLevelDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+On a high level, Recon collects and aggregates metadata from Ozone Manager (OM), \n+Storage Container Manager (SCM) and Datanodes (DN) and acts as a central \n+management and monitoring console. Ozone administrators can use Recon to query \n+the current state of the system without overloading OM or SCM. \n+\n+Recon maintains multiple databases to enable batch processing, faster querying \n+and to persist aggregate information. It maintains a local copy of OM db and \n+SCM db along with a SQL database for persisting aggregate information.\n+\n+Recon also integrates with Prometheus to provide a HTTP endpoint to query Prometheus \n+for Ozone metrics and also to display a few crucial point in time metrics in \n+the web UI.\n+\n+## Recon and Ozone Manager\n+\n+{{<figure src=\"/concept/ReconOmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon gets a full snapshot of OM rocks db initially from the leader OM's HTTP \n+endpoint, untars the file and initializes RocksDB for querying locally. The\n+database is kept in sync by periodically requesting delta updates from the leader\n+OM via RPC calls from the last applied sequence id. If for any reason, the delta \n+updates could not be retrieved or applied to the local db, a full snapshot is \n+requested again to keep the local db in sync with OM db. Due to this, Recon can \n+show stale information since the local db will not always be in sync.\n+\n+The db updates retrieved from OM is then converted into a batch of events for \n+further processing by OM db tasks via [Recon Tasks Framework](#tasks-framework). \n+\n+\n+## Recon and Storage Container Manager\n+\n+{{<figure src=\"/concept/ReconScmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon also acts as a passive SCM for datanodes. When Recon is configured in the\n+cluster, all the datanodes register with Recon and send heartbeats, container \n+reports, incremental container reports etc. to Recon similar to SCM. Recon uses\n+all the information it gets from datanodes to construct its own copy of SCM rocks db \n+locally. Recon never sends any command to datanodes in response and just acts as\n+a passive SCM for faster querying of SCM database.  \n+\n+The data in local SCM db is consumed by all the SCM db tasks triggered at \n+defined intervals via [Recon Tasks Framework](#tasks-framework).\n+\n+## <a name=\"tasks-framework\"></a> Tasks Framework\n+\n+Recon has its own Tasks framework to enable batch processing of data obtained ", "originalCommit": "e98accf126c4c1a59334fbff0f1261a9a5e75a7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNDMzMQ==", "url": "https://github.com/apache/ozone/pull/1602#discussion_r528504331", "bodyText": "Just FYI, the 'ContainerHistory' SQL table will likely be removed in HDDS-4403.", "author": "avijayanhwx", "createdAt": "2020-11-23T07:16:46Z", "path": "hadoop-hdds/docs/content/concept/Recon.md", "diffHunk": "@@ -0,0 +1,166 @@\n+---\n+title: \"Recon\"\n+date: \"2020-10-27\"\n+weight: 8\n+menu: \n+  main:\n+     parent: Architecture\n+summary: Recon serves as a management and monitoring console for Ozone.\n+---\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+Recon serves as a management and monitoring console for Ozone. It gives a \n+bird's-eye view of Ozone and helps users troubleshoot any issues by presenting\n+the current state of the cluster through REST based APIs and rich web UI.\n+    \n+\n+## High Level Design\n+\n+{{<figure src=\"/concept/ReconHighLevelDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+On a high level, Recon collects and aggregates metadata from Ozone Manager (OM), \n+Storage Container Manager (SCM) and Datanodes (DN) and acts as a central \n+management and monitoring console. Ozone administrators can use Recon to query \n+the current state of the system without overloading OM or SCM. \n+\n+Recon maintains multiple databases to enable batch processing, faster querying \n+and to persist aggregate information. It maintains a local copy of OM db and \n+SCM db along with a SQL database for persisting aggregate information.\n+\n+Recon also integrates with Prometheus to provide a HTTP endpoint to query Prometheus \n+for Ozone metrics and also to display a few crucial point in time metrics in \n+the web UI.\n+\n+## Recon and Ozone Manager\n+\n+{{<figure src=\"/concept/ReconOmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon gets a full snapshot of OM rocks db initially from the leader OM's HTTP \n+endpoint, untars the file and initializes RocksDB for querying locally. The\n+database is kept in sync by periodically requesting delta updates from the leader\n+OM via RPC calls from the last applied sequence id. If for any reason, the delta \n+updates could not be retrieved or applied to the local db, a full snapshot is \n+requested again to keep the local db in sync with OM db. Due to this, Recon can \n+show stale information since the local db will not always be in sync.\n+\n+The db updates retrieved from OM is then converted into a batch of events for \n+further processing by OM db tasks via [Recon Tasks Framework](#tasks-framework). \n+\n+\n+## Recon and Storage Container Manager\n+\n+{{<figure src=\"/concept/ReconScmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon also acts as a passive SCM for datanodes. When Recon is configured in the\n+cluster, all the datanodes register with Recon and send heartbeats, container \n+reports, incremental container reports etc. to Recon similar to SCM. Recon uses\n+all the information it gets from datanodes to construct its own copy of SCM rocks db \n+locally. Recon never sends any command to datanodes in response and just acts as\n+a passive SCM for faster querying of SCM database.  \n+\n+The data in local SCM db is consumed by all the SCM db tasks triggered at \n+defined intervals via [Recon Tasks Framework](#tasks-framework).\n+\n+## <a name=\"tasks-framework\"></a> Tasks Framework\n+\n+Recon has its own Tasks framework to enable batch processing of data obtained \n+from OM and SCM. A task can listen to and act upon db events such as `PUT`, `DELETE`,\n+`UPDATE`, etc. on either OM db or SCM db. Based on this, a task either implements \n+`org.apache.hadoop.ozone.recon.tasks.ReconOmTask` or extends \n+`org.apache.hadoop.ozone.recon.scm.ReconScmTask`.   \n+\n+An example `ReconOmTask` is `ContainerKeyMapperTask` that persists the container -> key \n+mapping in RocksDB. This is useful to understand which keys were part of the container \n+when the container is reported missing or is in a bad health state. Another example is \n+`FileSizeCountTask` which keeps track of count of files within a given file size range in \n+a SQL database. These tasks have implementations for two scenarios:\n+ \n+ - Full snapshot (reprocess())\n+ - Delta updates (process())\n+ \n+When a full snapshot of OM db is obtained from the leader OM, the reprocess() \n+is called on all the registered OM tasks. On subsequent delta updates, process()\n+is called on these OM tasks. \n+\n+An example `ReconScmTask` is `ContainerHealthTask` that runs in configurable \n+intervals to scan the list of all the containers and to persist the state of \n+unhealthy containers (`MISSING`, `MIS_REPLICATED`, `UNDER_REPLICATED`, `OVER_REPLICATED`)\n+in a SQL table. This information is used to determine if there are any missing \n+containers in the cluster.\n+\n+## Recon and Prometheus\n+\n+Recon can integrate with any Prometheus instance configured to collected metrics \n+and can display useful information in Recon UI in Datanodes and Pipelines pages.\n+Recon also exposes a proxy endpoint ([/metrics]({{< ref \"interface/ReconApi.md#metrics\" >}}))\n+to query Prometheus. This integration can be enabled by setting this configuration `ozone.recon.prometheus.http.endpoint` \n+to the Prometheus endpoint like `ozone.recon.prometheus.http.endpoint=localhost:9090`.\n+\n+## API Reference\n+\n+[Link to complete API Reference]({{< ref \"interface/ReconApi.md\" >}})\n+   \n+## Persisted state\n+\n+ * A local copy of [OM database]({{< ref \"concept/OzoneManager.md#persisted-state\" >}})\n+ * A local copy of [SCM database]({{< ref \"concept/StorageContainerManager.md#persisted-state\" >}})\n+ * The following data is persisted in Recon in the specified RocksDB directory:\n+     * ContainerKey table\n+       * Stores the mapping (container, key) -> count\n+     * ContainerKeyCount table\n+       * Stores containerID -> no. of keys count within the container\n+ \n+ * The following data is stored in the configured SQL database (default is Derby):\n+     * GlobalStats table\n+       * A Key -> Value table to store aggregate information like total\n+       number of volumes / buckets / keys present in the cluster\n+     * FileCountBySize table\n+       * Keeps track of the number of files present within a file size range in the cluster\n+     * ReconTaskStatus table\n+       * Keeps track of the status and last run timestamp of the registered OM and SCM \n+       db tasks in the [Recon Tasks Framework](#tasks-framework)\n+     * ContainerHistory table", "originalCommit": "e98accf126c4c1a59334fbff0f1261a9a5e75a7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4MDQ4MA==", "url": "https://github.com/apache/ozone/pull/1602#discussion_r529780480", "bodyText": "Ack.", "author": "vivekratnavel", "createdAt": "2020-11-24T18:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNDMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNTEzNg==", "url": "https://github.com/apache/ozone/pull/1602#discussion_r528505136", "bodyText": "Interval in MINUTES by Recon to request OM DB Snapshot / delta updates.", "author": "avijayanhwx", "createdAt": "2020-11-23T07:19:16Z", "path": "hadoop-hdds/docs/content/concept/Recon.md", "diffHunk": "@@ -0,0 +1,166 @@\n+---\n+title: \"Recon\"\n+date: \"2020-10-27\"\n+weight: 8\n+menu: \n+  main:\n+     parent: Architecture\n+summary: Recon serves as a management and monitoring console for Ozone.\n+---\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+Recon serves as a management and monitoring console for Ozone. It gives a \n+bird's-eye view of Ozone and helps users troubleshoot any issues by presenting\n+the current state of the cluster through REST based APIs and rich web UI.\n+    \n+\n+## High Level Design\n+\n+{{<figure src=\"/concept/ReconHighLevelDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+On a high level, Recon collects and aggregates metadata from Ozone Manager (OM), \n+Storage Container Manager (SCM) and Datanodes (DN) and acts as a central \n+management and monitoring console. Ozone administrators can use Recon to query \n+the current state of the system without overloading OM or SCM. \n+\n+Recon maintains multiple databases to enable batch processing, faster querying \n+and to persist aggregate information. It maintains a local copy of OM db and \n+SCM db along with a SQL database for persisting aggregate information.\n+\n+Recon also integrates with Prometheus to provide a HTTP endpoint to query Prometheus \n+for Ozone metrics and also to display a few crucial point in time metrics in \n+the web UI.\n+\n+## Recon and Ozone Manager\n+\n+{{<figure src=\"/concept/ReconOmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon gets a full snapshot of OM rocks db initially from the leader OM's HTTP \n+endpoint, untars the file and initializes RocksDB for querying locally. The\n+database is kept in sync by periodically requesting delta updates from the leader\n+OM via RPC calls from the last applied sequence id. If for any reason, the delta \n+updates could not be retrieved or applied to the local db, a full snapshot is \n+requested again to keep the local db in sync with OM db. Due to this, Recon can \n+show stale information since the local db will not always be in sync.\n+\n+The db updates retrieved from OM is then converted into a batch of events for \n+further processing by OM db tasks via [Recon Tasks Framework](#tasks-framework). \n+\n+\n+## Recon and Storage Container Manager\n+\n+{{<figure src=\"/concept/ReconScmDesign.png\" width=\"800px\">}}\n+\n+<br/>\n+\n+Recon also acts as a passive SCM for datanodes. When Recon is configured in the\n+cluster, all the datanodes register with Recon and send heartbeats, container \n+reports, incremental container reports etc. to Recon similar to SCM. Recon uses\n+all the information it gets from datanodes to construct its own copy of SCM rocks db \n+locally. Recon never sends any command to datanodes in response and just acts as\n+a passive SCM for faster querying of SCM database.  \n+\n+The data in local SCM db is consumed by all the SCM db tasks triggered at \n+defined intervals via [Recon Tasks Framework](#tasks-framework).\n+\n+## <a name=\"tasks-framework\"></a> Tasks Framework\n+\n+Recon has its own Tasks framework to enable batch processing of data obtained \n+from OM and SCM. A task can listen to and act upon db events such as `PUT`, `DELETE`,\n+`UPDATE`, etc. on either OM db or SCM db. Based on this, a task either implements \n+`org.apache.hadoop.ozone.recon.tasks.ReconOmTask` or extends \n+`org.apache.hadoop.ozone.recon.scm.ReconScmTask`.   \n+\n+An example `ReconOmTask` is `ContainerKeyMapperTask` that persists the container -> key \n+mapping in RocksDB. This is useful to understand which keys were part of the container \n+when the container is reported missing or is in a bad health state. Another example is \n+`FileSizeCountTask` which keeps track of count of files within a given file size range in \n+a SQL database. These tasks have implementations for two scenarios:\n+ \n+ - Full snapshot (reprocess())\n+ - Delta updates (process())\n+ \n+When a full snapshot of OM db is obtained from the leader OM, the reprocess() \n+is called on all the registered OM tasks. On subsequent delta updates, process()\n+is called on these OM tasks. \n+\n+An example `ReconScmTask` is `ContainerHealthTask` that runs in configurable \n+intervals to scan the list of all the containers and to persist the state of \n+unhealthy containers (`MISSING`, `MIS_REPLICATED`, `UNDER_REPLICATED`, `OVER_REPLICATED`)\n+in a SQL table. This information is used to determine if there are any missing \n+containers in the cluster.\n+\n+## Recon and Prometheus\n+\n+Recon can integrate with any Prometheus instance configured to collected metrics \n+and can display useful information in Recon UI in Datanodes and Pipelines pages.\n+Recon also exposes a proxy endpoint ([/metrics]({{< ref \"interface/ReconApi.md#metrics\" >}}))\n+to query Prometheus. This integration can be enabled by setting this configuration `ozone.recon.prometheus.http.endpoint` \n+to the Prometheus endpoint like `ozone.recon.prometheus.http.endpoint=localhost:9090`.\n+\n+## API Reference\n+\n+[Link to complete API Reference]({{< ref \"interface/ReconApi.md\" >}})\n+   \n+## Persisted state\n+\n+ * A local copy of [OM database]({{< ref \"concept/OzoneManager.md#persisted-state\" >}})\n+ * A local copy of [SCM database]({{< ref \"concept/StorageContainerManager.md#persisted-state\" >}})\n+ * The following data is persisted in Recon in the specified RocksDB directory:\n+     * ContainerKey table\n+       * Stores the mapping (container, key) -> count\n+     * ContainerKeyCount table\n+       * Stores containerID -> no. of keys count within the container\n+ \n+ * The following data is stored in the configured SQL database (default is Derby):\n+     * GlobalStats table\n+       * A Key -> Value table to store aggregate information like total\n+       number of volumes / buckets / keys present in the cluster\n+     * FileCountBySize table\n+       * Keeps track of the number of files present within a file size range in the cluster\n+     * ReconTaskStatus table\n+       * Keeps track of the status and last run timestamp of the registered OM and SCM \n+       db tasks in the [Recon Tasks Framework](#tasks-framework)\n+     * ContainerHistory table\n+       * Stores ContainerReplica -> Datanode mapping with last known timestamp. This \n+       is used to determine the last known datanodes when a container is reported missing \n+     * UnhealthyContainers table\n+       * Keeps track of all the Unhealthy Containers (MISSING, UNDER_REPLICATED,\n+       OVER_REPLICATED, MIS_REPLICATED) in the cluster at any given time\n+ \n+\n+## Notable configurations\n+\n+key | default | <div style=\"width: 300px;\">description</div>\n+----|---------|------------\n+ozone.recon.http-address | 0.0.0.0:9888 | The address and the base port where the Recon web UI will listen on.\n+ozone.recon.address | 0.0.0.0:9891 | RPC address of the Recon.\n+ozone.recon.db.dir | none | Directory where the Recon Server stores its metadata.\n+ozone.recon.om.db.dir | none | Directory where the Recon Server stores its OM snapshot DB.\n+ozone.recon.om.snapshot<br>.task.interval.delay | 10m | Interval in MINUTES by Recon to request OM DB Snapshot.", "originalCommit": "e98accf126c4c1a59334fbff0f1261a9a5e75a7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7200c9c5b201bede03a250c0264cd3d4c36c3cf6", "url": "https://github.com/apache/ozone/commit/7200c9c5b201bede03a250c0264cd3d4c36c3cf6", "message": "Address review comments", "committedDate": "2020-11-24T18:14:36Z", "type": "commit"}]}