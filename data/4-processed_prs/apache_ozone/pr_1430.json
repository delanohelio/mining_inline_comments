{"pr_number": 1430, "pr_title": "HDDS-4227. Implement a 'Prepare For Upgrade' step in OM that applies all committed Ratis transactions.", "pr_createdAt": "2020-09-16T21:58:17Z", "pr_url": "https://github.com/apache/ozone/pull/1430", "timeline": [{"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05", "url": "https://github.com/apache/ozone/commit/fbe1403e4953b87af188fe769119ccb6906a4a05", "message": "HDDS-4227. Implement a prepareForUpgrade step that applies all committed transactions onto the OM state machine.", "committedDate": "2020-09-16T21:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTk0OA==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r490045948", "bodyText": "Can we make maxTimeToWaitSeconds configurable?", "author": "linyiqun", "createdAt": "2020-09-17T07:57:56Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -994,6 +1005,45 @@ public static boolean omInit(OzoneConfiguration conf) throws IOException,\n     }\n   }\n \n+  public boolean applyAllPendingTransactions()\n+      throws InterruptedException, IOException {\n+\n+    if (!isRatisEnabled) {\n+      LOG.info(\"Ratis not enabled. Nothing to do.\");\n+      return true;\n+    }\n+\n+    String purgeConfig = omRatisServer.getServer()\n+        .getProperties().get(PURGE_UPTO_SNAPSHOT_INDEX_KEY);\n+    if (!Boolean.parseBoolean(purgeConfig)) {\n+      throw new IllegalStateException(\"Cannot prepare OM for Upgrade since  \" +\n+          \"raft.server.log.purge.upto.snapshot.index is not true\");\n+    }\n+\n+    waitForAllTxnsApplied(omRatisServer.getOmStateMachine(),\n+        omRatisServer.getRaftGroup(),\n+        (RaftServerProxy) omRatisServer.getServer(),\n+        TimeUnit.MINUTES.toSeconds(5));", "originalCommit": "fbe1403e4953b87af188fe769119ccb6906a4a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMjY4MQ==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492702681", "bodyText": "Are you sure we want to add a configuration for this one? I would argue we do not need one more configurable thing to this one at least.\nprepareForUpgrade is a special startup type of OM, during which it applies all transactions that are in the raft log.\nIf 5 minutes is not enough to apply all transactions in the raft log, then the process will shut down and let the user know that some of the transactions were not applied, so that the user can start the process again as a last resort, to apply further transactions. If we assume that at least a few transactions are applied sooner or later the user can get to a state where everything is applied, and if none of the transactions can be applied within 5 minutes, that sounds like a serious problem anyways, independently from the upgrade.\nAlso in 5 minutes I would expect in all cases that the unapplied transactions can be applied, as the number of this kind of transactions should not be too much as far as I know, or if it is then the system is not healthy anyway.\nCan you please elaborate, why would it be useful to make this configurable?", "author": "fapifta", "createdAt": "2020-09-22T12:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5ODYwNw==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492798607", "bodyText": "Also in 5 minutes I would expect in all cases that the unapplied transactions can be applied, as the number of this kind of transactions should not be too much as far as I know, or if it is then the system is not healthy anyway.\n\nI'm okay to let 5 mins as current threshold wait time, only one minor comment: can we define a variable for this time value rather hard-coded in method here?", "author": "linyiqun", "createdAt": "2020-09-22T14:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg3NzI4Mw==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492877283", "bodyText": "Thanks, will change it to a variable.", "author": "avijayanhwx", "createdAt": "2020-09-22T16:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg4NQ==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r490048885", "bodyText": "During prepareForUpgrade, the RPC server is not stared. So we should also have the corresponding command to trigger to restart RPC server. Otherwise after all txns applied, new requests still cannot get in.", "author": "linyiqun", "createdAt": "2020-09-17T08:02:53Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1179,15 +1229,22 @@ public void start() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-    omRpcServer.start();\n-    isOmRpcServerRunning = true;\n \n+    if (!prepareForUpgrade) {\n+      omRpcServer.start();\n+      isOmRpcServerRunning = true;\n+    }", "originalCommit": "fbe1403e4953b87af188fe769119ccb6906a4a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwNTMyNQ==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492705325", "bodyText": "As we discussed this with @avijayanhwx during internal design discussions, after OM is started in prepareForUpgrade mode, it will tear down, when the last transaction is applied from the raft log, and a snapshot is taken in raft, so with that the OM reached a state when all transactions are applied and none needs to be applied after the next startup.\nThis is to ensure that all the transactions are applied with the code that was there when the transactions arrived in, so with that we can ensure consistency of the state of different OM instances.\nAfter this is finished, and OM tear down from prepareForUpgrade, one will need a normal startup of OM to bring it up again, and at that time the RPC server will start properly.", "author": "fapifta", "createdAt": "2020-09-22T12:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMTA4Nw==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492801087", "bodyText": "Okay, enable RPC server via next startup makes sense to me.", "author": "linyiqun", "createdAt": "2020-09-22T14:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDM5OA==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r490064398", "bodyText": "Will prepareForUpgrade command send multiple OMs simultaneously here? Or we should trigger prepareForUpgrade command for each OM service.", "author": "linyiqun", "createdAt": "2020-09-17T08:27:36Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManagerStarter.java", "diffHunk": "@@ -98,6 +98,28 @@ public void initOm()\n     }\n   }\n \n+\n+  /**\n+   * This function implements a sub-command to allow the OM to be\n+   * \"prepared for upgrade\".\n+   */\n+  @CommandLine.Command(name = \"--prepareForUpgrade\",\n+      aliases = {\"--prepareForDowngrade\", \"--flushTransactions\"},", "originalCommit": "fbe1403e4953b87af188fe769119ccb6906a4a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwNjgwNQ==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492706805", "bodyText": "This command should be issued when the OM is already stopped before the upgrade of software bits. This is a command that starts up the OM code in a special way, with that it can start up only the current local OM, as I understand.", "author": "fapifta", "createdAt": "2020-09-22T12:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg3ODEzOA==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492878138", "bodyText": "+1 to @fapifta's reply.", "author": "avijayanhwx", "createdAt": "2020-09-22T16:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0NTY1OQ==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492845659", "bodyText": "OMRatisServer always sets this property to true. It is not configurable. Is this check still needed?", "author": "hanishakoneru", "createdAt": "2020-09-22T15:48:12Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -994,6 +1005,45 @@ public static boolean omInit(OzoneConfiguration conf) throws IOException,\n     }\n   }\n \n+  public boolean applyAllPendingTransactions()\n+      throws InterruptedException, IOException {\n+\n+    if (!isRatisEnabled) {\n+      LOG.info(\"Ratis not enabled. Nothing to do.\");\n+      return true;\n+    }\n+\n+    String purgeConfig = omRatisServer.getServer()\n+        .getProperties().get(PURGE_UPTO_SNAPSHOT_INDEX_KEY);\n+    if (!Boolean.parseBoolean(purgeConfig)) {\n+      throw new IllegalStateException(\"Cannot prepare OM for Upgrade since  \" +\n+          \"raft.server.log.purge.upto.snapshot.index is not true\");\n+    }", "originalCommit": "fbe1403e4953b87af188fe769119ccb6906a4a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NjIxMw==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492976213", "bodyText": "Maybe not. In the Ratis StateMachineUpdater, the takeSnapshot() method uses this config to  purge logs immediately after taking a state machine snapshot. Hence, I thought that it was good to have a check in place to make sure no one changes the config from within. I am ok with removing it for now, and handling snapshot + log purge in HDDS-4268 as a follow up patch.", "author": "avijayanhwx", "createdAt": "2020-09-22T19:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0NTY1OQ=="}], "type": "inlineReview"}, {"oid": "1d673af2bae60e8667422130faff24ff42761f98", "url": "https://github.com/apache/ozone/commit/1d673af2bae60e8667422130faff24ff42761f98", "message": "Add tests.", "committedDate": "2020-09-22T22:14:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ2MzI1Nw==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r493463257", "bodyText": "For OZONE_OM_FLUSH_TXNS_RETRY_INTERVAL_SECONDS , here should be 5. On RatisUpgradeUtils#waitForAllTxnsApplied, we already do the convert:\n\nlong intervalTime = TimeUnit.SECONDS.toMillis(timeBetweenRetryInSeconds);", "author": "linyiqun", "createdAt": "2020-09-23T11:13:17Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "diffHunk": "@@ -246,4 +246,9 @@ private OMConfigKeys() {\n       \"ozone.om.enable.filesystem.paths\";\n   public static final boolean OZONE_OM_ENABLE_FILESYSTEM_PATHS_DEFAULT =\n       false;\n+\n+  public static final long OZONE_OM_MAX_TIME_TO_WAIT_FLUSH_TXNS =\n+      TimeUnit.MINUTES.toSeconds(5);\n+  public static final long OZONE_OM_FLUSH_TXNS_RETRY_INTERVAL_SECONDS =\n+      TimeUnit.SECONDS.toMillis(5);", "originalCommit": "1d673af2bae60e8667422130faff24ff42761f98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyODcxOA==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r493728718", "bodyText": "Thank you, fixed!", "author": "avijayanhwx", "createdAt": "2020-09-23T16:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ2MzI1Nw=="}], "type": "inlineReview"}, {"oid": "0afcfb397c0c54a15c6b5c9e1878206d362d7628", "url": "https://github.com/apache/ozone/commit/0afcfb397c0c54a15c6b5c9e1878206d362d7628", "message": "Change default value for interval.", "committedDate": "2020-09-23T16:27:58Z", "type": "commit"}, {"oid": "cc80c48efebf2cfccacee1094268db25568380de", "url": "https://github.com/apache/ozone/commit/cc80c48efebf2cfccacee1094268db25568380de", "message": "trigger new CI check", "committedDate": "2020-09-24T20:44:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0MTE0MQ==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r496341141", "bodyText": "Wouldn't this always be true? [ curr < curr + num ]", "author": "swagle", "createdAt": "2020-09-29T02:26:17Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisUpgradeUtils.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.hdds.ratis;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.ratis.protocol.RaftGroup;\n+import org.apache.ratis.server.impl.RaftServerImpl;\n+import org.apache.ratis.server.impl.RaftServerProxy;\n+import org.apache.ratis.statemachine.StateMachine;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Ratis utility functions.\n+ */\n+public final class RatisUpgradeUtils {\n+\n+  private RatisUpgradeUtils() {\n+  }\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(RatisUpgradeUtils.class);\n+\n+  /**\n+   * Flush all committed transactions in a given Raft Server for a given group.\n+   * @param stateMachine state machine to use\n+   * @param raftGroup raft group\n+   * @param server Raft server proxy instance.\n+   * @param maxTimeToWaitSeconds Max time to wait before declaring failure.\n+   * @throws InterruptedException when interrupted\n+   * @throws IOException on error while waiting\n+   */\n+  public static void waitForAllTxnsApplied(\n+      StateMachine stateMachine,\n+      RaftGroup raftGroup,\n+      RaftServerProxy server,\n+      long maxTimeToWaitSeconds,\n+      long timeBetweenRetryInSeconds)\n+      throws InterruptedException, IOException {\n+\n+    long intervalTime = TimeUnit.SECONDS.toMillis(timeBetweenRetryInSeconds);\n+    long endTime = System.currentTimeMillis() +\n+        TimeUnit.SECONDS.toMillis(maxTimeToWaitSeconds);\n+    boolean success = false;\n+    while (System.currentTimeMillis() < endTime) {", "originalCommit": "cc80c48efebf2cfccacee1094268db25568380de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2NjEwNA==", "url": "https://github.com/apache/ozone/pull/1430#discussion_r496366104", "bodyText": "The 'curr' in the RHS was assigned before the while loop and hence does not change, the LHS 'curr' moves forward.", "author": "avijayanhwx", "createdAt": "2020-09-29T04:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0MTE0MQ=="}], "type": "inlineReview"}]}