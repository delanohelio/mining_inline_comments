{"pr_number": 3920, "pr_title": "make multi-value work for tables again (PLFM-6058)", "pr_createdAt": "2020-01-30T00:36:47Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920", "timeline": [{"oid": "520a86ad88ef5d156013da4caf4b85b92dfc992d", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/520a86ad88ef5d156013da4caf4b85b92dfc992d", "message": "fix tables for multi-value columns", "committedDate": "2020-01-28T22:51:32Z", "type": "commit"}, {"oid": "6cff3c2c4f37b6047a5000856aeb55f6aa0a2281", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/6cff3c2c4f37b6047a5000856aeb55f6aa0a2281", "message": "keep in transaction and add tests", "committedDate": "2020-01-29T03:23:22Z", "type": "commit"}, {"oid": "99c1336ef94430d95d0bcaccd931010d92751db0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/99c1336ef94430d95d0bcaccd931010d92751db0", "message": "fix duplicate key insert for index tables", "committedDate": "2020-01-29T03:57:50Z", "type": "commit"}, {"oid": "1cd0894ff012d148400894649edd9cf54ca3df70", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1cd0894ff012d148400894649edd9cf54ca3df70", "message": "start code for migrating IT100TableControllerTest test into TableViewIntegrationTest", "committedDate": "2020-01-29T04:42:55Z", "type": "commit"}, {"oid": "abed699400a33a92ab66d42c8d1eed17d41133c7", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/abed699400a33a92ab66d42c8d1eed17d41133c7", "message": "transfer IT test", "committedDate": "2020-01-30T00:32:23Z", "type": "commit"}, {"oid": "a382fd138e11d2f4212c28b1b16ba0e50702332d", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a382fd138e11d2f4212c28b1b16ba0e50702332d", "message": "Merge branch 'develop' of github.com:Sage-Bionetworks/Synapse-Repository-Services into PLFM-6058-row-diff-only", "committedDate": "2020-01-30T00:33:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzIxMg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r372717212", "bodyText": "will delete then add instead.", "author": "john-hill", "createdAt": "2020-01-30T01:18:21Z", "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SQLUtils.java", "diffHunk": "@@ -1965,7 +1965,8 @@ public static String insertIntoListColumnIndexTable(IdAndVersion tableIdAndVersi\n \t\t\t\t\" ORDINAL FOR ORDINALITY, \" +\r\n \t\t\t\t\" COLUMN_EXPAND \" + columnExpandTypeSQl + \" PATH '$'\" +\r\n \t\t\t\t\" )\" +\r\n-\t\t\t\t\") TEMP_JSON_TABLE\"+rowFilter;\r\n+\t\t\t\t\") TEMP_JSON_TABLE\"+rowFilter+\r\n+\t\t\t\t\" ON DUPLICATE KEY UPDATE \" + unnestedColumnName + \"=\" + \"TEMP_JSON_TABLE.COLUMN_EXPAND\";\r", "originalCommit": "a382fd138e11d2f4212c28b1b16ba0e50702332d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTk2NQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r372719965", "bodyText": "can add a new type of grouping to SparseChangeSet, then iterate over new grouping and both delete then add for each group of rows for each list column.", "author": "john-hill", "createdAt": "2020-01-30T01:29:42Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImpl.java", "diffHunk": "@@ -109,9 +116,37 @@ public Void doInTransaction(TransactionStatus status) {\n \t\t\t\t\t\t\t// set the new max version for the index\r\n \t\t\t\t\t\t\ttableIndexDao.setMaxCurrentCompleteVersionForTable(\r\n \t\t\t\t\t\t\t\t\ttableId, changeSetVersionNumber);\r\n+\r\n+\t\t\t\t\t\t\t//once all changes to main table are applied, populate the list-type columns with the changes.\r\n+\t\t\t\t\t\t\tfor(Map.Entry<ColumnModel, Set<Long>> entry : listColumnsToRowIdMap.entrySet()){\r\n+\t\t\t\t\t\t\t\ttableIndexDao.populateListColumnIndexTable(tableId, entry.getKey(), entry.getValue());\r\n+\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\treturn null;\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t});\r\n+\r\n+\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic static void recordListColumnChanges(Map<ColumnModel, Set<Long>> listColumnsToRowIdMap, Grouping grouping){\r", "originalCommit": "a382fd138e11d2f4212c28b1b16ba0e50702332d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "52144091520f021c00f19d4052818910e154f806", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/52144091520f021c00f19d4052818910e154f806", "message": "undo on duplicate key update for populating list column indexes", "committedDate": "2020-01-31T01:31:20Z", "type": "commit"}, {"oid": "d1b6a7522500a88266926b91ea133534363b3367", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d1b6a7522500a88266926b91ea133534363b3367", "message": "add method to delete from a list column index table to TableIndexDao", "committedDate": "2020-01-31T02:01:36Z", "type": "commit"}, {"oid": "6ce3c819a6dfc89efc9d1771f839faf012b7bc8b", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/6ce3c819a6dfc89efc9d1771f839faf012b7bc8b", "message": "use sparse row grouping for list columns", "committedDate": "2020-01-31T06:31:02Z", "type": "commit"}, {"oid": "179586636018fef0e0fe21b4968bd30698ba414a", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/179586636018fef0e0fe21b4968bd30698ba414a", "message": "Merge branch 'develop' of github.com:Sage-Bionetworks/Synapse-Repository-Services into PLFM-6058-row-diff-only", "committedDate": "2020-01-31T19:52:57Z", "type": "commit"}, {"oid": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/8339b7f8c7bc43c344134ccf1efea14036dfbdc7", "message": "undo unnecessary change in test setup", "committedDate": "2020-01-31T20:45:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMDA4NA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373700084", "bodyText": "only one null?", "author": "john-hill", "createdAt": "2020-01-31T21:46:59Z", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "diffHunk": "@@ -2597,6 +2598,117 @@ public void testCreateAndPopulateListColumnIndexTables__StringListDataTooLarge()\n \t\tassertEquals(\"The size of the column 'myList' is too small.\" +\r\n \t\t\t\t\" Unable to automatically determine the necessary size to fit all values in a STRING_LIST column\", message);\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullTableId() {\r\n+\t\ttableId = null;\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullColumn() {\r\n+\t\tColumnModel multiValue = null;\r", "originalCommit": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMDM1Nw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373700357", "bodyText": "member for the null helps reader see what is null", "author": "john-hill", "createdAt": "2020-01-31T21:47:46Z", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "diffHunk": "@@ -2597,6 +2598,117 @@ public void testCreateAndPopulateListColumnIndexTables__StringListDataTooLarge()\n \t\tassertEquals(\"The size of the column 'myList' is too small.\" +\r\n \t\t\t\t\" Unable to automatically determine the necessary size to fit all values in a STRING_LIST column\", message);\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullTableId() {\r\n+\t\ttableId = null;\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullColumn() {\r\n+\t\tColumnModel multiValue = null;\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.populateListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NotListType() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = Sets.newHashSet(1L);\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t}).getMessage();\r\n+\t\tassertEquals(\"Only valid for List type columns\", message);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_nullRowFilter() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, null);\r", "originalCommit": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMDk3NA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373700974", "bodyText": "can use the helper for the counts", "author": "john-hill", "createdAt": "2020-01-31T21:49:31Z", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "diffHunk": "@@ -2597,6 +2598,117 @@ public void testCreateAndPopulateListColumnIndexTables__StringListDataTooLarge()\n \t\tassertEquals(\"The size of the column 'myList' is too small.\" +\r\n \t\t\t\t\" Unable to automatically determine the necessary size to fit all values in a STRING_LIST column\", message);\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullTableId() {\r\n+\t\ttableId = null;\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullColumn() {\r\n+\t\tColumnModel multiValue = null;\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.populateListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NotListType() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = Sets.newHashSet(1L);\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t}).getMessage();\r\n+\t\tassertEquals(\"Only valid for List type columns\", message);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_nullRowFilter() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, null);\r\n+\t\t}).getMessage();\r\n+\t\tassertEquals(\"rowIds is required and must not be empty.\", message);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_EmptyRowFilter() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = Collections.emptySet();\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t}).getMessage();\r\n+\t\tassertEquals(\"rowIds is required and must not be empty.\", message);\r\n+\t}\r\n+\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable() {\r\n+\t\t// create a table with a long column.\r\n+\t\tColumnModel intColumn = new ColumnModel();\r\n+\t\tintColumn.setId(\"12\");\r\n+\t\tintColumn.setName(\"foo\");\r\n+\t\tintColumn.setColumnType(ColumnType.INTEGER);\r\n+\r\n+\t\tColumnModel stringListColumn = new ColumnModel();\r\n+\t\tstringListColumn.setId(\"15\");\r\n+\t\tstringListColumn.setName(\"myList\");\r\n+\t\tstringListColumn.setMaximumSize(54L);\r\n+\t\tstringListColumn.setColumnType(ColumnType.STRING_LIST);\r\n+\r\n+\r\n+\t\tColumnModel booleanColumn = new ColumnModel();\r\n+\t\tbooleanColumn.setId(\"13\");\r\n+\t\tbooleanColumn.setName(\"bar\");\r\n+\t\tbooleanColumn.setColumnType(ColumnType.BOOLEAN);\r\n+\r\n+\t\tList<ColumnModel> schema = Lists.newArrayList(intColumn, stringListColumn ,booleanColumn);\r\n+\r\n+\t\tcreateOrUpdateTable(schema, tableId, isView);\r\n+\r\n+\t\tint numRows = 5;\r\n+\t\tList<Row> rows = TableModelTestUtils.createRows(schema, numRows);\r\n+\t\tcreateOrUpdateOrDeleteRows(tableId, rows, schema);\r\n+\r\n+\t\ttableIndexDAO.populateListColumnIndexTable(tableId, stringListColumn, null);\r\n+\r\n+\t\tString listColumnindexTableName = SQLUtils.getTableNameForMultiValueColumnIndex(tableId, stringListColumn.getId());\r", "originalCommit": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMjMxMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373702310", "bodyText": "move up", "author": "john-hill", "createdAt": "2020-01-31T21:53:29Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImpl.java", "diffHunk": "@@ -109,9 +109,17 @@ public Void doInTransaction(TransactionStatus status) {\n \t\t\t\t\t\t\t// set the new max version for the index\r\n \t\t\t\t\t\t\ttableIndexDao.setMaxCurrentCompleteVersionForTable(\r\n \t\t\t\t\t\t\t\t\ttableId, changeSetVersionNumber);\r\n+\r", "originalCommit": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMjczOA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373702738", "bodyText": "remove", "author": "john-hill", "createdAt": "2020-01-31T21:54:37Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImplTest.java", "diffHunk": "@@ -1298,5 +1340,65 @@ public TableChangeMetaData setupMockColumnChange(long changeNumber) throws NotFo\n \t\t}\r\n \t\treturn schema;\r\n \t}\r\n-\t\r\n+\r\n+\tprivate class SparseRowTestImpl implements SparseRow{\r", "originalCommit": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b13fe956205b15e8110bd333664698e2bd5de499", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b13fe956205b15e8110bd333664698e2bd5de499", "message": "code review changes", "committedDate": "2020-01-31T23:05:01Z", "type": "commit"}, {"oid": "db400c2eab6b55f7c5dbe3a5628b5dbb3862d7e6", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/db400c2eab6b55f7c5dbe3a5628b5dbb3862d7e6", "message": "Merge branch 'develop' of github.com:Sage-Bionetworks/Synapse-Repository-Services into PLFM-6058-row-diff-only", "committedDate": "2020-01-31T23:41:31Z", "type": "commit"}]}