{"pr_number": 3998, "pr_title": "Plfm 6161", "pr_createdAt": "2020-04-13T20:47:46Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998", "timeline": [{"oid": "a42885acc2d81e54d2a1a701835bacbeaab86564", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a42885acc2d81e54d2a1a701835bacbeaab86564", "message": "json-schema tables DDLs and DBO objects", "committedDate": "2020-04-07T01:33:01Z", "type": "commit"}, {"oid": "ebc94ef07063906c7db47622fdd55764eb91d008", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ebc94ef07063906c7db47622fdd55764eb91d008", "message": "starting manager", "committedDate": "2020-04-07T18:58:25Z", "type": "commit"}, {"oid": "1e7d94dabea2078bc2c46ffdc814625b66d732ef", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1e7d94dabea2078bc2c46ffdc814625b66d732ef", "message": "Merge branch 'develop' into PLFM-6161", "committedDate": "2020-04-13T20:22:15Z", "type": "commit"}, {"oid": "c3c5f0db2a30f14e7dbce907151df9eeb4cf0c95", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c3c5f0db2a30f14e7dbce907151df9eeb4cf0c95", "message": "Merge branch 'PLFM-6161-id-parser' into PLFM-6161", "committedDate": "2020-04-13T20:28:38Z", "type": "commit"}, {"oid": "e73e26b63af163b266a73b40d30bbfa009e272eb", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e73e26b63af163b266a73b40d30bbfa009e272eb", "message": "switched to the new parsers and started implementing the schema DOA", "committedDate": "2020-04-14T01:33:55Z", "type": "commit"}, {"oid": "0b6ec3ecfcd2913f0fc564b4d85b329eda588007", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0b6ec3ecfcd2913f0fc564b4d85b329eda588007", "message": "use new eclipse hash/equals", "committedDate": "2020-04-14T01:37:47Z", "type": "commit"}, {"oid": "53daf5293b7acf9ce7048582d6965f79692df004", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/53daf5293b7acf9ce7048582d6965f79692df004", "message": "test fix", "committedDate": "2020-04-14T18:48:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwNzUxMQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408507511", "bodyText": "We might want to just use a simple JSON column (or a blob)", "author": "marcomarasca", "createdAt": "2020-04-15T00:12:38Z", "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaVersion-ddl.sql", "diffHunk": "@@ -0,0 +1,13 @@\n+CREATE TABLE IF NOT EXISTS `JSON_SCHEMA_VERSION` (\n+  `VERSION_NUM` BIGINT NOT NULL,\n+  `SCHEMA_ID` BIGINT NOT NULL,\n+  `SEMANTIC_VERSION` VARCHAR(250) CHARACTER SET ascii COLLATE ascii_general_ci DEFAULT NULL,\n+  `CREATED_BY` BIGINT NOT NULL,\n+  `CREATED_ON` TIMESTAMP(3) NOT NULL,\n+  `S3_BUCKET` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwOTA4MQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408509081", "bodyText": "Just call this SCHEMA_VERSION_ID", "author": "marcomarasca", "createdAt": "2020-04-15T00:18:05Z", "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaVersion-ddl.sql", "diffHunk": "@@ -0,0 +1,13 @@\n+CREATE TABLE IF NOT EXISTS `JSON_SCHEMA_VERSION` (\n+  `VERSION_NUM` BIGINT NOT NULL,", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMDE5Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408510196", "bodyText": "We can simply have two columns that point to the schema_version_id, e.g. source/target", "author": "marcomarasca", "createdAt": "2020-04-15T00:21:49Z", "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaDependency-ddl.sql", "diffHunk": "@@ -0,0 +1,8 @@\n+CREATE TABLE IF NOT EXISTS `JSON_SCHEMA_DEPENDENCY` (\n+  `VERSION_NUM` BIGINT NOT NULL,", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMjIyMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408512220", "bodyText": "Can remove duplicate", "author": "marcomarasca", "createdAt": "2020-04-15T00:28:30Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImpl.java", "diffHunk": "@@ -152,4 +157,33 @@ public Organization getOrganizationByName(UserInfo user, String name) {\n \t\treturn organizationDao.getOrganizationByName(processedOrganizationName);\n \t}\n \n+\t@WriteTransaction\n+\t@Override\n+\tpublic CreateSchemaResponse createJsonSchema(UserInfo user, CreateSchemaRequest request) {\n+\t\tValidateArgument.required(user, \"UserInfo\");\n+\t\tValidateArgument.required(request, \"request\");\n+\t\tValidateArgument.required(request.getSchema(), \"request.schema\");\n+\t\tValidateArgument.required(request.getSchema(), \"request.schema\");", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyNDA3OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408524079", "bodyText": "We might be able to avoid having a nullable id while using the select for update first and still use the insert ignore below with a new id from the id generator.", "author": "marcomarasca", "createdAt": "2020-04-15T01:12:48Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/JsonSchemaDaoImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_CREATED_BY;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_CREATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_ORG_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_JSON_SCHEMA;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.sagebionetworks.ids.IdGenerator;\n+import org.sagebionetworks.ids.IdType;\n+import org.sagebionetworks.repo.model.schema.SchemaInfo;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JsonSchemaDaoImpl implements JsonSchemaDao {\n+\n+\t@Autowired\n+\tprivate IdGenerator idGenerator;\n+\t@Autowired\n+\tprivate JdbcTemplate jdbcTemplate;\n+\n+\tpublic static final RowMapper<SchemaInfo> SCHEMA_INFO_MAPPER = new RowMapper<SchemaInfo>() {\n+\n+\t\t@Override\n+\t\tpublic SchemaInfo mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\t\t\tSchemaInfo info = new SchemaInfo();\n+\t\t\tinfo.setNumericId(rs.getString(COL_JSON_SCHEMA_ID));\n+\t\t\tinfo.setOrganizationId(rs.getString(COL_JSON_SCHEMA_ORG_ID));\n+\t\t\tinfo.setName(rs.getString(COL_JSON_SCHEMA_NAME));\n+\t\t\tinfo.setCreatedBy(rs.getString(COL_JSON_SCHEMA_CREATED_BY));\n+\t\t\tinfo.setCreatedOn(rs.getTimestamp(COL_JSON_SCHEMA_CREATED_ON));\n+\t\t\treturn info;\n+\t\t}\n+\t};\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic SchemaInfo createSchemaIfDoesNotExist(SchemaInfo schemaRoot) {\n+\t\tValidateArgument.required(schemaRoot, \"SchemaInfo\");\n+\t\tValidateArgument.required(schemaRoot.getOrganizationId(), \"schema.organizationId\");\n+\t\tValidateArgument.required(schemaRoot.getName(), \"schema.name\");\n+\t\tValidateArgument.required(schemaRoot.getCreatedBy(), \"schema.createdBy\");\n+\t\tValidateArgument.required(schemaRoot.getCreatedOn(), \"schema.createdOn\");\n+\n+\t\t// By inserting a row without an ID we ensure concurrent calls lock on the new\n+\t\t// row.\n+\t\tint updateCount = jdbcTemplate.update(", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyNzcxOQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408527719", "bodyText": "An organization name must be one or more alphanumeric strings each separated by a dot [ <alpha_num>('.'<alpha_num>)].  An alphanumeric string must start with a letter followed by one or more letters or digits a-z.  The name must be at least 6 characters and no more than 250 characters. Names are case insensitive. Names cannot contain the reserved word 'sagebionetworks'", "author": "marcomarasca", "createdAt": "2020-04-15T01:26:51Z", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/CreateOrganizationRequest.json", "diffHunk": "@@ -3,7 +3,7 @@\n \t\"properties\": {\n \t\t\"organizationName\": {\n \t\t\t\"type\": \"string\",\n-\t\t\t\"description\": \"Organization names must start and end with with a letter ([a-z]) and can contain digits [0-9] and periods \\\".\\\".  The name must be at least 3 characters and no more than 250 characters. Names are case insensitive. Names cannot contain the reserved word'sagebionetworks'\"\n+\t\t\t\"description\": \"An organization name must be one or more alphanumeric strings separated each separated by a dot [ <alaph_num>('.'<alpha_num>)*].  An alphanumeric string must start with letter followed by one or more letters or digits [a-z]([a-z0-9])*.  The name must be at least 6 characters and no more than 250 characters. Names are case insensitive. Names cannot contain the reserved word'sagebionetworks'\"", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyNzg3MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408527870", "bodyText": "reSponse", "author": "marcomarasca", "createdAt": "2020-04-15T01:27:29Z", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/CreateSchemaResponse.json", "diffHunk": "@@ -0,0 +1,14 @@\n+{\n+\t\"description\": \"The reponse of a create JsonSchema request.\",", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyNzk3OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408527979", "bodyText": "definition", "author": "marcomarasca", "createdAt": "2020-04-15T01:27:51Z", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/CreateSchemaResponse.json", "diffHunk": "@@ -0,0 +1,14 @@\n+{\n+\t\"description\": \"The reponse of a create JsonSchema request.\",\n+\t\"implements\": [\n+\t\t{\n+\t\t\t\"$ref\": \"org.sagebionetworks.repo.model.asynch.AsynchronousResponseBody\"\n+\t\t}\n+\t],\n+\t\"properties\": {\n+\t\t\"schema\": {\n+\t\t\t\"description\": \"The JsonSchema defintion to be created.\",", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyODE3Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408528172", "bodyText": "Might be removed if not used", "author": "marcomarasca", "createdAt": "2020-04-15T01:28:30Z", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/Id.json", "diffHunk": "@@ -0,0 +1,21 @@\n+{\n+\t\"description\": \"The parsed $id of a JsonSchema\",", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyODkwMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408528900", "bodyText": "backwards \\", "author": "marcomarasca", "createdAt": "2020-04-15T01:31:12Z", "path": "lib/lib-schema-id/src/main/resources/schema-id-parser.jj", "diffHunk": "@@ -18,6 +18,42 @@ public class SchemaIdParser {\n \tpublic SchemaIdParser(String input){\n \t\tthis(new StringReader(input));\n \t}\n+\t\n+\t/**\n+\t * Parse an $id string into a SchemaId object.\n+\t * \n+\t * @param id\n+\t * @throws IllegalArgumentException that wraps any ParseException\n+\t * @return\n+\t */\n+\tpublic static SchemaId parseSchemaId(String id) {\n+\t\tif(id == null) {\n+\t\t\tthrow new IllegalArgumentException(\"$id cannot be null\");\n+\t\t}\n+\t\tSchemaIdParser parser = new SchemaIdParser(id);\n+\t\ttry {\n+\t\t\treturn parser.schemaId();\n+\t\t} catch (ParseException e) {\n+\t\t\tthrow new IllegalArgumentException(\"Invalid '$id' : '\" + id + \"'/n\" + e.getMessage(), e);", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}