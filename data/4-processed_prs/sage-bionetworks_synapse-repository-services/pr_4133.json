{"pr_number": 4133, "pr_title": "PLFM-6363 Database layer for Personal Access Tokens", "pr_createdAt": "2020-07-14T18:09:01Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4133", "timeline": [{"oid": "25b6bc7f65e91b8100ea156f49682228f9da3d16", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/25b6bc7f65e91b8100ea156f49682228f9da3d16", "message": "Fix column reference on incorrect table", "committedDate": "2020-07-14T14:23:59Z", "type": "commit"}, {"oid": "a822ee1906bd3637a35c8a2a778036b368e63adc", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a822ee1906bd3637a35c8a2a778036b368e63adc", "message": "DTOs, DAO and DBO for personal access tokens", "committedDate": "2020-07-14T18:08:08Z", "type": "commit"}, {"oid": "1130e59143133394efd6d9c3aa1f3327ad1568f2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1130e59143133394efd6d9c3aa1f3327ad1568f2", "message": "Add method to update the \"last used\" field for personal access tokens", "committedDate": "2020-07-14T18:40:58Z", "type": "commit"}, {"oid": "cbbc302a18176aa3db420cc1041b2c4be4373aea", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/cbbc302a18176aa3db420cc1041b2c4be4373aea", "message": "Allow last used to be null", "committedDate": "2020-07-14T19:23:09Z", "type": "commit"}, {"oid": "4ac71585d12eae4f4a79aeae5c18229e489ad1c7", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4ac71585d12eae4f4a79aeae5c18229e489ad1c7", "message": "Put userId in the DTO (necessary for authz checks)", "committedDate": "2020-07-15T17:08:43Z", "type": "commit"}, {"oid": "ca92b1133d549d1f2258a27ea5e68db4d0c1039f", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ca92b1133d549d1f2258a27ea5e68db4d0c1039f", "message": "Remove outdated comment", "committedDate": "2020-07-15T17:09:32Z", "type": "commit"}, {"oid": "4ac71585d12eae4f4a79aeae5c18229e489ad1c7", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4ac71585d12eae4f4a79aeae5c18229e489ad1c7", "message": "Put userId in the DTO (necessary for authz checks)", "committedDate": "2020-07-15T17:08:43Z", "type": "forcePushed"}, {"oid": "81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "message": "Allow null LastUsed in DTO/DBO translation", "committedDate": "2020-07-16T15:54:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NjYxOA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4133#discussion_r455946618", "bodyText": "@param maxNumberOfTokens", "author": "brucehoff", "createdAt": "2020-07-16T17:18:55Z", "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/auth/PersonalAccessTokenDao.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.sagebionetworks.repo.model.auth;\n+\n+import org.sagebionetworks.repo.web.NotFoundException;\n+\n+public interface PersonalAccessTokenDao {\n+\n+\t/**\n+\t * Retrieve the token record/metadata, if the record exists.\n+\t * @param tokenId the unique ID of the token record to retrieve\n+\t * @throws NotFoundException if the token does not exist\n+\t */\n+\tAccessTokenRecord getTokenRecord(String tokenId) throws NotFoundException;\n+\n+\t/**\n+\t * Create a record for a personal access token. Note that the actual token is a signed JWT, and this record merely\n+\t * indicates that the token has not been explicitly revoked.\n+\t * @param metadata token information to store, excluding the ID field\n+\t * @return the new token record\n+\t */\n+\tAccessTokenRecord createTokenRecord(AccessTokenRecord metadata);\n+\n+\t/**\n+\t * Get a paginated list of token records for a user.\n+\t * @param userId the user who owns the tokens\n+\t * @param nextPageToken pagination token\n+\t * @return a paginated list of personal access token records belonging to the specified user\n+\t */\n+\tAccessTokenRecordList getTokenRecords(String userId, String nextPageToken);\n+\n+\t/**\n+\t * Set the \"last used\" time for a token to the current time.\n+\t * @param tokenId\n+\t */\n+\tvoid updateLastUsed(String tokenId);\n+\n+\t/**\n+\t * Deletes a token record by its unique token ID. This effectively revokes the token.\n+\t * @param tokenId\n+\t */\n+\tvoid deleteToken(String tokenId);\n+\n+\t/**\n+\t * Deletes the least-recently used personal access tokens for a particular user, if the number of tokens is over the limit.\n+\t * The number of remaining active refresh tokens will be the specified limit.\n+\t * @param userId", "originalCommit": "81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0ODk5Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4133#discussion_r455948992", "bodyText": "might be less code to use DBOBasicDao.deleteObjectByPrimaryKey()", "author": "brucehoff", "createdAt": "2020-07-16T17:23:01Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/auth/PersonalAccessTokenDaoImpl.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.sagebionetworks.repo.model.dbo.auth;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_PERSONAL_ACCESS_TOKEN_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_PERSONAL_ACCESS_TOKEN_LAST_USED;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_PERSONAL_ACCESS_TOKEN_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_PERSONAL_ACCESS_TOKEN;\n+\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.sagebionetworks.ids.IdGenerator;\n+import org.sagebionetworks.ids.IdType;\n+import org.sagebionetworks.repo.model.NextPageToken;\n+import org.sagebionetworks.repo.model.UnmodifiableXStream;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.dbo.SinglePrimaryKeySqlParameterSource;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOPersonalAccessToken;\n+import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimsRequestDetails;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+\n+public class PersonalAccessTokenDaoImpl implements PersonalAccessTokenDao {\n+\n+\tprivate static final String PARAM_TOKEN_ID = \"id\";\n+\tprivate static final String PARAM_LAST_USED = \"lastUsed\";\n+\tprivate static final String PARAM_PRINCIPAL_ID = \"principalId\";\n+\tprivate static final String PARAM_LIMIT = \"limitParam\";\n+\tprivate static final String PARAM_OFFSET = \"offsetParam\";\n+\tprivate static final String PARAM_MAX_NUM_TOKENS = \"maxNumberOfTokens\";\n+\n+\tprivate static final String SELECT_TOKENS_FOR_PRINCIPAL = \"SELECT * FROM \" + TABLE_PERSONAL_ACCESS_TOKEN\n+\t\t\t+ \" WHERE \" + COL_PERSONAL_ACCESS_TOKEN_PRINCIPAL_ID + \" = :\" + PARAM_PRINCIPAL_ID\n+\t\t\t+ \" ORDER BY \" + COL_PERSONAL_ACCESS_TOKEN_LAST_USED + \" DESC\"\n+\t\t\t+ \" LIMIT :\" + PARAM_LIMIT + \" OFFSET :\" + PARAM_OFFSET;\n+\n+\tprivate static final String DELETE_TOKEN_BY_ID = \"DELETE FROM \" + TABLE_PERSONAL_ACCESS_TOKEN", "originalCommit": "81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1MTU0Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4133#discussion_r455951542", "bodyText": "COL_PERSONAL_ACCESS_TOKEN_ETAG", "author": "brucehoff", "createdAt": "2020-07-16T17:27:06Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/query/jdo/SqlConstants.java", "diffHunk": "@@ -1058,6 +1058,16 @@\n \tpublic static final String COL_OAUTH_REFRESH_TOKEN_MODIFIED_ON =\t\t\t\t\t\"MODIFIED_ON\";\r\n \tpublic static final String COL_OAUTH_REFRESH_TOKEN_ETAG =\t\t\t\t\t\t\t\"ETAG\";\r\n \r\n+\tpublic static final String DDL_PERSONAL_ACCESS_TOKEN = \t\t\t\t\t\t\t\t\"schema/PersonalAccessToken-ddl.sql\";\r\n+\tpublic static final String TABLE_PERSONAL_ACCESS_TOKEN = \t\t\t\t\t\t\t\"PERSONAL_ACCESS_TOKEN\";\r\n+\tpublic static final String COL_PERSONAL_ACCESS_TOKEN_ID =\t\t\t\t\t\t\t\"ID\";\r\n+\tpublic static final String COL_PERSONAL_ACCESS_TOKEN_NAME =\t\t\t\t\t\t\t\"NAME\";\r\n+\tpublic static final String COL_PERSONAL_ACCESS_TOKEN_PRINCIPAL_ID =\t\t\t\t\t\"PRINCIPAL_ID\";\r\n+\tpublic static final String COL_PERSONAL_ACCESS_TOKEN_SCOPES =\t\t\t\t\t\t\"SCOPES\";\r\n+\tpublic static final String COL_PERSONAL_ACCESS_TOKEN_CLAIMS =\t\t\t\t\t\t\"CLAIMS\";\r\n+\tpublic static final String COL_PERSONAL_ACCESS_TOKEN_CREATED_ON =\t\t\t\t\t\"CREATED_ON\";\r\n+\tpublic static final String COL_PERSONAL_ACCESS_TOKEN_LAST_USED =\t\t\t\t\t\"LAST_USED\";\r", "originalCommit": "81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1Nzg4Nw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4133#discussion_r455957887", "bodyText": "basicdao", "author": "brucehoff", "createdAt": "2020-07-16T17:37:53Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/auth/PersonalAccessTokenDaoImpl.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.sagebionetworks.repo.model.dbo.auth;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_PERSONAL_ACCESS_TOKEN_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_PERSONAL_ACCESS_TOKEN_LAST_USED;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_PERSONAL_ACCESS_TOKEN_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_PERSONAL_ACCESS_TOKEN;\n+\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.sagebionetworks.ids.IdGenerator;\n+import org.sagebionetworks.ids.IdType;\n+import org.sagebionetworks.repo.model.NextPageToken;\n+import org.sagebionetworks.repo.model.UnmodifiableXStream;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.dbo.SinglePrimaryKeySqlParameterSource;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOPersonalAccessToken;\n+import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimsRequestDetails;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+\n+public class PersonalAccessTokenDaoImpl implements PersonalAccessTokenDao {\n+\n+\tprivate static final String PARAM_TOKEN_ID = \"id\";\n+\tprivate static final String PARAM_LAST_USED = \"lastUsed\";\n+\tprivate static final String PARAM_PRINCIPAL_ID = \"principalId\";\n+\tprivate static final String PARAM_LIMIT = \"limitParam\";\n+\tprivate static final String PARAM_OFFSET = \"offsetParam\";\n+\tprivate static final String PARAM_MAX_NUM_TOKENS = \"maxNumberOfTokens\";\n+\n+\tprivate static final String SELECT_TOKENS_FOR_PRINCIPAL = \"SELECT * FROM \" + TABLE_PERSONAL_ACCESS_TOKEN\n+\t\t\t+ \" WHERE \" + COL_PERSONAL_ACCESS_TOKEN_PRINCIPAL_ID + \" = :\" + PARAM_PRINCIPAL_ID\n+\t\t\t+ \" ORDER BY \" + COL_PERSONAL_ACCESS_TOKEN_LAST_USED + \" DESC\"\n+\t\t\t+ \" LIMIT :\" + PARAM_LIMIT + \" OFFSET :\" + PARAM_OFFSET;\n+\n+\tprivate static final String DELETE_TOKEN_BY_ID = \"DELETE FROM \" + TABLE_PERSONAL_ACCESS_TOKEN\n+\t\t\t+ \" WHERE \" + COL_PERSONAL_ACCESS_TOKEN_ID + \" = :\" + PARAM_TOKEN_ID;\n+\n+\tprivate static final String UPDATE_LAST_USED = \"UPDATE \" + TABLE_PERSONAL_ACCESS_TOKEN+\n+\t\t\t\" SET \"+\n+\t\t\tCOL_PERSONAL_ACCESS_TOKEN_LAST_USED+\" = :\" + PARAM_LAST_USED +\n+\t\t\t\" WHERE \"+ COL_PERSONAL_ACCESS_TOKEN_ID+\" = :\" + PARAM_TOKEN_ID;\n+\n+\n+\t/*\n+\t * We use a JOIN because\n+\t *   - MySQL doesn't support OFFSET when using DELETE\n+\t *   - MySQL doesn't support LIMIT & IN/ALL/ANY/SOME subquery (so we can't do DELETE WHERE id IN (SELECT ... LIMIT x OFFSET y))\n+\t *\n+\t * https://stackoverflow.com/a/42030157\n+\t *\n+\t * Additionally, there is no need to check expiration date because tokens that are \"revoked\" have been deleted, so they will not count against the limit.\n+\t */\n+\tprivate static final String DELETE_LEAST_RECENTLY_USED_TOKENS = \"DELETE t FROM \" + TABLE_PERSONAL_ACCESS_TOKEN + \" t \"\n+\t\t\t+ \" JOIN (\"\n+\t\t\t\t+ \"SELECT tt.\" + COL_PERSONAL_ACCESS_TOKEN_ID\n+\t\t\t\t+ \" FROM \" + TABLE_PERSONAL_ACCESS_TOKEN + \" tt \"\n+\t\t\t\t+ \" WHERE \" + COL_PERSONAL_ACCESS_TOKEN_PRINCIPAL_ID + \" = :\" + PARAM_PRINCIPAL_ID\n+\t\t\t\t+ \" ORDER BY \" + COL_PERSONAL_ACCESS_TOKEN_LAST_USED + \" DESC \"\n+\t\t\t\t+ \" LIMIT 18446744073709551615 OFFSET :\" + PARAM_MAX_NUM_TOKENS //Limit is still required even if you just want offset: https://stackoverflow.com/questions/255517/mysql-offset-infinite-rows\n+\t\t\t+ \") tt ON t.\" + COL_PERSONAL_ACCESS_TOKEN_ID + \" = tt.\" + COL_PERSONAL_ACCESS_TOKEN_ID;\n+\n+\t@Autowired\n+\tprivate DBOBasicDao basicDao;\n+\n+\t@Autowired\n+\tprivate IdGenerator idGenerator;\n+\n+\t@Autowired\n+\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+\n+\tprivate static final TableMapping<DBOPersonalAccessToken> PERSONAL_ACCESS_TOKEN_TABLE_MAPPING = (new DBOPersonalAccessToken()).getTableMapping();\n+\t// We serialize explicitly chosen fields, not the entire DTO, so no need to omit fields in the builder\n+\tprivate static final UnmodifiableXStream X_STREAM = UnmodifiableXStream.builder().build();\n+\n+\tpublic static DBOPersonalAccessToken personalAccessTokenDtoToDbo(AccessTokenRecord dto) {\n+\t\tDBOPersonalAccessToken dbo = new DBOPersonalAccessToken();\n+\t\ttry {\n+\t\t\tdbo.setScopes(JDOSecondaryPropertyUtils.compressObject(X_STREAM, dto.getScopes()));\n+\t\t\tdbo.setClaims(JDOSecondaryPropertyUtils.compressObject(X_STREAM, dto.getUserInfoClaims()));\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\tdbo.setId(Long.parseLong(dto.getId()));\n+\t\tdbo.setPrincipalId(Long.parseLong(dto.getUserId()));\n+\t\tdbo.setName(dto.getName());\n+\t\tdbo.setCreatedOn(new Timestamp(dto.getCreatedOn().getTime()));\n+\t\tif (dto.getLastUsed() != null) {\n+\t\t\tdbo.setLastUsed(new Timestamp(dto.getLastUsed().getTime()));\n+\t\t}\n+\t\treturn dbo;\n+\t}\n+\n+\tpublic static AccessTokenRecord personalAccessTokenDboToDto(DBOPersonalAccessToken dbo) {\n+\t\tAccessTokenRecord dto = new AccessTokenRecord();\n+\t\ttry {\n+\t\t\tdto.setScopes((List<OAuthScope>) JDOSecondaryPropertyUtils.decompressObject(X_STREAM, dbo.getScopes()));\n+\t\t\tdto.setUserInfoClaims((Map<String, OIDCClaimsRequestDetails>) JDOSecondaryPropertyUtils.decompressObject(X_STREAM, dbo.getClaims()));\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\tdto.setId(dbo.getId().toString());\n+\t\tdto.setUserId(dbo.getPrincipalId().toString());\n+\t\tdto.setName(dbo.getName());\n+\t\t// Timestamp must be converted to Date for .equals to work on the DTO\n+\t\tdto.setCreatedOn(new Date(dbo.getCreatedOn().getTime()));\n+\t\tif (dbo.getLastUsed() != null) {\n+\t\t\tdto.setLastUsed(new Date(dbo.getLastUsed().getTime()));\n+\t\t}\n+\t\treturn dto;\n+\t}\n+\n+\t@Override\n+\tpublic AccessTokenRecord getTokenRecord(String tokenId) throws NotFoundException {\n+\t\tSinglePrimaryKeySqlParameterSource params = new SinglePrimaryKeySqlParameterSource(tokenId);\n+\t\tDBOPersonalAccessToken dbo =  basicDao.getObjectByPrimaryKey(DBOPersonalAccessToken.class, params);\n+\t\treturn personalAccessTokenDboToDto(dbo);\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic AccessTokenRecord createTokenRecord(AccessTokenRecord metadata) {\n+\t\tValidateArgument.required(metadata.getUserId(), \"userId\");\n+\t\tValidateArgument.required(metadata.getName(), \"Token Name\");\n+\t\tValidateArgument.required(metadata.getScopes(), \"Scope\");\n+\t\tValidateArgument.required(metadata.getUserInfoClaims(), \"Claims\");\n+\t\tValidateArgument.required(metadata.getCreatedOn(), \"Created On\");\n+\t\tmetadata.setId(idGenerator.generateNewId(IdType.PERSONAL_ACCESS_TOKEN_ID).toString());\n+\t\tDBOPersonalAccessToken dbo = personalAccessTokenDtoToDbo(metadata);\n+\t\tbasicDao.createNew(dbo);\n+\t\treturn this.getTokenRecord(dbo.getId().toString());\n+\t}\n+\n+\t@Override\n+\tpublic AccessTokenRecordList getTokenRecords(String userId, String nextPageToken) {\n+\t\tNextPageToken nextPage = new NextPageToken(nextPageToken);\n+\t\tMapSqlParameterSource params = new MapSqlParameterSource();\n+\t\tparams.addValue(PARAM_PRINCIPAL_ID, userId);\n+\t\tparams.addValue(PARAM_LIMIT, nextPage.getLimitForQuery());\n+\t\tparams.addValue(PARAM_OFFSET, nextPage.getOffset());\n+\n+\t\tList<DBOPersonalAccessToken> tokenDbos = namedParameterJdbcTemplate.query(\n+\t\t\t\tSELECT_TOKENS_FOR_PRINCIPAL, params, PERSONAL_ACCESS_TOKEN_TABLE_MAPPING);\n+\t\tAccessTokenRecordList result = new AccessTokenRecordList();\n+\t\tresult.setNextPageToken(nextPage.getNextPageTokenForCurrentResults(tokenDbos));\n+\t\tresult.setResults(\n+\t\t\t\ttokenDbos.stream().map(PersonalAccessTokenDaoImpl::personalAccessTokenDboToDto).collect(Collectors.toList())\n+\t\t);\n+\t\treturn result;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void updateLastUsed(String tokenId) {\n+\t\tDate now = new Date();\n+\t\tMapSqlParameterSource params = new MapSqlParameterSource();\n+\t\tparams.addValue(PARAM_TOKEN_ID, tokenId);\n+\t\tparams.addValue(PARAM_LAST_USED, now);\n+\n+\t\tnamedParameterJdbcTemplate.update(UPDATE_LAST_USED, params);\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void deleteToken(String tokenId) {\n+\t\tValidateArgument.required(tokenId, \"tokenId\");", "originalCommit": "81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDg1NA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4133#discussion_r455960854", "bodyText": "replace with createDto()", "author": "brucehoff", "createdAt": "2020-07-16T17:43:08Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/auth/PersonalAccessTokenDaoAutowiredTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.sagebionetworks.repo.model.dbo.auth;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.sagebionetworks.repo.model.AuthorizationConstants;\n+import org.sagebionetworks.repo.model.NextPageToken;\n+import org.sagebionetworks.repo.model.UnmodifiableXStream;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOPersonalAccessToken;\n+import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimsRequestDetails;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = {\"classpath:jdomodels-test-context.xml\"})\n+public class PersonalAccessTokenDaoAutowiredTest {\n+\n+\tprivate List<String> tokenIdsToDelete;\n+\n+\tprivate static final String userId = AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId().toString();\n+\n+\tprivate static final UnmodifiableXStream X_STREAM = UnmodifiableXStream.builder().build();\n+\n+\tprivate static final Long ONE_HOUR_MILLIS = 1000L * 60 * 60;\n+\tprivate static final Long ONE_DAY_MILLIS = ONE_HOUR_MILLIS * 24;\n+\tprivate static final Long ONE_YEAR_MILLIS = ONE_DAY_MILLIS * 365;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\n+\t@BeforeEach\n+\tpublic void beforeEach() {\n+\t\ttokenIdsToDelete = new ArrayList<>();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void afterEach() {\n+\t\tfor (String id : tokenIdsToDelete) {\n+\t\t\ttry {\n+\t\t\t\tpersonalAccessTokenDao.deleteToken(id);\n+\t\t\t} catch (NotFoundException e) {\n+\t\t\t\t// Ignore\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates a DTO for testing. Does not create a record in the database, so the ID will be null.\n+\t * @return\n+\t */\n+\tprivate static AccessTokenRecord createDto(String userId, Date lastUsedDate) {\n+\t\tAccessTokenRecord record = new AccessTokenRecord();\n+\t\trecord.setUserId(userId);\n+\t\trecord.setName(UUID.randomUUID().toString());\n+\t\trecord.setScopes(Collections.singletonList(OAuthScope.view));\n+\t\trecord.setUserInfoClaims(new HashMap<>());\n+\t\trecord.setCreatedOn(new Date());\n+\t\trecord.setLastUsed(lastUsedDate);\n+\t\treturn record;\n+\t}\n+\n+\tprivate AccessTokenRecord createTokenRecord(String userId, Date lastUsedDate) {\n+\t\tAccessTokenRecord record = createDto(userId, lastUsedDate);\n+\t\trecord = personalAccessTokenDao.createTokenRecord(record);\n+\t\ttokenIdsToDelete.add(record.getId());\n+\t\treturn record;\n+\t}\n+\n+\t@Test\n+\tvoid testDtoToDboAndBack() {\n+\t\tAccessTokenRecord dto = new AccessTokenRecord();", "originalCommit": "81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2Mzc4MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4133#discussion_r455963780", "bodyText": "Thread.sleep(100L);", "author": "brucehoff", "createdAt": "2020-07-16T17:47:49Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/auth/PersonalAccessTokenDaoAutowiredTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.sagebionetworks.repo.model.dbo.auth;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.sagebionetworks.repo.model.AuthorizationConstants;\n+import org.sagebionetworks.repo.model.NextPageToken;\n+import org.sagebionetworks.repo.model.UnmodifiableXStream;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOPersonalAccessToken;\n+import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimsRequestDetails;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = {\"classpath:jdomodels-test-context.xml\"})\n+public class PersonalAccessTokenDaoAutowiredTest {\n+\n+\tprivate List<String> tokenIdsToDelete;\n+\n+\tprivate static final String userId = AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId().toString();\n+\n+\tprivate static final UnmodifiableXStream X_STREAM = UnmodifiableXStream.builder().build();\n+\n+\tprivate static final Long ONE_HOUR_MILLIS = 1000L * 60 * 60;\n+\tprivate static final Long ONE_DAY_MILLIS = ONE_HOUR_MILLIS * 24;\n+\tprivate static final Long ONE_YEAR_MILLIS = ONE_DAY_MILLIS * 365;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\n+\t@BeforeEach\n+\tpublic void beforeEach() {\n+\t\ttokenIdsToDelete = new ArrayList<>();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void afterEach() {\n+\t\tfor (String id : tokenIdsToDelete) {\n+\t\t\ttry {\n+\t\t\t\tpersonalAccessTokenDao.deleteToken(id);\n+\t\t\t} catch (NotFoundException e) {\n+\t\t\t\t// Ignore\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates a DTO for testing. Does not create a record in the database, so the ID will be null.\n+\t * @return\n+\t */\n+\tprivate static AccessTokenRecord createDto(String userId, Date lastUsedDate) {\n+\t\tAccessTokenRecord record = new AccessTokenRecord();\n+\t\trecord.setUserId(userId);\n+\t\trecord.setName(UUID.randomUUID().toString());\n+\t\trecord.setScopes(Collections.singletonList(OAuthScope.view));\n+\t\trecord.setUserInfoClaims(new HashMap<>());\n+\t\trecord.setCreatedOn(new Date());\n+\t\trecord.setLastUsed(lastUsedDate);\n+\t\treturn record;\n+\t}\n+\n+\tprivate AccessTokenRecord createTokenRecord(String userId, Date lastUsedDate) {\n+\t\tAccessTokenRecord record = createDto(userId, lastUsedDate);\n+\t\trecord = personalAccessTokenDao.createTokenRecord(record);\n+\t\ttokenIdsToDelete.add(record.getId());\n+\t\treturn record;\n+\t}\n+\n+\t@Test\n+\tvoid testDtoToDboAndBack() {\n+\t\tAccessTokenRecord dto = new AccessTokenRecord();\n+\t\tdto.setId(\"111111\");\n+\t\tdto.setUserId(\"22222\");\n+\t\tdto.setName(UUID.randomUUID().toString());\n+\t\tdto.setScopes(Arrays.asList(OAuthScope.modify, OAuthScope.authorize));\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsMap = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails claimDetails = new OIDCClaimsRequestDetails();\n+\t\tclaimDetails.setEssential(true);\n+\t\tclaimsMap.put(\"userid\", claimDetails);\n+\t\tdto.setUserInfoClaims(claimsMap);\n+\t\tdto.setCreatedOn(new Date());\n+\t\tdto.setLastUsed(new Date());\n+\n+\t\t// Call under test -- map to DBO and back\n+\t\tAccessTokenRecord mapped = PersonalAccessTokenDaoImpl.personalAccessTokenDboToDto(\n+\t\t\t\tPersonalAccessTokenDaoImpl.personalAccessTokenDtoToDbo(dto)\n+\t\t);\n+\n+\t\tassertEquals(dto, mapped);\n+\t}\n+\n+\t@Test\n+\tvoid testDboToDtoAndBack() throws Exception {\n+\t\tDBOPersonalAccessToken dbo = new DBOPersonalAccessToken();\n+\t\tdbo.setName(UUID.randomUUID().toString());\n+\t\tdbo.setId(11111L);\n+\t\tdbo.setPrincipalId(Long.valueOf(userId));\n+\t\tdbo.setScopes(JDOSecondaryPropertyUtils.compressObject(X_STREAM, Arrays.asList(OAuthScope.modify, OAuthScope.authorize)));\n+\t\tMap<String, OIDCClaimsRequestDetails> userInfoClaims = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails detail = new OIDCClaimsRequestDetails();\n+\t\tdetail.setEssential(true);\n+\t\tuserInfoClaims.put(\"userid\", detail);\n+\t\tdbo.setClaims(JDOSecondaryPropertyUtils.compressObject(X_STREAM, userInfoClaims));\n+\t\tdbo.setCreatedOn(new Timestamp(System.currentTimeMillis()));\n+\t\tdbo.setLastUsed(new Timestamp(System.currentTimeMillis()));\n+\n+\t\t// Call under test -- map to DBO and back\n+\t\tDBOPersonalAccessToken mapped = PersonalAccessTokenDaoImpl.personalAccessTokenDtoToDbo(\n+\t\t\t\tPersonalAccessTokenDaoImpl.personalAccessTokenDboToDto(dbo));\n+\t\tassertEquals(dbo, mapped);\n+\t}\n+\n+\t@Test\n+\tvoid testCreateGetDelete() {\n+\t\tAccessTokenRecord record = createDto(userId, new Date());\n+\n+\t\t// method under test -- create\n+\t\tAccessTokenRecord created = personalAccessTokenDao.createTokenRecord(record);\n+\n+\t\tassertNotNull(created.getId());\n+\t\trecord.setId(created.getId());\n+\t\tassertEquals(record, created);\n+\n+\t\t// method under test -- get\n+\t\tAccessTokenRecord retrieved = personalAccessTokenDao.getTokenRecord(created.getId());\n+\t\tassertEquals(created, retrieved);\n+\n+\t\t// method under test -- delete\n+\t\tpersonalAccessTokenDao.deleteToken(retrieved.getId());\n+\t\tassertThrows(NotFoundException.class, () -> personalAccessTokenDao.getTokenRecord(retrieved.getId()));\n+\t}\n+\n+\t@Test\n+\tvoid testUpdateLastUsed() {\n+\t\tAccessTokenRecord tokenRecord = createTokenRecord(userId, new Date(System.currentTimeMillis() - ONE_HOUR_MILLIS));\n+\n+\t\t// method under test", "originalCommit": "81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NDA5MQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4133#discussion_r455964091", "bodyText": "Replace \">=\" with \">\"", "author": "brucehoff", "createdAt": "2020-07-16T17:48:15Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/auth/PersonalAccessTokenDaoAutowiredTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.sagebionetworks.repo.model.dbo.auth;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.sagebionetworks.repo.model.AuthorizationConstants;\n+import org.sagebionetworks.repo.model.NextPageToken;\n+import org.sagebionetworks.repo.model.UnmodifiableXStream;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOPersonalAccessToken;\n+import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimsRequestDetails;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = {\"classpath:jdomodels-test-context.xml\"})\n+public class PersonalAccessTokenDaoAutowiredTest {\n+\n+\tprivate List<String> tokenIdsToDelete;\n+\n+\tprivate static final String userId = AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId().toString();\n+\n+\tprivate static final UnmodifiableXStream X_STREAM = UnmodifiableXStream.builder().build();\n+\n+\tprivate static final Long ONE_HOUR_MILLIS = 1000L * 60 * 60;\n+\tprivate static final Long ONE_DAY_MILLIS = ONE_HOUR_MILLIS * 24;\n+\tprivate static final Long ONE_YEAR_MILLIS = ONE_DAY_MILLIS * 365;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\n+\t@BeforeEach\n+\tpublic void beforeEach() {\n+\t\ttokenIdsToDelete = new ArrayList<>();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void afterEach() {\n+\t\tfor (String id : tokenIdsToDelete) {\n+\t\t\ttry {\n+\t\t\t\tpersonalAccessTokenDao.deleteToken(id);\n+\t\t\t} catch (NotFoundException e) {\n+\t\t\t\t// Ignore\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates a DTO for testing. Does not create a record in the database, so the ID will be null.\n+\t * @return\n+\t */\n+\tprivate static AccessTokenRecord createDto(String userId, Date lastUsedDate) {\n+\t\tAccessTokenRecord record = new AccessTokenRecord();\n+\t\trecord.setUserId(userId);\n+\t\trecord.setName(UUID.randomUUID().toString());\n+\t\trecord.setScopes(Collections.singletonList(OAuthScope.view));\n+\t\trecord.setUserInfoClaims(new HashMap<>());\n+\t\trecord.setCreatedOn(new Date());\n+\t\trecord.setLastUsed(lastUsedDate);\n+\t\treturn record;\n+\t}\n+\n+\tprivate AccessTokenRecord createTokenRecord(String userId, Date lastUsedDate) {\n+\t\tAccessTokenRecord record = createDto(userId, lastUsedDate);\n+\t\trecord = personalAccessTokenDao.createTokenRecord(record);\n+\t\ttokenIdsToDelete.add(record.getId());\n+\t\treturn record;\n+\t}\n+\n+\t@Test\n+\tvoid testDtoToDboAndBack() {\n+\t\tAccessTokenRecord dto = new AccessTokenRecord();\n+\t\tdto.setId(\"111111\");\n+\t\tdto.setUserId(\"22222\");\n+\t\tdto.setName(UUID.randomUUID().toString());\n+\t\tdto.setScopes(Arrays.asList(OAuthScope.modify, OAuthScope.authorize));\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsMap = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails claimDetails = new OIDCClaimsRequestDetails();\n+\t\tclaimDetails.setEssential(true);\n+\t\tclaimsMap.put(\"userid\", claimDetails);\n+\t\tdto.setUserInfoClaims(claimsMap);\n+\t\tdto.setCreatedOn(new Date());\n+\t\tdto.setLastUsed(new Date());\n+\n+\t\t// Call under test -- map to DBO and back\n+\t\tAccessTokenRecord mapped = PersonalAccessTokenDaoImpl.personalAccessTokenDboToDto(\n+\t\t\t\tPersonalAccessTokenDaoImpl.personalAccessTokenDtoToDbo(dto)\n+\t\t);\n+\n+\t\tassertEquals(dto, mapped);\n+\t}\n+\n+\t@Test\n+\tvoid testDboToDtoAndBack() throws Exception {\n+\t\tDBOPersonalAccessToken dbo = new DBOPersonalAccessToken();\n+\t\tdbo.setName(UUID.randomUUID().toString());\n+\t\tdbo.setId(11111L);\n+\t\tdbo.setPrincipalId(Long.valueOf(userId));\n+\t\tdbo.setScopes(JDOSecondaryPropertyUtils.compressObject(X_STREAM, Arrays.asList(OAuthScope.modify, OAuthScope.authorize)));\n+\t\tMap<String, OIDCClaimsRequestDetails> userInfoClaims = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails detail = new OIDCClaimsRequestDetails();\n+\t\tdetail.setEssential(true);\n+\t\tuserInfoClaims.put(\"userid\", detail);\n+\t\tdbo.setClaims(JDOSecondaryPropertyUtils.compressObject(X_STREAM, userInfoClaims));\n+\t\tdbo.setCreatedOn(new Timestamp(System.currentTimeMillis()));\n+\t\tdbo.setLastUsed(new Timestamp(System.currentTimeMillis()));\n+\n+\t\t// Call under test -- map to DBO and back\n+\t\tDBOPersonalAccessToken mapped = PersonalAccessTokenDaoImpl.personalAccessTokenDtoToDbo(\n+\t\t\t\tPersonalAccessTokenDaoImpl.personalAccessTokenDboToDto(dbo));\n+\t\tassertEquals(dbo, mapped);\n+\t}\n+\n+\t@Test\n+\tvoid testCreateGetDelete() {\n+\t\tAccessTokenRecord record = createDto(userId, new Date());\n+\n+\t\t// method under test -- create\n+\t\tAccessTokenRecord created = personalAccessTokenDao.createTokenRecord(record);\n+\n+\t\tassertNotNull(created.getId());\n+\t\trecord.setId(created.getId());\n+\t\tassertEquals(record, created);\n+\n+\t\t// method under test -- get\n+\t\tAccessTokenRecord retrieved = personalAccessTokenDao.getTokenRecord(created.getId());\n+\t\tassertEquals(created, retrieved);\n+\n+\t\t// method under test -- delete\n+\t\tpersonalAccessTokenDao.deleteToken(retrieved.getId());\n+\t\tassertThrows(NotFoundException.class, () -> personalAccessTokenDao.getTokenRecord(retrieved.getId()));\n+\t}\n+\n+\t@Test\n+\tvoid testUpdateLastUsed() {\n+\t\tAccessTokenRecord tokenRecord = createTokenRecord(userId, new Date(System.currentTimeMillis() - ONE_HOUR_MILLIS));\n+\n+\t\t// method under test\n+\t\tpersonalAccessTokenDao.updateLastUsed(tokenRecord.getId());\n+\n+\t\tAccessTokenRecord updated = personalAccessTokenDao.getTokenRecord(tokenRecord.getId());\n+\t\tassertTrue(updated.getLastUsed().getTime() >= tokenRecord.getLastUsed().getTime());", "originalCommit": "81f219bf6cbf75f56d7c6f9af6b263ffdb2113da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8031fc5c6f2ad41599ff6d7a0f38f464038b8e55", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/8031fc5c6f2ad41599ff6d7a0f38f464038b8e55", "message": "Code review changes for DAO", "committedDate": "2020-07-17T12:12:27Z", "type": "commit"}]}