{"pr_number": 3987, "pr_title": "Plfm 6160", "pr_createdAt": "2020-04-01T20:43:44Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987", "timeline": [{"oid": "c544542372690bb7694b510119e775ea4ecee288", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c544542372690bb7694b510119e775ea4ecee288", "message": "organization dto, dbo, and dao", "committedDate": "2020-03-31T23:41:15Z", "type": "commit"}, {"oid": "6f45cde07327a590964540ecb8e4842a9c2ed0ee", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/6f45cde07327a590964540ecb8e4842a9c2ed0ee", "message": "schema manager layer", "committedDate": "2020-04-01T20:42:06Z", "type": "commit"}, {"oid": "68614fbb14186a73a0e38842a78e3ccade564dfa", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/68614fbb14186a73a0e38842a78e3ccade564dfa", "message": "schema controller and more manager methods and tests", "committedDate": "2020-04-02T00:16:40Z", "type": "commit"}, {"oid": "b2c642a9bd5385bb9f27635de971a9ad21effac3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b2c642a9bd5385bb9f27635de971a9ad21effac3", "message": "support for java client and integration tests", "committedDate": "2020-04-02T00:53:14Z", "type": "commit"}, {"oid": "21f30b0526ede1f6e559bc8bbec335f5cc16f462", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/21f30b0526ede1f6e559bc8bbec335f5cc16f462", "message": "missing service tag", "committedDate": "2020-04-02T01:06:31Z", "type": "commit"}, {"oid": "c48b997ac149de4f6377eb61436ff08f68defca0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c48b997ac149de4f6377eb61436ff08f68defca0", "message": "fixed broken test", "committedDate": "2020-04-02T02:04:58Z", "type": "commit"}, {"oid": "0a05f183af4de6591365572326a3b600b46cc0b5", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0a05f183af4de6591365572326a3b600b46cc0b5", "message": "post not put", "committedDate": "2020-04-02T18:21:11Z", "type": "commit"}, {"oid": "b36ceb862befad506ae87426647b52d70a01a7c5", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b36ceb862befad506ae87426647b52d70a01a7c5", "message": "missing body", "committedDate": "2020-04-02T19:22:06Z", "type": "commit"}, {"oid": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/869aaa0ce427a4cc6c3a15672033ec64d38461c6", "message": "add organization to acl", "committedDate": "2020-04-02T21:23:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzNjQ4NQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402636485", "bodyText": "either by id or method name change", "author": "marcomarasca", "createdAt": "2020-04-02T22:38:54Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/OrganizationDao.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import org.sagebionetworks.repo.model.schema.Organization;\n+\n+public interface OrganizationDao {\n+\n+\t/**\n+\t * Create a new Organization.\n+\t * \n+\t * @param name\n+\t * @param createdBy\n+\t * @return\n+\t */\n+\tOrganization createOrganization(String name, Long createdBy);\n+\n+\t/**\n+\t * Get an Organization by name.\n+\t * \n+\t * @param name\n+\t * @return\n+\t */\n+\tOrganization getOrganizationByName(String name);\n+\n+\t/**\n+\t * Delete an organization by name.", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzNzE2NA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402637164", "bodyText": "private", "author": "marcomarasca", "createdAt": "2020-04-02T22:40:39Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/DBOOrganization.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_BY;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.DDL_FILE_ORGANIZATION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_ORGANIZATION;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.List;\n+\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+public class DBOOrganization implements MigratableDatabaseObject<DBOOrganization, DBOOrganization> {\n+\n+\tprivate static FieldColumn[] FIELDS = new FieldColumn[] {\n+\t\t\tnew FieldColumn(\"id\", COL_ORGANIZATION_ID, true).withIsBackupId(true),\n+\t\t\tnew FieldColumn(\"name\", COL_ORGANIZATION_NAME),\n+\t\t\tnew FieldColumn(\"createdBy\", COL_ORGANIZATION_CREATED_BY),\n+\t\t\tnew FieldColumn(\"createdOn\", COL_ORGANIZATION_CREATED_ON), };\n+\n+\tLong id;", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzODU0Nw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402638547", "bodyText": "Can be extracted to a constant", "author": "marcomarasca", "createdAt": "2020-04-02T22:44:20Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/DBOOrganization.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_BY;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.DDL_FILE_ORGANIZATION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_ORGANIZATION;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.List;\n+\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+public class DBOOrganization implements MigratableDatabaseObject<DBOOrganization, DBOOrganization> {\n+\n+\tprivate static FieldColumn[] FIELDS = new FieldColumn[] {\n+\t\t\tnew FieldColumn(\"id\", COL_ORGANIZATION_ID, true).withIsBackupId(true),\n+\t\t\tnew FieldColumn(\"name\", COL_ORGANIZATION_NAME),\n+\t\t\tnew FieldColumn(\"createdBy\", COL_ORGANIZATION_CREATED_BY),\n+\t\t\tnew FieldColumn(\"createdOn\", COL_ORGANIZATION_CREATED_ON), };\n+\n+\tLong id;\n+\tString name;\n+\tLong createdBy;\n+\tTimestamp createdOn;\n+\n+\t@Override\n+\tpublic TableMapping<DBOOrganization> getTableMapping() {\n+\t\treturn new TableMapping<DBOOrganization>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic DBOOrganization mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\t\t\t\tDBOOrganization dbo = new DBOOrganization();\n+\t\t\t\tdbo.setId(rs.getLong(COL_ORGANIZATION_ID));\n+\t\t\t\tdbo.setName(rs.getString(COL_ORGANIZATION_NAME));\n+\t\t\t\tdbo.setCreatedBy(rs.getLong(COL_ORGANIZATION_CREATED_BY));\n+\t\t\t\tdbo.setCreatedOn(rs.getTimestamp(COL_ORGANIZATION_CREATED_ON));\n+\t\t\t\treturn dbo;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getTableName() {\n+\t\t\t\treturn TABLE_ORGANIZATION;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getDDLFileName() {\n+\t\t\t\treturn DDL_FILE_ORGANIZATION;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic FieldColumn[] getFieldColumns() {\n+\t\t\t\treturn FIELDS;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Class<? extends DBOOrganization> getDBOClass() {\n+\t\t\t\treturn DBOOrganization.class;\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Long id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic Long getCreatedBy() {\n+\t\treturn createdBy;\n+\t}\n+\n+\tpublic void setCreatedBy(Long createdBy) {\n+\t\tthis.createdBy = createdBy;\n+\t}\n+\n+\tpublic Timestamp getCreatedOn() {\n+\t\treturn createdOn;\n+\t}\n+\n+\tpublic void setCreatedOn(Timestamp createdOn) {\n+\t\tthis.createdOn = createdOn;\n+\t}\n+\n+\t@Override\n+\tpublic MigrationType getMigratableTableType() {\n+\t\treturn MigrationType.ORGANIZATION;\n+\t}\n+\n+\t@Override\n+\tpublic MigratableTableTranslation<DBOOrganization, DBOOrganization> getTranslator() {\n+\t\treturn new BasicMigratableTableTranslation<DBOOrganization>();", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0MjMxMw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402642313", "bodyText": "String.valueOf", "author": "marcomarasca", "createdAt": "2020-04-02T22:54:54Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/OrganizationDaoImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_ORGANIZATION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_BY;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.DDL_FILE_ORGANIZATION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_ORGANIZATION;\n+\n+import java.sql.Timestamp;\n+\n+import org.sagebionetworks.ids.IdGenerator;\n+import org.sagebionetworks.ids.IdType;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.DuplicateKeyException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class OrganizationDaoImpl implements OrganizationDao {\n+\n+\t@Autowired\n+\tDBOBasicDao basicDao;\n+\t@Autowired\n+\tIdGenerator idGenerator;\n+\t@Autowired\n+\tJdbcTemplate jdbcTemplate;\n+\n+\tstatic final RowMapper<DBOOrganization> ROW_MAPPER = new DBOOrganization().getTableMapping();\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic Organization createOrganization(String name, Long createdBy) {\n+\t\tValidateArgument.required(name, \"name\");\n+\t\tValidateArgument.required(createdBy, \"createdBy\");\n+\t\tDBOOrganization dbo = new DBOOrganization();\n+\t\tdbo.setName(name.toLowerCase());\n+\t\tdbo.setCreatedBy(createdBy);\n+\t\tdbo.setCreatedOn(new Timestamp(System.currentTimeMillis()));\n+\t\tdbo.setId(idGenerator.generateNewId(IdType.ORGANIZATION_ID));\n+\n+\t\ttry {\n+\t\t\tjdbcTemplate.update(\n+\t\t\t\t\t\"INSERT INTO \" + TABLE_ORGANIZATION + \" (\" + COL_ORGANIZATION_ID + \",\" + COL_ORGANIZATION_NAME + \",\"\n+\t\t\t\t\t\t\t+ COL_ORGANIZATION_CREATED_BY + \",\" + COL_ORGANIZATION_CREATED_ON + \") VALUES (?,?,?,?)\",\n+\t\t\t\t\tdbo.getId(), dbo.getName(), dbo.getCreatedBy(), dbo.getCreatedOn());\n+\t\t} catch (DuplicateKeyException e) {\n+\t\t\tthrow new IllegalArgumentException(\"An Organization with the name: '\" + dbo.getName() + \"' already exists\",\n+\t\t\t\t\te);\n+\t\t}\n+\t\t\n+\t\treturn getOrganizationByName(dbo.getName());\n+\t}\n+\n+\t@Override\n+\tpublic Organization getOrganizationByName(String name) {\n+\t\tValidateArgument.required(name, \"name\");\n+\t\ttry {\n+\t\t\tDBOOrganization dbo = jdbcTemplate.queryForObject(\n+\t\t\t\t\t\"SELECT * FROM \" + TABLE_ORGANIZATION + \" WHERE \" + COL_ORGANIZATION_NAME + \" = ?\", ROW_MAPPER,\n+\t\t\t\t\tname.toLowerCase());\n+\t\t\treturn createDtoFromDbo(dbo);\n+\t\t} catch (EmptyResultDataAccessException e) {\n+\t\t\tthrow new NotFoundException(\"Orgnaization with name: '\" + name.toLowerCase() + \"' not found\");\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Create a DTO from the DBO.\n+\t * \n+\t * @param dbo\n+\t * @return\n+\t */\n+\tpublic static Organization createDtoFromDbo(DBOOrganization dbo) {\n+\t\tOrganization dto = new Organization();\n+\t\tdto.setCreatedBy(\"\" + dbo.getCreatedBy());", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0MjU2Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402642566", "bodyText": "Typo: Organization", "author": "marcomarasca", "createdAt": "2020-04-02T22:55:38Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/OrganizationDaoImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_ORGANIZATION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_BY;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.DDL_FILE_ORGANIZATION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_ORGANIZATION;\n+\n+import java.sql.Timestamp;\n+\n+import org.sagebionetworks.ids.IdGenerator;\n+import org.sagebionetworks.ids.IdType;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.DuplicateKeyException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class OrganizationDaoImpl implements OrganizationDao {\n+\n+\t@Autowired\n+\tDBOBasicDao basicDao;\n+\t@Autowired\n+\tIdGenerator idGenerator;\n+\t@Autowired\n+\tJdbcTemplate jdbcTemplate;\n+\n+\tstatic final RowMapper<DBOOrganization> ROW_MAPPER = new DBOOrganization().getTableMapping();\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic Organization createOrganization(String name, Long createdBy) {\n+\t\tValidateArgument.required(name, \"name\");\n+\t\tValidateArgument.required(createdBy, \"createdBy\");\n+\t\tDBOOrganization dbo = new DBOOrganization();\n+\t\tdbo.setName(name.toLowerCase());\n+\t\tdbo.setCreatedBy(createdBy);\n+\t\tdbo.setCreatedOn(new Timestamp(System.currentTimeMillis()));\n+\t\tdbo.setId(idGenerator.generateNewId(IdType.ORGANIZATION_ID));\n+\n+\t\ttry {\n+\t\t\tjdbcTemplate.update(\n+\t\t\t\t\t\"INSERT INTO \" + TABLE_ORGANIZATION + \" (\" + COL_ORGANIZATION_ID + \",\" + COL_ORGANIZATION_NAME + \",\"\n+\t\t\t\t\t\t\t+ COL_ORGANIZATION_CREATED_BY + \",\" + COL_ORGANIZATION_CREATED_ON + \") VALUES (?,?,?,?)\",\n+\t\t\t\t\tdbo.getId(), dbo.getName(), dbo.getCreatedBy(), dbo.getCreatedOn());\n+\t\t} catch (DuplicateKeyException e) {\n+\t\t\tthrow new IllegalArgumentException(\"An Organization with the name: '\" + dbo.getName() + \"' already exists\",\n+\t\t\t\t\te);\n+\t\t}\n+\t\t\n+\t\treturn getOrganizationByName(dbo.getName());\n+\t}\n+\n+\t@Override\n+\tpublic Organization getOrganizationByName(String name) {\n+\t\tValidateArgument.required(name, \"name\");\n+\t\ttry {\n+\t\t\tDBOOrganization dbo = jdbcTemplate.queryForObject(\n+\t\t\t\t\t\"SELECT * FROM \" + TABLE_ORGANIZATION + \" WHERE \" + COL_ORGANIZATION_NAME + \" = ?\", ROW_MAPPER,\n+\t\t\t\t\tname.toLowerCase());\n+\t\t\treturn createDtoFromDbo(dbo);\n+\t\t} catch (EmptyResultDataAccessException e) {\n+\t\t\tthrow new NotFoundException(\"Orgnaization with name: '\" + name.toLowerCase() + \"' not found\");", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0MzIyNg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402643226", "bodyText": "Typo", "author": "marcomarasca", "createdAt": "2020-04-02T22:57:28Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/OrganizationDaoImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_ORGANIZATION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_BY;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_CREATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_ORGANIZATION_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.DDL_FILE_ORGANIZATION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_ORGANIZATION;\n+\n+import java.sql.Timestamp;\n+\n+import org.sagebionetworks.ids.IdGenerator;\n+import org.sagebionetworks.ids.IdType;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.DuplicateKeyException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class OrganizationDaoImpl implements OrganizationDao {\n+\n+\t@Autowired\n+\tDBOBasicDao basicDao;\n+\t@Autowired\n+\tIdGenerator idGenerator;\n+\t@Autowired\n+\tJdbcTemplate jdbcTemplate;\n+\n+\tstatic final RowMapper<DBOOrganization> ROW_MAPPER = new DBOOrganization().getTableMapping();\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic Organization createOrganization(String name, Long createdBy) {\n+\t\tValidateArgument.required(name, \"name\");\n+\t\tValidateArgument.required(createdBy, \"createdBy\");\n+\t\tDBOOrganization dbo = new DBOOrganization();\n+\t\tdbo.setName(name.toLowerCase());\n+\t\tdbo.setCreatedBy(createdBy);\n+\t\tdbo.setCreatedOn(new Timestamp(System.currentTimeMillis()));\n+\t\tdbo.setId(idGenerator.generateNewId(IdType.ORGANIZATION_ID));\n+\n+\t\ttry {\n+\t\t\tjdbcTemplate.update(\n+\t\t\t\t\t\"INSERT INTO \" + TABLE_ORGANIZATION + \" (\" + COL_ORGANIZATION_ID + \",\" + COL_ORGANIZATION_NAME + \",\"\n+\t\t\t\t\t\t\t+ COL_ORGANIZATION_CREATED_BY + \",\" + COL_ORGANIZATION_CREATED_ON + \") VALUES (?,?,?,?)\",\n+\t\t\t\t\tdbo.getId(), dbo.getName(), dbo.getCreatedBy(), dbo.getCreatedOn());\n+\t\t} catch (DuplicateKeyException e) {\n+\t\t\tthrow new IllegalArgumentException(\"An Organization with the name: '\" + dbo.getName() + \"' already exists\",\n+\t\t\t\t\te);\n+\t\t}\n+\t\t\n+\t\treturn getOrganizationByName(dbo.getName());\n+\t}\n+\n+\t@Override\n+\tpublic Organization getOrganizationByName(String name) {\n+\t\tValidateArgument.required(name, \"name\");\n+\t\ttry {\n+\t\t\tDBOOrganization dbo = jdbcTemplate.queryForObject(\n+\t\t\t\t\t\"SELECT * FROM \" + TABLE_ORGANIZATION + \" WHERE \" + COL_ORGANIZATION_NAME + \" = ?\", ROW_MAPPER,\n+\t\t\t\t\tname.toLowerCase());\n+\t\t\treturn createDtoFromDbo(dbo);\n+\t\t} catch (EmptyResultDataAccessException e) {\n+\t\t\tthrow new NotFoundException(\"Orgnaization with name: '\" + name.toLowerCase() + \"' not found\");\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Create a DTO from the DBO.\n+\t * \n+\t * @param dbo\n+\t * @return\n+\t */\n+\tpublic static Organization createDtoFromDbo(DBOOrganization dbo) {\n+\t\tOrganization dto = new Organization();\n+\t\tdto.setCreatedBy(\"\" + dbo.getCreatedBy());\n+\t\tdto.setCreatedOn(dbo.getCreatedOn());\n+\t\tdto.setId(\"\"+dbo.getId());\n+\t\tdto.setName(dbo.getName());\n+\t\treturn dto;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void deleteOrganization(String id) {\n+\t\tValidateArgument.required(id, \"id\");\n+\t\tint count = jdbcTemplate.update(\n+\t\t\t\t\"DELETE FROM \" + TABLE_ORGANIZATION + \" WHERE \" + COL_ORGANIZATION_ID + \" = ?\", id);\n+\t\tif (count < 1) {\n+\t\t\tthrow new NotFoundException(\"Orgnaization with id: '\" + id + \"' not found\");", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NDgyMQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402644821", "bodyText": "Add tests for input validation", "author": "marcomarasca", "createdAt": "2020-04-02T23:01:44Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/OrganizationDaoImplTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.sagebionetworks.repo.model.dbo;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.sagebionetworks.repo.model.AuthorizationConstants.BOOTSTRAP_PRINCIPAL;\n+import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = { \"classpath:jdomodels-test-context.xml\" })\n+public class OrganizationDaoImplTest {\n+\n+\t@Autowired\n+\tOrganizationDao organizationDao;\n+\n+\tLong adminUserId = BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId();\n+\n+\tString name;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tname = \"Foo.Bar\";\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateGetDelete() {\n+\t\t// Call under test\n+\t\tOrganization created = organizationDao.createOrganization(name, adminUserId);\n+\t\tassertNotNull(created);\n+\t\t// name should be lower\n+\t\tassertEquals(name.toLowerCase(), created.getName());\n+\t\tassertNotNull(created.getId());\n+\t\tassertNotNull(created.getCreatedOn());\n+\t\tassertEquals(\"\"+adminUserId, created.getCreatedBy());\n+\n+\t\t// call under test\n+\t\tOrganization fetched = organizationDao.getOrganizationByName(name);\n+\t\tassertEquals(created, fetched);\n+\t\t// call under test\n+\t\torganizationDao.deleteOrganization(fetched.getId());\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateOrganizationDuplicateName() {\n+\t\t// Call under test\n+\t\tOrganization created = organizationDao.createOrganization(name, adminUserId);\n+\t\tassertNotNull(created);\n+\t\t// Attempt to create a duplicate name.\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\t// call under test\n+\t\t\torganizationDao.createOrganization(name, adminUserId);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"An Organization with the name: 'foo.bar' already exists\", message);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetOrganizationByNameNotFound() {\n+\t\tString name = \"Foo.Bar\";\n+\t\tString message = assertThrows(NotFoundException.class, () -> {\n+\t\t\t// call under test\n+\t\t\torganizationDao.getOrganizationByName(name);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"Orgnaization with name: 'foo.bar' not found\", message);\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteOrganizationNotFound() {\n+\t\tString id = \"-123\";\n+\t\tString message = assertThrows(NotFoundException.class, () -> {\n+\t\t\t// call under test\n+\t\t\torganizationDao.deleteOrganization(id);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"Orgnaization with id: '-123' not found\", message);\n+\t}\n+", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NTE4MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402645180", "bodyText": "servers -> serves", "author": "marcomarasca", "createdAt": "2020-04-02T23:02:48Z", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/Organization.json", "diffHunk": "@@ -0,0 +1,24 @@\n+{\n+\t\"description\": \"The first step in creating new type schema in Synapse is to setup and configure an organization. The name of the organization servers as the root for each schema's $id managed by that organization.  The organization name \u2018org.sagebionetworks\u2019 is reserved for the core Synapse model objects.   Each organization also has an Access Control List (ACL) that controls who can add schemas to an organization.  All schemas created under an Organization will be considered publicly readable and reference-able. Organizations are immutable\",", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NTMyMg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402645322", "bodyText": "Typo", "author": "marcomarasca", "createdAt": "2020-04-02T23:03:12Z", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/Organization.json", "diffHunk": "@@ -0,0 +1,24 @@\n+{\n+\t\"description\": \"The first step in creating new type schema in Synapse is to setup and configure an organization. The name of the organization servers as the root for each schema's $id managed by that organization.  The organization name \u2018org.sagebionetworks\u2019 is reserved for the core Synapse model objects.   Each organization also has an Access Control List (ACL) that controls who can add schemas to an organization.  All schemas created under an Organization will be considered publicly readable and reference-able. Organizations are immutable\",\n+\t\"properties\": {\n+\t\t\"id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"description\": \"The Synapse identifier issued to the Organization.\"\n+\t\t},\n+\t\t\"name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"description\": \"The name of the organization servers as the root for each schema's $id managed under an organization, and each name must be unique.\"\n+\t\t},\n+\t\t\"createdOn\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"format\": \"date-time\",\n+\t\t\t\"description\": \"The date this Organziation was created.\",", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NTQxNg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402645416", "bodyText": "Typo", "author": "marcomarasca", "createdAt": "2020-04-02T23:03:26Z", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/Organization.json", "diffHunk": "@@ -0,0 +1,24 @@\n+{\n+\t\"description\": \"The first step in creating new type schema in Synapse is to setup and configure an organization. The name of the organization servers as the root for each schema's $id managed by that organization.  The organization name \u2018org.sagebionetworks\u2019 is reserved for the core Synapse model objects.   Each organization also has an Access Control List (ACL) that controls who can add schemas to an organization.  All schemas created under an Organization will be considered publicly readable and reference-able. Organizations are immutable\",\n+\t\"properties\": {\n+\t\t\"id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"description\": \"The Synapse identifier issued to the Organization.\"\n+\t\t},\n+\t\t\"name\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"description\": \"The name of the organization servers as the root for each schema's $id managed under an organization, and each name must be unique.\"\n+\t\t},\n+\t\t\"createdOn\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"format\": \"date-time\",\n+\t\t\t\"description\": \"The date this Organziation was created.\",\n+\t\t\t\"title\": \"Created On\"\n+\t\t},\n+\t\t\"createdBy\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"description\": \"The ID of the user that created this Organziation.\",", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NjE1OA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402646158", "bodyText": "Might want to consider to rename it to OrganizationCreateRequest", "author": "marcomarasca", "createdAt": "2020-04-02T23:05:35Z", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/OrganizationRequest.json", "diffHunk": "@@ -0,0 +1,9 @@\n+{\n+\t\"description\": \"Request to create a new Organization.\",", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0Njk2OA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402646968", "bodyText": "Typo", "author": "marcomarasca", "createdAt": "2020-04-02T23:07:56Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImpl.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.sagebionetworks.repo.manager.schema;\n+\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.CHANGE_PERMISSIONS;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.DELETE;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.READ;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.UPDATE;\n+\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import org.sagebionetworks.repo.manager.PermissionsManagerUtils;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.AccessControlList;\n+import org.sagebionetworks.repo.model.AccessControlListDAO;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.model.schema.OrganizationRequest;\n+import org.sagebionetworks.repo.model.util.AccessControlListUtil;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.collect.Sets;\n+\n+@Service\n+public class JsonSchemaManagerImpl implements JsonSchemaManager {\n+\n+\tpublic static final String SAGEBIONETWORKS_RESERVED_MESSAGE = \"The name 'sagebionetworks' is reserved, and cannot be included in an Organziation's name\";\n+\n+\tpublic static final String BAD_ORGANIZATION_NAME_MESSAGE = \"Organziation name must start and end with a letter [a-z], and can contain digits [0-9] and periods [.]\";", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NzA1Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402647052", "bodyText": "Typo", "author": "marcomarasca", "createdAt": "2020-04-02T23:08:10Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImpl.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.sagebionetworks.repo.manager.schema;\n+\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.CHANGE_PERMISSIONS;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.DELETE;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.READ;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.UPDATE;\n+\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import org.sagebionetworks.repo.manager.PermissionsManagerUtils;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.AccessControlList;\n+import org.sagebionetworks.repo.model.AccessControlListDAO;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.model.schema.OrganizationRequest;\n+import org.sagebionetworks.repo.model.util.AccessControlListUtil;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.collect.Sets;\n+\n+@Service\n+public class JsonSchemaManagerImpl implements JsonSchemaManager {\n+\n+\tpublic static final String SAGEBIONETWORKS_RESERVED_MESSAGE = \"The name 'sagebionetworks' is reserved, and cannot be included in an Organziation's name\";", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NjA1Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402656056", "bodyText": "Increase the min size to something like 6 or 8?", "author": "marcomarasca", "createdAt": "2020-04-02T23:36:34Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImpl.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.sagebionetworks.repo.manager.schema;\n+\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.CHANGE_PERMISSIONS;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.DELETE;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.READ;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.UPDATE;\n+\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import org.sagebionetworks.repo.manager.PermissionsManagerUtils;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.AccessControlList;\n+import org.sagebionetworks.repo.model.AccessControlListDAO;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.model.schema.OrganizationRequest;\n+import org.sagebionetworks.repo.model.util.AccessControlListUtil;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.collect.Sets;\n+\n+@Service\n+public class JsonSchemaManagerImpl implements JsonSchemaManager {\n+\n+\tpublic static final String SAGEBIONETWORKS_RESERVED_MESSAGE = \"The name 'sagebionetworks' is reserved, and cannot be included in an Organziation's name\";\n+\n+\tpublic static final String BAD_ORGANIZATION_NAME_MESSAGE = \"Organziation name must start and end with a letter [a-z], and can contain digits [0-9] and periods [.]\";\n+\n+\tpublic static int MAX_ORGANZIATION_NAME_CHARS = 250;\n+\tpublic static int MIN_ORGANZIATION_NAME_CHARS = 3;", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NzE3NA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402657174", "bodyText": "Missing CREATE", "author": "marcomarasca", "createdAt": "2020-04-02T23:40:18Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImpl.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.sagebionetworks.repo.manager.schema;\n+\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.CHANGE_PERMISSIONS;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.DELETE;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.READ;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.UPDATE;\n+\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import org.sagebionetworks.repo.manager.PermissionsManagerUtils;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.AccessControlList;\n+import org.sagebionetworks.repo.model.AccessControlListDAO;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.model.schema.OrganizationRequest;\n+import org.sagebionetworks.repo.model.util.AccessControlListUtil;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.collect.Sets;\n+\n+@Service\n+public class JsonSchemaManagerImpl implements JsonSchemaManager {\n+\n+\tpublic static final String SAGEBIONETWORKS_RESERVED_MESSAGE = \"The name 'sagebionetworks' is reserved, and cannot be included in an Organziation's name\";\n+\n+\tpublic static final String BAD_ORGANIZATION_NAME_MESSAGE = \"Organziation name must start and end with a letter [a-z], and can contain digits [0-9] and periods [.]\";\n+\n+\tpublic static int MAX_ORGANZIATION_NAME_CHARS = 250;\n+\tpublic static int MIN_ORGANZIATION_NAME_CHARS = 3;\n+\tpublic static Pattern ORGANIZATOIN_NAME_PATTERN = Pattern.compile(\"[a-z][a-z0-9.]+[a-z]\");\n+\n+\t@Autowired\n+\tOrganizationDao organizationDao;\n+\n+\t@Autowired\n+\tAccessControlListDAO aclDao;\n+\n+\tpublic static final Set<ACCESS_TYPE> ADMIN_PERMISSIONS = Sets.newHashSet(READ, CHANGE_PERMISSIONS, UPDATE, DELETE);", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1ODIzOA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402658238", "bodyText": "Sagebionetwork?", "author": "marcomarasca", "createdAt": "2020-04-02T23:43:50Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImpl.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.sagebionetworks.repo.manager.schema;\n+\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.CHANGE_PERMISSIONS;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.DELETE;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.READ;\n+import static org.sagebionetworks.repo.model.ACCESS_TYPE.UPDATE;\n+\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import org.sagebionetworks.repo.manager.PermissionsManagerUtils;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.AccessControlList;\n+import org.sagebionetworks.repo.model.AccessControlListDAO;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.model.schema.OrganizationRequest;\n+import org.sagebionetworks.repo.model.util.AccessControlListUtil;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.collect.Sets;\n+\n+@Service\n+public class JsonSchemaManagerImpl implements JsonSchemaManager {\n+\n+\tpublic static final String SAGEBIONETWORKS_RESERVED_MESSAGE = \"The name 'sagebionetworks' is reserved, and cannot be included in an Organziation's name\";\n+\n+\tpublic static final String BAD_ORGANIZATION_NAME_MESSAGE = \"Organziation name must start and end with a letter [a-z], and can contain digits [0-9] and periods [.]\";\n+\n+\tpublic static int MAX_ORGANZIATION_NAME_CHARS = 250;\n+\tpublic static int MIN_ORGANZIATION_NAME_CHARS = 3;\n+\tpublic static Pattern ORGANIZATOIN_NAME_PATTERN = Pattern.compile(\"[a-z][a-z0-9.]+[a-z]\");\n+\n+\t@Autowired\n+\tOrganizationDao organizationDao;\n+\n+\t@Autowired\n+\tAccessControlListDAO aclDao;\n+\n+\tpublic static final Set<ACCESS_TYPE> ADMIN_PERMISSIONS = Sets.newHashSet(READ, CHANGE_PERMISSIONS, UPDATE, DELETE);\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic Organization createOrganziation(UserInfo user, OrganizationRequest request) {\n+\t\tValidateArgument.required(user, \"User\");\n+\t\tValidateArgument.required(request, \"OrganizationRequest\");\n+\n+\t\tAuthorizationUtils.disallowAnonymous(user);\n+\n+\t\tString processedOrganizationName = processAndValidateOrganizationName(request.getOrganizationName());\n+\t\tOrganization org = organizationDao.createOrganization(processedOrganizationName, user.getId());\n+\n+\t\t// Create an ACL for the\n+\t\tAccessControlList acl = AccessControlListUtil.createACL(org.getId(), user, ADMIN_PERMISSIONS, new Date());\n+\t\taclDao.create(acl, ObjectType.ORGANIZATION);\n+\n+\t\treturn org;\n+\t}\n+\n+\t/**\n+\t * If the provided organization name is not valid, an IllegalArgumentException\n+\t * will be thrown. The process name will be trimmed and converted to lower case.\n+\t * \n+\t * @param name\n+\t * @return\n+\t */\n+\tpublic static String processAndValidateOrganizationName(String name) {\n+\t\tValidateArgument.required(name, \"organizationName\");\n+\t\tString processedName = name.trim().toLowerCase();\n+\t\tif (processedName.length() > MAX_ORGANZIATION_NAME_CHARS) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Organization name must be \" + MAX_ORGANZIATION_NAME_CHARS + \" characters or less\");\n+\t\t}\n+\t\tif (processedName.length() < MIN_ORGANZIATION_NAME_CHARS) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Organization name must be at least \" + MIN_ORGANZIATION_NAME_CHARS + \" chracters\");\n+\t\t}\n+\t\tif (!ORGANIZATOIN_NAME_PATTERN.matcher(processedName).matches()) {\n+\t\t\tthrow new IllegalArgumentException(BAD_ORGANIZATION_NAME_MESSAGE);\n+\t\t}\n+\t\tif(processedName.contains(\"sagebionetworks\")) {", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MDc3Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402660776", "bodyText": "Typo in the exception message, chracters->characters", "author": "marcomarasca", "createdAt": "2020-04-02T23:52:41Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImplTest.java", "diffHunk": "@@ -0,0 +1,456 @@\n+package org.sagebionetworks.repo.manager.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Date;\n+import java.util.HashSet;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.AccessControlList;\n+import org.sagebionetworks.repo.model.AccessControlListDAO;\n+import org.sagebionetworks.repo.model.InvalidModelException;\n+import org.sagebionetworks.repo.model.AuthorizationConstants.BOOTSTRAP_PRINCIPAL;\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.ResourceAccess;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AuthorizationStatus;\n+import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.model.schema.OrganizationRequest;\n+import org.sagebionetworks.repo.model.util.AccessControlListUtil;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class JsonSchemaManagerImplTest {\n+\n+\t@Mock\n+\tOrganizationDao mockOrganizationDao;\n+\n+\t@Mock\n+\tAccessControlListDAO mockAclDao;\n+\n+\t@Captor\n+\tArgumentCaptor<AccessControlList> aclCaptor;\n+\n+\t@InjectMocks\n+\tJsonSchemaManagerImpl manager;\n+\n+\tUserInfo user;\n+\tUserInfo anonymousUser;\n+\tOrganizationRequest request;\n+\n+\tOrganization organization;\n+\n+\tAccessControlList acl;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tboolean isAdmin = false;\n+\t\tuser = new UserInfo(isAdmin, 123L);\n+\n+\t\tanonymousUser = new UserInfo(isAdmin, BOOTSTRAP_PRINCIPAL.ANONYMOUS_USER.getPrincipalId());\n+\n+\t\trequest = new OrganizationRequest();\n+\t\trequest.setOrganizationName(\"a.2.b\");\n+\n+\t\torganization = new Organization();\n+\t\torganization.setCreatedBy(\"\" + user.getId());\n+\t\torganization.setName(\"foo.bar\");\n+\t\torganization.setCreatedOn(new Date());\n+\t\torganization.setId(\"4321\");\n+\n+\t\tacl = AccessControlListUtil.createACL(organization.getId(), user, JsonSchemaManagerImpl.ADMIN_PERMISSIONS,\n+\t\t\t\tnew Date());\n+\t}\n+\n+\t@Test\n+\tpublic void testProcessAndValidateOrganizationName() {\n+\t\tString inputName = \" A.9.C \\n\";\n+\t\tString processedName = JsonSchemaManagerImpl.processAndValidateOrganizationName(inputName);\n+\t\tassertEquals(\"a.9.c\", processedName);\n+\t}\n+\n+\t@Test\n+\tpublic void testProcessAndValidateOrganizationNameMaxLength() {\n+\t\tString input = StringUtils.repeat(\"a\", JsonSchemaManagerImpl.MAX_ORGANZIATION_NAME_CHARS);\n+\t\tString processedName = JsonSchemaManagerImpl.processAndValidateOrganizationName(input);\n+\t\tassertNotNull(processedName);\n+\t\tassertEquals(JsonSchemaManagerImpl.MAX_ORGANZIATION_NAME_CHARS, processedName.length());\n+\t}\n+\n+\t@Test\n+\tpublic void testProcessAndValidateOrganizationNameOverMaxLength() {\n+\t\tString input = StringUtils.repeat(\"a\", JsonSchemaManagerImpl.MAX_ORGANZIATION_NAME_CHARS + 1);\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tJsonSchemaManagerImpl.processAndValidateOrganizationName(input);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"Organization name must be 250 characters or less\", message);\n+\t}\n+\n+\t@Test\n+\tpublic void testProcessAndValidateOrganizationNameMinLength() {\n+\t\tString input = StringUtils.repeat(\"a\", JsonSchemaManagerImpl.MIN_ORGANZIATION_NAME_CHARS);\n+\t\tString processedName = JsonSchemaManagerImpl.processAndValidateOrganizationName(input);\n+\t\tassertNotNull(processedName);\n+\t\tassertEquals(JsonSchemaManagerImpl.MIN_ORGANZIATION_NAME_CHARS, processedName.length());\n+\t}\n+\n+\t@Test\n+\tpublic void testProcessAndValidateOrganizationNameUnderMinLength() {\n+\t\tString input = StringUtils.repeat(\"a\", JsonSchemaManagerImpl.MIN_ORGANZIATION_NAME_CHARS - 1);\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tJsonSchemaManagerImpl.processAndValidateOrganizationName(input);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"Organization name must be at least 3 chracters\", message);\n+\t}\n+", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MzIwMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r402673200", "bodyText": "You are not setting the endpoints for this client", "author": "marcomarasca", "createdAt": "2020-04-03T00:36:10Z", "path": "integration-test/src/test/java/org/sagebionetworks/ITJsonSchemaControllerTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.sagebionetworks;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.client.SynapseAdminClient;\n+import org.sagebionetworks.client.SynapseAdminClientImpl;\n+import org.sagebionetworks.client.SynapseClient;\n+import org.sagebionetworks.client.SynapseClientImpl;\n+import org.sagebionetworks.client.exceptions.SynapseException;\n+import org.sagebionetworks.client.exceptions.SynapseNotFoundException;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.AccessControlList;\n+import org.sagebionetworks.repo.model.AuthorizationConstants.BOOTSTRAP_PRINCIPAL;\n+import org.sagebionetworks.repo.model.ResourceAccess;\n+import org.sagebionetworks.repo.model.schema.Organization;\n+import org.sagebionetworks.repo.model.schema.OrganizationRequest;\n+\n+import com.google.common.collect.Sets;\n+\n+public class ITJsonSchemaControllerTest {\n+\n+\tprivate static SynapseAdminClient adminSynapse;\n+\tprivate static SynapseClient synapse;\n+\tprivate static Long userId;\n+\n+\tString organizationName;\n+\tOrganizationRequest request;\n+\t\n+\tOrganization organization;\n+\n+\t@BeforeAll\n+\tpublic static void beforeClass() throws Exception {\n+\t\t// Create a user\n+\t\tadminSynapse = new SynapseAdminClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(adminSynapse);\n+\t\tadminSynapse.setUsername(StackConfigurationSingleton.singleton().getMigrationAdminUsername());\n+\t\tadminSynapse.setApiKey(StackConfigurationSingleton.singleton().getMigrationAdminAPIKey());\n+\t\tsynapse = new SynapseClientImpl();", "originalCommit": "869aaa0ce427a4cc6c3a15672033ec64d38461c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8a36e2a3feb39569fdf5206bdea19d4ebd8755c4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/8a36e2a3feb39569fdf5206bdea19d4ebd8755c4", "message": "included ResponseBody in controllers, admins can delete and code review chagnes", "committedDate": "2020-04-03T19:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1NDcxMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3987#discussion_r403354710", "bodyText": "We should leave the getRequestURL() since getHttpMethod() would be very confusing. We should also comment that there is a bug where getHttpMethod() returns the path instead of the verb. The error message can be built using the request parameter instead.", "author": "marcomarasca", "createdAt": "2020-04-03T21:53:38Z", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/BaseControllerExceptionHandlerAdvice.java", "diffHunk": "@@ -933,7 +933,7 @@ ErrorResponse handleInvalidTableQueryFacetColumnRequestException(InvalidTableQue\n \tErrorResponse handleNoHandlerFoundException(NoHandlerFoundException ex, HttpServletRequest request){\n \t\treturn handleException(ex,\n \t\t\t\trequest,\n-\t\t\t\tex.getHttpMethod() + \" \" + ex.getRequestURL() + \" was not found. Please reference API documentation at https://docs.synapse.org/rest/\",\n+\t\t\t\tex.getHttpMethod() +\" was not found. Please reference API documentation at https://docs.synapse.org/rest/\",", "originalCommit": "8a36e2a3feb39569fdf5206bdea19d4ebd8755c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}