{"pr_number": 594, "pr_title": "CLDR-14016 fix alias rules", "pr_createdAt": "2020-07-30T01:15:23Z", "pr_url": "https://github.com/unicode-org/cldr/pull/594", "timeline": [{"oid": "88c7325f4e22788f9d1a0bffb5a811f1faf0d440", "url": "https://github.com/unicode-org/cldr/commit/88c7325f4e22788f9d1a0bffb5a811f1faf0d440", "message": "CLDR-14016 fix alias rules", "committedDate": "2020-08-21T23:32:39Z", "type": "forcePushed"}, {"oid": "46cd038d971c2bef8549c73952e558b71e2b35e0", "url": "https://github.com/unicode-org/cldr/commit/46cd038d971c2bef8549c73952e558b71e2b35e0", "message": "CLDR-14016 fix alias rules\n\nSee #594", "committedDate": "2020-08-24T19:19:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNTU5Nw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475905597", "bodyText": "Since you are changing the casing of variant in this file to lower case, should we also change\n            <languageAlias type=\"no_BOKMAL\" replacement=\"nb\" reason=\"deprecated\"/>\n            <languageAlias type=\"no_NYNORSK\" replacement=\"nn\" reason=\"deprecated\"/>\n            <languageAlias type=\"aa_SAAHO\" replacement=\"ssy\" reason=\"deprecated\"/>\n\nto\n            <languageAlias type=\"no_bomal\" replacement=\"nb\" reason=\"deprecated\"/>\n            <languageAlias type=\"no_nynorsk\" replacement=\"nn\" reason=\"deprecated\"/>\n            <languageAlias type=\"aa_saaho\" replacement=\"ssy\" reason=\"deprecated\"/>\n\n? and maybe some other entry which contains variants?", "author": "FrankYFTang", "createdAt": "2020-08-24T21:30:02Z", "path": "common/supplemental/supplementalMetadata.xml", "diffHunk": "@@ -167,6 +167,7 @@ For terms of use, see http://www.unicode.org/copyright.html\n             <languageAlias type=\"cnr\" replacement=\"sr_ME\" reason=\"legacy\"/> <!-- Montenegrin -->", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMzA3MA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476003070", "bodyText": "got these, thanks!", "author": "macchiati", "createdAt": "2020-08-25T00:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNTU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0MzE3NA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475943174", "bodyText": "I believe this should be cnr ; sr_Latn_ME because we also have\n\nin the data.", "author": "FrankYFTang", "createdAt": "2020-08-24T23:07:20Z", "path": "common/testData/localeIdentifiers/localeCanonicalization.txt", "diffHunk": "@@ -0,0 +1,1647 @@\n+# Test data for locale identifier canonicalization\n+#  Copyright \u00a9 1991-2020 Unicode, Inc.\n+#  For terms of use, see http://www.unicode.org/copyright.html\n+#  Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.\n+#  CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+#\n+# Format:\n+# <source locale identifier>\t;\t<expected canonicalized locale identifier>\n+#\n+# The data lines are divided into 4 sets:\n+#   explicit: a short list of explicit test cases.\n+#   fromAliases: test cases generated from the alias data.\n+#   decanonicalized: test cases generated by reversing the normalization process.\n+#   withIrrelevants: test cases generated from the others by adding irrelevant fields where possible,\n+# to ensure that the canonicalization implementation is not sensitive to irrelevant fields. These include:\n+#     Language: aaa\n+#     Script:   Adlm\n+#     Region:   AC\n+#     Variant:  fonipa\n+######\n+\n+\n+\n+# explicit\n+\n+art_lojban\t;\tjbo\n+en_US_aaland\t;\ten_US\n+en_US_heploc\t;\ten_US_alalc97\n+en_US_polytoni\t;\ten_US_polyton\n+en_aaland\t;\ten_AX\n+en_arevela\t;\ten\n+en_arevmda_arevela\t;\ten\n+en_lojban\t;\ten\n+hy_arevela\t;\thy\n+hy_arevmda\t;\thyw\n+hy_arevmda_arevela\t;\thyw\n+hye_arevmda\t;\thyw\n+no_bokmal_nynorsk\t;\tnb\n+no_nynorsk_bokmal\t;\tnb\n+zh_guoyu_hakka_xiang\t;\thak\n+zh_hakka_xiang\t;\thak\n+\n+# fromAliases\n+\n+aa_saaho\t;\tssy\n+aam\t;\taas\n+aar\t;\taa\n+abk\t;\tab\n+adp\t;\tdz\n+afr\t;\taf\n+aju\t;\tjrb\n+aka\t;\tak\n+alb\t;\tsq\n+als\t;\tsq\n+amh\t;\tam\n+ara\t;\tar\n+arb\t;\tar\n+arg\t;\tan\n+arm\t;\thy\n+asd\t;\tsnz\n+asm\t;\tas\n+aue\t;\tktz\n+ava\t;\tav\n+ave\t;\tae\n+aym\t;\tay\n+ayr\t;\tay\n+ayx\t;\tnun\n+aze\t;\taz\n+azj\t;\taz\n+bak\t;\tba\n+bam\t;\tbm\n+baq\t;\teu\n+bcc\t;\tbal\n+bcl\t;\tbik\n+bel\t;\tbe\n+ben\t;\tbn\n+bgm\t;\tbcg\n+bh\t;\tbho\n+bih\t;\tbho\n+bis\t;\tbi\n+bjd\t;\tdrl\n+bod\t;\tbo\n+bos\t;\tbs\n+bre\t;\tbr\n+bul\t;\tbg\n+bur\t;\tmy\n+bxk\t;\tluy\n+bxr\t;\tbua\n+cat\t;\tca\n+ccq\t;\trki\n+cel_gaulish\t;\txtg\n+ces\t;\tcs\n+cha\t;\tch\n+che\t;\tce\n+chi\t;\tzh\n+chu\t;\tcu\n+chv\t;\tcv\n+cjr\t;\tmom\n+cka\t;\tcmr\n+cld\t;\tsyr\n+cmk\t;\txch\n+cmn\t;\tzh\n+cnr\t;\tsr_ME", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzNzQ2Mw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476037463", "bodyText": "sr_Latn_ME ~ sr_ME, since sr in ME is written in Latn.", "author": "macchiati", "createdAt": "2020-08-25T01:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0MzE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NTEwNA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475945104", "bodyText": "About\n<variantAlias type=\"aaland\" replacement=\"AX\" reason=\"deprecated\"/>\n\nhow could the code figure the AX not not a language code \"ax\" but a region code \"AX\" here.\nShould this be\n<variantAlias type=\"aaland\" replacement=\"und-AX\" reason=\"deprecated\"/>\n\ninstead?", "author": "FrankYFTang", "createdAt": "2020-08-24T23:10:03Z", "path": "common/supplemental/supplementalMetadata.xml", "diffHunk": "@@ -1572,11 +1585,8 @@ For terms of use, see http://www.unicode.org/copyright.html\n \t\t\t\t\t\t\n \t\t\t\n             <!-- variants -->\n-            <variantAlias type=\"AALAND\" replacement=\"AX\" reason=\"deprecated\"/>\n-            <variantAlias type=\"POLYTONI\" replacement=\"POLYTON\" reason=\"deprecated\"/>\n-            <variantAlias type=\"HEPLOC\" replacement=\"ALALC97\" reason=\"deprecated\"/>\n-\t\t\t<variantAlias type=\"arevela\" replacement=\"hy\" reason=\"deprecated\"/> <!-- arevela -->\n-\t\t\t<variantAlias type=\"arevmda\" replacement=\"hyw\" reason=\"deprecated\"/> <!-- arevmda -->\n+            <variantAlias type=\"aaland\" replacement=\"AX\" reason=\"deprecated\"/>", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMzQ5Ng==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476003496", "bodyText": "Yes, that would be better.", "author": "macchiati", "createdAt": "2020-08-25T00:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NTEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4Njc5Nw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476586797", "bodyText": "fixed.", "author": "macchiati", "createdAt": "2020-08-25T16:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NTEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NTgzMA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475945830", "bodyText": "This imply, in the algorithm, we need to sort the variant first before look up , so we will first search for no_bokmal before searching no_nynorsk, right?", "author": "FrankYFTang", "createdAt": "2020-08-24T23:11:07Z", "path": "common/testData/localeIdentifiers/localeCanonicalization.txt", "diffHunk": "@@ -0,0 +1,1647 @@\n+# Test data for locale identifier canonicalization\n+#  Copyright \u00a9 1991-2020 Unicode, Inc.\n+#  For terms of use, see http://www.unicode.org/copyright.html\n+#  Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.\n+#  CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+#\n+# Format:\n+# <source locale identifier>\t;\t<expected canonicalized locale identifier>\n+#\n+# The data lines are divided into 4 sets:\n+#   explicit: a short list of explicit test cases.\n+#   fromAliases: test cases generated from the alias data.\n+#   decanonicalized: test cases generated by reversing the normalization process.\n+#   withIrrelevants: test cases generated from the others by adding irrelevant fields where possible,\n+# to ensure that the canonicalization implementation is not sensitive to irrelevant fields. These include:\n+#     Language: aaa\n+#     Script:   Adlm\n+#     Region:   AC\n+#     Variant:  fonipa\n+######\n+\n+\n+\n+# explicit\n+\n+art_lojban\t;\tjbo\n+en_US_aaland\t;\ten_US\n+en_US_heploc\t;\ten_US_alalc97\n+en_US_polytoni\t;\ten_US_polyton\n+en_aaland\t;\ten_AX\n+en_arevela\t;\ten\n+en_arevmda_arevela\t;\ten\n+en_lojban\t;\ten\n+hy_arevela\t;\thy\n+hy_arevmda\t;\thyw\n+hy_arevmda_arevela\t;\thyw\n+hye_arevmda\t;\thyw\n+no_bokmal_nynorsk\t;\tnb\n+no_nynorsk_bokmal\t;\tnb", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzMzY0MQ==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476033641", "bodyText": "Yes, that's in the notes. You have to sort first by the number of fields then alphabetically. Of course, the implementation can use a much faster algorithm than CLDRs with a speedier lookup; this is to be a simple reference implementation.", "author": "macchiati", "createdAt": "2020-08-25T01:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NTgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzg3MA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475947870", "bodyText": "Could you explain to me why cel_gaulish will be canonicalized into xtg?\nI believe it should be canonicalized into xtg_x_cel_gaulish instead.", "author": "FrankYFTang", "createdAt": "2020-08-24T23:13:57Z", "path": "common/testData/localeIdentifiers/localeCanonicalization.txt", "diffHunk": "@@ -0,0 +1,1647 @@\n+# Test data for locale identifier canonicalization\n+#  Copyright \u00a9 1991-2020 Unicode, Inc.\n+#  For terms of use, see http://www.unicode.org/copyright.html\n+#  Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.\n+#  CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+#\n+# Format:\n+# <source locale identifier>\t;\t<expected canonicalized locale identifier>\n+#\n+# The data lines are divided into 4 sets:\n+#   explicit: a short list of explicit test cases.\n+#   fromAliases: test cases generated from the alias data.\n+#   decanonicalized: test cases generated by reversing the normalization process.\n+#   withIrrelevants: test cases generated from the others by adding irrelevant fields where possible,\n+# to ensure that the canonicalization implementation is not sensitive to irrelevant fields. These include:\n+#     Language: aaa\n+#     Script:   Adlm\n+#     Region:   AC\n+#     Variant:  fonipa\n+######\n+\n+\n+\n+# explicit\n+\n+art_lojban\t;\tjbo\n+en_US_aaland\t;\ten_US\n+en_US_heploc\t;\ten_US_alalc97\n+en_US_polytoni\t;\ten_US_polyton\n+en_aaland\t;\ten_AX\n+en_arevela\t;\ten\n+en_arevmda_arevela\t;\ten\n+en_lojban\t;\ten\n+hy_arevela\t;\thy\n+hy_arevmda\t;\thyw\n+hy_arevmda_arevela\t;\thyw\n+hye_arevmda\t;\thyw\n+no_bokmal_nynorsk\t;\tnb\n+no_nynorsk_bokmal\t;\tnb\n+zh_guoyu_hakka_xiang\t;\thak\n+zh_hakka_xiang\t;\thak\n+\n+# fromAliases\n+\n+aa_saaho\t;\tssy\n+aam\t;\taas\n+aar\t;\taa\n+abk\t;\tab\n+adp\t;\tdz\n+afr\t;\taf\n+aju\t;\tjrb\n+aka\t;\tak\n+alb\t;\tsq\n+als\t;\tsq\n+amh\t;\tam\n+ara\t;\tar\n+arb\t;\tar\n+arg\t;\tan\n+arm\t;\thy\n+asd\t;\tsnz\n+asm\t;\tas\n+aue\t;\tktz\n+ava\t;\tav\n+ave\t;\tae\n+aym\t;\tay\n+ayr\t;\tay\n+ayx\t;\tnun\n+aze\t;\taz\n+azj\t;\taz\n+bak\t;\tba\n+bam\t;\tbm\n+baq\t;\teu\n+bcc\t;\tbal\n+bcl\t;\tbik\n+bel\t;\tbe\n+ben\t;\tbn\n+bgm\t;\tbcg\n+bh\t;\tbho\n+bih\t;\tbho\n+bis\t;\tbi\n+bjd\t;\tdrl\n+bod\t;\tbo\n+bos\t;\tbs\n+bre\t;\tbr\n+bul\t;\tbg\n+bur\t;\tmy\n+bxk\t;\tluy\n+bxr\t;\tbua\n+cat\t;\tca\n+ccq\t;\trki\n+cel_gaulish\t;\txtg", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzNjc5OQ==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476036799", "bodyText": "See above. I think the best solution is just change to map to xtg. The cel_gualish doesn't carry useful information", "author": "macchiati", "createdAt": "2020-08-25T01:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk1MTkwNw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475951907", "bodyText": "if the type in variantAlias is containing not just variant code, but any of l,s,r,v combination, then these should be\n<variantAlias type=\"aaland\" replacement=\"und-AX\" reason=\"deprecated\"/>\n<variantAlias type=\"polytoni\" replacement=\"und-polyton\" reason=\"deprecated\"/>\n<variantAlias type=\"heploc\" replacement=\"und-alalc97\" reason=\"deprecated\"/>", "author": "FrankYFTang", "createdAt": "2020-08-24T23:19:43Z", "path": "common/supplemental/supplementalMetadata.xml", "diffHunk": "@@ -1572,11 +1585,8 @@ For terms of use, see http://www.unicode.org/copyright.html\n \t\t\t\t\t\t\n \t\t\t\n             <!-- variants -->\n-            <variantAlias type=\"AALAND\" replacement=\"AX\" reason=\"deprecated\"/>\n-            <variantAlias type=\"POLYTONI\" replacement=\"POLYTON\" reason=\"deprecated\"/>\n-            <variantAlias type=\"HEPLOC\" replacement=\"ALALC97\" reason=\"deprecated\"/>\n-\t\t\t<variantAlias type=\"arevela\" replacement=\"hy\" reason=\"deprecated\"/> <!-- arevela -->\n-\t\t\t<variantAlias type=\"arevmda\" replacement=\"hyw\" reason=\"deprecated\"/> <!-- arevmda -->\n+            <variantAlias type=\"aaland\" replacement=\"AX\" reason=\"deprecated\"/>\n+            <variantAlias type=\"polytoni\" replacement=\"polyton\" reason=\"deprecated\"/>", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwNTIwMQ==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476005201", "bodyText": "Maybe the best approach is that languageAlias has language tags as both type and replacement. Others must never change type. That is, instead of\n\nwe should have:", "author": "macchiati", "createdAt": "2020-08-25T00:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk1MTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0Njk1OA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476046958", "bodyText": "the github review some how would hide the tag, you need to wrap it with three ` before and after to show it", "author": "FrankYFTang", "createdAt": "2020-08-25T01:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk1MTkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2NDU5NQ==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475964595", "bodyText": "Also, could you explain to me why cel_Adlm_AC_fonipa_gaulish\twill be canonicalized into xtg_Adlm_AC_fonipa ?\nI believe it should be xtg_Adlm_AC_fonipa_x_cel_gaulish", "author": "FrankYFTang", "createdAt": "2020-08-24T23:37:43Z", "path": "common/testData/localeIdentifiers/localeCanonicalization.txt", "diffHunk": "@@ -0,0 +1,1647 @@\n+# Test data for locale identifier canonicalization\n+#  Copyright \u00a9 1991-2020 Unicode, Inc.\n+#  For terms of use, see http://www.unicode.org/copyright.html\n+#  Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.\n+#  CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+#\n+# Format:\n+# <source locale identifier>\t;\t<expected canonicalized locale identifier>\n+#\n+# The data lines are divided into 4 sets:\n+#   explicit: a short list of explicit test cases.\n+#   fromAliases: test cases generated from the alias data.\n+#   decanonicalized: test cases generated by reversing the normalization process.\n+#   withIrrelevants: test cases generated from the others by adding irrelevant fields where possible,\n+# to ensure that the canonicalization implementation is not sensitive to irrelevant fields. These include:\n+#     Language: aaa\n+#     Script:   Adlm\n+#     Region:   AC\n+#     Variant:  fonipa\n+######\n+\n+\n+\n+# explicit\n+\n+art_lojban\t;\tjbo\n+en_US_aaland\t;\ten_US\n+en_US_heploc\t;\ten_US_alalc97\n+en_US_polytoni\t;\ten_US_polyton\n+en_aaland\t;\ten_AX\n+en_arevela\t;\ten\n+en_arevmda_arevela\t;\ten\n+en_lojban\t;\ten\n+hy_arevela\t;\thy\n+hy_arevmda\t;\thyw\n+hy_arevmda_arevela\t;\thyw\n+hye_arevmda\t;\thyw\n+no_bokmal_nynorsk\t;\tnb\n+no_nynorsk_bokmal\t;\tnb\n+zh_guoyu_hakka_xiang\t;\thak\n+zh_hakka_xiang\t;\thak\n+\n+# fromAliases\n+\n+aa_saaho\t;\tssy\n+aam\t;\taas\n+aar\t;\taa\n+abk\t;\tab\n+adp\t;\tdz\n+afr\t;\taf\n+aju\t;\tjrb\n+aka\t;\tak\n+alb\t;\tsq\n+als\t;\tsq\n+amh\t;\tam\n+ara\t;\tar\n+arb\t;\tar\n+arg\t;\tan\n+arm\t;\thy\n+asd\t;\tsnz\n+asm\t;\tas\n+aue\t;\tktz\n+ava\t;\tav\n+ave\t;\tae\n+aym\t;\tay\n+ayr\t;\tay\n+ayx\t;\tnun\n+aze\t;\taz\n+azj\t;\taz\n+bak\t;\tba\n+bam\t;\tbm\n+baq\t;\teu\n+bcc\t;\tbal\n+bcl\t;\tbik\n+bel\t;\tbe\n+ben\t;\tbn\n+bgm\t;\tbcg\n+bh\t;\tbho\n+bih\t;\tbho\n+bis\t;\tbi\n+bjd\t;\tdrl\n+bod\t;\tbo\n+bos\t;\tbs\n+bre\t;\tbr\n+bul\t;\tbg\n+bur\t;\tmy\n+bxk\t;\tluy\n+bxr\t;\tbua\n+cat\t;\tca\n+ccq\t;\trki\n+cel_gaulish\t;\txtg\n+ces\t;\tcs\n+cha\t;\tch\n+che\t;\tce\n+chi\t;\tzh\n+chu\t;\tcu\n+chv\t;\tcv\n+cjr\t;\tmom\n+cka\t;\tcmr\n+cld\t;\tsyr\n+cmk\t;\txch\n+cmn\t;\tzh\n+cnr\t;\tsr_ME\n+cor\t;\tkw\n+cos\t;\tco\n+coy\t;\tpij\n+cqu\t;\tquh\n+cre\t;\tcr\n+cwd\t;\tcr\n+cym\t;\tcy\n+cze\t;\tcs\n+dan\t;\tda\n+deu\t;\tde\n+dgo\t;\tdoi\n+dhd\t;\tmwr\n+dik\t;\tdin\n+diq\t;\tzza\n+dit\t;\tdif\n+div\t;\tdv\n+drh\t;\tmn\n+drw\t;\tfa_AF\n+dut\t;\tnl\n+dzo\t;\tdz\n+ekk\t;\tet\n+ell\t;\tel\n+emk\t;\tman\n+eng\t;\ten\n+epo\t;\teo\n+esk\t;\tik\n+est\t;\tet\n+eus\t;\teu\n+ewe\t;\tee\n+fao\t;\tfo\n+fas\t;\tfa\n+fat\t;\tak\n+fij\t;\tfj\n+fin\t;\tfi\n+fra\t;\tfr\n+fre\t;\tfr\n+fry\t;\tfy\n+fuc\t;\tff\n+ful\t;\tff\n+gav\t;\tdev\n+gaz\t;\tom\n+gbo\t;\tgrb\n+geo\t;\tka\n+ger\t;\tde\n+gfx\t;\tvaj\n+ggn\t;\tgvr\n+gla\t;\tgd\n+gle\t;\tga\n+glg\t;\tgl\n+glv\t;\tgv\n+gno\t;\tgon\n+gre\t;\tel\n+grn\t;\tgn\n+gti\t;\tnyc\n+gug\t;\tgn\n+guj\t;\tgu\n+guv\t;\tduz\n+gya\t;\tgba\n+hat\t;\tht\n+hau\t;\tha\n+hbs\t;\tsr_Latn\n+hdn\t;\thai\n+hea\t;\thmn\n+heb\t;\the\n+her\t;\thz\n+him\t;\tsrx\n+hin\t;\thi\n+hmo\t;\tho\n+hrr\t;\tjal\n+hrv\t;\thr\n+hun\t;\thu\n+hye\t;\thy\n+ibi\t;\topa\n+ibo\t;\tig\n+ice\t;\tis\n+ido\t;\tio\n+iii\t;\tii\n+ike\t;\tiu\n+iku\t;\tiu\n+ile\t;\tie\n+ilw\t;\tgal\n+in\t;\tid\n+ina\t;\tia\n+ind\t;\tid\n+ipk\t;\tik\n+isl\t;\tis\n+ita\t;\tit\n+iw\t;\the\n+jav\t;\tjv\n+jeg\t;\toyb\n+ji\t;\tyi\n+jpn\t;\tja\n+jw\t;\tjv\n+kal\t;\tkl\n+kan\t;\tkn\n+kas\t;\tks\n+kat\t;\tka\n+kau\t;\tkr\n+kaz\t;\tkk\n+kgc\t;\ttdf\n+kgh\t;\tkml\n+khk\t;\tmn\n+khm\t;\tkm\n+kik\t;\tki\n+kin\t;\trw\n+kir\t;\tky\n+kmr\t;\tku\n+knc\t;\tkr\n+kng\t;\tkg\n+knn\t;\tkok\n+koj\t;\tkwv\n+kom\t;\tkv\n+kon\t;\tkg\n+kor\t;\tko\n+kpv\t;\tkv\n+krm\t;\tbmf\n+ktr\t;\tdtp\n+kua\t;\tkj\n+kur\t;\tku\n+kvs\t;\tgdj\n+kwq\t;\tyam\n+kxe\t;\ttvd\n+kzj\t;\tdtp\n+kzt\t;\tdtp\n+lao\t;\tlo\n+lat\t;\tla\n+lav\t;\tlv\n+lbk\t;\tbnc\n+lii\t;\traq\n+lim\t;\tli\n+lin\t;\tln\n+lit\t;\tlt\n+llo\t;\tngt\n+lmm\t;\trmx\n+ltz\t;\tlb\n+lub\t;\tlu\n+lug\t;\tlg\n+lvs\t;\tlv\n+mac\t;\tmk\n+mah\t;\tmh\n+mal\t;\tml\n+mao\t;\tmi\n+mar\t;\tmr\n+may\t;\tms\n+meg\t;\tcir\n+mhr\t;\tchm\n+mkd\t;\tmk\n+mlg\t;\tmg\n+mlt\t;\tmt\n+mnk\t;\tman\n+mo\t;\tro\n+mol\t;\tro\n+mon\t;\tmn\n+mri\t;\tmi\n+msa\t;\tms\n+mst\t;\tmry\n+mup\t;\traj\n+mwj\t;\tvaj\n+mya\t;\tmy\n+myd\t;\taog\n+myt\t;\tmry\n+nad\t;\txny\n+nau\t;\tna\n+nav\t;\tnv\n+nbl\t;\tnr\n+ncp\t;\tkdz\n+nde\t;\tnd\n+ndo\t;\tng\n+nep\t;\tne\n+nld\t;\tnl\n+nno\t;\tnn\n+nns\t;\tnbr\n+nnx\t;\tngv\n+no\t;\tnb\n+no_bokmal\t;\tnb\n+no_nynorsk\t;\tnn\n+nob\t;\tnb\n+nor\t;\tnb\n+npi\t;\tne\n+nts\t;\tpij\n+nya\t;\tny\n+oci\t;\toc\n+ojg\t;\toj\n+oji\t;\toj\n+ori\t;\tor\n+orm\t;\tom\n+ory\t;\tor\n+oss\t;\tos\n+oun\t;\tvaj\n+pan\t;\tpa\n+pbu\t;\tps\n+pcr\t;\tadx\n+per\t;\tfa\n+pes\t;\tfa\n+pli\t;\tpi\n+plt\t;\tmg\n+pmc\t;\thuw\n+pmu\t;\tphr\n+pnb\t;\tlah\n+pol\t;\tpl\n+por\t;\tpt\n+ppa\t;\tbfy\n+ppr\t;\tlcq\n+prs\t;\tfa_AF\n+pry\t;\tprt\n+pus\t;\tps\n+puz\t;\tpub\n+que\t;\tqu\n+quz\t;\tqu\n+rmy\t;\trom\n+roh\t;\trm\n+ron\t;\tro\n+rum\t;\tro\n+run\t;\trn\n+rus\t;\tru\n+sag\t;\tsg\n+san\t;\tsa\n+sca\t;\thle\n+scc\t;\tsr\n+scr\t;\thr\n+sgn_BR\t;\tbzs\n+sgn_CO\t;\tcsn\n+sgn_DE\t;\tgsg\n+sgn_DK\t;\tdsl\n+sgn_FR\t;\tfsl\n+sgn_GB\t;\tbfi\n+sgn_GR\t;\tgss\n+sgn_IE\t;\tisg\n+sgn_IT\t;\tise\n+sgn_JP\t;\tjsl\n+sgn_MX\t;\tmfs\n+sgn_NI\t;\tncs\n+sgn_NL\t;\tdse\n+sgn_NO\t;\tnsi\n+sgn_PT\t;\tpsr\n+sgn_SE\t;\tswl\n+sgn_US\t;\tase\n+sgn_ZA\t;\tsfs\n+sh\t;\tsr_Latn\n+sin\t;\tsi\n+skk\t;\toyb\n+slk\t;\tsk\n+slo\t;\tsk\n+slv\t;\tsl\n+sme\t;\tse\n+smo\t;\tsm\n+sna\t;\tsn\n+snd\t;\tsd\n+som\t;\tso\n+sot\t;\tst\n+spa\t;\tes\n+spy\t;\tkln\n+sqi\t;\tsq\n+src\t;\tsc\n+srd\t;\tsc\n+srp\t;\tsr\n+ssw\t;\tss\n+sun\t;\tsu\n+swa\t;\tsw\n+swc\t;\tsw_CD\n+swe\t;\tsv\n+swh\t;\tsw\n+tah\t;\tty\n+tam\t;\tta\n+tat\t;\ttt\n+tdu\t;\tdtp\n+tel\t;\tte\n+tgk\t;\ttg\n+tgl\t;\tfil\n+tha\t;\tth\n+thc\t;\ttpo\n+thx\t;\toyb\n+tib\t;\tbo\n+tie\t;\tras\n+tir\t;\tti\n+tkk\t;\ttwm\n+tl\t;\tfil\n+tlw\t;\tweo\n+tmp\t;\ttyj\n+tne\t;\tkak\n+tnf\t;\tfa_AF\n+ton\t;\tto\n+tsf\t;\ttaj\n+tsn\t;\ttn\n+tso\t;\tts\n+ttq\t;\ttmh\n+tuk\t;\ttk\n+tur\t;\ttr\n+tw\t;\tak\n+twi\t;\tak\n+uig\t;\tug\n+ukr\t;\tuk\n+umu\t;\tdel\n+und_004\t;\tund_AF\n+und_008\t;\tund_AL\n+und_010\t;\tund_AQ\n+und_012\t;\tund_DZ\n+und_016\t;\tund_AS\n+und_020\t;\tund_AD\n+und_024\t;\tund_AO\n+und_028\t;\tund_AG\n+und_031\t;\tund_AZ\n+und_032\t;\tund_AR\n+und_036\t;\tund_AU\n+und_040\t;\tund_AT\n+und_044\t;\tund_BS\n+und_048\t;\tund_BH\n+und_050\t;\tund_BD\n+und_051\t;\tund_AM\n+und_052\t;\tund_BB\n+und_056\t;\tund_BE\n+und_060\t;\tund_BM\n+und_062\t;\tund_034\n+und_064\t;\tund_BT\n+und_068\t;\tund_BO\n+und_070\t;\tund_BA\n+und_072\t;\tund_BW\n+und_074\t;\tund_BV\n+und_076\t;\tund_BR\n+und_084\t;\tund_BZ\n+und_086\t;\tund_IO\n+und_090\t;\tund_SB\n+und_092\t;\tund_VG\n+und_096\t;\tund_BN\n+und_100\t;\tund_BG\n+und_104\t;\tund_MM\n+und_108\t;\tund_BI\n+und_112\t;\tund_BY\n+und_116\t;\tund_KH\n+und_120\t;\tund_CM\n+und_124\t;\tund_CA\n+und_132\t;\tund_CV\n+und_136\t;\tund_KY\n+und_140\t;\tund_CF\n+und_144\t;\tund_LK\n+und_148\t;\tund_TD\n+und_152\t;\tund_CL\n+und_156\t;\tund_CN\n+und_158\t;\tund_TW\n+und_162\t;\tund_CX\n+und_166\t;\tund_CC\n+und_170\t;\tund_CO\n+und_172\t;\tund_RU\n+und_174\t;\tund_KM\n+und_175\t;\tund_YT\n+und_178\t;\tund_CG\n+und_180\t;\tund_CD\n+und_184\t;\tund_CK\n+und_188\t;\tund_CR\n+und_191\t;\tund_HR\n+und_192\t;\tund_CU\n+und_196\t;\tund_CY\n+und_200\t;\tund_CZ\n+und_203\t;\tund_CZ\n+und_204\t;\tund_BJ\n+und_208\t;\tund_DK\n+und_212\t;\tund_DM\n+und_214\t;\tund_DO\n+und_218\t;\tund_EC\n+und_222\t;\tund_SV\n+und_226\t;\tund_GQ\n+und_230\t;\tund_ET\n+und_231\t;\tund_ET\n+und_232\t;\tund_ER\n+und_233\t;\tund_EE\n+und_234\t;\tund_FO\n+und_238\t;\tund_FK\n+und_239\t;\tund_GS\n+und_242\t;\tund_FJ\n+und_246\t;\tund_FI\n+und_248\t;\tund_AX\n+und_249\t;\tund_FR\n+und_250\t;\tund_FR\n+und_254\t;\tund_GF\n+und_258\t;\tund_PF\n+und_260\t;\tund_TF\n+und_262\t;\tund_DJ\n+und_266\t;\tund_GA\n+und_268\t;\tund_GE\n+und_270\t;\tund_GM\n+und_275\t;\tund_PS\n+und_276\t;\tund_DE\n+und_278\t;\tund_DE\n+und_280\t;\tund_DE\n+und_288\t;\tund_GH\n+und_292\t;\tund_GI\n+und_296\t;\tund_KI\n+und_300\t;\tund_GR\n+und_304\t;\tund_GL\n+und_308\t;\tund_GD\n+und_312\t;\tund_GP\n+und_316\t;\tund_GU\n+und_320\t;\tund_GT\n+und_324\t;\tund_GN\n+und_328\t;\tund_GY\n+und_332\t;\tund_HT\n+und_334\t;\tund_HM\n+und_336\t;\tund_VA\n+und_340\t;\tund_HN\n+und_344\t;\tund_HK\n+und_348\t;\tund_HU\n+und_352\t;\tund_IS\n+und_356\t;\tund_IN\n+und_360\t;\tund_ID\n+und_364\t;\tund_IR\n+und_368\t;\tund_IQ\n+und_372\t;\tund_IE\n+und_376\t;\tund_IL\n+und_380\t;\tund_IT\n+und_384\t;\tund_CI\n+und_388\t;\tund_JM\n+und_392\t;\tund_JP\n+und_398\t;\tund_KZ\n+und_400\t;\tund_JO\n+und_404\t;\tund_KE\n+und_408\t;\tund_KP\n+und_410\t;\tund_KR\n+und_414\t;\tund_KW\n+und_417\t;\tund_KG\n+und_418\t;\tund_LA\n+und_422\t;\tund_LB\n+und_426\t;\tund_LS\n+und_428\t;\tund_LV\n+und_430\t;\tund_LR\n+und_434\t;\tund_LY\n+und_438\t;\tund_LI\n+und_440\t;\tund_LT\n+und_442\t;\tund_LU\n+und_446\t;\tund_MO\n+und_450\t;\tund_MG\n+und_454\t;\tund_MW\n+und_458\t;\tund_MY\n+und_462\t;\tund_MV\n+und_466\t;\tund_ML\n+und_470\t;\tund_MT\n+und_474\t;\tund_MQ\n+und_478\t;\tund_MR\n+und_480\t;\tund_MU\n+und_484\t;\tund_MX\n+und_492\t;\tund_MC\n+und_496\t;\tund_MN\n+und_498\t;\tund_MD\n+und_499\t;\tund_ME\n+und_500\t;\tund_MS\n+und_504\t;\tund_MA\n+und_508\t;\tund_MZ\n+und_512\t;\tund_OM\n+und_516\t;\tund_NA\n+und_520\t;\tund_NR\n+und_524\t;\tund_NP\n+und_528\t;\tund_NL\n+und_530\t;\tund_CW\n+und_531\t;\tund_CW\n+und_532\t;\tund_CW\n+und_533\t;\tund_AW\n+und_534\t;\tund_SX\n+und_535\t;\tund_BQ\n+und_536\t;\tund_SA\n+und_540\t;\tund_NC\n+und_548\t;\tund_VU\n+und_554\t;\tund_NZ\n+und_558\t;\tund_NI\n+und_562\t;\tund_NE\n+und_566\t;\tund_NG\n+und_570\t;\tund_NU\n+und_574\t;\tund_NF\n+und_578\t;\tund_NO\n+und_580\t;\tund_MP\n+und_581\t;\tund_UM\n+und_582\t;\tund_FM\n+und_583\t;\tund_FM\n+und_584\t;\tund_MH\n+und_585\t;\tund_PW\n+und_586\t;\tund_PK\n+und_591\t;\tund_PA\n+und_598\t;\tund_PG\n+und_600\t;\tund_PY\n+und_604\t;\tund_PE\n+und_608\t;\tund_PH\n+und_612\t;\tund_PN\n+und_616\t;\tund_PL\n+und_620\t;\tund_PT\n+und_624\t;\tund_GW\n+und_626\t;\tund_TL\n+und_630\t;\tund_PR\n+und_634\t;\tund_QA\n+und_638\t;\tund_RE\n+und_642\t;\tund_RO\n+und_643\t;\tund_RU\n+und_646\t;\tund_RW\n+und_652\t;\tund_BL\n+und_654\t;\tund_SH\n+und_659\t;\tund_KN\n+und_660\t;\tund_AI\n+und_662\t;\tund_LC\n+und_663\t;\tund_MF\n+und_666\t;\tund_PM\n+und_670\t;\tund_VC\n+und_674\t;\tund_SM\n+und_678\t;\tund_ST\n+und_682\t;\tund_SA\n+und_686\t;\tund_SN\n+und_688\t;\tund_RS\n+und_690\t;\tund_SC\n+und_694\t;\tund_SL\n+und_702\t;\tund_SG\n+und_703\t;\tund_SK\n+und_704\t;\tund_VN\n+und_705\t;\tund_SI\n+und_706\t;\tund_SO\n+und_710\t;\tund_ZA\n+und_716\t;\tund_ZW\n+und_720\t;\tund_YE\n+und_724\t;\tund_ES\n+und_728\t;\tund_SS\n+und_729\t;\tund_SD\n+und_732\t;\tund_EH\n+und_736\t;\tund_SD\n+und_740\t;\tund_SR\n+und_744\t;\tund_SJ\n+und_748\t;\tund_SZ\n+und_752\t;\tund_SE\n+und_756\t;\tund_CH\n+und_760\t;\tund_SY\n+und_762\t;\tund_TJ\n+und_764\t;\tund_TH\n+und_768\t;\tund_TG\n+und_772\t;\tund_TK\n+und_776\t;\tund_TO\n+und_780\t;\tund_TT\n+und_784\t;\tund_AE\n+und_788\t;\tund_TN\n+und_792\t;\tund_TR\n+und_795\t;\tund_TM\n+und_796\t;\tund_TC\n+und_798\t;\tund_TV\n+und_800\t;\tund_UG\n+und_804\t;\tund_UA\n+und_807\t;\tund_MK\n+und_810\t;\tund_RU\n+und_818\t;\tund_EG\n+und_826\t;\tund_GB\n+und_830\t;\tund_JE\n+und_831\t;\tund_GG\n+und_832\t;\tund_JE\n+und_833\t;\tund_IM\n+und_834\t;\tund_TZ\n+und_840\t;\tund_US\n+und_850\t;\tund_VI\n+und_854\t;\tund_BF\n+und_858\t;\tund_UY\n+und_860\t;\tund_UZ\n+und_862\t;\tund_VE\n+und_876\t;\tund_WF\n+und_882\t;\tund_WS\n+und_886\t;\tund_YE\n+und_887\t;\tund_YE\n+und_890\t;\tund_RS\n+und_891\t;\tund_RS\n+und_894\t;\tund_ZM\n+und_958\t;\tund_AA\n+und_959\t;\tund_QM\n+und_960\t;\tund_QN\n+und_962\t;\tund_QP\n+und_963\t;\tund_QQ\n+und_964\t;\tund_QR\n+und_965\t;\tund_QS\n+und_966\t;\tund_QT\n+und_967\t;\tund_EU\n+und_968\t;\tund_QV\n+und_969\t;\tund_QW\n+und_970\t;\tund_QX\n+und_971\t;\tund_QY\n+und_972\t;\tund_QZ\n+und_973\t;\tund_XA\n+und_974\t;\tund_XB\n+und_975\t;\tund_XC\n+und_976\t;\tund_XD\n+und_977\t;\tund_XE\n+und_978\t;\tund_XF\n+und_979\t;\tund_XG\n+und_980\t;\tund_XH\n+und_981\t;\tund_XI\n+und_982\t;\tund_XJ\n+und_983\t;\tund_XK\n+und_984\t;\tund_XL\n+und_985\t;\tund_XM\n+und_986\t;\tund_XN\n+und_987\t;\tund_XO\n+und_988\t;\tund_XP\n+und_989\t;\tund_XQ\n+und_990\t;\tund_XR\n+und_991\t;\tund_XS\n+und_992\t;\tund_XT\n+und_993\t;\tund_XU\n+und_994\t;\tund_XV\n+und_995\t;\tund_XW\n+und_996\t;\tund_XX\n+und_997\t;\tund_XY\n+und_998\t;\tund_XZ\n+und_999\t;\tund_ZZ\n+und_AN\t;\tund_CW\n+und_BU\t;\tund_MM\n+und_CS\t;\tund_RS\n+und_CT\t;\tund_KI\n+und_DD\t;\tund_DE\n+und_DY\t;\tund_BJ\n+und_FQ\t;\tund_AQ\n+und_FX\t;\tund_FR\n+und_HV\t;\tund_BF\n+und_JT\t;\tund_UM\n+und_MI\t;\tund_UM\n+und_NH\t;\tund_VU\n+und_NQ\t;\tund_AQ\n+und_NT\t;\tund_SA\n+und_PC\t;\tund_FM\n+und_PU\t;\tund_UM\n+und_PZ\t;\tund_PA\n+und_QU\t;\tund_EU\n+und_Qaai\t;\tund_Zinh\n+und_RH\t;\tund_ZW\n+und_SU\t;\tund_RU\n+und_TP\t;\tund_TL\n+und_UK\t;\tund_GB\n+und_VD\t;\tund_VN\n+und_WK\t;\tund_UM\n+und_YD\t;\tund_YE\n+und_YU\t;\tund_RS\n+und_ZR\t;\tund_CD\n+und_aaland\t;\tund_AX\n+und_arevela\t;\tund\n+und_arevmda\t;\tund\n+und_bokmal\t;\tund\n+und_hakka\t;\tund\n+und_heploc\t;\tund_alalc97\n+und_lojban\t;\tund\n+und_nynorsk\t;\tund\n+und_polytoni\t;\tund_polyton\n+und_saaho\t;\tund\n+und_xiang\t;\tund\n+uok\t;\tema\n+urd\t;\tur\n+uzb\t;\tuz\n+uzn\t;\tuz\n+ven\t;\tve\n+vie\t;\tvi\n+vol\t;\tvo\n+wel\t;\tcy\n+wln\t;\twa\n+wol\t;\two\n+xba\t;\tcax\n+xho\t;\txh\n+xia\t;\tacn\n+xkh\t;\twaw\n+xpe\t;\tkpe\n+xsj\t;\tsuj\n+xsl\t;\tden\n+ybd\t;\trki\n+ydd\t;\tyi\n+yid\t;\tyi\n+yma\t;\tlrr\n+ymt\t;\tmtm\n+yor\t;\tyo\n+yos\t;\tzom\n+yuu\t;\tyug\n+zai\t;\tzap\n+zh_guoyu\t;\tzh\n+zh_hakka\t;\thak\n+zh_xiang\t;\thsn\n+zha\t;\tza\n+zho\t;\tzh\n+zsm\t;\tms\n+zul\t;\tzu\n+zyb\t;\tza\n+\n+# decanonicalized\n+\n+aar_saaho\t;\tssy\n+arm_arevela\t;\thy\n+arm_arevela_arevmda\t;\thyw\n+arm_arevmda\t;\thyw\n+chi_guoyu\t;\tzh\n+chi_guoyu_hakka_xiang\t;\thak\n+chi_hakka\t;\thak\n+chi_hakka_xiang\t;\thak\n+chi_xiang\t;\thsn\n+cmn_guoyu\t;\tzh\n+cmn_guoyu_hakka_xiang\t;\thak\n+cmn_hakka\t;\thak\n+cmn_hakka_xiang\t;\thak\n+cmn_xiang\t;\thsn\n+en_840_aaland\t;\ten_US\n+en_840_heploc\t;\ten_US_alalc97\n+en_840_polytoni\t;\ten_US_polyton\n+eng_840_aaland\t;\ten_US\n+eng_840_heploc\t;\ten_US_alalc97\n+eng_840_polytoni\t;\ten_US_polyton\n+eng_US_aaland\t;\ten_US\n+eng_US_heploc\t;\ten_US_alalc97\n+eng_US_polytoni\t;\ten_US_polyton\n+eng_aaland\t;\ten_AX\n+eng_arevela\t;\ten\n+eng_arevela_arevmda\t;\ten\n+eng_lojban\t;\ten\n+hye_arevela\t;\thy\n+hye_arevela_arevmda\t;\thyw\n+sgn_076\t;\tbzs\n+sgn_170\t;\tcsn\n+sgn_208\t;\tdsl\n+sgn_249\t;\tfsl\n+sgn_250\t;\tfsl\n+sgn_276\t;\tgsg\n+sgn_278\t;\tgsg\n+sgn_280\t;\tgsg\n+sgn_300\t;\tgss\n+sgn_372\t;\tisg\n+sgn_380\t;\tise\n+sgn_392\t;\tjsl\n+sgn_484\t;\tmfs\n+sgn_528\t;\tdse\n+sgn_558\t;\tncs\n+sgn_578\t;\tnsi\n+sgn_620\t;\tpsr\n+sgn_710\t;\tsfs\n+sgn_752\t;\tswl\n+sgn_826\t;\tbfi\n+sgn_840\t;\tase\n+sgn_DD\t;\tgsg\n+sgn_FX\t;\tfsl\n+sgn_UK\t;\tbfi\n+zho_guoyu\t;\tzh\n+zho_guoyu_hakka_xiang\t;\thak\n+zho_hakka\t;\thak\n+zho_hakka_xiang\t;\thak\n+zho_xiang\t;\thsn\n+\n+# withIrrelevants\n+\n+aa_Adlm_AC_fonipa_saaho\t;\tssy_Adlm_AC_fonipa\n+aaa_Adlm_004_fonipa\t;\taaa_Adlm_AF_fonipa\n+aaa_Adlm_008_fonipa\t;\taaa_Adlm_AL_fonipa\n+aaa_Adlm_010_fonipa\t;\taaa_Adlm_AQ_fonipa\n+aaa_Adlm_012_fonipa\t;\taaa_Adlm_DZ_fonipa\n+aaa_Adlm_016_fonipa\t;\taaa_Adlm_AS_fonipa\n+aaa_Adlm_020_fonipa\t;\taaa_Adlm_AD_fonipa\n+aaa_Adlm_024_fonipa\t;\taaa_Adlm_AO_fonipa\n+aaa_Adlm_028_fonipa\t;\taaa_Adlm_AG_fonipa\n+aaa_Adlm_031_fonipa\t;\taaa_Adlm_AZ_fonipa\n+aaa_Adlm_032_fonipa\t;\taaa_Adlm_AR_fonipa\n+aaa_Adlm_036_fonipa\t;\taaa_Adlm_AU_fonipa\n+aaa_Adlm_040_fonipa\t;\taaa_Adlm_AT_fonipa\n+aaa_Adlm_044_fonipa\t;\taaa_Adlm_BS_fonipa\n+aaa_Adlm_048_fonipa\t;\taaa_Adlm_BH_fonipa\n+aaa_Adlm_050_fonipa\t;\taaa_Adlm_BD_fonipa\n+aaa_Adlm_051_fonipa\t;\taaa_Adlm_AM_fonipa\n+aaa_Adlm_052_fonipa\t;\taaa_Adlm_BB_fonipa\n+aaa_Adlm_056_fonipa\t;\taaa_Adlm_BE_fonipa\n+aaa_Adlm_060_fonipa\t;\taaa_Adlm_BM_fonipa\n+aaa_Adlm_062_fonipa\t;\taaa_Adlm_034_fonipa\n+aaa_Adlm_064_fonipa\t;\taaa_Adlm_BT_fonipa\n+aaa_Adlm_068_fonipa\t;\taaa_Adlm_BO_fonipa\n+aaa_Adlm_070_fonipa\t;\taaa_Adlm_BA_fonipa\n+aaa_Adlm_072_fonipa\t;\taaa_Adlm_BW_fonipa\n+aaa_Adlm_074_fonipa\t;\taaa_Adlm_BV_fonipa\n+aaa_Adlm_076_fonipa\t;\taaa_Adlm_BR_fonipa\n+aaa_Adlm_084_fonipa\t;\taaa_Adlm_BZ_fonipa\n+aaa_Adlm_086_fonipa\t;\taaa_Adlm_IO_fonipa\n+aaa_Adlm_090_fonipa\t;\taaa_Adlm_SB_fonipa\n+aaa_Adlm_092_fonipa\t;\taaa_Adlm_VG_fonipa\n+aaa_Adlm_096_fonipa\t;\taaa_Adlm_BN_fonipa\n+aaa_Adlm_100_fonipa\t;\taaa_Adlm_BG_fonipa\n+aaa_Adlm_104_fonipa\t;\taaa_Adlm_MM_fonipa\n+aaa_Adlm_108_fonipa\t;\taaa_Adlm_BI_fonipa\n+aaa_Adlm_112_fonipa\t;\taaa_Adlm_BY_fonipa\n+aaa_Adlm_116_fonipa\t;\taaa_Adlm_KH_fonipa\n+aaa_Adlm_120_fonipa\t;\taaa_Adlm_CM_fonipa\n+aaa_Adlm_124_fonipa\t;\taaa_Adlm_CA_fonipa\n+aaa_Adlm_132_fonipa\t;\taaa_Adlm_CV_fonipa\n+aaa_Adlm_136_fonipa\t;\taaa_Adlm_KY_fonipa\n+aaa_Adlm_140_fonipa\t;\taaa_Adlm_CF_fonipa\n+aaa_Adlm_144_fonipa\t;\taaa_Adlm_LK_fonipa\n+aaa_Adlm_148_fonipa\t;\taaa_Adlm_TD_fonipa\n+aaa_Adlm_152_fonipa\t;\taaa_Adlm_CL_fonipa\n+aaa_Adlm_156_fonipa\t;\taaa_Adlm_CN_fonipa\n+aaa_Adlm_158_fonipa\t;\taaa_Adlm_TW_fonipa\n+aaa_Adlm_162_fonipa\t;\taaa_Adlm_CX_fonipa\n+aaa_Adlm_166_fonipa\t;\taaa_Adlm_CC_fonipa\n+aaa_Adlm_170_fonipa\t;\taaa_Adlm_CO_fonipa\n+aaa_Adlm_172_fonipa\t;\taaa_Adlm_RU_fonipa\n+aaa_Adlm_174_fonipa\t;\taaa_Adlm_KM_fonipa\n+aaa_Adlm_175_fonipa\t;\taaa_Adlm_YT_fonipa\n+aaa_Adlm_178_fonipa\t;\taaa_Adlm_CG_fonipa\n+aaa_Adlm_180_fonipa\t;\taaa_Adlm_CD_fonipa\n+aaa_Adlm_184_fonipa\t;\taaa_Adlm_CK_fonipa\n+aaa_Adlm_188_fonipa\t;\taaa_Adlm_CR_fonipa\n+aaa_Adlm_191_fonipa\t;\taaa_Adlm_HR_fonipa\n+aaa_Adlm_192_fonipa\t;\taaa_Adlm_CU_fonipa\n+aaa_Adlm_196_fonipa\t;\taaa_Adlm_CY_fonipa\n+aaa_Adlm_200_fonipa\t;\taaa_Adlm_CZ_fonipa\n+aaa_Adlm_203_fonipa\t;\taaa_Adlm_CZ_fonipa\n+aaa_Adlm_204_fonipa\t;\taaa_Adlm_BJ_fonipa\n+aaa_Adlm_208_fonipa\t;\taaa_Adlm_DK_fonipa\n+aaa_Adlm_212_fonipa\t;\taaa_Adlm_DM_fonipa\n+aaa_Adlm_214_fonipa\t;\taaa_Adlm_DO_fonipa\n+aaa_Adlm_218_fonipa\t;\taaa_Adlm_EC_fonipa\n+aaa_Adlm_222_fonipa\t;\taaa_Adlm_SV_fonipa\n+aaa_Adlm_226_fonipa\t;\taaa_Adlm_GQ_fonipa\n+aaa_Adlm_230_fonipa\t;\taaa_Adlm_ET_fonipa\n+aaa_Adlm_231_fonipa\t;\taaa_Adlm_ET_fonipa\n+aaa_Adlm_232_fonipa\t;\taaa_Adlm_ER_fonipa\n+aaa_Adlm_233_fonipa\t;\taaa_Adlm_EE_fonipa\n+aaa_Adlm_234_fonipa\t;\taaa_Adlm_FO_fonipa\n+aaa_Adlm_238_fonipa\t;\taaa_Adlm_FK_fonipa\n+aaa_Adlm_239_fonipa\t;\taaa_Adlm_GS_fonipa\n+aaa_Adlm_242_fonipa\t;\taaa_Adlm_FJ_fonipa\n+aaa_Adlm_246_fonipa\t;\taaa_Adlm_FI_fonipa\n+aaa_Adlm_248_fonipa\t;\taaa_Adlm_AX_fonipa\n+aaa_Adlm_249_fonipa\t;\taaa_Adlm_FR_fonipa\n+aaa_Adlm_250_fonipa\t;\taaa_Adlm_FR_fonipa\n+aaa_Adlm_254_fonipa\t;\taaa_Adlm_GF_fonipa\n+aaa_Adlm_258_fonipa\t;\taaa_Adlm_PF_fonipa\n+aaa_Adlm_260_fonipa\t;\taaa_Adlm_TF_fonipa\n+aaa_Adlm_262_fonipa\t;\taaa_Adlm_DJ_fonipa\n+aaa_Adlm_266_fonipa\t;\taaa_Adlm_GA_fonipa\n+aaa_Adlm_268_fonipa\t;\taaa_Adlm_GE_fonipa\n+aaa_Adlm_270_fonipa\t;\taaa_Adlm_GM_fonipa\n+aaa_Adlm_275_fonipa\t;\taaa_Adlm_PS_fonipa\n+aaa_Adlm_276_fonipa\t;\taaa_Adlm_DE_fonipa\n+aaa_Adlm_278_fonipa\t;\taaa_Adlm_DE_fonipa\n+aaa_Adlm_280_fonipa\t;\taaa_Adlm_DE_fonipa\n+aaa_Adlm_288_fonipa\t;\taaa_Adlm_GH_fonipa\n+aaa_Adlm_292_fonipa\t;\taaa_Adlm_GI_fonipa\n+aaa_Adlm_296_fonipa\t;\taaa_Adlm_KI_fonipa\n+aaa_Adlm_300_fonipa\t;\taaa_Adlm_GR_fonipa\n+aaa_Adlm_304_fonipa\t;\taaa_Adlm_GL_fonipa\n+aaa_Adlm_308_fonipa\t;\taaa_Adlm_GD_fonipa\n+aaa_Adlm_312_fonipa\t;\taaa_Adlm_GP_fonipa\n+aaa_Adlm_316_fonipa\t;\taaa_Adlm_GU_fonipa\n+aaa_Adlm_320_fonipa\t;\taaa_Adlm_GT_fonipa\n+aaa_Adlm_324_fonipa\t;\taaa_Adlm_GN_fonipa\n+aaa_Adlm_328_fonipa\t;\taaa_Adlm_GY_fonipa\n+aaa_Adlm_332_fonipa\t;\taaa_Adlm_HT_fonipa\n+aaa_Adlm_334_fonipa\t;\taaa_Adlm_HM_fonipa\n+aaa_Adlm_336_fonipa\t;\taaa_Adlm_VA_fonipa\n+aaa_Adlm_340_fonipa\t;\taaa_Adlm_HN_fonipa\n+aaa_Adlm_344_fonipa\t;\taaa_Adlm_HK_fonipa\n+aaa_Adlm_348_fonipa\t;\taaa_Adlm_HU_fonipa\n+aaa_Adlm_352_fonipa\t;\taaa_Adlm_IS_fonipa\n+aaa_Adlm_356_fonipa\t;\taaa_Adlm_IN_fonipa\n+aaa_Adlm_360_fonipa\t;\taaa_Adlm_ID_fonipa\n+aaa_Adlm_364_fonipa\t;\taaa_Adlm_IR_fonipa\n+aaa_Adlm_368_fonipa\t;\taaa_Adlm_IQ_fonipa\n+aaa_Adlm_372_fonipa\t;\taaa_Adlm_IE_fonipa\n+aaa_Adlm_376_fonipa\t;\taaa_Adlm_IL_fonipa\n+aaa_Adlm_380_fonipa\t;\taaa_Adlm_IT_fonipa\n+aaa_Adlm_384_fonipa\t;\taaa_Adlm_CI_fonipa\n+aaa_Adlm_388_fonipa\t;\taaa_Adlm_JM_fonipa\n+aaa_Adlm_392_fonipa\t;\taaa_Adlm_JP_fonipa\n+aaa_Adlm_398_fonipa\t;\taaa_Adlm_KZ_fonipa\n+aaa_Adlm_400_fonipa\t;\taaa_Adlm_JO_fonipa\n+aaa_Adlm_404_fonipa\t;\taaa_Adlm_KE_fonipa\n+aaa_Adlm_408_fonipa\t;\taaa_Adlm_KP_fonipa\n+aaa_Adlm_410_fonipa\t;\taaa_Adlm_KR_fonipa\n+aaa_Adlm_414_fonipa\t;\taaa_Adlm_KW_fonipa\n+aaa_Adlm_417_fonipa\t;\taaa_Adlm_KG_fonipa\n+aaa_Adlm_418_fonipa\t;\taaa_Adlm_LA_fonipa\n+aaa_Adlm_422_fonipa\t;\taaa_Adlm_LB_fonipa\n+aaa_Adlm_426_fonipa\t;\taaa_Adlm_LS_fonipa\n+aaa_Adlm_428_fonipa\t;\taaa_Adlm_LV_fonipa\n+aaa_Adlm_430_fonipa\t;\taaa_Adlm_LR_fonipa\n+aaa_Adlm_434_fonipa\t;\taaa_Adlm_LY_fonipa\n+aaa_Adlm_438_fonipa\t;\taaa_Adlm_LI_fonipa\n+aaa_Adlm_440_fonipa\t;\taaa_Adlm_LT_fonipa\n+aaa_Adlm_442_fonipa\t;\taaa_Adlm_LU_fonipa\n+aaa_Adlm_446_fonipa\t;\taaa_Adlm_MO_fonipa\n+aaa_Adlm_450_fonipa\t;\taaa_Adlm_MG_fonipa\n+aaa_Adlm_454_fonipa\t;\taaa_Adlm_MW_fonipa\n+aaa_Adlm_458_fonipa\t;\taaa_Adlm_MY_fonipa\n+aaa_Adlm_462_fonipa\t;\taaa_Adlm_MV_fonipa\n+aaa_Adlm_466_fonipa\t;\taaa_Adlm_ML_fonipa\n+aaa_Adlm_470_fonipa\t;\taaa_Adlm_MT_fonipa\n+aaa_Adlm_474_fonipa\t;\taaa_Adlm_MQ_fonipa\n+aaa_Adlm_478_fonipa\t;\taaa_Adlm_MR_fonipa\n+aaa_Adlm_480_fonipa\t;\taaa_Adlm_MU_fonipa\n+aaa_Adlm_484_fonipa\t;\taaa_Adlm_MX_fonipa\n+aaa_Adlm_492_fonipa\t;\taaa_Adlm_MC_fonipa\n+aaa_Adlm_496_fonipa\t;\taaa_Adlm_MN_fonipa\n+aaa_Adlm_498_fonipa\t;\taaa_Adlm_MD_fonipa\n+aaa_Adlm_499_fonipa\t;\taaa_Adlm_ME_fonipa\n+aaa_Adlm_500_fonipa\t;\taaa_Adlm_MS_fonipa\n+aaa_Adlm_504_fonipa\t;\taaa_Adlm_MA_fonipa\n+aaa_Adlm_508_fonipa\t;\taaa_Adlm_MZ_fonipa\n+aaa_Adlm_512_fonipa\t;\taaa_Adlm_OM_fonipa\n+aaa_Adlm_516_fonipa\t;\taaa_Adlm_NA_fonipa\n+aaa_Adlm_520_fonipa\t;\taaa_Adlm_NR_fonipa\n+aaa_Adlm_524_fonipa\t;\taaa_Adlm_NP_fonipa\n+aaa_Adlm_528_fonipa\t;\taaa_Adlm_NL_fonipa\n+aaa_Adlm_530_fonipa\t;\taaa_Adlm_CW_fonipa\n+aaa_Adlm_531_fonipa\t;\taaa_Adlm_CW_fonipa\n+aaa_Adlm_532_fonipa\t;\taaa_Adlm_CW_fonipa\n+aaa_Adlm_533_fonipa\t;\taaa_Adlm_AW_fonipa\n+aaa_Adlm_534_fonipa\t;\taaa_Adlm_SX_fonipa\n+aaa_Adlm_535_fonipa\t;\taaa_Adlm_BQ_fonipa\n+aaa_Adlm_536_fonipa\t;\taaa_Adlm_SA_fonipa\n+aaa_Adlm_540_fonipa\t;\taaa_Adlm_NC_fonipa\n+aaa_Adlm_548_fonipa\t;\taaa_Adlm_VU_fonipa\n+aaa_Adlm_554_fonipa\t;\taaa_Adlm_NZ_fonipa\n+aaa_Adlm_558_fonipa\t;\taaa_Adlm_NI_fonipa\n+aaa_Adlm_562_fonipa\t;\taaa_Adlm_NE_fonipa\n+aaa_Adlm_566_fonipa\t;\taaa_Adlm_NG_fonipa\n+aaa_Adlm_570_fonipa\t;\taaa_Adlm_NU_fonipa\n+aaa_Adlm_574_fonipa\t;\taaa_Adlm_NF_fonipa\n+aaa_Adlm_578_fonipa\t;\taaa_Adlm_NO_fonipa\n+aaa_Adlm_580_fonipa\t;\taaa_Adlm_MP_fonipa\n+aaa_Adlm_581_fonipa\t;\taaa_Adlm_UM_fonipa\n+aaa_Adlm_582_fonipa\t;\taaa_Adlm_FM_fonipa\n+aaa_Adlm_583_fonipa\t;\taaa_Adlm_FM_fonipa\n+aaa_Adlm_584_fonipa\t;\taaa_Adlm_MH_fonipa\n+aaa_Adlm_585_fonipa\t;\taaa_Adlm_PW_fonipa\n+aaa_Adlm_586_fonipa\t;\taaa_Adlm_PK_fonipa\n+aaa_Adlm_591_fonipa\t;\taaa_Adlm_PA_fonipa\n+aaa_Adlm_598_fonipa\t;\taaa_Adlm_PG_fonipa\n+aaa_Adlm_600_fonipa\t;\taaa_Adlm_PY_fonipa\n+aaa_Adlm_604_fonipa\t;\taaa_Adlm_PE_fonipa\n+aaa_Adlm_608_fonipa\t;\taaa_Adlm_PH_fonipa\n+aaa_Adlm_612_fonipa\t;\taaa_Adlm_PN_fonipa\n+aaa_Adlm_616_fonipa\t;\taaa_Adlm_PL_fonipa\n+aaa_Adlm_620_fonipa\t;\taaa_Adlm_PT_fonipa\n+aaa_Adlm_624_fonipa\t;\taaa_Adlm_GW_fonipa\n+aaa_Adlm_626_fonipa\t;\taaa_Adlm_TL_fonipa\n+aaa_Adlm_630_fonipa\t;\taaa_Adlm_PR_fonipa\n+aaa_Adlm_634_fonipa\t;\taaa_Adlm_QA_fonipa\n+aaa_Adlm_638_fonipa\t;\taaa_Adlm_RE_fonipa\n+aaa_Adlm_642_fonipa\t;\taaa_Adlm_RO_fonipa\n+aaa_Adlm_643_fonipa\t;\taaa_Adlm_RU_fonipa\n+aaa_Adlm_646_fonipa\t;\taaa_Adlm_RW_fonipa\n+aaa_Adlm_652_fonipa\t;\taaa_Adlm_BL_fonipa\n+aaa_Adlm_654_fonipa\t;\taaa_Adlm_SH_fonipa\n+aaa_Adlm_659_fonipa\t;\taaa_Adlm_KN_fonipa\n+aaa_Adlm_660_fonipa\t;\taaa_Adlm_AI_fonipa\n+aaa_Adlm_662_fonipa\t;\taaa_Adlm_LC_fonipa\n+aaa_Adlm_663_fonipa\t;\taaa_Adlm_MF_fonipa\n+aaa_Adlm_666_fonipa\t;\taaa_Adlm_PM_fonipa\n+aaa_Adlm_670_fonipa\t;\taaa_Adlm_VC_fonipa\n+aaa_Adlm_674_fonipa\t;\taaa_Adlm_SM_fonipa\n+aaa_Adlm_678_fonipa\t;\taaa_Adlm_ST_fonipa\n+aaa_Adlm_682_fonipa\t;\taaa_Adlm_SA_fonipa\n+aaa_Adlm_686_fonipa\t;\taaa_Adlm_SN_fonipa\n+aaa_Adlm_688_fonipa\t;\taaa_Adlm_RS_fonipa\n+aaa_Adlm_690_fonipa\t;\taaa_Adlm_SC_fonipa\n+aaa_Adlm_694_fonipa\t;\taaa_Adlm_SL_fonipa\n+aaa_Adlm_702_fonipa\t;\taaa_Adlm_SG_fonipa\n+aaa_Adlm_703_fonipa\t;\taaa_Adlm_SK_fonipa\n+aaa_Adlm_704_fonipa\t;\taaa_Adlm_VN_fonipa\n+aaa_Adlm_705_fonipa\t;\taaa_Adlm_SI_fonipa\n+aaa_Adlm_706_fonipa\t;\taaa_Adlm_SO_fonipa\n+aaa_Adlm_710_fonipa\t;\taaa_Adlm_ZA_fonipa\n+aaa_Adlm_716_fonipa\t;\taaa_Adlm_ZW_fonipa\n+aaa_Adlm_720_fonipa\t;\taaa_Adlm_YE_fonipa\n+aaa_Adlm_724_fonipa\t;\taaa_Adlm_ES_fonipa\n+aaa_Adlm_728_fonipa\t;\taaa_Adlm_SS_fonipa\n+aaa_Adlm_729_fonipa\t;\taaa_Adlm_SD_fonipa\n+aaa_Adlm_732_fonipa\t;\taaa_Adlm_EH_fonipa\n+aaa_Adlm_736_fonipa\t;\taaa_Adlm_SD_fonipa\n+aaa_Adlm_740_fonipa\t;\taaa_Adlm_SR_fonipa\n+aaa_Adlm_744_fonipa\t;\taaa_Adlm_SJ_fonipa\n+aaa_Adlm_748_fonipa\t;\taaa_Adlm_SZ_fonipa\n+aaa_Adlm_752_fonipa\t;\taaa_Adlm_SE_fonipa\n+aaa_Adlm_756_fonipa\t;\taaa_Adlm_CH_fonipa\n+aaa_Adlm_760_fonipa\t;\taaa_Adlm_SY_fonipa\n+aaa_Adlm_762_fonipa\t;\taaa_Adlm_TJ_fonipa\n+aaa_Adlm_764_fonipa\t;\taaa_Adlm_TH_fonipa\n+aaa_Adlm_768_fonipa\t;\taaa_Adlm_TG_fonipa\n+aaa_Adlm_772_fonipa\t;\taaa_Adlm_TK_fonipa\n+aaa_Adlm_776_fonipa\t;\taaa_Adlm_TO_fonipa\n+aaa_Adlm_780_fonipa\t;\taaa_Adlm_TT_fonipa\n+aaa_Adlm_784_fonipa\t;\taaa_Adlm_AE_fonipa\n+aaa_Adlm_788_fonipa\t;\taaa_Adlm_TN_fonipa\n+aaa_Adlm_792_fonipa\t;\taaa_Adlm_TR_fonipa\n+aaa_Adlm_795_fonipa\t;\taaa_Adlm_TM_fonipa\n+aaa_Adlm_796_fonipa\t;\taaa_Adlm_TC_fonipa\n+aaa_Adlm_798_fonipa\t;\taaa_Adlm_TV_fonipa\n+aaa_Adlm_800_fonipa\t;\taaa_Adlm_UG_fonipa\n+aaa_Adlm_804_fonipa\t;\taaa_Adlm_UA_fonipa\n+aaa_Adlm_807_fonipa\t;\taaa_Adlm_MK_fonipa\n+aaa_Adlm_810_fonipa\t;\taaa_Adlm_RU_fonipa\n+aaa_Adlm_818_fonipa\t;\taaa_Adlm_EG_fonipa\n+aaa_Adlm_826_fonipa\t;\taaa_Adlm_GB_fonipa\n+aaa_Adlm_830_fonipa\t;\taaa_Adlm_JE_fonipa\n+aaa_Adlm_831_fonipa\t;\taaa_Adlm_GG_fonipa\n+aaa_Adlm_832_fonipa\t;\taaa_Adlm_JE_fonipa\n+aaa_Adlm_833_fonipa\t;\taaa_Adlm_IM_fonipa\n+aaa_Adlm_834_fonipa\t;\taaa_Adlm_TZ_fonipa\n+aaa_Adlm_840_fonipa\t;\taaa_Adlm_US_fonipa\n+aaa_Adlm_850_fonipa\t;\taaa_Adlm_VI_fonipa\n+aaa_Adlm_854_fonipa\t;\taaa_Adlm_BF_fonipa\n+aaa_Adlm_858_fonipa\t;\taaa_Adlm_UY_fonipa\n+aaa_Adlm_860_fonipa\t;\taaa_Adlm_UZ_fonipa\n+aaa_Adlm_862_fonipa\t;\taaa_Adlm_VE_fonipa\n+aaa_Adlm_876_fonipa\t;\taaa_Adlm_WF_fonipa\n+aaa_Adlm_882_fonipa\t;\taaa_Adlm_WS_fonipa\n+aaa_Adlm_886_fonipa\t;\taaa_Adlm_YE_fonipa\n+aaa_Adlm_887_fonipa\t;\taaa_Adlm_YE_fonipa\n+aaa_Adlm_890_fonipa\t;\taaa_Adlm_RS_fonipa\n+aaa_Adlm_891_fonipa\t;\taaa_Adlm_RS_fonipa\n+aaa_Adlm_894_fonipa\t;\taaa_Adlm_ZM_fonipa\n+aaa_Adlm_958_fonipa\t;\taaa_Adlm_AA_fonipa\n+aaa_Adlm_959_fonipa\t;\taaa_Adlm_QM_fonipa\n+aaa_Adlm_960_fonipa\t;\taaa_Adlm_QN_fonipa\n+aaa_Adlm_962_fonipa\t;\taaa_Adlm_QP_fonipa\n+aaa_Adlm_963_fonipa\t;\taaa_Adlm_QQ_fonipa\n+aaa_Adlm_964_fonipa\t;\taaa_Adlm_QR_fonipa\n+aaa_Adlm_965_fonipa\t;\taaa_Adlm_QS_fonipa\n+aaa_Adlm_966_fonipa\t;\taaa_Adlm_QT_fonipa\n+aaa_Adlm_967_fonipa\t;\taaa_Adlm_EU_fonipa\n+aaa_Adlm_968_fonipa\t;\taaa_Adlm_QV_fonipa\n+aaa_Adlm_969_fonipa\t;\taaa_Adlm_QW_fonipa\n+aaa_Adlm_970_fonipa\t;\taaa_Adlm_QX_fonipa\n+aaa_Adlm_971_fonipa\t;\taaa_Adlm_QY_fonipa\n+aaa_Adlm_972_fonipa\t;\taaa_Adlm_QZ_fonipa\n+aaa_Adlm_973_fonipa\t;\taaa_Adlm_XA_fonipa\n+aaa_Adlm_974_fonipa\t;\taaa_Adlm_XB_fonipa\n+aaa_Adlm_975_fonipa\t;\taaa_Adlm_XC_fonipa\n+aaa_Adlm_976_fonipa\t;\taaa_Adlm_XD_fonipa\n+aaa_Adlm_977_fonipa\t;\taaa_Adlm_XE_fonipa\n+aaa_Adlm_978_fonipa\t;\taaa_Adlm_XF_fonipa\n+aaa_Adlm_979_fonipa\t;\taaa_Adlm_XG_fonipa\n+aaa_Adlm_980_fonipa\t;\taaa_Adlm_XH_fonipa\n+aaa_Adlm_981_fonipa\t;\taaa_Adlm_XI_fonipa\n+aaa_Adlm_982_fonipa\t;\taaa_Adlm_XJ_fonipa\n+aaa_Adlm_983_fonipa\t;\taaa_Adlm_XK_fonipa\n+aaa_Adlm_984_fonipa\t;\taaa_Adlm_XL_fonipa\n+aaa_Adlm_985_fonipa\t;\taaa_Adlm_XM_fonipa\n+aaa_Adlm_986_fonipa\t;\taaa_Adlm_XN_fonipa\n+aaa_Adlm_987_fonipa\t;\taaa_Adlm_XO_fonipa\n+aaa_Adlm_988_fonipa\t;\taaa_Adlm_XP_fonipa\n+aaa_Adlm_989_fonipa\t;\taaa_Adlm_XQ_fonipa\n+aaa_Adlm_990_fonipa\t;\taaa_Adlm_XR_fonipa\n+aaa_Adlm_991_fonipa\t;\taaa_Adlm_XS_fonipa\n+aaa_Adlm_992_fonipa\t;\taaa_Adlm_XT_fonipa\n+aaa_Adlm_993_fonipa\t;\taaa_Adlm_XU_fonipa\n+aaa_Adlm_994_fonipa\t;\taaa_Adlm_XV_fonipa\n+aaa_Adlm_995_fonipa\t;\taaa_Adlm_XW_fonipa\n+aaa_Adlm_996_fonipa\t;\taaa_Adlm_XX_fonipa\n+aaa_Adlm_997_fonipa\t;\taaa_Adlm_XY_fonipa\n+aaa_Adlm_998_fonipa\t;\taaa_Adlm_XZ_fonipa\n+aaa_Adlm_999_fonipa\t;\taaa_Adlm_ZZ_fonipa\n+aaa_Adlm_AC_aaland_fonipa\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AC_arevela_fonipa\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AC_arevmda_fonipa\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AC_bokmal_fonipa\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AC_fonipa_hakka\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AC_fonipa_heploc\t;\taaa_Adlm_AC_alalc97_fonipa\n+aaa_Adlm_AC_fonipa_lojban\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AC_fonipa_nynorsk\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AC_fonipa_polytoni\t;\taaa_Adlm_AC_fonipa_polyton\n+aaa_Adlm_AC_fonipa_saaho\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AC_fonipa_xiang\t;\taaa_Adlm_AC_fonipa\n+aaa_Adlm_AN_fonipa\t;\taaa_Adlm_CW_fonipa\n+aaa_Adlm_BU_fonipa\t;\taaa_Adlm_MM_fonipa\n+aaa_Adlm_CS_fonipa\t;\taaa_Adlm_RS_fonipa\n+aaa_Adlm_CT_fonipa\t;\taaa_Adlm_KI_fonipa\n+aaa_Adlm_DD_fonipa\t;\taaa_Adlm_DE_fonipa\n+aaa_Adlm_DY_fonipa\t;\taaa_Adlm_BJ_fonipa\n+aaa_Adlm_FQ_fonipa\t;\taaa_Adlm_AQ_fonipa\n+aaa_Adlm_FX_fonipa\t;\taaa_Adlm_FR_fonipa\n+aaa_Adlm_HV_fonipa\t;\taaa_Adlm_BF_fonipa\n+aaa_Adlm_JT_fonipa\t;\taaa_Adlm_UM_fonipa\n+aaa_Adlm_MI_fonipa\t;\taaa_Adlm_UM_fonipa\n+aaa_Adlm_NH_fonipa\t;\taaa_Adlm_VU_fonipa\n+aaa_Adlm_NQ_fonipa\t;\taaa_Adlm_AQ_fonipa\n+aaa_Adlm_NT_fonipa\t;\taaa_Adlm_SA_fonipa\n+aaa_Adlm_PC_fonipa\t;\taaa_Adlm_FM_fonipa\n+aaa_Adlm_PU_fonipa\t;\taaa_Adlm_UM_fonipa\n+aaa_Adlm_PZ_fonipa\t;\taaa_Adlm_PA_fonipa\n+aaa_Adlm_QU_fonipa\t;\taaa_Adlm_EU_fonipa\n+aaa_Adlm_RH_fonipa\t;\taaa_Adlm_ZW_fonipa\n+aaa_Adlm_SU_fonipa\t;\taaa_Adlm_RU_fonipa\n+aaa_Adlm_TP_fonipa\t;\taaa_Adlm_TL_fonipa\n+aaa_Adlm_UK_fonipa\t;\taaa_Adlm_GB_fonipa\n+aaa_Adlm_VD_fonipa\t;\taaa_Adlm_VN_fonipa\n+aaa_Adlm_WK_fonipa\t;\taaa_Adlm_UM_fonipa\n+aaa_Adlm_YD_fonipa\t;\taaa_Adlm_YE_fonipa\n+aaa_Adlm_YU_fonipa\t;\taaa_Adlm_RS_fonipa\n+aaa_Adlm_ZR_fonipa\t;\taaa_Adlm_CD_fonipa\n+aaa_Qaai_AC_fonipa\t;\taaa_Zinh_AC_fonipa\n+aam_Adlm_AC_fonipa\t;\taas_Adlm_AC_fonipa\n+aar_Adlm_AC_fonipa\t;\taa_Adlm_AC_fonipa\n+aar_Adlm_AC_fonipa_saaho\t;\tssy_Adlm_AC_fonipa\n+abk_Adlm_AC_fonipa\t;\tab_Adlm_AC_fonipa\n+adp_Adlm_AC_fonipa\t;\tdz_Adlm_AC_fonipa\n+afr_Adlm_AC_fonipa\t;\taf_Adlm_AC_fonipa\n+aju_Adlm_AC_fonipa\t;\tjrb_Adlm_AC_fonipa\n+aka_Adlm_AC_fonipa\t;\tak_Adlm_AC_fonipa\n+alb_Adlm_AC_fonipa\t;\tsq_Adlm_AC_fonipa\n+als_Adlm_AC_fonipa\t;\tsq_Adlm_AC_fonipa\n+amh_Adlm_AC_fonipa\t;\tam_Adlm_AC_fonipa\n+ara_Adlm_AC_fonipa\t;\tar_Adlm_AC_fonipa\n+arb_Adlm_AC_fonipa\t;\tar_Adlm_AC_fonipa\n+arg_Adlm_AC_fonipa\t;\tan_Adlm_AC_fonipa\n+arm_Adlm_AC_arevela_arevmda_fonipa\t;\thyw_Adlm_AC_fonipa\n+arm_Adlm_AC_arevela_fonipa\t;\thy_Adlm_AC_fonipa\n+arm_Adlm_AC_arevmda_fonipa\t;\thyw_Adlm_AC_fonipa\n+arm_Adlm_AC_fonipa\t;\thy_Adlm_AC_fonipa\n+art_Adlm_AC_fonipa_lojban\t;\tjbo_Adlm_AC_fonipa\n+asd_Adlm_AC_fonipa\t;\tsnz_Adlm_AC_fonipa\n+asm_Adlm_AC_fonipa\t;\tas_Adlm_AC_fonipa\n+aue_Adlm_AC_fonipa\t;\tktz_Adlm_AC_fonipa\n+ava_Adlm_AC_fonipa\t;\tav_Adlm_AC_fonipa\n+ave_Adlm_AC_fonipa\t;\tae_Adlm_AC_fonipa\n+aym_Adlm_AC_fonipa\t;\tay_Adlm_AC_fonipa\n+ayr_Adlm_AC_fonipa\t;\tay_Adlm_AC_fonipa\n+ayx_Adlm_AC_fonipa\t;\tnun_Adlm_AC_fonipa\n+aze_Adlm_AC_fonipa\t;\taz_Adlm_AC_fonipa\n+azj_Adlm_AC_fonipa\t;\taz_Adlm_AC_fonipa\n+bak_Adlm_AC_fonipa\t;\tba_Adlm_AC_fonipa\n+bam_Adlm_AC_fonipa\t;\tbm_Adlm_AC_fonipa\n+baq_Adlm_AC_fonipa\t;\teu_Adlm_AC_fonipa\n+bcc_Adlm_AC_fonipa\t;\tbal_Adlm_AC_fonipa\n+bcl_Adlm_AC_fonipa\t;\tbik_Adlm_AC_fonipa\n+bel_Adlm_AC_fonipa\t;\tbe_Adlm_AC_fonipa\n+ben_Adlm_AC_fonipa\t;\tbn_Adlm_AC_fonipa\n+bgm_Adlm_AC_fonipa\t;\tbcg_Adlm_AC_fonipa\n+bh_Adlm_AC_fonipa\t;\tbho_Adlm_AC_fonipa\n+bih_Adlm_AC_fonipa\t;\tbho_Adlm_AC_fonipa\n+bis_Adlm_AC_fonipa\t;\tbi_Adlm_AC_fonipa\n+bjd_Adlm_AC_fonipa\t;\tdrl_Adlm_AC_fonipa\n+bod_Adlm_AC_fonipa\t;\tbo_Adlm_AC_fonipa\n+bos_Adlm_AC_fonipa\t;\tbs_Adlm_AC_fonipa\n+bre_Adlm_AC_fonipa\t;\tbr_Adlm_AC_fonipa\n+bul_Adlm_AC_fonipa\t;\tbg_Adlm_AC_fonipa\n+bur_Adlm_AC_fonipa\t;\tmy_Adlm_AC_fonipa\n+bxk_Adlm_AC_fonipa\t;\tluy_Adlm_AC_fonipa\n+bxr_Adlm_AC_fonipa\t;\tbua_Adlm_AC_fonipa\n+cat_Adlm_AC_fonipa\t;\tca_Adlm_AC_fonipa\n+ccq_Adlm_AC_fonipa\t;\trki_Adlm_AC_fonipa\n+cel_Adlm_AC_fonipa_gaulish\t;\txtg_Adlm_AC_fonipa", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzMjM0Nw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476032347", "bodyText": "Good catch. The code doesn't yet handle cases where items are split off with x. All the other cases are have type values that are not well-formed, so they aren't tested.", "author": "macchiati", "createdAt": "2020-08-25T01:18:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2NDU5NQ=="}], "type": "inlineReview"}, {"oid": "d81604b90d199ff6219139c291cf212ff0732bf7", "url": "https://github.com/unicode-org/cldr/commit/d81604b90d199ff6219139c291cf212ff0732bf7", "message": "CLDR-14016 Clean up tests", "committedDate": "2020-08-25T00:25:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NDUwMQ==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475874501", "bodyText": "The new tests caught inconsistencies in the data, specifically - vs _", "author": "macchiati", "createdAt": "2020-08-24T20:28:08Z", "path": "common/supplemental/supplementalMetadata.xml", "diffHunk": "@@ -475,11 +477,22 @@ For terms of use, see http://www.unicode.org/copyright.html\n \t\t\t<languageAlias type=\"tib\" replacement=\"bo\" reason=\"bibliographic\"/> <!-- [Tibetan] -->\n \t\t\t<languageAlias type=\"wel\" replacement=\"cy\" reason=\"bibliographic\"/> <!-- [Welsh] -->\n             <!-- end of data generated with CountItems tool per http://sites.google.com/site/cldr/development/updating-codes/update-languagescriptregion-subtags -->\n-\t\t\t<languageAlias type=\"cel-gaulish\" replacement=\"xtg-x-cel-gaulish\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n-\t\t\t<languageAlias type=\"i-default\" replacement=\"en-x-i-default\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n-\t\t\t<languageAlias type=\"i-enochian\" replacement=\"und-x-i-enochian\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n-\t\t\t<languageAlias type=\"i-mingo\" replacement=\"see-x-i-mingo\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n-\t\t\t<languageAlias type=\"zh-min\" replacement=\"nan-x-zh-min\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n+\t\t\t<languageAlias type=\"cel_gaulish\" replacement=\"xtg_x_cel_gaulish\" reason=\"legacy\"/> <!-- bogus bcp47 code -->", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NTAzMg==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475875032", "bodyText": "These are old mappings that are really misplaced; their function is handled by Likely Subtags and have no business here.", "author": "macchiati", "createdAt": "2020-08-24T20:29:14Z", "path": "common/supplemental/supplementalMetadata.xml", "diffHunk": "@@ -167,6 +167,7 @@ For terms of use, see http://www.unicode.org/copyright.html\n             <languageAlias type=\"cnr\" replacement=\"sr_ME\" reason=\"legacy\"/> <!-- Montenegrin -->\n             <languageAlias type=\"no\" replacement=\"nb\" reason=\"legacy\"/> <!-- Norwegian -->\n             <languageAlias type=\"tl\" replacement=\"fil\" reason=\"legacy\"/> <!-- Tagalog -->\n+            <!--  \n     \t\t<languageAlias type=\"az_AZ\" replacement=\"az_Latn_AZ\" reason=\"legacy\"/>", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0OTU1NA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476049554", "bodyText": "Then... why don't you just remove them in this PR?", "author": "FrankYFTang", "createdAt": "2020-08-25T01:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5MDU1Nw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476590557", "bodyText": "Ok, doing that.", "author": "macchiati", "createdAt": "2020-08-25T16:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NTAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NjA5OA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475876098", "bodyText": "In order to solve problems with how replacements work, these replace/supplement some of the variantAliases. The ones resulting in 'und' are just to remove aliases that don't have the kind of language that can be replaced.", "author": "macchiati", "createdAt": "2020-08-24T20:31:20Z", "path": "common/supplemental/supplementalMetadata.xml", "diffHunk": "@@ -475,11 +477,22 @@ For terms of use, see http://www.unicode.org/copyright.html\n \t\t\t<languageAlias type=\"tib\" replacement=\"bo\" reason=\"bibliographic\"/> <!-- [Tibetan] -->\n \t\t\t<languageAlias type=\"wel\" replacement=\"cy\" reason=\"bibliographic\"/> <!-- [Welsh] -->\n             <!-- end of data generated with CountItems tool per http://sites.google.com/site/cldr/development/updating-codes/update-languagescriptregion-subtags -->\n-\t\t\t<languageAlias type=\"cel-gaulish\" replacement=\"xtg-x-cel-gaulish\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n-\t\t\t<languageAlias type=\"i-default\" replacement=\"en-x-i-default\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n-\t\t\t<languageAlias type=\"i-enochian\" replacement=\"und-x-i-enochian\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n-\t\t\t<languageAlias type=\"i-mingo\" replacement=\"see-x-i-mingo\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n-\t\t\t<languageAlias type=\"zh-min\" replacement=\"nan-x-zh-min\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n+\t\t\t<languageAlias type=\"cel_gaulish\" replacement=\"xtg_x_cel_gaulish\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n+\t\t\t<languageAlias type=\"i_default\" replacement=\"en_x_i_default\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n+\t\t\t<languageAlias type=\"i_enochian\" replacement=\"und_x_i_enochian\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n+\t\t\t<languageAlias type=\"i_mingo\" replacement=\"see_x_i_mingo\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n+\t\t\t<languageAlias type=\"zh_min\" replacement=\"nan_x_zh_min\" reason=\"legacy\"/> <!-- bogus bcp47 code -->\n+\t\t\t\n+\t\t\t<languageAlias type=\"hy_arevmda\" replacement=\"hyw\" reason=\"deprecated\"/>", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NjQ2MA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475876460", "bodyText": "This also fixes the case of several aliases.", "author": "macchiati", "createdAt": "2020-08-24T20:32:03Z", "path": "common/supplemental/supplementalMetadata.xml", "diffHunk": "@@ -1572,11 +1585,8 @@ For terms of use, see http://www.unicode.org/copyright.html\n \t\t\t\t\t\t\n \t\t\t\n             <!-- variants -->\n-            <variantAlias type=\"AALAND\" replacement=\"AX\" reason=\"deprecated\"/>\n-            <variantAlias type=\"POLYTONI\" replacement=\"POLYTON\" reason=\"deprecated\"/>\n-            <variantAlias type=\"HEPLOC\" replacement=\"ALALC97\" reason=\"deprecated\"/>\n-\t\t\t<variantAlias type=\"arevela\" replacement=\"hy\" reason=\"deprecated\"/> <!-- arevela -->\n-\t\t\t<variantAlias type=\"arevmda\" replacement=\"hyw\" reason=\"deprecated\"/> <!-- arevmda -->\n+            <variantAlias type=\"aaland\" replacement=\"AX\" reason=\"deprecated\"/>", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3Njg1Nw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475876857", "bodyText": "This is a new generated test file for implementations to use in their testing.", "author": "macchiati", "createdAt": "2020-08-24T20:32:45Z", "path": "common/testData/localeIdentifiers/localeCanonicalization.txt", "diffHunk": "@@ -0,0 +1,1647 @@\n+# Test data for locale identifier canonicalization", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NzU1Ng==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475877556", "bodyText": "This is a new class that uses the canonicalization of the LSRV part of a locale identifier to verify correctness of the algorithm and test data.", "author": "macchiati", "createdAt": "2020-08-24T20:34:10Z", "path": "tools/cldr-unittest/src/org/unicode/cldr/unittest/TestLsrvCanonicalizer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.unicode.cldr.unittest;", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNTE3Mg==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476415172", "bodyText": "JavaDoc or link to a design doc?", "author": "hagbard", "createdAt": "2020-08-25T12:38:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NzU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5MzIwOA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476593208", "bodyText": "Added to javadoc", "author": "macchiati", "createdAt": "2020-08-25T16:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NzU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3ODIyMw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475878223", "bodyText": "A new class that generates the test data above.", "author": "macchiati", "createdAt": "2020-08-24T20:35:25Z", "path": "tools/java/org/unicode/cldr/tool/GenerateLocaleTestData.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.unicode.cldr.tool;", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3ODc5Ng==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475878796", "bodyText": "Some small tweaks to add enum values for other elements used in validity (really for other tickets).", "author": "macchiati", "createdAt": "2020-08-24T20:36:25Z", "path": "tools/java/org/unicode/cldr/util/StandardCodes.java", "diffHunk": "@@ -1036,7 +1036,9 @@ private void add(CodeType type, String code, List<String> otherData) {\n         /** specialized codes for validity; TODO: rename LstrType **/\n         currency(false, true, \"XXX\"),\n         subdivision(false, true),\n-        unit(false, true);\n+        unit(false, true),", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3OTIzNg==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475879236", "bodyText": "Utility to account for some older code and data structures using 'territory' instead of 'region'.", "author": "macchiati", "createdAt": "2020-08-24T20:37:14Z", "path": "tools/java/org/unicode/cldr/util/StandardCodes.java", "diffHunk": "@@ -1073,6 +1075,17 @@ boolean isWellFormed(String candidate) {\n         public String toCompatString() {\n             return this == region ? \"territory\" : toString();\n         }\n+\n+        public static LstrType fromString(String rawType) {", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxMTk2Ng==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476411966", "bodyText": "Please comment this to say how it conflates \"territory\" as an alternate identifier for region.", "author": "hagbard", "createdAt": "2020-08-25T12:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3OTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NDg4Mg==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476594882", "bodyText": "done", "author": "macchiati", "createdAt": "2020-08-25T16:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3OTIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4MDExMA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475880110", "bodyText": "This is used in matching a ReplacementRule. It is here instead of on ReplacementRule so we can use in the denormalization utility used in testing.", "author": "macchiati", "createdAt": "2020-08-24T20:38:57Z", "path": "tools/java/org/unicode/cldr/util/LsrvCanonicalizer.java", "diffHunk": "@@ -0,0 +1,529 @@\n+package org.unicode.cldr.util;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.unicode.cldr.util.StandardCodes.LstrType;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.collect.ComparisonChain;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.TreeMultimap;\n+import com.ibm.icu.impl.Row.R2;\n+\n+/**\n+ * Provides Unicode Language Identifier canonicalization for use in testing.\n+ * The implementation is designed to be simple, and is not at all optimized for production use.\n+ */\n+public class LsrvCanonicalizer {\n+\n+    public static final Set<LstrType> LSRV = ImmutableSet.of(LstrType.language, LstrType.script, LstrType.region, LstrType.variant);\n+    public static final Joiner UNDERBAR_JOINER = Joiner.on('_');\n+\n+    /**\n+     * A representation of a Unicode Language Identifier in a format that makes it simple to process.\n+     * The LSRV fields are represented as multimaps, though the LSR fields restricted to have only have 0 or 1 element.\n+     */\n+    public static class XLanguageTag {\n+        final Multimap<LstrType, String> data;\n+\n+        private XLanguageTag(Multimap<LstrType, String> result) {\n+            data = ImmutableMultimap.copyOf(result);\n+        }\n+        public Set<LstrType> keys() {\n+            return data.keySet();\n+        }\n+        public Collection<String> get(LstrType lstrType) {\n+            return data.get(lstrType);\n+        }\n+        public String toLocaleString() {\n+            StringBuilder buffer = new StringBuilder();\n+            final Collection<String> region = data.get(LstrType.language);\n+            if (!region.isEmpty()) {\n+                buffer.append(UNDERBAR_JOINER.join(region));\n+            } else {\n+                buffer.append(\"und\");\n+            }\n+            addItem(buffer, LstrType.script, \"\", \"_\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.region, \"\", \"_\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.variant, \"\", \"_\", UNDERBAR_JOINER);\n+\n+            return buffer.toString();\n+        }\n+        @Override\n+        public String toString() {\n+            StringBuilder buffer = new StringBuilder();\n+            addItem(buffer, LstrType.language, \"\", \"L:\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.script, \";\", \"S:\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.region, \";\", \"R:\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.variant, \";\", \"V:\", UNDERBAR_JOINER);\n+            return buffer.toString();\n+        }\n+\n+        public void addItem(StringBuilder buffer, LstrType lstrType, String separator, String prefix, final Joiner dashJoiner) {\n+            final Collection<String> region = data.get(lstrType);\n+            if (!region.isEmpty()) {\n+                if (buffer.length() > 0) {\n+                    buffer.append(separator);\n+                }\n+                buffer.append(prefix).append(dashJoiner.join(region));\n+            }\n+        }\n+\n+        public static XLanguageTag fromTag(LstrType lstrType, String tag) {\n+            Multimap<LstrType,String> result = TreeMultimap.create();\n+            LanguageTagParser source = new LanguageTagParser();\n+            final boolean isLanguage = lstrType == LstrType.language;\n+            String prefix = isLanguage ? \"\" : \"und_\";\n+            try {\n+                source.set(prefix + tag);\n+            } catch (Exception e) {\n+                return null;  // skip ill-formed for now\n+//                if (lstrType == LstrType.region && tag.length() == 3) {\n+//                    //result.put(LstrType.language, \"und\");\n+//                    result.put(LstrType.region, tag);\n+//                } else {\n+//                    result.put(LstrType.language, tag);\n+//                }\n+//                //System.out.println(\"ILLEGAL SOURCE\\t\" + lstrType + \":\\t\" + tag + \" \u21d2 \" + result); // for debugging\n+//                return new XLanguageTag(result);\n+            }\n+            if (!source.getLanguage().isEmpty()\n+                && !source.getLanguage().contains(\"und\")) {\n+                result.put(LstrType.language, source.getLanguage());\n+            }\n+            if (!source.getScript().isEmpty()) {\n+                result.put(LstrType.script, source.getScript());\n+            }\n+            if (!source.getRegion().isEmpty()) {\n+                result.put(LstrType.region, source.getRegion());\n+            }\n+            if (!source.getVariants().isEmpty()) {\n+                result.putAll(LstrType.variant, source.getVariants());\n+            }\n+            return new XLanguageTag(result);\n+        }\n+        @Override\n+        public boolean equals(Object obj) {\n+            return data.equals(((XLanguageTag)obj).data);\n+        }\n+        @Override\n+        public int hashCode() {\n+            return data.hashCode();\n+        }\n+        public XLanguageTag set(LstrType lstrType, String string) {\n+            Multimap<LstrType,String> result = TreeMultimap.create(data);\n+            if (lstrType != LstrType.variant) {\n+                result.removeAll(lstrType);\n+            }\n+            result.put(lstrType, string);\n+            return new XLanguageTag(result);\n+        }\n+\n+        public boolean containsAll(XLanguageTag type) {", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4MTI3Ng==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r475881276", "bodyText": "This actually does the replacement. Also here instead of on ReplacementRule so we can use in the denormalization utility used in testing.", "author": "macchiati", "createdAt": "2020-08-24T20:41:22Z", "path": "tools/java/org/unicode/cldr/util/LsrvCanonicalizer.java", "diffHunk": "@@ -0,0 +1,529 @@\n+package org.unicode.cldr.util;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.unicode.cldr.util.StandardCodes.LstrType;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.collect.ComparisonChain;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.TreeMultimap;\n+import com.ibm.icu.impl.Row.R2;\n+\n+/**\n+ * Provides Unicode Language Identifier canonicalization for use in testing.\n+ * The implementation is designed to be simple, and is not at all optimized for production use.\n+ */\n+public class LsrvCanonicalizer {\n+\n+    public static final Set<LstrType> LSRV = ImmutableSet.of(LstrType.language, LstrType.script, LstrType.region, LstrType.variant);\n+    public static final Joiner UNDERBAR_JOINER = Joiner.on('_');\n+\n+    /**\n+     * A representation of a Unicode Language Identifier in a format that makes it simple to process.\n+     * The LSRV fields are represented as multimaps, though the LSR fields restricted to have only have 0 or 1 element.\n+     */\n+    public static class XLanguageTag {\n+        final Multimap<LstrType, String> data;\n+\n+        private XLanguageTag(Multimap<LstrType, String> result) {\n+            data = ImmutableMultimap.copyOf(result);\n+        }\n+        public Set<LstrType> keys() {\n+            return data.keySet();\n+        }\n+        public Collection<String> get(LstrType lstrType) {\n+            return data.get(lstrType);\n+        }\n+        public String toLocaleString() {\n+            StringBuilder buffer = new StringBuilder();\n+            final Collection<String> region = data.get(LstrType.language);\n+            if (!region.isEmpty()) {\n+                buffer.append(UNDERBAR_JOINER.join(region));\n+            } else {\n+                buffer.append(\"und\");\n+            }\n+            addItem(buffer, LstrType.script, \"\", \"_\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.region, \"\", \"_\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.variant, \"\", \"_\", UNDERBAR_JOINER);\n+\n+            return buffer.toString();\n+        }\n+        @Override\n+        public String toString() {\n+            StringBuilder buffer = new StringBuilder();\n+            addItem(buffer, LstrType.language, \"\", \"L:\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.script, \";\", \"S:\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.region, \";\", \"R:\", UNDERBAR_JOINER);\n+            addItem(buffer, LstrType.variant, \";\", \"V:\", UNDERBAR_JOINER);\n+            return buffer.toString();\n+        }\n+\n+        public void addItem(StringBuilder buffer, LstrType lstrType, String separator, String prefix, final Joiner dashJoiner) {\n+            final Collection<String> region = data.get(lstrType);\n+            if (!region.isEmpty()) {\n+                if (buffer.length() > 0) {\n+                    buffer.append(separator);\n+                }\n+                buffer.append(prefix).append(dashJoiner.join(region));\n+            }\n+        }\n+\n+        public static XLanguageTag fromTag(LstrType lstrType, String tag) {\n+            Multimap<LstrType,String> result = TreeMultimap.create();\n+            LanguageTagParser source = new LanguageTagParser();\n+            final boolean isLanguage = lstrType == LstrType.language;\n+            String prefix = isLanguage ? \"\" : \"und_\";\n+            try {\n+                source.set(prefix + tag);\n+            } catch (Exception e) {\n+                return null;  // skip ill-formed for now\n+//                if (lstrType == LstrType.region && tag.length() == 3) {\n+//                    //result.put(LstrType.language, \"und\");\n+//                    result.put(LstrType.region, tag);\n+//                } else {\n+//                    result.put(LstrType.language, tag);\n+//                }\n+//                //System.out.println(\"ILLEGAL SOURCE\\t\" + lstrType + \":\\t\" + tag + \" \u21d2 \" + result); // for debugging\n+//                return new XLanguageTag(result);\n+            }\n+            if (!source.getLanguage().isEmpty()\n+                && !source.getLanguage().contains(\"und\")) {\n+                result.put(LstrType.language, source.getLanguage());\n+            }\n+            if (!source.getScript().isEmpty()) {\n+                result.put(LstrType.script, source.getScript());\n+            }\n+            if (!source.getRegion().isEmpty()) {\n+                result.put(LstrType.region, source.getRegion());\n+            }\n+            if (!source.getVariants().isEmpty()) {\n+                result.putAll(LstrType.variant, source.getVariants());\n+            }\n+            return new XLanguageTag(result);\n+        }\n+        @Override\n+        public boolean equals(Object obj) {\n+            return data.equals(((XLanguageTag)obj).data);\n+        }\n+        @Override\n+        public int hashCode() {\n+            return data.hashCode();\n+        }\n+        public XLanguageTag set(LstrType lstrType, String string) {\n+            Multimap<LstrType,String> result = TreeMultimap.create(data);\n+            if (lstrType != LstrType.variant) {\n+                result.removeAll(lstrType);\n+            }\n+            result.put(lstrType, string);\n+            return new XLanguageTag(result);\n+        }\n+\n+        public boolean containsAll(XLanguageTag type) {\n+            for (LstrType lstrType : LSRV) {\n+                final Collection<String> sources = get(lstrType);\n+                final Collection<String> types = type.get(lstrType);\n+                if (!sources.containsAll(types)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+        public XLanguageTag replacePartsFrom(XLanguageTag typeParts, XLanguageTag replacementParts) {", "originalCommit": "46cd038d971c2bef8549c73952e558b71e2b35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b73c6b164b9e8c2c73a377c4bdc4eff7be9c238d", "url": "https://github.com/unicode-org/cldr/commit/b73c6b164b9e8c2c73a377c4bdc4eff7be9c238d", "message": "CLDR-14016 fix alias rules\n\nSee #594", "committedDate": "2020-08-25T00:44:04Z", "type": "forcePushed"}, {"oid": "414fff6e0ec586b0e09e08d394e6daa578f4476b", "url": "https://github.com/unicode-org/cldr/commit/414fff6e0ec586b0e09e08d394e6daa578f4476b", "message": "CLDR-14016 fix attribute test", "committedDate": "2020-08-25T01:08:59Z", "type": "forcePushed"}, {"oid": "60b3b0972d4b939cc8501d0fab44059b4b76af7e", "url": "https://github.com/unicode-org/cldr/commit/60b3b0972d4b939cc8501d0fab44059b4b76af7e", "message": "CLDR-14016 fix alias rules\n\nSee #594", "committedDate": "2020-08-25T01:11:32Z", "type": "forcePushed"}, {"oid": "d3c89c38d85fea2f76b4685371dba74230a9c0f1", "url": "https://github.com/unicode-org/cldr/commit/d3c89c38d85fea2f76b4685371dba74230a9c0f1", "message": "CLDR-14016 fix cel_gaulish", "committedDate": "2020-08-25T01:37:02Z", "type": "forcePushed"}, {"oid": "b4c35c12e85464a5024e08cc6a280504a521e3d1", "url": "https://github.com/unicode-org/cldr/commit/b4c35c12e85464a5024e08cc6a280504a521e3d1", "message": "CLDR-14016 fix alias rules\n\nSee #594", "committedDate": "2020-08-25T03:39:46Z", "type": "forcePushed"}, {"oid": "d3c89c38d85fea2f76b4685371dba74230a9c0f1", "url": "https://github.com/unicode-org/cldr/commit/d3c89c38d85fea2f76b4685371dba74230a9c0f1", "message": "CLDR-14016 fix cel_gaulish", "committedDate": "2020-08-25T01:37:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwODQ5MA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476408490", "bodyText": "Adding immediately commented out code without any comments declaring its intent is weird.\nI mean yes it's sort of clear it's a debug thing, but there's a DEBUG flag above and this is test code anyway, so why not leave it in guarded by the debug flag? At least that way it won't rot over time with successive refactorings of the code around it.", "author": "hagbard", "createdAt": "2020-08-25T12:27:07Z", "path": "tools/cldr-unittest/src/org/unicode/cldr/unittest/TestLsrvCanonicalizer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.unicode.cldr.unittest;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.unicode.cldr.util.LsrvCanonicalizer;\n+import org.unicode.cldr.util.LsrvCanonicalizer.ReplacementRule;\n+import org.unicode.cldr.util.LsrvCanonicalizer.TestDataTypes;\n+import org.unicode.cldr.util.LsrvCanonicalizer.XLanguageTag;\n+import org.unicode.cldr.util.StandardCodes.LstrType;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Objects;\n+import com.ibm.icu.dev.test.TestFmwk;\n+\n+public class TestLsrvCanonicalizer extends TestFmwk {\n+\n+    static final LsrvCanonicalizer rrs = LsrvCanonicalizer.getInstance();\n+    private static final boolean DEBUG = false;\n+\n+    public static void main(String[] args) {\n+        final TestLsrvCanonicalizer testLocaleCanonicalizer = new TestLsrvCanonicalizer();\n+        testLocaleCanonicalizer.run(args);\n+    }\n+\n+    public void TestCases() {\n+        if (DEBUG) {\n+//          System.out.println(Joiner.on('\\n').join(rrs.filter(LstrType.variant, null)));\n+            System.out.println(Joiner.on('\\n').join(rrs.filter(LstrType.language, \"no\")));\n+        }\n+\n+        List<ReplacementRule> rules = new ArrayList<>();\n+        for (Entry<TestDataTypes, Map<String, String>> mainEntry : rrs.getTestData(null).entrySet()) {\n+            TestDataTypes type = mainEntry.getKey();\n+            for (Entry<String, String> entry : mainEntry.getValue().entrySet()) {\n+                String toTest = entry.getKey();\n+                String expected = entry.getValue();\n+                final XLanguageTag source2 = XLanguageTag.fromTag(LstrType.language, toTest);\n+                XLanguageTag newTag = rrs.canonicalizeToX(source2, rules);\n+                String actual = newTag.toLocaleString();\n+                if (DEBUG && rules.size() > 1) {\n+                    System.out.println(\n+                        \"source: \" + toTest\n+                        + \", expected: \" + expected\n+                        + \", actual: \" + actual\n+                        + \", rules: \" + rules\n+                        );\n+                }\n+                if (!Objects.equal(expected, actual)) {\n+                    errln(\"Error: \"\n+                        + \"source: \" + toTest\n+                        + \", expected: \" + expected\n+                        + \", actual: \" + actual\n+                        + \", rules: \" + rules\n+                        );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+\n+//            if (!rule.regular) {\n+//                System.out.println(\n+//                    rule.lstrType + \"\\t\u2795\\t\" + rule.typeParts + \"\\t\u21d2\\t\"+rule.replacementParts + \"\\t\u2795\\t\" + rule.reason + \"\\t\" + diff(rule.typeParts, rule.replacementParts));\n+//            }\n+//        }\n+//    }\n+\n+\n+\n+//    private static String diff(XLanguageTag tagParts, XLanguageTag replacementParts) {", "originalCommit": "d3c89c38d85fea2f76b4685371dba74230a9c0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1MDc3MA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476850770", "bodyText": "It's gone.", "author": "macchiati", "createdAt": "2020-08-25T23:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwODQ5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwOTMyMw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476409323", "bodyText": "\"oo\" doesn't seem like a particularly clear variable name to me. Maybe \"outputOpts\" ?", "author": "hagbard", "createdAt": "2020-08-25T12:28:37Z", "path": "tools/java/org/unicode/cldr/util/LanguageTagCanonicalizer.java", "diffHunk": "@@ -52,6 +52,9 @@ public LanguageTagCanonicalizer(LstrType lstrType) {\n     // TODO, handle variants\n     @Override\n     public synchronized String transform(String locale) {\n+        return transform (locale, OutputOption.ICU_LCVARIANT);\n+    }\n+    public synchronized String transform(String locale, OutputOption oo) {", "originalCommit": "d3c89c38d85fea2f76b4685371dba74230a9c0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1MTk3MQ==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476851971", "bodyText": "I'd like to clean this up later. To much to do right now, and I don't want another cycle.", "author": "macchiati", "createdAt": "2020-08-25T23:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwOTMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxMTY1Mg==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476411652", "bodyText": "Do the if check first and just don't have a try-catch block.\nvalueOf() is defined to only throw IllegalArgumentException or NullPointerException and I think you want to complain if you're given null anyway (it's a very different type of failure mode).", "author": "hagbard", "createdAt": "2020-08-25T12:32:39Z", "path": "tools/java/org/unicode/cldr/util/StandardCodes.java", "diffHunk": "@@ -1073,6 +1075,17 @@ boolean isWellFormed(String candidate) {\n         public String toCompatString() {\n             return this == region ? \"territory\" : toString();\n         }\n+\n+        public static LstrType fromString(String rawType) {\n+            try {\n+                return valueOf(rawType);\n+            } catch (Exception e) {", "originalCommit": "d3c89c38d85fea2f76b4685371dba74230a9c0f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxMjc1Nw==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476412757", "bodyText": "Another way to do this is to store the compat string as a field, but either way it would be nice to see a comment on this public method explaining its not the enum name.", "author": "hagbard", "createdAt": "2020-08-25T12:34:36Z", "path": "tools/java/org/unicode/cldr/util/StandardCodes.java", "diffHunk": "@@ -1073,6 +1075,17 @@ boolean isWellFormed(String candidate) {\n         public String toCompatString() {\n             return this == region ? \"territory\" : toString();", "originalCommit": "d3c89c38d85fea2f76b4685371dba74230a9c0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1MjU1OA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476852558", "bodyText": "done (the doc, and some other changes)", "author": "macchiati", "createdAt": "2020-08-25T23:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxMjc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNDI5NA==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476414294", "bodyText": "JavaDoc?", "author": "hagbard", "createdAt": "2020-08-25T12:37:10Z", "path": "tools/java/org/unicode/cldr/tool/GenerateLocaleIDTestData.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.unicode.cldr.tool;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.unicode.cldr.util.CLDRPaths;\n+import org.unicode.cldr.util.CldrUtility;\n+import org.unicode.cldr.util.LsrvCanonicalizer;\n+import org.unicode.cldr.util.LsrvCanonicalizer.TestDataTypes;\n+import org.unicode.cldr.util.StandardCodes.LstrType;\n+import org.unicode.cldr.util.TempPrintWriter;\n+\n+public class GenerateLocaleIDTestData {", "originalCommit": "d3c89c38d85fea2f76b4685371dba74230a9c0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1MTI5MQ==", "url": "https://github.com/unicode-org/cldr/pull/594#discussion_r476851291", "bodyText": "done", "author": "macchiati", "createdAt": "2020-08-25T23:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNDI5NA=="}], "type": "inlineReview"}, {"oid": "9191edd4650528b9c03f63719ae27a61326046a2", "url": "https://github.com/unicode-org/cldr/commit/9191edd4650528b9c03f63719ae27a61326046a2", "message": "CLDR-14016 fix alias rules\n\nSee #594", "committedDate": "2020-08-26T00:14:20Z", "type": "commit"}, {"oid": "9191edd4650528b9c03f63719ae27a61326046a2", "url": "https://github.com/unicode-org/cldr/commit/9191edd4650528b9c03f63719ae27a61326046a2", "message": "CLDR-14016 fix alias rules\n\nSee #594", "committedDate": "2020-08-26T00:14:20Z", "type": "forcePushed"}]}