{"pr_number": 2134, "pr_title": "refactor : separate the different transaction pattern processing logic", "pr_createdAt": "2020-01-04T08:21:41Z", "pr_url": "https://github.com/seata/seata/pull/2134", "timeline": [{"oid": "504c8e476a11c5359fec4215c6247ae385bdee37", "url": "https://github.com/seata/seata/commit/504c8e476a11c5359fec4215c6247ae385bdee37", "message": "Refactor : Server_transaction", "committedDate": "2020-01-04T08:20:37Z", "type": "commit"}, {"oid": "3b7e23f1e8190cd08d886f2657c526baa9df021c", "url": "https://github.com/seata/seata/commit/3b7e23f1e8190cd08d886f2657c526baa9df021c", "message": "Resolving conflicts", "committedDate": "2020-01-07T09:01:32Z", "type": "commit"}, {"oid": "a059f5efdcbe7b254302aff90855dbad5ade8162", "url": "https://github.com/seata/seata/commit/a059f5efdcbe7b254302aff90855dbad5ade8162", "message": "Merge branch 'develop' into RefactorServer_transaction", "committedDate": "2020-01-07T09:15:26Z", "type": "commit"}, {"oid": "bb6f60a9c4c50ee92f1addaf18f82153a3209930", "url": "https://github.com/seata/seata/commit/bb6f60a9c4c50ee92f1addaf18f82153a3209930", "message": "Merge branch 'develop' into RefactorServer_transaction", "committedDate": "2020-01-09T07:06:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzg5Ng==", "url": "https://github.com/seata/seata/pull/2134#discussion_r366113896", "bodyText": "Hello, plase keep jdk related import classes at the forefront.", "author": "InstallingB", "createdAt": "2020-01-14T01:27:53Z", "path": "server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java", "diffHunk": "@@ -70,20 +54,21 @@\n import io.seata.core.rpc.netty.RpcServer;\n import io.seata.server.AbstractTCInboundHandler;\n import io.seata.server.event.EventBusManager;\n-import io.seata.server.session.BranchSession;\n import io.seata.server.session.GlobalSession;\n import io.seata.server.session.SessionHolder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static io.seata.core.exception.TransactionExceptionCode.FailedToSendBranchCommitRequest;\n-import static io.seata.core.exception.TransactionExceptionCode.FailedToSendBranchRollbackRequest;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;", "originalCommit": "bb6f60a9c4c50ee92f1addaf18f82153a3209930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzOTA5NA==", "url": "https://github.com/seata/seata/pull/2134#discussion_r366139094", "bodyText": "thanks, done", "author": "ph3636", "createdAt": "2020-01-14T03:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExNDI4Nw==", "url": "https://github.com/seata/seata/pull/2134#discussion_r366114287", "bodyText": "Hello, plase keep jdk related import classes at the forefront.", "author": "InstallingB", "createdAt": "2020-01-14T01:29:39Z", "path": "server/src/main/java/io/seata/server/transaction/saga/SagaCore.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.transaction.saga;\n+\n+import io.netty.channel.Channel;\n+import io.seata.core.exception.GlobalTransactionException;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.ServerMessageSender;\n+import io.seata.server.coordinator.AbstractCore;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.concurrent.TimeoutException;", "originalCommit": "bb6f60a9c4c50ee92f1addaf18f82153a3209930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzOTEwNw==", "url": "https://github.com/seata/seata/pull/2134#discussion_r366139107", "bodyText": "thanks, done", "author": "ph3636", "createdAt": "2020-01-14T03:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExNDI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExNDQxNg==", "url": "https://github.com/seata/seata/pull/2134#discussion_r366114416", "bodyText": "Hello, plase keep jdk related import classes at the forefront.", "author": "InstallingB", "createdAt": "2020-01-14T01:30:17Z", "path": "server/src/main/java/io/seata/server/coordinator/AbstractCore.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.coordinator;\n+\n+import io.seata.core.exception.BranchTransactionException;\n+import io.seata.core.exception.GlobalTransactionException;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.exception.TransactionExceptionCode;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ServerMessageSender;\n+import io.seata.server.lock.LockManager;\n+import io.seata.server.lock.LockerFactory;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeoutException;", "originalCommit": "bb6f60a9c4c50ee92f1addaf18f82153a3209930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzOTExOA==", "url": "https://github.com/seata/seata/pull/2134#discussion_r366139118", "bodyText": "thanks, done", "author": "ph3636", "createdAt": "2020-01-14T03:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExNDQxNg=="}], "type": "inlineReview"}, {"oid": "7d4ff4aa3132977cf7f5d3c4c065e336a6262e79", "url": "https://github.com/seata/seata/commit/7d4ff4aa3132977cf7f5d3c4c065e336a6262e79", "message": "Merge remote-tracking branch 'upstream/develop' into RefactorServer_transaction", "committedDate": "2020-01-14T03:26:28Z", "type": "commit"}, {"oid": "0ffbc78258d052d66d21f39b6243e787d3a2578c", "url": "https://github.com/seata/seata/commit/0ffbc78258d052d66d21f39b6243e787d3a2578c", "message": "Merge remote-tracking branch 'origin/RefactorServer_transaction' into RefactorServer_transaction", "committedDate": "2020-01-14T03:27:12Z", "type": "commit"}, {"oid": "19458a274b1c6e4b1ff31e8ab75b4650cc0d7ea4", "url": "https://github.com/seata/seata/commit/19458a274b1c6e4b1ff31e8ab75b4650cc0d7ea4", "message": "keep jdk related import classes at the forefront", "committedDate": "2020-01-14T03:35:10Z", "type": "commit"}, {"oid": "e177f7143cc678058de4579a85a91a379d030410", "url": "https://github.com/seata/seata/commit/e177f7143cc678058de4579a85a91a379d030410", "message": "Merge branch 'develop' into RefactorServer_transaction", "committedDate": "2020-01-15T03:17:42Z", "type": "commit"}, {"oid": "b7b7c058b9ddafe5eaf6f710951061154dfe360e", "url": "https://github.com/seata/seata/commit/b7b7c058b9ddafe5eaf6f710951061154dfe360e", "message": "Merge branch 'develop' into RefactorServer_transaction", "committedDate": "2020-02-03T05:06:25Z", "type": "commit"}, {"oid": "5d17f4e1e677b01e7a8bbc9079407e740205eebd", "url": "https://github.com/seata/seata/commit/5d17f4e1e677b01e7a8bbc9079407e740205eebd", "message": "Merge branch 'develop' into RefactorServer_transaction", "committedDate": "2020-02-04T01:49:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MTc0Ng==", "url": "https://github.com/seata/seata/pull/2134#discussion_r374441746", "bodyText": "why not impl ResourceManagerInbound\uff1f", "author": "slievrly", "createdAt": "2020-02-04T02:09:44Z", "path": "server/src/main/java/io/seata/server/coordinator/Core.java", "diffHunk": "@@ -29,27 +31,54 @@\n public interface Core extends TransactionManager, ResourceManagerOutbound {\n \n     /**\n-     * Sets resource manager inbound.\n+     * Do global commit.\n      *\n-     * @param resourceManagerInbound the resource manager inbound\n+     * @param globalSession the global session\n+     * @param retrying      the retrying\n+     * @return is global commit.\n+     * @throws TransactionException the transaction exception\n      */\n-    void setResourceManagerInbound(ResourceManagerInbound resourceManagerInbound);\n+    boolean doGlobalCommit(GlobalSession globalSession, boolean retrying) throws TransactionException;\n \n     /**\n-     * Do global commit.\n+     * Do global rollback.\n      *\n      * @param globalSession the global session\n      * @param retrying      the retrying\n+     * @return is global rollback.\n      * @throws TransactionException the transaction exception\n      */\n-    void doGlobalCommit(GlobalSession globalSession, boolean retrying) throws TransactionException;\n+    boolean doGlobalRollback(GlobalSession globalSession, boolean retrying) throws TransactionException;\n \n     /**\n-     * Do global rollback.\n+     * Do global report.\n      *\n      * @param globalSession the global session\n-     * @param retrying      the retrying\n+     * @param xid           Transaction id.\n+     * @param param         the global status\n      * @throws TransactionException the transaction exception\n      */\n-    void doGlobalRollback(GlobalSession globalSession, boolean retrying) throws TransactionException;\n+    void doGlobalReport(GlobalSession globalSession, String xid, GlobalStatus param) throws TransactionException;\n+\n+    /**\n+     * Commit a branch transaction.\n+     *\n+     * @param globalSession the global session\n+     * @param branchSession the branch session\n+     * @return Status of the branch after committing.\n+     * @throws TransactionException Any exception that fails this will be wrapped with TransactionException and thrown\n+     *                              out.\n+     */\n+    BranchStatus branchCommit(GlobalSession globalSession, BranchSession branchSession) throws TransactionException;", "originalCommit": "5d17f4e1e677b01e7a8bbc9079407e740205eebd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0NTA0Mg==", "url": "https://github.com/seata/seata/pull/2134#discussion_r374445042", "bodyText": "What does rm mean\uff1f", "author": "slievrly", "createdAt": "2020-02-04T02:24:46Z", "path": "server/src/main/java/io/seata/server/coordinator/DefaultCore.java", "diffHunk": "@@ -52,104 +46,90 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DefaultCore.class);\n \n-    private LockManager lockManager = LockerFactory.getLockManager();\n+    private EventBus eventBus = EventBusManager.get();\n \n-    private ResourceManagerInbound resourceManagerInbound;\n+    private static Map<BranchType, AbstractCore> coreMap = new ConcurrentHashMap<>();\n \n-    private EventBus eventBus = EventBusManager.get();\n+    /**\n+     * get the Default core.\n+     *\n+     * @param messageSender the message sender\n+     */\n+    public DefaultCore(ServerMessageSender messageSender) {\n+        List<AbstractCore> allCore = EnhancedServiceLoader.loadAll(AbstractCore.class,\n+                new Class[] {ServerMessageSender.class}, new Object[] {messageSender});\n+        if (CollectionUtils.isNotEmpty(allCore)) {\n+            for (AbstractCore core : allCore) {\n+                coreMap.put(core.getBranchType(), core);\n+            }\n+        }\n+    }\n \n-    @Override\n-    public void setResourceManagerInbound(ResourceManagerInbound resourceManagerInbound) {\n-        this.resourceManagerInbound = resourceManagerInbound;\n+    /**\n+     * get core\n+     *\n+     * @param branchType the branchType\n+     * @return the core\n+     */\n+    public AbstractCore getCore(BranchType branchType) {\n+        AbstractCore rm = coreMap.get(branchType);", "originalCommit": "5d17f4e1e677b01e7a8bbc9079407e740205eebd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NjEyNA==", "url": "https://github.com/seata/seata/pull/2134#discussion_r374456124", "bodyText": "getHandleBranchType", "author": "slievrly", "createdAt": "2020-02-04T03:16:59Z", "path": "server/src/main/java/io/seata/server/coordinator/AbstractCore.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.coordinator;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeoutException;\n+\n+import io.seata.core.exception.BranchTransactionException;\n+import io.seata.core.exception.GlobalTransactionException;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.exception.TransactionExceptionCode;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ServerMessageSender;\n+import io.seata.server.lock.LockManager;\n+import io.seata.server.lock.LockerFactory;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.seata.core.exception.TransactionExceptionCode.BranchTransactionNotExist;\n+import static io.seata.core.exception.TransactionExceptionCode.FailedToAddBranch;\n+import static io.seata.core.exception.TransactionExceptionCode.GlobalTransactionNotActive;\n+import static io.seata.core.exception.TransactionExceptionCode.GlobalTransactionStatusInvalid;\n+import static io.seata.core.exception.TransactionExceptionCode.FailedToSendBranchCommitRequest;\n+import static io.seata.core.exception.TransactionExceptionCode.FailedToSendBranchRollbackRequest;\n+\n+/**\n+ * The type abstract core.\n+ *\n+ * @author ph3636\n+ */\n+public abstract class AbstractCore implements Core {\n+\n+    protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractCore.class);\n+\n+    protected LockManager lockManager = LockerFactory.getLockManager();\n+\n+    protected ServerMessageSender messageSender;\n+\n+    public AbstractCore(ServerMessageSender messageSender) {\n+        this.messageSender = messageSender;\n+    }\n+\n+    public abstract BranchType getBranchType();", "originalCommit": "5d17f4e1e677b01e7a8bbc9079407e740205eebd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "965593114a969bb204e66d3b40ab16644a561b2d", "url": "https://github.com/seata/seata/commit/965593114a969bb204e66d3b40ab16644a561b2d", "message": "pass compile", "committedDate": "2020-02-04T08:48:05Z", "type": "commit"}, {"oid": "931e78bfb8b471a4407018e6feda92fc6c27bd90", "url": "https://github.com/seata/seata/commit/931e78bfb8b471a4407018e6feda92fc6c27bd90", "message": "pass compile", "committedDate": "2020-02-04T09:08:53Z", "type": "commit"}, {"oid": "590d146fe094ef09dd7a45402087dd07e52001a6", "url": "https://github.com/seata/seata/commit/590d146fe094ef09dd7a45402087dd07e52001a6", "message": "Merge branch 'develop' into RefactorServer_transaction", "committedDate": "2020-02-04T09:24:34Z", "type": "commit"}]}