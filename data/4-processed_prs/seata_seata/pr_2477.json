{"pr_number": 2477, "pr_title": "optimize: refactor client handle request process logic from server", "pr_createdAt": "2020-03-28T16:08:15Z", "pr_url": "https://github.com/seata/seata/pull/2477", "timeline": [{"oid": "01b1deb5ef0e023152b05fb1b1a2f3d84466c08c", "url": "https://github.com/seata/seata/commit/01b1deb5ef0e023152b05fb1b1a2f3d84466c08c", "message": "optimize: refactoring rpc.", "committedDate": "2020-03-28T16:00:50Z", "type": "commit"}, {"oid": "5841bb98cfcefe566728496ffaf362034f73feee", "url": "https://github.com/seata/seata/commit/5841bb98cfcefe566728496ffaf362034f73feee", "message": "fix MessageFutureTest#testFieldSetGet.", "committedDate": "2020-03-28T16:24:56Z", "type": "commit"}, {"oid": "969a50f01eb86626726f78d64804d92fa15ce95c", "url": "https://github.com/seata/seata/commit/969a50f01eb86626726f78d64804d92fa15ce95c", "message": "fix RpcMessageTest#testFieldGetSetFromJson.", "committedDate": "2020-03-28T16:29:05Z", "type": "commit"}, {"oid": "4719ec127b755c64326846c3cdb4e1d1a550775f", "url": "https://github.com/seata/seata/commit/4719ec127b755c64326846c3cdb4e1d1a550775f", "message": "fix NullPointException when pair is null.", "committedDate": "2020-03-29T05:48:48Z", "type": "commit"}, {"oid": "f738b5339c177bcf2318a3c75c71737096a812da", "url": "https://github.com/seata/seata/commit/f738b5339c177bcf2318a3c75c71737096a812da", "message": "get type comment.", "committedDate": "2020-03-29T06:35:46Z", "type": "commit"}, {"oid": "7706cfabca17dcd2353fd23790a33bb3818875de", "url": "https://github.com/seata/seata/commit/7706cfabca17dcd2353fd23790a33bb3818875de", "message": "1.fix remoting lock;2.add HeartbeatMessage processor.", "committedDate": "2020-03-30T16:00:45Z", "type": "commit"}, {"oid": "7dd8486c66c2f31990ab85fa68344830ce798b6d", "url": "https://github.com/seata/seata/commit/7dd8486c66c2f31990ab85fa68344830ce798b6d", "message": "optimize process", "committedDate": "2020-04-01T04:06:40Z", "type": "commit"}, {"oid": "1b7b0d2b62abcda60af841db82dc625b72cb1804", "url": "https://github.com/seata/seata/commit/1b7b0d2b62abcda60af841db82dc625b72cb1804", "message": "optimize process", "committedDate": "2020-04-01T04:10:33Z", "type": "commit"}, {"oid": "ab2406e177ec7150128f5188882412c83db4b88f", "url": "https://github.com/seata/seata/commit/ab2406e177ec7150128f5188882412c83db4b88f", "message": "optimize process", "committedDate": "2020-04-01T04:13:21Z", "type": "commit"}, {"oid": "e626fe9b5c9926a24b14470da05ba46d3c498621", "url": "https://github.com/seata/seata/commit/e626fe9b5c9926a24b14470da05ba46d3c498621", "message": "optimize process", "committedDate": "2020-04-01T04:41:09Z", "type": "commit"}, {"oid": "0cbaee14d8d718b83487db88536e19ca58a6468d", "url": "https://github.com/seata/seata/commit/0cbaee14d8d718b83487db88536e19ca58a6468d", "message": "Add Heartbeat MessageType.", "committedDate": "2020-04-01T04:54:54Z", "type": "commit"}, {"oid": "1b64e4a2971ccf1fc922f85a961fb027a6b49bd4", "url": "https://github.com/seata/seata/commit/1b64e4a2971ccf1fc922f85a961fb027a6b49bd4", "message": "optimize do process logic", "committedDate": "2020-04-01T06:52:54Z", "type": "commit"}, {"oid": "e8accee14e63adb5bdd868740b460b206ff8c89d", "url": "https://github.com/seata/seata/commit/e8accee14e63adb5bdd868740b460b206ff8c89d", "message": "optimize do process logic", "committedDate": "2020-04-01T07:02:34Z", "type": "commit"}, {"oid": "28ab6dddd6f0a5e8d8e1530dd051337cbc12aa2b", "url": "https://github.com/seata/seata/commit/28ab6dddd6f0a5e8d8e1530dd051337cbc12aa2b", "message": "fix ClientHeartbeatMessageProcessor", "committedDate": "2020-04-01T07:18:36Z", "type": "commit"}, {"oid": "69dafb9b4b15b38f5b6f8647c12273374855b4db", "url": "https://github.com/seata/seata/commit/69dafb9b4b15b38f5b6f8647c12273374855b4db", "message": "registry processor before init client.", "committedDate": "2020-04-01T13:28:24Z", "type": "commit"}, {"oid": "43a0daf2095d13833a400729d6a554db7cc0fad6", "url": "https://github.com/seata/seata/commit/43a0daf2095d13833a400729d6a554db7cc0fad6", "message": "rm processor comment.", "committedDate": "2020-04-03T09:13:52Z", "type": "commit"}, {"oid": "ba00a8d73be8fa0a233d7d0724fa050395e7abbb", "url": "https://github.com/seata/seata/commit/ba00a8d73be8fa0a233d7d0724fa050395e7abbb", "message": "Merge branch 'develop' into refactoring-rpc-phase2\n\n# Conflicts:\n#\tcore/src/main/java/io/seata/core/rpc/netty/RpcClientBootstrap.java", "committedDate": "2020-04-10T11:48:40Z", "type": "commit"}, {"oid": "7c07c40dd9703a3b116b741cff6c22c84e0df344", "url": "https://github.com/seata/seata/commit/7c07c40dd9703a3b116b741cff6c22c84e0df344", "message": "Merge branch 'develop' into refactoring-rpc-phase2", "committedDate": "2020-05-02T11:18:48Z", "type": "commit"}, {"oid": "48480c6f448126311cc401890028a29012d47ee9", "url": "https://github.com/seata/seata/commit/48480c6f448126311cc401890028a29012d47ee9", "message": "Merge branch 'develop' into refactoring-rpc-phase2", "committedDate": "2020-05-05T14:14:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNjczOA==", "url": "https://github.com/seata/seata/pull/2477#discussion_r422626738", "bodyText": "too structured, whether to encapsulate objects to increase readability.", "author": "slievrly", "createdAt": "2020-05-10T10:51:37Z", "path": "core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java", "diffHunk": "@@ -119,9 +124,19 @@ public void setApplicationId(String applicationId) {\n     public void setTransactionServiceGroup(String transactionServiceGroup) {\n         this.transactionServiceGroup = transactionServiceGroup;\n     }\n+\n+    public void setTmProcessor(Map<Integer, Pair<NettyProcessor, Boolean>> processorMap) {", "originalCommit": "48480c6f448126311cc401890028a29012d47ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5MDg0Mw==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424490843", "bodyText": "Agree with your suggestion, have been encapsulated.\nio.seata.core.rpc.netty.TmRpcClient#registerProcessor", "author": "objcoding", "createdAt": "2020-05-13T14:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNjczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNzM3Ng==", "url": "https://github.com/seata/seata/pull/2477#discussion_r422627376", "bodyText": "ImmutablePair", "author": "slievrly", "createdAt": "2020-05-10T10:56:25Z", "path": "core/src/main/java/io/seata/core/rpc/netty/processor/Pair.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor;\n+\n+/**\n+ * Currently used to associate object1 and object2\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class Pair<T1, T2> {", "originalCommit": "48480c6f448126311cc401890028a29012d47ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMDkzOQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424520939", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-13T15:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNzM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODA1OA==", "url": "https://github.com/seata/seata/pull/2477#discussion_r422628058", "bodyText": "interface type", "author": "slievrly", "createdAt": "2020-05-10T11:02:13Z", "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/MergeResultMessageProcessor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.MergeMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * handle TC response about process merge message.\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class MergeResultMessageProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MergeResultMessageProcessor.class);\n+\n+    /**\n+     * The Merge msg map from AbstractRpcRemoting.\n+     */\n+    private Map<Integer, MergeMessage> mergeMsgMap;\n+\n+    /**\n+     * The Futures from AbstractRpcRemoting.\n+     */\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;", "originalCommit": "48480c6f448126311cc401890028a29012d47ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5NTAyNQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424495025", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-13T14:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTg4NQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r422629885", "bodyText": "Why is the exception handling different from RmHandleBranchCommitProcessor?", "author": "slievrly", "createdAt": "2020-05-10T11:17:35Z", "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/RmHandleBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The rm client handle branch commit processor\n+ * <p>\n+ * handle TC do global rollback command.\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class RmHandleBranchRollbackProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmHandleBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmHandleBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"branch rollback result:\" + resultMessage);\n+        }\n+        try {\n+            this.remotingClient.sendResponse(request, serverAddress, resultMessage);\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"send response error: {}\", throwable.getMessage(), throwable);", "originalCommit": "48480c6f448126311cc401890028a29012d47ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNjU4Mg==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424526582", "bodyText": "This is the old code.\nThere are BranchCommitResponse and BranchRollbackResponse for customer response to the server request, but the server does anything to the response request, so I think the exception handling of RmBranchCommitProcessor is meaningless, so I will change it to the same as RmBranchRollbackProcessor .", "author": "objcoding", "createdAt": "2020-05-13T15:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTE5MQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424529191", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-13T15:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMDg5OQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r422630899", "bodyText": "remove", "author": "slievrly", "createdAt": "2020-05-10T11:25:34Z", "path": "rm/src/main/java/io/seata/rm/RMClient.java", "diffHunk": "@@ -34,7 +44,32 @@\n     public static void init(String applicationId, String transactionServiceGroup) {\n         RmRpcClient rmRpcClient = RmRpcClient.getInstance(applicationId, transactionServiceGroup);\n         rmRpcClient.setResourceManager(DefaultResourceManager.get());\n-        rmRpcClient.setClientMessageListener(new RmMessageListener(DefaultRMHandler.get(), rmRpcClient));\n+        AbstractRMHandler handler = DefaultRMHandler.get();\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchCommitProcessor =\n+            new Pair<>(new RmHandleBranchCommitProcessor(handler, rmRpcClient), true);\n+        processorMap.put((int) MessageType.TYPE_BRANCH_COMMIT, branchCommitProcessor);\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchRollbackProcessor =\n+            new Pair<>(new RmHandleBranchRollbackProcessor(handler, rmRpcClient), true);\n+        processorMap.put((int) MessageType.TYPE_BRANCH_ROLLBACK, branchRollbackProcessor);\n+        // rm handler undo log processor\n+        Pair<NettyProcessor, Boolean> deleteUndoLogProcessor =\n+            new Pair<>(new RmHandleUndoLogProcessor(handler), true);\n+        processorMap.put((int) MessageType.TYPE_RM_DELETE_UNDOLOG, deleteUndoLogProcessor);\n+        // handle TC response about process merge message\n+        Pair<NettyProcessor, Boolean> mergeMsgProcessor =\n+            new Pair<>(new MergeResultMessageProcessor(rmRpcClient.getMergeMsgMap(), rmRpcClient.getFutures()), false);\n+        processorMap.put((int) MessageType.TYPE_SEATA_MERGE_RESULT, mergeMsgProcessor);\n+        rmRpcClient.setRmProcessor(processorMap);", "originalCommit": "48480c6f448126311cc401890028a29012d47ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwODcyNw==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424508727", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-13T15:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMDg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMTEwMA==", "url": "https://github.com/seata/seata/pull/2477#discussion_r422631100", "bodyText": "remove", "author": "slievrly", "createdAt": "2020-05-10T11:27:26Z", "path": "tm/src/main/java/io/seata/tm/TMClient.java", "diffHunk": "@@ -32,6 +40,18 @@\n      */\n     public static void init(String applicationId, String transactionServiceGroup) {\n         TmRpcClient tmRpcClient = TmRpcClient.getInstance(applicationId, transactionServiceGroup);\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // handle TC response about process merge message\n+        Pair<NettyProcessor, Boolean> mergeMsgProcessor =\n+            new Pair<>(new MergeResultMessageProcessor(tmRpcClient.getMergeMsgMap(), tmRpcClient.getFutures()), false);\n+        processorMap.put((int) MessageType.TYPE_SEATA_MERGE_RESULT, mergeMsgProcessor);\n+        tmRpcClient.setTmProcessor(processorMap);", "originalCommit": "48480c6f448126311cc401890028a29012d47ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwODkzNw==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424508937", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-13T15:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMTEwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzNDI2NQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r422634265", "bodyText": "Whether or not to use a user thread pool can be determined based on the request/response type?", "author": "slievrly", "createdAt": "2020-05-10T11:53:16Z", "path": "rm/src/main/java/io/seata/rm/RMClient.java", "diffHunk": "@@ -34,7 +44,32 @@\n     public static void init(String applicationId, String transactionServiceGroup) {\n         RmRpcClient rmRpcClient = RmRpcClient.getInstance(applicationId, transactionServiceGroup);\n         rmRpcClient.setResourceManager(DefaultResourceManager.get());\n-        rmRpcClient.setClientMessageListener(new RmMessageListener(DefaultRMHandler.get(), rmRpcClient));\n+        AbstractRMHandler handler = DefaultRMHandler.get();\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchCommitProcessor =", "originalCommit": "48480c6f448126311cc401890028a29012d47ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNTY3OQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424515679", "bodyText": "Phase4 pr has already done so, I now migrate the phase4 related logic to the current pr.", "author": "objcoding", "createdAt": "2020-05-13T15:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzNDI2NQ=="}], "type": "inlineReview"}, {"oid": "0f4caefb49a4fa77380502ab4abed6262cb1db2c", "url": "https://github.com/seata/seata/commit/0f4caefb49a4fa77380502ab4abed6262cb1db2c", "message": "Merge branch 'develop' into refactoring-rpc-phase2", "committedDate": "2020-05-13T12:55:30Z", "type": "commit"}, {"oid": "67ced671c549dc7dc74c011392f25259eac4e90d", "url": "https://github.com/seata/seata/commit/67ced671c549dc7dc74c011392f25259eac4e90d", "message": "Merge branch 'refactoring-rpc-phase2' of https://github.com/objcoding/seata into refactoring-rpc-phase2", "committedDate": "2020-05-13T12:56:09Z", "type": "commit"}, {"oid": "250fc6473de1235feb441a56b2f7d3991aca58c2", "url": "https://github.com/seata/seata/commit/250fc6473de1235feb441a56b2f7d3991aca58c2", "message": "Related optimization.", "committedDate": "2020-05-13T13:45:33Z", "type": "commit"}, {"oid": "6a742796329616b487fbc8fc83c863cd19859911", "url": "https://github.com/seata/seata/commit/6a742796329616b487fbc8fc83c863cd19859911", "message": "Merge branch 'develop' into refactoring-rpc-phase2", "committedDate": "2020-05-13T13:46:06Z", "type": "commit"}, {"oid": "9d33d110bbb78f1c8978c435264f37bfa31e9447", "url": "https://github.com/seata/seata/commit/9d33d110bbb78f1c8978c435264f37bfa31e9447", "message": "fix MessageFutureTest and RpcMessageTest", "committedDate": "2020-05-13T14:11:58Z", "type": "commit"}, {"oid": "d1111b017ef85efa4ccc43372660cfa16b30a304", "url": "https://github.com/seata/seata/commit/d1111b017ef85efa4ccc43372660cfa16b30a304", "message": "interface type", "committedDate": "2020-05-13T15:04:45Z", "type": "commit"}, {"oid": "ab2372e22ede90ba2ec066f6316acd6ae15c2061", "url": "https://github.com/seata/seata/commit/ab2372e22ede90ba2ec066f6316acd6ae15c2061", "message": "remove useless import class", "committedDate": "2020-05-13T15:05:17Z", "type": "commit"}, {"oid": "17a7a811b2ab16f35e27b08866b99b394c48feef", "url": "https://github.com/seata/seata/commit/17a7a811b2ab16f35e27b08866b99b394c48feef", "message": "remove useless class.", "committedDate": "2020-05-13T15:08:38Z", "type": "commit"}, {"oid": "09716537939fdebab3f04adb0120d1ac35966082", "url": "https://github.com/seata/seata/commit/09716537939fdebab3f04adb0120d1ac35966082", "message": "ImmutablePair", "committedDate": "2020-05-13T15:17:29Z", "type": "commit"}, {"oid": "f87a030d8f2f651a49a18da9ab40a497424049fd", "url": "https://github.com/seata/seata/commit/f87a030d8f2f651a49a18da9ab40a497424049fd", "message": "Unified BranchCommit and BranchRollback processing logic", "committedDate": "2020-05-13T15:28:02Z", "type": "commit"}, {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f", "url": "https://github.com/seata/seata/commit/a56d04edf01f24ab1d229070c04e9c47f7364e4f", "message": "checkstyle", "committedDate": "2020-05-14T01:24:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDY5MA==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424890690", "bodyText": "If need to handle exceptions on the outer layer here?", "author": "slievrly", "createdAt": "2020-05-14T06:08:20Z", "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchCommitProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * process TC global commit command.\n+ * <p>\n+ * process message type:\n+ * {@link BranchCommitRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class RmBranchCommitProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmBranchCommitProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmBranchCommitProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm client handle branch commit process:\" + msg);\n+        }\n+        handleBranchCommit(rpcMessage, remoteAddress, (BranchCommitRequest) msg);\n+    }\n+\n+    private void handleBranchCommit(RpcMessage request, String serverAddress, BranchCommitRequest branchCommitRequest) {\n+        BranchCommitResponse resultMessage;\n+        resultMessage = (BranchCommitResponse) handler.onRequest(branchCommitRequest, null);", "originalCommit": "a56d04edf01f24ab1d229070c04e9c47f7364e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzNzg0Nw==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424937847", "bodyText": "Trycatch has been done in the following method\uff1a\nio.seata.core.rpc.netty.AbstractNettyRemoting#processMessage", "author": "objcoding", "createdAt": "2020-05-14T07:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDgwMw==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424890803", "bodyText": "same as above", "author": "slievrly", "createdAt": "2020-05-14T06:08:38Z", "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * process TC do global rollback command.\n+ * <p>\n+ * process message type:\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class RmBranchRollbackProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);", "originalCommit": "a56d04edf01f24ab1d229070c04e9c47f7364e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzNzkyNQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r424937925", "bodyText": "Trycatch has been done in the following method\uff1a\nio.seata.core.rpc.netty.AbstractNettyRemoting#processMessage", "author": "objcoding", "createdAt": "2020-05-14T07:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjczMw==", "url": "https://github.com/seata/seata/pull/2477#discussion_r426416733", "bodyText": "I think this 'if' can be removed.", "author": "l81893521", "createdAt": "2020-05-18T07:23:11Z", "path": "core/src/main/java/io/seata/core/rpc/processor/client/ClientOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RegisterRMResponse;\n+import io.seata.core.protocol.RegisterTMResponse;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRegisterResponse;\n+import io.seata.core.protocol.transaction.BranchReportResponse;\n+import io.seata.core.protocol.transaction.GlobalBeginResponse;\n+import io.seata.core.protocol.transaction.GlobalCommitResponse;\n+import io.seata.core.protocol.transaction.GlobalLockQueryResponse;\n+import io.seata.core.protocol.transaction.GlobalReportResponse;\n+import io.seata.core.protocol.transaction.GlobalRollbackResponse;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * process TC response message.\n+ * <p>\n+ * process message type:\n+ * RM:\n+ * 1) {@link MergeResultMessage}\n+ * 2) {@link RegisterRMResponse}\n+ * 3) {@link BranchRegisterResponse}\n+ * 4) {@link BranchReportResponse}\n+ * 5) {@link GlobalLockQueryResponse}\n+ * TM:\n+ * 1) {@link MergeResultMessage}\n+ * 2) {@link RegisterTMResponse}\n+ * 3) {@link GlobalBeginResponse}\n+ * 4) {@link GlobalCommitResponse}\n+ * 5) {@link GlobalReportResponse}\n+ * 6) {@link GlobalRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ClientOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientOnResponseProcessor.class);\n+\n+    /**\n+     * The Merge msg map from io.seata.core.rpc.netty.AbstractNettyRemotingClient#mergeMsgMap.\n+     */\n+    private Map<Integer, MergeMessage> mergeMsgMap;\n+\n+    /**\n+     * The Futures from io.seata.core.rpc.netty.AbstractNettyRemoting#futures\n+     */\n+    private ConcurrentMap<Integer, MessageFuture> futures;\n+\n+    /**\n+     * To handle the received RPC message on upper level.\n+     */\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    public ClientOnResponseProcessor(Map<Integer, MergeMessage> mergeMsgMap,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures,\n+                                     TransactionMessageHandler transactionMessageHandler) {\n+        this.mergeMsgMap = mergeMsgMap;\n+        this.futures = futures;\n+        this.transactionMessageHandler = transactionMessageHandler;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        if (rpcMessage.getBody() instanceof MergeResultMessage) {\n+            MergeResultMessage results = (MergeResultMessage) rpcMessage.getBody();\n+            MergedWarpMessage mergeMessage = (MergedWarpMessage) mergeMsgMap.remove(rpcMessage.getId());\n+            for (int i = 0; i < mergeMessage.msgs.size(); i++) {\n+                int msgId = mergeMessage.msgIds.get(i);\n+                MessageFuture future = futures.remove(msgId);\n+                if (future == null) {\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"msg: {} is not found in futures.\", msgId);\n+                    }\n+                } else {\n+                    future.setResultMessage(results.getMsgs()[i]);\n+                }\n+            }\n+        } else {\n+            MessageFuture messageFuture = null;\n+            if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {", "originalCommit": "a56d04edf01f24ab1d229070c04e9c47f7364e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0OTUyMQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r426449521", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-18T08:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzMTAxMQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r426431011", "bodyText": "why some registerProcessor have 'super.' and some have not.", "author": "l81893521", "createdAt": "2020-05-18T07:50:22Z", "path": "core/src/main/java/io/seata/core/rpc/netty/RmRpcClient.java", "diffHunk": "@@ -247,4 +256,27 @@ public String getMergedResourceKeys() {\n         }\n         return null;\n     }\n+\n+    private void registerProcessor() {\n+        // 1.registry rm client handle branch commit processor\n+        RmBranchCommitProcessor rmBranchCommitProcessor = new RmBranchCommitProcessor(getTransactionMessageHandler(), this);\n+        registerProcessor(MessageType.TYPE_BRANCH_COMMIT, rmBranchCommitProcessor, messageExecutor);\n+        // 2.registry rm client handle branch commit processor\n+        RmBranchRollbackProcessor rmBranchRollbackProcessor = new RmBranchRollbackProcessor(getTransactionMessageHandler(), this);\n+        registerProcessor(MessageType.TYPE_BRANCH_ROLLBACK, rmBranchRollbackProcessor, messageExecutor);\n+        // 3.registry rm handler undo log processor\n+        RmUndoLogProcessor rmUndoLogProcessor = new RmUndoLogProcessor(getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_RM_DELETE_UNDOLOG, rmUndoLogProcessor, messageExecutor);\n+        // 4.registry TC response processor\n+        ClientOnResponseProcessor onResponseProcessor =\n+            new ClientOnResponseProcessor(mergeMsgMap, super.getFutures(), getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_SEATA_MERGE_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_BRANCH_REGISTER_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_BRANCH_STATUS_REPORT_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_GLOBAL_LOCK_QUERY_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_REG_RM_RESULT, onResponseProcessor, null);\n+        // 5.registry heartbeat message processor\n+        ClientHeartbeatProcessor clientHeartbeatProcessor = new ClientHeartbeatProcessor();\n+        super.registerProcessor(MessageType.TYPE_HEARTBEAT_MSG, clientHeartbeatProcessor, null);", "originalCommit": "a56d04edf01f24ab1d229070c04e9c47f7364e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0OTYwOQ==", "url": "https://github.com/seata/seata/pull/2477#discussion_r426449609", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-18T08:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzMTAxMQ=="}], "type": "inlineReview"}, {"oid": "5e4defa1237e44a70602477fa89a09ffe6f3e7ab", "url": "https://github.com/seata/seata/commit/5e4defa1237e44a70602477fa89a09ffe6f3e7ab", "message": "super", "committedDate": "2020-05-18T07:54:33Z", "type": "commit"}, {"oid": "ae52cfd6a978822a0a52eab120675c63c21e1350", "url": "https://github.com/seata/seata/commit/ae52cfd6a978822a0a52eab120675c63c21e1350", "message": "remove useless if logic", "committedDate": "2020-05-18T08:21:17Z", "type": "commit"}, {"oid": "0250949a2a00d79ab193c9539eb11a21a6d8762a", "url": "https://github.com/seata/seata/commit/0250949a2a00d79ab193c9539eb11a21a6d8762a", "message": "fix pair", "committedDate": "2020-05-18T11:36:01Z", "type": "commit"}]}