{"pr_number": 5005, "pr_title": "Calcite SQL compiler syntax support for order by expression and set LENIENT SQL conformance", "pr_createdAt": "2020-01-23T06:01:14Z", "pr_url": "https://github.com/apache/pinot/pull/5005", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk1NDgxOA==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r369954818", "bodyText": "Should we add ascending as well for readability?", "author": "kishoreg", "createdAt": "2020-01-23T06:52:53Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -224,17 +224,16 @@ private static Expression convertOrderBy(SqlNode node) {\n     final SqlKind kind = node.getKind();\n     Expression expression;\n     switch (kind) {\n-      case IDENTIFIER:\n-        expression = RequestUtils.getFunctionExpression(\"ASC\");\n-        expression.getFunctionCall().addToOperands(toExpression(node));\n-        break;\n       case DESCENDING:\n         SqlBasicCall basicCall = (SqlBasicCall) node;\n         expression = RequestUtils.getFunctionExpression(\"DESC\");\n         expression.getFunctionCall().addToOperands(toExpression(basicCall.getOperands()[0]));\n         break;\n+      case IDENTIFIER:", "originalCommit": "3558d265c12d477088167536e74b106588f57c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk1NTQwMQ==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r369955401", "bodyText": "there is no ascending key word in calcite sql", "author": "xiangfu0", "createdAt": "2020-01-23T06:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk1NDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk2NDI4Ng==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r369964286", "bodyText": "basically by default, it's ascending already", "author": "xiangfu0", "createdAt": "2020-01-23T07:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk1NDgxOA=="}], "type": "inlineReview"}, {"oid": "cadbd0d96d88b8e08d62508af41ff89c548feed2", "url": "https://github.com/apache/pinot/commit/cadbd0d96d88b8e08d62508af41ff89c548feed2", "message": "Make calcite parser support order by expression", "committedDate": "2020-01-23T09:07:39Z", "type": "forcePushed"}, {"oid": "38ee79816f44b740a3fcbb313de07f0d247b8e7f", "url": "https://github.com/apache/pinot/commit/38ee79816f44b740a3fcbb313de07f0d247b8e7f", "message": "Make calcite parser support order by expression", "committedDate": "2020-01-23T10:29:35Z", "type": "commit"}, {"oid": "38ee79816f44b740a3fcbb313de07f0d247b8e7f", "url": "https://github.com/apache/pinot/commit/38ee79816f44b740a3fcbb313de07f0d247b8e7f", "message": "Make calcite parser support order by expression", "committedDate": "2020-01-23T10:29:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxNzY5MA==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r370417690", "bodyText": "Why is this needed?", "author": "siddharthteotia", "createdAt": "2020-01-24T00:01:27Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -111,6 +112,7 @@ private static void setOptions(PinotQuery pinotQuery, List<String> optionsStatem\n   private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     SqlParser.ConfigBuilder parserBuilder = SqlParser.configBuilder();\n     parserBuilder.setLex(PINOT_LEX);\n+    parserBuilder.setConformance(SqlConformanceEnum.LENIENT);", "originalCommit": "ff0209333108947e907b679ea062625ce17b3743", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxODAyNw==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r370418027", "bodyText": "I think I committed another change for supporting LIMIT offset,count into this.", "author": "xiangfu0", "createdAt": "2020-01-24T00:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxNzY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxODI3OA==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r370418278", "bodyText": "basically calcite parser cannot parse LIMIT X,Y until this conformance is added.", "author": "xiangfu0", "createdAt": "2020-01-24T00:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxNzY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyNzQyNQ==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r370427425", "bodyText": "@siddharthteotia we did an exercise at LI wherein we passed all possible used queries though Calcite parser. We caught certain things which do not pass under the default sql conformance level (!= and LIMIT offset, count). One of the solutions for that we discussed was to set the conformance to be more lenient.", "author": "npawar", "createdAt": "2020-01-24T00:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxNzY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyOTk4Ng==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r370429986", "bodyText": "Got it. Thanks", "author": "siddharthteotia", "createdAt": "2020-01-24T00:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxNzY5MA=="}], "type": "inlineReview"}, {"oid": "fa4001c165613bd0140f5b6f6f7d06a214c4d397", "url": "https://github.com/apache/pinot/commit/fa4001c165613bd0140f5b6f6f7d06a214c4d397", "message": "Set SqlConformanceEnum.LENIENT to CalciteParser", "committedDate": "2020-01-24T00:09:02Z", "type": "commit"}, {"oid": "fa4001c165613bd0140f5b6f6f7d06a214c4d397", "url": "https://github.com/apache/pinot/commit/fa4001c165613bd0140f5b6f6f7d06a214c4d397", "message": "Set SqlConformanceEnum.LENIENT to CalciteParser", "committedDate": "2020-01-24T00:09:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDY5MQ==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r370780691", "bodyText": "Is it possible to just have one variable for TOP/LIMIT? Or does LIMIT imply that there may not be any sorting if ORDERBY not provided?", "author": "mayankshriv", "createdAt": "2020-01-24T18:36:06Z", "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/SelectAstNode.java", "diffHunk": "@@ -31,12 +31,12 @@\n  * AST node for a SELECT statement.\n  */\n public class SelectAstNode extends BaseAstNode {\n+  public static final int DEFAULT_RECORD_LIMIT = 10;", "originalCommit": "fa4001c165613bd0140f5b6f6f7d06a214c4d397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MzYzNg==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r370793636", "bodyText": "Yes LIMIT implies no sorting/ordering unless ORDER BY is specified. In fact in MySql, both LIMIT and TOP are synonymous.\nI think we should eventually move to LIMIT -- now that we have GROUP BY with ORDER BY and are also converging towards standard SQL, we should have two variants (1) LIMIT and (2) LIMIT with ORDER BY", "author": "siddharthteotia", "createdAt": "2020-01-24T19:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMDk1OA==", "url": "https://github.com/apache/pinot/pull/5005#discussion_r370800958", "bodyText": "Wondering what is a good use case for non ordered response? And/or if we should consider a default ordering?", "author": "mayankshriv", "createdAt": "2020-01-24T19:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDY5MQ=="}], "type": "inlineReview"}]}