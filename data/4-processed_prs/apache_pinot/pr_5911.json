{"pr_number": 5911, "pr_title": "Add compatibility verifier scripts (#4854)", "pr_createdAt": "2020-08-23T07:04:23Z", "pr_url": "https://github.com/apache/pinot/pull/5911", "timeline": [{"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "url": "https://github.com/apache/pinot/commit/21f25428ff80b3bbe3b187389fad0b72ff4d5030", "message": "Add compatibility verifier scripts (#4854)\n\nAdds 3 scripts to take 2 commit hashes and verify compatibility across these.\n\n- build-release.sh\n- comp-verifier.sh\n- control-service.sh\n\nStarts all components in v1 version. Upgrades controller first, then the broker, and finally the server.", "committedDate": "2020-08-23T07:03:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyODczNA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475728734", "bodyText": "Let us use this script to build one release, and invoke it as many times as needed", "author": "mcvsubbu", "createdAt": "2020-08-24T16:11:08Z", "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyOTQyMg==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475729422", "bodyText": "Introduce a function called usage() and print the usage in it. We can call that function from multiple points as necessary", "author": "mcvsubbu", "createdAt": "2020-08-24T16:12:14Z", "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMDc2Mg==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475730762", "bodyText": "Please use '[' instead of '[['. Won't repeat for other instances further down in this file and other files", "author": "mcvsubbu", "createdAt": "2020-08-24T16:14:25Z", "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMDg4Ng==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475730886", "bodyText": "Remove this line", "author": "mcvsubbu", "createdAt": "2020-08-24T16:14:39Z", "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMTMwNA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475731304", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"\n          \n          \n            \n                echo \"Usage:$0 commit_hash target_dir \"", "author": "mcvsubbu", "createdAt": "2020-08-24T16:15:19Z", "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMTg3Mg==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475731872", "bodyText": "exit if the directory exists. We can add a -f argument later or force", "author": "mcvsubbu", "createdAt": "2020-08-24T16:16:13Z", "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commit_hash=$1\n+target_dir=$2\n+\n+# check if directory already exists and checkout  ", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMjk1NQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475732955", "bodyText": "You will need to check the exit status of mkdir in case there were permission issues", "author": "mcvsubbu", "createdAt": "2020-08-24T16:17:59Z", "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commit_hash=$1\n+target_dir=$2\n+\n+# check if directory already exists and checkout  \n+# using the given commit\n+if [[ ! -d $target_dir ]]; then\n+    mkdir -p \"$target_dir\"", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNjc0Nw==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475736747", "bodyText": "Take a working dir as argument and mkdir two subdirs in it, one for each commit hash.", "author": "mcvsubbu", "createdAt": "2020-08-24T16:24:19Z", "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzMwNQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475737305", "bodyText": "Why read pinot versions? We have the commit hash, pick up whatever version or hash that is.", "author": "mcvsubbu", "createdAt": "2020-08-24T16:25:09Z", "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNzY2MA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r476107660", "bodyText": "I required it because I'm using pinot-admin.sh to start the components and the path to pinot-admin.sh file is dependent on the Pinot version for e.g., pinot-distribution/target/apache-pinot-incubating-0.5.0-SNAPSHOT-bin/apache-pinot-incubating-0.5.0-SNAPSHOT-bin/bin/StartZookeeper. I'm not sure if I can get the Pinot version from the hash.", "author": "saileshnankani", "createdAt": "2020-08-25T03:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExMzU1Nw==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r476113557", "bodyText": "Never mind. I noticed there is also ./pinot-tools/target/pinot-tools-pkg/bin/pinot-admin.sh that I can use.", "author": "saileshnankani", "createdAt": "2020-08-25T03:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzk3Mw==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475737973", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n          \n          \n            \n                echo \"Usage: $0 earlierCommitHash laterCommitHash workingDir\"", "author": "mcvsubbu", "createdAt": "2020-08-24T16:26:13Z", "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczODMzOQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475738339", "bodyText": "Mention clearly that the script assumes the first hash is the earlier one and the second is the later one. Change your variable names to indicate so", "author": "mcvsubbu", "createdAt": "2020-08-24T16:26:50Z", "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  ", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczOTQ4NQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475739485", "bodyText": "Do not kill existing processes. If the ports are not open, exit with an error saying so\nWe will add additional a config file for each component to fine-tune things. For now,\ndefault configs and ports are good enough to get things going.", "author": "mcvsubbu", "createdAt": "2020-08-24T16:28:42Z", "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || ", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczOTc0NQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475739745", "bodyText": "Not sure if lsof returns all ports even if you don't have permissions", "author": "mcvsubbu", "createdAt": "2020-08-24T16:29:09Z", "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || ", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxOTAwOQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479319009", "bodyText": "I'm currently not sure how to circumvent this issue. I could try adding sudo, but that would prompt users with password.", "author": "saileshnankani", "createdAt": "2020-08-28T14:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczOTc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MDA5Mg==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475740092", "bodyText": "remove this prompt. The user has entered the command, and is therefore ready to build the cluster.", "author": "mcvsubbu", "createdAt": "2020-08-24T16:29:45Z", "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || \n+      $(lsof -t -i:2181 -sTCP:LISTEN) || $(lsof -t -i:8011 -sTCP:LISTEN) ]]; then\n+  read -rep $'\\n' -p \"The ports need to be open. Do you want to kill existing processes on these ports? \" -n 1 -r\n+  if [[ $REPLY =~ ^[Yy]$ ]]; then\n+    ## Clean up the ports and kill any processes running on them\n+    if [[ $(lsof -t -i:7001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:7001 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:8001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:8001 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:9001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:9001 -s TCP:LISTEN)\" \n+    fi\n+    if [[ $(lsof -t -i:2181 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:2181 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:8011 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:8011 -s TCP:LISTEN)\"\n+    fi\n+  fi\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the cluster with first commit? [default: no] \" -n 1 -r", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MDI5NA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475740294", "bodyText": "You don't need these prompts.", "author": "mcvsubbu", "createdAt": "2020-08-24T16:30:04Z", "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || \n+      $(lsof -t -i:2181 -sTCP:LISTEN) || $(lsof -t -i:8011 -sTCP:LISTEN) ]]; then\n+  read -rep $'\\n' -p \"The ports need to be open. Do you want to kill existing processes on these ports? \" -n 1 -r\n+  if [[ $REPLY =~ ^[Yy]$ ]]; then\n+    ## Clean up the ports and kill any processes running on them\n+    if [[ $(lsof -t -i:7001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:7001 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:8001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:8001 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:9001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:9001 -s TCP:LISTEN)\" \n+    fi\n+    if [[ $(lsof -t -i:2181 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:2181 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:8011 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:8011 -s TCP:LISTEN)\"\n+    fi\n+  fi\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the cluster with first commit? [default: no] \" -n 1 -r\n+if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n+  exit 0;\n+fi\n+\n+\n+# Setup initial cluster (with commit in target_dir_1)\n+\n+printf \"\\n\\nStarting Zookeeper ...\\n\"", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MjQyNQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475742425", "bodyText": "You don't need pinot version", "author": "mcvsubbu", "createdAt": "2020-08-24T16:33:21Z", "path": "compatibility-verifier/control-service.sh", "diffHunk": "@@ -0,0 +1,104 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that starts/stops given component for a given build of Pinot\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./control-service.sh command component target_dir pinot_version", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0NDIyOA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475744228", "bodyText": "For now, just use the default ports on the service. Let us get a basic framework working. and then we can add the bells and whistles.", "author": "mcvsubbu", "createdAt": "2020-08-24T16:34:42Z", "path": "compatibility-verifier/control-service.sh", "diffHunk": "@@ -0,0 +1,104 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that starts/stops given component for a given build of Pinot\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./control-service.sh command component target_dir pinot_version\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+  printf \"You used %s arguments \\n\" \"$#\"\n+  printf \"Usage: \\n ./control-service.sh command component target_dir pinot_version \\n\"\n+  exit 1\n+fi\n+\n+# get arguments\n+command=$1\n+component=$2\n+target_dir=$3\n+pinot_version=$4\n+\n+declare -a commands=(\"start\" \"stop\")\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+if [[ ! -d \"$target_dir\"/incubator-pinot ]]; then\n+  printf \"%s/incubator-pinot does not exist \\n \" \"$target_dir\"\n+  exit 1\n+fi\n+\n+# Handle invalid arguments\n+if [[ ! \" ${commands[*]} \" =~ $command  ]]; then\n+  printf \"%s is not a valid command. Command must be one of: start and stop\\n\" \"$command\"\n+  printf \"Usage: \\n ./controlService.sh command component target_dir \\n\"\n+  exit 1\n+fi\n+if [[ ! \" ${components[*]} \" =~ $component  ]]; then\n+  printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+  exit 1\n+fi\n+\n+# Define ports for the test\n+zkPort=2181", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0NDk5OQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475744999", "bodyText": "Just start with default ports for now.", "author": "mcvsubbu", "createdAt": "2020-08-24T16:35:15Z", "path": "compatibility-verifier/control-service.sh", "diffHunk": "@@ -0,0 +1,104 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that starts/stops given component for a given build of Pinot\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./control-service.sh command component target_dir pinot_version\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+  printf \"You used %s arguments \\n\" \"$#\"\n+  printf \"Usage: \\n ./control-service.sh command component target_dir pinot_version \\n\"\n+  exit 1\n+fi\n+\n+# get arguments\n+command=$1\n+component=$2\n+target_dir=$3\n+pinot_version=$4\n+\n+declare -a commands=(\"start\" \"stop\")\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+if [[ ! -d \"$target_dir\"/incubator-pinot ]]; then\n+  printf \"%s/incubator-pinot does not exist \\n \" \"$target_dir\"\n+  exit 1\n+fi\n+\n+# Handle invalid arguments\n+if [[ ! \" ${commands[*]} \" =~ $command  ]]; then\n+  printf \"%s is not a valid command. Command must be one of: start and stop\\n\" \"$command\"\n+  printf \"Usage: \\n ./controlService.sh command component target_dir \\n\"\n+  exit 1\n+fi\n+if [[ ! \" ${components[*]} \" =~ $component  ]]; then\n+  printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+  exit 1\n+fi\n+\n+# Define ports for the test\n+zkPort=2181\n+localhost=2181\n+controllerPort=9001\n+brokerPort=7001\n+serverPort=8001\n+serverAdminPort=8011\n+\n+if [[ \"$command\" == \"start\" ]]; then\n+  # Navigate to the directory containing the scripts\n+  if [[ $pinot_version == \"0.3.0\" ]]; then\n+  pushd \"$target_dir\"/incubator-pinot/pinot-distribution/target/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/bin || exit 1\n+  elif [[ $pinot_version == \"0.4.0\" ]]; then\n+  pushd \"$target_dir\"/incubator-pinot/pinot-distribution/target/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/bin || exit 1\n+  else\n+  pushd \"$target_dir\"/incubator-pinot/pinot-distribution/target/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/bin || exit 1\n+  fi\n+\n+  # Start the desired component\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  if [[ \"$component\" == \"controller\" ]]; then\n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController -zkAddress localhost:$0 -clusterName PinotCluster -controllerPort $1 > /tmp/pinot-controller.log' ${localhost} \"${controllerPort}\"", "originalCommit": "21f25428ff80b3bbe3b187389fad0b72ff4d5030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "024e03951663ee75b4763e43e24aa1453e6af6e4", "url": "https://github.com/apache/pinot/commit/024e03951663ee75b4763e43e24aa1453e6af6e4", "message": "Format and address review comments", "committedDate": "2020-08-27T00:05:38Z", "type": "commit"}, {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "url": "https://github.com/apache/pinot/commit/cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "message": "Add error handling and comments", "committedDate": "2020-08-27T06:37:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NjQxNg==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479396416", "bodyText": "Please move all the functions to the top and main code below the function defintions", "author": "mcvsubbu", "createdAt": "2020-08-28T16:01:43Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5Njg0OA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479396848", "bodyText": "Since these are internal function calls, you don't need to check for usage here", "author": "mcvsubbu", "createdAt": "2020-08-28T16:02:27Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then ", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NzA0OQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479397049", "bodyText": "dont need usage check", "author": "mcvsubbu", "createdAt": "2020-08-28T16:02:49Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then ", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NzI1OQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479397259", "bodyText": "dont need this check", "author": "mcvsubbu", "createdAt": "2020-08-28T16:03:10Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NzYyOA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479397628", "bodyText": "remove", "author": "mcvsubbu", "createdAt": "2020-08-28T16:03:56Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then ", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NzcwNQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479397705", "bodyText": "remove", "author": "mcvsubbu", "createdAt": "2020-08-28T16:04:04Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5ODQ1NQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479398455", "bodyText": "create the pid file inside $dirName for the release that we are working with.", "author": "mcvsubbu", "createdAt": "2020-08-28T16:05:20Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5OTQzNw==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479399437", "bodyText": "add the full path name to pid file in this message. \"Pid file {} not found. Failed to stop component {}\"", "author": "mcvsubbu", "createdAt": "2020-08-28T16:07:07Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMDM3Nw==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479400377", "bodyText": "We need to run tests before/after each step, so there will be a lot of code between each stop and start. Don't put this as a function as yet.. It can be in the main code for now.", "author": "mcvsubbu", "createdAt": "2020-08-28T16:09:02Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) ", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMTMyOA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479401328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            echo \"Building the first target ... \"\n          \n          \n            \n            echo \"Building old version \"", "author": "mcvsubbu", "createdAt": "2020-08-28T16:10:39Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) \n+function switchComponents() {\n+  dirName=$1\n+  stopService controller\n+  startService controller \"$dirName\"\n+  stopService broker\n+  startService broker \"$dirName\"\n+  stopService server\n+  startService server \"$dirName\"\n+}\n+\n+# Do rolling upgrade from olderCommit to newerCommit\n+function upgradeAndTest() {\n+  switchComponents \"$newTargetDir\"\n+  echo \"Rolling upgrade complete.\"\n+}\n+\n+# Do rolling upgrade from newerCommit to olderCommit\n+function downgradeAndTest() {\n+  switchComponents \"$oldTargetDir\"\n+  echo \"Rolling downgrade complete.\"\n+}\n+\n+# create subdirectories for given commits\n+oldTargetDir=\"$workingDir\"/oldTargetDir\n+newTargetDir=\"$workingDir\"/newTargetDir\n+\n+if ! mkdir -p \"$oldTargetDir\" \"$newTargetDir\"; then\n+  echo \"Failed to create target directory\"\n+  exit 1\n+fi\n+\n+# Building targets\n+echo \"Building the first target ... \"", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMTU2OQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479401569", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            echo \"Building the second target ...\"\n          \n          \n            \n            echo \"Building new version\"", "author": "mcvsubbu", "createdAt": "2020-08-28T16:11:07Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) \n+function switchComponents() {\n+  dirName=$1\n+  stopService controller\n+  startService controller \"$dirName\"\n+  stopService broker\n+  startService broker \"$dirName\"\n+  stopService server\n+  startService server \"$dirName\"\n+}\n+\n+# Do rolling upgrade from olderCommit to newerCommit\n+function upgradeAndTest() {\n+  switchComponents \"$newTargetDir\"\n+  echo \"Rolling upgrade complete.\"\n+}\n+\n+# Do rolling upgrade from newerCommit to olderCommit\n+function downgradeAndTest() {\n+  switchComponents \"$oldTargetDir\"\n+  echo \"Rolling downgrade complete.\"\n+}\n+\n+# create subdirectories for given commits\n+oldTargetDir=\"$workingDir\"/oldTargetDir\n+newTargetDir=\"$workingDir\"/newTargetDir\n+\n+if ! mkdir -p \"$oldTargetDir\" \"$newTargetDir\"; then\n+  echo \"Failed to create target directory\"\n+  exit 1\n+fi\n+\n+# Building targets\n+echo \"Building the first target ... \"\n+checkoutAndBuild \"$olderCommit\" \"$oldTargetDir\"\n+echo \"Building the second target ...\"", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMjA0Mg==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479402042", "bodyText": "unroll the switchcomponents function here", "author": "mcvsubbu", "createdAt": "2020-08-28T16:12:02Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) \n+function switchComponents() {\n+  dirName=$1\n+  stopService controller\n+  startService controller \"$dirName\"\n+  stopService broker\n+  startService broker \"$dirName\"\n+  stopService server\n+  startService server \"$dirName\"\n+}\n+\n+# Do rolling upgrade from olderCommit to newerCommit\n+function upgradeAndTest() {\n+  switchComponents \"$newTargetDir\"\n+  echo \"Rolling upgrade complete.\"\n+}\n+\n+# Do rolling upgrade from newerCommit to olderCommit\n+function downgradeAndTest() {\n+  switchComponents \"$oldTargetDir\"\n+  echo \"Rolling downgrade complete.\"\n+}\n+\n+# create subdirectories for given commits\n+oldTargetDir=\"$workingDir\"/oldTargetDir\n+newTargetDir=\"$workingDir\"/newTargetDir\n+\n+if ! mkdir -p \"$oldTargetDir\" \"$newTargetDir\"; then\n+  echo \"Failed to create target directory\"\n+  exit 1\n+fi\n+\n+# Building targets\n+echo \"Building the first target ... \"\n+checkoutAndBuild \"$olderCommit\" \"$oldTargetDir\"\n+echo \"Building the second target ...\"\n+checkoutAndBuild \"$newerCommit\" \"$newTargetDir\"\n+\n+# check that the default ports are open\n+if [ \"$(lsof -t -i:8097 -s TCP:LISTEN)\" ] || [ \"$(lsof -t -i:8098 -sTCP:LISTEN)\" ] || [ \"$(lsof -t -i:8099 -sTCP:LISTEN)\" ] || \n+     [ \"$(lsof -t -i:9000 -sTCP:LISTEN)\" ] || [ \"$(lsof -t -i:2181 -sTCP:LISTEN)\" ]; then\n+  echo \"Cannot start the components since the default ports are not open. Check any existing process that may be using the default ports.\"\n+  exit 1\n+fi\n+\n+# Setup initial cluster with olderCommit and do rolling upgrade\n+startServices \"$oldTargetDir\"", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMjI3Nw==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479402277", "bodyText": "remove lines 167 to 171 for now, we will add tests later", "author": "mcvsubbu", "createdAt": "2020-08-28T16:12:29Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) \n+function switchComponents() {\n+  dirName=$1\n+  stopService controller\n+  startService controller \"$dirName\"\n+  stopService broker\n+  startService broker \"$dirName\"\n+  stopService server\n+  startService server \"$dirName\"\n+}\n+\n+# Do rolling upgrade from olderCommit to newerCommit", "originalCommit": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "00da29849b9e8e2568f9e53982c0dd24d8920080", "url": "https://github.com/apache/pinot/commit/00da29849b9e8e2568f9e53982c0dd24d8920080", "message": "Address further PR comments", "committedDate": "2020-08-29T06:27:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDYzMA==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482224630", "bodyText": "For now, let us just echo that this needs to be cleaned up.\nIn some cases, we would want to keep the dir to see the logs/results, so it may be useful to keep it.\nAlso, I would prefer that we set a variable called TMP_DIR up front to the results of mktemp. The use of TMP_DIR indicates that we don't modify it -- just a convention.", "author": "mcvsubbu", "createdAt": "2020-09-02T17:01:53Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then", "originalCommit": "00da29849b9e8e2568f9e53982c0dd24d8920080", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MzQ1MQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482243451", "bodyText": "Since I set the result of mktemp to tmpDir, do you mean just renaming tmpDir to TMP_DIR?", "author": "saileshnankani", "createdAt": "2020-09-02T17:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1MjM4Ng==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482252386", "bodyText": "just move the assignment to tmpDir to be an assignment to TMP_DIR and move it to the top of the file. It does not create the dir anyway, only assigns a dir name. We can create the dir if needed (if working dir is not supplied)", "author": "mcvsubbu", "createdAt": "2020-09-02T17:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNTY1OQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482225659", "bodyText": "Unfortunate, we need a better way to stop a service gracefully. For now, that is ok", "author": "mcvsubbu", "createdAt": "2020-09-02T17:03:41Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  serviceName=$1\n+  dirName=$2\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > $0/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > $0/controller.pid; exec ./pinot-admin.sh StartController' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > $0/broker.pid; exec ./pinot-admin.sh StartBroker' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > $0/server.pid; exec ./pinot-admin.sh StartServer' \"${dirName}\" &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  serviceName=$1\n+  dirName=$2\n+  if [ -f \"${dirName}/${serviceName}\".pid ]; then \n+    servicePid=$(<\"${dirName}/${serviceName}\".pid)\n+    rm \"${dirName}/${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"", "originalCommit": "00da29849b9e8e2568f9e53982c0dd24d8920080", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNjU3NQ==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482226575", "bodyText": "Let us remove this if", "author": "mcvsubbu", "createdAt": "2020-09-02T17:05:08Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then", "originalCommit": "00da29849b9e8e2568f9e53982c0dd24d8920080", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyODQ5Mw==", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482228493", "bodyText": "include the name of the directory that failed to create", "author": "mcvsubbu", "createdAt": "2020-09-02T17:07:33Z", "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  serviceName=$1\n+  dirName=$2\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > $0/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > $0/controller.pid; exec ./pinot-admin.sh StartController' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > $0/broker.pid; exec ./pinot-admin.sh StartBroker' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > $0/server.pid; exec ./pinot-admin.sh StartServer' \"${dirName}\" &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  serviceName=$1\n+  dirName=$2\n+  if [ -f \"${dirName}/${serviceName}\".pid ]; then \n+    servicePid=$(<\"${dirName}/${serviceName}\".pid)\n+    rm \"${dirName}/${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Pid file ${dirName}/${serviceName}.pid  not found. Failed to stop component ${serviceName}\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  dirName=$1\n+  stopService controller \"$dirName\"\n+  stopService broker \"$dirName\"\n+  stopService server \"$dirName\"\n+  stopService zookeeper \"$dirName\"\n+  echo \"Cluster stopped.\"\n+} \n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+# create subdirectories for given commits\n+oldTargetDir=\"$workingDir\"/oldTargetDir\n+newTargetDir=\"$workingDir\"/newTargetDir\n+\n+if ! mkdir -p \"$oldTargetDir\" \"$newTargetDir\"; then\n+  echo \"Failed to create target directory\"", "originalCommit": "00da29849b9e8e2568f9e53982c0dd24d8920080", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6138eefe2515885a14ccb3c17716e9d409666e12", "url": "https://github.com/apache/pinot/commit/6138eefe2515885a14ccb3c17716e9d409666e12", "message": "Fix additional PR comments", "committedDate": "2020-09-02T18:42:05Z", "type": "commit"}]}