{"pr_number": 5686, "pr_title": "Early termination for combining selection order-by results", "pr_createdAt": "2020-07-11T06:05:47Z", "pr_url": "https://github.com/apache/pinot/pull/5686", "timeline": [{"oid": "1147697784a3445b6892bd353ddecdf0aea1c733", "url": "https://github.com/apache/pinot/commit/1147697784a3445b6892bd353ddecdf0aea1c733", "message": "Early termination for combining selection order-by results", "committedDate": "2020-07-17T22:39:59Z", "type": "forcePushed"}, {"oid": "a22e1ac5ce397ce901110808cbc5db5b9f41f643", "url": "https://github.com/apache/pinot/commit/a22e1ac5ce397ce901110808cbc5db5b9f41f643", "message": "Early termination for combining selection order-by results", "committedDate": "2020-07-17T23:08:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MjkzOQ==", "url": "https://github.com/apache/pinot/pull/5686#discussion_r459062939", "bodyText": "Seems like this pattern is repeated in all the combine operator flavors. Given that we have fixed a bug in this part (related to refresh) we don't want additional flavors of it lurking around as we would have to fix any future bugs (or enhancements) in all these places. Any way to avoid this? You do have a base class, can that not be used to extract this out as a generic pattern?", "author": "mayankshriv", "createdAt": "2020-07-22T20:27:36Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/combine/BaseCombineOperator.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.combine;\n+\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.Phaser;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.pinot.common.exception.QueryException;\n+import org.apache.pinot.core.common.Operator;\n+import org.apache.pinot.core.operator.BaseOperator;\n+import org.apache.pinot.core.operator.blocks.IntermediateResultsBlock;\n+import org.apache.pinot.core.query.exception.EarlyTerminationException;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.util.trace.TraceRunnable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Base implementation of the combine operator.\n+ * <p>Combine operator uses multiple worker threads to process segments in parallel, and uses the main thread to merge\n+ * the results blocks from the processed segments. It can early-terminate the query to save the system resources if it\n+ * detects that the results collected so far can already satisfy the query, or the query is already timed out.\n+ */\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class BaseCombineOperator extends BaseOperator<IntermediateResultsBlock> {\n+  protected static final Logger LOGGER = LoggerFactory.getLogger(BaseCombineOperator.class);\n+\n+  protected final List<Operator> _operators;\n+  protected final QueryContext _queryContext;\n+  protected final ExecutorService _executorService;\n+  protected final long _timeOutMs;\n+\n+  public BaseCombineOperator(List<Operator> operators, QueryContext queryContext, ExecutorService executorService,\n+      long timeOutMs) {\n+    _operators = operators;\n+    _queryContext = queryContext;\n+    _executorService = executorService;\n+    _timeOutMs = timeOutMs;\n+  }\n+\n+  @Override\n+  protected IntermediateResultsBlock getNextBlock() {\n+    long startTimeMs = System.currentTimeMillis();\n+    long endTimeMs = startTimeMs + _timeOutMs;\n+    int numOperators = _operators.size();\n+    AtomicInteger numOperatorsSkipped = new AtomicInteger();\n+\n+    // Try to use all MAX_NUM_THREADS_PER_QUERY threads for the query, but ensure each thread has at least one operator", "originalCommit": "a22e1ac5ce397ce901110808cbc5db5b9f41f643", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a728dfa0963d68951203973cc8bf24fed4bd144", "url": "https://github.com/apache/pinot/commit/7a728dfa0963d68951203973cc8bf24fed4bd144", "message": "Early termination for combining selection order-by results", "committedDate": "2020-07-23T00:29:24Z", "type": "forcePushed"}, {"oid": "74828cd63fa334d8b8768f65e90a883668c2313b", "url": "https://github.com/apache/pinot/commit/74828cd63fa334d8b8768f65e90a883668c2313b", "message": "Early termination for combining selection order-by results", "committedDate": "2020-07-23T00:36:25Z", "type": "forcePushed"}, {"oid": "83a53c6a4421ca270c75425b64c951e4663fd665", "url": "https://github.com/apache/pinot/commit/83a53c6a4421ca270c75425b64c951e4663fd665", "message": "Early termination for combining selection order-by results", "committedDate": "2020-07-23T01:43:11Z", "type": "commit"}, {"oid": "83a53c6a4421ca270c75425b64c951e4663fd665", "url": "https://github.com/apache/pinot/commit/83a53c6a4421ca270c75425b64c951e4663fd665", "message": "Early termination for combining selection order-by results", "committedDate": "2020-07-23T01:43:11Z", "type": "forcePushed"}]}