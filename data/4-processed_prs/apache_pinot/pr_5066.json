{"pr_number": 5066, "pr_title": "Refactor existing Message Handler to update query quota on broker (Part 1)", "pr_createdAt": "2020-02-12T01:26:16Z", "pr_url": "https://github.com/apache/pinot/pull/5066", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDQxMQ==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379590411", "bodyText": "nit: Can you change this to _isShuttingDown\nthanks", "author": "mcvsubbu", "createdAt": "2020-02-14T18:53:33Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -19,53 +19,65 @@\n package org.apache.pinot.broker.broker.helix;\n \n import java.util.Iterator;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.helix.NotificationContext;\n import org.apache.helix.messaging.handling.HelixTaskResult;\n import org.apache.helix.messaging.handling.MessageHandler;\n import org.apache.helix.messaging.handling.MessageHandlerFactory;\n import org.apache.helix.model.Message;\n+import org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager;\n import org.apache.pinot.broker.routing.HelixExternalViewBasedRouting;\n import org.apache.pinot.common.messages.TimeboundaryRefreshMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-// Handle the TimeboundaryRefresh message. The Timeboundary refresh requests are handled asynchronously: i.e., they are\n-// first put into a request map first. The map dedups requests by their tables thus multiple requests for the same\n+// Handle the broker message, like TimeboundaryRefresh and UpdateQueryQuota.\n+// The Timeboundary refresh requests are handled asynchronously: i.e., they are first put into a request map first.\n+// The map dedups requests by their tables thus multiple requests for the same\n // table only needs to be executed once. A background thread periodically checks the map and performs refreshing for\n // all the tables in the map.\n-public class TimeboundaryRefreshMessageHandlerFactory implements MessageHandlerFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TimeboundaryRefreshMessageHandlerFactory.class);\n+// The query quota update can be done synchronously, as the table config won't be changed frequently.\n+public class BrokerMessageHandlerFactory implements MessageHandlerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerMessageHandlerFactory.class);\n   private final HelixExternalViewBasedRouting _helixExternalViewBasedRouting;\n-  // A map to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n-  // Ideally a Hashset will suffice but Java util currently does not have Hashset.\n-  private static ConcurrentHashMap<String, Boolean> _tablesToRefreshmap = new ConcurrentHashMap<>();\n-  private boolean shuttingDown;\n+  private final HelixExternalViewBasedQueryQuotaManager _helixExternalViewBasedQueryQuotaManager;\n+  // A set to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n+  private static Set<String> _tablesToRefreshSet = ConcurrentHashMap.newKeySet();\n+  private boolean _shuttingDown;", "originalCommit": "b6e49a0d50d49536f00676b19e225ea3d6ae3232", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDk3Ng==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379590976", "bodyText": "thanks for fixing this", "author": "mcvsubbu", "createdAt": "2020-02-14T18:54:48Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -19,53 +19,65 @@\n package org.apache.pinot.broker.broker.helix;\n \n import java.util.Iterator;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.helix.NotificationContext;\n import org.apache.helix.messaging.handling.HelixTaskResult;\n import org.apache.helix.messaging.handling.MessageHandler;\n import org.apache.helix.messaging.handling.MessageHandlerFactory;\n import org.apache.helix.model.Message;\n+import org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager;\n import org.apache.pinot.broker.routing.HelixExternalViewBasedRouting;\n import org.apache.pinot.common.messages.TimeboundaryRefreshMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-// Handle the TimeboundaryRefresh message. The Timeboundary refresh requests are handled asynchronously: i.e., they are\n-// first put into a request map first. The map dedups requests by their tables thus multiple requests for the same\n+// Handle the broker message, like TimeboundaryRefresh and UpdateQueryQuota.\n+// The Timeboundary refresh requests are handled asynchronously: i.e., they are first put into a request map first.\n+// The map dedups requests by their tables thus multiple requests for the same\n // table only needs to be executed once. A background thread periodically checks the map and performs refreshing for\n // all the tables in the map.\n-public class TimeboundaryRefreshMessageHandlerFactory implements MessageHandlerFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TimeboundaryRefreshMessageHandlerFactory.class);\n+// The query quota update can be done synchronously, as the table config won't be changed frequently.\n+public class BrokerMessageHandlerFactory implements MessageHandlerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerMessageHandlerFactory.class);\n   private final HelixExternalViewBasedRouting _helixExternalViewBasedRouting;\n-  // A map to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n-  // Ideally a Hashset will suffice but Java util currently does not have Hashset.\n-  private static ConcurrentHashMap<String, Boolean> _tablesToRefreshmap = new ConcurrentHashMap<>();\n-  private boolean shuttingDown;\n+  private final HelixExternalViewBasedQueryQuotaManager _helixExternalViewBasedQueryQuotaManager;\n+  // A set to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n+  private static Set<String> _tablesToRefreshSet = ConcurrentHashMap.newKeySet();\n+  private boolean _shuttingDown;\n \n   /**\n    *\n    * @param helixExternalViewBasedRouting The underlying Routing object to execute TimeboundaryInfo refreshing.\n+   * @param helixExternalViewBasedQueryQuotaManager The underlying object to update rate limiter.\n    * @param sleepTimeInMilliseconds The sleep time for the background thread to execute TimeboundaryInfo refreshing.\n    */\n-  public TimeboundaryRefreshMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n-      long sleepTimeInMilliseconds) {\n+  public BrokerMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n+      HelixExternalViewBasedQueryQuotaManager helixExternalViewBasedQueryQuotaManager, long sleepTimeInMilliseconds) {\n     _helixExternalViewBasedRouting = helixExternalViewBasedRouting;\n+    _helixExternalViewBasedQueryQuotaManager = helixExternalViewBasedQueryQuotaManager;\n+\n     // Start a background thread to execute the TimeboundaryInfo update requests.\n     Thread tbiUpdateThread = new Thread(new TimeboundaryRefreshMessageExecutor(sleepTimeInMilliseconds));\n     tbiUpdateThread.start();\n-    shuttingDown = false;\n+    _shuttingDown = false;\n   }\n \n   @Override\n   public MessageHandler createHandler(Message message, NotificationContext context) {\n     String msgSubType = message.getMsgSubType();\n     switch (msgSubType) {\n       case TimeboundaryRefreshMessage.REFRESH_TIME_BOUNDARY_MSG_SUB_TYPE:\n-        LOGGER.info(\"time refresh msg received {} for table {}\", message.getPartitionName());\n+        LOGGER.info(\"time refresh msg received for table {}\", message.getPartitionName());", "originalCommit": "b6e49a0d50d49536f00676b19e225ea3d6ae3232", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MTE4Mw==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379591183", "bodyText": "Change this to warning, and print it in the default message handler, not here.", "author": "mcvsubbu", "createdAt": "2020-02-14T18:55:15Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -19,53 +19,65 @@\n package org.apache.pinot.broker.broker.helix;\n \n import java.util.Iterator;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.helix.NotificationContext;\n import org.apache.helix.messaging.handling.HelixTaskResult;\n import org.apache.helix.messaging.handling.MessageHandler;\n import org.apache.helix.messaging.handling.MessageHandlerFactory;\n import org.apache.helix.model.Message;\n+import org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager;\n import org.apache.pinot.broker.routing.HelixExternalViewBasedRouting;\n import org.apache.pinot.common.messages.TimeboundaryRefreshMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-// Handle the TimeboundaryRefresh message. The Timeboundary refresh requests are handled asynchronously: i.e., they are\n-// first put into a request map first. The map dedups requests by their tables thus multiple requests for the same\n+// Handle the broker message, like TimeboundaryRefresh and UpdateQueryQuota.\n+// The Timeboundary refresh requests are handled asynchronously: i.e., they are first put into a request map first.\n+// The map dedups requests by their tables thus multiple requests for the same\n // table only needs to be executed once. A background thread periodically checks the map and performs refreshing for\n // all the tables in the map.\n-public class TimeboundaryRefreshMessageHandlerFactory implements MessageHandlerFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TimeboundaryRefreshMessageHandlerFactory.class);\n+// The query quota update can be done synchronously, as the table config won't be changed frequently.\n+public class BrokerMessageHandlerFactory implements MessageHandlerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerMessageHandlerFactory.class);\n   private final HelixExternalViewBasedRouting _helixExternalViewBasedRouting;\n-  // A map to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n-  // Ideally a Hashset will suffice but Java util currently does not have Hashset.\n-  private static ConcurrentHashMap<String, Boolean> _tablesToRefreshmap = new ConcurrentHashMap<>();\n-  private boolean shuttingDown;\n+  private final HelixExternalViewBasedQueryQuotaManager _helixExternalViewBasedQueryQuotaManager;\n+  // A set to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n+  private static Set<String> _tablesToRefreshSet = ConcurrentHashMap.newKeySet();\n+  private boolean _shuttingDown;\n \n   /**\n    *\n    * @param helixExternalViewBasedRouting The underlying Routing object to execute TimeboundaryInfo refreshing.\n+   * @param helixExternalViewBasedQueryQuotaManager The underlying object to update rate limiter.\n    * @param sleepTimeInMilliseconds The sleep time for the background thread to execute TimeboundaryInfo refreshing.\n    */\n-  public TimeboundaryRefreshMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n-      long sleepTimeInMilliseconds) {\n+  public BrokerMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n+      HelixExternalViewBasedQueryQuotaManager helixExternalViewBasedQueryQuotaManager, long sleepTimeInMilliseconds) {\n     _helixExternalViewBasedRouting = helixExternalViewBasedRouting;\n+    _helixExternalViewBasedQueryQuotaManager = helixExternalViewBasedQueryQuotaManager;\n+\n     // Start a background thread to execute the TimeboundaryInfo update requests.\n     Thread tbiUpdateThread = new Thread(new TimeboundaryRefreshMessageExecutor(sleepTimeInMilliseconds));\n     tbiUpdateThread.start();\n-    shuttingDown = false;\n+    _shuttingDown = false;\n   }\n \n   @Override\n   public MessageHandler createHandler(Message message, NotificationContext context) {\n     String msgSubType = message.getMsgSubType();\n     switch (msgSubType) {\n       case TimeboundaryRefreshMessage.REFRESH_TIME_BOUNDARY_MSG_SUB_TYPE:\n-        LOGGER.info(\"time refresh msg received {} for table {}\", message.getPartitionName());\n+        LOGGER.info(\"time refresh msg received for table {}\", message.getPartitionName());\n         return new TimeboundaryRefreshMessageHandler(new TimeboundaryRefreshMessage(message), context);\n+      case TimeboundaryRefreshMessage.UPDATE_QUERY_QUOTA_MSG_SUB_TYPE:\n+        LOGGER.info(\"update query quota msg received for table {}\", message.getPartitionName());\n+        return new TableQueryQuotaUpdateMessageHandler(message, context);\n       default:\n-        throw new UnsupportedOperationException(\"Unsupported user defined message sub type: \" + msgSubType);\n+        LOGGER.error(\"Unsupported user defined message sub type: {} for table {}\", msgSubType,", "originalCommit": "b6e49a0d50d49536f00676b19e225ea3d6ae3232", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MzMwOA==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379593308", "bodyText": "Can we create a differnt message type instead of query quota update being a subtype of time boundary update message?", "author": "mcvsubbu", "createdAt": "2020-02-14T18:59:56Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -19,53 +19,65 @@\n package org.apache.pinot.broker.broker.helix;\n \n import java.util.Iterator;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.helix.NotificationContext;\n import org.apache.helix.messaging.handling.HelixTaskResult;\n import org.apache.helix.messaging.handling.MessageHandler;\n import org.apache.helix.messaging.handling.MessageHandlerFactory;\n import org.apache.helix.model.Message;\n+import org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager;\n import org.apache.pinot.broker.routing.HelixExternalViewBasedRouting;\n import org.apache.pinot.common.messages.TimeboundaryRefreshMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-// Handle the TimeboundaryRefresh message. The Timeboundary refresh requests are handled asynchronously: i.e., they are\n-// first put into a request map first. The map dedups requests by their tables thus multiple requests for the same\n+// Handle the broker message, like TimeboundaryRefresh and UpdateQueryQuota.\n+// The Timeboundary refresh requests are handled asynchronously: i.e., they are first put into a request map first.\n+// The map dedups requests by their tables thus multiple requests for the same\n // table only needs to be executed once. A background thread periodically checks the map and performs refreshing for\n // all the tables in the map.\n-public class TimeboundaryRefreshMessageHandlerFactory implements MessageHandlerFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TimeboundaryRefreshMessageHandlerFactory.class);\n+// The query quota update can be done synchronously, as the table config won't be changed frequently.\n+public class BrokerMessageHandlerFactory implements MessageHandlerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerMessageHandlerFactory.class);\n   private final HelixExternalViewBasedRouting _helixExternalViewBasedRouting;\n-  // A map to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n-  // Ideally a Hashset will suffice but Java util currently does not have Hashset.\n-  private static ConcurrentHashMap<String, Boolean> _tablesToRefreshmap = new ConcurrentHashMap<>();\n-  private boolean shuttingDown;\n+  private final HelixExternalViewBasedQueryQuotaManager _helixExternalViewBasedQueryQuotaManager;\n+  // A set to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n+  private static Set<String> _tablesToRefreshSet = ConcurrentHashMap.newKeySet();\n+  private boolean _shuttingDown;\n \n   /**\n    *\n    * @param helixExternalViewBasedRouting The underlying Routing object to execute TimeboundaryInfo refreshing.\n+   * @param helixExternalViewBasedQueryQuotaManager The underlying object to update rate limiter.\n    * @param sleepTimeInMilliseconds The sleep time for the background thread to execute TimeboundaryInfo refreshing.\n    */\n-  public TimeboundaryRefreshMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n-      long sleepTimeInMilliseconds) {\n+  public BrokerMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n+      HelixExternalViewBasedQueryQuotaManager helixExternalViewBasedQueryQuotaManager, long sleepTimeInMilliseconds) {\n     _helixExternalViewBasedRouting = helixExternalViewBasedRouting;\n+    _helixExternalViewBasedQueryQuotaManager = helixExternalViewBasedQueryQuotaManager;\n+\n     // Start a background thread to execute the TimeboundaryInfo update requests.\n     Thread tbiUpdateThread = new Thread(new TimeboundaryRefreshMessageExecutor(sleepTimeInMilliseconds));\n     tbiUpdateThread.start();\n-    shuttingDown = false;\n+    _shuttingDown = false;\n   }\n \n   @Override\n   public MessageHandler createHandler(Message message, NotificationContext context) {\n     String msgSubType = message.getMsgSubType();\n     switch (msgSubType) {\n       case TimeboundaryRefreshMessage.REFRESH_TIME_BOUNDARY_MSG_SUB_TYPE:\n-        LOGGER.info(\"time refresh msg received {} for table {}\", message.getPartitionName());\n+        LOGGER.info(\"time refresh msg received for table {}\", message.getPartitionName());\n         return new TimeboundaryRefreshMessageHandler(new TimeboundaryRefreshMessage(message), context);\n+      case TimeboundaryRefreshMessage.UPDATE_QUERY_QUOTA_MSG_SUB_TYPE:", "originalCommit": "b6e49a0d50d49536f00676b19e225ea3d6ae3232", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NDQ5OQ==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379594499", "bodyText": "Please declare a new message insetead of a subtype", "author": "mcvsubbu", "createdAt": "2020-02-14T19:02:45Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/messages/TimeboundaryRefreshMessage.java", "diffHunk": "@@ -26,6 +26,7 @@\n // A message intended for a pinot Broker to ask it to refresh its Timeboundary Info.\n public class TimeboundaryRefreshMessage extends Message {\n   public static final String REFRESH_TIME_BOUNDARY_MSG_SUB_TYPE = \"REFRESH_TIME_BOUNDARY\";\n+  public static final String UPDATE_QUERY_QUOTA_MSG_SUB_TYPE = \"UPDATE_QUERY_QUOTA\";", "originalCommit": "b6e49a0d50d49536f00676b19e225ea3d6ae3232", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NDcyMg==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379594722", "bodyText": "change this to warning and log it in the deafult message handler", "author": "mcvsubbu", "createdAt": "2020-02-14T19:03:17Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/SegmentMessageHandlerFactory.java", "diffHunk": "@@ -88,7 +88,9 @@ public MessageHandler createHandler(Message message, NotificationContext context\n       case SegmentReloadMessage.RELOAD_SEGMENT_MSG_SUB_TYPE:\n         return new SegmentReloadMessageHandler(new SegmentReloadMessage(message), _metrics, context);\n       default:\n-        throw new UnsupportedOperationException(\"Unsupported user defined message sub type: \" + msgSubType);\n+        LOGGER.error(\"Unsupported user defined message sub type: {} for segment: {}\", msgSubType,", "originalCommit": "b6e49a0d50d49536f00676b19e225ea3d6ae3232", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NzMzNw==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379597337", "bodyText": "you can check if we are shutting down, then dont handle this", "author": "mcvsubbu", "createdAt": "2020-02-14T19:09:27Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -80,26 +92,54 @@ public void reset() {\n   }\n \n   public void shutdown() {\n-    shuttingDown = true;\n+    _shuttingDown = true;\n   }\n \n-  private class TimeboundaryRefreshMessageHandler extends MessageHandler {\n-    private final String _tableNameWithType;\n-    private final Logger _logger;\n-\n-    public TimeboundaryRefreshMessageHandler(TimeboundaryRefreshMessage message, NotificationContext context) {\n+  private class TimeboundaryRefreshMessageHandler extends DefaultMessageHandler {\n+    TimeboundaryRefreshMessageHandler(Message message, NotificationContext context) {\n       super(message, context);\n-      // The partition name field stores the table name.\n-      _tableNameWithType = message.getPartitionName();\n-      _logger = LoggerFactory.getLogger(_tableNameWithType + \"-\" + TimeboundaryRefreshMessageHandler.class);\n     }\n \n     @Override\n     public HelixTaskResult handleMessage() {\n       HelixTaskResult result = new HelixTaskResult();\n       // Put the segment refresh request to a request queue instead of executing immediately. This will reduce the\n       // burst of requests when a large number of segments are updated in a short time span.\n-      _tablesToRefreshmap.put(_tableNameWithType, Boolean.TRUE);\n+      _tablesToRefreshSet.add(_tableNameWithType);\n+      result.setSuccess(true);\n+      return result;\n+    }\n+  }\n+\n+  private class TableQueryQuotaUpdateMessageHandler extends DefaultMessageHandler {\n+    TableQueryQuotaUpdateMessageHandler(Message message, NotificationContext context) {\n+      super(message, context);\n+    }\n+\n+    @Override\n+    public HelixTaskResult handleMessage() {\n+      HelixTaskResult result = new HelixTaskResult();\n+      _helixExternalViewBasedQueryQuotaManager.initOrUpdateTableQueryQuota(_tableNameWithType);", "originalCommit": "b6e49a0d50d49536f00676b19e225ea3d6ae3232", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNjg1OQ==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379636859", "bodyText": "Added this logic in createHandler method, and reused the default message Handler as the response if _isShuttingDown is true.", "author": "jackjlli", "createdAt": "2020-02-14T20:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NzMzNw=="}], "type": "inlineReview"}, {"oid": "418be91c2b6a74be654512a03b8dbaa3f731282f", "url": "https://github.com/apache/pinot/commit/418be91c2b6a74be654512a03b8dbaa3f731282f", "message": "Address PR comments", "committedDate": "2020-02-14T19:22:39Z", "type": "forcePushed"}, {"oid": "d66ac56bb01b32018ed87e433ba32399c1d3e611", "url": "https://github.com/apache/pinot/commit/d66ac56bb01b32018ed87e433ba32399c1d3e611", "message": "Address PR comments", "committedDate": "2020-02-14T20:47:58Z", "type": "forcePushed"}, {"oid": "330a83a1491e46a6dfb14ea1076c3f8441e24498", "url": "https://github.com/apache/pinot/commit/330a83a1491e46a6dfb14ea1076c3f8441e24498", "message": "Address PR comments", "committedDate": "2020-02-14T21:57:22Z", "type": "forcePushed"}, {"oid": "d07a0b41aee6ab681a31470ca5326d7683b17f99", "url": "https://github.com/apache/pinot/commit/d07a0b41aee6ab681a31470ca5326d7683b17f99", "message": "Refactor existing Message Handler to update query quota on broker", "committedDate": "2020-02-29T19:20:35Z", "type": "commit"}, {"oid": "f4c1a3a197cbdf9f4164491ff8d08d80afc42577", "url": "https://github.com/apache/pinot/commit/f4c1a3a197cbdf9f4164491ff8d08d80afc42577", "message": "Adjust behavior for unknown subtype message", "committedDate": "2020-02-29T19:21:38Z", "type": "commit"}, {"oid": "6d2e420adb037a532e4736c91299ab7b9076de11", "url": "https://github.com/apache/pinot/commit/6d2e420adb037a532e4736c91299ab7b9076de11", "message": "Address PR comments", "committedDate": "2020-02-29T19:24:26Z", "type": "commit"}, {"oid": "6c85da75184e54fbc01d0b78690c4e87671fd925", "url": "https://github.com/apache/pinot/commit/6c85da75184e54fbc01d0b78690c4e87671fd925", "message": "Rebase from master branch", "committedDate": "2020-02-29T19:41:47Z", "type": "commit"}, {"oid": "6c85da75184e54fbc01d0b78690c4e87671fd925", "url": "https://github.com/apache/pinot/commit/6c85da75184e54fbc01d0b78690c4e87671fd925", "message": "Rebase from master branch", "committedDate": "2020-02-29T19:41:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MzQyMg==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r386573422", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public BrokerUserDefineMessageHandlerFactory(RoutingManager routingManager,\n          \n          \n            \n              public BrokerUserDefinedMessageHandlerFactory(RoutingManager routingManager,", "author": "mcvsubbu", "createdAt": "2020-03-02T18:36:21Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerUserDefineMessageHandlerFactory.java", "diffHunk": "@@ -40,9 +42,12 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(BrokerUserDefineMessageHandlerFactory.class);\n \n   private final RoutingManager _routingManager;\n+  private final HelixExternalViewBasedQueryQuotaManager _queryQuotaManager;\n \n-  public BrokerUserDefineMessageHandlerFactory(RoutingManager routingManager) {\n+  public BrokerUserDefineMessageHandlerFactory(RoutingManager routingManager,", "originalCommit": "6c85da75184e54fbc01d0b78690c4e87671fd925", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NTMwOA==", "url": "https://github.com/apache/pinot/pull/5066#discussion_r386595308", "bodyText": "Updated.", "author": "jackjlli", "createdAt": "2020-03-02T19:16:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MzQyMg=="}], "type": "inlineReview"}, {"oid": "13d426336eeef1db3bf37c1f2e049ca26160bc6d", "url": "https://github.com/apache/pinot/commit/13d426336eeef1db3bf37c1f2e049ca26160bc6d", "message": "Address PR comments", "committedDate": "2020-03-02T19:15:55Z", "type": "commit"}]}