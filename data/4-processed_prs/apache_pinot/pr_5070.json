{"pr_number": 5070, "pr_title": "Support non-literal expressions for right-side operand in predicate comparison", "pr_createdAt": "2020-02-14T09:53:39Z", "pr_url": "https://github.com/apache/pinot/pull/5070", "timeline": [{"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761", "url": "https://github.com/apache/pinot/commit/557ad7c290ce926e7af1ac356494f10cdf4c6761", "message": "Adding more sql tests", "committedDate": "2020-02-15T09:27:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjYxOQ==", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384116619", "bodyText": "Should opposite of GREATER_THAN be LESS_THAN_OR_EQUAL?", "author": "mayankshriv", "createdAt": "2020-02-25T20:46:51Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -289,6 +289,91 @@ private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     return pinotQuery;\n   }\n \n+  // This method converts a predicate expression to the what Pinot could evaluate.\n+  // For comparison expression, left operand could be any expression, but right operand only\n+  // supports literal.\n+  // E.g. 'WHERE a > b' will be updated to 'WHERE a - b > 0'\n+  private static Expression updateComparisonPredicate(Expression expression) {\n+    Function functionCall = expression.getFunctionCall();\n+    if (functionCall != null) {\n+      SqlKind sqlKind = SqlKind.OTHER_FUNCTION;\n+      try {\n+        sqlKind = SqlKind.valueOf(functionCall.getOperator().toUpperCase());\n+      } catch (Exception e) {\n+        // Do nothing\n+      }\n+      switch (sqlKind) {\n+        case EQUALS:\n+        case NOT_EQUALS:\n+        case GREATER_THAN:\n+        case GREATER_THAN_OR_EQUAL:\n+        case LESS_THAN:\n+        case LESS_THAN_OR_EQUAL:\n+          // Handle predicate like 'WHERE 10=a'\n+          if (functionCall.getOperands().get(0).getLiteral() != null) {\n+            functionCall.setOperator(getOppositeOperator(functionCall.getOperator()));\n+            List<Expression> oldOperands = functionCall.getOperands();\n+            Expression tempExpr = oldOperands.get(0);\n+            oldOperands.set(0, oldOperands.get(1));\n+            oldOperands.set(1, tempExpr);\n+          }\n+          if (functionCall.getOperands().get(1).getLiteral() != null) {\n+            return expression;\n+          }\n+          Expression comparisonFunction = RequestUtils.getFunctionExpression(functionCall.getOperator());\n+          List<Expression> exprList = new ArrayList<>();\n+          exprList.add(getLeftOperand(functionCall));\n+          exprList.add(RequestUtils.getLiteralExpression(0));\n+          comparisonFunction.getFunctionCall().setOperands(exprList);\n+          return comparisonFunction;\n+        default:\n+          List<Expression> operands = functionCall.getOperands();\n+          List<Expression> newOperands = new ArrayList<>();\n+          for (int i = 0; i < operands.size(); i++) {\n+            newOperands.add(updateComparisonPredicate(operands.get(i)));\n+          }\n+          functionCall.setOperands(newOperands);\n+      }\n+    }\n+    return expression;\n+  }\n+\n+  private static String getOppositeOperator(String operator) {\n+    switch (operator.toUpperCase()) {\n+      case \"GREATER_THAN\":", "originalCommit": "557ad7c290ce926e7af1ac356494f10cdf4c6761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1OTQ1Nw==", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384159457", "bodyText": "This is to handle expression of 0 < b to b > 0. Will add comments to this.", "author": "xiangfu0", "createdAt": "2020-02-25T22:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNzE1NQ==", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384117155", "bodyText": "Probably better to model this as a query re-write phase, so all re-writes can be done in a standardized way?", "author": "mayankshriv", "createdAt": "2020-02-25T20:47:56Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -289,6 +289,91 @@ private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     return pinotQuery;\n   }\n \n+  // This method converts a predicate expression to the what Pinot could evaluate.\n+  // For comparison expression, left operand could be any expression, but right operand only\n+  // supports literal.\n+  // E.g. 'WHERE a > b' will be updated to 'WHERE a - b > 0'\n+  private static Expression updateComparisonPredicate(Expression expression) {", "originalCommit": "557ad7c290ce926e7af1ac356494f10cdf4c6761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTIzNw==", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384169237", "bodyText": "Adding a queryRewrite method, also moved alias map into it.", "author": "xiangfu0", "createdAt": "2020-02-25T22:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNzE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMzc5NQ==", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384123795", "bodyText": "Does the code handle more complex expressions such as foo1(bar1(a-b)) <= foo2(bar2(c/d-e)? If so, let's add tests for those. If not, what's the plan there? Would it ever support those cases?", "author": "mayankshriv", "createdAt": "2020-02-25T21:02:05Z", "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -118,6 +118,56 @@ public void testFilterCaluses() {\n     Assert.assertEquals(func.getOperands().get(4).getLiteral().getLongValue(), 17L);\n   }\n \n+  @Test\n+  public void testFilterCalusesWithRightExpression() {\n+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where a > b\");\n+    Function func = pinotQuery.getFilterExpression().getFunctionCall();\n+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), \"MINUS\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"a\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), \"b\");\n+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 0L);\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where 0 < a-b\");\n+    func = pinotQuery.getFilterExpression().getFunctionCall();\n+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), \"MINUS\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"a\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), \"b\");\n+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 0L);\n+\n+\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where b < 100 + c\");", "originalCommit": "557ad7c290ce926e7af1ac356494f10cdf4c6761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTQzMg==", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384165432", "bodyText": "This will be supported as foo1(bar1(a-b)) - foo2(bar2(c/d-e)) <= 0.\nWill add a test case for this.", "author": "xiangfu0", "createdAt": "2020-02-25T22:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMzc5NQ=="}], "type": "inlineReview"}, {"oid": "9f44cab6bcba490a269e1cee2fc90642181f32ff", "url": "https://github.com/apache/pinot/commit/9f44cab6bcba490a269e1cee2fc90642181f32ff", "message": "Update predicate expression", "committedDate": "2020-02-25T22:36:46Z", "type": "commit"}, {"oid": "fd9b886cf2e4e7032a8ac533af977d13135ae801", "url": "https://github.com/apache/pinot/commit/fd9b886cf2e4e7032a8ac533af977d13135ae801", "message": "Support non-literal expression in right side of comparison operators", "committedDate": "2020-02-25T22:36:46Z", "type": "commit"}, {"oid": "b0f6ec0f04918ca168ab6975297e188d1baa5192", "url": "https://github.com/apache/pinot/commit/b0f6ec0f04918ca168ab6975297e188d1baa5192", "message": "Support case like WHERE 0=b", "committedDate": "2020-02-25T22:36:46Z", "type": "commit"}, {"oid": "65cac915407fc69af0ad425aca9f83c3312ce9ef", "url": "https://github.com/apache/pinot/commit/65cac915407fc69af0ad425aca9f83c3312ce9ef", "message": "Adding more sql tests", "committedDate": "2020-02-25T22:36:46Z", "type": "commit"}, {"oid": "b85abfd6e793f29be49a7a6ccf03d857e17340b8", "url": "https://github.com/apache/pinot/commit/b85abfd6e793f29be49a7a6ccf03d857e17340b8", "message": "Address comments", "committedDate": "2020-02-25T22:36:46Z", "type": "commit"}, {"oid": "b85abfd6e793f29be49a7a6ccf03d857e17340b8", "url": "https://github.com/apache/pinot/commit/b85abfd6e793f29be49a7a6ccf03d857e17340b8", "message": "Address comments", "committedDate": "2020-02-25T22:36:46Z", "type": "forcePushed"}]}