{"pr_number": 6333, "pr_title": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table\u2026", "pr_createdAt": "2020-12-08T08:13:22Z", "pr_url": "https://github.com/apache/pinot/pull/6333", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MjgyNA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r538752824", "bodyText": "So the funnel table shows up when the forecast is selected, correct?", "author": "jihaozh", "createdAt": "2020-12-08T19:38:51Z", "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -65,10 +55,29 @@ export default Component.extend({\n    */\n   onSelection: null, // function (Set, state)\n \n+  context: null,\n+\n+  compareMode: null, // \"\"\n+\n+  didReceiveAttrs() {\n+    const context = get(this, 'context');\n+\n+    set(this, 'compareMode', (context || {}).compareMode);\n+  },\n+\n   //\n   // internal properties\n   //\n \n+  /**\n+   * Columns for metrics table\n+   * @type Object[]\n+   */\n+  metricsTableColumns: computed('compareMode', function () {\n+    const compareMode = get(this, 'compareMode');\n+    return compareMode === 'forecast' ? METRIC_FUNNEL_COLUMNS : METRICS_TABLE_COLUMNS;", "originalCommit": "129ecb6451a2737fb68f9f1f3307f08f0e705729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0NjU0Nw==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r541846547", "bodyText": "Yes, but only if the user clicks on the Metrics tab.  Do we want it to automatically select the Metrics table when the user selects forecast?", "author": "harleyjj", "createdAt": "2020-12-13T05:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MjgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1OTU1Mw==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r538759553", "bodyText": "Will the upper and lower make separate calls to get the boundary values? I would prefer to make the boundary values be returned with the forecast values in one call because they are generated by the forecast provider together. I think it is quite expensive to run it 3 times.", "author": "jihaozh", "createdAt": "2020-12-08T19:49:41Z", "path": "thirdeye/thirdeye-frontend/app/pods/rootcause/controller.js", "diffHunk": "@@ -305,140 +306,153 @@ export default Controller.extend({\n    * callgraph:        service call graph edges as ranked by the backend\n    *                   (typically displayed in call graph table)\n    */\n-  _contextObserver: observer(\n-    'context',\n-    'entities',\n-    'selectedUrns',\n-    'sizeMetricUrns',\n-    'activeTab',\n-    function () {\n-      const { context, selectedUrns, sizeMetricUrns, entitiesService, timeseriesService, aggregatesService, breakdownsService, scoresService, anomalyFunctionService, callgraphService, activeTab, setupMode } =\n-        getProperties(this, 'context', 'selectedUrns', 'sizeMetricUrns', 'entitiesService', 'timeseriesService', 'aggregatesService', 'breakdownsService', 'scoresService', 'anomalyFunctionService', 'callgraphService', 'activeTab', 'setupMode');\n-      if (!context || !selectedUrns) {\n-        return;\n-      }\n-\n-      if (setupMode === ROOTCAUSE_SETUP_MODE_CONTEXT) {\n-        return;\n-      }\n-\n-      //\n-      // entities\n-      //\n-      const entitiesUrns = new Set([...selectedUrns, ...context.urns, ...context.anomalyUrns]);\n-      entitiesService.request(context, entitiesUrns);\n-\n-      //\n-      // related metrics\n-      //\n-      const anomalyMetricUrns = new Set();\n-      const relatedMetricUrns = new Set();\n-\n-      if (activeTab === ROOTCAUSE_TAB_METRICS\n-          || activeTab === ROOTCAUSE_TAB_TREND) {\n-        const entities = get(this, 'entitiesService.entities'); // cache may be stale, fetch directly\n-        filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach(urn => relatedMetricUrns.add(urn));\n-      }\n+  _contextObserver: observer('context', 'entities', 'selectedUrns', 'sizeMetricUrns', 'activeTab', function () {\n+    const {\n+      context,\n+      selectedUrns,\n+      sizeMetricUrns,\n+      entitiesService,\n+      timeseriesService,\n+      aggregatesService,\n+      breakdownsService,\n+      scoresService,\n+      anomalyFunctionService,\n+      callgraphService,\n+      activeTab,\n+      setupMode\n+    } = getProperties(\n+      this,\n+      'context',\n+      'selectedUrns',\n+      'sizeMetricUrns',\n+      'entitiesService',\n+      'timeseriesService',\n+      'aggregatesService',\n+      'breakdownsService',\n+      'scoresService',\n+      'anomalyFunctionService',\n+      'callgraphService',\n+      'activeTab',\n+      'setupMode'\n+    );\n+    if (!context || !selectedUrns) {\n+      return;\n+    }\n \n-      if (context.anomalyUrns.size > 0) {\n-        filterPrefix(context.anomalyUrns, 'thirdeye:metric:').forEach(urn => anomalyMetricUrns.add(urn));\n-      }\n+    if (setupMode === ROOTCAUSE_SETUP_MODE_CONTEXT) {\n+      return;\n+    }\n \n-      //\n-      // timeseries\n-      //\n-      const timeseriesUrns = new Set(selectedUrns);\n+    //\n+    // entities\n+    //\n+    const entitiesUrns = new Set([...selectedUrns, ...context.urns, ...context.anomalyUrns]);\n+    entitiesService.request(context, entitiesUrns);\n+\n+    //\n+    // related metrics\n+    //\n+    const anomalyMetricUrns = new Set();\n+    const relatedMetricUrns = new Set();\n+\n+    if (activeTab === ROOTCAUSE_TAB_METRICS || activeTab === ROOTCAUSE_TAB_TREND) {\n+      const entities = get(this, 'entitiesService.entities'); // cache may be stale, fetch directly\n+      filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach((urn) => relatedMetricUrns.add(urn));\n+    }\n \n-      if (activeTab === ROOTCAUSE_TAB_TREND) {\n-        [...relatedMetricUrns].forEach(urn => {\n-          timeseriesUrns.add(toCurrentUrn(urn));\n-          timeseriesUrns.add(toBaselineUrn(urn));\n-        });\n-      }\n+    if (context.anomalyUrns.size > 0) {\n+      filterPrefix(context.anomalyUrns, 'thirdeye:metric:').forEach((urn) => anomalyMetricUrns.add(urn));\n+    }\n \n-      timeseriesService.request(context, timeseriesUrns);\n-\n-      //\n-      // anomaly function baselines\n-      //\n-      const anomalyFunctionUrns = filterPrefix(context.anomalyUrns, 'thirdeye:event:anomaly');\n-      anomalyFunctionService.request(context, new Set(anomalyFunctionUrns));\n-\n-      //\n-      // breakdowns\n-      //\n-      if (activeTab === ROOTCAUSE_TAB_DIMENSIONS) {\n-        const metricUrns = new Set(filterPrefix(context.urns, 'thirdeye:metric:'));\n-        const currentUrns = [...metricUrns].map(toCurrentUrn);\n-        const baselineUrns = [...metricUrns].map(toBaselineUrn);\n-        const sizeMetricCurrentUrns = [...sizeMetricUrns].map(toCurrentUrn);\n-        breakdownsService.request(context, new Set(currentUrns.concat(baselineUrns).concat(sizeMetricCurrentUrns)));\n-      }\n+    //\n+    // timeseries\n+    //\n+    const timeseriesUrns = new Set(selectedUrns);\n \n-      //\n-      // scores\n-      //\n-      if (activeTab === ROOTCAUSE_TAB_METRICS) {\n-        const scoresUrns = new Set(relatedMetricUrns);\n-        scoresService.request(context, new Set(scoresUrns));\n-      }\n+    if (activeTab === ROOTCAUSE_TAB_TREND) {\n+      [...relatedMetricUrns].forEach((urn) => {\n+        timeseriesUrns.add(toCurrentUrn(urn));\n+        timeseriesUrns.add(toBaselineUrn(urn));\n+      });\n+    }\n \n-      //\n-      // aggregates\n-      //\n-      const offsets = ['current', 'baseline', 'wo1w', 'wo2w'];\n-      const offsetUrns = [...relatedMetricUrns]\n-        .map(urn => [].concat(offsets.map(offset => toOffsetUrn(urn, offset))))\n-        .reduce((agg, l) => agg.concat(l), []);\n-\n-      const anomalyOffsets = ['current', 'baseline', 'wo1w', 'wo2w', 'wo3w', 'wo4w'];\n-      const anomalyOffsetUrns = [...anomalyMetricUrns]\n-        .map(urn => [].concat(anomalyOffsets.map(offset => toOffsetUrn(urn, offset))))\n-        .reduce((agg, l) => agg.concat(l), []);\n-\n-      //\n-      // call graph\n-      //\n-      if (activeTab === ROOTCAUSE_SERVICE_CALLGRAPH) {\n-        callgraphService.request(context, [...context.urns]);\n-      }\n+    timeseriesService.request(context, timeseriesUrns);\n+\n+    //\n+    // anomaly function baselines\n+    //\n+    const anomalyFunctionUrns = filterPrefix(context.anomalyUrns, 'thirdeye:event:anomaly');\n+    anomalyFunctionService.request(context, new Set(anomalyFunctionUrns));\n+\n+    //\n+    // breakdowns\n+    //\n+    if (activeTab === ROOTCAUSE_TAB_DIMENSIONS) {\n+      const metricUrns = new Set(filterPrefix(context.urns, 'thirdeye:metric:'));\n+      const currentUrns = [...metricUrns].map(toCurrentUrn);\n+      const baselineUrns = [...metricUrns].map(toBaselineUrn);\n+      const sizeMetricCurrentUrns = [...sizeMetricUrns].map(toCurrentUrn);\n+      breakdownsService.request(context, new Set(currentUrns.concat(baselineUrns).concat(sizeMetricCurrentUrns)));\n+    }\n \n-      aggregatesService.request(context, new Set([...offsetUrns, ...anomalyOffsetUrns]));\n+    //\n+    // scores\n+    //\n+    if (activeTab === ROOTCAUSE_TAB_METRICS) {\n+      const scoresUrns = new Set(relatedMetricUrns);\n+      scoresService.request(context, new Set(scoresUrns));\n+    }\n \n+    //\n+    // aggregates\n+    //\n+    const offsets =\n+      context.compareMode === 'forecast'\n+        ? ['current', 'baseline', 'yoy', 'upper', 'lower']", "originalCommit": "129ecb6451a2737fb68f9f1f3307f08f0e705729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0Njg4Mg==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r541846882", "bodyText": "Yes, the endpoint should grab all three values at once.  I wanted to send them to the frontend in this format to stay consistent with how the metric table currently receives its values.", "author": "harleyjj", "createdAt": "2020-12-13T05:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1OTU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NzE1NA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r555577154", "bodyText": "The implementation is in this PR: #6432", "author": "harleyjj", "createdAt": "2021-01-12T08:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1OTU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzOTc5NA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r538839794", "bodyText": "This comparison is happening twice in this file; so it would be better to constantize forecast so any change to the string need to happen just once.\nconst FORECAST_MODE = 'forecast'", "author": "tejasajmera", "createdAt": "2020-12-08T22:01:08Z", "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -82,74 +91,91 @@ export default Component.extend({\n    *  ]\n    * }\n    */\n-  links: computed(\n-    'entities',\n-    function() {\n-      const { entities } = getProperties(this, 'entities');\n-      let metricUrlMapping = {};\n-\n-      filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .forEach(urn => {\n-          const attributes = entities[urn].attributes;\n-          const { externalUrls = [] } = attributes;\n-          let urlArr = [];\n-\n-          // Add the list of urls for each url type\n-          externalUrls.forEach(urlLabel => {\n-            urlArr.push({\n-              [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n-            });\n-          });\n-\n-          // Map all the url lists to a metric urn\n-          metricUrlMapping[urn] = urlArr;\n+  links: computed('entities', function () {\n+    const { entities } = getProperties(this, 'entities');\n+    let metricUrlMapping = {};\n+\n+    filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach((urn) => {\n+      const attributes = entities[urn].attributes;\n+      const { externalUrls = [] } = attributes;\n+      let urlArr = [];\n+\n+      // Add the list of urls for each url type\n+      externalUrls.forEach((urlLabel) => {\n+        urlArr.push({\n+          [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n         });\n+      });\n \n-      return metricUrlMapping;\n-    }\n-  ),\n+      // Map all the url lists to a metric urn\n+      metricUrlMapping[urn] = urlArr;\n+    });\n+\n+    return metricUrlMapping;\n+  }),\n \n   /**\n    * Data for metrics table\n    * @type Object[] - array of objects, each corresponding to a row in the table\n    */\n-  metricsTableData: computed(\n-    'selectedUrns',\n-    'entities',\n-    'aggregates',\n-    'scores',\n-    'links',\n-    function() {\n-      const { selectedUrns, entities, aggregates, scores, links } =\n-        getProperties(this, 'selectedUrns', 'entities', 'aggregates', 'scores', 'links');\n-\n-      const rows = filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .map(urn => {\n-          return {\n-            urn,\n-            links: links[urn],\n-            isSelected: selectedUrns.has(urn),\n-            label: toMetricLabel(urn, entities),\n-            dataset: toMetricDataset(urn, entities),\n-            score: humanizeScore(scores[urn]),\n-            current: this._makeRecord(urn, 'current', entities, aggregates),\n-            baseline: this._makeRecord(urn, 'baseline', entities, aggregates),\n-            wo1w: this._makeRecord(urn, 'wo1w', entities, aggregates),\n-            wo2w: this._makeRecord(urn, 'wo2w', entities, aggregates),\n-            sortable_current: this._makeChange(urn, 'current', aggregates),\n-            sortable_baseline: this._makeChange(urn, 'baseline', aggregates),\n-            sortable_wo1w: this._makeChange(urn, 'wo1w', aggregates),\n-            sortable_wo2w: this._makeChange(urn, 'wo2w', aggregates),\n-            isExclusionWarning: isExclusionWarning(urn, entities)\n-          };\n-        });\n+  metricsTableData: computed('selectedUrns', 'entities', 'aggregates', 'scores', 'links', 'compareMode', function () {\n+    const { selectedUrns, entities, aggregates, scores, links, compareMode } = getProperties(\n+      this,\n+      'selectedUrns',\n+      'entities',\n+      'aggregates',\n+      'scores',\n+      'links',\n+      'compareMode'\n+    );\n+    let rows;\n \n-      return _.sortBy(rows, (row) => row.label);\n+    if (compareMode === 'forecast') {", "originalCommit": "129ecb6451a2737fb68f9f1f3307f08f0e705729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0NDI4NQ==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r538844285", "bodyText": "urn, isSelected, label, dataset, score, current, baseline, isExclusionWarning properties are same in both the if and else sections. Lets pull those out into a common object before the if..else and destructure that object in return in both if..else before proceeding to add unique properties in each.", "author": "tejasajmera", "createdAt": "2020-12-08T22:08:38Z", "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -82,74 +91,91 @@ export default Component.extend({\n    *  ]\n    * }\n    */\n-  links: computed(\n-    'entities',\n-    function() {\n-      const { entities } = getProperties(this, 'entities');\n-      let metricUrlMapping = {};\n-\n-      filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .forEach(urn => {\n-          const attributes = entities[urn].attributes;\n-          const { externalUrls = [] } = attributes;\n-          let urlArr = [];\n-\n-          // Add the list of urls for each url type\n-          externalUrls.forEach(urlLabel => {\n-            urlArr.push({\n-              [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n-            });\n-          });\n-\n-          // Map all the url lists to a metric urn\n-          metricUrlMapping[urn] = urlArr;\n+  links: computed('entities', function () {\n+    const { entities } = getProperties(this, 'entities');\n+    let metricUrlMapping = {};\n+\n+    filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach((urn) => {\n+      const attributes = entities[urn].attributes;\n+      const { externalUrls = [] } = attributes;\n+      let urlArr = [];\n+\n+      // Add the list of urls for each url type\n+      externalUrls.forEach((urlLabel) => {\n+        urlArr.push({\n+          [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n         });\n+      });\n \n-      return metricUrlMapping;\n-    }\n-  ),\n+      // Map all the url lists to a metric urn\n+      metricUrlMapping[urn] = urlArr;\n+    });\n+\n+    return metricUrlMapping;\n+  }),\n \n   /**\n    * Data for metrics table\n    * @type Object[] - array of objects, each corresponding to a row in the table\n    */\n-  metricsTableData: computed(\n-    'selectedUrns',\n-    'entities',\n-    'aggregates',\n-    'scores',\n-    'links',\n-    function() {\n-      const { selectedUrns, entities, aggregates, scores, links } =\n-        getProperties(this, 'selectedUrns', 'entities', 'aggregates', 'scores', 'links');\n-\n-      const rows = filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .map(urn => {\n-          return {\n-            urn,\n-            links: links[urn],\n-            isSelected: selectedUrns.has(urn),\n-            label: toMetricLabel(urn, entities),\n-            dataset: toMetricDataset(urn, entities),\n-            score: humanizeScore(scores[urn]),\n-            current: this._makeRecord(urn, 'current', entities, aggregates),\n-            baseline: this._makeRecord(urn, 'baseline', entities, aggregates),\n-            wo1w: this._makeRecord(urn, 'wo1w', entities, aggregates),\n-            wo2w: this._makeRecord(urn, 'wo2w', entities, aggregates),\n-            sortable_current: this._makeChange(urn, 'current', aggregates),\n-            sortable_baseline: this._makeChange(urn, 'baseline', aggregates),\n-            sortable_wo1w: this._makeChange(urn, 'wo1w', aggregates),\n-            sortable_wo2w: this._makeChange(urn, 'wo2w', aggregates),\n-            isExclusionWarning: isExclusionWarning(urn, entities)\n-          };\n-        });\n+  metricsTableData: computed('selectedUrns', 'entities', 'aggregates', 'scores', 'links', 'compareMode', function () {\n+    const { selectedUrns, entities, aggregates, scores, links, compareMode } = getProperties(\n+      this,\n+      'selectedUrns',\n+      'entities',\n+      'aggregates',\n+      'scores',\n+      'links',\n+      'compareMode'\n+    );\n+    let rows;\n \n-      return _.sortBy(rows, (row) => row.label);\n+    if (compareMode === 'forecast') {\n+      rows = filterPrefix(Object.keys(entities), 'thirdeye:metric:').map((urn) => {\n+        return {\n+          urn,\n+          isSelected: selectedUrns.has(urn),\n+          label: toMetricLabel(urn, entities),\n+          dataset: toMetricDataset(urn, entities),\n+          score: humanizeScore(scores[urn]),\n+          current: this._makeRecord(urn, 'current', entities, aggregates),\n+          baseline: this._makeRecord(urn, 'baseline', entities, aggregates),\n+          yoy: this._makeRecord(urn, 'yoy', entities, aggregates),\n+          interval: this._makeIntervalString(urn, aggregates),\n+          inInterval: this._isInInterval(urn, aggregates),\n+          sortable_current: this._makeChange(urn, 'current', aggregates),\n+          sortable_baseline: this._makeChange(urn, 'baseline', aggregates),\n+          sortable_yoy: this._makeChange(urn, 'yoy', aggregates),\n+          isExclusionWarning: isExclusionWarning(urn, entities)\n+        };\n+      });\n+    } else {\n+      rows = filterPrefix(Object.keys(entities), 'thirdeye:metric:').map((urn) => {\n+        return {\n+          urn,\n+          links: links[urn],\n+          isSelected: selectedUrns.has(urn),\n+          label: toMetricLabel(urn, entities),\n+          dataset: toMetricDataset(urn, entities),\n+          score: humanizeScore(scores[urn]),\n+          current: this._makeRecord(urn, 'current', entities, aggregates),\n+          baseline: this._makeRecord(urn, 'baseline', entities, aggregates),", "originalCommit": "129ecb6451a2737fb68f9f1f3307f08f0e705729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0ODg2NA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r541848864", "bodyText": "I'm not sure about this approach, since we are iterating through keys and building rows based on the keys.  Wouldn't this be adding a lot of computational steps?", "author": "harleyjj", "createdAt": "2020-12-13T05:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0NDI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzMDY5MA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r542630690", "bodyText": "Actually yes, I misunderstood. I agree we should keep it they way it is.", "author": "tejasajmera", "createdAt": "2020-12-14T18:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0NDI4NQ=="}], "type": "inlineReview"}, {"oid": "6cf391f723c04199cfbe8aeb3a866feac72d44d1", "url": "https://github.com/apache/pinot/commit/6cf391f723c04199cfbe8aeb3a866feac72d44d1", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected", "committedDate": "2020-12-13T05:26:23Z", "type": "forcePushed"}, {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf", "url": "https://github.com/apache/pinot/commit/1491808290da8a5c111b59b145c0f443c28b4aaf", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected", "committedDate": "2021-01-12T08:00:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4NzE2MA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556187160", "bodyText": "It is better to add the type to avoid the type issue.", "author": "zhangloo333", "createdAt": "2021-01-13T00:36:54Z", "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -65,10 +56,29 @@ export default Component.extend({\n    */\n   onSelection: null, // function (Set, state)\n \n+  context: null,\n+\n+  compareMode: null, // \"\"", "originalCommit": "1491808290da8a5c111b59b145c0f443c28b4aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1MDQ3MA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556250470", "bodyText": "So I get these warnings if I change them to objects.  They are supposed to be passed in by the parent.  What do you recommend?", "author": "harleyjj", "createdAt": "2021-01-13T04:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4NzE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcwMTI3MQ==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556701271", "bodyText": "We can keep null or undefined because of the warning. I suggest adding the comment for those variables to state the variable expected type.", "author": "zhangloo333", "createdAt": "2021-01-13T17:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4NzE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4ODEyOQ==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556188129", "bodyText": "This seems like a map function.\nconst urlArr = externalUrls.map((urlLabel)=>{return [urlLabel]: attributes[urlLabel][0]})", "author": "zhangloo333", "createdAt": "2021-01-13T00:39:51Z", "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -82,74 +92,91 @@ export default Component.extend({\n    *  ]\n    * }\n    */\n-  links: computed(\n-    'entities',\n-    function() {\n-      const { entities } = getProperties(this, 'entities');\n-      let metricUrlMapping = {};\n-\n-      filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .forEach(urn => {\n-          const attributes = entities[urn].attributes;\n-          const { externalUrls = [] } = attributes;\n-          let urlArr = [];\n-\n-          // Add the list of urls for each url type\n-          externalUrls.forEach(urlLabel => {\n-            urlArr.push({\n-              [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n-            });\n-          });\n-\n-          // Map all the url lists to a metric urn\n-          metricUrlMapping[urn] = urlArr;\n+  links: computed('entities', function () {\n+    const { entities } = getProperties(this, 'entities');\n+    let metricUrlMapping = {};\n+\n+    filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach((urn) => {\n+      const attributes = entities[urn].attributes;\n+      const { externalUrls = [] } = attributes;\n+      let urlArr = [];\n+\n+      // Add the list of urls for each url type\n+      externalUrls.forEach((urlLabel) => {\n+        urlArr.push({\n+          [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n         });\n+      });", "originalCommit": "1491808290da8a5c111b59b145c0f443c28b4aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4OTIyMg==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556189222", "bodyText": "it's better to add TODO and Jira Ticket to trace.", "author": "zhangloo333", "createdAt": "2021-01-13T00:43:09Z", "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -189,10 +251,10 @@ export default Component.extend({\n    * @type {Array}\n    */\n   preselectedItems: computed({\n-    get () {\n+    get() {\n       return [];\n     },\n-    set () {\n+    set() {\n       // ignore\n     }\n   }),", "originalCommit": "1491808290da8a5c111b59b145c0f443c28b4aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIzMzIyMQ==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556233221", "bodyText": "This is a prettify of old code.  I'm not sure what TODO would go here", "author": "harleyjj", "createdAt": "2021-01-13T03:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4OTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcwNTMyMA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556705320", "bodyText": "We can refactor later.\nFrom the codebase, there are no dependent properties on the computed property. It's not appropriate here. we can be refactored when we migrate the code to the new codebase.\npreselectedItems: computed({\n    get () { return [];},\n    set () {// ignore}\n }),", "author": "zhangloo333", "createdAt": "2021-01-13T17:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4OTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjczMjkyMw==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556732923", "bodyText": "If nothing is using this property, I'll go ahead and delete it.", "author": "harleyjj", "createdAt": "2021-01-13T18:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4OTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc0MzQ4MQ==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556743481", "bodyText": "The property gets passed down, so I believe it is being used.  It seems it was done to address a bug.  I'd better leave it.  fb3c74d", "author": "harleyjj", "createdAt": "2021-01-13T18:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4OTIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4OTk3OA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556189978", "bodyText": "You can optimize the code.\nif(_.isEmpty(e.selectedItems) || !onSelection) return", "author": "zhangloo333", "createdAt": "2021-01-13T00:45:31Z", "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -203,17 +265,21 @@ export default Component.extend({\n      * Updates the currently selected urns based on user selection on the table\n      * @param {Object} e\n      */\n-    displayDataChanged (e) {\n-      if (_.isEmpty(e.selectedItems)) { return; }\n+    displayDataChanged(e) {\n+      if (_.isEmpty(e.selectedItems)) {\n+        return;\n+      }\n \n       const { selectedUrns, onSelection } = getProperties(this, 'selectedUrns', 'onSelection');\n \n-      if (!onSelection) { return; }\n+      if (!onSelection) {\n+        return;\n+      }", "originalCommit": "1491808290da8a5c111b59b145c0f443c28b4aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MDY2OQ==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556190669", "bodyText": "Why not give aggregates value of {} property level?", "author": "zhangloo333", "createdAt": "2021-01-13T00:47:44Z", "path": "thirdeye/thirdeye-frontend/app/pods/services/rootcause-aggregates-cache/service.js", "diffHunk": "@@ -28,7 +23,7 @@ export default Service.extend({\n \n   init() {\n     this._super(...arguments);\n-    this.setProperties({aggregates: {}, context: {}, pending: new Set(), errors: new Set()});\n+    this.setProperties({ aggregates: {}, context: {}, pending: new Set(), errors: new Set() });", "originalCommit": "1491808290da8a5c111b59b145c0f443c28b4aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIzNDIwNQ==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556234205", "bodyText": "This is a prettify of older code that I didn't write.  Are you thinking it needs to be refactored?", "author": "harleyjj", "createdAt": "2021-01-13T03:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MDY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcwNTU5Mw==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556705593", "bodyText": "we can refactor when we migrate code.", "author": "zhangloo333", "createdAt": "2021-01-13T17:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MDY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjczMjQxNA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556732414", "bodyText": "I'll leave this one for later consideration.  It seems good for now.", "author": "harleyjj", "createdAt": "2021-01-13T18:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MDY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MTcxNQ==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556191715", "bodyText": "Why use two maps function here? One map could finish the result and will increase efficiency.", "author": "zhangloo333", "createdAt": "2021-01-13T00:51:02Z", "path": "thirdeye/thirdeye-frontend/app/pods/services/rootcause-aggregates-cache/service.js", "diffHunk": "@@ -68,34 +67,34 @@ export default Service.extend({\n \n     // group by metrics and offsets\n     const groupedByUrn = [...missing]\n-      .map(urn => toAbsoluteUrn(urn, requestContext.compareMode))\n-      .map(urn => { return { urn, base: toMetricUrn(urn), offset: urn.split(':')[2] }; })\n+      .map((urn) => toAbsoluteUrn(urn, requestContext.compareMode))\n+      .map((urn) => {\n+        return { urn, base: toMetricUrn(urn), offset: urn.split(':')[2] };\n+      })", "originalCommit": "1491808290da8a5c111b59b145c0f443c28b4aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIzNDY4OA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556234688", "bodyText": "This is also not written by me but updated by prettify.  By looking at it, I believe \"toAbsoluteUrn\" is doing some work before the next map.", "author": "harleyjj", "createdAt": "2021-01-13T03:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcwNjg5OA==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556706898", "bodyText": "If you don't clear the logic, we can refactor when we do the migration.", "author": "zhangloo333", "createdAt": "2021-01-13T17:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjczMjExMw==", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556732113", "bodyText": "I will condense it into one map.", "author": "harleyjj", "createdAt": "2021-01-13T18:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MTcxNQ=="}], "type": "inlineReview"}, {"oid": "755df8f2660441acd57fe087f94d872bc4d60451", "url": "https://github.com/apache/pinot/commit/755df8f2660441acd57fe087f94d872bc4d60451", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected", "committedDate": "2021-01-13T04:21:45Z", "type": "forcePushed"}, {"oid": "6aef44789922b9b1fc9fc2fac2c571bb67a211ea", "url": "https://github.com/apache/pinot/commit/6aef44789922b9b1fc9fc2fac2c571bb67a211ea", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected", "committedDate": "2021-01-13T18:45:22Z", "type": "commit"}, {"oid": "6aef44789922b9b1fc9fc2fac2c571bb67a211ea", "url": "https://github.com/apache/pinot/commit/6aef44789922b9b1fc9fc2fac2c571bb67a211ea", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected", "committedDate": "2021-01-13T18:45:22Z", "type": "forcePushed"}]}