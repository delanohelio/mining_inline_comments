{"pr_number": 5400, "pr_title": "Do not release the PinotDataBuffer when closing the index", "pr_createdAt": "2020-05-16T01:26:06Z", "pr_url": "https://github.com/apache/pinot/pull/5400", "timeline": [{"oid": "8ae9041351be109ca9b750e175029d21482a1c24", "url": "https://github.com/apache/pinot/commit/8ae9041351be109ca9b750e175029d21482a1c24", "message": "Do not release the PinotDataBuffer when closing the index\n\nThe PinotDataBuffers are tracked and maintained inside SegmentDirectory\nfor ImmutableSegment and PinotDataBufferMemoryManager for MutableSegment.\nThey are created when loading the indexes and released when closing the\nsegment. If the PinotDataBuffer gets released when closing the index, and\nif the buffer manager decide to reuse the buffer, the following read on\nthe buffer will cause JVM to crash. This can be triggered in\nSegmentPreProcessor when the same indexes need to be opened twice in two\ndifferent preprocessors.\n\nThis PR standardize the behavior of indexes to not release (close) the\nPinotDataBuffer when closing the index. Also, after the index is closed,\nwe should prevent reading anything from the PinotDataBuffer because the\nbuffer might already be closed and it could cause JVM to crash.\n\nMinor changes/bug fixes:\n- Enable Range index in integration tests\n- Add RangeFilterOperator into FilterOperatorUtils.reorderAndFilterChildOperators()", "committedDate": "2020-05-16T19:59:30Z", "type": "forcePushed"}, {"oid": "f4704ae5bbabfd0a6af44cc301090af1e0a0e6d4", "url": "https://github.com/apache/pinot/commit/f4704ae5bbabfd0a6af44cc301090af1e0a0e6d4", "message": "Do not release the PinotDataBuffer when closing the index\n\nThe PinotDataBuffers are tracked and maintained inside SegmentDirectory\nfor ImmutableSegment and PinotDataBufferMemoryManager for MutableSegment.\nThey are created when loading the indexes and released when closing the\nsegment. If the PinotDataBuffer gets released when closing the indexes,\nand if the buffer manager decides to reuse the buffer, the following read\non the buffer will cause JVM to crash. This can be triggered in\nSegmentPreProcessor when the same indexes need to be opened twice in two\ndifferent preprocessors.\n\nThis PR standardize the behavior of indexes to not release (close) the\nPinotDataBuffer when closing the index.\nWe don't need to worry about accessing the index after it is already\nclosed because that is already addressed in #4764", "committedDate": "2020-05-16T21:53:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDE4Ng==", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426864186", "bodyText": "Might be good to rename the index variable?", "author": "jackjlli", "createdAt": "2020-05-18T20:03:52Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/store/ColumnIndexDirectoryTestHelper.java", "diffHunk": "@@ -60,11 +60,11 @@ static PinotDataBuffer getIndexBuffer(ColumnIndexDirectory columnDirectory, Stri\n   static void verifyMultipleReads(ColumnIndexDirectory columnDirectory, String column, int numIter)\n       throws Exception {\n     for (int ii = 0; ii < numIter; ii++) {", "originalCommit": "f4704ae5bbabfd0a6af44cc301090af1e0a0e6d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MzI2OQ==", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426943269", "bodyText": "Done lol", "author": "Jackie-Jiang", "createdAt": "2020-05-18T23:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDE4Ng=="}], "type": "inlineReview"}, {"oid": "91d46b5af7eb663c2df323d24307703af2211db4", "url": "https://github.com/apache/pinot/commit/91d46b5af7eb663c2df323d24307703af2211db4", "message": "Do not release the PinotDataBuffer when closing the index\n\nThe PinotDataBuffers are tracked and maintained inside SegmentDirectory\nfor ImmutableSegment and PinotDataBufferMemoryManager for MutableSegment.\nThey are created when loading the indexes and released when closing the\nsegment. If the PinotDataBuffer gets released when closing the indexes,\nand if the buffer manager decides to reuse the buffer, the following read\non the buffer will cause JVM to crash. This can be triggered in\nSegmentPreProcessor when the same indexes need to be opened twice in two\ndifferent preprocessors.\n\nThis PR standardize the behavior of indexes to not release (close) the\nPinotDataBuffer when closing the index.\nWe don't need to worry about accessing the index after it is already\nclosed because that is already addressed in #4764", "committedDate": "2020-05-18T23:20:20Z", "type": "commit"}, {"oid": "91d46b5af7eb663c2df323d24307703af2211db4", "url": "https://github.com/apache/pinot/commit/91d46b5af7eb663c2df323d24307703af2211db4", "message": "Do not release the PinotDataBuffer when closing the index\n\nThe PinotDataBuffers are tracked and maintained inside SegmentDirectory\nfor ImmutableSegment and PinotDataBufferMemoryManager for MutableSegment.\nThey are created when loading the indexes and released when closing the\nsegment. If the PinotDataBuffer gets released when closing the indexes,\nand if the buffer manager decides to reuse the buffer, the following read\non the buffer will cause JVM to crash. This can be triggered in\nSegmentPreProcessor when the same indexes need to be opened twice in two\ndifferent preprocessors.\n\nThis PR standardize the behavior of indexes to not release (close) the\nPinotDataBuffer when closing the index.\nWe don't need to worry about accessing the index after it is already\nclosed because that is already addressed in #4764", "committedDate": "2020-05-18T23:20:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3MzM4OA==", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426973388", "bodyText": "The version was made into a member variable so that when we add or bump the version it is available to derived classes. Not sure why you removed it.\nRecently we made a version bump and it was painful  and re-factoring had to be done. Some background in PR #5285", "author": "mcvsubbu", "createdAt": "2020-05-19T01:08:33Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java", "diffHunk": "@@ -75,7 +67,7 @@ public BaseChunkSingleValueReader(PinotDataBuffer pinotDataBuffer) {\n     headerOffset += Integer.BYTES;\n \n     int dataHeaderStart = headerOffset;\n-    if (_version > 1) {\n+    if (version > 1) {", "originalCommit": "91d46b5af7eb663c2df323d24307703af2211db4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MjkwNQ==", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426992905", "bodyText": "It is not used anywhere, and IDE will have warning and can auto convert it to local.\nI don't see why this can affect version bump as long as you have the version information inside the data buffer.", "author": "Jackie-Jiang", "createdAt": "2020-05-19T02:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3MzM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjI3NA==", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426976274", "bodyText": "Not sure I understand this. is headerBuffer(s) alllocated here closed anywhere? Same q with databBuffers . The reader and writer classes we construct here do not close these buffers, right?", "author": "mcvsubbu", "createdAt": "2020-05-19T01:19:41Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteSingleColumnMultiValueReaderWriter.java", "diffHunk": "@@ -132,47 +129,40 @@ public FixedByteSingleColumnMultiValueReaderWriter(int maxNumberOfMultiValuesPer\n     _maxNumberOfMultiValuesPerRow = maxNumberOfMultiValuesPerRow;\n     _headerSize = rowCountPerChunk * SIZE_OF_INT * NUM_COLS_IN_HEADER;\n     _rowCountPerChunk = rowCountPerChunk;\n-    addHeaderBuffers();\n+    addHeaderBuffer();\n     //at least create space for million entries, which for INT translates into 4mb buffer\n     _incrementalCapacity = incrementalCapacity;\n-    addDataBuffers(initialCapacity);\n+    addDataBuffer(initialCapacity);\n     //init(_rowCountPerChunk, _columnSizeInBytes, _maxNumberOfMultiValuesPerRow, initialCapacity, _incrementalCapacity);\n   }\n \n-  private void addHeaderBuffers() {\n+  private void addHeaderBuffer() {\n     LOGGER.info(\"Allocating header buffer of size {} for: {}\", _headerSize, _context);\n-    _headerBuffer = _memoryManager.allocate(_headerSize, _context);\n+    // NOTE: PinotDataBuffer is tracked in the PinotDataBufferMemoryManager. No need to track it inside the class.\n+    PinotDataBuffer headerBuffer = _memoryManager.allocate(_headerSize, _context);", "originalCommit": "91d46b5af7eb663c2df323d24307703af2211db4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5Mjk5OQ==", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426992999", "bodyText": "MemoryManager allocates and tracks all the buffers. It releases them when the segment is closed.", "author": "Jackie-Jiang", "createdAt": "2020-05-19T02:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NzM0Nw==", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426977347", "bodyText": "when are these closed?", "author": "mcvsubbu", "createdAt": "2020-05-19T01:23:43Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteSingleColumnSingleValueReaderWriter.java", "diffHunk": "@@ -176,18 +173,15 @@ private int getBufferId(int row) {\n \n   private void addBuffer() {\n     LOGGER.info(\"Allocating {} bytes for: {}\", _chunkSizeInBytes, _allocationContext);\n+    // NOTE: PinotDataBuffer is tracked in the PinotDataBufferMemoryManager. No need to track it inside the class.\n     PinotDataBuffer buffer = _memoryManager.allocate(_chunkSizeInBytes, _allocationContext);\n-    _dataBuffers.add(buffer);\n+    _writers.add(", "originalCommit": "91d46b5af7eb663c2df323d24307703af2211db4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MzM3MQ==", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426993371", "bodyText": "In MutableSegmentImpl.destroy() where memory manager is closed as the last step.", "author": "Jackie-Jiang", "createdAt": "2020-05-19T02:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NzM0Nw=="}], "type": "inlineReview"}]}