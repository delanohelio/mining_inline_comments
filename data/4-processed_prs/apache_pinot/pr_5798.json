{"pr_number": 5798, "pr_title": "Improve performance of DistinctCountThetaSketch by eliminating empty \u2026", "pr_createdAt": "2020-08-04T04:12:58Z", "pr_url": "https://github.com/apache/pinot/pull/5798", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMTQ5OQ==", "url": "https://github.com/apache/pinot/pull/5798#discussion_r465201499", "bodyText": "Is the caller already good with null? I mean it doesn't have to be changed to handle null return from this function?", "author": "siddharthteotia", "createdAt": "2020-08-04T17:08:57Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountThetaSketchAggregationFunction.java", "diffHunk": "@@ -387,12 +386,17 @@ public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResult\n   public Map<String, Sketch> extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n     Map<Predicate, Union> unionMap = aggregationResultHolder.getResult();\n     if (unionMap == null || unionMap.isEmpty()) {\n-      return Collections.emptyMap();\n+      return null;", "originalCommit": "cf915bdf9b7406bb4b6701aac70b9e131c8463e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NDM0Nw==", "url": "https://github.com/apache/pinot/pull/5798#discussion_r465294347", "bodyText": "Yes, see merge(), there's a null check there. I had added Collections.emptyMap() in the previous PR, only to realize that it could be null. You are right it doesn't have to be null, but having it null saves a few cpu cycles in merge, I guess (not that it improves anything).", "author": "mayankshriv", "createdAt": "2020-08-04T19:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NzM1Nw==", "url": "https://github.com/apache/pinot/pull/5798#discussion_r465297357", "bodyText": "On second thought, perhaps emptyMap() is better to avoid null checks in callers. Updated.", "author": "mayankshriv", "createdAt": "2020-08-04T20:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMTQ5OQ=="}], "type": "inlineReview"}, {"oid": "ff3624d261929e0bb3c8a9b16d2ab110c7abe368", "url": "https://github.com/apache/pinot/commit/ff3624d261929e0bb3c8a9b16d2ab110c7abe368", "message": "Improve performance of DistinctCountThetaSketch by eliminating empty sketches and unions.\n\n* In a case with large number of predicates in the post-aggregation-expression (with OR's), we tend\n  to end up with a lot of empty sketches (and unions) when not every row matches each predicate.\n  This causes an overhead of creating sketches and union'ing them, leading to potentially huge performance hit.\n\n* In this PR, we improve this behavior by:\n  - Filtering out empty unions/sketchs when extracting aggregation results.\n  - Careful merging of results in `merge()` with mininmal unions (only when necessary).\n\n* We could also perform lazy creation of unions (to ensure that they are not empty), but that would mean\n  a hash-map lookup per row. This will penalize the general case when there's less number of emtpy unions.\n  So this approach was not taken.\n\n* We saw an overall improvement in latency of about 50%, for cases with:\n  - Large number of predicates, and\n  - Large number of segments, and\n  - Small number of matches per predicate per segment.", "committedDate": "2020-08-04T19:59:43Z", "type": "commit"}, {"oid": "ff3624d261929e0bb3c8a9b16d2ab110c7abe368", "url": "https://github.com/apache/pinot/commit/ff3624d261929e0bb3c8a9b16d2ab110c7abe368", "message": "Improve performance of DistinctCountThetaSketch by eliminating empty sketches and unions.\n\n* In a case with large number of predicates in the post-aggregation-expression (with OR's), we tend\n  to end up with a lot of empty sketches (and unions) when not every row matches each predicate.\n  This causes an overhead of creating sketches and union'ing them, leading to potentially huge performance hit.\n\n* In this PR, we improve this behavior by:\n  - Filtering out empty unions/sketchs when extracting aggregation results.\n  - Careful merging of results in `merge()` with mininmal unions (only when necessary).\n\n* We could also perform lazy creation of unions (to ensure that they are not empty), but that would mean\n  a hash-map lookup per row. This will penalize the general case when there's less number of emtpy unions.\n  So this approach was not taken.\n\n* We saw an overall improvement in latency of about 50%, for cases with:\n  - Large number of predicates, and\n  - Large number of segments, and\n  - Small number of matches per predicate per segment.", "committedDate": "2020-08-04T19:59:43Z", "type": "forcePushed"}]}