{"pr_number": 5372, "pr_title": "Re-work on adding template support for Pinot Ingestion Job Spec", "pr_createdAt": "2020-05-12T10:58:38Z", "pr_url": "https://github.com/apache/pinot/pull/5372", "timeline": [{"oid": "42a1b6f575f7b1749cee27947ef5bdf631145e3d", "url": "https://github.com/apache/pinot/commit/42a1b6f575f7b1749cee27947ef5bdf631145e3d", "message": "Re-work on adding template support for Pinot Ingestion Job Spec", "committedDate": "2020-05-12T10:47:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3Mjk4NQ==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423772985", "bodyText": "What's the delimiter between two [template_key=template_value]? (Assuming ... indicates there's more than one of those.)", "author": "mayankshriv", "createdAt": "2020-05-12T14:20:37Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/ingestion/batch/IngestionJobLauncher.java", "diffHunk": "@@ -36,24 +41,34 @@\n \n   public static final Logger LOGGER = LoggerFactory.getLogger(IngestionJobLauncher.class);\n \n-  private static final String USAGE = \"usage: [jobSpec.yaml]\";\n+  private static final String USAGE = \"usage: [jobSpec.yaml] [template_key=template_value]...\";", "originalCommit": "42a1b6f575f7b1749cee27947ef5bdf631145e3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNDk1NQ==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423914955", "bodyText": "It will be space, the arg4j parse it into an array. Adding example in PR description:\nbin/pinot-admin.sh LaunchDataIngestionJob  \\\n-jobSpecFile ingestionJobSpec.yaml \\\n-values year=2020 month=05 day=06 hour=07", "author": "xiangfu0", "createdAt": "2020-05-12T17:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3Mjk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3NjkxOQ==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423776919", "bodyText": "How about LATEST?", "author": "mayankshriv", "createdAt": "2020-05-12T14:25:15Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/GroovyTemplateUtils.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.utils;\n+\n+import groovy.text.SimpleTemplateEngine;\n+import groovy.text.TemplateEngine;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+\n+public class GroovyTemplateUtils {\n+  private static final TemplateEngine GROOVY_TEMPLATE_ENGINE = new SimpleTemplateEngine();\n+  private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  public static String renderTemplate(String template, Map<String, Object> newContext)\n+      throws IOException, ClassNotFoundException {\n+    Map<String, Object> contextMap = getDefaultContextMap();\n+    contextMap.putAll(newContext);\n+    return GROOVY_TEMPLATE_ENGINE.createTemplate(template).make(contextMap).toString();\n+  }\n+\n+  /**\n+   Construct default template context:\n+   today : today's date in format `yyyy-MM-dd`, example value: '2020-05-06'\n+   yesterday : yesterday's date in format `yyyy-MM-dd`, example value: '2020-05-06'\n+   */\n+  public static Map<String, Object> getDefaultContextMap() {\n+    Map<String, Object> defaultContextMap = new HashMap<>();\n+    Instant now = Instant.now();\n+    defaultContextMap.put(\"today\", DATE_FORMAT.format(new Date(now.toEpochMilli())));", "originalCommit": "42a1b6f575f7b1749cee27947ef5bdf631145e3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNTQ5Nw==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423915497", "bodyText": "Yes, we can add. What do you expect the value for LATEST? same as TODAY?", "author": "xiangfu0", "createdAt": "2020-05-12T17:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3NjkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyMjI3OQ==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423922279", "bodyText": "can this be a list?", "author": "kishoreg", "createdAt": "2020-05-12T17:50:31Z", "path": "pinot-spi/src/test/resources/ingestionJobSpecTemplate.yaml", "diffHunk": "@@ -0,0 +1,45 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+executionFrameworkSpec:\n+  name: 'standalone'\n+  segmentGenerationJobRunnerClassName: 'org.apache.pinot.plugin.ingestion.batch.standalone.SegmentGenerationJobRunner'\n+  segmentTarPushJobRunnerClassName: 'org.apache.pinot.plugin.ingestion.batch.standalone.SegmentTarPushJobRunner'\n+  segmentUriPushJobRunnerClassName: 'org.apache.pinot.plugin.ingestion.batch.standalone.SegmentUriPushJobRunner'\n+jobType: SegmentCreationAndTarPush\n+inputDirURI: 'file:///path/to/input/${ year }/${ month }/${ day }'", "originalCommit": "42a1b6f575f7b1749cee27947ef5bdf631145e3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyNjEwNQ==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423926105", "bodyText": "no. If we plan to support list, then we need to add a new field in IngestionJobSpec, which could be addressed in a new PR. Meanwhile we can try to have this supported by using pattern matching .", "author": "xiangfu0", "createdAt": "2020-05-12T17:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyMjI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyMzMxMQ==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423923311", "bodyText": "also, think of adding an option to take the properties file as an argument - something similar to helm", "author": "kishoreg", "createdAt": "2020-05-12T17:52:05Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/LaunchDataIngestionJobCommand.java", "diffHunk": "@@ -35,6 +39,9 @@\n   @Option(name = \"-jobSpecFile\", required = true, metaVar = \"<string>\", usage = \"Ingestion job spec file\")\n   private String _jobSpecFile;\n \n+  @Option(name = \"-values\", required = false, metaVar = \"<template context>\", handler = StringArrayOptionHandler.class, usage = \"Context values set to the job spec template\")", "originalCommit": "42a1b6f575f7b1749cee27947ef5bdf631145e3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MjA1NA==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423962054", "bodyText": "added.", "author": "xiangfu0", "createdAt": "2020-05-12T18:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyMzMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzODAzNg==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423938036", "bodyText": "I suggest fielding the exceptions and adding error message in the output that directs the user to the right action to fix it.", "author": "mcvsubbu", "createdAt": "2020-05-12T18:15:50Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/ingestion/batch/IngestionJobLauncher.java", "diffHunk": "@@ -36,24 +41,34 @@\n \n   public static final Logger LOGGER = LoggerFactory.getLogger(IngestionJobLauncher.class);\n \n-  private static final String USAGE = \"usage: [jobSpec.yaml]\";\n+  private static final String USAGE = \"usage: [jobSpec.yaml] [template_key=template_value]...\";\n \n   private static void usage() {\n     System.err.println(USAGE);\n   }\n \n   public static void main(String[] args)\n       throws Exception {\n-    if (args.length != 1) {\n+    if (args.length < 1) {\n       usage();\n       System.exit(1);\n     }\n     String jobSpecFilePath = args[0];\n-\n-    try (Reader reader = new BufferedReader(new FileReader(jobSpecFilePath))) {\n-      SegmentGenerationJobSpec spec = new Yaml().loadAs(reader, SegmentGenerationJobSpec.class);\n-      runIngestionJob(spec);\n+    List<String> valueList = new ArrayList<>();\n+    for (int i = 1; i < args.length; i++) {\n+      valueList.add(args[i]);\n     }\n+    SegmentGenerationJobSpec spec =\n+        getSegmentGenerationJobSpec(jobSpecFilePath, GroovyTemplateUtils.getTemplateContext(valueList));\n+    runIngestionJob(spec);\n+  }\n+\n+  public static SegmentGenerationJobSpec getSegmentGenerationJobSpec(String jobSpecFilePath,\n+      Map<String, Object> context)\n+      throws IOException, ClassNotFoundException {\n+    String yamlTemplate = IOUtils.toString(new BufferedReader(new FileReader(jobSpecFilePath)));\n+    String yamlStr = GroovyTemplateUtils.renderTemplate(yamlTemplate, context);\n+    return new Yaml().loadAs(yamlStr, SegmentGenerationJobSpec.class);", "originalCommit": "42a1b6f575f7b1749cee27947ef5bdf631145e3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3ODA4MA==", "url": "https://github.com/apache/pinot/pull/5372#discussion_r423978080", "bodyText": "Added explicit msgs for job launcher part.", "author": "xiangfu0", "createdAt": "2020-05-12T19:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzODAzNg=="}], "type": "inlineReview"}, {"oid": "077fe526456ebde6caf53af020a4d208edd6727f", "url": "https://github.com/apache/pinot/commit/077fe526456ebde6caf53af020a4d208edd6727f", "message": "Adding support for property file", "committedDate": "2020-05-12T19:15:49Z", "type": "forcePushed"}, {"oid": "aa54768573cc777b7eb22d9e712ce6283e03af43", "url": "https://github.com/apache/pinot/commit/aa54768573cc777b7eb22d9e712ce6283e03af43", "message": "Adding support for property file", "committedDate": "2020-05-12T19:24:13Z", "type": "commit"}, {"oid": "aa54768573cc777b7eb22d9e712ce6283e03af43", "url": "https://github.com/apache/pinot/commit/aa54768573cc777b7eb22d9e712ce6283e03af43", "message": "Adding support for property file", "committedDate": "2020-05-12T19:24:13Z", "type": "forcePushed"}]}