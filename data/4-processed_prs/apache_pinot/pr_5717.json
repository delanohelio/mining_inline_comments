{"pr_number": 5717, "pr_title": "Add streaming query handler", "pr_createdAt": "2020-07-19T13:24:22Z", "pr_url": "https://github.com/apache/pinot/pull/5717", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0ODA0OA==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457748048", "bodyText": "You don't need to import them again here as they are already imported in pinot-common", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:29:08Z", "path": "pinot-core/pom.xml", "diffHunk": "@@ -227,5 +227,25 @@\n       <artifactId>lucene-analyzers-common</artifactId>\n       <version>${lucene.version}</version>\n     </dependency>\n+    <dependency>", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0ODU4Mw==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457748583", "bodyText": "Can you please import Pinot code style in config/codestyle-intellij.xml or config/codestyle-eclipse.xml and reformat the files?", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:30:50Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/query/StreamingSelectionOnlyOperator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.query;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.common.RowBasedBlockValueFetcher;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.operator.BaseOperator;\n+import org.apache.pinot.core.operator.ExecutionStatistics;\n+import org.apache.pinot.core.operator.blocks.IntermediateResultsBlock;\n+import org.apache.pinot.core.operator.blocks.TransformBlock;\n+import org.apache.pinot.core.operator.transform.TransformOperator;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.selection.SelectionOperatorUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class StreamingSelectionOnlyOperator extends BaseOperator<IntermediateResultsBlock> {", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MTExMw==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457751113", "bodyText": "Let's not pass the streamObserver to the segment level operator because multiple segments will be processed in parallel, but calls to streamObserver.onNext() need to be synchronized.\nWe should create a StreamingCombineOperator (instance level operator) to keep fetching IntermediateResultsBlock from this operator and handle the calls to streamObserver.onNext().", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:39:22Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/query/StreamingSelectionOnlyOperator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.query;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.common.RowBasedBlockValueFetcher;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.operator.BaseOperator;\n+import org.apache.pinot.core.operator.ExecutionStatistics;\n+import org.apache.pinot.core.operator.blocks.IntermediateResultsBlock;\n+import org.apache.pinot.core.operator.blocks.TransformBlock;\n+import org.apache.pinot.core.operator.transform.TransformOperator;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.selection.SelectionOperatorUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class StreamingSelectionOnlyOperator extends BaseOperator<IntermediateResultsBlock> {\n+  private static final String OPERATOR_NAME = \"SelectionOnlyOperator\";\n+\n+  private final IndexSegment _indexSegment;\n+  private final TransformOperator _transformOperator;\n+  private final List<ExpressionContext> _expressions;\n+  private final BlockValSet[] _blockValSets;\n+  private final DataSchema _dataSchema;\n+  private final int _numRowsToKeep;\n+  private final List<Object[]> _rows;\n+  private final StreamObserver<Server.ServerResponse> _streamObserver;\n+\n+  private int _numDocsScanned = 0;\n+\n+  public StreamingSelectionOnlyOperator(\n+      IndexSegment indexSegment,\n+      QueryContext queryContext,\n+      List<ExpressionContext> expressions,\n+      TransformOperator transformOperator,\n+      StreamObserver<Server.ServerResponse> streamObserver) {", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MTYwMg==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457751602", "bodyText": "For the streaming operator, each time return results from one block (i.e. remove the while loop). Returns null when all the blocks are returned.", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:40:50Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/query/StreamingSelectionOnlyOperator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.query;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.common.RowBasedBlockValueFetcher;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.operator.BaseOperator;\n+import org.apache.pinot.core.operator.ExecutionStatistics;\n+import org.apache.pinot.core.operator.blocks.IntermediateResultsBlock;\n+import org.apache.pinot.core.operator.blocks.TransformBlock;\n+import org.apache.pinot.core.operator.transform.TransformOperator;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.selection.SelectionOperatorUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class StreamingSelectionOnlyOperator extends BaseOperator<IntermediateResultsBlock> {\n+  private static final String OPERATOR_NAME = \"SelectionOnlyOperator\";\n+\n+  private final IndexSegment _indexSegment;\n+  private final TransformOperator _transformOperator;\n+  private final List<ExpressionContext> _expressions;\n+  private final BlockValSet[] _blockValSets;\n+  private final DataSchema _dataSchema;\n+  private final int _numRowsToKeep;\n+  private final List<Object[]> _rows;\n+  private final StreamObserver<Server.ServerResponse> _streamObserver;\n+\n+  private int _numDocsScanned = 0;\n+\n+  public StreamingSelectionOnlyOperator(\n+      IndexSegment indexSegment,\n+      QueryContext queryContext,\n+      List<ExpressionContext> expressions,\n+      TransformOperator transformOperator,\n+      StreamObserver<Server.ServerResponse> streamObserver) {\n+    _indexSegment = indexSegment;\n+    _transformOperator = transformOperator;\n+    _expressions = expressions;\n+    _streamObserver = streamObserver;\n+\n+    int numExpressions = _expressions.size();\n+    _blockValSets = new BlockValSet[numExpressions];\n+    String[] columnNames = new String[numExpressions];\n+    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n+    for (int i = 0; i < numExpressions; i++) {\n+      ExpressionContext expression = _expressions.get(i);\n+      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n+      columnNames[i] = expression.toString();\n+      columnDataTypes[i] =\n+          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n+    }\n+    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n+\n+    _numRowsToKeep = queryContext.getLimit();\n+    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n+  }\n+\n+  @Override\n+  protected IntermediateResultsBlock getNextBlock() {\n+    TransformBlock transformBlock;\n+    while ((transformBlock = _transformOperator.nextBlock()) != null) {", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MTY2Mw==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457751663", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String OPERATOR_NAME = \"SelectionOnlyOperator\";\n          \n          \n            \n              private static final String OPERATOR_NAME = \"StreamingSelectionOnlyOperator\";", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:41:00Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/query/StreamingSelectionOnlyOperator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.query;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.common.RowBasedBlockValueFetcher;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.operator.BaseOperator;\n+import org.apache.pinot.core.operator.ExecutionStatistics;\n+import org.apache.pinot.core.operator.blocks.IntermediateResultsBlock;\n+import org.apache.pinot.core.operator.blocks.TransformBlock;\n+import org.apache.pinot.core.operator.transform.TransformOperator;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.selection.SelectionOperatorUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class StreamingSelectionOnlyOperator extends BaseOperator<IntermediateResultsBlock> {\n+  private static final String OPERATOR_NAME = \"SelectionOnlyOperator\";", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MjEyMg==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457752122", "bodyText": "Similarly here, don't pass the streamObserver to the segment-level plan node. Create a StreamingCombinePlanNode", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:42:35Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/StreamingSelectionPlanNode.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.plan;\n+\n+import io.grpc.stub.StreamObserver;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.CommonConstants.Segment.BuiltInVirtualColumn;\n+import org.apache.pinot.core.common.Operator;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.operator.blocks.IntermediateResultsBlock;\n+import org.apache.pinot.core.operator.query.EmptySelectionOperator;\n+import org.apache.pinot.core.operator.query.SelectionOnlyOperator;\n+import org.apache.pinot.core.operator.query.SelectionOrderByOperator;\n+import org.apache.pinot.core.operator.query.StreamingSelectionOnlyOperator;\n+import org.apache.pinot.core.operator.transform.TransformOperator;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.OrderByExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.selection.SelectionOperatorUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * The <code>SelectionPlanNode</code> class provides the execution plan for selection query on a single segment.\n+ */\n+public class StreamingSelectionPlanNode implements PlanNode {\n+  private final IndexSegment _indexSegment;\n+  private final QueryContext _queryContext;\n+  private final List<ExpressionContext> _expressions;\n+  private final TransformPlanNode _transformPlanNode;\n+  private final StreamObserver<Server.ServerResponse> _streamObserver;\n+\n+  public StreamingSelectionPlanNode(IndexSegment indexSegment, QueryContext queryContext,", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1Mjg4NA==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457752884", "bodyText": "Don't pass streamObserver to the segment level PlanNode", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:45:03Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/maker/InstancePlanMakerImplV2.java", "diffHunk": "@@ -139,6 +143,52 @@ public PlanNode makeSegmentPlanNode(IndexSegment indexSegment, QueryContext quer\n     }\n   }\n \n+  @Override\n+  public Plan makeStreamingInstancePlan(List<IndexSegment> indexSegments, QueryContext queryContext,\n+                               ExecutorService executorService,\n+                               StreamObserver<Server.ServerResponse> streamObserver, long timeOutMs) {\n+    List<PlanNode> planNodes = new ArrayList<>(indexSegments.size());\n+    for (IndexSegment indexSegment : indexSegments) {\n+      planNodes.add(makeStreamingSegmentPlanNode(indexSegment, queryContext, streamObserver));\n+    }\n+    CombinePlanNode combinePlanNode =\n+        new CombinePlanNode(planNodes, queryContext, executorService, timeOutMs, _numGroupsLimit);\n+    return new GlobalPlanImplV0(new InstanceResponsePlanNode(combinePlanNode));\n+  }\n+\n+  @Override\n+  public PlanNode makeStreamingSegmentPlanNode(IndexSegment indexSegment, QueryContext queryContext,", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MzQyNg==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457753426", "bodyText": "Let's throw exception for all queries other than selection only for now", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:46:52Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/maker/InstancePlanMakerImplV2.java", "diffHunk": "@@ -139,6 +143,52 @@ public PlanNode makeSegmentPlanNode(IndexSegment indexSegment, QueryContext quer\n     }\n   }\n \n+  @Override\n+  public Plan makeStreamingInstancePlan(List<IndexSegment> indexSegments, QueryContext queryContext,\n+                               ExecutorService executorService,\n+                               StreamObserver<Server.ServerResponse> streamObserver, long timeOutMs) {\n+    List<PlanNode> planNodes = new ArrayList<>(indexSegments.size());\n+    for (IndexSegment indexSegment : indexSegments) {\n+      planNodes.add(makeStreamingSegmentPlanNode(indexSegment, queryContext, streamObserver));\n+    }\n+    CombinePlanNode combinePlanNode =\n+        new CombinePlanNode(planNodes, queryContext, executorService, timeOutMs, _numGroupsLimit);\n+    return new GlobalPlanImplV0(new InstanceResponsePlanNode(combinePlanNode));\n+  }\n+\n+  @Override\n+  public PlanNode makeStreamingSegmentPlanNode(IndexSegment indexSegment, QueryContext queryContext,\n+                                               StreamObserver<Server.ServerResponse> streamObserver) {\n+    if (QueryContextUtils.isAggregationQuery(queryContext)) {\n+      // TODO: revisit, throw exception", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NDIwOQ==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457754209", "bodyText": "Add _ prefix for member variables", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:49:27Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/grpc/PinotQueryService.java", "diffHunk": "@@ -18,6 +18,57 @@\n  */\n package org.apache.pinot.server.starter.grpc;\n \n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n public class PinotQueryService {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotQueryService.class);\n+\n+  private final int port;", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NDY3NA==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457754674", "bodyText": "Not sure if this shutdown hook is necessary", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:50:48Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/grpc/PinotQueryService.java", "diffHunk": "@@ -18,6 +18,57 @@\n  */\n package org.apache.pinot.server.starter.grpc;\n \n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n public class PinotQueryService {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotQueryService.class);\n+\n+  private final int port;\n+  private final Server server;\n+\n+  // TODO: pass config, and parameters to initialize handler\n+  public PinotQueryService(int port) {\n+    this.port = port;\n+    server = ServerBuilder.forPort(port)\n+        .addService(new PinotQueryHandler())\n+        .build();\n+\n+  }\n+\n+  /** Start serving requests. */\n+  public void start() throws IOException {\n+    server.start();\n+    LOGGER.info(\"Server started. Listening on {}\", port);\n+    Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyOTgwMQ==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r460429801", "bodyText": "Removed, can always add it back if needed.", "author": "elonazoulay", "createdAt": "2020-07-25T18:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NDY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NjIzOQ==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457756239", "bodyText": "This method should not return anything (we can directly implement submit())", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:56:09Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/grpc/PinotQueryHandler.java", "diffHunk": "@@ -18,18 +18,258 @@\n  */\n package org.apache.pinot.server.starter.grpc;\n \n+import com.google.common.base.Preconditions;\n import io.grpc.stub.StreamObserver;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.pinot.common.exception.QueryException;\n+import org.apache.pinot.common.metrics.ServerMeter;\n+import org.apache.pinot.common.metrics.ServerMetrics;\n+import org.apache.pinot.common.metrics.ServerQueryPhase;\n import org.apache.pinot.common.proto.PinotQueryServerGrpc;\n import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.core.common.datatable.DataTableImplV2;\n+import org.apache.pinot.core.common.datatable.DataTableUtils;\n+import org.apache.pinot.core.data.manager.InstanceDataManager;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.manager.TableDataManager;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.indexsegment.mutable.MutableSegment;\n+import org.apache.pinot.core.plan.Plan;\n+import org.apache.pinot.core.plan.maker.InstancePlanMakerImplV2;\n+import org.apache.pinot.core.plan.maker.PlanMaker;\n+import org.apache.pinot.core.query.config.QueryExecutorConfig;\n+import org.apache.pinot.core.query.exception.BadQueryRequestException;\n+import org.apache.pinot.core.query.pruner.SegmentPrunerService;\n+import org.apache.pinot.core.query.request.ServerQueryRequest;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.request.context.TimerContext;\n+import org.apache.pinot.core.segment.index.metadata.SegmentMetadata;\n+import org.apache.pinot.core.util.QueryOptions;\n+import org.apache.pinot.core.util.trace.TraceContext;\n+import org.apache.pinot.spi.env.PinotConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n \n /**\n  * Handler for grpc server requests.\n  * As data becomes available server responses will be added to the result stream.\n  * Once the request is complete the client will aggregate the result metadata.\n  */\n public class PinotQueryHandler extends PinotQueryServerGrpc.PinotQueryServerImplBase {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotQueryHandler.class);\n+\n+  private InstanceDataManager _instanceDataManager = null;\n+  private SegmentPrunerService _segmentPrunerService = null;\n+  private PlanMaker _planMaker = null;\n+  private long _defaultTimeOutMs = CommonConstants.Server.DEFAULT_QUERY_EXECUTOR_TIMEOUT_MS;\n+  private ServerMetrics _serverMetrics;\n+\n+  public synchronized void init(PinotConfiguration config, InstanceDataManager instanceDataManager,\n+                                ServerMetrics serverMetrics)\n+      throws ConfigurationException {\n+    _instanceDataManager = instanceDataManager;\n+    _serverMetrics = serverMetrics;\n+    QueryExecutorConfig queryExecutorConfig = new QueryExecutorConfig(config);\n+    if (queryExecutorConfig.getTimeOut() > 0) {\n+      _defaultTimeOutMs = queryExecutorConfig.getTimeOut();\n+    }\n+    LOGGER.info(\"Default timeout for query executor : {}\", _defaultTimeOutMs);\n+    LOGGER.info(\"Trying to build SegmentPrunerService\");\n+    _segmentPrunerService = new SegmentPrunerService(queryExecutorConfig.getPrunerConfig());\n+    LOGGER.info(\"Trying to build QueryPlanMaker\");\n+    _planMaker = new InstancePlanMakerImplV2(queryExecutorConfig);\n+    LOGGER.info(\"Trying to build QueryExecutorTimer\");\n+  }\n+\n+  /**\n+   * Submit a streaming request to the server\n+   * @param request\n+   * @param responseObserver\n+   */\n   @Override\n   public void submit(Server.ServerRequest request, StreamObserver<Server.ServerResponse> responseObserver) {\n+    // TODO: implement, follow up whether to use ServerQueryRequest\n+  }\n+\n+  public DataTable processQuery(ServerQueryRequest queryRequest,", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMDU5Mw==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r460430593", "bodyText": "Will be pushing an update for this as well.", "author": "elonazoulay", "createdAt": "2020-07-25T18:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NjIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NzA1OQ==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r457757059", "bodyText": "It will be very hard to reuse the current QueryScheduler because that is not designed for streaming API. So for the first version we can just launch an ExecutorService within this class and use it to execute queries without introducing query scheduling.", "author": "Jackie-Jiang", "createdAt": "2020-07-20T23:59:01Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/grpc/PinotQueryHandler.java", "diffHunk": "@@ -18,18 +18,258 @@\n  */\n package org.apache.pinot.server.starter.grpc;\n \n+import com.google.common.base.Preconditions;\n import io.grpc.stub.StreamObserver;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.pinot.common.exception.QueryException;\n+import org.apache.pinot.common.metrics.ServerMeter;\n+import org.apache.pinot.common.metrics.ServerMetrics;\n+import org.apache.pinot.common.metrics.ServerQueryPhase;\n import org.apache.pinot.common.proto.PinotQueryServerGrpc;\n import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.core.common.datatable.DataTableImplV2;\n+import org.apache.pinot.core.common.datatable.DataTableUtils;\n+import org.apache.pinot.core.data.manager.InstanceDataManager;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.manager.TableDataManager;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.indexsegment.mutable.MutableSegment;\n+import org.apache.pinot.core.plan.Plan;\n+import org.apache.pinot.core.plan.maker.InstancePlanMakerImplV2;\n+import org.apache.pinot.core.plan.maker.PlanMaker;\n+import org.apache.pinot.core.query.config.QueryExecutorConfig;\n+import org.apache.pinot.core.query.exception.BadQueryRequestException;\n+import org.apache.pinot.core.query.pruner.SegmentPrunerService;\n+import org.apache.pinot.core.query.request.ServerQueryRequest;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.request.context.TimerContext;\n+import org.apache.pinot.core.segment.index.metadata.SegmentMetadata;\n+import org.apache.pinot.core.util.QueryOptions;\n+import org.apache.pinot.core.util.trace.TraceContext;\n+import org.apache.pinot.spi.env.PinotConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n \n /**\n  * Handler for grpc server requests.\n  * As data becomes available server responses will be added to the result stream.\n  * Once the request is complete the client will aggregate the result metadata.\n  */\n public class PinotQueryHandler extends PinotQueryServerGrpc.PinotQueryServerImplBase {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotQueryHandler.class);\n+\n+  private InstanceDataManager _instanceDataManager = null;\n+  private SegmentPrunerService _segmentPrunerService = null;\n+  private PlanMaker _planMaker = null;\n+  private long _defaultTimeOutMs = CommonConstants.Server.DEFAULT_QUERY_EXECUTOR_TIMEOUT_MS;\n+  private ServerMetrics _serverMetrics;\n+\n+  public synchronized void init(PinotConfiguration config, InstanceDataManager instanceDataManager,", "originalCommit": "a04618e48003b77c8e47822c7d8042c7b9378e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMDU0NA==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r460430544", "bodyText": "Makes sense, will be pushing an update for this.", "author": "elonazoulay", "createdAt": "2020-07-25T18:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NzA1OQ=="}], "type": "inlineReview"}, {"oid": "e6df0c755312e520df6d9364a8bb7bbb638d2709", "url": "https://github.com/apache/pinot/commit/e6df0c755312e520df6d9364a8bb7bbb638d2709", "message": "Add streaming query handler", "committedDate": "2020-07-23T23:56:49Z", "type": "forcePushed"}, {"oid": "a04618e48003b77c8e47822c7d8042c7b9378e63", "url": "https://github.com/apache/pinot/commit/a04618e48003b77c8e47822c7d8042c7b9378e63", "message": "Add streaming query handler", "committedDate": "2020-07-19T13:22:08Z", "type": "forcePushed"}, {"oid": "f88679437ba66f5a8c86c181e2b6c9d1c55a7dd5", "url": "https://github.com/apache/pinot/commit/f88679437ba66f5a8c86c181e2b6c9d1c55a7dd5", "message": "Add streaming query handler", "committedDate": "2020-07-25T18:15:08Z", "type": "forcePushed"}, {"oid": "431d18ac9b397d6f594afac347bcd0d1b4d79567", "url": "https://github.com/apache/pinot/commit/431d18ac9b397d6f594afac347bcd0d1b4d79567", "message": "Hook up operators for GRPC query server", "committedDate": "2020-07-26T00:58:54Z", "type": "forcePushed"}, {"oid": "94820b713fedb16679a819251f88618724793d9a", "url": "https://github.com/apache/pinot/commit/94820b713fedb16679a819251f88618724793d9a", "message": "Hook up operators for GRPC query server", "committedDate": "2020-07-26T01:00:36Z", "type": "forcePushed"}, {"oid": "4fd81cd5170e891fea9ba7a70e7316571dae4d2b", "url": "https://github.com/apache/pinot/commit/4fd81cd5170e891fea9ba7a70e7316571dae4d2b", "message": "Hook up operators for GRPC query server", "committedDate": "2020-07-26T07:38:51Z", "type": "forcePushed"}, {"oid": "7d5996adb05966269274f0e8584f28c0ee72cfcb", "url": "https://github.com/apache/pinot/commit/7d5996adb05966269274f0e8584f28c0ee72cfcb", "message": "Hook up operators for gRPC query server", "committedDate": "2020-07-26T07:45:36Z", "type": "forcePushed"}, {"oid": "db95533e5747b8f1a6ecc771fcda9515d391d405", "url": "https://github.com/apache/pinot/commit/db95533e5747b8f1a6ecc771fcda9515d391d405", "message": "Allow early-termination for streaming seleciton-only", "committedDate": "2020-07-28T00:18:32Z", "type": "forcePushed"}, {"oid": "477af0b3fab29642ed4edc2c00ddd8ed1e816ea8", "url": "https://github.com/apache/pinot/commit/477af0b3fab29642ed4edc2c00ddd8ed1e816ea8", "message": "Allow early-termination for streaming seleciton-only", "committedDate": "2020-08-20T20:34:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNjEzMA==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r485016130", "bodyText": "I think we need to expose this port through helix eventually.", "author": "xiangfu0", "createdAt": "2020-09-08T15:37:22Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -190,7 +190,12 @@\n     public static final String CONFIG_OF_QUERY_EXECUTOR_CLASS = \"pinot.server.query.executor.class\";\n     public static final String CONFIG_OF_REQUEST_HANDLER_FACTORY_CLASS = \"pinot.server.requestHandlerFactory.class\";\n     public static final String CONFIG_OF_NETTY_PORT = \"pinot.server.netty.port\";\n+    public static final String CONFIG_OF_ENABLE_GRPC_SERVER = \"pinot.server.grpc.enable\";\n+    public static final boolean DEFAULT_ENABLE_GRPC_SERVER = false;\n+    public static final String CONFIG_OF_GRPC_PORT = \"pinot.server.grpc.port\";", "originalCommit": "477af0b3fab29642ed4edc2c00ddd8ed1e816ea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDU1NQ==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r485254555", "bodyText": "Added the port info into the Helix InstanceConfig under grpcPort", "author": "Jackie-Jiang", "createdAt": "2020-09-08T23:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNjEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAyMTk5OQ==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r485021999", "bodyText": "shall we consider move this to pinot-common? So other system integration won't require pinot-core as the dependency", "author": "xiangfu0", "createdAt": "2020-09-08T15:46:16Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/transport/grpc/GrpcRequestBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.transport.grpc;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.protobuf.ByteString;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.proto.Server;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants.Query.Request;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TSerializer;\n+import org.apache.thrift.protocol.TCompactProtocol;\n+\n+\n+public class GrpcRequestBuilder {", "originalCommit": "477af0b3fab29642ed4edc2c00ddd8ed1e816ea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNzM5OA==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r485227398", "bodyText": "Moved to pinot-common", "author": "Jackie-Jiang", "createdAt": "2020-09-08T22:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAyMTk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAyMjA3MQ==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r485022071", "bodyText": "shall we consider move this to pinot-common? So other system integration won't require pinot-core as the dependency", "author": "xiangfu0", "createdAt": "2020-09-08T15:46:23Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/transport/grpc/GrpcQueryClient.java", "diffHunk": "@@ -16,20 +16,26 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.server.starter.grpc;\n+package org.apache.pinot.core.transport.grpc;\n \n-import io.grpc.stub.StreamObserver;\n+import io.grpc.Channel;\n+import io.grpc.ManagedChannelBuilder;\n+import java.util.Iterator;\n import org.apache.pinot.common.proto.PinotQueryServerGrpc;\n import org.apache.pinot.common.proto.Server;\n \n-/**\n- * Handler for grpc server requests.\n- * As data becomes available server responses will be added to the result stream.\n- * Once the request is complete the client will aggregate the result metadata.\n- */\n-public class PinotQueryHandler extends PinotQueryServerGrpc.PinotQueryServerImplBase {\n-  @Override\n-  public void submit(Server.ServerRequest request, StreamObserver<Server.ServerResponse> responseObserver) {\n \n+public class GrpcQueryClient {", "originalCommit": "477af0b3fab29642ed4edc2c00ddd8ed1e816ea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNzQzMQ==", "url": "https://github.com/apache/pinot/pull/5717#discussion_r485227431", "bodyText": "Moved to pinot-common", "author": "Jackie-Jiang", "createdAt": "2020-09-08T22:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAyMjA3MQ=="}], "type": "inlineReview"}, {"oid": "b6aa355da896674e483793be9771cfabb9b8f667", "url": "https://github.com/apache/pinot/commit/b6aa355da896674e483793be9771cfabb9b8f667", "message": "Add streaming query handler", "committedDate": "2020-09-08T22:08:15Z", "type": "commit"}, {"oid": "854bfd02149f488f6132d63ecf8a945640e8778a", "url": "https://github.com/apache/pinot/commit/854bfd02149f488f6132d63ecf8a945640e8778a", "message": "Address comments", "committedDate": "2020-09-08T23:42:25Z", "type": "commit"}, {"oid": "854bfd02149f488f6132d63ecf8a945640e8778a", "url": "https://github.com/apache/pinot/commit/854bfd02149f488f6132d63ecf8a945640e8778a", "message": "Address comments", "committedDate": "2020-09-08T23:42:25Z", "type": "forcePushed"}]}