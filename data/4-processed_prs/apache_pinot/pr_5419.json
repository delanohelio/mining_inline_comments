{"pr_number": 5419, "pr_title": "Use thread local for groupby raw key holders", "pr_createdAt": "2020-05-20T06:54:07Z", "pr_url": "https://github.com/apache/pinot/pull/5419", "timeline": [{"oid": "d0c29a000fd05e6256930b5786167b60d25b7951", "url": "https://github.com/apache/pinot/commit/d0c29a000fd05e6256930b5786167b60d25b7951", "message": "Use thread local for groupby raw key holders", "committedDate": "2020-05-20T07:26:02Z", "type": "forcePushed"}, {"oid": "646b149b1f19802f30b2e23b43f205aabe73c9b0", "url": "https://github.com/apache/pinot/commit/646b149b1f19802f30b2e23b43f205aabe73c9b0", "message": "Use thread local for groupby raw key holders", "committedDate": "2020-05-20T10:27:57Z", "type": "forcePushed"}, {"oid": "1655c27c50df07bfab6863386150be8eccd0ac50", "url": "https://github.com/apache/pinot/commit/1655c27c50df07bfab6863386150be8eccd0ac50", "message": "Use thread local for groupby raw key holders", "committedDate": "2020-05-20T10:32:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NzY5Mg==", "url": "https://github.com/apache/pinot/pull/5419#discussion_r428187692", "bodyText": "Use computeIfAbsent() to save one extra map lookup.\nAlso, because you already know the type of key holders, maybe add a separate class to store different type of holders without map lookup?", "author": "Jackie-Jiang", "createdAt": "2020-05-20T17:32:23Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/DictionaryBasedGroupKeyGenerator.java", "diffHunk": "@@ -106,18 +108,26 @@ public DictionaryBasedGroupKeyGenerator(TransformOperator transformOperator,\n \n       _isSingleValueColumn[i] = transformOperator.getResultMetadata(groupByExpression).isSingleValue();\n     }\n-\n     if (longOverflow) {\n       _globalGroupIdUpperBound = numGroupsLimit;\n-      _rawKeyHolder = new ArrayMapBasedHolder(_globalGroupIdUpperBound);\n+      if (!mapBasedRawKeyHolders.containsKey(ArrayMapBasedHolder.class.getName())) {", "originalCommit": "1655c27c50df07bfab6863386150be8eccd0ac50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDA3NA==", "url": "https://github.com/apache/pinot/pull/5419#discussion_r428220074", "bodyText": "those types are internal and not exposed outside DictionaryBasedGroupKeyGenerator.java", "author": "xiangfu0", "createdAt": "2020-05-20T18:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NzY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxODE1OQ==", "url": "https://github.com/apache/pinot/pull/5419#discussion_r428218159", "bodyText": "I think initializing to _globalGroupIdUpperBound got introduced in #5291. For many cases with multiple group by columns (high cardinality and/or MV columns) this number can be huge. Unclear to me if making this thread-local will protect against such cases that may require allocating huge chunk of memory upfornt.", "author": "mayankshriv", "createdAt": "2020-05-20T18:24:25Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/DictionaryBasedGroupKeyGenerator.java", "diffHunk": "@@ -106,18 +108,26 @@ public DictionaryBasedGroupKeyGenerator(TransformOperator transformOperator,\n \n       _isSingleValueColumn[i] = transformOperator.getResultMetadata(groupByExpression).isSingleValue();\n     }\n-\n     if (longOverflow) {\n       _globalGroupIdUpperBound = numGroupsLimit;\n-      _rawKeyHolder = new ArrayMapBasedHolder(_globalGroupIdUpperBound);\n+      if (!mapBasedRawKeyHolders.containsKey(ArrayMapBasedHolder.class.getName())) {\n+        mapBasedRawKeyHolders.put(ArrayMapBasedHolder.class.getName(), new ArrayMapBasedHolder(_globalGroupIdUpperBound).getInternal());", "originalCommit": "1655c27c50df07bfab6863386150be8eccd0ac50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjc3Ng==", "url": "https://github.com/apache/pinot/pull/5419#discussion_r428222776", "bodyText": "True. I feel we may need to have a range of groupIdBound, and only do thread local for them. if it's too small or too large, maybe just create new objects without and with initial size.", "author": "xiangfu0", "createdAt": "2020-05-20T18:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxODE1OQ=="}], "type": "inlineReview"}, {"oid": "3698af0b749d6bee98f33ea6d5584633dbb23dac", "url": "https://github.com/apache/pinot/commit/3698af0b749d6bee98f33ea6d5584633dbb23dac", "message": "Adding more optimization for map initial size and discard size", "committedDate": "2020-05-20T22:06:54Z", "type": "forcePushed"}, {"oid": "02ccddd9675d2ef05b0946c841260d8d75996f94", "url": "https://github.com/apache/pinot/commit/02ccddd9675d2ef05b0946c841260d8d75996f94", "message": "Use thread local for groupby raw key holders", "committedDate": "2020-05-21T02:42:40Z", "type": "commit"}, {"oid": "9584e4c5886e15cc1f99f46dfd03515aa7dc8a94", "url": "https://github.com/apache/pinot/commit/9584e4c5886e15cc1f99f46dfd03515aa7dc8a94", "message": "Adding more optimization for map initial size and discard size", "committedDate": "2020-05-21T02:43:04Z", "type": "commit"}, {"oid": "9584e4c5886e15cc1f99f46dfd03515aa7dc8a94", "url": "https://github.com/apache/pinot/commit/9584e4c5886e15cc1f99f46dfd03515aa7dc8a94", "message": "Adding more optimization for map initial size and discard size", "committedDate": "2020-05-21T02:43:04Z", "type": "forcePushed"}]}