{"pr_number": 5608, "pr_title": "Pinot Configuration Refactoring - Phase 1", "pr_createdAt": "2020-06-23T14:44:57Z", "pr_url": "https://github.com/apache/pinot/pull/5608", "timeline": [{"oid": "d41fb36c0daec208c33e08edccb6550ee035b944", "url": "https://github.com/apache/pinot/commit/d41fb36c0daec208c33e08edccb6550ee035b944", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-06-23T14:51:22Z", "type": "forcePushed"}, {"oid": "f2c7d0cfb8c1e92d708bca13174c15bdeaa4ad5f", "url": "https://github.com/apache/pinot/commit/f2c7d0cfb8c1e92d708bca13174c15bdeaa4ad5f", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-06-23T14:59:19Z", "type": "forcePushed"}, {"oid": "f4a476d1c5d2d39de5269919922bc4b68ccb4fec", "url": "https://github.com/apache/pinot/commit/f4a476d1c5d2d39de5269919922bc4b68ccb4fec", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-06-23T15:05:32Z", "type": "forcePushed"}, {"oid": "e511c045d8d1e520c284fc47d236d3d737905590", "url": "https://github.com/apache/pinot/commit/e511c045d8d1e520c284fc47d236d3d737905590", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-06-23T15:29:10Z", "type": "forcePushed"}, {"oid": "d287a9fa0e342755ca9270d9ae4b0178c14219af", "url": "https://github.com/apache/pinot/commit/d287a9fa0e342755ca9270d9ae4b0178c14219af", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-06-23T19:58:06Z", "type": "forcePushed"}, {"oid": "bc971a4321c67a0867e50f5897626eb60cc5b59c", "url": "https://github.com/apache/pinot/commit/bc971a4321c67a0867e50f5897626eb60cc5b59c", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-06-23T22:48:26Z", "type": "forcePushed"}, {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df", "url": "https://github.com/apache/pinot/commit/fb7322076c92dedb9e2975fd22ef3db99227e8df", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-06-24T00:42:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MzQ4NQ==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r445683485", "bodyText": "java docs please", "author": "kishoreg", "createdAt": "2020-06-25T16:25:01Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {", "originalCommit": "fb7322076c92dedb9e2975fd22ef3db99227e8df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5NzI3Nw==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448097277", "bodyText": "+1. @daniellavoie can you list out the new conventions in the java docs? Like what we will do for env variable, properties, etc.", "author": "jackjlli", "createdAt": "2020-07-01T03:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MzQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5NjkyMQ==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448096921", "bodyText": "I saw the property names would be converted to lower cases, that means e.g. controller.upload.onlineToOfflineTimeout will become controller.upload.onlinetoofflinetimeout. Is that intentional?", "author": "jackjlli", "createdAt": "2020-07-01T03:36:54Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {\n+  public static final String CONFIG_PATHS_KEY = \"config.paths\";\n+\n+  private final CompositeConfiguration configuration;\n+\n+  public PinotConfiguration() {\n+    this(new HashMap<>());\n+  }\n+\n+  public PinotConfiguration(Configuration baseConfiguration) {\n+    this.configuration =\n+        new CompositeConfiguration(computeConfigurationsFromSources(baseConfiguration, new HashMap<>()));\n+  }\n+\n+  public PinotConfiguration(Map<String, Object> baseProperties) {\n+    this(baseProperties, new HashMap<>());\n+  }\n+\n+  public PinotConfiguration(Map<String, Object> baseProperties, Map<String, String> environmentVariables) {\n+    this.configuration =\n+        new CompositeConfiguration(computeConfigurationsFromSources(baseProperties, environmentVariables));\n+  }\n+\n+  public PinotConfiguration(PinotFSSpec pinotFSSpec) {\n+    this(Optional.ofNullable(pinotFSSpec.getConfigs())\n+        .map(configs -> configs.entrySet().stream().collect(\n+            Collectors.<Entry<String, String>, String, Object> toMap(Entry::getKey, entry -> entry.getValue())))\n+        .orElseGet(() -> new HashMap<>()));\n+  }\n+\n+  /**\n+   * Overwrites a property value in memory.\n+   * \n+   * @param name of the property to append in memory. Applies relaxed binding on the property name.\n+   * @param value to overwrite in memory\n+   * \n+   * @deprecated Configurations should be immutable. Prefer creating a new {@link #PinotConfiguration} with base properties to overwrite properties.\n+   */\n+  public void addProperty(String name, Object value) {\n+    configuration.addProperty(relaxPropertyName(name), value);\n+  }\n+\n+  public PinotConfiguration clone() {\n+    return new PinotConfiguration(ConfigurationUtils.cloneConfiguration(configuration));\n+  }\n+\n+  private static List<Configuration> computeConfigurationsFromSources(Configuration baseConfiguration,\n+      Map<String, String> environmentVariables) {\n+    return computeConfigurationsFromSources(relaxConfigurationKeys(baseConfiguration), environmentVariables);\n+  }\n+\n+  private static List<Configuration> computeConfigurationsFromSources(Map<String, Object> baseProperties,\n+      Map<String, String> environmentVariables) {\n+    Map<String, Object> relaxedBaseProperties = relaxProperties(baseProperties);\n+    Map<String, String> relaxedEnvVariables = relaxEnvironmentVariables(environmentVariables);\n+\n+    Stream<Configuration> propertiesFromConfigPaths = Stream\n+        .of(Optional.ofNullable(relaxedBaseProperties.get(CONFIG_PATHS_KEY)).map(Object::toString),\n+            Optional.ofNullable(relaxedEnvVariables.get(CONFIG_PATHS_KEY)))\n+\n+        .filter(Optional::isPresent).map(Optional::get)\n+\n+        .flatMap(configPaths -> Arrays.stream(configPaths.split(\",\")))\n+\n+        .map(PinotConfiguration::loadProperties);\n+\n+    return Stream.concat(Stream.of(relaxedBaseProperties, relaxedEnvVariables).map(MapConfiguration::new),\n+        propertiesFromConfigPaths).collect(Collectors.toList());\n+  }\n+\n+  public boolean containsKey(String key) {\n+    return configuration.containsKey(relaxPropertyName(key));\n+  }\n+\n+  public List<String> getKeys() {\n+    return CommonsConfigurationUtils.getKeys(configuration);\n+  }\n+\n+  public String getProperty(String name) {\n+    return getProperty(name, configuration);\n+  }\n+\n+  private static String getProperty(String name, Configuration configuration) {\n+    return Optional.of(configuration.getStringArray(relaxPropertyName(name)))\n+\n+        .filter(values -> values.length > 0)\n+\n+        .map(Arrays::stream)\n+\n+        .map(stream -> stream.collect(Collectors.joining(\",\")))\n+\n+        .orElse(null);\n+  }\n+\n+  public <T> T getProperty(String name, Class<T> returnType) {\n+    return getProperty(name, null, returnType);\n+  }\n+\n+  public List<String> getProperty(String name, List<String> defaultValue) {\n+    return Optional\n+        .of(Arrays.stream(configuration.getStringArray(relaxPropertyName(name))).collect(Collectors.toList()))\n+        .filter(list -> !list.isEmpty()).orElse(defaultValue);\n+  }\n+\n+  public Object getRawProperty(String name) {\n+    return getRawProperty(name, null);\n+  }\n+\n+  public Object getRawProperty(String name, Object defaultValue) {\n+    String relaxedPropertyName = relaxPropertyName(name);\n+    if (!configuration.containsKey(relaxedPropertyName)) {\n+      return defaultValue;\n+    }\n+\n+    return configuration.getProperty(relaxedPropertyName);\n+  }\n+\n+  public String getProperty(String name, String defaultValue) {\n+    return getRawProperty(name, defaultValue).toString();\n+  }\n+\n+  private <T> T getProperty(String name, T defaultValue, Class<T> returnType) {\n+    String relaxedPropertyName = relaxPropertyName(name);\n+    if (!configuration.containsKey(relaxedPropertyName)) {\n+      return defaultValue;\n+    }\n+\n+    return PropertyConverter.convert(getRawProperty(name, defaultValue), returnType);\n+  }\n+\n+  public boolean getProperty(String name, boolean defaultValue) {\n+    return getProperty(name, defaultValue, Boolean.class);\n+  }\n+\n+  public int getProperty(String name, int defaultValue) {\n+    return getProperty(name, defaultValue, Integer.class);\n+  }\n+\n+  public long getProperty(String name, long defaultValue) {\n+    return getProperty(name, defaultValue, Long.class);\n+  }\n+\n+  public double getProperty(String name, double defaultValue) {\n+    return getProperty(name, defaultValue, Double.class);\n+  }\n+\n+  private static Configuration loadProperties(String configPath) {\n+    try {\n+      PropertiesConfiguration propertiesConfiguration = new PropertiesConfiguration();\n+\n+      propertiesConfiguration.setIOFactory(new ConfigFilePropertyReaderFactory());\n+      if (configPath.startsWith(\"classpath:\")) {\n+        propertiesConfiguration\n+            .load(PinotConfiguration.class.getResourceAsStream(configPath.substring(\"classpath:\".length())));\n+      } else {\n+        propertiesConfiguration.load(configPath);\n+      }\n+\n+      return propertiesConfiguration;\n+    } catch (ConfigurationException e) {\n+      throw new RuntimeException(\"Could not read properties from \" + configPath, e);\n+    }\n+  }\n+\n+  private static Map<String, Object> relaxConfigurationKeys(Configuration configuration) {\n+    return CommonsConfigurationUtils.getKeysStream(configuration)\n+\n+        .collect(Collectors.toMap(PinotConfiguration::relaxPropertyName, key -> getProperty(key, configuration)));\n+  }\n+\n+  private static Map<String, String> relaxEnvironmentVariables(Map<String, String> environmentVariables) {\n+    return environmentVariables.entrySet().stream().filter(entry -> entry.getKey().startsWith(\"PINOT_\"))\n+        .collect(Collectors.toMap(PinotConfiguration::relaxEnvVarName, Entry::getValue));\n+  }\n+\n+  private static String relaxEnvVarName(Entry<String, String> envVarEntry) {\n+    return envVarEntry.getKey().substring(6).replace(\"_\", \".\").toLowerCase();\n+  }\n+\n+  private static Map<String, Object> relaxProperties(Map<String, Object> properties) {\n+    return properties.entrySet().stream()\n+        .collect(Collectors.toMap(PinotConfiguration::relaxPropertyName, Entry::getValue));\n+  }\n+\n+  private static String relaxPropertyName(Entry<String, Object> propertyEntry) {\n+    return relaxPropertyName(propertyEntry.getKey());\n+  }\n+\n+  private static String relaxPropertyName(String propertyName) {\n+    return propertyName.replace(\"-\", \"\").toLowerCase();", "originalCommit": "fb7322076c92dedb9e2975fd22ef3db99227e8df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2MjU1Nw==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448362557", "bodyText": "This is an intentional behaviour. To support properties provided through environment variables, the relaxed binding mechanism sanitize all properties inserted and extracted from PinotConfiguration. There is no breaking change since a value configured with controller.upload.onlineToOfflineTimeout will be resolvable with the any of the following configs key:\n\ncontroller.upload.onlineToOfflineTimeout\ncontroller.upload.onlinetoofflinetimeout\ncontroller.upload.online-to-offline-timeout\nPINOT_CONTROLLER_UPLOAD_ONLINETOOFFLINETIMEOUT", "author": "daniellavoie", "createdAt": "2020-07-01T13:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5NjkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5Nzc1Ng==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448097756", "bodyText": "import static org.apache.pinot.common.utils.CommonConstants.Helix.*;", "author": "jackjlli", "createdAt": "2020-07-01T03:40:40Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -18,19 +18,54 @@\n  */\n package org.apache.pinot.server.starter.helix;\n \n-import com.google.common.base.Preconditions;\n-import com.google.common.collect.ImmutableList;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.CONFIG_OF_SERVER_FLAPPING_TIME_WINDOW_MS;", "originalCommit": "fb7322076c92dedb9e2975fd22ef3db99227e8df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzNDk5MA==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448434990", "bodyText": "I'm using our pinot code style for eclipse which replaces imports org.apache.pinot.common.utils.CommonConstants.Helix.* to the explicit constant. Should we update the code style template? I typically prefer to stay consistent to what can be automated.", "author": "daniellavoie", "createdAt": "2020-07-01T15:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5Nzc1Ng=="}], "type": "inlineReview"}, {"oid": "01ae67c4064d24df6fab921d26c23ad0990456b7", "url": "https://github.com/apache/pinot/commit/01ae67c4064d24df6fab921d26c23ad0990456b7", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-07-01T15:10:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwODI2NA==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448608264", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <pPinot services may retreived configurations from PinotConfiguration independently from any source of configuration. \n          \n          \n            \n             * <p>\n          \n          \n            \n             * Pinot services may retreived configurations from PinotConfiguration independently from any source of configuration.", "author": "jackjlli", "createdAt": "2020-07-01T20:48:29Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+/**\n+ * <p>\n+ * Provides a configuration abstraction for Pinot to decouple services from configuration sources and frameworks.\n+ * </p>\n+ * <pPinot services may retreived configurations from PinotConfiguration independently from any source of configuration. ", "originalCommit": "01ae67c4064d24df6fab921d26c23ad0990456b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMDI2NQ==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448610265", "bodyText": "Thanks for adding this. It'd be good include the priority to this java docs as well, like the one you mentioned in the description:\nThe priority is established as follow: Base properties > Env variables > Config Files", "author": "jackjlli", "createdAt": "2020-07-01T20:52:52Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+/**\n+ * <p>\n+ * Provides a configuration abstraction for Pinot to decouple services from configuration sources and frameworks.", "originalCommit": "01ae67c4064d24df6fab921d26c23ad0990456b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTI2MQ==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r449141261", "bodyText": "For Phase 1, env variables are not yet taken into account. I planed on introducing this in a future incremental change. I'll make sure to update the javadoc accordinly when it will be effective. Unless you feel this PR is solid enough to introduce env variables imediately.", "author": "daniellavoie", "createdAt": "2020-07-02T16:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMDI2NQ=="}], "type": "inlineReview"}, {"oid": "b7a084f57098505630e8ecf9abba64e11935c40d", "url": "https://github.com/apache/pinot/commit/b7a084f57098505630e8ecf9abba64e11935c40d", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-07-02T16:43:09Z", "type": "forcePushed"}, {"oid": "394e7fedcf7f22f705227c6756f55e116dc6f74c", "url": "https://github.com/apache/pinot/commit/394e7fedcf7f22f705227c6756f55e116dc6f74c", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-07-02T17:08:10Z", "type": "forcePushed"}, {"oid": "327b4a1af951048242044ba34f4bbbef167fec78", "url": "https://github.com/apache/pinot/commit/327b4a1af951048242044ba34f4bbbef167fec78", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-07-02T19:07:16Z", "type": "forcePushed"}, {"oid": "40b0bc17c9e851fe6291631f6a622fe038ada3c7", "url": "https://github.com/apache/pinot/commit/40b0bc17c9e851fe6291631f6a622fe038ada3c7", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-07-03T13:52:39Z", "type": "forcePushed"}, {"oid": "c6e4440ab7c939612ab0264958fb52b6bcd875ef", "url": "https://github.com/apache/pinot/commit/c6e4440ab7c939612ab0264958fb52b6bcd875ef", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-07-03T14:34:34Z", "type": "forcePushed"}, {"oid": "930d95240c0fa2d4b04fe1de0e00f9c3a4e6319a", "url": "https://github.com/apache/pinot/commit/930d95240c0fa2d4b04fe1de0e00f9c3a4e6319a", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-07-03T15:10:30Z", "type": "commit"}, {"oid": "930d95240c0fa2d4b04fe1de0e00f9c3a4e6319a", "url": "https://github.com/apache/pinot/commit/930d95240c0fa2d4b04fe1de0e00f9c3a4e6319a", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`", "committedDate": "2020-07-03T15:10:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3MTQ0NA==", "url": "https://github.com/apache/pinot/pull/5608#discussion_r445771444", "bodyText": "shouldn't this be returning pinotconfiguration?", "author": "kishoreg", "createdAt": "2020-06-25T18:53:29Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java", "diffHunk": "@@ -120,7 +121,7 @@ public boolean execute()\n     }\n   }\n \n-  private Configuration getBrokerConf()\n+  private Map<String, Object> getBrokerConf()", "originalCommit": "fb7322076c92dedb9e2975fd22ef3db99227e8df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}