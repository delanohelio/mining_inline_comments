{"pr_number": 2395, "pr_title": "fix #2344 migrate reactor-core tests to junit5", "pr_createdAt": "2020-09-22T15:42:41Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2395", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r492850812", "bodyText": "IMO we should go with AssertJ and not introduce an intermediate step that we will need to change later", "author": "bsideup", "createdAt": "2020-09-22T15:55:12Z", "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -26,29 +26,30 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import org.junit.AfterClass;\n+import org.junit.jupiter.api.AfterAll;\n import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import reactor.core.Exceptions;\n import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Schedulers;\n import reactor.test.StepVerifier;\n \n import static org.assertj.core.api.AssertionsForClassTypes.*;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "originalCommit": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MTc4OA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493371788", "bodyText": "Well, those 250+ manual changes are done now, so if that's a stepping stone for automatic migration to assertJ, I'd rather use them :).", "author": "ericbottard", "createdAt": "2020-09-23T09:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3NDI2MA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493374260", "bodyText": "Although I am sorry that you spent time on it, I think \"already done manually\" isn't a good argument in favour of introducing a \"legacy\"\nI see no point in merging the use of org.junit.jupiter.api.Assertions.assertThrows while we could go with AssertJ from the beginning.", "author": "bsideup", "createdAt": "2020-09-23T09:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3ODAyNg==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493378026", "bodyText": "As I said, I hope it's easier to migrate (via plugin or dumb search/replace) from Assertions.assertThrows to assertJ than from @Test(expected = Foo.class) to assertJ. I'll take a look at it (but initial look I had to assertJ migration was also heavy work, as stated in the PR comment)", "author": "ericbottard", "createdAt": "2020-09-23T09:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r492851163", "bodyText": "nit: I would avoid using short lambda syntax for multiline lambdas", "author": "bsideup", "createdAt": "2020-09-22T15:55:41Z", "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -98,32 +99,36 @@ public void blockingLastTimeout() {\n \t\t               .blockLast(Duration.ofMillis(1))).isNull();\n \t}\n \n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void blockingFirstError() {\n-\t\tFlux.error(new RuntimeException(\"test\"))\n-\t\t    .publishOn(scheduler)\n-\t\t    .blockFirst();\n+\t\tassertThrows(RuntimeException.class, () ->", "originalCommit": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3NTM1MA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493375350", "bodyText": "Can you clarify exactly the style you expect on a concrete case (this one for example)?\nThis is the result of manual editing, but always applying the same kind of repetitive keystrokes, also favoring less diff noise I thought.", "author": "ericbottard", "createdAt": "2020-09-23T09:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NDI5OQ==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493384299", "bodyText": "public void blockingFirstError() {\n\tassertThrows(RuntimeException.class, () ->\n\t\t\tFlux.error(new RuntimeException(\"test\"))\n\t\t\t    .publishOn(scheduler)\n\t\t\t    .blockFirst());\n}\nvs:\npublic void blockingFirstError() {\n\tassertThrows(RuntimeException.class, () -> {\n\t\tFlux.error(new RuntimeException(\"test\"))\n\t\t    .publishOn(scheduler)\n\t\t    .blockFirst();\n\t});\n}\nless indentation, easier to match the blocks/parenthesises.\nMy suggestion would also help with the diff noise, btw", "author": "bsideup", "createdAt": "2020-09-23T09:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMjAyNw==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493412027", "bodyText": "It's quite tedious sadly.", "author": "ericbottard", "createdAt": "2020-09-23T10:15:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQyOTQwMA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493429400", "bodyText": "huh? \ud83e\udd14", "author": "bsideup", "createdAt": "2020-09-23T10:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4NTA4Mg==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494185082", "bodyText": "Could you please clarify this change?", "author": "bsideup", "createdAt": "2020-09-24T09:51:15Z", "path": "buildSrc/src/main/java/io/reactor/gradle/JavaConventions.java", "diffHunk": "@@ -59,6 +59,8 @@ private void applyJavaConvention(Project project) {\n \t\t\t\t\t       \"-Xlint:processing\",\n \t\t\t\t\t       \"-Xlint:static\",\n \t\t\t\t\t       \"-Xlint:try\",\n+\t\t\t\t\t\t   \"-Xmaxerrs\", \"1000\",", "originalCommit": "72858d9255ed3b920910f757ad41f4d4c25c50e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MTE5MQ==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494191191", "bodyText": "I can since I did a similarly large change in the past (but abandoned it): javac will only show 100 errors by default. it is a bit cumbersome and quite disheartening to fix these 100 errors only to find 100 new ones have appeared (because there is actually a total of eg. 384 errors in the codebase)", "author": "simonbasle", "createdAt": "2020-09-24T10:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4NTA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NDM0Ng==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494194346", "bodyText": "yes, this is something that helped me grasp the total amount of errors I needed to fix (and where). May not need to be left in the final merge.", "author": "ericbottard", "createdAt": "2020-09-24T10:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4NTA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjcwOA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494206708", "bodyText": "knowledge sharing, no action needed:\nwhen it comes to assertThatExceptionOfType + isThrownBy, sometimes it makes sense to put isThrownBy\nat the same line as assertThatExceptionOfType. It will result in much less indentation of lambda's body :)", "author": "bsideup", "createdAt": "2020-09-24T10:28:19Z", "path": "reactor-core/src/test/java/reactor/core/publisher/BaseSubscriberTest.java", "diffHunk": "@@ -134,35 +136,38 @@ protected void hookFinally(SignalType type) {\n \t\tassertThat(error.get(), is(instanceOf(IllegalStateException.class)));\n \t}\n \n-\t@Test(expected = OutOfMemoryError.class)\n+\t@Test\n \tpublic void onSubscribeFatalThrown() {\n \t\tFlux<String> flux = Flux.just(\"foo\");\n \t\tAtomicReference<Throwable> error = new AtomicReference<>();\n \t\tAtomicReference<SignalType> checkFinally = new AtomicReference<>();\n \n-\t\tflux.subscribe(new BaseSubscriber<String>() {\n-\t\t\t@Override\n-\t\t\tprotected void hookOnSubscribe(Subscription subscription) {\n-\t\t\t\tthrow new OutOfMemoryError(\"boom\");\n-\t\t\t}\n+\t\tassertThatExceptionOfType(OutOfMemoryError.class)\n+\t\t\t\t.isThrownBy(() -> {", "originalCommit": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1ODYzNA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494258634", "bodyText": "That's actually worth doing I think. Let me try that.", "author": "ericbottard", "createdAt": "2020-09-24T12:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwODE0Ng==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494208146", "bodyText": "unused?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "author": "bsideup", "createdAt": "2020-09-24T10:30:56Z", "path": "reactor-core/src/test/java/reactor/core/publisher/DirectProcessorTest.java", "diffHunk": "@@ -16,40 +16,54 @@\n package reactor.core.publisher;\n \n import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscriber;\n import reactor.core.Scannable;\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "originalCommit": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1NzY1MA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494257650", "bodyText": "good catch", "author": "ericbottard", "createdAt": "2020-09-24T12:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwODE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NDkxNg==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494264916", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "author": "bsideup", "createdAt": "2020-09-24T12:14:12Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRangeTest.java", "diffHunk": "@@ -25,6 +25,8 @@\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "originalCommit": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTEyNw==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "author": "bsideup", "createdAt": "2020-09-24T12:14:35Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRepeatTest.java", "diffHunk": "@@ -19,16 +19,22 @@\n import java.time.Duration;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "originalCommit": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTM5MQ==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265391", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "author": "bsideup", "createdAt": "2020-09-24T12:14:56Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxReplayTest.java", "diffHunk": "@@ -38,6 +38,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "originalCommit": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTY0Ng==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265646", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "author": "bsideup", "createdAt": "2020-09-24T12:15:21Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -45,6 +44,7 @@\n import reactor.util.function.Tuples;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "originalCommit": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTg5MA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "author": "bsideup", "createdAt": "2020-09-24T12:15:42Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxScanSeedTest.java", "diffHunk": "@@ -16,23 +16,22 @@\n \n package reactor.core.publisher;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.assertj.core.api.Assertions;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscription;\n \n import reactor.core.CoreSubscriber;\n import reactor.core.Scannable;\n import reactor.test.publisher.FluxOperatorTest;\n import reactor.test.subscriber.AssertSubscriber;\n import reactor.test.util.RaceTestUtils;\n-import reactor.util.context.Context;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "originalCommit": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2NjY4Mg==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501766682", "bodyText": "tabs is ideally what we'd use everywhere, so switching to tabs on modified lines was \ud83d\udc4d", "author": "simonbasle", "createdAt": "2020-10-08T14:28:46Z", "path": "reactor-core/src/test/java/reactor/core/publisher/MonoCallableTest.java", "diffHunk": "@@ -24,22 +24,20 @@\n import org.assertj.core.data.Offset;\n import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscription;\n-\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n \n public class MonoCallableTest {\n \n     @Test\n     public void nullCallable() {\n-\t\tassertThrows(NullPointerException.class, () -> {\n-\t\t\tMono.<Integer>fromCallable(null);\n-\t\t});\n-\t}\n+        assertThatExceptionOfType(NullPointerException.class).isThrownBy(() -> {", "originalCommit": "9b444e40038216e3449ed600a8da202f9aee70d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2Nzg3NA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501767874", "bodyText": "nitpick: put on one line? the })); below I mean", "author": "simonbasle", "createdAt": "2020-10-08T14:30:13Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -286,8 +287,8 @@ final public void directScheduleAndDisposeDelay() throws Exception {\n \t\t\ts.dispose();\n \t\t\tassertThat(s.isDisposed()).isTrue();\n \n-\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }));\n+\t\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> s.schedule(() -> {", "originalCommit": "9b444e40038216e3449ed600a8da202f9aee70d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODA3MQ==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768071", "bodyText": "nitpick: put back on one line", "author": "simonbasle", "createdAt": "2020-10-08T14:30:29Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -354,7 +355,8 @@ final public void directScheduleAndDisposePeriod() throws Exception {\n \n \t\t\tif (!shouldCheckDirectTimeScheduling()) {\n \t\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }, 10, TimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> {", "originalCommit": "9b444e40038216e3449ed600a8da202f9aee70d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODMxMw==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768313", "bodyText": "nitpick: put back on one line", "author": "simonbasle", "createdAt": "2020-10-08T14:30:49Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -257,7 +257,8 @@ final public void directScheduleAndDisposeDelay() throws Exception {\n \n \t\t\tif (!shouldCheckDirectTimeScheduling()) {\n \t\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }, 10, TimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> {", "originalCommit": "9b444e40038216e3449ed600a8da202f9aee70d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTMxOA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r503841318", "bodyText": "ugly line split not fixed for that one line", "author": "simonbasle", "createdAt": "2020-10-13T10:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODczNg==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768736", "bodyText": "nitpick: put back on one line", "author": "simonbasle", "createdAt": "2020-10-08T14:31:16Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -386,8 +388,8 @@ final public void directScheduleAndDisposePeriod() throws Exception {\n \t\t\ts.dispose();\n \t\t\tassertThat(s.isDisposed()).isTrue();\n \n-\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }));\n+\t\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> s.schedule(() -> {", "originalCommit": "9b444e40038216e3449ed600a8da202f9aee70d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODk4OA==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768988", "bodyText": "nitpick: put back the empty lambdas on one line", "author": "simonbasle", "createdAt": "2020-10-08T14:31:36Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "diffHunk": "@@ -512,21 +512,25 @@ public void testShutdownOldOnSetFactory() {\n \n \n \t\tAssert.assertNotSame(cachedTimerOld, standaloneTimer);\n-\t\tAssert.assertNotNull(cachedTimerOld.schedule(() -> {}));\n-\t\tAssert.assertNotNull(standaloneTimer.schedule(() -> {}));\n+\t\tAssert.assertNotNull(cachedTimerOld.schedule(() -> {", "originalCommit": "9b444e40038216e3449ed600a8da202f9aee70d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "afad7802733ad5958d0748292e05b52e76cab899", "url": "https://github.com/reactor/reactor-core/commit/afad7802733ad5958d0748292e05b52e76cab899", "message": "fix #2344 migrate tests to junit 5\n\nSwitch to assertJ for exception support", "committedDate": "2020-10-13T10:03:10Z", "type": "commit"}, {"oid": "afad7802733ad5958d0748292e05b52e76cab899", "url": "https://github.com/reactor/reactor-core/commit/afad7802733ad5958d0748292e05b52e76cab899", "message": "fix #2344 migrate tests to junit 5\n\nSwitch to assertJ for exception support", "committedDate": "2020-10-13T10:03:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDg3Mw==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r503840873", "bodyText": "still some ugly line split there", "author": "simonbasle", "createdAt": "2020-10-13T10:27:43Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "diffHunk": "@@ -521,8 +521,8 @@ public void testShutdownOldOnSetFactory() {\n \t\tAssert.assertEquals(cachedTimerNew, Schedulers.newSingle(\"unused\"));\n \t\tAssert.assertNotSame(cachedTimerNew, cachedTimerOld);\n \t\t//assert that the old factory\"s cached scheduler was shut down\n-\t\tAssertions.assertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t          .isThrownBy(() -> cachedTimerOld.schedule(() -> {}));\n+\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> cachedTimerOld.schedule(() -> {", "originalCommit": "afad7802733ad5958d0748292e05b52e76cab899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyMjA5MQ==", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r504622091", "bodyText": "given the effort involved in the merge commits, let's forget about these minor cosmetics polishes", "author": "simonbasle", "createdAt": "2020-10-14T12:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDg3Mw=="}], "type": "inlineReview"}]}