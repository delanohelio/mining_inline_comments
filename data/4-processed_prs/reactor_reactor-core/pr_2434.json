{"pr_number": 2434, "pr_title": "fix #2433 Polish Sinks javadoc warnings", "pr_createdAt": "2020-10-09T14:56:04Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2434", "timeline": [{"oid": "e75078058fb0fea387b098bd22c5203fc7a0d2f7", "url": "https://github.com/reactor/reactor-core/commit/e75078058fb0fea387b098bd22c5203fc7a0d2f7", "message": "fix javadoc warnings", "committedDate": "2020-10-09T14:58:03Z", "type": "forcePushed"}, {"oid": "feeddd5f196931422649963522917dd404641822", "url": "https://github.com/reactor/reactor-core/commit/feeddd5f196931422649963522917dd404641822", "message": "fix javadoc warnings", "committedDate": "2020-10-09T15:51:55Z", "type": "commit"}, {"oid": "a9be94ddfa287177ea4bc69bc930693c2078bbc0", "url": "https://github.com/reactor/reactor-core/commit/a9be94ddfa287177ea4bc69bc930693c2078bbc0", "message": "fix javadoc warnings", "committedDate": "2020-10-09T15:54:37Z", "type": "commit"}, {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "url": "https://github.com/reactor/reactor-core/commit/9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "message": "remove javadoc warnings from Sinks", "committedDate": "2020-10-09T16:35:42Z", "type": "commit"}, {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "url": "https://github.com/reactor/reactor-core/commit/9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "message": "remove javadoc warnings from Sinks", "committedDate": "2020-10-09T16:35:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5Mzc2NQ==", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r502593765", "bodyText": "that javadoc is actually misleading. should be This processor was blocking and #onNext(Object)", "author": "simonbasle", "createdAt": "2020-10-09T18:07:02Z", "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "diffHunk": "@@ -54,8 +54,9 @@\n  * @author Stephane Maldini\n  * @deprecated To be removed in 3.5. Prefer clear cut usage of {@link Sinks} through\n  * variations of {@link Sinks.MulticastSpec#onBackpressureBuffer() Sinks.many().multicast().onBackpressureBuffer()}.\n- * This processor is blocking on {@link EmitterProcessor#emitNext(T)}. This behaviour can be implemented\n- * with the {@link Sinks} API by calling {@link Sinks#many()#tryEmitNext(T)} and retrying, e.g.:\n+ * This processor is blocking on {@link EmitterProcessor#tryEmitNext(Object)}.", "originalCommit": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5ODExNw==", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r503098117", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This processor is blocking on {@link EmitterProcessor#tryEmitNext(Object)}.\n          \n          \n            \n             * This processor was blocking in {@link EmitterProcessor#onNext(Object)}.", "author": "simonbasle", "createdAt": "2020-10-12T07:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5Mzc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NDk2Mg==", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r502594962", "bodyText": "could be put back on two or even one line (too many line returns below)", "author": "simonbasle", "createdAt": "2020-10-09T18:09:35Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -268,7 +268,9 @@ public EmitResult getReason() {\n \t\t/**\n \t\t * A {@link Sinks.One} that works like a conceptual promise: it can be completed\n \t\t * with or without a value at any time, but only once. This completion is replayed to late subscribers.\n-\t\t * Calling {@link One#emitValue(Object)} (or {@link One#tryEmitValue(Object)}) is enough and will\n+\t\t * Calling {@link One#emitValue(Object, Sinks.EmitFailureHandler)} (or", "originalCommit": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NTQ2NA==", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r502595464", "bodyText": "too many line returns", "author": "simonbasle", "createdAt": "2020-10-09T18:10:29Z", "path": "reactor-core/src/main/java/reactor/util/retry/RetryBackoffSpec.java", "diffHunk": "@@ -371,12 +371,15 @@ public RetryBackoffSpec doAfterRetryAsync(\n \t * Set the generator for the {@link Exception} to be propagated when the maximum amount of retries\n \t * is exhausted. By default, throws an {@link Exceptions#retryExhausted(String, Throwable)} with the\n \t * message reflecting the total attempt index, transient attempt index and maximum retry count.\n-\t * The cause of the last {@link RetrySignal} is also added as the exception's cause.\n+\t * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added", "originalCommit": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5OTAyMw==", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r503099023", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t * Calling {@link One#emitValue(Object, Sinks.EmitFailureHandler)} (or\n          \n          \n            \n            \t\t * {@link One#tryEmitValue(Object)})\n          \n          \n            \n            \t\t * is enough and will\n          \n          \n            \n            \t\t * implicitly produce a {@link Subscriber#onComplete()} signal as well.\n          \n          \n            \n            \t\t * Calling {@link One#emitValue(Object, Sinks.EmitFailureHandler)} (or\n          \n          \n            \n            \t\t * {@link One#tryEmitValue(Object)}) is enough and will implicitly produce\n          \n          \n            \n            \t\t * a {@link Subscriber#onComplete()} signal as well.", "author": "simonbasle", "createdAt": "2020-10-12T07:45:25Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -268,7 +268,9 @@ public EmitResult getReason() {\n \t\t/**\n \t\t * A {@link Sinks.One} that works like a conceptual promise: it can be completed\n \t\t * with or without a value at any time, but only once. This completion is replayed to late subscribers.\n-\t\t * Calling {@link One#emitValue(Object)} (or {@link One#tryEmitValue(Object)}) is enough and will\n+\t\t * Calling {@link One#emitValue(Object, Sinks.EmitFailureHandler)} (or\n+\t\t * {@link One#tryEmitValue(Object)})\n+\t\t * is enough and will\n \t\t * implicitly produce a {@link Subscriber#onComplete()} signal as well.", "originalCommit": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5OTQ1NA==", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r503099454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added\n          \n          \n            \n            \t * as\n          \n          \n            \n            \t * the exception's cause.\n          \n          \n            \n            \t * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added\n          \n          \n            \n            \t * as the exception's cause.", "author": "simonbasle", "createdAt": "2020-10-12T07:46:12Z", "path": "reactor-core/src/main/java/reactor/util/retry/RetryBackoffSpec.java", "diffHunk": "@@ -371,12 +371,15 @@ public RetryBackoffSpec doAfterRetryAsync(\n \t * Set the generator for the {@link Exception} to be propagated when the maximum amount of retries\n \t * is exhausted. By default, throws an {@link Exceptions#retryExhausted(String, Throwable)} with the\n \t * message reflecting the total attempt index, transient attempt index and maximum retry count.\n-\t * The cause of the last {@link RetrySignal} is also added as the exception's cause.\n+\t * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added\n+\t * as\n+\t * the exception's cause.", "originalCommit": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a018a7d341bfd5f88d6ed3f659941def3a4809fa", "url": "https://github.com/reactor/reactor-core/commit/a018a7d341bfd5f88d6ed3f659941def3a4809fa", "message": "Apply minor formatting and rephrasing polish", "committedDate": "2020-10-12T07:47:54Z", "type": "commit"}]}