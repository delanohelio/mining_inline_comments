{"pr_number": 2414, "pr_title": "[polish] Improve Sinks javadoc in anticipation of deprecated emit API removal", "pr_createdAt": "2020-10-06T08:55:30Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2414", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDExNjQ2NQ==", "url": "https://github.com/reactor/reactor-core/pull/2414#discussion_r500116465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Other than instructing to retry, the handler are allowed to have side effects\n          \n          \n            \n            \t * Other than instructing to retry, the handlers are allowed to have side effects", "author": "bsideup", "createdAt": "2020-10-06T08:58:43Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -191,9 +198,13 @@ public Emission getReason() {\n \t}\n \n \t/**\n-\t * A handler for any non-successful emission result from operations\n-\t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n-\t * that allows retrying or failing the operation.\n+\t * A handler supporting the emit API (eg. {@link Many#emitNext(Object, EmitFailureHandler)}),\n+\t * checking non-successful emission results from underlying {@link Many#tryEmitNext(Object) tryEmit}\n+\t * API calls to decide whether or not such calls should be retried.\n+\t * Other than instructing to retry, the handler are allowed to have side effects", "originalCommit": "e4f3245c9bf69162e91431a1c2fc71b1d0270139", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDExNjkyNw==", "url": "https://github.com/reactor/reactor-core/pull/2414#discussion_r500116927", "bodyText": "not 100% sure about this one, but:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * like parking the current thread for longer retry loops. They don't however influence the\n          \n          \n            \n            \t * like parking the current thread for longer retry loops. They don't, however, influence the", "author": "bsideup", "createdAt": "2020-10-06T08:59:30Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -191,9 +198,13 @@ public Emission getReason() {\n \t}\n \n \t/**\n-\t * A handler for any non-successful emission result from operations\n-\t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n-\t * that allows retrying or failing the operation.\n+\t * A handler supporting the emit API (eg. {@link Many#emitNext(Object, EmitFailureHandler)}),\n+\t * checking non-successful emission results from underlying {@link Many#tryEmitNext(Object) tryEmit}\n+\t * API calls to decide whether or not such calls should be retried.\n+\t * Other than instructing to retry, the handler are allowed to have side effects\n+\t * like parking the current thread for longer retry loops. They don't however influence the", "originalCommit": "e4f3245c9bf69162e91431a1c2fc71b1d0270139", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTk0Mg==", "url": "https://github.com/reactor/reactor-core/pull/2414#discussion_r500829942", "bodyText": "I would have inverted those two lines as orThrow is used after the comment and though one may not really understand where does it comes from", "author": "aneveu", "createdAt": "2020-10-07T08:27:42Z", "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -193,21 +193,21 @@ Compare the first example to the second example, shown in the following code:\n ====\n [source,java]\n ----\n-Sink<String> hotSource = Sinks.many().multicast().onBackpressureError();\n+Sinks.Many<String> hotSource = Sinks.many().unsafe().multicast().directBestEffort();\n \n Flux<String> hotFlux = hotSource.asFlux().map(String::toUpperCase);\n \n-\n hotFlux.subscribe(d -> System.out.println(\"Subscriber 1 to Hot Source: \"+d));\n \n-hotSource.next(\"blue\")\n-         .next(\"green\");\n+hotSource.emitNext(\"blue\", FAIL_FAST);\n+//note: orThrow is an alternative to emitNext+Sinks.EmitFailureHandler.FAIL_FAST above, suitable for tests\n+hotSource.tryEmitNext(\"green\").orThrow();", "originalCommit": "ab517e7d7312eaf630b7dd8ef72f04487bf94d78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg3MDA2OQ==", "url": "https://github.com/reactor/reactor-core/pull/2414#discussion_r500870069", "bodyText": "I updated to use a callout. found a bad callout in an unrelated asciidoc file and fixed it as a separate commit, so I rebased the PR into 2 commits FYI", "author": "simonbasle", "createdAt": "2020-10-07T09:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTk0Mg=="}], "type": "inlineReview"}, {"oid": "a73fb828be1b3486484d074f66d2ecd5e1cd0491", "url": "https://github.com/reactor/reactor-core/commit/a73fb828be1b3486484d074f66d2ecd5e1cd0491", "message": "[doc] Polish Sinks doc accounting for RC1 and RC2 latest changes (#2414)\n\nCo-authored-by: Sergei Egorov <segorov@pivotal.io>", "committedDate": "2020-10-07T09:25:41Z", "type": "commit"}, {"oid": "7e74961a64b986fc6d9a1b6caa8627608c806017", "url": "https://github.com/reactor/reactor-core/commit/7e74961a64b986fc6d9a1b6caa8627608c806017", "message": "[doc] Polish metrics.adoc: fix callout\n\nReviewed-in: #2414", "committedDate": "2020-10-07T09:25:45Z", "type": "commit"}, {"oid": "7e74961a64b986fc6d9a1b6caa8627608c806017", "url": "https://github.com/reactor/reactor-core/commit/7e74961a64b986fc6d9a1b6caa8627608c806017", "message": "[doc] Polish metrics.adoc: fix callout\n\nReviewed-in: #2414", "committedDate": "2020-10-07T09:25:45Z", "type": "forcePushed"}]}