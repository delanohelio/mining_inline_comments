{"pr_number": 2194, "pr_title": "fix #2189 Ensure tools fat jar is the one published", "pr_createdAt": "2020-06-16T21:08:42Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2194", "timeline": [{"oid": "2d18dc66dee2566690fcc91892e983943172b00a", "url": "https://github.com/reactor/reactor-core/commit/2d18dc66dee2566690fcc91892e983943172b00a", "message": "Fix incorrect jar being published\n\nThe `reactor-tools` subproject is using the shadow plugin to create\na fat jar, and wants this fat jar to replace the main jar. To do so,\nthe normal jar that Gradle produces is replaced with a classifier,\n`original`, and the shadow jar is produced without classifier.\n\nThe publication is then configured to add the \"shadow\" jar to the\nnormal publication. However, this is incorrect: the Gradle component\nmodel describes that the \"apiElements\" and \"runtimeElements\" use\nthe output of the `jar` task as the main artifact. As a consequence,\nwhen publishing Gradle module metadata, the module file says that\nthe file to be fetched is the one produced by the `jar` task, which\nhas the `original` classifier.\n\nInstead, if the API and runtime of the `reactor-tools` project need\nto use the shadow jar, then the shadow jar needs to be set as the\nmain artifact.\n\nThis is what this commit does:\n\n- it replaces the default artifact that Gradle uses publication with\nthe \"shadow\" jar\n- it adds the \"original\" jar as an extra, out of context, artifact\nto upload alongside the shadow jar\n\nIn addition, it configures a dummy repository which can be used to\n\"see\" what Gradle would publish. By running the:\n\n`publishMavenJavaPublicationToMockRepository` task, Gradle will\ncreate a dummy repository in <rootDir>/build/repo which contains\nwhat it would upload to Artifactory. This way you can quickly\ncheck what is produced before actually releasing. In particular,\nyou can check the module files.\n\nNote that this problem doesn't happen with Maven consumers because\nMaven doesn't care about variants. Therefore, it only looks for the\n\"main\" jar based on its name. Gradle, on the other hand, is variant\naware, meaning that it will select an artifact based on the variant\ninformation found in the module file.\n\nThis file tells it to fetch the \"original\" file for the API, so it\ndoes.\n\nLast but not least, Gradle can actually model that both variants,\nthe \"shadow\" and the \"original\" ones are published, and let the\nconsumers choose which one they need.\n\nThis can be fixed in a separate PR if you are interested.\n\nFixes #2189", "committedDate": "2020-06-17T07:53:44Z", "type": "commit"}, {"oid": "2d18dc66dee2566690fcc91892e983943172b00a", "url": "https://github.com/reactor/reactor-core/commit/2d18dc66dee2566690fcc91892e983943172b00a", "message": "Fix incorrect jar being published\n\nThe `reactor-tools` subproject is using the shadow plugin to create\na fat jar, and wants this fat jar to replace the main jar. To do so,\nthe normal jar that Gradle produces is replaced with a classifier,\n`original`, and the shadow jar is produced without classifier.\n\nThe publication is then configured to add the \"shadow\" jar to the\nnormal publication. However, this is incorrect: the Gradle component\nmodel describes that the \"apiElements\" and \"runtimeElements\" use\nthe output of the `jar` task as the main artifact. As a consequence,\nwhen publishing Gradle module metadata, the module file says that\nthe file to be fetched is the one produced by the `jar` task, which\nhas the `original` classifier.\n\nInstead, if the API and runtime of the `reactor-tools` project need\nto use the shadow jar, then the shadow jar needs to be set as the\nmain artifact.\n\nThis is what this commit does:\n\n- it replaces the default artifact that Gradle uses publication with\nthe \"shadow\" jar\n- it adds the \"original\" jar as an extra, out of context, artifact\nto upload alongside the shadow jar\n\nIn addition, it configures a dummy repository which can be used to\n\"see\" what Gradle would publish. By running the:\n\n`publishMavenJavaPublicationToMockRepository` task, Gradle will\ncreate a dummy repository in <rootDir>/build/repo which contains\nwhat it would upload to Artifactory. This way you can quickly\ncheck what is produced before actually releasing. In particular,\nyou can check the module files.\n\nNote that this problem doesn't happen with Maven consumers because\nMaven doesn't care about variants. Therefore, it only looks for the\n\"main\" jar based on its name. Gradle, on the other hand, is variant\naware, meaning that it will select an artifact based on the variant\ninformation found in the module file.\n\nThis file tells it to fetch the \"original\" file for the API, so it\ndoes.\n\nLast but not least, Gradle can actually model that both variants,\nthe \"shadow\" and the \"original\" ones are published, and let the\nconsumers choose which one they need.\n\nThis can be fixed in a separate PR if you are interested.\n\nFixes #2189", "committedDate": "2020-06-17T07:53:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NzQ0MQ==", "url": "https://github.com/reactor/reactor-core/pull/2194#discussion_r441377441", "bodyText": "@melix just curious, why not already available publishToMavenLocal? Or would you recommend against using it?\n/cc @simonbasle", "author": "bsideup", "createdAt": "2020-06-17T08:35:49Z", "path": "gradle/setup.gradle", "diffHunk": "@@ -37,6 +37,12 @@ task javadocJar(type: Jar) {\n }\n \n publishing {\n+    repositories {", "originalCommit": "2d18dc66dee2566690fcc91892e983943172b00a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MzYyMQ==", "url": "https://github.com/reactor/reactor-core/pull/2194#discussion_r441383621", "bodyText": "I'm fighting hard to avoid using mavenLocal: it's a trashcan where every Maven project publishes things locally. Having this project-local repository makes it much easier to figure out what your project generates.", "author": "melix", "createdAt": "2020-06-17T08:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwNjkyOA==", "url": "https://github.com/reactor/reactor-core/pull/2194#discussion_r442106928", "bodyText": "Since mavenLocal is a pre-configured task in Gradle (unlike the mock repo), I guess the fight isn't over yet? :)\nMy suggestion is to not add a custom publication (that needs to be documented as well) and wait for Gradle to add it as a pre-configured task (if Gradle decides to deprecate & remove publishToMavenLocal).\n@simonbasle WDYT?", "author": "bsideup", "createdAt": "2020-06-18T09:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNjkzNQ==", "url": "https://github.com/reactor/reactor-core/pull/2194#discussion_r442306935", "bodyText": "I think there's no harm in keeping it as in the PR.\nwe're not talking about a separate publication but a repository, so it should have no impact on more \"standard\" Gradle tasks right @melix ?\nPlus publishToMavenLocal() does have legit use (eg. making a gradle-built artifact available to other projects built on the same CI, but with Maven) so it's not going to go anywhere (I guess).", "author": "simonbasle", "createdAt": "2020-06-18T15:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNTY4NA==", "url": "https://github.com/reactor/reactor-core/pull/2194#discussion_r442325684", "bodyText": "That's correct, I see no reason not to keep it, it just adds a repository to deploy to, if you want to. And yes, publishToMavenLocal() makes sense in some cases like interaction with Maven.", "author": "melix", "createdAt": "2020-06-18T15:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NzQ0MQ=="}], "type": "inlineReview"}]}