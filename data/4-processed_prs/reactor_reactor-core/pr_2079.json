{"pr_number": 2079, "pr_title": "Follow up to #1979 to avoid retryWhen ambiguity", "pr_createdAt": "2020-03-19T13:04:46Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2079", "timeline": [{"oid": "518d204e82efa2f83dbe0d8270163a1c2b00e92b", "url": "https://github.com/reactor/reactor-core/commit/518d204e82efa2f83dbe0d8270163a1c2b00e92b", "message": "Rework of #1979 to avoid compiler ambiguity, polish docs", "committedDate": "2020-03-19T13:04:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMjQzNQ==", "url": "https://github.com/reactor/reactor-core/pull/2079#discussion_r395022435", "bodyText": "in an abstract class, you may want to have a final method that wraps the user-provided one, so that we keep some control. Usually it makes it easier to make changes in future", "author": "bsideup", "createdAt": "2020-03-19T13:26:21Z", "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -41,19 +54,19 @@\n \t * the attempt is delayed as well. This method generates the companion, out of a {@link Flux} of {@link RetrySignal},\n \t * which itself can serve as the simplest form of retry companion (indefinitely and immediately retry on any error).\n \t *\n-\t * @param retrySignalCompanion the original {@link Flux} of {@link RetrySignal}, notifying of each source error that\n-\t * _might_ result in a retry attempt, with context around the error and current retry cycle.\n+\t * @param retrySignals the original {@link Flux} of {@link RetrySignal}, notifying of each source error that\n+\t * <i>might</i> result in a retry attempt, with context around the error and current retry cycle.\n \t * @return the actual companion to use, which might delay or limit retry attempts\n \t */\n-\tPublisher<?> generateCompanion(Flux<RetrySignal> retrySignalCompanion);\n+\tpublic abstract Publisher<?> generateCompanion(Flux<RetrySignal> retrySignals);", "originalCommit": "518d204e82efa2f83dbe0d8270163a1c2b00e92b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMzA2MQ==", "url": "https://github.com/reactor/reactor-core/pull/2079#discussion_r395023061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static RetryBackoffSpec fixedDelays(long maxAttempts, Duration fixedDelay) {\n          \n          \n            \n            \tpublic static RetryBackoffSpec fixedDelay(long maxAttempts, Duration fixedDelay) {\n          \n      \n    \n    \n  \n\nAlso, it would be nice to have one without maxAttempts", "author": "bsideup", "createdAt": "2020-03-19T13:27:21Z", "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -98,24 +111,47 @@ default RetrySignal copy() {\n \t *\n \t * @param maxAttempts the maximum number of retry attempts to allow\n \t * @param minBackoff the minimum {@link Duration} for the first backoff\n-\t * @return the builder for further configuration\n+\t * @return the exponential backoff spec for further configuration\n \t * @see RetryBackoffSpec#maxAttempts(long)\n \t * @see RetryBackoffSpec#minBackoff(Duration)\n \t */\n-\tstatic RetryBackoffSpec backoff(long maxAttempts, Duration minBackoff) {\n+\t//FIXME marble diagram\n+\tpublic static RetryBackoffSpec backoff(long maxAttempts, Duration minBackoff) {\n \t\treturn new RetryBackoffSpec(maxAttempts, t -> true, false, minBackoff, MAX_BACKOFF, 0.5d, Schedulers.parallel(),\n \t\t\t\tNO_OP_CONSUMER, NO_OP_CONSUMER, NO_OP_BIFUNCTION, NO_OP_BIFUNCTION,\n \t\t\t\tRetryBackoffSpec.BACKOFF_EXCEPTION_GENERATOR);\n \t}\n \n+\t/**\n+\t * A {@link RetryBackoffSpec} preconfigured for fixed delays (min backoff equals max backoff, no jitter), given a maximum number of retry attempts\n+\t * and the fixed {@link Duration} for the backoff.\n+\t * <p>\n+\t * Note that calling {@link RetryBackoffSpec#minBackoff(Duration)} or {@link RetryBackoffSpec#maxBackoff(Duration)} would switch\n+\t * back to an exponential backoff strategy.\n+\t *\n+\t * @param maxAttempts the maximum number of retry attempts to allow\n+\t * @param fixedDelay the {@link Duration} of the fixed delays\n+\t * @return the fixed delays spec for further configuration\n+\t * @see RetryBackoffSpec#maxAttempts(long)\n+\t * @see RetryBackoffSpec#minBackoff(Duration)\n+\t * @see RetryBackoffSpec#maxBackoff(Duration)\n+\t */\n+\t//FIXME marble diagram\n+\tpublic static RetryBackoffSpec fixedDelays(long maxAttempts, Duration fixedDelay) {", "originalCommit": "518d204e82efa2f83dbe0d8270163a1c2b00e92b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMjQ1Ng==", "url": "https://github.com/reactor/reactor-core/pull/2079#discussion_r395032456", "bodyText": "all of these start from maxAttempts though, except immediately()... I wonder about that last one tbh, and about whether or not we should encourage infinite attempts at all (even though the specs make it possible via maxAttempts(Long.MAX_VALUE) in effect)", "author": "simonbasle", "createdAt": "2020-03-19T13:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMzA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzE4OA==", "url": "https://github.com/reactor/reactor-core/pull/2079#discussion_r395047188", "bodyText": "I see no issue with infinite attempts, given that spec supports cancellation, and there can and most probably will be .timeout downstream", "author": "bsideup", "createdAt": "2020-03-19T14:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMzA2MQ=="}], "type": "inlineReview"}, {"oid": "d1cde9c8ffcbb597e48d095698ade93d55310ef0", "url": "https://github.com/reactor/reactor-core/commit/d1cde9c8ffcbb597e48d095698ade93d55310ef0", "message": "Internally store backoff Scheduler as Supplier, lazily evaluate it, allow reset to default", "committedDate": "2020-03-19T14:44:23Z", "type": "commit"}, {"oid": "01b59276fc237d434ab22cfb8578b9701bdd045b", "url": "https://github.com/reactor/reactor-core/commit/01b59276fc237d434ab22cfb8578b9701bdd045b", "message": "rename fixedDelays to fixedDelay", "committedDate": "2020-03-19T14:44:23Z", "type": "commit"}, {"oid": "3e90adb1b409dcbdbad98cb71465f77132e61be0", "url": "https://github.com/reactor/reactor-core/commit/3e90adb1b409dcbdbad98cb71465f77132e61be0", "message": "further remove builder word from javadocs", "committedDate": "2020-03-19T14:44:23Z", "type": "commit"}, {"oid": "335de6b49f399b0736fb3982bd61dca868cc22b1", "url": "https://github.com/reactor/reactor-core/commit/335de6b49f399b0736fb3982bd61dca868cc22b1", "message": "Add marble diagrams for Retry spec factories", "committedDate": "2020-03-19T16:39:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NDY2MA==", "url": "https://github.com/reactor/reactor-core/pull/2079#discussion_r395144660", "bodyText": "How about just from as the method name?", "author": "rstoyanchev", "createdAt": "2020-03-19T16:10:26Z", "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -126,13 +162,40 @@ static RetrySpec max(long max) {\n \t * errors resets the counter (see {@link RetrySpec#transientErrors(boolean)}).\n \t *\n \t * @param maxInARow the maximum number of retry attempts to allow in a row, reset by successful onNext\n-\t * @return the builder for further configuration\n+\t * @return the max in a row spec for further configuration\n \t * @see RetrySpec#maxAttempts(long)\n \t * @see RetrySpec#transientErrors(boolean)\n \t */\n-\tstatic RetrySpec maxInARow(long maxInARow) {\n+\t//FIXME marble diagram, point to it in RetrySpec#transientErrors javadoc\n+\tpublic static RetrySpec maxInARow(long maxInARow) {\n \t\treturn new RetrySpec(maxInARow, t -> true, true, NO_OP_CONSUMER, NO_OP_CONSUMER, NO_OP_BIFUNCTION, NO_OP_BIFUNCTION,\n \t\t\t\tRETRY_EXCEPTION_GENERATOR);\n \t}\n \n+\t/**\n+\t * A {@link RetrySpec} preconfigured for the most simplistic retry strategy: retry immediately and indefinitely\n+\t * (similar to {@link Flux#retry()}).\n+\t *\n+\t * @return the retry indefinitely spec for further configuration\n+\t */\n+\tpublic static RetrySpec indefinitely() {\n+\t\treturn new RetrySpec(Long.MAX_VALUE, t -> true, false, NO_OP_CONSUMER, NO_OP_CONSUMER, NO_OP_BIFUNCTION, NO_OP_BIFUNCTION,\n+\t\t\t\tRetrySpec.RETRY_EXCEPTION_GENERATOR);\n+\t}\n+\n+\t/**\n+\t * A wrapper around {@link Function} to provide {@link Retry} by using lambda expressions.\n+\t *\n+\t * @param function the {@link Function} representing the desired {@link Retry} strategy as a lambda\n+\t * @return the {@link Retry} strategy adapted from the {@link Function}\n+\t */\n+\tpublic static final Retry fromFunction(Function<Flux<RetrySignal>, Publisher<?>> function) {", "originalCommit": "3e90adb1b409dcbdbad98cb71465f77132e61be0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMTgyMA==", "url": "https://github.com/reactor/reactor-core/pull/2079#discussion_r395221820", "bodyText": "sounds good", "author": "simonbasle", "createdAt": "2020-03-19T18:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NDY2MA=="}], "type": "inlineReview"}, {"oid": "761977575210f1a6a770f74b8674a153835f65e4", "url": "https://github.com/reactor/reactor-core/commit/761977575210f1a6a770f74b8674a153835f65e4", "message": "remove outdated test", "committedDate": "2020-03-19T17:59:09Z", "type": "commit"}, {"oid": "f304598274d80c4f195a753e54d3f4a2e042a6b0", "url": "https://github.com/reactor/reactor-core/commit/f304598274d80c4f195a753e54d3f4a2e042a6b0", "message": "Rename Retry#fromFunction to Retry#from", "committedDate": "2020-03-19T18:05:15Z", "type": "commit"}]}