{"pr_number": 2261, "pr_title": "fix #2251 refactor how micrometer integration is tested", "pr_createdAt": "2020-07-08T13:56:07Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2261", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r451569205", "bodyText": "we should keep it as optional", "author": "bsideup", "createdAt": "2020-07-08T14:02:41Z", "path": "reactor-core/build.gradle", "diffHunk": "@@ -84,7 +74,7 @@ dependencies {\n \toptional \"org.slf4j:slf4j-api:$slf4jVersion\"\n \n \t//Optional Metrics\n-\toptional \"io.micrometer:micrometer-core:$micrometerVersion\"\n+\tcompileOnly \"io.micrometer:micrometer-core:$micrometerVersion\"", "originalCommit": "0ebf22d5390cab1bd81f0315ad03393e4089e3f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU3MjgzMA==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r451572830", "bodyText": "Can you elaborate? Does it have to do with how this is handled when published in maven repos?", "author": "ericbottard", "createdAt": "2020-07-08T14:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU3NDExMQ==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r451574111", "bodyText": "optional goes to the generated POM and signals that at least $micrometerVersion should be used, while compileOnly would be removed from the POM and there is no hint which version we used", "author": "bsideup", "createdAt": "2020-07-08T14:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4NDE5Nw==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r451584197", "bodyText": "Slight problem: the tests don't pass anymore :(\nMicrometer IS on the test classpath when using optional apparently...", "author": "ericbottard", "createdAt": "2020-07-08T14:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4ODA2NA==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r451588064", "bodyText": "Also, have a look at https://repo1.maven.org/maven2/io/projectreactor/reactor-core/3.3.7.RELEASE/reactor-core-3.3.7.RELEASE.pom, no particular mention of micrometer", "author": "ericbottard", "createdAt": "2020-07-08T14:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwNzc1Mw==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r451607753", "bodyText": "Related question: why don't we put blockHound in the proper configuration created for the test-set? Would fix the compilation errors I'm seeing in IDEA as far as I understand.", "author": "ericbottard", "createdAt": "2020-07-08T14:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3Nzk3MA==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r452177970", "bodyText": "ok so after discussing optional and looking at the pom, we'll track and kinda document the fact that optional dependencies are not in the pom anymore in #2262. the optional scope from our local copy of OptionalDependenciesPlugin is simply not made part of the pom, whereas the compileOnly vanilla scope results in <scope>provided</scope> in the pom, which we don't want.", "author": "simonbasle", "createdAt": "2020-07-09T12:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MTI1Mw==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r452741253", "bodyText": "Related question: why don't we put blockHound in the proper configuration created for the test-set? Would fix the compilation errors I'm seeing in IDEA as far as I understand.\n\nCreated #2264", "author": "ericbottard", "createdAt": "2020-07-10T09:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2Njc3MQ==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r455666771", "bodyText": "since we can't use compileOnly on production code (<scope>provided</scope>), we should thus indeed keep it as optional. The trouble with that is that the local OptionalDependenciesPlugin puts the optional dependency on the compile and runtime classpath of EVERY java sourceSet. Maybe we need a way larger refactor, where the optional would only get added to main sourceSet?", "author": "simonbasle", "createdAt": "2020-07-16T09:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc2MjMzNw==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r455762337", "bodyText": "Are you sure that compileOnly creates <scope>provided</scope>? It is not the same in other Gradle projects I've seen", "author": "bsideup", "createdAt": "2020-07-16T12:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4NDcxOQ==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r455784719", "bodyText": "We just tested and indeed, it does not.", "author": "ericbottard", "createdAt": "2020-07-16T13:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4NjQwNw==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r451586407", "bodyText": "this should be unnecessary when using the testSet plugin", "author": "simonbasle", "createdAt": "2020-07-08T14:25:04Z", "path": "reactor-core/build.gradle", "diffHunk": "@@ -216,7 +197,7 @@ tasks.withType(Test).all {\n //always depend on testNoMicrometer, skip testNG on Travis, skip loops when not releasing\n //note that this way the tasks can be run individually\n check {\n-\tdependsOn testNoMicrometer\n+\tdependsOn withMicrometerTest", "originalCommit": "0ebf22d5390cab1bd81f0315ad03393e4089e3f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczODUzMg==", "url": "https://github.com/reactor/reactor-core/pull/2261#discussion_r452738532", "bodyText": "I think not. Tests sets are often used for longer integration tests, and the default is to not incorporate them in the default lifecycle apparently:\nhttps://github.com/unbroken-dome/gradle-testsets-plugin#running-tests-as-part-of-the-build", "author": "ericbottard", "createdAt": "2020-07-10T09:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4NjQwNw=="}], "type": "inlineReview"}, {"oid": "51103fb42e074b32a5ed568f7e957a695f520de5", "url": "https://github.com/reactor/reactor-core/commit/51103fb42e074b32a5ed568f7e957a695f520de5", "message": "fix #2251 refactor how micrometer integration is tested", "committedDate": "2020-07-16T13:25:29Z", "type": "commit"}, {"oid": "51103fb42e074b32a5ed568f7e957a695f520de5", "url": "https://github.com/reactor/reactor-core/commit/51103fb42e074b32a5ed568f7e957a695f520de5", "message": "fix #2251 refactor how micrometer integration is tested", "committedDate": "2020-07-16T13:25:29Z", "type": "forcePushed"}]}