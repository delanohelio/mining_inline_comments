{"pr_number": 2287, "pr_title": "fix #2083 Use junit-bom to define JUnit5 versions", "pr_createdAt": "2020-07-24T07:56:38Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2287", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTU4Ng==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459935586", "bodyText": "shouldn't it be testImplementation ?", "author": "simonbasle", "createdAt": "2020-07-24T09:04:20Z", "path": "reactor-core/build.gradle", "diffHunk": "@@ -75,12 +75,13 @@ dependencies {\n \t//Optional JDK 9 Converter\n \tjsr166backport \"io.projectreactor:jsr166:$jsr166BackportVersion\"\n \n-\ttestCompile \"junit:junit:$jUnitVersion\"\n-\ttestCompile \"org.junit.jupiter:junit-jupiter-api:${jUnitJupiterVersion}\"\n-\ttestCompile \"org.junit.platform:junit-platform-launcher:1.6.1\"\n-\ttestCompile \"org.junit.jupiter:junit-jupiter-params:${jUnitJupiterVersion}\"\n-\ttestRuntime \"org.junit.jupiter:junit-jupiter-engine:${jUnitJupiterVersion}\"\n-\ttestRuntime \"org.junit.vintage:junit-vintage-engine:${jUnitJupiterVersion}\"\n+\timplementation platform(\"org.junit:junit-bom:${jUnitPlatformVersion}\")", "originalCommit": "d0cc526fb982a8019b2e1704e13badba135ccf42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NDQ3MA==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459944470", "bodyText": "I'll try with testImplementation, but my understanding is that bom management is done in this canonical way (ie it does not add any dependencies in itself, just reads the dependencyManagement section). It's the actual adding of deps (that is still present below) that indeed uses testImplementation, testCompile, etc.", "author": "ericbottard", "createdAt": "2020-07-24T09:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NTMyNw==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459955327", "bodyText": "The idea of \"platforms\" in Gradle is that you can manage the dependencies per scope.\nBy putting it in implementation, you're saying \"Every junit-* dependency in both production and test code should have this version\" (because the test scope inherits from the production one).\nSince junit is clearly a test-only dependency, it should go to testImplementation.", "author": "bsideup", "createdAt": "2020-07-24T09:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459935688", "bodyText": "same as above", "author": "simonbasle", "createdAt": "2020-07-24T09:04:32Z", "path": "reactor-test/build.gradle", "diffHunk": "@@ -40,10 +40,11 @@ dependencies {\n \n \toptional \"org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}\"\n \n-\ttestCompile \"junit:junit:$jUnitVersion\"\n-\ttestImplementation \"org.junit.jupiter:junit-jupiter-api:${jUnitJupiterVersion}\"\n-\ttestRuntime \"org.junit.jupiter:junit-jupiter-engine:${jUnitJupiterVersion}\"\n-\ttestRuntime \"org.junit.vintage:junit-vintage-engine:${jUnitJupiterVersion}\"\n+\timplementation platform(\"org.junit:junit-bom:${jUnitPlatformVersion}\")", "originalCommit": "d0cc526fb982a8019b2e1704e13badba135ccf42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0MDAyNw==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459940027", "bodyText": "it should actually go to the top level build.gradle for every subproject", "author": "bsideup", "createdAt": "2020-07-24T09:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NTEyOA==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459945128", "bodyText": "it should actually go to the top level build.gradle for every subproject\n\nYeah, tried something similar at first but didn't work and was worried that it wouldn't be clear where the magic came from.", "author": "ericbottard", "createdAt": "2020-07-24T09:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0ODQyOA==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459948428", "bodyText": "Since I have a strong preference to declare the the version strings in the root/gradle.properties and the dependencies in each module's build.gradle file, to me it makes sense to colocate the declaration of the platform in the module build files (even if it means duplicating a bit). But either way would be fine I think.", "author": "simonbasle", "createdAt": "2020-07-24T09:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NTk3OQ==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459955979", "bodyText": "Yeah, tried something similar at first but didn't work and was worried that it wouldn't be clear where the magic came from.\n\ncould you please try again and, if it does not work, I am happy to help making it working :)\n\nSince I have a strong preference to declare the the version strings in the root/gradle.properties and the dependencies in each module's build.gradle file,\n\nThat's how it will be: the platform (aka \"the dependency management\") in the root file, and dependencies (like junit-platform-api) in projects' files.", "author": "bsideup", "createdAt": "2020-07-24T09:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTE4OA==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459981188", "bodyText": "That's debatable. I'd like one central place to define the versions so that bumping a version impacts all modules that define a dependency on that artifact. But I want the actual declaring of the dependency done in each module build file. The platform instruction is in a bit of a gray area I'd say. What about modules that don't JUnit5 ? In fact, we have benchmarks which doesn't, so it tends to make me think the platform should be treated like the actual dependencies.", "author": "simonbasle", "createdAt": "2020-07-24T10:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTkxNw==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459981917", "bodyText": "The platform instruction is in a bit of a gray area I'd say. What about modules that don't JUnit5 ? In fact, we have benchmarks which doesn't, so it tends to make me think the platform should be treated like the actual dependencies.\n\nadding platform does not add junit as a dependency.", "author": "bsideup", "createdAt": "2020-07-24T10:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODcwNw==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459988707", "bodyText": "I'm actually more in synch with @simonbasle", "author": "ericbottard", "createdAt": "2020-07-24T11:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4OTY0Ng==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459989646", "bodyText": "I know, but it doesn't make sense to apply a platform to a module if none of the dependencies it curates are going to be used by that module. So better put it next to the dependencies themselves rather than as a blanket instruction via configure(subprojects) in the root build file (which also has the downside of adding a third place to look at to get the whole dependency picture).\nHaving a split between xxxVersion variable and dependency declarations is acceptable because it brings the benefit of facilitated version bumps.", "author": "simonbasle", "createdAt": "2020-07-24T11:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4OTgzMg==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459989832", "bodyText": "Guys, if you want \"all dependency management to be in the root build.gradle and dependencies defined in per-project files\", than you really should put platform to the root build.gradle, because that's how you apply the dependency management in Gradle.\nYou can be in sync with each other, but it may also mean that you may both misunderstood Gradle's (overly complicated) dependency management. But that's how it works. Adding platform(...) \"dependency\" does not make the module depend on said project.", "author": "bsideup", "createdAt": "2020-07-24T11:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTkwNw==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459991907", "bodyText": "@simonbasle @ericbottard folks, just sharing what we do at rsocket-java -\nwe define dependencyManagement section for all the projects once at the root -> https://github.com/rsocket/rsocket-java/blob/master/build.gradle#L56 and then all subproject uses dependencies with no versions which make it much cleaner. -> https://github.com/rsocket/rsocket-java/blob/master/rsocket-core/build.gradle#L26.\nI believe that does not contradict to \"central place for all the versions\" but rather enforce it so just in case somebody put a version is sub build.gradle this will be more than noticeable", "author": "OlegDokuka", "createdAt": "2020-07-24T11:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTU3MQ==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459995571", "bodyText": "Having a split between xxxVersion variable and dependency declarations is acceptable because it brings the benefit of facilitated version bumps.\n\nif we have a single platform() entry in the whole build than we woudn't even need variables on a first place. But okay, I see that you got confused with Gradle's dependency management syntax (where you need to depend on a platform although you're not depending on anything), so I refrain from this debase, especially given that Eric is more in sync with you.", "author": "bsideup", "createdAt": "2020-07-24T11:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMDUzOQ==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r460000539", "bodyText": "if we have a single platform() entry in the whole build than we woudn't even need variables on a first place.\n\nah but you're talking about defining an ad-hoc platform? Vs importing a \"platform\" (in the \"an existing Maven BOM\" sense)... which Gradle documents as a regular dependency declaration in their docs:\n\nThe BOM support in Gradle works similar to using import when depending on a BOM in Maven. In Gradle however, it is done via a regular dependency declaration on the BOM:\n\nUnfortunately Gradle only supports defining a platform in a module that cannot be also a java or java-library module, ie. one that is intended to be published). So no adhoc platform definition, and we're stuck with variables for now.", "author": "simonbasle", "createdAt": "2020-07-24T11:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMDg1NQ==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r460000855", "bodyText": "we could maybe switch to the dependencyManagement model with the spring plugin", "author": "simonbasle", "createdAt": "2020-07-24T11:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMTUwMg==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r460001502", "bodyText": "I think we do understand how gradle works, in particular the fact that depending on a platform does not actually add dependencies. This is all about gathering of information in one or several places. I'm personally okay with both, as I see arguments for both, even though I prefer Simon's view that \"if we depend on junit platform in project X, then we see (all of) that in that project (the bom and the actual dependencies)\".\nAs a matter of fact, there may be a case in the future where we (need to) depend on a given specific version of junit-bom in one project and are fine with another in the other projects. So while the desire to rationalize at top level is appealing, we shouldn't force it too much IMO.\nSo to recap, I suggest to move the platform bit back to each project (while still using a version coming from a top level property for now). Is that ok ?", "author": "ericbottard", "createdAt": "2020-07-24T11:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNjExNg==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459936116", "bodyText": "same as above", "author": "simonbasle", "createdAt": "2020-07-24T09:05:13Z", "path": "reactor-tools/build.gradle", "diffHunk": "@@ -44,8 +44,9 @@ dependencies {\n         javaAgentTestRuntime(dependency)\n     }\n \n-    testImplementation \"org.junit.jupiter:junit-jupiter-api:${jUnitJupiterVersion}\"\n-    testRuntime \"org.junit.jupiter:junit-jupiter-engine:${jUnitJupiterVersion}\"\n+    implementation platform(\"org.junit:junit-bom:${jUnitPlatformVersion}\")", "originalCommit": "d0cc526fb982a8019b2e1704e13badba135ccf42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzOTc0NA==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459939744", "bodyText": "IIRRC junit-bom also manages junit:junit, could you please check it?", "author": "bsideup", "createdAt": "2020-07-24T09:11:26Z", "path": "reactor-core/build.gradle", "diffHunk": "@@ -75,12 +75,13 @@ dependencies {\n \t//Optional JDK 9 Converter\n \tjsr166backport \"io.projectreactor:jsr166:$jsr166BackportVersion\"\n \n-\ttestCompile \"junit:junit:$jUnitVersion\"\n-\ttestCompile \"org.junit.jupiter:junit-jupiter-api:${jUnitJupiterVersion}\"\n-\ttestCompile \"org.junit.platform:junit-platform-launcher:1.6.1\"\n-\ttestCompile \"org.junit.jupiter:junit-jupiter-params:${jUnitJupiterVersion}\"\n-\ttestRuntime \"org.junit.jupiter:junit-jupiter-engine:${jUnitJupiterVersion}\"\n-\ttestRuntime \"org.junit.vintage:junit-vintage-engine:${jUnitJupiterVersion}\"\n+\timplementation platform(\"org.junit:junit-bom:${jUnitPlatformVersion}\")\n+\ttestCompile \"junit:junit:${jUnitVersion}\"", "originalCommit": "d0cc526fb982a8019b2e1704e13badba135ccf42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0MzI2OA==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459943268", "bodyText": "I checked that. It does not manage it directly, only transitively through -vintage (and uses 4.13 that we want). The problem is that there are other dependencies in the build that introduce 4.12 and this is what is being picked up.", "author": "ericbottard", "createdAt": "2020-07-24T09:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzOTc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NDAyMA==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459944020", "bodyText": "Either 4.12 and 4.13 would work, so I'd rather remove one more property to manage :)", "author": "bsideup", "createdAt": "2020-07-24T09:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzOTc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODAzNg==", "url": "https://github.com/reactor/reactor-core/pull/2287#discussion_r459988036", "bodyText": "Like I said, I left it for a reason: we want 4.13, because we compile against org.junit.function.ThrowingRunnable which is in 4.13", "author": "ericbottard", "createdAt": "2020-07-24T11:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzOTc0NA=="}], "type": "inlineReview"}, {"oid": "e54f3dc1623e0f5b18dd85f125691c59a1dae8ba", "url": "https://github.com/reactor/reactor-core/commit/e54f3dc1623e0f5b18dd85f125691c59a1dae8ba", "message": "Use testImplementation instead of implementation.", "committedDate": "2020-07-24T11:52:44Z", "type": "forcePushed"}, {"oid": "d8572ee9e1b12ca42385a30a23bc10ecb8e01e99", "url": "https://github.com/reactor/reactor-core/commit/d8572ee9e1b12ca42385a30a23bc10ecb8e01e99", "message": "fix #2083 use junit-bom to control dependencies", "committedDate": "2020-07-24T13:16:15Z", "type": "commit"}, {"oid": "d8572ee9e1b12ca42385a30a23bc10ecb8e01e99", "url": "https://github.com/reactor/reactor-core/commit/d8572ee9e1b12ca42385a30a23bc10ecb8e01e99", "message": "fix #2083 use junit-bom to control dependencies", "committedDate": "2020-07-24T13:16:15Z", "type": "forcePushed"}]}