{"pr_number": 2505, "pr_title": "fix #2502 Generate OSGI Bundle-Version from Europium+ scheme", "pr_createdAt": "2020-11-25T10:01:35Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2505", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530311452", "bodyText": "For export packages, the plugin removes the qualifier from the version when it is *-SNAPSHOT and thus we have only\n${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro} which is not correct for snapshots versions.\nBetter option here will be to add BUILD-timestamp thus we will be able to distinguish between the different snapshot versions.", "author": "violetagg", "createdAt": "2020-11-25T11:42:55Z", "path": "build.gradle", "diffHunk": "@@ -48,6 +50,20 @@ ext {\n \t}\n \tprintln \"JDK Javadoc link for this build is ${rootProject.jdkJavadoc}\"\n \n+\tversionNumber = VersionNumber.parse(version.toString())\n+\tif (versionNumber.qualifier == null || versionNumber.qualifier.size() == 0) {\n+\t\tosgiVersion = \"${version}.RELEASE\"\n+\t\tprintln \"$version is a release, will use $osgiVersion for bnd\"\n+\t}\n+\telse if (versionNumber.qualifier.equalsIgnoreCase(\"SNAPSHOT\")) {\n+\t\tosgiVersion = \"${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.BUILD-SNAPSHOT\"", "originalCommit": "f6dbe7c169b8b31a1cfc3d60b2ba915d4dbfe609", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM1MDMwNQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530350305", "bodyText": "There is an BND instruction that tells BND what to do when an \"-SNAPSHOT\" qualifier is encountered in the bundle version: https://bnd.bndtools.org/instructions/snapshot.html\nOne possibility would be to use:\n-snapshot: BUILD-${tstamp}\nWhich would change:\nBundle-Version: 3.4.1-SNAPSHOT\nto\nBundle-Version: 3.4.1.202011251350\nWhen the version does NOT end with -SNAPSHOT the version is kept so:\nBundle-Version: 3.4.1\nwould be kept as\nBundle-Version: 3.4.1", "author": "swimmesberger", "createdAt": "2020-11-25T12:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM2NjI0NQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530366245", "bodyText": "Yes but then when you have two bundles with 3.4.1.202011251350 and 3.4.1 and import package [3.4, 3.5) the first will be preferred correct? While we want the bundles produced by the release to be preferred in comparison to the SNAPSHOT builds.\nSo the snapshots will be 3.4.1.BUILD-202011251350 while the release will be 3.4.1.RELEASE so that when importing like this [3.4, 3.5), a released version to be preferred.\nIs that correct?", "author": "violetagg", "createdAt": "2020-11-25T13:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0ODc3MQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530448771", "bodyText": "@violetagg you are right that when the major/minor and micro version matches in OSGi the qualifier is then compared lexicographically. Also a version without a qualifier is always ranked lower than a version with a qualifier e.g. 3.4.1 will be lower than 3.4.1.RELEASE.\nSo with all the examples we get following order:\n\n3.4.1 (lowest)\n3.4.1.202011251350\n3.4.1.BUILD-202011251350\n3.4.1.RELEASE (highest)\n\nThats the version compareTo method of bnd:\npublic int compareTo(Version other) {\n\tif (other == this)\n\t\treturn 0;\n\n\tVersion o = other;\n\tint cmp = major - o.major;\n\tif (cmp != 0)\n\t\treturn cmp;\n\n\tcmp = minor - o.minor;\n\tif (cmp != 0)\n\t\treturn cmp;\n\n\tcmp = micro - o.micro;\n\tif (cmp != 0)\n\t\treturn cmp;\n\n\tif (qualifier != null)\n\t\tcmp = 1;\n\tif (o.qualifier != null)\n\t\tcmp += 2;\n\n\tswitch (cmp) {\n\t\tcase 0 :\n\t\t\treturn 0;\n\t\tcase 1 :\n\t\t\treturn 1;\n\t\tcase 2 :\n\t\t\treturn -1;\n\t}\n\treturn qualifier.compareTo(o.qualifier);\n}\nThere are probably more ways to solve this but I also agree that using a timestamp for snapshots would be better.", "author": "swimmesberger", "createdAt": "2020-11-25T15:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxNDk0MQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530514941", "bodyText": "\ud83e\udd15\ud83d\udc7f  now I'm not changing the Bundle-Version for -SNAPSHOT but instead using the bnd instruction \"-snapshot\" : 'BUILD-${tstamp}' and what I get is this:\nBundle-Version: 3.4.1.BUILD-202011251646\nCreated-By: 14.0.2 (AdoptOpenJDK)\nExport-Package: reactor.adapter;uses:=\"org.reactivestreams,reactor.cor\n e.publisher\";version=\"3.4.1.SNAPSHOT\"\noh what a joy!", "author": "simonbasle", "createdAt": "2020-11-25T16:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NzEzMw==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530597133", "bodyText": "Oh wow... I haven't use that instruction before but I wouldn't say that is expected behavior... in the meantime the currently proposed solution (without -snapshot) might be the better solution.", "author": "swimmesberger", "createdAt": "2020-11-25T19:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg3MzQwOQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530873409", "bodyText": "@swimmesberger do you mean the code currently committed in this PR branch? ie the one that produces .BUILD-SNAPSHOT for snapshots and .RELEASE for releases? (just to be sure)", "author": "simonbasle", "createdAt": "2020-11-26T09:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5MTQ3MA==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530891470", "bodyText": "@simonbasle  I'm currently trying to reproduce the -snapshot instruction issue. I will report back when I have come to a conclusion.", "author": "swimmesberger", "createdAt": "2020-11-26T09:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NzQyNA==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530977424", "bodyText": "@simonbasle although the -snapshot instruction is not working (see my last comment for reasoning) we should still use BUILD-${tstamp} here with goovy methods e.g. something along the lines:\ndef sdf = new SimpleDateFormat(\"yyyyMMddHHmm\");\nsdf.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\ndef tstamp = sdf.format(new Date())", "author": "swimmesberger", "createdAt": "2020-11-26T11:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NzA3NA==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r531077074", "bodyText": "What about this\ndiff --git a/build.gradle b/build.gradle\nindex 5cc2d77e..170d0244 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,4 +1,5 @@\n import org.gradle.util.VersionNumber\n+import java.text.SimpleDateFormat\n \n /*\n  * Copyright (c) 2011-2017 Pivotal Software Inc, All Rights Reserved.\n@@ -42,6 +43,12 @@ apply plugin: \"io.reactor.gradle.detect-ci\"\n apply from: \"gradle/asciidoc.gradle\" //asciidoc (which is generated from root dir)\n apply from: \"gradle/releaser.gradle\"\n \n+def buildTime() {\n+\tdef sdf = new SimpleDateFormat(\"yyyyMMddHHmm\");\n+\tsdf.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+\treturn sdf.format(new Date())\n+}\n+\n ext {\n \tjdk = JavaVersion.current().majorVersion\n \tjdkJavadoc = \"https://docs.oracle.com/javase/$jdk/docs/api/\"\n@@ -56,7 +63,7 @@ ext {\n \t\tprintln \"$version is a release, will use $osgiVersion for bnd\"\n \t}\n \telse if (versionNumber.qualifier.equalsIgnoreCase(\"SNAPSHOT\")) {\n-\t\tosgiVersion = \"${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.BUILD-SNAPSHOT\"\n+\t\tosgiVersion = \"${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.BUILD-${buildTime()}\"\n \t\tprintln \"$version is a snapshot, will use $osgiVersion for bnd\"\n \t}\n \telse {\ndiff --git a/reactor-core/build.gradle b/reactor-core/build.gradle\nindex 4f0d63ef..97aa6502 100644\n--- a/reactor-core/build.gradle\n+++ b/reactor-core/build.gradle\n@@ -38,7 +38,7 @@ ext {\n \t\t\"Export-Package\": [\n \t\t\t\"!*internal*\",\n \t\t\t\"!reactor.blockhound*\",\n-\t\t\t\"reactor.*\"\n+\t\t\t\"reactor.*;version=$osgiVersion\"\n \t\t].join(\",\"),\n \t\t\"Import-Package\": [\n \t\t\t\"!javax.annotation\",\ndiff --git a/reactor-test/build.gradle b/reactor-test/build.gradle\nindex 116a688f..3e39d2f7 100644\n--- a/reactor-test/build.gradle\n+++ b/reactor-test/build.gradle\n@@ -24,7 +24,7 @@ ext {\n \tbndOptions = [\n \t\t\"Export-Package\": [\n \t\t\t\"!*internal*\",\n-\t\t\t\"reactor.test*;-noimport:=true\"\n+\t\t\t\"reactor.test*;version=$osgiVersion;-noimport:=true\"\n \t\t].join(\",\"),\n \t\t\"Import-Package\": [\n \t\t\t\"!javax.annotation\",", "author": "violetagg", "createdAt": "2020-11-26T14:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMTMyMQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r531111321", "bodyText": "@violetagg That would work and will result in \"3.4.1.BUILD-202011251646\" versions for exported packages but I don't think that it is strictly required? \ud83e\udd14 Using the default behavior (without specifying a export-package version) would result in:\nBundle-Version: 3.4.1.BUILD-202011251646\nExport-Package: xyz;version=3.4.1\nAssuming OSGi uses the same version order for packages it would rank release packages before snapshot packages which would be good. If there are multiple bundles which provide the same package with the same version maybe the bundle version is then used for ordering that would mean the package version qualifier wouldn't be strictly required but I'm not sure.\nFor now it's probably the best solution \ud83d\udc4c", "author": "swimmesberger", "createdAt": "2020-11-26T15:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzA5NQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r531113095", "bodyText": "According to the spec:\nhttps://docs.osgi.org/specification/osgi.core/7.0.0/service.resolver.html#i3344409\nFor resolving an OSGi framework the specifications outlines a number of heuristics that guide the order of wiring bundles and packages:\n\nA resource that is already resolved, that is, it is already wired\nThe highest version\nThe lowest bundle id\n\nTherefore I would assume that the same version order used for Bundle-Version is also used for the package version \ud83d\ude42", "author": "swimmesberger", "createdAt": "2020-11-26T15:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY5ODUyMw==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r531698523", "bodyText": "@violetagg That would work and will result in \"3.4.1.BUILD-202011251646\" versions for exported packages but I don't think that it is strictly required? \ud83e\udd14 Using the default behavior (without specifying a export-package version) would result in:\nBundle-Version: 3.4.1.BUILD-202011251646\nExport-Package: xyz;version=3.4.1\nAssuming OSGi uses the same version order for packages it would rank release packages before snapshot packages which would be good. If there are multiple bundles which provide the same package with the same version maybe the bundle version is then used for ordering that would mean the package version qualifier wouldn't be strictly required but I'm not sure.\nFor now it's probably the best solution \ud83d\udc4c\n\nLet's assume that you have two bundles with the following versions Bundle-Version: 3.4.1.BUILD-1 and the second Bundle-Version: 3.4.1.BUILD-2. The first one has an issue and the second one no. You want to test both of them in order to find the issue.\nBoth bundles are installed and your bundle wants to test both of them. You can do it very easy when specifying the concrete export-package version when you importing the package.\nYou do not need to install/uninstall bundles, you do not need to require a bundle.\nIs that a valid scenario or if you think that you are just fine with the current solution we can do it like this.\nI just don't think that this is valid\nBundle-Version: 3.4.1.BUILD-202011251646\nExport-Package: xyz;version=3.4.1\n\nTypically export packages follow the bundle version.\nhttps://github.com/eclipse/gemini.web.gemini-web-container/blob/39fd5cc49d266178fb1adcda89feb7413fca98e2/org.eclipse.gemini.web.core/template.mf#L15", "author": "violetagg", "createdAt": "2020-11-27T16:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNjA5MA==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r531706090", "bodyText": "@violetagg you are right that might be a valid use-case and the changes required are not that big. In many OSGi specific projects packages are versioned completely separately than the bundle version but for projects like this one it might be a good idea to include the qualifier for the exported packages.", "author": "swimmesberger", "createdAt": "2020-11-27T17:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNTkxNQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r530925915", "bodyText": "@simonbasle  I think the issue with the -snapshot version was here. BND is processing -snaptshot the Bundle-Version attribute AFTER it's processing the exports.\nThe reason for that is that you wouldn't want to have export-package versions like 3.4.1.BUILD-202011261127 but you always want to have export-package versions like 3.4.1\nTherefore at the point of the export-package attribute OSGi sees following version:\n3.4.1-SNAPSHOT\nwhich OSGi can't parse as a valid OSGi version because OSGi would require a qualifier with a dot (.):\n3.4.1.SNAPSHOT\nWhen the Bundle-Version is not a valid OSGi version the qualifier is not removed for package exports as BND does for valid OSGi versions. So for Export-Package BND would convert the Bundle-Version \"3.4.1.SNAPSHOT\" into \"3.4.1\" for package exports (valid OSGi version, stripping qualifier) but when it's not a valid OSGi version as with \"3.4.1-SNAPSHOT\" the version is kept as it is so it results in \"3.4.1-SNAPTSHOT\" package versions.\nI would say that this is really inconvenient and I will create a BND issue for that.\nAs a result of that to get proper Export-Package versions we would need to define a custom osgiVersion anyways because we would need to convert the maven version 3.4.1-SNAPSHOT into 3.4.1.SNAPSHOT here therefore using the bnd instruction -snapshot is not really worth it because we have to do the version conversion anyway.", "author": "swimmesberger", "createdAt": "2020-11-26T10:26:50Z", "path": "build.gradle", "diffHunk": "@@ -55,13 +55,14 @@ ext {\n \t\tosgiVersion = \"${version}.RELEASE\"\n \t\tprintln \"$version is a release, will use $osgiVersion for bnd\"\n \t}\n-\telse if (versionNumber.qualifier.equalsIgnoreCase(\"SNAPSHOT\")) {\n+\telse if (!versionNumber.qualifier.equalsIgnoreCase(\"SNAPSHOT\")) {\n+\t\tosgiVersion = \"${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.${versionNumber.qualifier}\"\n+\t\tprintln \"$version is neither release nor snapshot, will use $osgiVersion for bnd\"\n \t\tosgiVersion = \"${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.BUILD-SNAPSHOT\"\n-\t\tprintln \"$version is a snapshot, will use $osgiVersion for bnd\"\n \t}\n \telse {\n-\t\tosgiVersion = \"${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.${versionNumber.qualifier}\"\n-\t\tprintln \"$version is neither release nor snapshot, will use $osgiVersion for bnd\"\n+\t\tosgiVersion = version", "originalCommit": "c1f79bc59e56d7f1036b09cad8e4bd36e2dac5c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34d6e79c4fe65118b4e69d284239c2b8efb81b1b", "url": "https://github.com/reactor/reactor-core/commit/34d6e79c4fe65118b4e69d284239c2b8efb81b1b", "message": "fix #2502 Generate OSGI Bundle-Version from Europium+ scheme\n\nThis commit ensures that the OSGI Bundle-Version is consistently\ncomparable between snapshots, milestones and release versions using\nthe new versioning scheme introduced in Europium/2020.0, by forcing\na Bundle-Version similar to the old scheme for OSGI.\n\nSee reactor/reactor#689 for context.", "committedDate": "2020-11-27T10:34:07Z", "type": "commit"}, {"oid": "0ebe267e35dc7a2cc84859b72aca93d746192c34", "url": "https://github.com/reactor/reactor-core/commit/0ebe267e35dc7a2cc84859b72aca93d746192c34", "message": "use bnd -snapshot to replace -SNAPSHOT with .BUILD-tstamp", "committedDate": "2020-11-27T10:34:07Z", "type": "commit"}, {"oid": "4fe979e5920ce7eb158a5f1fa979460d3bbc5a2a", "url": "https://github.com/reactor/reactor-core/commit/4fe979e5920ce7eb158a5f1fa979460d3bbc5a2a", "message": "Revert \"use bnd -snapshot to replace -SNAPSHOT with .BUILD-tstamp\"\n\nThis reverts commit c1f79bc59e56d7f1036b09cad8e4bd36e2dac5c7.", "committedDate": "2020-11-27T10:34:07Z", "type": "commit"}, {"oid": "9ab0007fc62621cf1fea8115149ab27ad8fe1e83", "url": "https://github.com/reactor/reactor-core/commit/9ab0007fc62621cf1fea8115149ab27ad8fe1e83", "message": "Manually set OSGI qualifier to BUILD-timestamp for snapshots\n\nThis avoids using BND -snapshot instruction which keeps the `-SNAPSHOT`\npart in the versions inside Export-Package clause.\n\nThe resulting bundle version is sorted below releases (which get\na .RELEASE suffix). Note this means they'll also continue being sorted\nbelow milestones (.Mx suffix) and release candidates (.RCx suffix),\nas was the case in the old scheme.", "committedDate": "2020-11-27T10:41:23Z", "type": "commit"}, {"oid": "9ab0007fc62621cf1fea8115149ab27ad8fe1e83", "url": "https://github.com/reactor/reactor-core/commit/9ab0007fc62621cf1fea8115149ab27ad8fe1e83", "message": "Manually set OSGI qualifier to BUILD-timestamp for snapshots\n\nThis avoids using BND -snapshot instruction which keeps the `-SNAPSHOT`\npart in the versions inside Export-Package clause.\n\nThe resulting bundle version is sorted below releases (which get\na .RELEASE suffix). Note this means they'll also continue being sorted\nbelow milestones (.Mx suffix) and release candidates (.RCx suffix),\nas was the case in the old scheme.", "committedDate": "2020-11-27T10:41:23Z", "type": "forcePushed"}, {"oid": "698252a52743aeb093bf44689a6a2113c0a9efa4", "url": "https://github.com/reactor/reactor-core/commit/698252a52743aeb093bf44689a6a2113c0a9efa4", "message": "Add osgiVersion to Export-Package entries", "committedDate": "2020-11-27T17:30:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNTI2MA==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r531715260", "bodyText": "I have seen that \"-noimport:=true\" is used in the reactor-test module we could use that here too which would make the manifest a little bit cleaner because the exported packages are then not listed in the import-package attribute and there is not really any downside to it (that I know of).\nThe specification says following (3.6.5):\n\nAn export definition does not imply an automatic import definition. A bundle that exports a package and does not import that package will get that package via its bundle class path. Such an exported only package can be used by other bundles, but the exporting bundle does not accept a substitution for this package from another bundle.\n\nI just think that it should be consistent between all reactor modules. So if you use -noimport for one module it should be used for the others too if not than it should be removed for the reactor-test module (?)", "author": "swimmesberger", "createdAt": "2020-11-27T17:46:17Z", "path": "reactor-core/build.gradle", "diffHunk": "@@ -38,7 +38,7 @@ ext {\n \t\t\"Export-Package\": [\n \t\t\t\"!*internal*\",\n \t\t\t\"!reactor.blockhound*\",\n-\t\t\t\"reactor.*\"\n+\t\t\t\"reactor.*;version=$osgiVersion\"", "originalCommit": "698252a52743aeb093bf44689a6a2113c0a9efa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ4MDU1NQ==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r532480555", "bodyText": "please open a separate issue/pr if you find that causes actual problems, I don't want to change anything that isn't strictly necessary and directly related to the new version scheme in this PR so that the commit serves as a reference for other projects (addons notably)", "author": "simonbasle", "createdAt": "2020-11-30T10:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwNDI2NA==", "url": "https://github.com/reactor/reactor-core/pull/2505#discussion_r532704264", "bodyText": "The idea with -noimport:=true is very good as if we have an import package the functionality will be taken from the import and not from the class path.", "author": "violetagg", "createdAt": "2020-11-30T15:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNTI2MA=="}], "type": "inlineReview"}]}