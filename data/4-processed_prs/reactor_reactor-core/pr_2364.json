{"pr_number": 2364, "pr_title": "fix #2362 Prevent ConcurrentModificationEx on bufferPredicate discard", "pr_createdAt": "2020-09-08T11:41:02Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2364", "timeline": [{"oid": "42d8b5107df873d6302a74c18c4bf34135bb3a47", "url": "https://github.com/reactor/reactor-core/commit/42d8b5107df873d6302a74c18c4bf34135bb3a47", "message": "fix #2362 Prevent ConcurrentModificationEx on bufferPredicate discard\n\nThis commit adds some internal synchronization of the buffer in\nFluxBufferPredicate in order to ensure that cancellation racing with\nonNext doesn't trigger a ConcurrentModificationException (due to the\nbuffer being iterated by onDiscard while onNext adds an element to it).", "committedDate": "2020-09-08T11:38:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjAwMA==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r484852000", "bodyText": "why not getAndSet?", "author": "bsideup", "createdAt": "2020-09-08T11:42:35Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxBufferPredicate.java", "diffHunk": "@@ -176,8 +178,13 @@ public void request(long n) {\n \n \t\t@Override\n \t\tpublic void cancel() {\n+\t\t\tC b;\n+\t\t\tsynchronized (this) {", "originalCommit": "42d8b5107df873d6302a74c18c4bf34135bb3a47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxMTYxNQ==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r486211615", "bodyText": "I should probably eliminate the volatile above. overall for this issue getAndSet and CAS operations doesn't cut it because the onNext could still capture the buffer just in time and perform the add despite cancel swapping out the buffer.", "author": "simonbasle", "createdAt": "2020-09-10T09:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjQyNQ==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r484852425", "bodyText": "this one could really use a stress test instead", "author": "bsideup", "createdAt": "2020-09-08T11:43:23Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxBufferPredicateTest.java", "diffHunk": "@@ -912,6 +916,153 @@ public void discardOnError() {\n \t\t            .hasDiscardedExactly(1, 2, 3);\n \t}\n \n+\tstatic private final Context DISCARD_RACE_WITH_ON_NEXT_CTX = Context.of(Hooks.KEY_ON_DISCARD, (Consumer<?>) (Object o) -> ((AtomicInteger) o).incrementAndGet());\n+\n+\tBaseSubscriber<ArrayList<AtomicInteger>> createDiscardRaceWithOnNextDownstream(final AtomicLong receivedCounter) {\n+\t\treturn new BaseSubscriber<ArrayList<AtomicInteger>>() {\n+\t\t\t@Override\n+\t\t\tpublic Context currentContext() {\n+\t\t\t\treturn DISCARD_RACE_WITH_ON_NEXT_CTX;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void hookOnNext(ArrayList<AtomicInteger> value) {\n+\t\t\t\treceivedCounter.addAndGet(value.size());\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t@Test\n+\tpublic void discardRaceWithOnNext_bufferAdds() {", "originalCommit": "42d8b5107df873d6302a74c18c4bf34135bb3a47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxMDA5OQ==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r486210099", "bodyText": "no time for this unfortunately, too much on my plate. can you open a follow up issue?", "author": "simonbasle", "createdAt": "2020-09-10T09:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxNTk4OA==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r486215988", "bodyText": "mhm... okay \ud83d\ude05", "author": "bsideup", "createdAt": "2020-09-10T09:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyMTIxMw==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r486221213", "bodyText": "(plus jcstress was added in master, this is targeting 3.2 so it would have to be done separately anyway)", "author": "simonbasle", "createdAt": "2020-09-10T10:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyNDk4Mw==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r486224983", "bodyText": "Maybe we can remove the test from this PR and add it in master later as a follow up? These really make the test execution longer and more heavyweight...", "author": "bsideup", "createdAt": "2020-09-10T10:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNjc0OA==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r486236748", "bodyText": "I can do smaller loops, to at least keep a minimum of testing while not impacting the time too much?", "author": "simonbasle", "createdAt": "2020-09-10T10:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzODA5OA==", "url": "https://github.com/reactor/reactor-core/pull/2364#discussion_r486238098", "bodyText": "to be honest the worst offender seems to be pre-existing requestRaceWithOnNextLoops (32s)", "author": "simonbasle", "createdAt": "2020-09-10T10:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MjQyNQ=="}], "type": "inlineReview"}, {"oid": "80c2e338037d842f9e394eb7320c9ca9aafc532a", "url": "https://github.com/reactor/reactor-core/commit/80c2e338037d842f9e394eb7320c9ca9aafc532a", "message": "remove unnecessary volatile", "committedDate": "2020-09-10T10:15:19Z", "type": "commit"}, {"oid": "950199ae6f84d57971c305bc505e3bfeacac866e", "url": "https://github.com/reactor/reactor-core/commit/950199ae6f84d57971c305bc505e3bfeacac866e", "message": "Mutualized ROUNDS param with requestRaceWithOnNextLoops, now 10K", "committedDate": "2020-09-10T10:42:21Z", "type": "commit"}]}