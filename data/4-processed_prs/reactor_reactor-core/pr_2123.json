{"pr_number": 2123, "pr_title": "fix #2058 identify operators with scheduler through new scannable property", "pr_createdAt": "2020-04-20T14:52:37Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2123", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3OTk5OQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r411479999", "bodyText": "@simonbasle I wonder if \"asynchronous\" (or the inverse - \"synchronous\") would be a better term?", "author": "bsideup", "createdAt": "2020-04-20T15:38:28Z", "path": "reactor-core/src/main/java/reactor/core/Scannable.java", "diffHunk": "@@ -210,6 +210,8 @@\n \t\t */\n \t\tpublic static final Attr<Stream<Tuple2<String, String>>> TAGS = new Attr<>(null);\n \n+\t\tpublic static final Attr<Boolean> THREAD_MODIFIER = new Attr<>(false);", "originalCommit": "445cd2db94419f041fdc6eacd27053e4eed7ec6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTMzOQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r411509339", "bodyText": "yeah, @aneveu I think the logic should be reversed actually :/\nthe most important information for now is whether or not the operator is guaranteed to be synchronous. so the attribute would be SYNCHRONOUS and it would default to false. Make a note in the javadoc that it returns false if the operator can switch threads or if we don't know for sure if it stays on the same thread.", "author": "simonbasle", "createdAt": "2020-04-20T16:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3OTk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxODAyNw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r411518027", "bodyText": "@bsideup as seen with @simonbasle, I'm going to revert the logic so that by default all operators which are not modifying their executing thread will return true for Attr.SYNCHRONOUS, in order for asynchronous operators only to be decorated.", "author": "aneveu", "createdAt": "2020-04-20T16:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3OTk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyMDkwMQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r411520901", "bodyText": "yeah, sorry this is a lot of additional work but at least if one forgets to explicitly define this attribute, in the case of eg. Sleuth it wouldn't mistakenly be skipped.", "author": "simonbasle", "createdAt": "2020-04-20T16:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3OTk5OQ=="}], "type": "inlineReview"}, {"oid": "989b89c6b9c8e9276258145f43898ed67ab8cf35", "url": "https://github.com/reactor/reactor-core/commit/989b89c6b9c8e9276258145f43898ed67ab8cf35", "message": "fix #2058 identify operators w. scheduler through new scannable prop.", "committedDate": "2020-04-28T08:39:42Z", "type": "forcePushed"}, {"oid": "a2cb92dfdd21b26484bf678c2a87dabfa0a0970b", "url": "https://github.com/reactor/reactor-core/commit/a2cb92dfdd21b26484bf678c2a87dabfa0a0970b", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-14T10:57:04Z", "type": "forcePushed"}, {"oid": "3552ef72d08a62de3b92d52f9727027acbed0ffb", "url": "https://github.com/reactor/reactor-core/commit/3552ef72d08a62de3b92d52f9727027acbed0ffb", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-14T15:45:38Z", "type": "forcePushed"}, {"oid": "cd2e8b1afb45f615c67144d4dbf2fd6c0aac464a", "url": "https://github.com/reactor/reactor-core/commit/cd2e8b1afb45f615c67144d4dbf2fd6c0aac464a", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-14T16:46:15Z", "type": "forcePushed"}, {"oid": "511d40ede2ff50b80567c885564d81b3f1b2ba7a", "url": "https://github.com/reactor/reactor-core/commit/511d40ede2ff50b80567c885564d81b3f1b2ba7a", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-15T15:30:55Z", "type": "forcePushed"}, {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28", "url": "https://github.com/reactor/reactor-core/commit/bb8eec5243f90bfe19b7117e78b16169be4edc28", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-20T09:58:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNDE1Nw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r427904157", "bodyText": "Isn't it UNKNOWN here? Or source. scanUnsafe(key)?", "author": "bsideup", "createdAt": "2020-05-20T10:26:53Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxSourceMono.java", "diffHunk": "@@ -55,4 +55,9 @@ public void subscribe(CoreSubscriber<? super I> actual) {\n \t\tsource.subscribe(actual);\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "bb8eec5243f90bfe19b7117e78b16169be4edc28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3NDA2OQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r429874069", "bodyText": "FluxSourceMono is a final class, which is the reason why I decided to mark it as SYNC but you're right, source.scanUnsafe(key) might be better as the Mono source could possibly be ASYNC", "author": "aneveu", "createdAt": "2020-05-25T11:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNDE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTA3Mg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r430239072", "bodyText": "yeah it would actually make sense to use Scannable.from(source).scanUnsafe(key), since this is a final wrapper of Mono. Note we expect most Mono to be Scannable, but it is not guaranteed. However Scannable.from(foo) will return a default object instance that only answers with default values if the foo is not actually explicitly scannable.", "author": "simonbasle", "createdAt": "2020-05-26T08:23:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNDE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNTI3NA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r427905274", "bodyText": "ElapsedSubscriber is synchronous and does not change the thread. The scheduler is used, but only for timestamping", "author": "bsideup", "createdAt": "2020-05-20T10:28:41Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxElapsed.java", "diffHunk": "@@ -46,7 +46,7 @@ public void subscribe(CoreSubscriber<? super Tuple2<Long, T>> actual) {\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.RUN_ON) return scheduler;\n-\n+\t\tif (key == Attr.THREAD_MODIFIER) return true;", "originalCommit": "bb8eec5243f90bfe19b7117e78b16169be4edc28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MzAwOQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r429873009", "bodyText": "I haven't go through the Flux classes at the moment, only those which are linked to Mono du to conversion needs. So this will be removed anyway, but thanks for noticing the wrong value \ud83d\ude09", "author": "aneveu", "createdAt": "2020-05-25T10:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNTI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkxMDA3NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r427910075", "bodyText": "see https://github.com/reactor/reactor-core/pull/2123/files#r427904157", "author": "bsideup", "createdAt": "2020-05-20T10:37:49Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxSourceMonoFuseable.java", "diffHunk": "@@ -47,4 +47,11 @@ public String stepName() {\n \t\t}\n \t\treturn \"FluxFromMono(\" + source.toString() + \")\";\n \t}\n+\n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "bb8eec5243f90bfe19b7117e78b16169be4edc28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b3b2430fb837a9883ed96d92d0362c14c53e3d5e", "url": "https://github.com/reactor/reactor-core/commit/b3b2430fb837a9883ed96d92d0362c14c53e3d5e", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-20T14:50:53Z", "type": "forcePushed"}, {"oid": "d035c6ff5119546ee1dcb4039e6e52830150742c", "url": "https://github.com/reactor/reactor-core/commit/d035c6ff5119546ee1dcb4039e6e52830150742c", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-26T14:55:05Z", "type": "forcePushed"}, {"oid": "1f4e278e1a3b34a4207c9cbfb6fe49f10e27ca2a", "url": "https://github.com/reactor/reactor-core/commit/1f4e278e1a3b34a4207c9cbfb6fe49f10e27ca2a", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-26T15:02:58Z", "type": "forcePushed"}, {"oid": "b77d4fe1a0d55d392873fdd44b8b26550b3882db", "url": "https://github.com/reactor/reactor-core/commit/b77d4fe1a0d55d392873fdd44b8b26550b3882db", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-26T15:04:30Z", "type": "forcePushed"}, {"oid": "37d9903fe92135266044827e6c87ed2b7e14fdb2", "url": "https://github.com/reactor/reactor-core/commit/37d9903fe92135266044827e6c87ed2b7e14fdb2", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-26T15:08:37Z", "type": "forcePushed"}, {"oid": "1c4032385816a05c7bfce3440ad675f1a8f8eb0f", "url": "https://github.com/reactor/reactor-core/commit/1c4032385816a05c7bfce3440ad675f1a8f8eb0f", "message": "fix #2058 identify operators with scheduler through new scannable property", "committedDate": "2020-05-26T15:11:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4OTI3MQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r430489271", "bodyText": "replaced this entire bloc of assertions with the unique following one in order to be coherent with the rest of those tests", "author": "aneveu", "createdAt": "2020-05-26T15:12:55Z", "path": "reactor-core/src/test/java/reactor/core/publisher/MonoUsingWhenTest.java", "diffHunk": "@@ -357,28 +356,13 @@ public void resourceSupplierCanAccessContext() {\n \t\t    .verifyComplete();\n \t}\n \n-\t// == scanUnsafe tests ==\n+\t// == scan tests ==\n \n \t@Test\n \tpublic void scanOperator() {\n \t\tMonoUsingWhen<Object, Object> op = new MonoUsingWhen<>(Mono.empty(), Mono::just, Mono::just, Mono::just, Mono::just);\n \n-\t\tassertThat(op.scanUnsafe(Attr.ACTUAL))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.ACTUAL_METADATA))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.BUFFERED))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.CAPACITY))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.CANCELLED))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.DELAY_ERROR))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.ERROR))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.LARGE_BUFFERED))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.NAME))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.PARENT))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.RUN_ON))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.PREFETCH))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.REQUESTED_FROM_DOWNSTREAM))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.TERMINATED))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.TAGS))\n-\t\t\t\t.isNull();", "originalCommit": "1c4032385816a05c7bfce3440ad675f1a8f8eb0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "600f7a242f6ae55b905467457bdb4f689c1f0451", "url": "https://github.com/reactor/reactor-core/commit/600f7a242f6ae55b905467457bdb4f689c1f0451", "message": "fix #2058 use source run mode for FluxSourceMono and fuseable", "committedDate": "2020-05-27T11:44:27Z", "type": "forcePushed"}, {"oid": "a6982dd56dd7435c0001709dd073021197f2a5d7", "url": "https://github.com/reactor/reactor-core/commit/a6982dd56dd7435c0001709dd073021197f2a5d7", "message": "fix #2058 add RUN SYNC attribute to flux implementations of SourceProducer", "committedDate": "2020-06-03T15:15:11Z", "type": "forcePushed"}, {"oid": "9998972238ac7227fda8e66b2102eb778511dea2", "url": "https://github.com/reactor/reactor-core/commit/9998972238ac7227fda8e66b2102eb778511dea2", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 1)", "committedDate": "2020-06-11T08:45:16Z", "type": "forcePushed"}, {"oid": "2d3f7f6bc49d110f9416a3b2c07098a05a20087a", "url": "https://github.com/reactor/reactor-core/commit/2d3f7f6bc49d110f9416a3b2c07098a05a20087a", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 1)", "committedDate": "2020-06-11T08:55:07Z", "type": "forcePushed"}, {"oid": "b7e452722da1910330a0b813570b68728ef6e7b3", "url": "https://github.com/reactor/reactor-core/commit/b7e452722da1910330a0b813570b68728ef6e7b3", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 2)", "committedDate": "2020-06-11T13:01:28Z", "type": "forcePushed"}, {"oid": "90b8d7f5a9da554ae9575ba7d5d5ebf1ee13fcc5", "url": "https://github.com/reactor/reactor-core/commit/90b8d7f5a9da554ae9575ba7d5d5ebf1ee13fcc5", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 4)", "committedDate": "2020-06-17T09:09:00Z", "type": "forcePushed"}, {"oid": "4fe42ba848c8a0d974059fbf23a9bb194fc25f43", "url": "https://github.com/reactor/reactor-core/commit/4fe42ba848c8a0d974059fbf23a9bb194fc25f43", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 4)", "committedDate": "2020-06-17T16:30:42Z", "type": "forcePushed"}, {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "url": "https://github.com/reactor/reactor-core/commit/0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 5)", "committedDate": "2020-06-18T17:44:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNzAzMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442517033", "bodyText": "isn't it potentially ASYNC source?", "author": "robotmrv", "createdAt": "2020-06-18T21:38:24Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxCreate.java", "diffHunk": "@@ -103,7 +103,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1MzQxMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r444353413", "bodyText": "Fixed in commit abd4003", "author": "aneveu", "createdAt": "2020-06-23T16:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNzAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxOTA5Ng==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442519096", "bodyText": "as far as I see it is SYNC", "author": "robotmrv", "createdAt": "2020-06-18T21:43:28Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxElapsed.java", "diffHunk": "@@ -46,6 +46,7 @@\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.RUN_ON) return scheduler;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "originalCommit": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MTIxMA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r443681210", "bodyText": "Fixed in commit a69fc2a", "author": "aneveu", "createdAt": "2020-06-22T16:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxOTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNzUxNQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442527515", "bodyText": "is it really ASYNC? I see it uses Scheduler for getting time", "author": "robotmrv", "createdAt": "2020-06-18T22:04:46Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxReplay.java", "diffHunk": "@@ -1146,6 +1146,7 @@ public Object scanUnsafe(Scannable.Attr key) {\n \t\tif (key == Attr.PREFETCH) return getPrefetch();\n \t\tif (key == Attr.PARENT) return source;\n \t\tif (key == Attr.RUN_ON) return scheduler;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "originalCommit": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1MzExMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r444353113", "bodyText": "Fixed in commit abd4003", "author": "aneveu", "createdAt": "2020-06-23T16:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNzUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDYyOQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442534629", "bodyText": "looks like it is SYNC", "author": "robotmrv", "createdAt": "2020-06-18T22:25:24Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoElapsed.java", "diffHunk": "@@ -41,6 +41,7 @@\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.RUN_ON) return scheduler;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "originalCommit": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MTA5MQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r443681091", "bodyText": "Fixed in commit a69fc2a", "author": "aneveu", "createdAt": "2020-06-22T16:25:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442540799", "bodyText": "I do not see other Lift operators\nare they still in progress?\nDoesn't it ignores scanUnsafe() from its super class?\nDoes it mean that CoreSubscriber<? super I> input considered to be SYNC?", "author": "robotmrv", "createdAt": "2020-06-18T22:44:51Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoLift.java", "diffHunk": "@@ -53,4 +53,9 @@ public String stepName() {\n \t\t}\n \t\treturn super.stepName();\n \t}\n+\n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\treturn Scannable.from(source).scanUnsafe(key);", "originalCommit": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTU4NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442705585", "bodyText": "The LIFT operators are still to be done, indeed.\nI'm sorry, I kept the PR opened after we decided to reverse the logic and extend the declaration of the attribute to all operators but I now realize that it's confusing, even with the WIP prefix in the title \ud83d\ude1e\nBut thank you very much for your review, this kind of repetitive task is prone to error \ud83d\ude05  I'll look at other comments once I'm done to make a final \"corrective\" commit.", "author": "aneveu", "createdAt": "2020-06-19T08:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MjcxOQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r443682719", "bodyText": "Fixed in commit 3c4ebed", "author": "aneveu", "createdAt": "2020-06-22T16:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0ODY3MA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r443748670", "bodyText": "I see that all Lift Publishers marked as SYNC and It means that lift functions must return SYNC Subscribers.\nIf it is so - it is better to mention this in Operators.lift() etc.\nThis behavior makes easier to add more than one Hooks.onEachOperator(Function) or  Hooks.onLastOperator(Function) as we can assume that XXXLift publishers should not be decorated (because of their probably ASYNC nature)\nbut their sources should be checked and it is hard to understand whether current SYNC Publisher is Lift Publisher or not to skip it and traverse to its source or just assume that it safe to not decorate it.\nSo If we assume that lifters produce only synchronous CoreSubscribers it is better to get Attr.RUN_STYLE from its source. So we would not need additional Attr or flag interface on Lift Publishers", "author": "robotmrv", "createdAt": "2020-06-22T18:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNTE0OA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r444025148", "bodyText": "@robotmrv the lift functions and associated operators are the primary mean through which one can set up a onEachOperator hook without running into an infinite loop, aka they don't and shouldn't apply assembly hooks. Perhaps this should be made clearer in the javadoc. But you shouldn't run into the situation of eg. sleuth decorating a LiftPublisher (or a subscriber produced by the user-provided lift function).", "author": "simonbasle", "createdAt": "2020-06-23T07:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3MTg5NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r444071895", "bodyText": "@simonbasle  I think my description of the problem was confusing, so let me explain by example.\nThere are two libraries which apply hooks (e.g. onEachOperator)\nMono.just(0)\n    .delayElement(Duration.ofMillis(100))//some `ASYNC` operator\n//calls onAssembly()\n//    apply first LiftFunction -> `MonoLift` (1) decorates as source is `ASYNC` \n//    apply second LiftFunction -> (2) source is `SYNC` so just skips decoration, that is wrong  \n    .map(it -> ...)// (3) lib 2 context is lost because it was not propagated \n...\nat (1) we have ASYNC source for the first Lift function so it decorates source Publisher\nthen at (2) source is SYNC so it \"thinks\" that it is ok to skip decoration\nat (3) context of the second Lift function is lost", "author": "robotmrv", "createdAt": "2020-06-23T08:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3MzM0Mg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r444073342", "bodyText": "got it, so it should have the \"special\" behavior of delegating the SYNC/ASYNC to the original subscriber. and if said subscriber is not Core, answer UNKNOWN", "author": "simonbasle", "createdAt": "2020-06-23T09:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1Mjg1MA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r444352850", "bodyText": "Fixed in commit abd4003", "author": "aneveu", "createdAt": "2020-06-23T16:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MzcyMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442543723", "bodyText": "isn't the same as #2123 (comment) ?", "author": "robotmrv", "createdAt": "2020-06-18T22:54:38Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoSource.java", "diffHunk": "@@ -86,6 +89,9 @@ public Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.PARENT) {\n \t\t\t\treturn source;\n \t\t}\n+\t\tif (key == RUN_STYLE) {\n+\t\t    return SYNC;", "originalCommit": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MTMyMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r443681323", "bodyText": "Fixed in commit a69fc2a", "author": "aneveu", "createdAt": "2020-06-22T16:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0NDU5NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442544595", "bodyText": "isn't the same as #2123 (comment) ?", "author": "robotmrv", "createdAt": "2020-06-18T22:57:36Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoSourceFuseable.java", "diffHunk": "@@ -79,6 +79,9 @@ public Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.PARENT) {\n \t\t\treturn source;\n \t\t}\n+\t\tif (key == Attr.RUN_STYLE) {\n+\t\t    return Attr.RunStyle.SYNC;", "originalCommit": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MTM5Mg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r443681392", "bodyText": "Fixed in commit a69fc2a", "author": "aneveu", "createdAt": "2020-06-22T16:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0NDU5NQ=="}], "type": "inlineReview"}, {"oid": "3c4ebeda4e237c12428d419b6de2d83a98ac330d", "url": "https://github.com/reactor/reactor-core/commit/3c4ebeda4e237c12428d419b6de2d83a98ac330d", "message": "fix #2058 add RUN SYNC attribute to lift publishers", "committedDate": "2020-06-22T09:02:44Z", "type": "forcePushed"}, {"oid": "abd40036e30e787e47e07fc7461c90fbdb1102e0", "url": "https://github.com/reactor/reactor-core/commit/abd40036e30e787e47e07fc7461c90fbdb1102e0", "message": "fix #2058 code review (part2)", "committedDate": "2020-06-23T16:25:17Z", "type": "forcePushed"}, {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "url": "https://github.com/reactor/reactor-core/commit/a1387b68205b077036a7f0b8fb5c97fa74ffb597", "message": "fix #2058 code review (part2)", "committedDate": "2020-06-25T09:55:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1ODg5NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445558895", "bodyText": "please document this, refer to the enum for strongness of guarantees", "author": "simonbasle", "createdAt": "2020-06-25T13:30:06Z", "path": "reactor-core/src/main/java/reactor/core/Scannable.java", "diffHunk": "@@ -210,6 +210,12 @@\n \t\t */\n \t\tpublic static final Attr<Stream<Tuple2<String, String>>> TAGS = new Attr<>(null);\n \n+\t\tpublic static final Attr<RunStyle> RUN_STYLE = new Attr<>(RunStyle.UNKNOWN);", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1OTkwMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445559903", "bodyText": "I would revert SYNC and ASYNC, document each enum independently and document that sorting by ordinal is effectively sorting from weakest confidence (0, UNKNOWN) to strongest confidence (2, SYNC)", "author": "simonbasle", "createdAt": "2020-06-25T13:31:39Z", "path": "reactor-core/src/main/java/reactor/core/Scannable.java", "diffHunk": "@@ -210,6 +210,12 @@\n \t\t */\n \t\tpublic static final Attr<Stream<Tuple2<String, String>>> TAGS = new Attr<>(null);\n \n+\t\tpublic static final Attr<RunStyle> RUN_STYLE = new Attr<>(RunStyle.UNKNOWN);\n+\n+\t\tpublic enum RunStyle {\n+\t\t\tUNKNOWN, SYNC, ASYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU2MjIzMQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445562231", "bodyText": "at first I wondered if it should delegate to the source, but contrary to LiftSubscriber this one can be asserted by the onEachOperatorHook, so it makes sense to set it as SYNC (eg. so that only the parent would be decorated by Sleuth if ASYNC) \ud83d\udc4d", "author": "simonbasle", "createdAt": "2020-06-25T13:35:04Z", "path": "reactor-core/src/main/java/reactor/core/publisher/ConnectableFluxHide.java", "diffHunk": "@@ -42,9 +42,10 @@ public int getPrefetch() {\n \n \t@Override\n \t@Nullable\n-\tpublic Object scanUnsafe(Scannable.Attr key) {\n-\t\tif (key == Scannable.Attr.PARENT) return source;\n-\t\tif (key == Scannable.Attr.PREFETCH) return getPrefetch();\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.PARENT) return source;\n+\t\tif (key == Attr.PREFETCH) return getPrefetch();\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NTE2MA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445575160", "bodyText": "the ErrorSubscription should also answer to RUN_STYLE", "author": "simonbasle", "createdAt": "2020-06-25T13:52:49Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxErrorOnRequest.java", "diffHunk": "@@ -45,7 +45,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzAzOQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293039", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NzIwMA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445577200", "bodyText": "should probably also cover GenerateSubscription", "author": "simonbasle", "createdAt": "2020-06-25T13:55:32Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxGenerate.java", "diffHunk": "@@ -85,7 +85,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzA4Nw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293087", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NzIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODU1MA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445578550", "bodyText": "as discussed above in ConnectableFluxHide, I think it makes better sense to reply SYNC for xxxHide operators.", "author": "simonbasle", "createdAt": "2020-06-25T13:57:13Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxHide.java", "diffHunk": "@@ -39,6 +40,12 @@\n \t\treturn new HideSubscriber<>(actual);\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t    if (key == Attr.RUN_STYLE) return Scannable.from(source).scanUnsafe(key);", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4MDI1Mg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445580252", "bodyText": "the HideSubscriber and SuppressFuseableSubscriber should also be covered (same, replying SYNC)", "author": "simonbasle", "createdAt": "2020-06-25T13:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4MTc3Mw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445581773", "bodyText": "the IntervalRunnable should also be covered", "author": "simonbasle", "createdAt": "2020-06-25T14:01:33Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxInterval.java", "diffHunk": "@@ -79,6 +78,7 @@ public void subscribe(CoreSubscriber<? super Long> actual) {\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.RUN_ON) return timedScheduler;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4Mjk3NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445582975", "bodyText": "IterableSubscription and its conditional counterpart should also be covered", "author": "simonbasle", "createdAt": "2020-06-25T14:03:21Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxIterable.java", "diffHunk": "@@ -92,6 +95,9 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (iterable instanceof Collection) return ((Collection) iterable).size();\n \t\t\tif (iterable instanceof Tuple2) return ((Tuple2) iterable).size();\n \t\t}\n+\t\tif (key == RUN_STYLE) {\n+\t\t    return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4NjkxMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445586913", "bodyText": "move up, close to subscribeOrReturn. I was first confused that this was covering the inner (which is already covered by virtue of extending the non=fused version)", "author": "simonbasle", "createdAt": "2020-06-25T14:09:08Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxMetricsFuseable.java", "diffHunk": "@@ -185,4 +183,10 @@ public int size() {\n \t\t\treturn qs == null ? 0 : qs.size();\n \t\t}\n \t}\n+\n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NjAyNg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445596026", "bodyText": "the inner WeakScalarSubscription should also be covered. Also, neightbour class FluxJoin isn't covered at all.", "author": "simonbasle", "createdAt": "2020-06-25T14:21:25Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxJust.java", "diffHunk": "@@ -73,6 +73,7 @@ public void subscribe(final CoreSubscriber<? super T> actual) {\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.BUFFERED) return 1;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NzY3OQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445597679", "bodyText": "neighbour class FluxLimitRequest isn't covered at all", "author": "simonbasle", "createdAt": "2020-06-25T14:23:33Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxLiftFuseable.java", "diffHunk": "@@ -62,6 +62,12 @@ public String stepName() {\n \t\treturn super.stepName();\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.RUN_STYLE) return Scannable.from(source).scanUnsafe(key);", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMDI2MA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445600260", "bodyText": "the other subscriber, MergeOrderedMainProducer should also be covered", "author": "simonbasle", "createdAt": "2020-06-25T14:27:08Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxMergeOrdered.java", "diffHunk": "@@ -421,6 +422,7 @@ public Object scanUnsafe(Attr key){\n \t\t\tif (key == Attr.PREFETCH) return prefetch;\n \t\t\tif (key == Attr.TERMINATED) return done;\n \t\t\tif (key == Attr.BUFFERED) return queue.size();\n+\t\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwNDE0NA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445604144", "bodyText": "FluxOnBackpressureBuffer isn't covered at all", "author": "simonbasle", "createdAt": "2020-06-25T14:32:18Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxOnBackpressureBufferStrategy.java", "diffHunk": "@@ -66,6 +66,12 @@ public int getPrefetch() {\n \t\treturn Integer.MAX_VALUE;\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzE0NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293145", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwNDE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwODIwNQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445608205", "bodyText": "the two other inners should probably be covered too", "author": "simonbasle", "createdAt": "2020-06-25T14:37:35Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxPublish.java", "diffHunk": "@@ -552,6 +553,7 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (key == Attr.BUFFERED) return queue != null ? queue.size() : 0;\n \t\t\tif (key == Attr.TERMINATED) return isTerminated();\n \t\t\tif (key == Attr.CANCELLED) return s == Operators.cancelledSubscription();\n+\t\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzIxNg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293216", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwODIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwOTMxOA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445609318", "bodyText": "PublishMulticastInner should be also covered", "author": "simonbasle", "createdAt": "2020-06-25T14:39:03Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxPublishMulticast.java", "diffHunk": "@@ -169,6 +178,9 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (key == Attr.BUFFERED) {\n \t\t\t\treturn queue != null ? queue.size() : 0;\n \t\t\t}\n+\t\t\tif (key == RUN_STYLE) {", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzMwMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293303", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwOTMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxMDU3Mw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445610573", "bodyText": "RangeSubscription should also be covered", "author": "simonbasle", "createdAt": "2020-06-25T14:40:47Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxRange.java", "diffHunk": "@@ -70,7 +70,8 @@ public void subscribe(CoreSubscriber<? super Integer> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzM4Mg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293382", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxMDU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjU2NA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445616564", "bodyText": "actually, after looking carefully at the operator I think this one is SYNC: the timeout only is for delaying cancellation from source. The RefCountInner isn't scheduled on a separate thread. By the way said inner should be covered>", "author": "simonbasle", "createdAt": "2020-06-25T14:48:51Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxRefCountGrace.java", "diffHunk": "@@ -63,6 +63,7 @@ public int getPrefetch() {\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.PREFETCH) return getPrefetch();\n \t\tif (key == Attr.PARENT) return source;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzQ4Nw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293487", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1NTI2Ng==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446055266", "bodyText": "missing coverage of SampleTimeoutMain and SampleTimeoutOther inners", "author": "simonbasle", "createdAt": "2020-06-26T08:51:52Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxSampleTimeout.java", "diffHunk": "@@ -74,6 +74,12 @@ public int getPrefetch() {\n \t\treturn main;\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzY2Mw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293663", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1NTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MTY1NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446061655", "bodyText": "This one and the inner should probably also report RUN_ON.", "author": "simonbasle", "createdAt": "2020-06-26T09:04:29Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxSubscribeOn.java", "diffHunk": "@@ -69,6 +69,12 @@\n \t\treturn null;\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5Mzk5OA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446293998", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MTY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2ODEzOQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446068139", "bodyText": "I think it would make sense to cover TimeoutTimeoutSubscriber and TimeoutOtherSubscriber. They currently don't implement Scannable-via-InnerConsumer<T> though, so it would mean having them implement InnerConsumer<T> (which I think is acceptable)", "author": "simonbasle", "createdAt": "2020-06-26T09:17:28Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxTimeout.java", "diffHunk": "@@ -295,6 +301,12 @@ void handleTimeout() {\n \t\t\t\tother.subscribe(new TimeoutOtherSubscriber<>(actual, this));\n \t\t\t}\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic Object scanUnsafe(Attr key) {\n+\t\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;\n+\t\t\treturn super.scanUnsafe(key);\n+\t\t}\n \t}\n \n \tstatic final class TimeoutOtherSubscriber<T> implements CoreSubscriber<T> {", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5NDE1Ng==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446294156", "bodyText": "Fixed in commit 26552f6 - Could you please confirm main.currentContext is the proper one to be used?", "author": "aneveu", "createdAt": "2020-06-26T16:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2ODEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MjMzMg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446072332", "bodyText": "missing coverage of ZipCoordinator", "author": "simonbasle", "createdAt": "2020-06-26T09:25:20Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxZip.java", "diffHunk": "@@ -488,6 +490,7 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (key == Attr.ACTUAL) return parent;\n \t\t\tif (key == Attr.CANCELLED) return s == Operators.cancelledSubscription();\n \t\t\tif (key == Attr.BUFFERED) return parent.scalars[index] == null ? 0 : 1;\n+\t\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwMDE4Ng==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446300186", "bodyText": "Fixed in commit 0542a81", "author": "aneveu", "createdAt": "2020-06-26T16:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MjMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3NzE1Mg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446077152", "bodyText": "This one is ASYNC, as the Thread that complete the CompletionStage might be different than the one that performs the conversion from CompletionStage to Mono.", "author": "simonbasle", "createdAt": "2020-06-26T09:35:04Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoCompletionStage.java", "diffHunk": "@@ -98,6 +94,7 @@ else if (v != null) {\n \n     @Override\n     public Object scanUnsafe(Attr key) {\n-        return null; //no particular key to be represented, still useful in hooks\n+        if (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwMDEyOA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446300128", "bodyText": "Fixed in commit 0542a81", "author": "aneveu", "createdAt": "2020-06-26T16:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3NzE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3ODUwNg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446078506", "bodyText": "Like FluxCreate, MonoCreate is ASYNC> It is debatable for the sink itself, since it is unlikely to be wrapped by hooks, but to be on the safe side let's mark it as ASYNC too.", "author": "simonbasle", "createdAt": "2020-06-26T09:37:51Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoCreate.java", "diffHunk": "@@ -115,6 +116,9 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (key == Attr.CANCELLED) {\n \t\t\t\treturn disposable == CANCELLED;\n \t\t\t}\n+\t\t\tif (key == Attr.RUN_STYLE) {", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwMDA0Ng==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446300046", "bodyText": "Fixed in commit 0542a81", "author": "aneveu", "createdAt": "2020-06-26T16:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3ODUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3ODUxOA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446078518", "bodyText": "Like FluxCreate, MonoCreate is ASYNC", "author": "simonbasle", "createdAt": "2020-06-26T09:37:54Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoCreate.java", "diffHunk": "@@ -63,7 +63,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5OTk5NQ==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446299995", "bodyText": "Fixed in commit 0542a81", "author": "aneveu", "createdAt": "2020-06-26T16:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3ODUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4ODIwMw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446088203", "bodyText": "as discussed in ConnectableFluxHide and FluxHide, I think it makes better sense to reply SYNC for xxxHide operators.", "author": "simonbasle", "createdAt": "2020-06-26T09:57:19Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoHide.java", "diffHunk": "@@ -37,4 +38,10 @@\n     public CoreSubscriber<? super T> subscribeOrReturn(CoreSubscriber<? super T> actual) {\n         return new FluxHide.HideSubscriber<>(actual);\n     }\n+\n+    @Override\n+    public Object scanUnsafe(Attr key) {\n+        if (key == Attr.RUN_STYLE) return Scannable.from(source).scanUnsafe(key);", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5ODQ1Mg==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446298452", "bodyText": "Fixed in commit 26552f6", "author": "aneveu", "createdAt": "2020-06-26T16:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4ODIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5NTI5Nw==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446095297", "bodyText": "should also cover MonoUsingSubscriber", "author": "simonbasle", "createdAt": "2020-06-26T10:12:32Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoUsing.java", "diffHunk": "@@ -116,7 +116,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5OTkzMA==", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446299930", "bodyText": "Fixed in commit 0542a81", "author": "aneveu", "createdAt": "2020-06-26T16:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5NTI5Nw=="}], "type": "inlineReview"}, {"oid": "26552f67f2cfd7c10e59e60f3b905504c55b6e1d", "url": "https://github.com/reactor/reactor-core/commit/26552f67f2cfd7c10e59e60f3b905504c55b6e1d", "message": "fix #2058 code review (part 3)", "committedDate": "2020-06-26T16:16:12Z", "type": "forcePushed"}, {"oid": "a8162d675ed6c6d1287b0553ab4bec032b6d504c", "url": "https://github.com/reactor/reactor-core/commit/a8162d675ed6c6d1287b0553ab4bec032b6d504c", "message": "fix #2058 code review (part 4)", "committedDate": "2020-06-29T14:42:23Z", "type": "forcePushed"}, {"oid": "3c32e4a585e7336d4b87773a08e4e47f198714c8", "url": "https://github.com/reactor/reactor-core/commit/3c32e4a585e7336d4b87773a08e4e47f198714c8", "message": "fix #2058 add RUN SYNC attribute to implementations of MonoOperator", "committedDate": "2020-07-02T08:41:30Z", "type": "commit"}, {"oid": "c834e1ec8fcbcd522757e8ea9de00adc66523c8d", "url": "https://github.com/reactor/reactor-core/commit/c834e1ec8fcbcd522757e8ea9de00adc66523c8d", "message": "fix #2058 add RUN SYNC attribute to implementations of MonoFromFluxOperator + clean on Mono Operator", "committedDate": "2020-07-02T08:41:30Z", "type": "commit"}, {"oid": "7bf0336611f3c8c41e692d6199896e5f682a22a3", "url": "https://github.com/reactor/reactor-core/commit/7bf0336611f3c8c41e692d6199896e5f682a22a3", "message": "fix #2058 add RUN SYNC attribute to implementations of FluxOperator", "committedDate": "2020-07-02T08:41:30Z", "type": "commit"}, {"oid": "614c9e045be0566e83f616f4bf87f58d423f8486", "url": "https://github.com/reactor/reactor-core/commit/614c9e045be0566e83f616f4bf87f58d423f8486", "message": "fix #2058 add RUN SYNC attribute to flux implementations of SourceProducer", "committedDate": "2020-07-02T08:41:30Z", "type": "commit"}, {"oid": "2e671ca2b669b4b7277d18a7d5c8b53e50aa6787", "url": "https://github.com/reactor/reactor-core/commit/2e671ca2b669b4b7277d18a7d5c8b53e50aa6787", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 2)", "committedDate": "2020-07-02T08:46:29Z", "type": "commit"}, {"oid": "5e4b9e14ec685b0de66be4ac6ad1026e68485aa2", "url": "https://github.com/reactor/reactor-core/commit/5e4b9e14ec685b0de66be4ac6ad1026e68485aa2", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 3)", "committedDate": "2020-07-02T08:46:29Z", "type": "commit"}, {"oid": "11f2c85efe3403493a5f33e2d474580b6c720ad2", "url": "https://github.com/reactor/reactor-core/commit/11f2c85efe3403493a5f33e2d474580b6c720ad2", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 4)", "committedDate": "2020-07-02T08:46:29Z", "type": "commit"}, {"oid": "963c2c703cea6eb9dc14d232a9da228f1b788c25", "url": "https://github.com/reactor/reactor-core/commit/963c2c703cea6eb9dc14d232a9da228f1b788c25", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 5)", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "66bc75f33ae07801bd53f96767ca30e7031c970b", "url": "https://github.com/reactor/reactor-core/commit/66bc75f33ae07801bd53f96767ca30e7031c970b", "message": "fix #2058 add RUN SYNC attribute to lift publishers", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "6cb3b3da50a436fdb8b5c965783b2089c6b49ff3", "url": "https://github.com/reactor/reactor-core/commit/6cb3b3da50a436fdb8b5c965783b2089c6b49ff3", "message": "fix #2058 add RUN SYNC attribute to Mono Publishers", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "511d2e9781da2acdc453878617eaa3354151bd09", "url": "https://github.com/reactor/reactor-core/commit/511d2e9781da2acdc453878617eaa3354151bd09", "message": "fix #2058 add RUN SYNC attribute to ConnectableFlux implementations", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "87d573910aab8922c1b6e15bfc344f3c656eb643", "url": "https://github.com/reactor/reactor-core/commit/87d573910aab8922c1b6e15bfc344f3c656eb643", "message": "fix #2058 add RUN SYNC attribute to ParallelFlux implementations", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "41f82a8bfa78d0f0fadcc9d0f88b60fdafdea6b8", "url": "https://github.com/reactor/reactor-core/commit/41f82a8bfa78d0f0fadcc9d0f88b60fdafdea6b8", "message": "fix #2058 code review", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "ec8e72dcccc472ab883135be8bdc70b9029344d3", "url": "https://github.com/reactor/reactor-core/commit/ec8e72dcccc472ab883135be8bdc70b9029344d3", "message": "fix #2058 add missing ParallelFlux Implementations :(", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "89ba942ca14767b5e8e02ad882eaa4c7015cd7d2", "url": "https://github.com/reactor/reactor-core/commit/89ba942ca14767b5e8e02ad882eaa4c7015cd7d2", "message": "fix #2058 code review (part2)", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "b5f33983ec23d6df70c12b0d2466f2f9299ec06f", "url": "https://github.com/reactor/reactor-core/commit/b5f33983ec23d6df70c12b0d2466f2f9299ec06f", "message": "fix #2058 code review (part 3)", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "8acdbf84e79a8fb0819d658f9e7dcb8da6753aa4", "url": "https://github.com/reactor/reactor-core/commit/8acdbf84e79a8fb0819d658f9e7dcb8da6753aa4", "message": "fix #2058 code review (part 4)", "committedDate": "2020-07-02T08:49:17Z", "type": "commit"}, {"oid": "ce02fc4bfcc8ff3943cf8462312a2bd2c178dbc7", "url": "https://github.com/reactor/reactor-core/commit/ce02fc4bfcc8ff3943cf8462312a2bd2c178dbc7", "message": "fix #2058 add RUN_SYNC attribute to FluxConcatMapNoPrefetch", "committedDate": "2020-07-02T09:09:17Z", "type": "commit"}, {"oid": "1e7d1961e58108b9590de910df6aa8be6a01c0c1", "url": "https://github.com/reactor/reactor-core/commit/1e7d1961e58108b9590de910df6aa8be6a01c0c1", "message": "fix #2058 add RUN_SYNC attribute to FluxConcatMapNoPrefetch", "committedDate": "2020-07-02T09:28:45Z", "type": "commit"}, {"oid": "1e7d1961e58108b9590de910df6aa8be6a01c0c1", "url": "https://github.com/reactor/reactor-core/commit/1e7d1961e58108b9590de910df6aa8be6a01c0c1", "message": "fix #2058 add RUN_SYNC attribute to FluxConcatMapNoPrefetch", "committedDate": "2020-07-02T09:28:45Z", "type": "forcePushed"}]}