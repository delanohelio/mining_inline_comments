{"pr_number": 1961, "pr_title": "Add a testcase for -wdtModelHome option to the imagetool", "pr_createdAt": "2020-09-30T16:26:26Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961", "timeline": [{"oid": "5eeaad79e7cc247d4671db2ec0284886bcae14bf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5eeaad79e7cc247d4671db2ec0284886bcae14bf", "message": "add wdtModelHome parameter", "committedDate": "2020-09-24T16:24:16Z", "type": "commit"}, {"oid": "b8b4f38a44844ae7bee9c421b8c36f32ee3b1681", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b8b4f38a44844ae7bee9c421b8c36f32ee3b1681", "message": "Adding testcase for custom wdt model home", "committedDate": "2020-09-24T19:21:43Z", "type": "commit"}, {"oid": "0fdea868214378eaf471502d0a170cf3bc6d0e39", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0fdea868214378eaf471502d0a170cf3bc6d0e39", "message": "fix model home", "committedDate": "2020-09-24T19:44:11Z", "type": "commit"}, {"oid": "ab877c7a3ef4ce51264725899cb34ed431fa1e08", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ab877c7a3ef4ce51264725899cb34ed431fa1e08", "message": "fix wdtmodelhome location", "committedDate": "2020-09-24T21:03:24Z", "type": "commit"}, {"oid": "3179be8ff0f4edc3ef6b9180206d95f6113074d0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3179be8ff0f4edc3ef6b9180206d95f6113074d0", "message": "remove @Test annotation", "committedDate": "2020-09-24T23:00:19Z", "type": "commit"}, {"oid": "293145574a17823ad62dca89d8177a97811f3807", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/293145574a17823ad62dca89d8177a97811f3807", "message": "log domain uid and image", "committedDate": "2020-09-24T23:14:53Z", "type": "commit"}, {"oid": "cecde4fe2979b80a81c17c9ec05a4c557da6fbf0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cecde4fe2979b80a81c17c9ec05a4c557da6fbf0", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption", "committedDate": "2020-09-25T21:57:45Z", "type": "commit"}, {"oid": "e8682053cd7729b1f422da41781ffaebe7d6609f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e8682053cd7729b1f422da41781ffaebe7d6609f", "message": "fix image name", "committedDate": "2020-09-25T22:07:53Z", "type": "commit"}, {"oid": "913e5e940a20cb2a6743d931adb02601f5479b4b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/913e5e940a20cb2a6743d931adb02601f5479b4b", "message": "use wls pod for pv manipulation", "committedDate": "2020-09-25T22:44:20Z", "type": "commit"}, {"oid": "95d8a40d1e52e690e0472445cc9d4a63ede51c67", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/95d8a40d1e52e690e0472445cc9d4a63ede51c67", "message": "change pv name", "committedDate": "2020-09-25T22:51:17Z", "type": "commit"}, {"oid": "f7c3c1b5feaea670fe4a4119ff549d8394d8d6b9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f7c3c1b5feaea670fe4a4119ff549d8394d8d6b9", "message": "wip", "committedDate": "2020-09-25T23:02:54Z", "type": "commit"}, {"oid": "34fcceb0d1bf62d45f4bf96c634959e2cde84870", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/34fcceb0d1bf62d45f4bf96c634959e2cde84870", "message": "change pv permission to oracle:root", "committedDate": "2020-09-25T23:13:39Z", "type": "commit"}, {"oid": "015fb601942fb0064a0376302d0153d410ed8d08", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/015fb601942fb0064a0376302d0153d410ed8d08", "message": "use variable to store location model home", "committedDate": "2020-09-25T23:44:43Z", "type": "commit"}, {"oid": "d946c72435882d144596e410f26673aec71ff3f1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d946c72435882d144596e410f26673aec71ff3f1", "message": "wip", "committedDate": "2020-09-25T23:45:34Z", "type": "commit"}, {"oid": "c82c63cdc1e5bfc6dcbf6c9e3a7a393d4b4a6253", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c82c63cdc1e5bfc6dcbf6c9e3a7a393d4b4a6253", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption", "committedDate": "2020-09-28T19:39:34Z", "type": "commit"}, {"oid": "f3907f1292192af5caacb95c5bca0b5e0b689c26", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f3907f1292192af5caacb95c5bca0b5e0b689c26", "message": "add modelfile to the image", "committedDate": "2020-09-28T19:39:43Z", "type": "commit"}, {"oid": "b378fcd95bd53c86b7594e22dc5f0ab4b5bd6677", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b378fcd95bd53c86b7594e22dc5f0ab4b5bd6677", "message": "supply modelfile in the image building process", "committedDate": "2020-09-28T19:53:57Z", "type": "commit"}, {"oid": "3f10ba99fe7edbfeeb6cf4c6c50f66e1e5e68e2a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3f10ba99fe7edbfeeb6cf4c6c50f66e1e5e68e2a", "message": "fix image push", "committedDate": "2020-09-28T20:16:16Z", "type": "commit"}, {"oid": "15dad7dfc3d83a773aacaa3310b1f6102471f433", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/15dad7dfc3d83a773aacaa3310b1f6102471f433", "message": "fix comments and javadocs", "committedDate": "2020-09-28T23:53:55Z", "type": "commit"}, {"oid": "0a73750dc83aa67879abb4f89151cc6b09a22cef", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0a73750dc83aa67879abb4f89151cc6b09a22cef", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption", "committedDate": "2020-09-28T23:54:23Z", "type": "commit"}, {"oid": "0cfdb5e4491afed2c8f195c5fbecb2d304ba8c68", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0cfdb5e4491afed2c8f195c5fbecb2d304ba8c68", "message": "fix log message", "committedDate": "2020-09-29T16:24:38Z", "type": "commit"}, {"oid": "dad5f2516ced7eab6586d6b3aaad00cb7e175fb2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dad5f2516ced7eab6586d6b3aaad00cb7e175fb2", "message": "fix image check", "committedDate": "2020-09-29T17:56:55Z", "type": "commit"}, {"oid": "5b6c144404efa43b25ea309956f2e79496b2351a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5b6c144404efa43b25ea309956f2e79496b2351a", "message": "list images", "committedDate": "2020-09-29T19:37:39Z", "type": "commit"}, {"oid": "f44fdd34a8437131c339b8399e1bb629055f02c5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f44fdd34a8437131c339b8399e1bb629055f02c5", "message": "fix image name", "committedDate": "2020-09-29T20:30:04Z", "type": "commit"}, {"oid": "69acea974f2b9a941e6243320c71074988ea2658", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/69acea974f2b9a941e6243320c71074988ea2658", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption", "committedDate": "2020-09-30T16:20:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTE4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498289186", "bodyText": "see if these lines can be replaced with below and remove try, catch\n      Command.withParams(new CommandParams()\n          .command(cmd)\n          .redirect(false)).execute()", "author": "vanajamukkara", "createdAt": "2020-10-01T14:29:18Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");", "originalCommit": "69acea974f2b9a941e6243320c71074988ea2658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2MzcyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498363728", "bodyText": "I am executing this command inside a pod. How  can I use Command.execute() ?", "author": "sankarpn", "createdAt": "2020-10-01T16:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNDE5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498424196", "bodyText": "Moved the exec command to CommonTestUtils and checking for non zero exit value, non null/empty stderr to assert the exec is successful.", "author": "sankarpn", "createdAt": "2020-10-01T18:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTQwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498289403", "bodyText": "same as above", "author": "vanajamukkara", "createdAt": "2020-10-01T14:29:35Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");", "originalCommit": "69acea974f2b9a941e6243320c71074988ea2658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNDMyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498424327", "bodyText": "Moved the exec command to CommonTestUtils and checking for non zero exit value, non null/empty stderr to assert the exec is successful.", "author": "sankarpn", "createdAt": "2020-10-01T18:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498291625", "bodyText": "replace with assertDoesNotThrow(() -> copyFileToPod()) and remove try, catch", "author": "vanajamukkara", "createdAt": "2020-10-01T14:32:31Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "originalCommit": "69acea974f2b9a941e6243320c71074988ea2658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NDYyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498364620", "bodyText": "The copy command above some times generates exceptions which are harmless, If I put the copy command in assertDoesNotThrow its going to fail intermittently. With try catch I can simply ignore the exceptions.", "author": "sankarpn", "createdAt": "2020-10-01T16:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3ODM4MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498378381", "bodyText": "If exceptions are harmless, how about catching them in Kubernetes.copyFileToPod() method itself and ignore/log them?", "author": "vanajamukkara", "createdAt": "2020-10-01T16:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyOTg1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498429858", "bodyText": "There are many IT files using the Kubernetes.copyFileToPod() method. I don't want to touch those files in this PR. Moved the copy command from test class to CommonTestUtils", "author": "sankarpn", "createdAt": "2020-10-01T18:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MjAyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498292024", "bodyText": "same as above", "author": "vanajamukkara", "createdAt": "2020-10-01T14:33:02Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "originalCommit": "69acea974f2b9a941e6243320c71074988ea2658", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5Mjg4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498292882", "bodyText": "same as other", "author": "vanajamukkara", "createdAt": "2020-10-01T14:34:12Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\"));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n+    try {\n+      logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+      Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"chown -R oracle:root \" + modelMountPath);", "originalCommit": "69acea974f2b9a941e6243320c71074988ea2658", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDE2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498294160", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Test domain creation from model file stored in PV.https://oracle.github.io/weblogic-kubernetes-operator\n          \n          \n            \n               * Test domain creation from model file stored in PV. https://oracle.github.io/weblogic-kubernetes-operator", "author": "vanajamukkara", "createdAt": "2020-10-01T14:35:49Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\"));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n+    try {\n+      logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+      Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"chown -R oracle:root \" + modelMountPath);\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n   }\n \n   /**\n-   * Test domain creation from model file stored in PV.\n-   * https://oracle.github.io/weblogic-kubernetes-operator\n-   *       /userguide/managing-domains/domain-resource/#domain-spec-elements\n-   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n-   * 2. Verify the domain creation is successful and application is accessible.\n+   * Test domain creation from model file stored in PV.https://oracle.github.io/weblogic-kubernetes-operator", "originalCommit": "69acea974f2b9a941e6243320c71074988ea2658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NjY3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498366679", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-10-01T16:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjYwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498302605", "bodyText": "looks like this is only for debugging purposes, it can be removed as there is an assert in the next line", "author": "vanajamukkara", "createdAt": "2020-10-01T14:46:54Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -366,15 +443,28 @@ private static void buildMIIandPushToRepo() {\n     checkDirectory(WIT_BUILD_DIR);\n     Map<String, String> env = new HashMap<>();\n     env.put(\"WLSIMG_BLDDIR\", WIT_BUILD_DIR);\n-    createImage(defaultWitParams()\n-        .modelImageName(MII_BASIC_IMAGE_NAME)\n-        .modelImageTag(miiImageTag)\n+    WitParams defaultWitParams = defaultWitParams();\n+    if (customWDTHome != null) {\n+      defaultWitParams.wdtModelHome(customWDTHome);\n+    }\n+    createImage(defaultWitParams\n+        .modelImageName(imageName)\n+        .modelImageTag(imageTag)\n         .modelFiles(modelList)\n         .wdtModelOnly(true)\n         .wdtVersion(WDT_VERSION)\n         .env(env)\n         .redirect(true));\n+    Command.defaultCommandParams()", "originalCommit": "69acea974f2b9a941e6243320c71074988ea2658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Njc0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498366743", "bodyText": "removed", "author": "sankarpn", "createdAt": "2020-10-01T16:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjYwNQ=="}], "type": "inlineReview"}, {"oid": "bb051b6f664cd7302eb52c6a87564ece51613f47", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb051b6f664cd7302eb52c6a87564ece51613f47", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption", "committedDate": "2020-10-01T15:56:18Z", "type": "commit"}, {"oid": "02296697fa2dbe3e3adc2d0a9a6dae58d128fda3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/02296697fa2dbe3e3adc2d0a9a6dae58d128fda3", "message": "address review comments", "committedDate": "2020-10-01T16:16:42Z", "type": "commit"}, {"oid": "dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2", "message": "add the pod exec and copy commands to common util file", "committedDate": "2020-10-01T17:57:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjAyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498436029", "bodyText": "You can use existing FileUtils.copyFileToPod(String namespace,\nString pod,\nString container,\nPath srcPath,\nPath destPath)", "author": "maggiehe00", "createdAt": "2020-10-01T18:24:32Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1305,6 +1306,55 @@ public static void createDomainAndVerify(Domain domain, String domainNamespace)\n     return ingressHostList;\n   }\n \n+\n+  /**\n+   * Execute command inside a pod and assert the execution.\n+   *\n+   * @param pod V1Pod object\n+   * @param containerName name of the container inside the pod\n+   * @param redirectToStdout if true redirect to stdout and stderr\n+   * @param command the command to execute inside the pod\n+   */\n+  public static void execInPod(V1Pod pod, String containerName, boolean redirectToStdout, String command) {\n+    LoggingFacade logger = getLogger();\n+    ExecResult exec = null;\n+    try {\n+      logger.info(\"Executing command {0}\", command);\n+      exec = Exec.exec(pod, containerName, redirectToStdout, \"/bin/sh\", \"-c\", command);\n+      // checking for exitValue 0 for success fails sometimes as k8s exec api returns non-zero\n+      // exit value even on success, so checking for exitValue non-zero and stderr not empty for failure,\n+      // otherwise its success\n+      assertFalse(exec.exitValue() != 0 && exec.stderr() != null && !exec.stderr().isEmpty(),\n+          String.format(\"Command %s failed with exit value %s, stderr %s, stdout %s\",\n+              command, exec.exitValue(), exec.stderr(), exec.stdout()));\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+  }\n+\n+\n+  /**\n+   * Copy a file to the pod.\n+   *\n+   * @param namespace the namespace in which the pod exists\n+   * @param podName name of the pod\n+   * @param containerName name of the container inside the pod\n+   * @param srcPath source path of the file to copy\n+   * @param dstPath destination path for the file inside the pod\n+   */\n+  public static void copyFileToPod(String namespace, String podName,\n+      String containerName, Path srcPath, Path dstPath) {\n+    LoggingFacade logger = getLogger();\n+    try {\n+      logger.info(\"Copying file {0} inside pod location {1}\", srcPath, dstPath);\n+      Kubernetes.copyFileToPod(namespace, podName, containerName, srcPath, dstPath);\n+    } catch (ApiException | IOException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+  }\n+\n+\n+", "originalCommit": "dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2MzM5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498463390", "bodyText": "Using  it from FileUtils", "author": "sankarpn", "createdAt": "2020-10-01T19:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjAyOQ=="}], "type": "inlineReview"}, {"oid": "797d98a8a01b59af4731744408bf2ae3d3bb0415", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/797d98a8a01b59af4731744408bf2ae3d3bb0415", "message": "use file util from FileUtils", "committedDate": "2020-10-01T19:17:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDc3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498544773", "bodyText": "WebLogic domain ( we have just one right?)", "author": "marinakog", "createdAt": "2020-10-01T22:34:10Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -134,19 +158,30 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     assertNotNull(namespaces.get(0), \"Namespace list is null\");\n     String opNamespace = namespaces.get(0);\n \n-    // get a unique domain namespace\n-    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domains\");\n     assertNotNull(namespaces.get(1), \"Namespace list is null\");\n     domainNamespace = namespaces.get(1);", "originalCommit": "797d98a8a01b59af4731744408bf2ae3d3bb0415", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNTY4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498905683", "bodyText": "no there are 2 domains created, its parameterized test", "author": "sankarpn", "createdAt": "2020-10-02T15:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDc3Mw=="}], "type": "inlineReview"}, {"oid": "7cbbac7877903e53359716a6183669dd72521aaf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7cbbac7877903e53359716a6183669dd72521aaf", "message": "fix merge conflicts\nMerge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption", "committedDate": "2020-10-01T22:37:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1Mzk4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498553986", "bodyText": "Fix the bullet numbering", "author": "anpanigr", "createdAt": "2020-10-01T23:07:21Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -156,72 +182,87 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n-    try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n-    } catch (IOException | ApiException | InterruptedException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n-    try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n-    } catch (IOException | ApiException | InterruptedException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n+    logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+    execInPod(pvPod, null, true, \"mkdir -p \" + modelMountPath + \"/applications\");\n \n-    try {\n-      //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n-      logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n-    } catch (IOException | ApiException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n-    try {\n-      logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n-    } catch (IOException | ApiException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n+    logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+    execInPod(pvPod, null, true, \"mkdir -p \" + modelMountPath + \"/model\");\n+\n+    //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n+    logger.info(\"Copying model file {0} to pv directory {1}\",\n+        Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\", modelFile);\n+    assertDoesNotThrow(() -> copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+        Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile)),\n+        \"Copying file to pod failed\");\n \n+    logger.info(\"Copying application file {0} to pv directory {1}\",\n+        clusterViewAppPath.toString(), modelMountPath + \"/applications\", \"clusterview.war\");\n+    assertDoesNotThrow(() -> copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+        clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\")),\n+        \"Copying file to pod failed\");\n+\n+    logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+    execInPod(pvPod, null, true, \"chown -R oracle:root \" + modelMountPath);\n   }\n \n   /**\n-   * Test domain creation from model file stored in PV.\n-   * https://oracle.github.io/weblogic-kubernetes-operator\n-   *       /userguide/managing-domains/domain-resource/#domain-spec-elements\n-   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n-   * 2. Verify the domain creation is successful and application is accessible.\n+   * Test domain creation from model file stored in PV. https://oracle.github.io/weblogic-kubernetes-operator\n+       /userguide/managing-domains/domain-resource/#domain-spec-elements\n+    1.Create the domain custom resource using mii with no domain and specifying a PV location for modelHome", "originalCommit": "7cbbac7877903e53359716a6183669dd72521aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNjA4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498906085", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-10-02T15:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1Mzk4Ng=="}], "type": "inlineReview"}]}