{"pr_number": 2096, "pr_title": "OWLS-86409: Additional Managed Server LifeCycle Tests and update usecases without Admin Server  ", "pr_createdAt": "2020-12-10T23:25:34Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2096", "timeline": [{"oid": "da0a760e2f82881055113517aeb637c3389bdd64", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/da0a760e2f82881055113517aeb637c3389bdd64", "message": "Add more tests and enhance the msi mode usecase", "committedDate": "2020-12-10T21:58:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NzU0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2096#discussion_r540587549", "bodyText": "extra \"i' on this line", "author": "alai8", "createdAt": "2020-12-10T23:54:27Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -505,88 +458,73 @@ public void testDomainRestart() {\n   }\n \n   /**\n-   * The domain custom resource has a second configured manged server with serverStartPolicy IF_NEEDED\n-   * Initially, the server will not come up since the replica count is set to 1\n-   * Update the serverStartPolicy for config-cluster-server2 to ALWAYS\n-   * by patching the resource definition with \n+   * Verify ALWAYS serverStartPolicy (config cluster) overrides replica count.\n+   * The configured cluster has a second managed server(config-cluster-server2)\n+   * with serverStartPolicy set to IF_NEEDED. Initially, the server will not \n+   * come up since the replica count for the cluster is set to 1. \n+   * Update the serverStartPolicy for the server config-cluster-server2 to i", "originalCommit": "da0a760e2f82881055113517aeb637c3389bdd64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNjg0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2096#discussion_r541136844", "bodyText": "Fixed the typo", "author": "anpanigr", "createdAt": "2020-12-11T18:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NzU0OQ=="}], "type": "inlineReview"}, {"oid": "2806e8025a96dc34e2be7c44f3faa91e9ab78785", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2806e8025a96dc34e2be7c44f3faa91e9ab78785", "message": "fixed the typo", "committedDate": "2020-12-11T14:22:49Z", "type": "commit"}, {"oid": "a3998174f1c3bc9909c63ff639ba9204f4358653", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a3998174f1c3bc9909c63ff639ba9204f4358653", "message": "remove JRF test from wls-image-cert profile", "committedDate": "2020-12-11T16:11:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyODE1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2096#discussion_r541128159", "bodyText": "starti --> start", "author": "hzhao-github", "createdAt": "2020-12-11T18:01:10Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -865,66 +845,173 @@ public void testStartManagedServerBeyondMaxClusterLimit() {\n     String result =  assertDoesNotThrow(() ->\n         executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, configServerName, \"\", false),\n         String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n-    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyond the limit\");\n \n     // verify that the script can not start a server in dynamic cluster that exceeds the max cluster size\n     regex = \".*outside the range of allowed servers\";\n     result =  assertDoesNotThrow(() ->\n         executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, dynServerName, \"\", false),\n         String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n-    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyond the limit\");\n   }\n \n   /**\n-   * Verify that after the admin server is stopped, the sample script can start or stop a managed server.\n+   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n+   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+   * Once the admin server is stopped, operator can not start a new managed \n+   * server from scrtach if it has never been started eralier with Admin Server\n+   * Once the admin server is stopped, the managed server can only be started \n+   * in MSI (managed server independence) mode. To start a manged server in \n+   * MSI mode, the pre-requisite is the that the manged server MUST be started \n+   * once before admin server is shutdown, so that the embedded LDAP server is \n+   * replicated from admin server to the managed server. \n+   * In this case of MII and DomainInImage model, the server state/configuration\n+   * is not saved once the server is shutdown unless we use domain-on-pv model\n+   * So in MII case, startServer.sh script update the replica count but the \n+   * server startup is defered till we re-start the adminserver. Here the \n+   * operator tries to starti the managed server but it will keep on failing \n+   * until AdminServer is available.   \n    */\n-  @Disabled(\"Due to the bug OWLS-86251\")\n+  @Order(15)\n   @Test\n-  @DisplayName(\"In the absence of Administration Server, sample script can start/stop a managed server\")\n-  public void testServerRestartManagedServerWithoutAdmin() {\n-    String serverName = \"config-cluster-server1\";\n+  @DisplayName(\"Manage dynamic cluster server in absence of Administration Server\")\n+  public void testDynamicServerLifeCycleWithoutAdmin() {\n+    String serverName = \"managed-server1\";\n+    // domainUid + \"-\" + serverName;\n+    String serverPodName = managedServerPrefix + \"1\";\n+    // Here managed server can be stopped without admin server \n+    // but can not be started to RUNNING state.\n \n     try {\n+      // Make sure that managed-server-1 is RUNNING\n+      checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n+      logger.info(\"Server Pod [\" + serverName + \"] is in RUNNING state\");\n+\n       // shutdown the admin server\n       patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"NEVER\");\n       logger.info(\"Domain is patched to shutdown administration server\");\n+      checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+      logger.info(\"Administration server shutdown success\");\n \n-      // verify that the script can stop a server in absent of admin server\n+      // verify the script can stop the server by reducing replica count\n       assertDoesNotThrow(() ->\n-          executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, \"\", true),\n+          executeLifecycleScript(STOP_SERVER_SCRIPT, \n+                                 SERVER_LIFECYCLE, serverName, \"\", true),\n           String.format(\"Failed to run %s\", STOP_SERVER_SCRIPT));\n-      checkPodDeleted(serverName, domainUid, domainNamespace);\n-      logger.info(\"Shutdown \" + serverName + \" without admin server success\");\n+      checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+      logger.info(\"Shutdown [\" + serverName + \"] without admin server success\");\n \n-      // verify that the script can start a server in absent of admin server\n+      // Here the script increase the replica count by 1, but operator cannot \n+      // start server in MSI mode as the server state (configuration) is \n+      // lost while stopping the server in mii model.\n+      \n       assertDoesNotThrow(() ->\n           executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, \"\", true),\n           String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n-      checkPodReadyAndServiceExists(serverName, domainUid, domainNamespace);\n-      logger.info(\"Start \" + serverName + \" without admin server success\");\n-\n-      // verify that in absent of admin server, when server is part of a cluster and\n-      // keep_replica_constant option is false (the default)\n-      // and the effective start policy of the server is IF_NEEDED and increasing replica count\n-      // will naturally start the server, the script increases the replica count\n-      String serverName2 = \"managed-server2\";\n+      logger.info(\"Replica count increased without admin server\");\n+\n+      // Check if pod in init state\n+      // Here the server pd is created but does not goes into 1/1 state\n+      checkPodInitializing(serverPodName, domainUid, domainNamespace);\n+      logger.info(\"Server[\" + serverName + \"] pod is initialized\");\n+\n+      // (re)Start Start the admin\n+      patchServerStartPolicy(\n+             \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      checkPodReadyAndServiceExists(\n+             adminServerPodName, domainUid, domainNamespace);\n+      logger.info(\"AdminServer restart success\");\n+\n+      checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n+      logger.info(\"(re)Started [\" + serverName + \"] on admin server restart\");\n+    } finally {\n+      // restart admin server\n+      patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      logger.info(\"Check admin service/pod {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n+   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+   * Once the admin server is stopped, operator can not start a new managed \n+   * server from scrtach if it has never been started eralier with Admin Server\n+   * Once the admin server is stopped, the managed server can only be started \n+   * in MSI (managed server independence) mode. To start a manged server in \n+   * MSI mode, the pre-requisite is the that the manged server MUST be started \n+   * once before admin server is shutdown, so that the embedded LDAP server is \n+   * replicated from admin server to the managed server. \n+   * In this case of MII and DomainInImage model, the server state/configuration\n+   * is not saved once the server is shutdown unless we use domain-on-pv model\n+   * So in MII case, startServer.sh script update the replica count but the \n+   * server startup is defered till we re-start the adminserver. Here the \n+   * operator tries to starti the managed server but it will keep on failing ", "originalCommit": "a3998174f1c3bc9909c63ff639ba9204f4358653", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNzAzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2096#discussion_r541137036", "bodyText": "Fixed the typo", "author": "anpanigr", "createdAt": "2020-12-11T18:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyODE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTIxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2096#discussion_r541129210", "bodyText": "starti --> start", "author": "hzhao-github", "createdAt": "2020-12-11T18:02:58Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -865,66 +845,173 @@ public void testStartManagedServerBeyondMaxClusterLimit() {\n     String result =  assertDoesNotThrow(() ->\n         executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, configServerName, \"\", false),\n         String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n-    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyond the limit\");\n \n     // verify that the script can not start a server in dynamic cluster that exceeds the max cluster size\n     regex = \".*outside the range of allowed servers\";\n     result =  assertDoesNotThrow(() ->\n         executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, dynServerName, \"\", false),\n         String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n-    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyond the limit\");\n   }\n \n   /**\n-   * Verify that after the admin server is stopped, the sample script can start or stop a managed server.\n+   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n+   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+   * Once the admin server is stopped, operator can not start a new managed \n+   * server from scrtach if it has never been started eralier with Admin Server\n+   * Once the admin server is stopped, the managed server can only be started \n+   * in MSI (managed server independence) mode. To start a manged server in \n+   * MSI mode, the pre-requisite is the that the manged server MUST be started \n+   * once before admin server is shutdown, so that the embedded LDAP server is \n+   * replicated from admin server to the managed server. \n+   * In this case of MII and DomainInImage model, the server state/configuration\n+   * is not saved once the server is shutdown unless we use domain-on-pv model\n+   * So in MII case, startServer.sh script update the replica count but the \n+   * server startup is defered till we re-start the adminserver. Here the \n+   * operator tries to starti the managed server but it will keep on failing ", "originalCommit": "a3998174f1c3bc9909c63ff639ba9204f4358653", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNzA2OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2096#discussion_r541137069", "bodyText": "Fixed the typo", "author": "anpanigr", "createdAt": "2020-12-11T18:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTIxMA=="}], "type": "inlineReview"}, {"oid": "0a74660665b3d8be50400d2f705fe0203f6791a3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0a74660665b3d8be50400d2f705fe0203f6791a3", "message": "Fixed typo", "committedDate": "2020-12-11T18:15:04Z", "type": "commit"}]}