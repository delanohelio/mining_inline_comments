{"pr_number": 2055, "pr_title": "Owls 82748 - Allow for customization of the liveness probe for WebLogic Server pods", "pr_createdAt": "2020-11-17T17:43:41Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055", "timeline": [{"oid": "855c06994d3727b43374bc3f766fa6d068772faf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/855c06994d3727b43374bc3f766fa6d068772faf", "message": "Initial set of changes for OWLS-82748 to allow customization of liveness probe.", "committedDate": "2020-11-17T16:15:21Z", "type": "commit"}, {"oid": "c412776c3391b4f440ecce79afb058c5a88d0a0e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c412776c3391b4f440ecce79afb058c5a88d0a0e", "message": "Minor changes to script and javadoc.", "committedDate": "2020-11-17T17:27:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTc0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525389742", "bodyText": "maybe add a mention that the liveness probe interval and timeout can be customized in the domain resource\n\n\nmake it clear that a custom liveness probe is not a replacement for the current probe -- it's in addition to the current probe\n\n\ne.g. something like:\nwill be invoked by the liveness probe script (livenessProbe.sh) for WebLogic server Pods -->\nwill be invoked by the existing liveness probe script (livenessProbe.sh) for WebLogic server Pods after the existing script performs its own checks", "author": "tbarnes-us", "createdAt": "2020-11-17T18:26:48Z", "path": "docs-source/content/userguide/introduction/architecture.md", "diffHunk": "@@ -67,7 +67,7 @@ During a rolling event caused by a change to the Domain's `image` field, contain\n Within the container, the following aspects are configured by the operator:\n \n *\tThe `ENTRYPOINT` is configured by a script that starts up a Node Manager process, and then uses WLST to request that Node Manager start the server.  Node Manager is used to start servers so that the socket connection to the server will be available to obtain server status even when the server is unresponsive.  This is used by the liveness probe.\n-* The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container.\n+* The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. It is possible to customize the liveness probe by using `livenessProbeCustomScript` field in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable. These options can be used to provide a custom script which will be invoked by the liveness probe script (`livenessProbe.sh`) for WebLogic server Pods. If this custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.", "originalCommit": "c412776c3391b4f440ecce79afb058c5a88d0a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MDY4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525550685", "bodyText": "It seems the liveness probe interval and timeout can be tuned using tuning parameters in operator's config map. I didn't see an option to customize it in domain resource. We don't document all the tuning parameters and am not sure if customers have frequent need to tune these liveness probe tuning parameters or not.", "author": "ankedia", "createdAt": "2020-11-17T21:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjIwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525552200", "bodyText": "@rjeberhard thoughts?", "author": "tbarnes-us", "createdAt": "2020-11-17T21:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1Njc2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525556766", "bodyText": "It looks like I can specify this in serverPod section of domain resource. I'll mention that in the documentation.", "author": "ankedia", "createdAt": "2020-11-17T22:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDc4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525390788", "bodyText": "similar to the arch document, make it clear thte the custom script is in addition to the current script, and mention how to fine tune the interval aand timeout", "author": "tbarnes-us", "createdAt": "2020-11-17T18:28:21Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -201,6 +201,10 @@ Sub-sections related to the Administration Server, specific clusters, or specifi\n \n The elements `serverStartPolicy`, `serverStartState`, `serverPod` and `serverService` are repeated under `adminServer` and under each entry of `clusters` or `managedServers`.  The values directly under `spec`, set the defaults for the entire domain.  The values under a specific entry under `clusters`, set the defaults for cluster members of that cluster.  The values under `adminServer` or an entry under `managedServers`, set the values for that specific server.  Values from the domain scope and values from the cluster (for cluster members) are merged with or overridden by the setting for the specific server depending on the element.  See [Startup and shutdown]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup.md\" >}}) for details about `serverStartPolicy` combinations.\n \n+Elements related to customization of liveness probe:\n+\n+* `livenessProbeCustomScript`: Full path of the script to customize the liveness probe for WebLogic server instance pods. The generated liveness probe script `livenessProbe.sh` will invoke the custom script provided by this element and if the custom script fails with non-zero exit status, pod will fail the liveness probe and Kubernetes will restart the container.", "originalCommit": "c412776c3391b4f440ecce79afb058c5a88d0a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MzA4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525393086", "bodyText": "Also make it clear that this is optional, for advanced usage only (rarely needed), what the default is, and what happens if the specified script is not found...", "author": "tbarnes-us", "createdAt": "2020-11-17T18:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDc4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MjE1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525392155", "bodyText": "Please make it clear that this is optional, for advanced users only, and that the default is 'not set'.  Also, what happens if this script is not found?", "author": "tbarnes-us", "createdAt": "2020-11-17T18:30:32Z", "path": "docs/domains/Domain.json", "diffHunk": "@@ -378,6 +378,10 @@\n             \"ADMIN_ONLY\"\n           ]\n         },\n+        \"livenessProbeCustomScript\": {\n+          \"description\": \"Full path of the liveness probe custom script\",", "originalCommit": "c412776c3391b4f440ecce79afb058c5a88d0a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTgyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525395823", "bodyText": "Execution of custom liveness probe script '${LIVENESS_PROBE_CUSTOM_SCRIPT}' failed.", "author": "tbarnes-us", "createdAt": "2020-11-17T18:36:21Z", "path": "operator/src/main/resources/scripts/livenessProbe.sh", "diffHunk": "@@ -91,6 +91,16 @@ if [ -f ${STATEFILE} ] && [ `grep -c \"FAILED_NOT_RESTARTABLE\" ${STATEFILE}` -eq\n   exit $RETVAL\n fi\n \n+if [ -x ${LIVENESS_PROBE_CUSTOM_SCRIPT} ]; then\n+  $LIVENESS_PROBE_CUSTOM_SCRIPT\n+elif [ -O ${LIVENESS_PROBE_CUSTOM_SCRIPT} ]; then\n+  chmod 770 $LIVENESS_PROBE_CUSTOM_SCRIPT && $LIVENESS_PROBE_CUSTOM_SCRIPT\n+fi\n+if [ $? != 0 ]; then\n+  trace SEVERE \"Execution of custom script ${LIVENESS_PROBE_CUSTOM_SCRIPT} failed.\"", "originalCommit": "c412776c3391b4f440ecce79afb058c5a88d0a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMDQ3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r525400478", "bodyText": "I suspect this might be a little tough for an end user to debug?  If it isn't, maybe we can provide an option to append output to a rotating log file?   Or maybe we should track this separately and provide such an option for the entire liveness probe script - not just this part?  @rjeberhard thoughts?", "author": "tbarnes-us", "createdAt": "2020-11-17T18:43:39Z", "path": "operator/src/main/resources/scripts/livenessProbe.sh", "diffHunk": "@@ -91,6 +91,16 @@ if [ -f ${STATEFILE} ] && [ `grep -c \"FAILED_NOT_RESTARTABLE\" ${STATEFILE}` -eq\n   exit $RETVAL\n fi\n \n+if [ -x ${LIVENESS_PROBE_CUSTOM_SCRIPT} ]; then\n+  $LIVENESS_PROBE_CUSTOM_SCRIPT\n+elif [ -O ${LIVENESS_PROBE_CUSTOM_SCRIPT} ]; then\n+  chmod 770 $LIVENESS_PROBE_CUSTOM_SCRIPT && $LIVENESS_PROBE_CUSTOM_SCRIPT", "originalCommit": "c412776c3391b4f440ecce79afb058c5a88d0a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fa5f3c75bb597f87409b820136160a5f0c582a4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6fa5f3c75bb597f87409b820136160a5f0c582a4", "message": "Changes to address PR review comments.", "committedDate": "2020-11-17T23:12:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1MzEyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r526353127", "bodyText": "IMO, it's helpful to know the defaults for timeout and period.  We should document the operator settings for the timeout and period defaults, and link to the documentation from here.", "author": "tbarnes-us", "createdAt": "2020-11-18T19:13:23Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -201,6 +201,12 @@ Sub-sections related to the Administration Server, specific clusters, or specifi\n \n The elements `serverStartPolicy`, `serverStartState`, `serverPod` and `serverService` are repeated under `adminServer` and under each entry of `clusters` or `managedServers`.  The values directly under `spec`, set the defaults for the entire domain.  The values under a specific entry under `clusters`, set the defaults for cluster members of that cluster.  The values under `adminServer` or an entry under `managedServers`, set the values for that specific server.  Values from the domain scope and values from the cluster (for cluster members) are merged with or overridden by the setting for the specific server depending on the element.  See [Startup and shutdown]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup.md\" >}}) for details about `serverStartPolicy` combinations.\n \n+Elements related to customization of liveness probe:\n+\n+* `livenessProbeCustomScript`: Full path of an optional liveness probe custom script for WebLogic server instance pods. The existing liveness probe script `livenessProbe.sh` will invoke this custom script after the existing script performs its own checks. This element is optional and is for advanced usage only. Its value is not set by default. If the custom script fails with non-zero exit status, pod will fail the liveness probe and Kubernetes will restart the container. If the script specified by this element value is not found, then it is ignored.\n+* `timeoutSeconds`: The liveness probe timeout seconds. This can be set using the `livenessProbe` attribute under the `serverPod` element in the Domain resource.", "originalCommit": "6fa5f3c75bb597f87409b820136160a5f0c582a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDI3Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r526400277", "bodyText": "I have added the default values for timeout and period for liveness probe. Please let me know if this is not sufficient. Thanks.", "author": "ankedia", "createdAt": "2020-11-18T20:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1MzEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1ODg0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r526358849", "bodyText": "I wonder if we should should support both setting the env var and a domain resource attr - there's too much potential for confusion by supporting both (which takes precedence?, yada, yada, yada).\nNote that the env var approach automatically gives you the ability to customize on a fine-grained basis - since one can pick-and-choose which servers/clusters within a domain get which env vars, but, OTOH, we have historically tended to avoid supporting env vars when adding a domain resource attribute was aa practical option.   We could get the same fine-grained advantage for a domain resource attribute by scoping it into the serverPod stanza...", "author": "tbarnes-us", "createdAt": "2020-11-18T19:22:40Z", "path": "docs-source/content/userguide/introduction/architecture.md", "diffHunk": "@@ -67,7 +67,7 @@ During a rolling event caused by a change to the Domain's `image` field, contain\n Within the container, the following aspects are configured by the operator:\n \n *\tThe `ENTRYPOINT` is configured by a script that starts up a Node Manager process, and then uses WLST to request that Node Manager start the server.  Node Manager is used to start servers so that the socket connection to the server will be available to obtain server status even when the server is unresponsive.  This is used by the liveness probe.\n-* The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container.\n+* The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. It is also possible to customize the liveness probe by using `livenessProbeCustomScript` field in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable. These options can be used to provide a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) for WebLogic Server Pods after the existing script performs its own checks. If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.", "originalCommit": "6fa5f3c75bb597f87409b820136160a5f0c582a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4Mzg5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r526383892", "bodyText": "I believe there are other places where we support both such as server shutdown type, timeout and shutdown ignore sessions, startup mode and dynamic config override.\nThe environment variable takes precedence since domain resource attr will only set the env variable if it's not already set. IIRC, Ryan had previously suggested having both domain resource attr and env variable as that provides more flexibility. However I'm open to changing it as @rjeberhard and you will suggest. Thanks.", "author": "ankedia", "createdAt": "2020-11-18T20:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1ODg0OQ=="}], "type": "inlineReview"}, {"oid": "f04cca58191a0cde585e8cf5bbdf4b79a29a2e66", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f04cca58191a0cde585e8cf5bbdf4b79a29a2e66", "message": "Added default value for liveness probe timeout and period and changed generated files.", "committedDate": "2020-11-18T20:12:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5OTczNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r526399737", "bodyText": "Can this text be changed to match the attribute description in domain-resource.md?  We want a 'kubectl explain' to be fully helpful...", "author": "tbarnes-us", "createdAt": "2020-11-18T20:28:36Z", "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/DomainSpec.java", "diffHunk": "@@ -137,6 +137,19 @@\n       + \"the directory configured in the WebLogic domain configuration. Defaults to true.\")\n   private Boolean httpAccessLogInLogHome;\n \n+  /**\n+   * Full path of an optional liveness probe custom script for WebLogic server pods. This optional field\n+   * is for advanced usage only and its value is not set by default. If the script specified by the value\n+   * of this field is not found, then it is ignored and existing liveness probe script will perform\n+   * its normal checks.", "originalCommit": "f04cca58191a0cde585e8cf5bbdf4b79a29a2e66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e525a98051d0e8c5338e7b83a6f87f372c1c60a3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e525a98051d0e8c5338e7b83a6f87f372c1c60a3", "message": "Match domain spec attribute description with description in domain-resource.md.", "committedDate": "2020-11-18T20:47:50Z", "type": "commit"}, {"oid": "fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "message": "Added chapter for liveness/readiness probe customization and linked from architecture and domain resource.", "committedDate": "2020-11-19T18:02:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNzkzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527107931", "bodyText": "Is this a good weight? In my branch introspection.md also has weight 5.", "author": "tbarnes-us", "createdAt": "2020-11-19T18:30:03Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 5", "originalCommit": "fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExMzk5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527113996", "bodyText": "If the plug-in script is to support WL_HOME, ORACLE_HOME, and MW_HOME it needs a call 'exportInstallHomes' (just like the the script already calls exportEffectiveDomainHome ^^^ which takes care of DOMAIN_HOME).", "author": "tbarnes-us", "createdAt": "2020-11-19T18:40:19Z", "path": "operator/src/main/resources/scripts/livenessProbe.sh", "diffHunk": "@@ -91,6 +91,16 @@ if [ -f ${STATEFILE} ] && [ `grep -c \"FAILED_NOT_RESTARTABLE\" ${STATEFILE}` -eq\n   exit $RETVAL\n fi\n \n+if [ -x ${LIVENESS_PROBE_CUSTOM_SCRIPT} ]; then", "originalCommit": "fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyMDEzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527120132", "bodyText": "The following environment variables that are populated by the Operator are available for use in the ...", "author": "tbarnes-us", "createdAt": "2020-11-19T18:50:27Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 5\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+Following environment variables are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.", "originalCommit": "fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyMjYwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527122603", "bodyText": "...\nNote:  Additional environment variables that are populated by the Operator and that are not listed above are not supported for use in the liveness probe custom script; their existence or meaning may change after future updates.", "author": "tbarnes-us", "createdAt": "2020-11-19T18:54:27Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 5\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+Following environment variables are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.\n+\n+`ORACLE_HOME` or `MW_HOME`: The Oracle Fusion Middleware software location as a file system path within the container.\n+\n+`WL_HOME`: The Weblogic Server installation location as a file system path within the container. \n+\n+`DOMAIN_HOME`: The domain home location as a file system path within the container.\n+\n+`JAVA_HOME`: The Java software installation location as a file system path within the container.\n+\n+`DOMAIN_NAME`: The WebLogic Server domain name.\n+\n+`DOMAIN_UID`: The domain unique identifier.\n+\n+`SERVER_NAME`: The WebLogic Server instance name.\n+\n+`LOG_HOME`: The WebLogic log location as a file system path within the container. This variable is available only if its value is set in the configuration.\n+", "originalCommit": "fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyNDIyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527124221", "bodyText": "Another note:\nNote: The custom liveness probe script can call source $DOMAIN_HOME/bin/setDomainEnv.sh if it needs to setup its PATH or CLASSPATH to access WebLogic utilities in its domain.", "author": "tbarnes-us", "createdAt": "2020-11-19T18:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyMjYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyOTc0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527129744", "bodyText": "Another note - but I'm not sure how to word it.\nNote: A custom liveness probe must not fail (exit non-zero) when the WebLogic Server instance itself is simply unavailable.  This is normal because the WebLogic Server instance may be booting or about to boot...", "author": "tbarnes-us", "createdAt": "2020-11-19T19:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyMjYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMDg4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527130889", "bodyText": "liveness --> readiness", "author": "tbarnes-us", "createdAt": "2020-11-19T19:08:26Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 5\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+Following environment variables are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.\n+\n+`ORACLE_HOME` or `MW_HOME`: The Oracle Fusion Middleware software location as a file system path within the container.\n+\n+`WL_HOME`: The Weblogic Server installation location as a file system path within the container. \n+\n+`DOMAIN_HOME`: The domain home location as a file system path within the container.\n+\n+`JAVA_HOME`: The Java software installation location as a file system path within the container.\n+\n+`DOMAIN_NAME`: The WebLogic Server domain name.\n+\n+`DOMAIN_UID`: The domain unique identifier.\n+\n+`SERVER_NAME`: The WebLogic Server instance name.\n+\n+`LOG_HOME`: The WebLogic log location as a file system path within the container. This variable is available only if its value is set in the configuration.\n+\n+#### Readiness probe customization\n+\n+The readiness probe is configured to use the WebLogic Server ReadyApp framework. The readiness probe is used to determine if the server is ready to accept user requests. The readiness is used to determine when a server should be included in a load balancer's endpoints, when a restarted server is fully started in the case of a rolling restart, and for various other purposes. The readiness probe is by default configured to check readiness every 5 seconds, and to timeout after 5 seconds. \n+\n+The readiness probe interval and timeout can be customized using the `readinessProbe` attribute under the `serverPod` element of the domain resource.\n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```", "originalCommit": "fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMjU5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527132590", "bodyText": "The readiness probe relies on calling a WebLogic Server's built-in readiness application, and this application can be customized if needed. This is rarely needed, but I think we have one user that's doing this - Johnny has the details.", "author": "tbarnes-us", "createdAt": "2020-11-19T19:11:13Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 5\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+Following environment variables are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.\n+\n+`ORACLE_HOME` or `MW_HOME`: The Oracle Fusion Middleware software location as a file system path within the container.\n+\n+`WL_HOME`: The Weblogic Server installation location as a file system path within the container. \n+\n+`DOMAIN_HOME`: The domain home location as a file system path within the container.\n+\n+`JAVA_HOME`: The Java software installation location as a file system path within the container.\n+\n+`DOMAIN_NAME`: The WebLogic Server domain name.\n+\n+`DOMAIN_UID`: The domain unique identifier.\n+\n+`SERVER_NAME`: The WebLogic Server instance name.\n+\n+`LOG_HOME`: The WebLogic log location as a file system path within the container. This variable is available only if its value is set in the configuration.\n+\n+#### Readiness probe customization\n+\n+The readiness probe is configured to use the WebLogic Server ReadyApp framework. The readiness probe is used to determine if the server is ready to accept user requests. The readiness is used to determine when a server should be included in a load balancer's endpoints, when a restarted server is fully started in the case of a rolling restart, and for various other purposes. The readiness probe is by default configured to check readiness every 5 seconds, and to timeout after 5 seconds. \n+\n+The readiness probe interval and timeout can be customized using the `readinessProbe` attribute under the `serverPod` element of the domain resource.\n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    readinessProbe:\n+      periodSeconds: 10\n+      timeoutSeconds: 10", "originalCommit": "fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzNjQ5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527136491", "bodyText": "Please add mentions of the following:\n\nThe spec.livenessProbeCustomScript domain resource attribute affects all WebLogic Server instance Pods in the domain.\nThe LIVENESS_PROBE_CUSTOM_SCRIPT environment variable takes precedence over the the spec.livenessProbeCustomScript domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\nChanges to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).", "author": "tbarnes-us", "createdAt": "2020-11-19T19:17:45Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 5\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.", "originalCommit": "fa7e7abeb625ae06d7c75a57f9b0fa5576a45c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ba1c9a1d1737791d846454325e61b93c7882f89", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8ba1c9a1d1737791d846454325e61b93c7882f89", "message": "Changes to address review comments.", "committedDate": "2020-11-19T21:28:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc4NjAzOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527786039", "bodyText": "check that the server -> check that a server\nThe liveness probe is by default configured -> By default, the liveness probe is configured\nseconds, and -> seconds and (no comma needed)", "author": "rosemarymarano", "createdAt": "2020-11-20T15:55:01Z", "path": "docs-source/content/userguide/introduction/architecture.md", "diffHunk": "@@ -67,8 +67,8 @@ During a rolling event caused by a change to the Domain's `image` field, contain\n Within the container, the following aspects are configured by the operator:\n \n *\tThe `ENTRYPOINT` is configured by a script that starts up a Node Manager process, and then uses WLST to request that Node Manager start the server.  Node Manager is used to start servers so that the socket connection to the server will be available to obtain server status even when the server is unresponsive.  This is used by the liveness probe.\n-* The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container.\n-*\tThe readiness probe is configured to use the WebLogic Server ReadyApp framework.  The readiness probe is used to determine if the server is ready to accept user requests.  The readiness is used to determine when a server should be included in a load balancer's endpoints, when a restarted server is fully started in the case of a rolling restart, and for various other purposes.\n+* The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. See [Liveness probe customization]({{< relref \"/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization#liveness-probe-customization\" >}}) for details about liveness probe customization.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MzA2OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527793069", "bodyText": "is used to determine -> determines\nif the server -> if a server\nThe readiness is used -> The readiness probe is used\nwhen a restarted server is fully started in the case of a rolling restart, -> in the case of a rolling restart, when a restarted server is fully started,\nSee [Readiness.... -> For details about readiness probe customization, see [Readiness...\n(put a period at the end of the sentence.)", "author": "rosemarymarano", "createdAt": "2020-11-20T16:05:42Z", "path": "docs-source/content/userguide/introduction/architecture.md", "diffHunk": "@@ -67,8 +67,8 @@ During a rolling event caused by a change to the Domain's `image` field, contain\n Within the container, the following aspects are configured by the operator:\n \n *\tThe `ENTRYPOINT` is configured by a script that starts up a Node Manager process, and then uses WLST to request that Node Manager start the server.  Node Manager is used to start servers so that the socket connection to the server will be available to obtain server status even when the server is unresponsive.  This is used by the liveness probe.\n-* The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container.\n-*\tThe readiness probe is configured to use the WebLogic Server ReadyApp framework.  The readiness probe is used to determine if the server is ready to accept user requests.  The readiness is used to determine when a server should be included in a load balancer's endpoints, when a restarted server is fully started in the case of a rolling restart, and for various other purposes.\n+* The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. See [Liveness probe customization]({{< relref \"/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization#liveness-probe-customization\" >}}) for details about liveness probe customization.\n+*\tThe readiness probe is configured to use the WebLogic Server ReadyApp framework.  The readiness probe is used to determine if the server is ready to accept user requests.  The readiness is used to determine when a server should be included in a load balancer's endpoints, when a restarted server is fully started in the case of a rolling restart, and for various other purposes. See [Readiness probe customization]({{< relref \"/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization#readiness-probe-customization\" >}}) for details about readiness probe customization", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NDc2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527794766", "bodyText": "that the server is alive-> that a server is alive\nThe liveness probe is by default configured -> By default, the liveness probe is configured\nseconds, and -> seconds and (no comma needed)", "author": "rosemarymarano", "createdAt": "2020-11-20T16:08:30Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. ", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NTM4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527795380", "bodyText": "The liveness probe interval and timeout can be customized -> You can customize the liveness probe interval and timeout", "author": "rosemarymarano", "createdAt": "2020-11-20T16:09:29Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. ", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NTcyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527795725", "bodyText": "to change liveness probe -> to change the liveness probe", "author": "rosemarymarano", "createdAt": "2020-11-20T16:09:58Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5OTM0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527799345", "bodyText": "(suggested re-write of the first sentence) -> After the liveness probe script (livenessProbe.sh) performs its checks, you can to customize the liveness probe by specifying a custom script, which will be invoked by livenessProbe.sh.\nThis custom script can be specified either by -> You can specify the custom script either by\nor by setting LIVENESS_PROBE_CUSTOM_SCRIPT environment -> or by setting the LIVENESS_PROBE_CUSTOM_SCRIPT environment\nusing env attribute -> using the env attribute\n(see configuration examples below) -> (see the configuration examples)\nwith non-zero exit -> with a non-zero exit", "author": "rosemarymarano", "createdAt": "2020-11-20T16:15:29Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwODE1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527808155", "bodyText": "take effect on already running -> takes effect on running", "author": "rosemarymarano", "createdAt": "2020-11-20T16:28:34Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwOTIwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527809201", "bodyText": "then custom script  -> then the custom script\nand existing liveness -> and the existing liveness", "author": "rosemarymarano", "createdAt": "2020-11-20T16:30:15Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwOTY1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527809654", "bodyText": "(e.g. any network calls or executing wlst.sh) -> (for example, any network calls or executing WLST scripts)", "author": "rosemarymarano", "createdAt": "2020-11-20T16:31:02Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxMDE5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527810191", "bodyText": "to specify liveness probe custom script -> to specify a liveness probe custom script\nusing livenessProbeCustomScript domain resource field. -> using the livenessProbeCustomScript domain resource field.", "author": "rosemarymarano", "createdAt": "2020-11-20T16:31:53Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxMDU5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527810596", "bodyText": "specify liveness probe -> specify the liveness probe\nusing LIVENESS_PROBE_CUSTOM_SCRIPT environment variable. -> using the LIVENESS_PROBE_CUSTOM_SCRIPT environment variable.", "author": "rosemarymarano", "createdAt": "2020-11-20T16:32:30Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxMTE0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527811144", "bodyText": "environment variables that are populated by the Operator -> operator-populated environment variables\nscript which -> script, which", "author": "rosemarymarano", "createdAt": "2020-11-20T16:33:20Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+The following environment variables that are populated by the Operator are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNDA0Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527814046", "bodyText": "Because you have four NOTES following each other, I would suggest that you make a bulleted list called NOTES: and then make each entry a sub-bulleted item in the list.\nAdditional environment variables that are populated by the Operator -> Additional operator-populated environment variables\nand that are not listed above -> that are not listed above, (comma)\n; their existence or meaning may change in the future. -> Remove this part of the sentence and end it with a period.", "author": "rosemarymarano", "createdAt": "2020-11-20T16:37:49Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+The following environment variables that are populated by the Operator are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.\n+\n+`ORACLE_HOME` or `MW_HOME`: The Oracle Fusion Middleware software location as a file system path within the container.\n+\n+`WL_HOME`: The Weblogic Server installation location as a file system path within the container. \n+\n+`DOMAIN_HOME`: The domain home location as a file system path within the container.\n+\n+`JAVA_HOME`: The Java software installation location as a file system path within the container.\n+\n+`DOMAIN_NAME`: The WebLogic Server domain name.\n+\n+`DOMAIN_UID`: The domain unique identifier.\n+\n+`SERVER_NAME`: The WebLogic Server instance name.\n+\n+`LOG_HOME`: The WebLogic log location as a file system path within the container. This variable is available only if its value is set in the configuration.\n+\n+**Note**: Additional environment variables that are populated by the Operator and that are not listed above are not supported for use in the liveness probe custom script; their existence or meaning may change in the future.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNDcwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527814708", "bodyText": "setup  -> set up", "author": "rosemarymarano", "createdAt": "2020-11-20T16:38:51Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+The following environment variables that are populated by the Operator are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.\n+\n+`ORACLE_HOME` or `MW_HOME`: The Oracle Fusion Middleware software location as a file system path within the container.\n+\n+`WL_HOME`: The Weblogic Server installation location as a file system path within the container. \n+\n+`DOMAIN_HOME`: The domain home location as a file system path within the container.\n+\n+`JAVA_HOME`: The Java software installation location as a file system path within the container.\n+\n+`DOMAIN_NAME`: The WebLogic Server domain name.\n+\n+`DOMAIN_UID`: The domain unique identifier.\n+\n+`SERVER_NAME`: The WebLogic Server instance name.\n+\n+`LOG_HOME`: The WebLogic log location as a file system path within the container. This variable is available only if its value is set in the configuration.\n+\n+**Note**: Additional environment variables that are populated by the Operator and that are not listed above are not supported for use in the liveness probe custom script; their existence or meaning may change in the future.\n+\n+**Note**: The custom liveness probe script can call `source $DOMAIN_HOME/bin/setDomainEnv.sh` if it needs to setup its PATH or CLASSPATH to access WebLogic utilities in its domain.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxOTA5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527819096", "bodyText": "The readiness probe is by default configured -> By default, the readiness probe is configured\nby application's participation -> by the application's participation\nSee [Using the ReadyApp Framework... -> For more details, see [Using the ReadyApp Framework...\nwhen a restarted server is fully started in the case of a rolling restart, -> in the case of a rolling restart, when a restarted server is fully started", "author": "rosemarymarano", "createdAt": "2020-11-20T16:45:33Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+The following environment variables that are populated by the Operator are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.\n+\n+`ORACLE_HOME` or `MW_HOME`: The Oracle Fusion Middleware software location as a file system path within the container.\n+\n+`WL_HOME`: The Weblogic Server installation location as a file system path within the container. \n+\n+`DOMAIN_HOME`: The domain home location as a file system path within the container.\n+\n+`JAVA_HOME`: The Java software installation location as a file system path within the container.\n+\n+`DOMAIN_NAME`: The WebLogic Server domain name.\n+\n+`DOMAIN_UID`: The domain unique identifier.\n+\n+`SERVER_NAME`: The WebLogic Server instance name.\n+\n+`LOG_HOME`: The WebLogic log location as a file system path within the container. This variable is available only if its value is set in the configuration.\n+\n+**Note**: Additional environment variables that are populated by the Operator and that are not listed above are not supported for use in the liveness probe custom script; their existence or meaning may change in the future.\n+\n+**Note**: The custom liveness probe script can call `source $DOMAIN_HOME/bin/setDomainEnv.sh` if it needs to setup its PATH or CLASSPATH to access WebLogic utilities in its domain.\n+\n+**Note**: A custom liveness probe must not fail (exit non-zero) when the WebLogic Server instance itself is unavailable. This could be the case when the WebLogic Server instance is booting or about to boot.\n+\n+#### Readiness probe customization\n+\n+The readiness probe is by default configured to use the WebLogic Server ReadyApp framework. The ReadyApp framework allows fine customization of the readiness probe by application's participation in the framework. See [Using the ReadyApp Framework](https://docs.oracle.com/en/middleware/fusion-middleware/weblogic-server/12.2.1.4/depgd/managing.html#GUID-C98443B1-D368-4CA4-A7A4-97B86FFD3C28) for more details. The readiness probe is used to determine if the server is ready to accept user requests. The readiness is used to determine when a server should be included in a load balancer's endpoints, when a restarted server is fully started in the case of a rolling restart, and for various other purposes.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyMDgwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527820802", "bodyText": "The readiness probe is by default configured -> By default, the readiness probe is configured\nseconds, and -> seconds and (no comma)\nThe readiness probe interval and timeout can be customized -> You can customize the readiness probe interval and timeout", "author": "rosemarymarano", "createdAt": "2020-11-20T16:47:20Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Liveness and readiness probes customization\"\n+date: 2019-02-23T20:58:51-05:00\n+draft: false\n+weight: 6\n+description: \"This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\"\n+---\n+\n+This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.\n+\n+#### Contents\n+\n+* [Liveness probe customization](#liveness-probe-customization)\n+* [Readiness probe customization](#readiness-probe-customization)\n+\n+#### Liveness probe customization\n+\n+The liveness probe is configured to check that the server is alive by querying the Node Manager process.  The liveness probe is by default configured to check liveness every 15 seconds, and to timeout after 5 seconds.  If a pod fails the liveness probe, Kubernetes will restart that container. \n+\n+The liveness probe interval and timeout can be customized using the `livenessProbe` attribute under the `serverPod` element of the domain resource. \n+\n+Following is an example configuration to change liveness probe interval and timeout value.\n+```\n+  serverPod:\n+    livenessProbe:\n+      periodSeconds: 30\n+      timeoutSeconds: 10\n+```\n+\n+It is also possible to customize the liveness probe by specifying a custom script which will be invoked by the existing liveness probe script (`livenessProbe.sh`) after the existing script performs its own checks. This custom script can be specified either by using the `livenessProbeCustomScript` attribute in the domain resource or by setting `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable using `env` attribute under the `serverPod` element (see configuration examples below). If the custom script fails with non-zero exit status, the liveness probe will fail and Kubernetes will restart the container.\n+\n+\n+* The `spec.livenessProbeCustomScript` domain resource attribute affects all WebLogic Server instance Pods in the domain.\n+* The `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable takes precedence over the `spec.livenessProbeCustomScript` domain resource attribute when both are configured, and, like all domain resource environment variables, can be customized on a per domain, per cluster, or even a per server basis.\n+* Changes to either the domain resource attribute or the environment variable on a running domain take effect on already running WebLogic Server instance Pods when such Pods are restarted (rolled).\n+\n+**Note**: The liveness probe custom script option is for advanced usage only and its value is not set by default. If the specified script is not found, then custom script is ignored and existing liveness script will perform its normal checks.\n+\n+**Note**: Oracle recommends against having any long running calls (e.g. any network calls or executing wlst.sh) in the liveness probe custom script.\n+\n+Use the following configuration to specify liveness probe custom script using `livenessProbeCustomScript` domain resource field.\n+```\n+spec:\n+  livenessProbeCustomScript: /u01/customLivenessProbe.sh\n+```\n+\n+Use the following configuration to specify liveness probe custom script using `LIVENESS_PROBE_CUSTOM_SCRIPT` environment variable.\n+```\n+    serverPod:\n+      env:\n+      - name: LIVENESS_PROBE_CUSTOM_SCRIPT\n+        value: /u01/customLivenessProbe.sh\n+```\n+\n+The following environment variables that are populated by the Operator are available for use in the liveness probe custom script which will be invoked by `livenessProbe.sh`.\n+\n+`ORACLE_HOME` or `MW_HOME`: The Oracle Fusion Middleware software location as a file system path within the container.\n+\n+`WL_HOME`: The Weblogic Server installation location as a file system path within the container. \n+\n+`DOMAIN_HOME`: The domain home location as a file system path within the container.\n+\n+`JAVA_HOME`: The Java software installation location as a file system path within the container.\n+\n+`DOMAIN_NAME`: The WebLogic Server domain name.\n+\n+`DOMAIN_UID`: The domain unique identifier.\n+\n+`SERVER_NAME`: The WebLogic Server instance name.\n+\n+`LOG_HOME`: The WebLogic log location as a file system path within the container. This variable is available only if its value is set in the configuration.\n+\n+**Note**: Additional environment variables that are populated by the Operator and that are not listed above are not supported for use in the liveness probe custom script; their existence or meaning may change in the future.\n+\n+**Note**: The custom liveness probe script can call `source $DOMAIN_HOME/bin/setDomainEnv.sh` if it needs to setup its PATH or CLASSPATH to access WebLogic utilities in its domain.\n+\n+**Note**: A custom liveness probe must not fail (exit non-zero) when the WebLogic Server instance itself is unavailable. This could be the case when the WebLogic Server instance is booting or about to boot.\n+\n+#### Readiness probe customization\n+\n+The readiness probe is by default configured to use the WebLogic Server ReadyApp framework. The ReadyApp framework allows fine customization of the readiness probe by application's participation in the framework. See [Using the ReadyApp Framework](https://docs.oracle.com/en/middleware/fusion-middleware/weblogic-server/12.2.1.4/depgd/managing.html#GUID-C98443B1-D368-4CA4-A7A4-97B86FFD3C28) for more details. The readiness probe is used to determine if the server is ready to accept user requests. The readiness is used to determine when a server should be included in a load balancer's endpoints, when a restarted server is fully started in the case of a rolling restart, and for various other purposes.\n+\n+The readiness probe is by default configured to check readiness every 5 seconds, and to timeout after 5 seconds.  The readiness probe interval and timeout can be customized using the `readinessProbe` attribute under the `serverPod` element of the domain resource.", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyMTE2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527821166", "bodyText": "to customization -> to the customization\nprobe -> probes", "author": "rosemarymarano", "createdAt": "2020-11-20T16:47:58Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -201,6 +201,9 @@ Sub-sections related to the Administration Server, specific clusters, or specifi\n \n The elements `serverStartPolicy`, `serverStartState`, `serverPod` and `serverService` are repeated under `adminServer` and under each entry of `clusters` or `managedServers`.  The values directly under `spec`, set the defaults for the entire domain.  The values under a specific entry under `clusters`, set the defaults for cluster members of that cluster.  The values under `adminServer` or an entry under `managedServers`, set the values for that specific server.  Values from the domain scope and values from the cluster (for cluster members) are merged with or overridden by the setting for the specific server depending on the element.  See [Startup and shutdown]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup.md\" >}}) for details about `serverStartPolicy` combinations.\n \n+Elements related to customization of liveness and readiness probe:", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyMTk5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2055#discussion_r527821997", "bodyText": "WebLogic server -> WebLogic Server\npod will fail -> then pod will fail", "author": "rosemarymarano", "createdAt": "2020-11-20T16:49:21Z", "path": "docs/domains/Domain.md", "diffHunk": "@@ -31,6 +31,7 @@ The specification of the operation of the WebLogic domain. Required.\n | `imagePullSecrets` | array of [Local Object Reference](k8s1.13.5.md#local-object-reference) | A list of image pull Secrets for the WebLogic container image. |\n | `includeServerOutInPodLog` | Boolean | Specifies whether the server .out file will be included in the Pod's log. Defaults to true. |\n | `introspectVersion` | string | Changes to this field cause the operator to repeat its introspection of the WebLogic domain configuration. Repeating introspection is required for the operator to recognize changes to the domain configuration, such as adding a new WebLogic cluster or Managed Server instance, to regenerate configuration overrides, or to regenerate the WebLogic domain home when the `domainHomeSourceType` is FromModel. Introspection occurs automatically, without requiring change to this field, when servers are first started or restarted after a full domain shut down. For the FromModel `domainHomeSourceType`, introspection also occurs when a running server must be restarted because of changes to any of the fields listed here: https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#properties-that-cause-servers-to-be-restarted. See also `domains.spec.configuration.overrideDistributionStrategy`. |\n+| `livenessProbeCustomScript` | string | Full path of an optional liveness probe custom script for WebLogic server instance pods. The existing liveness probe script `livenessProbe.sh` will invoke this custom script after the existing script performs its own checks. This element is optional and is for advanced usage only. Its value is not set by default. If the custom script fails with non-zero exit status, pod will fail the liveness probe and Kubernetes will restart the container. If the script specified by this element value is not found, then it is ignored. |", "originalCommit": "8ba1c9a1d1737791d846454325e61b93c7882f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}