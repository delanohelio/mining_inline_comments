{"pr_number": 1649, "pr_title": "Mii sample vnext", "pr_createdAt": "2020-05-14T21:35:04Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649", "timeline": [{"oid": "1b6973b5c802145efbde3026ff194eebf27c5bf9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1b6973b5c802145efbde3026ff194eebf27c5bf9", "message": "MII Sample: Cleanup (delete unneeded files, consolidate test/generator doc, etc)", "committedDate": "2020-05-11T19:15:06Z", "type": "commit"}, {"oid": "3f1f8deacbc1449cbffac3b8fff76af4ac7a4be7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3f1f8deacbc1449cbffac3b8fff76af4ac7a4be7", "message": "Merge remote-tracking branch 'origin/develop' into mii-sample-vnext", "committedDate": "2020-05-11T20:13:17Z", "type": "commit"}, {"oid": "dcb1f34ee0da01a9f78f69f61e3ee5b682a06b13", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dcb1f34ee0da01a9f78f69f61e3ee5b682a06b13", "message": "MII Sample: First draft of update2 use case.", "committedDate": "2020-05-13T18:19:45Z", "type": "commit"}, {"oid": "d1a99af7528d58a6a00bb81d959670a316087e81", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d1a99af7528d58a6a00bb81d959670a316087e81", "message": "MII Sample: First draft of update3 use case.", "committedDate": "2020-05-13T21:56:19Z", "type": "commit"}, {"oid": "0cfcd77189139d392821c4e9e1a0206d4185980b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0cfcd77189139d392821c4e9e1a0206d4185980b", "message": "MII Sample: Second draft of update3 use case.", "committedDate": "2020-05-14T17:55:12Z", "type": "commit"}, {"oid": "a041b80e8fccb4c5a357bba9cbe7d335bab8a891", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a041b80e8fccb4c5a357bba9cbe7d335bab8a891", "message": "MII Sample: preliminary testing for use cases update2 and update3.", "committedDate": "2020-05-14T21:33:01Z", "type": "commit"}, {"oid": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "message": "MII Sample: merge develop", "committedDate": "2020-05-14T21:54:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NzYxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425777614", "bodyText": "stand-alone -> standalone (one word)", "author": "rosemarymarano", "createdAt": "2020-05-15T12:47:57Z", "path": "src/integration-tests/model-in-image/mii-sample-wrapper/README", "diffHunk": "@@ -1,6 +1,120 @@\n Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n-This directory contains stand-alone 'wrapper' scripts for automating the model-in-image sample. These scripts are NOT part of the sample - they're used by the test framework to encapsulate and automate testing of the sample, and they're used by a local 'generate' script to generate commands and yaml that can be cut and pasted into the documentation.\n+Introduction\n+------------\n+\n+This directory contains stand-alone 'wrapper' scripts for automating the model-in-image sample. These scripts are NOT part of the sample - they're used by the test framework to encapsulate and automate testing of the sample, and they're used by a local 'generate' script to generate commands and yaml for the sample source and documentation.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2MTUyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425861521", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NzYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3OTg1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425779855", "bodyText": "udpating (whoa, that typo got past us! Glad you found/fixed it.)", "author": "rosemarymarano", "createdAt": "2020-05-15T12:52:11Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -56,22 +58,43 @@ This sample demonstrates two Model in Image use cases:\n      - WebLogic credentials\n      - Required WDT runtime password\n    - A domain resource with:\n+     - `metadata.name` and `weblogic.domainUID` label set to `sample-domain1`\n      - `spec.domainHomeSourceType: FromModel`\n      - `spec.image: model-in-image:WLS-v1`\n      - References to the secrets\n \n-- [Update1](#update1-use-case): Demonstrates udpating the initial domain by dynamically adding a data source using a model ConfigMap:\n+- [Update1](#update1-use-case): Demonstrates updating the initial domain by dynamically adding a data source using a model ConfigMap:", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2MTkyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425861925", "bodyText": ":)", "author": "tbarnes-us", "createdAt": "2020-05-15T15:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3OTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4MTI2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425781261", "bodyText": "Kubernetes secrets -> Kubernetes Secrets (we moved to capitalizing Kubernetes resources, as per their documentation)", "author": "rosemarymarano", "createdAt": "2020-05-15T12:54:37Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -56,22 +58,43 @@ This sample demonstrates two Model in Image use cases:\n      - WebLogic credentials\n      - Required WDT runtime password\n    - A domain resource with:\n+     - `metadata.name` and `weblogic.domainUID` label set to `sample-domain1`\n      - `spec.domainHomeSourceType: FromModel`\n      - `spec.image: model-in-image:WLS-v1`\n      - References to the secrets\n \n-- [Update1](#update1-use-case): Demonstrates udpating the initial domain by dynamically adding a data source using a model ConfigMap:\n+- [Update1](#update1-use-case): Demonstrates updating the initial domain by dynamically adding a data source using a model ConfigMap:\n \n    - Image `model-in-image:WLS-v1`:\n      - Same image as Initial use case\n    - Kubernetes Secrets:\n-     - Same as Initial use case  plus secrets for data source credentials and URL\n+     - Same as Initial use case plus secrets for data source credentials and URL\n    - Kubernetes ConfigMap with:\n      - A WDT model for a data source targeted to the cluster\n-   - A domain resource with:\n-     - Same as Initial use case plus:\n-        - `spec.model.configMap` referencing the ConfigMap\n-        - References to data source secrets\n+   - A domain resource same as Initial use case plus:\n+     - `spec.model.configMap` referencing the ConfigMap\n+     - References to data source secrets\n+\n+- [Update2](#update2-use-case): Demonstrates deploying a second domain that is very similar to the Update1 use case domain:\n+\n+  - Image `model-in-image:WLS-v1`:\n+    - Same image as the Initial and Update1 use cases\n+  - Kubernetes secrets and ConfigMap:", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2MjAzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425862035", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4MTI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4NjIxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425786218", "bodyText": "and is instead dynamically -> and instead, is dynamically", "author": "rosemarymarano", "createdAt": "2020-05-15T13:03:06Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. ", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2MjExOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425862119", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4NjIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4NjUxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425786510", "bodyText": "java  -> Java", "author": "rosemarymarano", "createdAt": "2020-05-15T13:03:40Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. ", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2MjIxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425862212", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4NjUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4ODI1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425788255", "bodyText": "life-cycle -> life cycle (life cycle (n), lifecycle (adj))", "author": "rosemarymarano", "createdAt": "2020-05-15T13:06:55Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2OTA4Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425869087", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4ODI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4ODgzOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425788839", "bodyText": "and that will be referenced -> and they will be referenced", "author": "rosemarymarano", "createdAt": "2020-05-15T13:07:55Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2NDYwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425864609", "bodyText": "dispute this one", "author": "tbarnes-us", "createdAt": "2020-05-15T15:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4ODgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3NzMxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425877314", "bodyText": "dispute resolved - compromise change made", "author": "tbarnes-us", "createdAt": "2020-05-15T15:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4ODgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4OTY5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425789694", "bodyText": "to cleanup a domain -> to clean up a domain (clean up (v), cleanup (adj) (n))", "author": "rosemarymarano", "createdAt": "2020-05-15T13:09:30Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2OTE2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425869160", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4OTY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4OTg0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425789842", "bodyText": "to cleanup a domain -> to clean up a domain (clean up (v), cleanup (adj) (n))", "author": "rosemarymarano", "createdAt": "2020-05-15T13:09:46Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjM5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425872390", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4OTg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5MDE2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425790167", "bodyText": "life-cycle -> life cycle", "author": "rosemarymarano", "createdAt": "2020-05-15T13:10:17Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. ", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjQ1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425872459", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5MDE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NDk0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425794944", "bodyText": "To instead look like: -> To this:", "author": "rosemarymarano", "createdAt": "2020-05-15T13:17:57Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MzM4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425873383", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NDk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTY1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425799657", "bodyText": "Once  -> After (once \u2013 don\u2019t use to mean after; use only to mean less than twice.)", "author": "rosemarymarano", "createdAt": "2020-05-15T13:25:11Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+Once the updated domain resource is applied, we expect the operator to:", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjUxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425872512", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTk5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425799993", "bodyText": "administration server -> Administration Server", "author": "rosemarymarano", "createdAt": "2020-05-15T13:25:43Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+Once the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's administration server pod so that it loads the new image and new domain home.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjU3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425872579", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMDY1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425800651", "bodyText": "Once the new image -> After the new image", "author": "rosemarymarano", "createdAt": "2020-05-15T13:26:43Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+Once the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's administration server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. Once the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjY5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425872694", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMDY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMTA3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425801078", "bodyText": "zip -> ZIP", "author": "rosemarymarano", "createdAt": "2020-05-15T13:27:24Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+Once the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's administration server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. Once the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+2. Create an updated image. \n+\n+   Recall that a goal of the [Initial use case](#initial-use-case) was to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that were staged in `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files included a web application in a WDT zip archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`. The final image was called `model-in-image:WLS-v1` and, in addition to having a copy of the staged files in its `/u01/wdt/models` directory, also contained a WebLogic installation and a WebLogic Deploy Tooling installation.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3Mjc5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425872790", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMTA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMTg1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425801854", "bodyText": "a single difference with -> a single difference from", "author": "rosemarymarano", "createdAt": "2020-05-15T13:28:36Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+Once the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's administration server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. Once the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+2. Create an updated image. \n+\n+   Recall that a goal of the [Initial use case](#initial-use-case) was to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that were staged in `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files included a web application in a WDT zip archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`. The final image was called `model-in-image:WLS-v1` and, in addition to having a copy of the staged files in its `/u01/wdt/models` directory, also contained a WebLogic installation and a WebLogic Deploy Tooling installation.\n+\n+   In this use case, we will follow similar steps to the [Initial use case](#initial-use-case) in order to create a new image with an updated application and model, plus deploy the updated model and application to the running [Update1 use case](#update1-use-case) domain.\n+\n+   - Understanding our updated WDT archive.\n+\n+     The updated archive for this use case is in directory `/tmp/mii-sample/archives/archive-v2`. We will use it to create an archive ZIP file for the image. This archive is similar to the `/tmp/mii-sample/archives/archive-v1` from the [Initial use case](#initial-use-case) with the the following differences:\n+     - It includes an updated version of the application in `./wlsdeploy/applications/myapp-v2` (while keeping the original application in directory `./wlsdeploy/applications/myapp-v1`).\n+     - The application in `./wlsdeploy/applications/myapp-v2/myapp_war/index.jsp` contains a single difference with the original application: it changes the line `out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");` to `out.println(\"Hello World! This is version 'v2' of the mii-sample JSP web-app.\");`.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3Mjg2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425872862", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMzg5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425803899", "bodyText": "assume its the desired  -> assume it's the desired", "author": "rosemarymarano", "createdAt": "2020-05-15T13:31:59Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+Once the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's administration server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. Once the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+2. Create an updated image. \n+\n+   Recall that a goal of the [Initial use case](#initial-use-case) was to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that were staged in `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files included a web application in a WDT zip archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`. The final image was called `model-in-image:WLS-v1` and, in addition to having a copy of the staged files in its `/u01/wdt/models` directory, also contained a WebLogic installation and a WebLogic Deploy Tooling installation.\n+\n+   In this use case, we will follow similar steps to the [Initial use case](#initial-use-case) in order to create a new image with an updated application and model, plus deploy the updated model and application to the running [Update1 use case](#update1-use-case) domain.\n+\n+   - Understanding our updated WDT archive.\n+\n+     The updated archive for this use case is in directory `/tmp/mii-sample/archives/archive-v2`. We will use it to create an archive ZIP file for the image. This archive is similar to the `/tmp/mii-sample/archives/archive-v1` from the [Initial use case](#initial-use-case) with the the following differences:\n+     - It includes an updated version of the application in `./wlsdeploy/applications/myapp-v2` (while keeping the original application in directory `./wlsdeploy/applications/myapp-v1`).\n+     - The application in `./wlsdeploy/applications/myapp-v2/myapp_war/index.jsp` contains a single difference with the original application: it changes the line `out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");` to `out.println(\"Hello World! This is version 'v2' of the mii-sample JSP web-app.\");`.\n+\n+     For additional information about archives, see the [Understanding our first archive](#understanding-our-first-archive) section in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Stage a ZIP file of the WDT archive.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths below.\n+\n+     When we create our updated image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v2`. In preparation, we need it to contain a ZIP file of the new WDT application archive.\n+\n+     Run the following commands to create your application archive ZIP file and put it in the expected directory:\n+\n+     ```\n+     # Delete existing archive.zip in case we have an old leftover version\n+     $ rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip\n+\n+     # Move to the directory which contains the source files for our new archive\n+     $ cd /tmp/mii-sample/archives/archive-v2\n+\n+     # Zip the archive to the location will later use when we run the WebLogic Image Tool\n+     $ zip -r /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip wlsdeploy\n+     ```\n+\n+   - Understanding our staged model files.\n+\n+     The WDT model YAML file and properties for this use case have already been staged for you to directory `/tmp/mii-sample/model-in-image__WLS-v2`. \n+\n+     The `model.10.yaml` file in this directory has an updated path `wlsdeploy/applications/myapp-v2` that references the updated web application in our archive, but is otherwise identical to the model staged for the original image. The final related YAML stanza looks like this:\n+\n+     ```\n+     appDeployments:\n+         Application:\n+             myapp:\n+                 SourcePath: 'wlsdeploy/applications/myapp-v2'\n+                 ModuleType: ear\n+                 Target: 'cluster-1'\n+     ```\n+\n+     If you would like to review the entire original model before this change, see [Staging model files](#staging-model-files) in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Create a new image from our staged model files using WIT.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n+\n+     At this point, we have staged all of the files needed for image `model-in-image:WLS-v2`, they include:\n+\n+     - `/tmp/mii-sample/model-images/weblogic-deploy.zip`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.yaml`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.properties`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip`\n+\n+     If you don't see the `weblogic-deploy.zip` file, then it means that you missed a step in the prerequisites.\n+\n+     Now let's use the Image Tool to create an image named `model-in-image:WLS-v2` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+     Run the following commands to create the model image and verify that it worked:\n+\n+     ```\n+     $ cd /tmp/mii-sample/model-images\n+     $ ./imagetool/bin/imagetool.sh update \\\n+       --tag model-in-image:WLS-v2 \\\n+       --fromImage container-registry.oracle.com/middleware/weblogic:12.2.1.4 \\\n+       --wdtModel      ./model-in-image__WLS-v2/model.10.yaml \\\n+       --wdtVariables  ./model-in-image__WLS-v2/model.10.properties \\\n+       --wdtArchive    ./model-in-image__WLS-v2/archive.zip \\\n+       --wdtModelOnly \\\n+       --wdtDomainType WLS\n+     ```\n+\n+     If you don't see the `imagetool` directory, then it means that you missed a step in the prerequisites.\n+\n+     This command runs the WebLogic Image Tool in its Model in Image mode, and does the following:\n+     - Builds the final Docker image as a layer on the `container-registry.oracle.com/middleware/weblogic:12.2.1.4` base image.\n+     - Copies the WDT ZIP file that's referenced in the WIT cache into the image.\n+       - Note that we cached WDT in WIT using the keyword `latest` when we set up the cache during the sample prerequisites steps.\n+       - This lets WIT implicitly assume its the desired WDT version and removes the need to pass a `-wdtVersion` flag.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MjkzOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425872939", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMzg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNDcyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425804724", "bodyText": "that comes supplied -> that is supplied", "author": "rosemarymarano", "createdAt": "2020-05-15T13:33:13Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+Once the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's administration server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. Once the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+2. Create an updated image. \n+\n+   Recall that a goal of the [Initial use case](#initial-use-case) was to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that were staged in `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files included a web application in a WDT zip archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`. The final image was called `model-in-image:WLS-v1` and, in addition to having a copy of the staged files in its `/u01/wdt/models` directory, also contained a WebLogic installation and a WebLogic Deploy Tooling installation.\n+\n+   In this use case, we will follow similar steps to the [Initial use case](#initial-use-case) in order to create a new image with an updated application and model, plus deploy the updated model and application to the running [Update1 use case](#update1-use-case) domain.\n+\n+   - Understanding our updated WDT archive.\n+\n+     The updated archive for this use case is in directory `/tmp/mii-sample/archives/archive-v2`. We will use it to create an archive ZIP file for the image. This archive is similar to the `/tmp/mii-sample/archives/archive-v1` from the [Initial use case](#initial-use-case) with the the following differences:\n+     - It includes an updated version of the application in `./wlsdeploy/applications/myapp-v2` (while keeping the original application in directory `./wlsdeploy/applications/myapp-v1`).\n+     - The application in `./wlsdeploy/applications/myapp-v2/myapp_war/index.jsp` contains a single difference with the original application: it changes the line `out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");` to `out.println(\"Hello World! This is version 'v2' of the mii-sample JSP web-app.\");`.\n+\n+     For additional information about archives, see the [Understanding our first archive](#understanding-our-first-archive) section in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Stage a ZIP file of the WDT archive.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths below.\n+\n+     When we create our updated image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v2`. In preparation, we need it to contain a ZIP file of the new WDT application archive.\n+\n+     Run the following commands to create your application archive ZIP file and put it in the expected directory:\n+\n+     ```\n+     # Delete existing archive.zip in case we have an old leftover version\n+     $ rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip\n+\n+     # Move to the directory which contains the source files for our new archive\n+     $ cd /tmp/mii-sample/archives/archive-v2\n+\n+     # Zip the archive to the location will later use when we run the WebLogic Image Tool\n+     $ zip -r /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip wlsdeploy\n+     ```\n+\n+   - Understanding our staged model files.\n+\n+     The WDT model YAML file and properties for this use case have already been staged for you to directory `/tmp/mii-sample/model-in-image__WLS-v2`. \n+\n+     The `model.10.yaml` file in this directory has an updated path `wlsdeploy/applications/myapp-v2` that references the updated web application in our archive, but is otherwise identical to the model staged for the original image. The final related YAML stanza looks like this:\n+\n+     ```\n+     appDeployments:\n+         Application:\n+             myapp:\n+                 SourcePath: 'wlsdeploy/applications/myapp-v2'\n+                 ModuleType: ear\n+                 Target: 'cluster-1'\n+     ```\n+\n+     If you would like to review the entire original model before this change, see [Staging model files](#staging-model-files) in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Create a new image from our staged model files using WIT.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n+\n+     At this point, we have staged all of the files needed for image `model-in-image:WLS-v2`, they include:\n+\n+     - `/tmp/mii-sample/model-images/weblogic-deploy.zip`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.yaml`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.properties`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip`\n+\n+     If you don't see the `weblogic-deploy.zip` file, then it means that you missed a step in the prerequisites.\n+\n+     Now let's use the Image Tool to create an image named `model-in-image:WLS-v2` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+     Run the following commands to create the model image and verify that it worked:\n+\n+     ```\n+     $ cd /tmp/mii-sample/model-images\n+     $ ./imagetool/bin/imagetool.sh update \\\n+       --tag model-in-image:WLS-v2 \\\n+       --fromImage container-registry.oracle.com/middleware/weblogic:12.2.1.4 \\\n+       --wdtModel      ./model-in-image__WLS-v2/model.10.yaml \\\n+       --wdtVariables  ./model-in-image__WLS-v2/model.10.properties \\\n+       --wdtArchive    ./model-in-image__WLS-v2/archive.zip \\\n+       --wdtModelOnly \\\n+       --wdtDomainType WLS\n+     ```\n+\n+     If you don't see the `imagetool` directory, then it means that you missed a step in the prerequisites.\n+\n+     This command runs the WebLogic Image Tool in its Model in Image mode, and does the following:\n+     - Builds the final Docker image as a layer on the `container-registry.oracle.com/middleware/weblogic:12.2.1.4` base image.\n+     - Copies the WDT ZIP file that's referenced in the WIT cache into the image.\n+       - Note that we cached WDT in WIT using the keyword `latest` when we set up the cache during the sample prerequisites steps.\n+       - This lets WIT implicitly assume its the desired WDT version and removes the need to pass a `-wdtVersion` flag.\n+     - Copies the specified WDT model, properties, and application archives to image location `/u01/wdt/models`.\n+\n+     When the command succeeds, it should end with output like:\n+\n+     ```\n+     [INFO   ] Build successful. Build time=36s. Image tag=model-in-image:WLS-v2\n+     ```\n+\n+     Also, if you run the `docker images` command, then you should see a Docker image named `model-in-image:WLS-v2`.\n+\n+1. Set up and apply a domain resource that is similar to your \"Update1\" use case domain resource but with a different image:\n+\n+   > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths, files, and image names below.\n+\n+   - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+     - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MzAxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425873016", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNDcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNjM4Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425806387", "bodyText": "Ingress controller -> ingress controller (Capitalization change to match Kubernetes docs)", "author": "rosemarymarano", "createdAt": "2020-05-15T13:36:06Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+Once the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's administration server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. Once the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+2. Create an updated image. \n+\n+   Recall that a goal of the [Initial use case](#initial-use-case) was to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that were staged in `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files included a web application in a WDT zip archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`. The final image was called `model-in-image:WLS-v1` and, in addition to having a copy of the staged files in its `/u01/wdt/models` directory, also contained a WebLogic installation and a WebLogic Deploy Tooling installation.\n+\n+   In this use case, we will follow similar steps to the [Initial use case](#initial-use-case) in order to create a new image with an updated application and model, plus deploy the updated model and application to the running [Update1 use case](#update1-use-case) domain.\n+\n+   - Understanding our updated WDT archive.\n+\n+     The updated archive for this use case is in directory `/tmp/mii-sample/archives/archive-v2`. We will use it to create an archive ZIP file for the image. This archive is similar to the `/tmp/mii-sample/archives/archive-v1` from the [Initial use case](#initial-use-case) with the the following differences:\n+     - It includes an updated version of the application in `./wlsdeploy/applications/myapp-v2` (while keeping the original application in directory `./wlsdeploy/applications/myapp-v1`).\n+     - The application in `./wlsdeploy/applications/myapp-v2/myapp_war/index.jsp` contains a single difference with the original application: it changes the line `out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");` to `out.println(\"Hello World! This is version 'v2' of the mii-sample JSP web-app.\");`.\n+\n+     For additional information about archives, see the [Understanding our first archive](#understanding-our-first-archive) section in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Stage a ZIP file of the WDT archive.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths below.\n+\n+     When we create our updated image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v2`. In preparation, we need it to contain a ZIP file of the new WDT application archive.\n+\n+     Run the following commands to create your application archive ZIP file and put it in the expected directory:\n+\n+     ```\n+     # Delete existing archive.zip in case we have an old leftover version\n+     $ rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip\n+\n+     # Move to the directory which contains the source files for our new archive\n+     $ cd /tmp/mii-sample/archives/archive-v2\n+\n+     # Zip the archive to the location will later use when we run the WebLogic Image Tool\n+     $ zip -r /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip wlsdeploy\n+     ```\n+\n+   - Understanding our staged model files.\n+\n+     The WDT model YAML file and properties for this use case have already been staged for you to directory `/tmp/mii-sample/model-in-image__WLS-v2`. \n+\n+     The `model.10.yaml` file in this directory has an updated path `wlsdeploy/applications/myapp-v2` that references the updated web application in our archive, but is otherwise identical to the model staged for the original image. The final related YAML stanza looks like this:\n+\n+     ```\n+     appDeployments:\n+         Application:\n+             myapp:\n+                 SourcePath: 'wlsdeploy/applications/myapp-v2'\n+                 ModuleType: ear\n+                 Target: 'cluster-1'\n+     ```\n+\n+     If you would like to review the entire original model before this change, see [Staging model files](#staging-model-files) in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Create a new image from our staged model files using WIT.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n+\n+     At this point, we have staged all of the files needed for image `model-in-image:WLS-v2`, they include:\n+\n+     - `/tmp/mii-sample/model-images/weblogic-deploy.zip`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.yaml`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.properties`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip`\n+\n+     If you don't see the `weblogic-deploy.zip` file, then it means that you missed a step in the prerequisites.\n+\n+     Now let's use the Image Tool to create an image named `model-in-image:WLS-v2` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+     Run the following commands to create the model image and verify that it worked:\n+\n+     ```\n+     $ cd /tmp/mii-sample/model-images\n+     $ ./imagetool/bin/imagetool.sh update \\\n+       --tag model-in-image:WLS-v2 \\\n+       --fromImage container-registry.oracle.com/middleware/weblogic:12.2.1.4 \\\n+       --wdtModel      ./model-in-image__WLS-v2/model.10.yaml \\\n+       --wdtVariables  ./model-in-image__WLS-v2/model.10.properties \\\n+       --wdtArchive    ./model-in-image__WLS-v2/archive.zip \\\n+       --wdtModelOnly \\\n+       --wdtDomainType WLS\n+     ```\n+\n+     If you don't see the `imagetool` directory, then it means that you missed a step in the prerequisites.\n+\n+     This command runs the WebLogic Image Tool in its Model in Image mode, and does the following:\n+     - Builds the final Docker image as a layer on the `container-registry.oracle.com/middleware/weblogic:12.2.1.4` base image.\n+     - Copies the WDT ZIP file that's referenced in the WIT cache into the image.\n+       - Note that we cached WDT in WIT using the keyword `latest` when we set up the cache during the sample prerequisites steps.\n+       - This lets WIT implicitly assume its the desired WDT version and removes the need to pass a `-wdtVersion` flag.\n+     - Copies the specified WDT model, properties, and application archives to image location `/u01/wdt/models`.\n+\n+     When the command succeeds, it should end with output like:\n+\n+     ```\n+     [INFO   ] Build successful. Build time=36s. Image tag=model-in-image:WLS-v2\n+     ```\n+\n+     Also, if you run the `docker images` command, then you should see a Docker image named `model-in-image:WLS-v2`.\n+\n+1. Set up and apply a domain resource that is similar to your \"Update1\" use case domain resource but with a different image:\n+\n+   > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths, files, and image names below.\n+\n+   - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+     - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+\n+       - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update3.yaml` before making any changes.\n+\n+       - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+     - Change the `/tmp/mii-sample/mii-update3.yaml` domain resource `image` field to reference `model-in-image:WLS-v2` instead of `model-in-image:WLS-v1`.\n+\n+        The final result should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          image: \"model-in-image:WLS-v2\"\n+        ```\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update3.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update3-d1-WLS-v2-ds.yaml\n+        ```\n+\n+\n+1. Wait for the roll to complete.\n+\n+   Now that you've applied a domain resource with an updated image, the operator should automatically rerun the domain's introspector job in order to generate a new domain home, and then should restart ('roll') each of the domain's pods so that they use the new domain home and the new image. You'll need to wait for this roll to complete before we can verify that the new image and its associated new application have been deployed.\n+\n+   - One way to do this is to call `kubectl get pods -n sample-domain1-ns --watch` and wait for the pods to cycle back to their `ready` state.\n+\n+   - Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`. This is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+     {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+   ```\n+     $ ./wl-pod-wait.sh -?\n \n+       Usage:\n+\n+         wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+            [-p expected_pod_count] \\\n+            [-t timeout_secs] \\\n+            [-q]\n+\n+         Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+       Parameters:\n+\n+         -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+         -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+         pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                           a domain all (a) are ready, (b) have the same\n+                           'domainRestartVersion' label value as the\n+                           current domain resource's 'spec.restartVersion, and\n+                           (c) have the same image as the current domain\n+                           resource's image.\n+\n+         pod_count = 0   : Wait until there are no running WebLogic server pods\n+                           for a domain. The default.\n+\n+         -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+         -q              : Quiet mode. Show only a count of wl pods that\n+                           have reached the desired criteria.\n+\n+         -?              : This help.\n+   ```\n+     {{% /expand%}}\n+\n+     {{%expand \"Click here to expand sample output from `wl-pod-wait.sh` that shows a rolling domain.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain1 -p 3\n+   \n+   @@ [2020-05-14T17:28:47][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   ready='true'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   image='model-in-image:WLS-v2'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   domainUID='sample-domain1'\n+   \n+   @@ [2020-05-14T17:28:47][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:28:47][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'                 '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-introspect-domain-job-g5kzn'  ''       ''                       ''      'Running'  \n+   'sample-domain1-managed-server1'              '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'              '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:39][seconds=53] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:39][seconds=53] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:50][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:50][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:58][seconds=72] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:58][seconds=72] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:29:59][seconds=73] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:59][seconds=73] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:30:30][seconds=104] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:30:30][seconds=104] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:31:13][seconds=147] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:13][seconds=147] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:31:15][seconds=149] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:15][seconds=149] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:31:41][seconds=175] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:41][seconds=175] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:31:42][seconds=176] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:42][seconds=176] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:32:21][seconds=215] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:21][seconds=215] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:31][seconds=225] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:31][seconds=225] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:40][seconds=234] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:40][seconds=234] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:51][seconds=245] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:51][seconds=245] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   \n+   @@ [2020-05-14T17:32:52][seconds=246] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:52][seconds=246] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   \n+   @@ [2020-05-14T17:33:25][seconds=279] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:33:25][seconds=279] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-14T17:33:25][seconds=279] Info: Success!\n+\n+   ```\n+     {{% /expand%}}\n+\n+1. After your domain roll is complete, you can call the sample web application to determine if the updated application was deployed. \n+\n+   When the application is invoked, it should contain an output string like `Hello World! This is version 'v2' of the mii-sample JSP web-app.`.\n+\n+   Send a web application request to the Ingress controller:", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MzA5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425873090", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNjM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNjg3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425806873", "bodyText": "Ingress controller -> ingress controller (Capitalization change to match Kubernetes docs)", "author": "rosemarymarano", "createdAt": "2020-05-15T13:36:56Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and is instead dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. Any shared resources between the two domains must necessarily have their own life-cycle.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap, and that will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life-cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that comes supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To instead look like:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the Ingress controller for `sample-domain2`:", "originalCommit": "9506ef0b3f5a4e324b7412a4d28a214f7c8a669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MzE0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r425873144", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-15T15:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNjg3Mw=="}], "type": "inlineReview"}, {"oid": "094c96637b202607044aa7d21d83d1332aa82f90", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/094c96637b202607044aa7d21d83d1332aa82f90", "message": "MII Sample: edit pass edits", "committedDate": "2020-05-15T14:59:59Z", "type": "commit"}, {"oid": "0d310c5e3f309d357e0a3b8cd6ca9ce45b41b8f5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0d310c5e3f309d357e0a3b8cd6ca9ce45b41b8f5", "message": "MII Sample: edit pass edits", "committedDate": "2020-05-15T15:12:02Z", "type": "commit"}, {"oid": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d7f7757e84b0a55ff0182f0c04db0066e48959b6", "message": "MII Sample: edit pass edits", "committedDate": "2020-05-15T15:24:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDc0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426210740", "bodyText": "not a fan of putting the comments in here like this with a dollar sign prompt", "author": "markxnelson", "createdAt": "2020-05-17T02:46:02Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4MjY0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426682645", "bodyText": "fixed", "author": "tbarnes-us", "createdAt": "2020-05-18T14:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDc1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426210754", "bodyText": "space before the %}}", "author": "markxnelson", "createdAt": "2020-05-17T02:46:42Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4MjczMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426682731", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-18T14:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDgxMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426210813", "bodyText": "this seems material, i would not hide in an expander", "author": "markxnelson", "createdAt": "2020-05-17T02:47:39Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n \n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To this:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4Mjg5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426682891", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-18T14:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDg1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426210850", "bodyText": "space before %}}", "author": "markxnelson", "createdAt": "2020-05-17T02:48:05Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n \n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To this:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4Mjk2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426682966", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-18T14:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDg3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426210872", "bodyText": "an an", "author": "markxnelson", "createdAt": "2020-05-17T02:48:43Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n \n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To this:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4MzA1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426683055", "bodyText": "fixed", "author": "tbarnes-us", "createdAt": "2020-05-18T14:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDkwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426210909", "bodyText": "\"we expect the operator to\" sounds like we don't know if it works.\n\"the operator will\" sounds better", "author": "markxnelson", "createdAt": "2020-05-17T02:49:29Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n \n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To this:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+After the updated domain resource is applied, we expect the operator to:", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4MzE3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426683171", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-18T14:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMDkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTAwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426211005", "bodyText": "should -> will", "author": "markxnelson", "createdAt": "2020-05-17T02:51:15Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n \n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To this:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+After the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's Administration Server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. After the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+2. Create an updated image. \n+\n+   Recall that a goal of the [Initial use case](#initial-use-case) was to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that were staged in `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files included a web application in a WDT ZIP archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`. The final image was called `model-in-image:WLS-v1` and, in addition to having a copy of the staged files in its `/u01/wdt/models` directory, also contained a WebLogic installation and a WebLogic Deploy Tooling installation.\n+\n+   In this use case, we will follow similar steps to the [Initial use case](#initial-use-case) in order to create a new image with an updated application and model, plus deploy the updated model and application to the running [Update1 use case](#update1-use-case) domain.\n+\n+   - Understanding our updated WDT archive.\n+\n+     The updated archive for this use case is in directory `/tmp/mii-sample/archives/archive-v2`. We will use it to create an archive ZIP file for the image. This archive is similar to the `/tmp/mii-sample/archives/archive-v1` from the [Initial use case](#initial-use-case) with the the following differences:\n+     - It includes an updated version of the application in `./wlsdeploy/applications/myapp-v2` (while keeping the original application in directory `./wlsdeploy/applications/myapp-v1`).\n+     - The application in `./wlsdeploy/applications/myapp-v2/myapp_war/index.jsp` contains a single difference from the original application: it changes the line `out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");` to `out.println(\"Hello World! This is version 'v2' of the mii-sample JSP web-app.\");`.\n+\n+     For additional information about archives, see the [Understanding our first archive](#understanding-our-first-archive) section in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Stage a ZIP file of the WDT archive.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths below.\n+\n+     When we create our updated image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v2`. In preparation, we need it to contain a ZIP file of the new WDT application archive.\n+\n+     Run the following commands to create your application archive ZIP file and put it in the expected directory:\n+\n+     ```\n+     # Delete existing archive.zip in case we have an old leftover version\n+     $ rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip\n+\n+     # Move to the directory which contains the source files for our new archive\n+     $ cd /tmp/mii-sample/archives/archive-v2\n+\n+     # Zip the archive to the location will later use when we run the WebLogic Image Tool\n+     $ zip -r /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip wlsdeploy\n+     ```\n+\n+   - Understanding our staged model files.\n+\n+     The WDT model YAML file and properties for this use case have already been staged for you to directory `/tmp/mii-sample/model-in-image__WLS-v2`. \n+\n+     The `model.10.yaml` file in this directory has an updated path `wlsdeploy/applications/myapp-v2` that references the updated web application in our archive, but is otherwise identical to the model staged for the original image. The final related YAML stanza looks like this:\n+\n+     ```\n+     appDeployments:\n+         Application:\n+             myapp:\n+                 SourcePath: 'wlsdeploy/applications/myapp-v2'\n+                 ModuleType: ear\n+                 Target: 'cluster-1'\n+     ```\n+\n+     If you would like to review the entire original model before this change, see [Staging model files](#staging-model-files) in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Create a new image from our staged model files using WIT.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n+\n+     At this point, we have staged all of the files needed for image `model-in-image:WLS-v2`, they include:\n+\n+     - `/tmp/mii-sample/model-images/weblogic-deploy.zip`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.yaml`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.properties`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip`\n+\n+     If you don't see the `weblogic-deploy.zip` file, then it means that you missed a step in the prerequisites.\n+\n+     Now let's use the Image Tool to create an image named `model-in-image:WLS-v2` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+     Run the following commands to create the model image and verify that it worked:\n+\n+     ```\n+     $ cd /tmp/mii-sample/model-images\n+     $ ./imagetool/bin/imagetool.sh update \\\n+       --tag model-in-image:WLS-v2 \\\n+       --fromImage container-registry.oracle.com/middleware/weblogic:12.2.1.4 \\\n+       --wdtModel      ./model-in-image__WLS-v2/model.10.yaml \\\n+       --wdtVariables  ./model-in-image__WLS-v2/model.10.properties \\\n+       --wdtArchive    ./model-in-image__WLS-v2/archive.zip \\\n+       --wdtModelOnly \\\n+       --wdtDomainType WLS\n+     ```\n+\n+     If you don't see the `imagetool` directory, then it means that you missed a step in the prerequisites.\n+\n+     This command runs the WebLogic Image Tool in its Model in Image mode, and does the following:\n+     - Builds the final Docker image as a layer on the `container-registry.oracle.com/middleware/weblogic:12.2.1.4` base image.\n+     - Copies the WDT ZIP file that's referenced in the WIT cache into the image.\n+       - Note that we cached WDT in WIT using the keyword `latest` when we set up the cache during the sample prerequisites steps.\n+       - This lets WIT implicitly assume it's the desired WDT version and removes the need to pass a `-wdtVersion` flag.\n+     - Copies the specified WDT model, properties, and application archives to image location `/u01/wdt/models`.\n+\n+     When the command succeeds, it should end with output like:\n+\n+     ```\n+     [INFO   ] Build successful. Build time=36s. Image tag=model-in-image:WLS-v2\n+     ```\n+\n+     Also, if you run the `docker images` command, then you should see a Docker image named `model-in-image:WLS-v2`.\n+\n+1. Set up and apply a domain resource that is similar to your \"Update1\" use case domain resource but with a different image:\n+\n+   > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths, files, and image names below.\n+\n+   - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+     - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+\n+       - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update3.yaml` before making any changes.\n+\n+       - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+     - Change the `/tmp/mii-sample/mii-update3.yaml` domain resource `image` field to reference `model-in-image:WLS-v2` instead of `model-in-image:WLS-v1`.\n+\n+        The final result should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          image: \"model-in-image:WLS-v2\"\n+        ```\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update3.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update3-d1-WLS-v2-ds.yaml\n+        ```\n+\n+\n+1. Wait for the roll to complete.\n+\n+   Now that you've applied a domain resource with an updated image, the operator should automatically rerun the domain's introspector job in order to generate a new domain home, and then should restart ('roll') each of the domain's pods so that they use the new domain home and the new image. You'll need to wait for this roll to complete before we can verify that the new image and its associated new application have been deployed.", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4MzI0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426683249", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-18T14:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTAxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426211011", "bodyText": "space", "author": "markxnelson", "createdAt": "2020-05-17T02:51:36Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n \n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To this:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+After the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's Administration Server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. After the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+2. Create an updated image. \n+\n+   Recall that a goal of the [Initial use case](#initial-use-case) was to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that were staged in `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files included a web application in a WDT ZIP archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`. The final image was called `model-in-image:WLS-v1` and, in addition to having a copy of the staged files in its `/u01/wdt/models` directory, also contained a WebLogic installation and a WebLogic Deploy Tooling installation.\n+\n+   In this use case, we will follow similar steps to the [Initial use case](#initial-use-case) in order to create a new image with an updated application and model, plus deploy the updated model and application to the running [Update1 use case](#update1-use-case) domain.\n+\n+   - Understanding our updated WDT archive.\n+\n+     The updated archive for this use case is in directory `/tmp/mii-sample/archives/archive-v2`. We will use it to create an archive ZIP file for the image. This archive is similar to the `/tmp/mii-sample/archives/archive-v1` from the [Initial use case](#initial-use-case) with the the following differences:\n+     - It includes an updated version of the application in `./wlsdeploy/applications/myapp-v2` (while keeping the original application in directory `./wlsdeploy/applications/myapp-v1`).\n+     - The application in `./wlsdeploy/applications/myapp-v2/myapp_war/index.jsp` contains a single difference from the original application: it changes the line `out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");` to `out.println(\"Hello World! This is version 'v2' of the mii-sample JSP web-app.\");`.\n+\n+     For additional information about archives, see the [Understanding our first archive](#understanding-our-first-archive) section in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Stage a ZIP file of the WDT archive.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths below.\n+\n+     When we create our updated image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v2`. In preparation, we need it to contain a ZIP file of the new WDT application archive.\n+\n+     Run the following commands to create your application archive ZIP file and put it in the expected directory:\n+\n+     ```\n+     # Delete existing archive.zip in case we have an old leftover version\n+     $ rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip\n+\n+     # Move to the directory which contains the source files for our new archive\n+     $ cd /tmp/mii-sample/archives/archive-v2\n+\n+     # Zip the archive to the location will later use when we run the WebLogic Image Tool\n+     $ zip -r /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip wlsdeploy\n+     ```\n+\n+   - Understanding our staged model files.\n+\n+     The WDT model YAML file and properties for this use case have already been staged for you to directory `/tmp/mii-sample/model-in-image__WLS-v2`. \n+\n+     The `model.10.yaml` file in this directory has an updated path `wlsdeploy/applications/myapp-v2` that references the updated web application in our archive, but is otherwise identical to the model staged for the original image. The final related YAML stanza looks like this:\n+\n+     ```\n+     appDeployments:\n+         Application:\n+             myapp:\n+                 SourcePath: 'wlsdeploy/applications/myapp-v2'\n+                 ModuleType: ear\n+                 Target: 'cluster-1'\n+     ```\n+\n+     If you would like to review the entire original model before this change, see [Staging model files](#staging-model-files) in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Create a new image from our staged model files using WIT.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n+\n+     At this point, we have staged all of the files needed for image `model-in-image:WLS-v2`, they include:\n+\n+     - `/tmp/mii-sample/model-images/weblogic-deploy.zip`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.yaml`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.properties`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip`\n+\n+     If you don't see the `weblogic-deploy.zip` file, then it means that you missed a step in the prerequisites.\n+\n+     Now let's use the Image Tool to create an image named `model-in-image:WLS-v2` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+     Run the following commands to create the model image and verify that it worked:\n+\n+     ```\n+     $ cd /tmp/mii-sample/model-images\n+     $ ./imagetool/bin/imagetool.sh update \\\n+       --tag model-in-image:WLS-v2 \\\n+       --fromImage container-registry.oracle.com/middleware/weblogic:12.2.1.4 \\\n+       --wdtModel      ./model-in-image__WLS-v2/model.10.yaml \\\n+       --wdtVariables  ./model-in-image__WLS-v2/model.10.properties \\\n+       --wdtArchive    ./model-in-image__WLS-v2/archive.zip \\\n+       --wdtModelOnly \\\n+       --wdtDomainType WLS\n+     ```\n+\n+     If you don't see the `imagetool` directory, then it means that you missed a step in the prerequisites.\n+\n+     This command runs the WebLogic Image Tool in its Model in Image mode, and does the following:\n+     - Builds the final Docker image as a layer on the `container-registry.oracle.com/middleware/weblogic:12.2.1.4` base image.\n+     - Copies the WDT ZIP file that's referenced in the WIT cache into the image.\n+       - Note that we cached WDT in WIT using the keyword `latest` when we set up the cache during the sample prerequisites steps.\n+       - This lets WIT implicitly assume it's the desired WDT version and removes the need to pass a `-wdtVersion` flag.\n+     - Copies the specified WDT model, properties, and application archives to image location `/u01/wdt/models`.\n+\n+     When the command succeeds, it should end with output like:\n+\n+     ```\n+     [INFO   ] Build successful. Build time=36s. Image tag=model-in-image:WLS-v2\n+     ```\n+\n+     Also, if you run the `docker images` command, then you should see a Docker image named `model-in-image:WLS-v2`.\n+\n+1. Set up and apply a domain resource that is similar to your \"Update1\" use case domain resource but with a different image:\n+\n+   > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths, files, and image names below.\n+\n+   - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+     - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+\n+       - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update3.yaml` before making any changes.\n+\n+       - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+     - Change the `/tmp/mii-sample/mii-update3.yaml` domain resource `image` field to reference `model-in-image:WLS-v2` instead of `model-in-image:WLS-v1`.\n+\n+        The final result should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          image: \"model-in-image:WLS-v2\"\n+        ```\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update3.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update3-d1-WLS-v2-ds.yaml\n+        ```\n+\n+\n+1. Wait for the roll to complete.\n+\n+   Now that you've applied a domain resource with an updated image, the operator should automatically rerun the domain's introspector job in order to generate a new domain home, and then should restart ('roll') each of the domain's pods so that they use the new domain home and the new image. You'll need to wait for this roll to complete before we can verify that the new image and its associated new application have been deployed.\n+\n+   - One way to do this is to call `kubectl get pods -n sample-domain1-ns --watch` and wait for the pods to cycle back to their `ready` state.\n+\n+   - Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`. This is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+     {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+   ```\n+     $ ./wl-pod-wait.sh -?\n+\n+       Usage:\n+\n+         wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+            [-p expected_pod_count] \\\n+            [-t timeout_secs] \\\n+            [-q]\n+\n+         Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+       Parameters:\n+\n+         -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+         -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+         pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                           a domain all (a) are ready, (b) have the same\n+                           'domainRestartVersion' label value as the\n+                           current domain resource's 'spec.restartVersion, and\n+                           (c) have the same image as the current domain\n+                           resource's image.\n+\n+         pod_count = 0   : Wait until there are no running WebLogic server pods\n+                           for a domain. The default.\n+\n+         -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+         -q              : Quiet mode. Show only a count of wl pods that\n+                           have reached the desired criteria.\n+\n+         -?              : This help.\n+   ```\n+     {{% /expand%}}\n+\n+     {{%expand \"Click here to expand sample output from `wl-pod-wait.sh` that shows a rolling domain.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain1 -p 3\n+   \n+   @@ [2020-05-14T17:28:47][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   ready='true'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   image='model-in-image:WLS-v2'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   domainUID='sample-domain1'\n+   \n+   @@ [2020-05-14T17:28:47][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:28:47][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'                 '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-introspect-domain-job-g5kzn'  ''       ''                       ''      'Running'  \n+   'sample-domain1-managed-server1'              '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'              '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:39][seconds=53] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:39][seconds=53] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:50][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:50][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:58][seconds=72] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:58][seconds=72] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:29:59][seconds=73] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:59][seconds=73] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:30:30][seconds=104] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:30:30][seconds=104] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:31:13][seconds=147] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:13][seconds=147] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:31:15][seconds=149] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:15][seconds=149] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:31:41][seconds=175] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:41][seconds=175] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:31:42][seconds=176] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:42][seconds=176] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:32:21][seconds=215] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:21][seconds=215] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:31][seconds=225] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:31][seconds=225] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:40][seconds=234] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:40][seconds=234] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:51][seconds=245] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:51][seconds=245] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   \n+   @@ [2020-05-14T17:32:52][seconds=246] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:52][seconds=246] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   \n+   @@ [2020-05-14T17:33:25][seconds=279] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:33:25][seconds=279] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-14T17:33:25][seconds=279] Info: Success!\n+\n+   ```\n+     {{% /expand%}}", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4MzM0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426683340", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-18T14:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTAxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426211017", "bodyText": "seems material", "author": "markxnelson", "createdAt": "2020-05-17T02:51:50Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1717,8 +1749,890 @@ Here are the steps:\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-This completes the sample scenarios.\n+If you plan to run the [Update3 use case](#update3-use-case), then leave your domain running.\n+\n+### Update2 use case\n+\n+This use case demonstrates concurrently deploying a domain that is similar to the [Update1 use case](#update1-use-case) domain to the same `sample-domain1-ns` namespace but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:\n+\n+- Using the same image, image model YAML, and application archive as the Initial and Update1 use cases.\n+- Using the same model update ConfigMap source file as the Update1 use case (a data source).\n+- Using a different (unique) domain UID, `sample-domain2`, for the new domain.\n+- Using a different (unique) domain name, `domain2`, for the different domains.\n+- Deploying secrets and a model update ConfigMap that are uniquely labeled and named for the new domain.\n+\n+Note that this use case shows Model in Image's unique ability to quickly deploy a copy of a WebLogic domain that has a different WebLogic domain name and domain encryption key. This is a useful capability that is not supported by the Domain in Image domain home source type:\n+\n+- A Domain in Image domain home source type does not support overriding the domain name, but different domain names are necessary when two domains need to interoperate. In this use case, we take advantage of model macros to ensure that its two different domains have a different domain name: \n+\n+  - First, we define the domain name in the model YAML using the `@@ENV:CUSTOM_DOMAIN_NAME@@` environment variable macro.\n+  - Second, we set the value of the `CUSTOM_DOMAIN_NAME` environment variable differently using the `env` stanza in each domain's domain resource.\n+\n+- Domain in Image requires that its images embed a WebLogic `security/SerializedSystemIni.dat` domain encryption key that cannot be changed for the image (see [why layering matters]({{< relref \"/userguide/cicd/why-layering-matters.md\" >}}) in CI/CD Considerations). This necessarily means that two Domain in Image domains that share the same image have the ability to decrypt each other's encrypted passwords. A Model in Image's domain encryption key, on the other hand, is not embedded in the image and instead, is dynamically and uniquely created each time the domain is started. \n+\n+{{% notice warning %}}\n+Oracle requires interoperating WebLogic domains to have different domain names. This is necessary when two domains communicate, or when a WebLogic Server or WebLogic Java client concurrently connects to multiple domains. \n+{{% /notice %}}\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+1. Create a ConfigMap with the WDT model that contains the data source definition.\n+\n+   Run the following commands:\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create configmap sample-domain2-wdt-config-map \\\n+     --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   $ kubectl -n sample-domain1-ns label configmap sample-domain2-wdt-config-map \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   If you've created your own data source file in the Update1 use case, then substitute the file name in the `--from-file=` parameter (we suggested `/tmp/mii-sample/mydatasource.yaml` earlier). Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the ConfigMap, or it can reference a directory, in which case it populates the ConfigMap with all of the files in the designated directory.\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for the ConfigMap because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the ConfigMap using its associated domain UID for two reasons:\n+       - To make it obvious which ConfigMap belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different ConfigMap for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n+       - To 'future proof' the new domain so that changes to the original domain or new domain's ConfigMap can be independent.\n+\n+\n+1. Create the secrets that are referenced by the WDT model files in the image and ConfigMap; they also will be referenced by the domain resource.\n+\n+   Run the following commands:\n+   ```\n+   $ # spec.webLogicCredentialsSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-weblogic-credentials \\\n+      --from-literal=username=weblogic --from-literal=password=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-weblogic-credentials \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # spec.configuration.model.runtimeEncryptionSecret\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-runtime-encryption-secret \\\n+      --from-literal=password=my_runtime_password\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-runtime-encryption-secret \\\n+     weblogic.domainUID=sample-domain2\n+\n+   $ # referenced by spec.configuration.secrets and by the datasource model YAML in the ConfigMap\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 \\\n+      --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-datasource-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+\n+   Observations:\n+     - We are leaving the namespace `sample-domain1-ns` unchanged for each secret because we plan to deploy domain `sample-domain2` to the same namespace as `sample-domain1`.\n+     - We name and label the secrets using their associated domain UID for two reasons:\n+       - To make it obvious which secret belongs to which domain.\n+       - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n+     - We use a different set of secrets for the new domain for two reasons:\n+       - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent. \n+       - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n+\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+\n+   {{%expand \"Click here for the commands for deploying additional secrets for JRF.\" %}}\n+\n+   ```\n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-rcu-access \\\n+      --from-literal=rcu_prefix=FMW1 \\\n+      --from-literal=rcu_schema_password=Oradoc_db1 \\\n+      --from-literal=rcu_db_conn_string=oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-rcu-access \\\n+     weblogic.domainUID=sample-domain2\n+ \n+   $ kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain2-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+   $ kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain2-opss-wallet-password-secret \\\n+     weblogic.domainUID=sample-domain2\n+   ```\n+   {{% /expand%}}\n+\n+1. Set up a domain resource that is similar to your \"Update1\" use case domain resource but with different domain UID, domain name, model update ConfigMap reference, and secret references:\n+\n+    - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+      - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+        - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update2.yaml` before making any changes.\n+\n+        - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource name and `weblogic.domainUID` label to `sample-domain2`.\n+\n+        The final result should look something like this:\n+\n+          ``` \n+          apiVersion: \"weblogic.oracle/v7\"\n+          kind: Domain\n+          metadata:\n+            name: sample-domain2\n+            namespace: sample-domain1-ns\n+            labels:\n+              weblogic.resourceVersion: domain-v2\n+              weblogic.domainUID: sample-domain2\n+          ```\n+\n+        > __NOTE__: We are leaving the namespace `sample-domain1-ns` unchanged because we will be deploying domain `sample-domain2` to the same namespace as `sample-domain1`.\n \n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource's `CUSTOM_DOMAIN_NAME` environment variable from `domain1` to `domain2`.\n+\n+        The model file in the image uses macro `@@ENV:CUSTOM_DOMAIN_NAME@@` to reference this environment variable when setting its domain name. \n+\n+        Specifically, change the corresponding domain resource `spec.serverPod.env` YAML stanza to look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          serverPod:\n+          ...\n+            env:\n+            - name: CUSTOM_DOMAIN_NAME\n+              value: \"domain2\"\n+          ...\n+        ```\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` domain resource `spec.domainHome` value to `/u01/domains/sample-domain2`. The corresponding YAML stanza should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          domainHome: /u01/domains/sample-domain2\n+          ...\n+        ```\n+\n+        (This change is not strictly needed, but it is a helpful convention to decorate a WebLogic domain's home directory with its domain name or domain UID.)\n+\n+      - Change the `/tmp/mii-sample/mii-update2.yaml` secret references in the `spec.webLogicCredentialsSecret` and `spec.configuration.secrets` stanzas to reference this use case's secrets. Specifically, change:\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain1-weblogic-credentials\n+            ...\n+            configuration:\n+            ...\n+              secrets:\n+              - sample-domain1-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+          ```\n+\n+        To this:\n+\n+\n+          ```\n+          spec:\n+            ...\n+            webLogicCredentialsSecret:\n+              name: sample-domain2-weblogic-credentials\n+            ...\n+            configuration:\n+              ...\n+              secrets:\n+              - sample-domain2-datasource-secret\n+              ...\n+              model:\n+                ...\n+                runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+          ```\n+\n+        > __NOTE__: If you are following the `JRF` path through the sample, similarly change your `spec.configuration.opss.walletPasswordSecret` and the RCU secret name referenced in `spec.configuration.secrets`.  \n+\n+\n+      - Change the domain resource's `spec.configuration.model.configMap` value from `sample-domain1-wdt-config-map` to `sample-domain2-wdt-config-map`. The corresponding YAML stanza should look something like this:\n+         ```\n+         spec:\n+           ...\n+           configuration:\n+             ...\n+             model:\n+             ...\n+               configMap: configMap: sample-domain2-wdt-config-map\n+         ```\n+\n+      - Now, let's compare your original and changed domain resource files to double check your changes.\n+\n+        {{%expand \"Click here to see the expected 'diff'.\" %}}\n+\n+        ```\n+        $ diff /tmp/mii-sample/mii-update1.yaml /tmp/mii-sample/mii-update2.yaml\n+        9c9\n+        <   name: sample-domain1\n+        ---\n+        >   name: sample-domain2\n+        13c13\n+        <     weblogic.domainUID: sample-domain1\n+        ---\n+        >     weblogic.domainUID: sample-domain2\n+        21c21\n+        <   domainHome: /u01/domains/sample-domain1\n+        ---\n+        >   domainHome: /u01/domains/sample-domain2\n+        36c36\n+        <     name: sample-domain1-weblogic-credentials\n+        ---\n+        >     name: sample-domain2-weblogic-credentials\n+        46c46\n+        <   #logHome: /shared/logs/sample-domain1\n+        ---\n+        >   #logHome: /shared/logs/sample-domain2\n+        61c61\n+        <       value: \"domain1\"\n+        ---\n+        >       value: \"domain2\"\n+        71c71\n+        <     #    claimName: sample-domain1-weblogic-sample-pvc\n+        ---\n+        >     #    claimName: sample-domain2-weblogic-sample-pvc\n+        110c110\n+        <       configMap: sample-domain1-wdt-config-map\n+        ---\n+        >       configMap: sample-domain2-wdt-config-map\n+        113c113\n+        <       runtimeEncryptionSecret: sample-domain1-runtime-encryption-secret\n+        ---\n+        >       runtimeEncryptionSecret: sample-domain2-runtime-encryption-secret\n+        118c118\n+        <     - sample-domain1-datasource-secret\n+        ---\n+        >     - sample-domain2-datasource-secret\n+        ```\n+        {{% /expand%}}\n+\n+        {{%expand \"Click here to see additional 'diff' expected for the JRF path through the sample.\" %}}\n+\n+        ```\n+        <       walletPasswordSecret: sample-domain1-opss-wallet-password-secret\n+        ---\n+        >       walletPasswordSecret: sample-domain2-opss-wallet-password-secret\n+        130c130\n+        <       #walletFileSecret: sample-domain1-opss-walletfile-secret\n+        ---\n+        >       #walletFileSecret: sample-domain2-opss-walletfile-secret\n+        ```\n+        {{% /expand%}}\n+\n+        > __NOTE__: The diff should _not_ contain a namespace change. We are deploying domain `sample-domain2` to the same namespace as `sample-domain1` (namespace `sample-domain1-ns`).\n+\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update2.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update2-d2-WLS-v1-ds.yaml\n+        ```\n+\n+1. Wait for `sample-domain2` to start.\n+\n+   If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see the introspector job for `sample-domain2` run and your WebLogic Server pods start. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ kubectl get pods -n sample-domain1-ns --watch\n+   NAME                             READY   STATUS    RESTARTS   AGE\n+   sample-domain1-admin-server      1/1     Running   0          5d2h\n+   sample-domain1-managed-server1   1/1     Running   1          5d2h\n+   sample-domain1-managed-server2   1/1     Running   2          5d2h\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s\n+   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s\n+   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     Pending             0          0s\n+   sample-domain2-admin-server                  0/1     ContainerCreating   0          0s\n+   sample-domain2-admin-server                  0/1     Running             0          1s\n+   sample-domain2-admin-server                  1/1     Running             0          34s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     Pending             0          0s\n+   sample-domain2-managed-server1               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     Pending             0          0s\n+   sample-domain2-managed-server2               0/1     ContainerCreating   0          0s\n+   sample-domain2-managed-server1               0/1     Running             0          1s\n+   sample-domain2-managed-server2               0/1     Running             0          1s\n+   sample-domain2-managed-server1               1/1     Running             0          45s\n+   sample-domain2-managed-server2               1/1     Running             0          45s\n+   ```\n+   {{% /expand%}}\n+\n+   For a more detailed view of this activity, you can instead call `/tmp/mii-sample/utils/wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3`. The output should look something like this:\n+\n+   {{%expand \"Click here to expand.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain2 -p 3\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   ready='true'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   image='model-in-image:WLS-v1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-13T17:06:00][seconds=1] Info:   domainUID='sample-domain2'\n+   \n+   @@ [2020-05-13T17:06:00][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:06:00][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE      \n+   --------------------------------------------  -------  -----  -----  ---------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'  \n+   \n+   @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE  READY  PHASE        \n+   --------------------------------------------  -------  -----  -----  -----------  \n+   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'  \n+   \n+   @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME  VERSION  IMAGE  READY  PHASE  \n+   ----  -------  -----  -----  -----  \n+   \n+   @@ [2020-05-13T17:07:14][seconds=75] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:14][seconds=75] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                           VERSION  IMAGE                    READY    PHASE      \n+   -----------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:07:47][seconds=108] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:47][seconds=108] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:49][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:49][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'  \n+   \n+   @@ [2020-05-13T17:07:50][seconds=111] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:07:50][seconds=111] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:32][seconds=153] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:32][seconds=153] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain2-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain2-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-13T17:08:34][seconds=155] Info: Success!\n+\n+   ```\n+   {{% /expand%}}\n+\n+1. After the `sample-domain2` domain is running, you can call its sample web application to verify that it's fully active.\n+\n+   Send a web application request to the ingress controller for `sample-domain2`:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain2-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your `domain2` Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain2-admin-server -- bash -c \\ \n+     \"curl -s -S -m 10 http://sample-domain2-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}\n+\n+   ```  \n+   <html><body><pre>\n+   *****************************************************************\n+\n+   Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+   Welcome to WebLogic server 'managed-server1'!\n+\n+    domain UID  = 'sample-domain2'\n+    domain name = 'domain2'\n+\n+   Found 1 local cluster runtime:\n+     Cluster 'cluster-1'\n+\n+   Found 1 local data source:\n+     Datasource 'mynewdatasource': State='Running'\n+\n+   *****************************************************************\n+   </pre></body></html>\n+\n+   ```  \n+   {{% /expand%}}\n+\n+If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n+\n+We will not be using the `sample-domain2` domain again in this sample; if you wish, you can shut it down now by calling `kubectl -n sample-domain1-ns delete domain sample-domain2`.\n+\n+### Update3 use case\n+\n+The Update3 use case demonstrates deploying an an updated WebLogic application to the running [Update1 use case](#update1-use-case) domain using an updated Docker image.\n+\n+In the use case, we will:\n+\n+ - Create an image `model-in-image:WLS-v2` that is similar to the currently active `model-in-image:WLS-v1` image, but with with the following updates:\n+   - An updated web application `v2` at the `myapp-v2` directory path within the WDT application archive instead of `myapp-v1`.\n+   - An updated model YAML within the image that points to the new web application path.\n+ - Apply an updated domain resource that references the new image while still referencing the original [Update1 use case](#update1-use-case) case secrets and model ConfigMap. \n+\n+After the updated domain resource is applied, we expect the operator to:\n+\n+ - Rerun the introspector job and generate a new domain home based on the new model.\n+ - Restart the domain's Administration Server pod so that it loads the new image and new domain home.\n+ - Roll the domain's cluster servers one at a time so that they each load the new image, new domain home, and revised application.\n+\n+Finally, we will call the application to verify that its revision is active.\n+\n+Note that the old version of the application `v1` remains in the new image's archive but is unused. We leave it there to demonstrate that the old version can remain in case you want to revert to it. After the new image is applied, you can revert by modifying your model's `configuration.model.configMap` to override the related application path in your image model.\n+\n+Here are the steps for this use case:\n+\n+1. Make sure you have deployed the domain from the [Update1 use case](#update1-use-case).\n+\n+2. Create an updated image. \n+\n+   Recall that a goal of the [Initial use case](#initial-use-case) was to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that were staged in `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files included a web application in a WDT ZIP archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`. The final image was called `model-in-image:WLS-v1` and, in addition to having a copy of the staged files in its `/u01/wdt/models` directory, also contained a WebLogic installation and a WebLogic Deploy Tooling installation.\n+\n+   In this use case, we will follow similar steps to the [Initial use case](#initial-use-case) in order to create a new image with an updated application and model, plus deploy the updated model and application to the running [Update1 use case](#update1-use-case) domain.\n+\n+   - Understanding our updated WDT archive.\n+\n+     The updated archive for this use case is in directory `/tmp/mii-sample/archives/archive-v2`. We will use it to create an archive ZIP file for the image. This archive is similar to the `/tmp/mii-sample/archives/archive-v1` from the [Initial use case](#initial-use-case) with the the following differences:\n+     - It includes an updated version of the application in `./wlsdeploy/applications/myapp-v2` (while keeping the original application in directory `./wlsdeploy/applications/myapp-v1`).\n+     - The application in `./wlsdeploy/applications/myapp-v2/myapp_war/index.jsp` contains a single difference from the original application: it changes the line `out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");` to `out.println(\"Hello World! This is version 'v2' of the mii-sample JSP web-app.\");`.\n+\n+     For additional information about archives, see the [Understanding our first archive](#understanding-our-first-archive) section in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Stage a ZIP file of the WDT archive.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths below.\n+\n+     When we create our updated image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v2`. In preparation, we need it to contain a ZIP file of the new WDT application archive.\n+\n+     Run the following commands to create your application archive ZIP file and put it in the expected directory:\n+\n+     ```\n+     # Delete existing archive.zip in case we have an old leftover version\n+     $ rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip\n+\n+     # Move to the directory which contains the source files for our new archive\n+     $ cd /tmp/mii-sample/archives/archive-v2\n+\n+     # Zip the archive to the location will later use when we run the WebLogic Image Tool\n+     $ zip -r /tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip wlsdeploy\n+     ```\n+\n+   - Understanding our staged model files.\n+\n+     The WDT model YAML file and properties for this use case have already been staged for you to directory `/tmp/mii-sample/model-in-image__WLS-v2`. \n+\n+     The `model.10.yaml` file in this directory has an updated path `wlsdeploy/applications/myapp-v2` that references the updated web application in our archive, but is otherwise identical to the model staged for the original image. The final related YAML stanza looks like this:\n+\n+     ```\n+     appDeployments:\n+         Application:\n+             myapp:\n+                 SourcePath: 'wlsdeploy/applications/myapp-v2'\n+                 ModuleType: ear\n+                 Target: 'cluster-1'\n+     ```\n+\n+     If you would like to review the entire original model before this change, see [Staging model files](#staging-model-files) in the [Initial use case](#initial-use-case) within this sample.\n+\n+   - Create a new image from our staged model files using WIT.\n+\n+     > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n+\n+     At this point, we have staged all of the files needed for image `model-in-image:WLS-v2`, they include:\n+\n+     - `/tmp/mii-sample/model-images/weblogic-deploy.zip`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.yaml`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/model.10.properties`\n+     - `/tmp/mii-sample/model-images/model-in-image__WLS-v2/archive.zip`\n+\n+     If you don't see the `weblogic-deploy.zip` file, then it means that you missed a step in the prerequisites.\n+\n+     Now let's use the Image Tool to create an image named `model-in-image:WLS-v2` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+     Run the following commands to create the model image and verify that it worked:\n+\n+     ```\n+     $ cd /tmp/mii-sample/model-images\n+     $ ./imagetool/bin/imagetool.sh update \\\n+       --tag model-in-image:WLS-v2 \\\n+       --fromImage container-registry.oracle.com/middleware/weblogic:12.2.1.4 \\\n+       --wdtModel      ./model-in-image__WLS-v2/model.10.yaml \\\n+       --wdtVariables  ./model-in-image__WLS-v2/model.10.properties \\\n+       --wdtArchive    ./model-in-image__WLS-v2/archive.zip \\\n+       --wdtModelOnly \\\n+       --wdtDomainType WLS\n+     ```\n+\n+     If you don't see the `imagetool` directory, then it means that you missed a step in the prerequisites.\n+\n+     This command runs the WebLogic Image Tool in its Model in Image mode, and does the following:\n+     - Builds the final Docker image as a layer on the `container-registry.oracle.com/middleware/weblogic:12.2.1.4` base image.\n+     - Copies the WDT ZIP file that's referenced in the WIT cache into the image.\n+       - Note that we cached WDT in WIT using the keyword `latest` when we set up the cache during the sample prerequisites steps.\n+       - This lets WIT implicitly assume it's the desired WDT version and removes the need to pass a `-wdtVersion` flag.\n+     - Copies the specified WDT model, properties, and application archives to image location `/u01/wdt/models`.\n+\n+     When the command succeeds, it should end with output like:\n+\n+     ```\n+     [INFO   ] Build successful. Build time=36s. Image tag=model-in-image:WLS-v2\n+     ```\n+\n+     Also, if you run the `docker images` command, then you should see a Docker image named `model-in-image:WLS-v2`.\n+\n+1. Set up and apply a domain resource that is similar to your \"Update1\" use case domain resource but with a different image:\n+\n+   > **Note**: If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the paths, files, and image names below.\n+\n+   - Option 1: Update a copy of your domain resource file from the \"Update1\" use case.\n+\n+     - You might recall that in the [Update1 use case](#update1-use-case) we suggested creating a file named `/tmp/mii-sample/mii-update1.yaml` or using the `/tmp/mii-sample/domain-resources/WLS/mii-update1-d1-WLS-v1-ds.yaml` file that is supplied with the sample.\n+\n+       - We suggest copying this domain resource file and naming the copy `/tmp/mii-sample/mii-update3.yaml` before making any changes.\n+\n+       - Working on a copy is not strictly necessary, but it helps to keep track of your work for the different use cases in this sample and also provides you a backup of your previous work.\n+\n+     - Change the `/tmp/mii-sample/mii-update3.yaml` domain resource `image` field to reference `model-in-image:WLS-v2` instead of `model-in-image:WLS-v1`.\n+\n+        The final result should look something like this:\n+\n+        ```\n+        ...\n+        spec:\n+          ...\n+          image: \"model-in-image:WLS-v2\"\n+        ```\n+\n+      - Apply your changed domain resource:\n+\n+          ```\n+          $ kubectl apply -f /tmp/mii-sample/mii-update3.yaml\n+          ```\n+\n+    - Option 2: Use the updated domain resource file that is supplied with the sample:\n+\n+        ```\n+        $ kubectl apply -f /tmp/miisample/domain-resources/WLS/mii-update3-d1-WLS-v2-ds.yaml\n+        ```\n+\n+\n+1. Wait for the roll to complete.\n+\n+   Now that you've applied a domain resource with an updated image, the operator should automatically rerun the domain's introspector job in order to generate a new domain home, and then should restart ('roll') each of the domain's pods so that they use the new domain home and the new image. You'll need to wait for this roll to complete before we can verify that the new image and its associated new application have been deployed.\n+\n+   - One way to do this is to call `kubectl get pods -n sample-domain1-ns --watch` and wait for the pods to cycle back to their `ready` state.\n+\n+   - Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`. This is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+     {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+   ```\n+     $ ./wl-pod-wait.sh -?\n+\n+       Usage:\n+\n+         wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+            [-p expected_pod_count] \\\n+            [-t timeout_secs] \\\n+            [-q]\n+\n+         Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+       Parameters:\n+\n+         -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+         -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+         pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                           a domain all (a) are ready, (b) have the same\n+                           'domainRestartVersion' label value as the\n+                           current domain resource's 'spec.restartVersion, and\n+                           (c) have the same image as the current domain\n+                           resource's image.\n+\n+         pod_count = 0   : Wait until there are no running WebLogic server pods\n+                           for a domain. The default.\n+\n+         -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+         -q              : Quiet mode. Show only a count of wl pods that\n+                           have reached the desired criteria.\n+\n+         -?              : This help.\n+   ```\n+     {{% /expand%}}\n+\n+     {{%expand \"Click here to expand sample output from `wl-pod-wait.sh` that shows a rolling domain.\" %}}\n+   ```\n+   $ ./wl-pod-wait.sh -n sample-domain1-ns -d sample-domain1 -p 3\n+   \n+   @@ [2020-05-14T17:28:47][seconds=1] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   ready='true'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   image='model-in-image:WLS-v2'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   domainRestartVersion='1'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   namespace='sample-domain1-ns'\n+   @@ [2020-05-14T17:28:47][seconds=1] Info:   domainUID='sample-domain1'\n+   \n+   @@ [2020-05-14T17:28:47][seconds=1] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:28:47][seconds=1] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                                          VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'                 '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-introspect-domain-job-g5kzn'  ''       ''                       ''      'Running'  \n+   'sample-domain1-managed-server1'              '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'              '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:39][seconds=53] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:39][seconds=53] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:50][seconds=64] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:50][seconds=64] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:29:58][seconds=72] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:58][seconds=72] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:29:59][seconds=73] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:29:59][seconds=73] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:30:30][seconds=104] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:30:30][seconds=104] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:31:13][seconds=147] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:13][seconds=147] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '2'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:31:15][seconds=149] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:15][seconds=149] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:31:41][seconds=175] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:41][seconds=175] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:31:42][seconds=176] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:31:42][seconds=176] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'   'Running'  \n+   \n+   @@ [2020-05-14T17:32:21][seconds=215] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:21][seconds=215] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:31][seconds=225] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:31][seconds=225] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '2'      'model-in-image:WLS-v1'  'false'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:40][seconds=234] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:40][seconds=234] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   \n+   @@ [2020-05-14T17:32:51][seconds=245] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:51][seconds=245] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'false'  'Pending'  \n+   \n+   @@ [2020-05-14T17:32:52][seconds=246] Info: '2' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:32:52][seconds=246] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY    PHASE      \n+   --------------------------------  -------  -----------------------  -------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'   'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'false'  'Running'  \n+   \n+   @@ [2020-05-14T17:33:25][seconds=279] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+   @@ [2020-05-14T17:33:25][seconds=279] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+   \n+   NAME                              VERSION  IMAGE                    READY   PHASE      \n+   --------------------------------  -------  -----------------------  ------  ---------  \n+   'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v2'  'true'  'Running'  \n+   \n+   \n+   @@ [2020-05-14T17:33:25][seconds=279] Info: Success!\n+\n+   ```\n+     {{% /expand%}}\n+\n+1. After your domain roll is complete, you can call the sample web application to determine if the updated application was deployed. \n+\n+   When the application is invoked, it should contain an output string like `Hello World! This is version 'v2' of the mii-sample JSP web-app.`.\n+\n+   Send a web application request to the ingress controller:\n+\n+   ```  \n+   $ curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```  \n+\n+   Or, if Traefik is unavailable and your Administration Server pod is running, you can run `kubectl exec`:\n+\n+   ```  \n+   $ kubectl exec -n sample-domain1-ns sample-domain1-admin-server -- bash -c \\\n+     \"curl -s -S -m 10 http://sample-domain1-cluster-cluster-1:8001/myapp_war/index.jsp\"\n+   ```  \n+\n+   You should see something like the following:\n+\n+   {{%expand \"Click here to see the expected web application output.\" %}}", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4MzQ1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426683457", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-18T14:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTA1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r426211056", "bodyText": "where? i didn't find anything", "author": "markxnelson", "createdAt": "2020-05-17T02:52:38Z", "path": "src/integration-tests/model-in-image/README", "diffHunk": "@@ -6,10 +6,11 @@ SUMMARY:\n   This is a stand alone test for running the mii-sample in\n   'kubernetes/samples/scripts/create-weblogic-domain/model-in-image'.\n \n-IMPORTANT NOTES:\n+NOTES:\n \n   (1) This test isn't currently integrated with the test\n-      suite framework. Instructions for doing so are below.\n+      suite framework. See below for potential steps\n+      for doing this future work.", "originalCommit": "d7f7757e84b0a55ff0182f0c04db0066e48959b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MjYyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r428062622", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-05-20T14:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTA1Ng=="}], "type": "inlineReview"}, {"oid": "809aa5a3e61972b014ef8c1ccecacd9e750638c7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/809aa5a3e61972b014ef8c1ccecacd9e750638c7", "message": "mii sample editorial fixes for update2 and update3 use cases", "committedDate": "2020-05-18T14:47:18Z", "type": "commit"}, {"oid": "556532ef9fd3764823606edb3406b89b3fee1599", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/556532ef9fd3764823606edb3406b89b3fee1599", "message": "mii sample editorial fixes for update2 and update3 use cases", "committedDate": "2020-05-18T15:37:13Z", "type": "commit"}, {"oid": "8ee5d07eba197029d77badd02208efa3804367e2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8ee5d07eba197029d77badd02208efa3804367e2", "message": "doc fix", "committedDate": "2020-05-18T15:44:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3ODg5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r427578895", "bodyText": "Found another typo: For more on information ingresses -> For more information on ingresses", "author": "rosemarymarano", "createdAt": "2020-05-19T20:26:48Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -216,14 +239,14 @@ Location | Description |\n \n    - Option 2: Run `kubectl apply -f` on each of the ingress YAML files that are already included in the sample source `/tmp/mii-sample/ingresses` directory:\n \n-   ```\n-   $ cd /tmp/mii-sample/ingresses\n-   $ kubectl apply -f traefik-ingress-sample-domain1-admin-server.yaml\n-   $ kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-1.yaml\n-   $ kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-2.yaml\n-   $ kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-1.yaml\n-   $ kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-2.yaml\n-   ```\n+       ```\n+       $ cd /tmp/mii-sample/ingresses\n+       $ kubectl apply -f traefik-ingress-sample-domain1-admin-server.yaml\n+       $ kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-1.yaml\n+       $ kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-2.yaml\n+       $ kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-1.yaml\n+       $ kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-2.yaml\n+       ```\n \n    > **NOTE**: We give each cluster ingress a different host name that is decorated using both its operator domain UID and its cluster name. This makes each cluster uniquely addressable even when cluster names are the same across different clusters.  When using `curl` to access the WebLogic domain through the ingress, you will need to supply a host name header that matches the host names in the ingress.\n ", "originalCommit": "8ee5d07eba197029d77badd02208efa3804367e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNjc1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1649#discussion_r427626750", "bodyText": "Fixed. Thanks!", "author": "tbarnes-us", "createdAt": "2020-05-19T22:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3ODg5NQ=="}], "type": "inlineReview"}, {"oid": "fa19b56e535fdffb18ca341a122bb0cbb0b85585", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fa19b56e535fdffb18ca341a122bb0cbb0b85585", "message": "MII Sample: Refactor and simplify sample test/generator scripts.", "committedDate": "2020-05-19T22:01:50Z", "type": "commit"}]}