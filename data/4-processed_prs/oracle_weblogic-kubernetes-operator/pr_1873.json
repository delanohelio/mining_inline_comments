{"pr_number": 1873, "pr_title": "Add sample running Oracle WLS Kubernetes Operator on Azure Kubernetes Service", "pr_createdAt": "2020-08-15T20:30:27Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MDg5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471650899", "bodyText": "Unix -> UNIX (Use all capital letters. UNIX is a registered trademark in the US.)", "author": "rosemarymarano", "createdAt": "2020-08-17T17:34:26Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NDczMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471654732", "bodyText": "docker  -> Docker (globally)", "author": "rosemarymarano", "createdAt": "2020-08-17T17:41:51Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NTE2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471655164", "bodyText": "docker id -> Docker ID", "author": "rosemarymarano", "createdAt": "2020-08-17T17:42:48Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NTQxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471655414", "bodyText": "matches value -> matches the value", "author": "rosemarymarano", "createdAt": "2020-08-17T17:43:21Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2NjQxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471666411", "bodyText": "We will use ... script -> We will use the ... script", "author": "rosemarymarano", "createdAt": "2020-08-17T18:03:02Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. Use the configuration file in `~/azure/weblogic-on-aks/cluster-admin-role.yaml` to grant the Helm service account with the permission to install the operator. The following are the contents of `cluster-admin-role.yaml`:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: helm-user-cluster-admin-role\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: cluster-admin\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: kube-system\n+```\n+\n+Grant the Helm service account with the `cluster-admin` role with the following command:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+```\n+\n+You will see this output:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+clusterrolebinding.rbac.authorization.k8s.io/helm-user-cluster-admin-role created\n+```\n+\n+The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+\n+# For helm 2.x, run the following:\n+$ helm init\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator/weblogic-operator --name weblogic-operator --version \"3.0.0\"\n+```\n+\n+The output will show something similar to the following:\n+\n+```bash\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+NAME: weblogic-operator\n+LAST DEPLOYED: Wed Jul  1 23:47:44 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+Verify the operator with the following command; the status will be running.\n+\n+```bash\n+$ kubectl get pods -w\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pods -w\n+NAME                                              READY   STATUS      RESTARTS   AGE\n+weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+```\n+\n+{{% notice tip %}} You will have to press Ctrl-C to exit this command due to the `-w` flag.\n+{{% /notice %}}\n+\n+#### Create WebLogic domain\n+\n+Now that we have created the AKS cluster, installed the operator, and verified that the operator is ready to go, we can have the operator create a WLS domain.\n+\n+1. We will use the `kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh` script to create the domain credentials as a Kubernetes secret.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-credentials\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   ```\n+\n+   The successful output will look similar to the following:\n+\n+   ```bash\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   secret/domain1-weblogic-credentials created\n+   secret/domain1-weblogic-credentials labeled\n+   The secret domain1-weblogic-credentials has been successfully created in the default namespace.\n+    ```\n+\n+2. We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh` script to create the Docker credentials as a Kubernetes secret. Please run:\n+\n+   ```bash\n+   # Please change imagePullSecretNameSuffix if you change pre-defined value \"regcred\" before generating the configuration files.\n+   $ export SECRET_NAME_DOCKER=\"${NAME_PREFIX}regcred\"\n+\n+   #cd kubernetes/samples/scripts/create-kuberetes-secrets\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e <foo@bar.com> -p <myDockerPassword> -u <myDockerUserId> -d container-registry.oracle.com\n+   ```\n+\n+   The following is an example of successful output:\n+\n+   ```bash\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e foo@bar.com -p myDockerPassword -u myDockerUserId\n+   secret/0730regcred created\n+   The secret 0730regcred has been successfully created in the default namespace.\n+   ```\n+\n+   Verify secrets with the following command:\n+\n+   ```bash\n+   $ kubectl get secret\n+   ```\n+\n+   Example output:\n+\n+   ```bash\n+   $ kubectl get secret\n+   NAME                                      TYPE                                  DATA   AGE\n+   0730azure-secret                          Opaque                                2      17m\n+   0730regcred                               kubernetes.io/dockerconfigjson        1      2m25s\n+   default-token-csdvd                       kubernetes.io/service-account-token   3      25m\n+   domain1-weblogic-credentials              Opaque                                2      3m42s\n+   sh.helm.release.v1.weblogic-operator.v1   helm.sh/release.v1                    1      5m41s\n+   weblogic-operator-secrets                 Opaque                                1      5m41s\n+   ```\n+\n+   > **Note**: If the `NAME` column in your output is missing any of the values shown above, please reexamine your execution of the preceding steps in this sample to ensure that you correctly followed all of them.  The `default-token-mwdj8` shown above will have a different ending in your output.\n+\n+3. We will use `kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh` script to create the WLS domain in the persistent volume we created previously.", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2NjY1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471666658", "bodyText": "using script -> using the script", "author": "rosemarymarano", "createdAt": "2020-08-17T18:03:32Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. Use the configuration file in `~/azure/weblogic-on-aks/cluster-admin-role.yaml` to grant the Helm service account with the permission to install the operator. The following are the contents of `cluster-admin-role.yaml`:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: helm-user-cluster-admin-role\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: cluster-admin\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: kube-system\n+```\n+\n+Grant the Helm service account with the `cluster-admin` role with the following command:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+```\n+\n+You will see this output:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+clusterrolebinding.rbac.authorization.k8s.io/helm-user-cluster-admin-role created\n+```\n+\n+The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+\n+# For helm 2.x, run the following:\n+$ helm init\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator/weblogic-operator --name weblogic-operator --version \"3.0.0\"\n+```\n+\n+The output will show something similar to the following:\n+\n+```bash\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+NAME: weblogic-operator\n+LAST DEPLOYED: Wed Jul  1 23:47:44 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+Verify the operator with the following command; the status will be running.\n+\n+```bash\n+$ kubectl get pods -w\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pods -w\n+NAME                                              READY   STATUS      RESTARTS   AGE\n+weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+```\n+\n+{{% notice tip %}} You will have to press Ctrl-C to exit this command due to the `-w` flag.\n+{{% /notice %}}\n+\n+#### Create WebLogic domain\n+\n+Now that we have created the AKS cluster, installed the operator, and verified that the operator is ready to go, we can have the operator create a WLS domain.\n+\n+1. We will use the `kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh` script to create the domain credentials as a Kubernetes secret.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-credentials\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   ```\n+\n+   The successful output will look similar to the following:\n+\n+   ```bash\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   secret/domain1-weblogic-credentials created\n+   secret/domain1-weblogic-credentials labeled\n+   The secret domain1-weblogic-credentials has been successfully created in the default namespace.\n+    ```\n+\n+2. We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh` script to create the Docker credentials as a Kubernetes secret. Please run:\n+\n+   ```bash\n+   # Please change imagePullSecretNameSuffix if you change pre-defined value \"regcred\" before generating the configuration files.\n+   $ export SECRET_NAME_DOCKER=\"${NAME_PREFIX}regcred\"\n+\n+   #cd kubernetes/samples/scripts/create-kuberetes-secrets\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e <foo@bar.com> -p <myDockerPassword> -u <myDockerUserId> -d container-registry.oracle.com\n+   ```\n+\n+   The following is an example of successful output:\n+\n+   ```bash\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e foo@bar.com -p myDockerPassword -u myDockerUserId\n+   secret/0730regcred created\n+   The secret 0730regcred has been successfully created in the default namespace.\n+   ```\n+\n+   Verify secrets with the following command:\n+\n+   ```bash\n+   $ kubectl get secret\n+   ```\n+\n+   Example output:\n+\n+   ```bash\n+   $ kubectl get secret\n+   NAME                                      TYPE                                  DATA   AGE\n+   0730azure-secret                          Opaque                                2      17m\n+   0730regcred                               kubernetes.io/dockerconfigjson        1      2m25s\n+   default-token-csdvd                       kubernetes.io/service-account-token   3      25m\n+   domain1-weblogic-credentials              Opaque                                2      3m42s\n+   sh.helm.release.v1.weblogic-operator.v1   helm.sh/release.v1                    1      5m41s\n+   weblogic-operator-secrets                 Opaque                                1      5m41s\n+   ```\n+\n+   > **Note**: If the `NAME` column in your output is missing any of the values shown above, please reexamine your execution of the preceding steps in this sample to ensure that you correctly followed all of them.  The `default-token-mwdj8` shown above will have a different ending in your output.\n+\n+3. We will use `kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh` script to create the WLS domain in the persistent volume we created previously.\n+\n+   First, we need to set up the domain configuration for the WebLogic domain.  This step uses the configuration generated previously.\n+\n+   Next, validate all the resources created above using script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh`.", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2ODEzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471668131", "bodyText": "admin server -> Administration Server", "author": "rosemarymarano", "createdAt": "2020-08-17T18:06:05Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. Use the configuration file in `~/azure/weblogic-on-aks/cluster-admin-role.yaml` to grant the Helm service account with the permission to install the operator. The following are the contents of `cluster-admin-role.yaml`:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: helm-user-cluster-admin-role\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: cluster-admin\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: kube-system\n+```\n+\n+Grant the Helm service account with the `cluster-admin` role with the following command:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+```\n+\n+You will see this output:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+clusterrolebinding.rbac.authorization.k8s.io/helm-user-cluster-admin-role created\n+```\n+\n+The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+\n+# For helm 2.x, run the following:\n+$ helm init\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator/weblogic-operator --name weblogic-operator --version \"3.0.0\"\n+```\n+\n+The output will show something similar to the following:\n+\n+```bash\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+NAME: weblogic-operator\n+LAST DEPLOYED: Wed Jul  1 23:47:44 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+Verify the operator with the following command; the status will be running.\n+\n+```bash\n+$ kubectl get pods -w\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pods -w\n+NAME                                              READY   STATUS      RESTARTS   AGE\n+weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+```\n+\n+{{% notice tip %}} You will have to press Ctrl-C to exit this command due to the `-w` flag.\n+{{% /notice %}}\n+\n+#### Create WebLogic domain\n+\n+Now that we have created the AKS cluster, installed the operator, and verified that the operator is ready to go, we can have the operator create a WLS domain.\n+\n+1. We will use the `kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh` script to create the domain credentials as a Kubernetes secret.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-credentials\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   ```\n+\n+   The successful output will look similar to the following:\n+\n+   ```bash\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   secret/domain1-weblogic-credentials created\n+   secret/domain1-weblogic-credentials labeled\n+   The secret domain1-weblogic-credentials has been successfully created in the default namespace.\n+    ```\n+\n+2. We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh` script to create the Docker credentials as a Kubernetes secret. Please run:\n+\n+   ```bash\n+   # Please change imagePullSecretNameSuffix if you change pre-defined value \"regcred\" before generating the configuration files.\n+   $ export SECRET_NAME_DOCKER=\"${NAME_PREFIX}regcred\"\n+\n+   #cd kubernetes/samples/scripts/create-kuberetes-secrets\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e <foo@bar.com> -p <myDockerPassword> -u <myDockerUserId> -d container-registry.oracle.com\n+   ```\n+\n+   The following is an example of successful output:\n+\n+   ```bash\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e foo@bar.com -p myDockerPassword -u myDockerUserId\n+   secret/0730regcred created\n+   The secret 0730regcred has been successfully created in the default namespace.\n+   ```\n+\n+   Verify secrets with the following command:\n+\n+   ```bash\n+   $ kubectl get secret\n+   ```\n+\n+   Example output:\n+\n+   ```bash\n+   $ kubectl get secret\n+   NAME                                      TYPE                                  DATA   AGE\n+   0730azure-secret                          Opaque                                2      17m\n+   0730regcred                               kubernetes.io/dockerconfigjson        1      2m25s\n+   default-token-csdvd                       kubernetes.io/service-account-token   3      25m\n+   domain1-weblogic-credentials              Opaque                                2      3m42s\n+   sh.helm.release.v1.weblogic-operator.v1   helm.sh/release.v1                    1      5m41s\n+   weblogic-operator-secrets                 Opaque                                1      5m41s\n+   ```\n+\n+   > **Note**: If the `NAME` column in your output is missing any of the values shown above, please reexamine your execution of the preceding steps in this sample to ensure that you correctly followed all of them.  The `default-token-mwdj8` shown above will have a different ending in your output.\n+\n+3. We will use `kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh` script to create the WLS domain in the persistent volume we created previously.\n+\n+   First, we need to set up the domain configuration for the WebLogic domain.  This step uses the configuration generated previously.\n+\n+   Next, validate all the resources created above using script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh`.\n+   \n+   Use the following commands to check if the resources are ready:\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+   $ ./validate.sh -g ${AKS_PERS_RESOURCE_GROUP} \\\n+      --aks-name ${AKS_CLUSTER_NAME} \\\n+      --file-share ${AKS_PERS_SHARE_NAME} \\\n+      --storage-account ${AKS_PERS_STORAGE_ACCOUNT_NAME} \\\n+      --domain-uid domain1 \\\n+      --pv-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --pvc-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --secret-docker ${SECRET_NAME_DOCKER} \\\n+      --secret-storage ${SECRET_NAME_AZURE_FILE}\n+   ```\n+\n+   You will see output with `PASS` if all the resources are ready. The following is an example of output:\n+\n+   ```text\n+   PASS\n+   You can create your domain with the following resources ready:\n+     Azure resource group: 0730resourcegroup1597391432\n+     Azure Kubenetes Service instacne: 0730aks1597391432\n+     Azure storage account: 0730storage1597391432\n+     Azure file share: 0730-weblogic-1597391432\n+     Kubenetes secret for Azure storage: 0730azure-secret\n+     Kubenetes secret for Docker Account: 0730regcred\n+     Kubenetes secret for Weblogic domain: domain1-weblogic-credentials\n+     Persistent Volume: 0730-azurefile-1597391432\n+     Persistent Volume Claim: 0730-azurefile-1597391432\n+   ```\n+\n+   Now let's ask the operator to create a WebLogic Server domain within the AKS cluster.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   ```\n+\n+   You may observe error-related output during the creation of the domain.  This is due to timing issues during domain creation.  The script accounts for this with a series of retries.  The error output looks similar to the following:\n+\n+   ```text\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   ```\n+   \n+   If you see error messages that include the status `ImagePullBackOff` along with output similar to the following, it is likely your credentials for the Oracle Container Registry have not been successfully conveyed to the AKS cluster.\n+   \n+   ```bash\n+   Failed to pull image \"container-registry.oracle.com/middleware/weblogic:12.2.1.3\": rpc error: code = Unknown desc = Error response from daemon: Get https://container-registry-phx.oracle.com/v2/middleware/weblogic/manifests/12.2.1.3: unauthorized: authentication required\n+   ```\n+   \n+   Ensure the arguments you passed to the script `create-docker-credentials-secret.sh` are correct with respect to your Oracle SSO credentials.\n+\n+   The following example output shows the WebLogic domain was created successfully.\n+\n+   ```bash\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   Input parameters being used\n+   export version=\"create-weblogic-sample-domain-inputs-v1\"\n+   export adminPort=\"7001\"\n+   export adminServerName=\"admin-server\"\n+   export domainUID=\"domain1\"\n+   export domainHome=\"/shared/domains/domain1\"\n+   export serverStartPolicy=\"IF_NEEDED\"\n+   export clusterName=\"cluster-1\"\n+   export configuredManagedServerCount=\"5\"\n+   export initialManagedServerReplicas=\"2\"\n+   export managedServerNameBase=\"managed-server\"\n+   export managedServerPort=\"8001\"\n+   export image=\"store/oracle/weblogic:12.2.1.3\"\n+   export imagePullPolicy=\"IfNotPresent\"\n+   export imagePullSecretName=\"0730regcred\"\n+   export productionModeEnabled=\"true\"\n+   export weblogicCredentialsSecretName=\"domain1-weblogic-credentials\"\n+   export includeServerOutInPodLog=\"true\"\n+   export logHome=\"/shared/logs/domain1\"\n+   export httpAccessLogInLogHome=\"true\"\n+   export t3ChannelPort=\"30012\"\n+   export exposeAdminT3Channel=\"false\"\n+   export adminNodePort=\"30701\"\n+   export exposeAdminNodePort=\"true\"\n+   export namespace=\"default\"\n+   javaOptions=-Dweblogic.StdoutDebugEnabled=false\n+   export persistentVolumeClaimName=\"0730-azurefile-1597391432\"\n+   export domainPVMountPath=\"/shared\"\n+   export createDomainScriptsMountPath=\"/u01/weblogic\"\n+   export createDomainScriptName=\"create-domain-job.sh\"\n+   export createDomainFilesDir=\"wlst\"\n+   export serverPodMemoryRequest=\"768Mi\"\n+   export serverPodCpuRequest=\"250m\"\n+   export istioEnabled=\"false\"\n+   export istioReadinessPort=\"8888\"\n+\n+   Generating /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/delete-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/domain.yaml\n+   Checking to see if the secret domain1-weblogic-credentials exists in namespace default\n+   Checking if the persistent volume claim 0730-azurefile-1597391432 in NameSpace default exists\n+   The persistent volume claim 0730-azurefile-1597391432 already exists in NameSpace default\n+   W0730 07:15:52.866794   53745 helpers.go:535] --dry-run is deprecated and can be replaced with --dry-run=client.\n+   configmap/domain1-create-weblogic-sample-domain-job-cm created\n+   Checking the configmap domain1-create-weblogic-sample-domain-job-cm was created\n+   configmap/domain1-create-weblogic-sample-domain-job-cm labeled\n+   Checking if object type job with name domain1-create-weblogic-sample-domain-job exists\n+   No resources found in default namespace.\n+   Creating the domain by creating the job /home/weblogic/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   job.batch/domain1-create-weblogic-sample-domain-job created\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   status on iteration 3 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Completed\n+   domain.weblogic.oracle/domain1 created\n+\n+   Domain domain1 was created and will be started by the WebLogic Kubernetes Operator\n+\n+   Administration console access is available at http://wlswls1596-0730resourcegrou-685ba0-7434b4f5.hcp.eastus.azmk8s.io:30701/console\n+   The following files were generated:\n+     /home/username/azure/weblogic-domains/domain1/create-domain-inputs.yaml\n+     /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+     /home/username/azure/weblogic-domains/domain1/domain.yaml\n+\n+   Completed\n+   ```\n+\n+   > **Note**: If your output does not show a successful completion, you must\n+   troubleshoot the reason and resolve it before proceeding to the next\n+   step.\n+\n+4. You must create `LoadBalancer` services for the Administration Server and the WLS cluster.  This enables WLS to service requests from outside the AKS cluster.\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/admin-lb.yaml` to create a load balancer service for the Administration Server. The following content is an example of `admin-lb.yaml`, with default domain UID  `domain1`, server name `admin-server`, and default port `7001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-admin-server-external-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 7001\n+       protocol: TCP\n+       targetPort: 7001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.serverName: admin-server\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   service/domain1-admin-server-external-lb created\n+   ```\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/cluster-lb.yaml` to create a load balancer service for the managed servers. The following content is an example of `cluster-lb.yaml`, with default domain UID `domain1`, cluster name `cluster-1`, and default managed server port `8001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-cluster-1-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 8001\n+       protocol: TCP\n+       targetPort: 8001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.clusterName: cluster-1\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl  apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   service/domain1-cluster-1-external-lb created\n+   ```\n+\n+   After a short time, you will see the Administration Server and Managed Servers running. \n+\n+   Use the following command to check server pod status:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   ```\n+\n+   It may take you up to 20 minutes to deploy all pods, please wait and make sure everything is ready. \n+   \n+   You can tail the logs of the admin server with this command:", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2OTE1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471669154", "bodyText": "edit in your copy -> edit your copy", "author": "rosemarymarano", "createdAt": "2020-08-17T18:07:45Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. Use the configuration file in `~/azure/weblogic-on-aks/cluster-admin-role.yaml` to grant the Helm service account with the permission to install the operator. The following are the contents of `cluster-admin-role.yaml`:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: helm-user-cluster-admin-role\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: cluster-admin\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: kube-system\n+```\n+\n+Grant the Helm service account with the `cluster-admin` role with the following command:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+```\n+\n+You will see this output:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+clusterrolebinding.rbac.authorization.k8s.io/helm-user-cluster-admin-role created\n+```\n+\n+The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+\n+# For helm 2.x, run the following:\n+$ helm init\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator/weblogic-operator --name weblogic-operator --version \"3.0.0\"\n+```\n+\n+The output will show something similar to the following:\n+\n+```bash\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+NAME: weblogic-operator\n+LAST DEPLOYED: Wed Jul  1 23:47:44 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+Verify the operator with the following command; the status will be running.\n+\n+```bash\n+$ kubectl get pods -w\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pods -w\n+NAME                                              READY   STATUS      RESTARTS   AGE\n+weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+```\n+\n+{{% notice tip %}} You will have to press Ctrl-C to exit this command due to the `-w` flag.\n+{{% /notice %}}\n+\n+#### Create WebLogic domain\n+\n+Now that we have created the AKS cluster, installed the operator, and verified that the operator is ready to go, we can have the operator create a WLS domain.\n+\n+1. We will use the `kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh` script to create the domain credentials as a Kubernetes secret.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-credentials\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   ```\n+\n+   The successful output will look similar to the following:\n+\n+   ```bash\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   secret/domain1-weblogic-credentials created\n+   secret/domain1-weblogic-credentials labeled\n+   The secret domain1-weblogic-credentials has been successfully created in the default namespace.\n+    ```\n+\n+2. We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh` script to create the Docker credentials as a Kubernetes secret. Please run:\n+\n+   ```bash\n+   # Please change imagePullSecretNameSuffix if you change pre-defined value \"regcred\" before generating the configuration files.\n+   $ export SECRET_NAME_DOCKER=\"${NAME_PREFIX}regcred\"\n+\n+   #cd kubernetes/samples/scripts/create-kuberetes-secrets\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e <foo@bar.com> -p <myDockerPassword> -u <myDockerUserId> -d container-registry.oracle.com\n+   ```\n+\n+   The following is an example of successful output:\n+\n+   ```bash\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e foo@bar.com -p myDockerPassword -u myDockerUserId\n+   secret/0730regcred created\n+   The secret 0730regcred has been successfully created in the default namespace.\n+   ```\n+\n+   Verify secrets with the following command:\n+\n+   ```bash\n+   $ kubectl get secret\n+   ```\n+\n+   Example output:\n+\n+   ```bash\n+   $ kubectl get secret\n+   NAME                                      TYPE                                  DATA   AGE\n+   0730azure-secret                          Opaque                                2      17m\n+   0730regcred                               kubernetes.io/dockerconfigjson        1      2m25s\n+   default-token-csdvd                       kubernetes.io/service-account-token   3      25m\n+   domain1-weblogic-credentials              Opaque                                2      3m42s\n+   sh.helm.release.v1.weblogic-operator.v1   helm.sh/release.v1                    1      5m41s\n+   weblogic-operator-secrets                 Opaque                                1      5m41s\n+   ```\n+\n+   > **Note**: If the `NAME` column in your output is missing any of the values shown above, please reexamine your execution of the preceding steps in this sample to ensure that you correctly followed all of them.  The `default-token-mwdj8` shown above will have a different ending in your output.\n+\n+3. We will use `kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh` script to create the WLS domain in the persistent volume we created previously.\n+\n+   First, we need to set up the domain configuration for the WebLogic domain.  This step uses the configuration generated previously.\n+\n+   Next, validate all the resources created above using script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh`.\n+   \n+   Use the following commands to check if the resources are ready:\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+   $ ./validate.sh -g ${AKS_PERS_RESOURCE_GROUP} \\\n+      --aks-name ${AKS_CLUSTER_NAME} \\\n+      --file-share ${AKS_PERS_SHARE_NAME} \\\n+      --storage-account ${AKS_PERS_STORAGE_ACCOUNT_NAME} \\\n+      --domain-uid domain1 \\\n+      --pv-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --pvc-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --secret-docker ${SECRET_NAME_DOCKER} \\\n+      --secret-storage ${SECRET_NAME_AZURE_FILE}\n+   ```\n+\n+   You will see output with `PASS` if all the resources are ready. The following is an example of output:\n+\n+   ```text\n+   PASS\n+   You can create your domain with the following resources ready:\n+     Azure resource group: 0730resourcegroup1597391432\n+     Azure Kubenetes Service instacne: 0730aks1597391432\n+     Azure storage account: 0730storage1597391432\n+     Azure file share: 0730-weblogic-1597391432\n+     Kubenetes secret for Azure storage: 0730azure-secret\n+     Kubenetes secret for Docker Account: 0730regcred\n+     Kubenetes secret for Weblogic domain: domain1-weblogic-credentials\n+     Persistent Volume: 0730-azurefile-1597391432\n+     Persistent Volume Claim: 0730-azurefile-1597391432\n+   ```\n+\n+   Now let's ask the operator to create a WebLogic Server domain within the AKS cluster.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   ```\n+\n+   You may observe error-related output during the creation of the domain.  This is due to timing issues during domain creation.  The script accounts for this with a series of retries.  The error output looks similar to the following:\n+\n+   ```text\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   ```\n+   \n+   If you see error messages that include the status `ImagePullBackOff` along with output similar to the following, it is likely your credentials for the Oracle Container Registry have not been successfully conveyed to the AKS cluster.\n+   \n+   ```bash\n+   Failed to pull image \"container-registry.oracle.com/middleware/weblogic:12.2.1.3\": rpc error: code = Unknown desc = Error response from daemon: Get https://container-registry-phx.oracle.com/v2/middleware/weblogic/manifests/12.2.1.3: unauthorized: authentication required\n+   ```\n+   \n+   Ensure the arguments you passed to the script `create-docker-credentials-secret.sh` are correct with respect to your Oracle SSO credentials.\n+\n+   The following example output shows the WebLogic domain was created successfully.\n+\n+   ```bash\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   Input parameters being used\n+   export version=\"create-weblogic-sample-domain-inputs-v1\"\n+   export adminPort=\"7001\"\n+   export adminServerName=\"admin-server\"\n+   export domainUID=\"domain1\"\n+   export domainHome=\"/shared/domains/domain1\"\n+   export serverStartPolicy=\"IF_NEEDED\"\n+   export clusterName=\"cluster-1\"\n+   export configuredManagedServerCount=\"5\"\n+   export initialManagedServerReplicas=\"2\"\n+   export managedServerNameBase=\"managed-server\"\n+   export managedServerPort=\"8001\"\n+   export image=\"store/oracle/weblogic:12.2.1.3\"\n+   export imagePullPolicy=\"IfNotPresent\"\n+   export imagePullSecretName=\"0730regcred\"\n+   export productionModeEnabled=\"true\"\n+   export weblogicCredentialsSecretName=\"domain1-weblogic-credentials\"\n+   export includeServerOutInPodLog=\"true\"\n+   export logHome=\"/shared/logs/domain1\"\n+   export httpAccessLogInLogHome=\"true\"\n+   export t3ChannelPort=\"30012\"\n+   export exposeAdminT3Channel=\"false\"\n+   export adminNodePort=\"30701\"\n+   export exposeAdminNodePort=\"true\"\n+   export namespace=\"default\"\n+   javaOptions=-Dweblogic.StdoutDebugEnabled=false\n+   export persistentVolumeClaimName=\"0730-azurefile-1597391432\"\n+   export domainPVMountPath=\"/shared\"\n+   export createDomainScriptsMountPath=\"/u01/weblogic\"\n+   export createDomainScriptName=\"create-domain-job.sh\"\n+   export createDomainFilesDir=\"wlst\"\n+   export serverPodMemoryRequest=\"768Mi\"\n+   export serverPodCpuRequest=\"250m\"\n+   export istioEnabled=\"false\"\n+   export istioReadinessPort=\"8888\"\n+\n+   Generating /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/delete-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/domain.yaml\n+   Checking to see if the secret domain1-weblogic-credentials exists in namespace default\n+   Checking if the persistent volume claim 0730-azurefile-1597391432 in NameSpace default exists\n+   The persistent volume claim 0730-azurefile-1597391432 already exists in NameSpace default\n+   W0730 07:15:52.866794   53745 helpers.go:535] --dry-run is deprecated and can be replaced with --dry-run=client.\n+   configmap/domain1-create-weblogic-sample-domain-job-cm created\n+   Checking the configmap domain1-create-weblogic-sample-domain-job-cm was created\n+   configmap/domain1-create-weblogic-sample-domain-job-cm labeled\n+   Checking if object type job with name domain1-create-weblogic-sample-domain-job exists\n+   No resources found in default namespace.\n+   Creating the domain by creating the job /home/weblogic/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   job.batch/domain1-create-weblogic-sample-domain-job created\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   status on iteration 3 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Completed\n+   domain.weblogic.oracle/domain1 created\n+\n+   Domain domain1 was created and will be started by the WebLogic Kubernetes Operator\n+\n+   Administration console access is available at http://wlswls1596-0730resourcegrou-685ba0-7434b4f5.hcp.eastus.azmk8s.io:30701/console\n+   The following files were generated:\n+     /home/username/azure/weblogic-domains/domain1/create-domain-inputs.yaml\n+     /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+     /home/username/azure/weblogic-domains/domain1/domain.yaml\n+\n+   Completed\n+   ```\n+\n+   > **Note**: If your output does not show a successful completion, you must\n+   troubleshoot the reason and resolve it before proceeding to the next\n+   step.\n+\n+4. You must create `LoadBalancer` services for the Administration Server and the WLS cluster.  This enables WLS to service requests from outside the AKS cluster.\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/admin-lb.yaml` to create a load balancer service for the Administration Server. The following content is an example of `admin-lb.yaml`, with default domain UID  `domain1`, server name `admin-server`, and default port `7001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-admin-server-external-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 7001\n+       protocol: TCP\n+       targetPort: 7001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.serverName: admin-server\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   service/domain1-admin-server-external-lb created\n+   ```\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/cluster-lb.yaml` to create a load balancer service for the managed servers. The following content is an example of `cluster-lb.yaml`, with default domain UID `domain1`, cluster name `cluster-1`, and default managed server port `8001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-cluster-1-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 8001\n+       protocol: TCP\n+       targetPort: 8001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.clusterName: cluster-1\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl  apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   service/domain1-cluster-1-external-lb created\n+   ```\n+\n+   After a short time, you will see the Administration Server and Managed Servers running. \n+\n+   Use the following command to check server pod status:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   ```\n+\n+   It may take you up to 20 minutes to deploy all pods, please wait and make sure everything is ready. \n+   \n+   You can tail the logs of the admin server with this command:\n+   \n+   ```bash\n+   kubectl logs -f domain1-admin-server\n+   ```\n+   \n+   The final example of pod output is as following:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   NAME                                              READY   STATUS      RESTARTS   AGE\n+   domain1-admin-server                              1/1     Running     0          11m\n+   domain1-create-weblogic-sample-domain-job-4l767   0/1     Completed   0          13m\n+   domain1-managed-server1                           1/1     Running     0          3m56s\n+   domain1-managed-server2                           1/1     Running     0          3m56s\n+   weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+   ```\n+   \n+{{% notice tip %}} If Kubernetes advertises the WebLogic pod as `Running` you can be assured the WebLogic Server actually is running because the operator ensures the Kubernetes health checks are actually polling the WebLogic health check mechanism.\n+{{% /notice %}}\n+\n+   Get the addresses of the Administration Server and Managed Servers (please wait for the external IP addresses to be assigned):\n+\n+   ```bash\n+   $ kubectl get svc --watch\n+   ```\n+\n+   The final example of servcie output is as following:\n+\n+   ```bash\n+   $ kubectl get svc --watch\n+   NAME                               TYPE           CLUSTER-IP    EXTERNAL-IP      PORT(S)              AGE\n+   domain1-admin-server               ClusterIP      None          <none>           30012/TCP,7001/TCP   2d20h\n+   domain1-admin-server-external      NodePort       10.0.182.50   <none>           7001:30701/TCP       2d20h\n+   domain1-admin-server-external-lb   LoadBalancer   10.0.67.79    52.188.176.103   7001:32227/TCP       2d20h\n+   domain1-cluster-1-lb               LoadBalancer   10.0.112.43   104.45.176.215   8001:30874/TCP       2d17h\n+   domain1-cluster-cluster-1          ClusterIP      10.0.162.19   <none>           8001/TCP             2d20h\n+   domain1-managed-server1            ClusterIP      None          <none>           8001/TCP             2d20h\n+   domain1-managed-server2            ClusterIP      None          <none>           8001/TCP             2d20h\n+   internal-weblogic-operator-svc     ClusterIP      10.0.192.13   <none>           8082/TCP             2d22h\n+   kubernetes                         ClusterIP      10.0.0.1      <none>           443/TCP              2d22h\n+   ```\n+\n+   In the example, the URL to access the Administration Server is: `http://52.188.176.103:7001/console`.  The default user name for the Administration Console is `weblogic` and the default password is `welcome1`.  Please change this for production deployments.\n+\n+   If the WLS Administration Console is still not available, use `kubectl describe domain` to check domain status.\n+\n+   ```bash\n+   $ kubectl describe domain domain1\n+   ```\n+\n+   Make sure the status of cluster-1 is `ServersReady` and `Available`.\n+\n+   ```yaml\n+   Status:\n+    Clusters:\n+      Cluster Name:      cluster-1\n+      Maximum Replicas:  5\n+      Minimum Replicas:  1\n+      Ready Replicas:    2\n+      Replicas:          2\n+      Replicas Goal:     2\n+    Conditions:\n+      Last Transition Time:  2020-07-06T05:39:32.539Z\n+      Reason:                ServersReady\n+      Status:                True\n+      Type:                  Available\n+    Replicas:                2\n+    Servers:\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    admin-server\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    managed-server1\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    managed-server2\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server3\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server4\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server5\n+   ```\n+\n+#### Automation\n+\n+If you want to automate the above steps from [Create the AKS cluster](#create-the-aks-cluster) onward, you can use the `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` script with the `-e` option. This option applies the YAML files generated by the script.\n+\n+For input values, you can edit `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml` directly, or copy the file and edit in your copy. The following values must be specified:", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2OTQ3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471669479", "bodyText": "id  -> ID (globally)", "author": "rosemarymarano", "createdAt": "2020-08-17T18:08:15Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. Use the configuration file in `~/azure/weblogic-on-aks/cluster-admin-role.yaml` to grant the Helm service account with the permission to install the operator. The following are the contents of `cluster-admin-role.yaml`:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: helm-user-cluster-admin-role\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: cluster-admin\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: kube-system\n+```\n+\n+Grant the Helm service account with the `cluster-admin` role with the following command:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+```\n+\n+You will see this output:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+clusterrolebinding.rbac.authorization.k8s.io/helm-user-cluster-admin-role created\n+```\n+\n+The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+\n+# For helm 2.x, run the following:\n+$ helm init\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator/weblogic-operator --name weblogic-operator --version \"3.0.0\"\n+```\n+\n+The output will show something similar to the following:\n+\n+```bash\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+NAME: weblogic-operator\n+LAST DEPLOYED: Wed Jul  1 23:47:44 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+Verify the operator with the following command; the status will be running.\n+\n+```bash\n+$ kubectl get pods -w\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pods -w\n+NAME                                              READY   STATUS      RESTARTS   AGE\n+weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+```\n+\n+{{% notice tip %}} You will have to press Ctrl-C to exit this command due to the `-w` flag.\n+{{% /notice %}}\n+\n+#### Create WebLogic domain\n+\n+Now that we have created the AKS cluster, installed the operator, and verified that the operator is ready to go, we can have the operator create a WLS domain.\n+\n+1. We will use the `kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh` script to create the domain credentials as a Kubernetes secret.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-credentials\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   ```\n+\n+   The successful output will look similar to the following:\n+\n+   ```bash\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   secret/domain1-weblogic-credentials created\n+   secret/domain1-weblogic-credentials labeled\n+   The secret domain1-weblogic-credentials has been successfully created in the default namespace.\n+    ```\n+\n+2. We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh` script to create the Docker credentials as a Kubernetes secret. Please run:\n+\n+   ```bash\n+   # Please change imagePullSecretNameSuffix if you change pre-defined value \"regcred\" before generating the configuration files.\n+   $ export SECRET_NAME_DOCKER=\"${NAME_PREFIX}regcred\"\n+\n+   #cd kubernetes/samples/scripts/create-kuberetes-secrets\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e <foo@bar.com> -p <myDockerPassword> -u <myDockerUserId> -d container-registry.oracle.com\n+   ```\n+\n+   The following is an example of successful output:\n+\n+   ```bash\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e foo@bar.com -p myDockerPassword -u myDockerUserId\n+   secret/0730regcred created\n+   The secret 0730regcred has been successfully created in the default namespace.\n+   ```\n+\n+   Verify secrets with the following command:\n+\n+   ```bash\n+   $ kubectl get secret\n+   ```\n+\n+   Example output:\n+\n+   ```bash\n+   $ kubectl get secret\n+   NAME                                      TYPE                                  DATA   AGE\n+   0730azure-secret                          Opaque                                2      17m\n+   0730regcred                               kubernetes.io/dockerconfigjson        1      2m25s\n+   default-token-csdvd                       kubernetes.io/service-account-token   3      25m\n+   domain1-weblogic-credentials              Opaque                                2      3m42s\n+   sh.helm.release.v1.weblogic-operator.v1   helm.sh/release.v1                    1      5m41s\n+   weblogic-operator-secrets                 Opaque                                1      5m41s\n+   ```\n+\n+   > **Note**: If the `NAME` column in your output is missing any of the values shown above, please reexamine your execution of the preceding steps in this sample to ensure that you correctly followed all of them.  The `default-token-mwdj8` shown above will have a different ending in your output.\n+\n+3. We will use `kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh` script to create the WLS domain in the persistent volume we created previously.\n+\n+   First, we need to set up the domain configuration for the WebLogic domain.  This step uses the configuration generated previously.\n+\n+   Next, validate all the resources created above using script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh`.\n+   \n+   Use the following commands to check if the resources are ready:\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+   $ ./validate.sh -g ${AKS_PERS_RESOURCE_GROUP} \\\n+      --aks-name ${AKS_CLUSTER_NAME} \\\n+      --file-share ${AKS_PERS_SHARE_NAME} \\\n+      --storage-account ${AKS_PERS_STORAGE_ACCOUNT_NAME} \\\n+      --domain-uid domain1 \\\n+      --pv-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --pvc-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --secret-docker ${SECRET_NAME_DOCKER} \\\n+      --secret-storage ${SECRET_NAME_AZURE_FILE}\n+   ```\n+\n+   You will see output with `PASS` if all the resources are ready. The following is an example of output:\n+\n+   ```text\n+   PASS\n+   You can create your domain with the following resources ready:\n+     Azure resource group: 0730resourcegroup1597391432\n+     Azure Kubenetes Service instacne: 0730aks1597391432\n+     Azure storage account: 0730storage1597391432\n+     Azure file share: 0730-weblogic-1597391432\n+     Kubenetes secret for Azure storage: 0730azure-secret\n+     Kubenetes secret for Docker Account: 0730regcred\n+     Kubenetes secret for Weblogic domain: domain1-weblogic-credentials\n+     Persistent Volume: 0730-azurefile-1597391432\n+     Persistent Volume Claim: 0730-azurefile-1597391432\n+   ```\n+\n+   Now let's ask the operator to create a WebLogic Server domain within the AKS cluster.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   ```\n+\n+   You may observe error-related output during the creation of the domain.  This is due to timing issues during domain creation.  The script accounts for this with a series of retries.  The error output looks similar to the following:\n+\n+   ```text\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   ```\n+   \n+   If you see error messages that include the status `ImagePullBackOff` along with output similar to the following, it is likely your credentials for the Oracle Container Registry have not been successfully conveyed to the AKS cluster.\n+   \n+   ```bash\n+   Failed to pull image \"container-registry.oracle.com/middleware/weblogic:12.2.1.3\": rpc error: code = Unknown desc = Error response from daemon: Get https://container-registry-phx.oracle.com/v2/middleware/weblogic/manifests/12.2.1.3: unauthorized: authentication required\n+   ```\n+   \n+   Ensure the arguments you passed to the script `create-docker-credentials-secret.sh` are correct with respect to your Oracle SSO credentials.\n+\n+   The following example output shows the WebLogic domain was created successfully.\n+\n+   ```bash\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   Input parameters being used\n+   export version=\"create-weblogic-sample-domain-inputs-v1\"\n+   export adminPort=\"7001\"\n+   export adminServerName=\"admin-server\"\n+   export domainUID=\"domain1\"\n+   export domainHome=\"/shared/domains/domain1\"\n+   export serverStartPolicy=\"IF_NEEDED\"\n+   export clusterName=\"cluster-1\"\n+   export configuredManagedServerCount=\"5\"\n+   export initialManagedServerReplicas=\"2\"\n+   export managedServerNameBase=\"managed-server\"\n+   export managedServerPort=\"8001\"\n+   export image=\"store/oracle/weblogic:12.2.1.3\"\n+   export imagePullPolicy=\"IfNotPresent\"\n+   export imagePullSecretName=\"0730regcred\"\n+   export productionModeEnabled=\"true\"\n+   export weblogicCredentialsSecretName=\"domain1-weblogic-credentials\"\n+   export includeServerOutInPodLog=\"true\"\n+   export logHome=\"/shared/logs/domain1\"\n+   export httpAccessLogInLogHome=\"true\"\n+   export t3ChannelPort=\"30012\"\n+   export exposeAdminT3Channel=\"false\"\n+   export adminNodePort=\"30701\"\n+   export exposeAdminNodePort=\"true\"\n+   export namespace=\"default\"\n+   javaOptions=-Dweblogic.StdoutDebugEnabled=false\n+   export persistentVolumeClaimName=\"0730-azurefile-1597391432\"\n+   export domainPVMountPath=\"/shared\"\n+   export createDomainScriptsMountPath=\"/u01/weblogic\"\n+   export createDomainScriptName=\"create-domain-job.sh\"\n+   export createDomainFilesDir=\"wlst\"\n+   export serverPodMemoryRequest=\"768Mi\"\n+   export serverPodCpuRequest=\"250m\"\n+   export istioEnabled=\"false\"\n+   export istioReadinessPort=\"8888\"\n+\n+   Generating /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/delete-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/domain.yaml\n+   Checking to see if the secret domain1-weblogic-credentials exists in namespace default\n+   Checking if the persistent volume claim 0730-azurefile-1597391432 in NameSpace default exists\n+   The persistent volume claim 0730-azurefile-1597391432 already exists in NameSpace default\n+   W0730 07:15:52.866794   53745 helpers.go:535] --dry-run is deprecated and can be replaced with --dry-run=client.\n+   configmap/domain1-create-weblogic-sample-domain-job-cm created\n+   Checking the configmap domain1-create-weblogic-sample-domain-job-cm was created\n+   configmap/domain1-create-weblogic-sample-domain-job-cm labeled\n+   Checking if object type job with name domain1-create-weblogic-sample-domain-job exists\n+   No resources found in default namespace.\n+   Creating the domain by creating the job /home/weblogic/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   job.batch/domain1-create-weblogic-sample-domain-job created\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   status on iteration 3 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Completed\n+   domain.weblogic.oracle/domain1 created\n+\n+   Domain domain1 was created and will be started by the WebLogic Kubernetes Operator\n+\n+   Administration console access is available at http://wlswls1596-0730resourcegrou-685ba0-7434b4f5.hcp.eastus.azmk8s.io:30701/console\n+   The following files were generated:\n+     /home/username/azure/weblogic-domains/domain1/create-domain-inputs.yaml\n+     /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+     /home/username/azure/weblogic-domains/domain1/domain.yaml\n+\n+   Completed\n+   ```\n+\n+   > **Note**: If your output does not show a successful completion, you must\n+   troubleshoot the reason and resolve it before proceeding to the next\n+   step.\n+\n+4. You must create `LoadBalancer` services for the Administration Server and the WLS cluster.  This enables WLS to service requests from outside the AKS cluster.\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/admin-lb.yaml` to create a load balancer service for the Administration Server. The following content is an example of `admin-lb.yaml`, with default domain UID  `domain1`, server name `admin-server`, and default port `7001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-admin-server-external-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 7001\n+       protocol: TCP\n+       targetPort: 7001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.serverName: admin-server\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   service/domain1-admin-server-external-lb created\n+   ```\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/cluster-lb.yaml` to create a load balancer service for the managed servers. The following content is an example of `cluster-lb.yaml`, with default domain UID `domain1`, cluster name `cluster-1`, and default managed server port `8001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-cluster-1-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 8001\n+       protocol: TCP\n+       targetPort: 8001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.clusterName: cluster-1\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl  apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   service/domain1-cluster-1-external-lb created\n+   ```\n+\n+   After a short time, you will see the Administration Server and Managed Servers running. \n+\n+   Use the following command to check server pod status:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   ```\n+\n+   It may take you up to 20 minutes to deploy all pods, please wait and make sure everything is ready. \n+   \n+   You can tail the logs of the admin server with this command:\n+   \n+   ```bash\n+   kubectl logs -f domain1-admin-server\n+   ```\n+   \n+   The final example of pod output is as following:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   NAME                                              READY   STATUS      RESTARTS   AGE\n+   domain1-admin-server                              1/1     Running     0          11m\n+   domain1-create-weblogic-sample-domain-job-4l767   0/1     Completed   0          13m\n+   domain1-managed-server1                           1/1     Running     0          3m56s\n+   domain1-managed-server2                           1/1     Running     0          3m56s\n+   weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+   ```\n+   \n+{{% notice tip %}} If Kubernetes advertises the WebLogic pod as `Running` you can be assured the WebLogic Server actually is running because the operator ensures the Kubernetes health checks are actually polling the WebLogic health check mechanism.\n+{{% /notice %}}\n+\n+   Get the addresses of the Administration Server and Managed Servers (please wait for the external IP addresses to be assigned):\n+\n+   ```bash\n+   $ kubectl get svc --watch\n+   ```\n+\n+   The final example of servcie output is as following:\n+\n+   ```bash\n+   $ kubectl get svc --watch\n+   NAME                               TYPE           CLUSTER-IP    EXTERNAL-IP      PORT(S)              AGE\n+   domain1-admin-server               ClusterIP      None          <none>           30012/TCP,7001/TCP   2d20h\n+   domain1-admin-server-external      NodePort       10.0.182.50   <none>           7001:30701/TCP       2d20h\n+   domain1-admin-server-external-lb   LoadBalancer   10.0.67.79    52.188.176.103   7001:32227/TCP       2d20h\n+   domain1-cluster-1-lb               LoadBalancer   10.0.112.43   104.45.176.215   8001:30874/TCP       2d17h\n+   domain1-cluster-cluster-1          ClusterIP      10.0.162.19   <none>           8001/TCP             2d20h\n+   domain1-managed-server1            ClusterIP      None          <none>           8001/TCP             2d20h\n+   domain1-managed-server2            ClusterIP      None          <none>           8001/TCP             2d20h\n+   internal-weblogic-operator-svc     ClusterIP      10.0.192.13   <none>           8082/TCP             2d22h\n+   kubernetes                         ClusterIP      10.0.0.1      <none>           443/TCP              2d22h\n+   ```\n+\n+   In the example, the URL to access the Administration Server is: `http://52.188.176.103:7001/console`.  The default user name for the Administration Console is `weblogic` and the default password is `welcome1`.  Please change this for production deployments.\n+\n+   If the WLS Administration Console is still not available, use `kubectl describe domain` to check domain status.\n+\n+   ```bash\n+   $ kubectl describe domain domain1\n+   ```\n+\n+   Make sure the status of cluster-1 is `ServersReady` and `Available`.\n+\n+   ```yaml\n+   Status:\n+    Clusters:\n+      Cluster Name:      cluster-1\n+      Maximum Replicas:  5\n+      Minimum Replicas:  1\n+      Ready Replicas:    2\n+      Replicas:          2\n+      Replicas Goal:     2\n+    Conditions:\n+      Last Transition Time:  2020-07-06T05:39:32.539Z\n+      Reason:                ServersReady\n+      Status:                True\n+      Type:                  Available\n+    Replicas:                2\n+    Servers:\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    admin-server\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    managed-server1\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    managed-server2\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server3\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server4\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server5\n+   ```\n+\n+#### Automation\n+\n+If you want to automate the above steps from [Create the AKS cluster](#create-the-aks-cluster) onward, you can use the `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` script with the `-e` option. This option applies the YAML files generated by the script.\n+\n+For input values, you can edit `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml` directly, or copy the file and edit in your copy. The following values must be specified:\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | Application id of your service principal, refer to the application id in [Create Service Principal](#create-service-principal-for-aks) section. |", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY3NDA0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471674045", "bodyText": "the client secret in ... section. -> the client secret in the ... section.\nAlso apply this same correction to the next description.", "author": "rosemarymarano", "createdAt": "2020-08-17T18:16:36Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. Use the configuration file in `~/azure/weblogic-on-aks/cluster-admin-role.yaml` to grant the Helm service account with the permission to install the operator. The following are the contents of `cluster-admin-role.yaml`:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: helm-user-cluster-admin-role\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: cluster-admin\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: kube-system\n+```\n+\n+Grant the Helm service account with the `cluster-admin` role with the following command:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+```\n+\n+You will see this output:\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/cluster-admin-role.yaml\n+clusterrolebinding.rbac.authorization.k8s.io/helm-user-cluster-admin-role created\n+```\n+\n+The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+\n+# For helm 2.x, run the following:\n+$ helm init\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator/weblogic-operator --name weblogic-operator --version \"3.0.0\"\n+```\n+\n+The output will show something similar to the following:\n+\n+```bash\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+NAME: weblogic-operator\n+LAST DEPLOYED: Wed Jul  1 23:47:44 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+Verify the operator with the following command; the status will be running.\n+\n+```bash\n+$ kubectl get pods -w\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pods -w\n+NAME                                              READY   STATUS      RESTARTS   AGE\n+weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+```\n+\n+{{% notice tip %}} You will have to press Ctrl-C to exit this command due to the `-w` flag.\n+{{% /notice %}}\n+\n+#### Create WebLogic domain\n+\n+Now that we have created the AKS cluster, installed the operator, and verified that the operator is ready to go, we can have the operator create a WLS domain.\n+\n+1. We will use the `kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh` script to create the domain credentials as a Kubernetes secret.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-credentials\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   ```\n+\n+   The successful output will look similar to the following:\n+\n+   ```bash\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   secret/domain1-weblogic-credentials created\n+   secret/domain1-weblogic-credentials labeled\n+   The secret domain1-weblogic-credentials has been successfully created in the default namespace.\n+    ```\n+\n+2. We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh` script to create the Docker credentials as a Kubernetes secret. Please run:\n+\n+   ```bash\n+   # Please change imagePullSecretNameSuffix if you change pre-defined value \"regcred\" before generating the configuration files.\n+   $ export SECRET_NAME_DOCKER=\"${NAME_PREFIX}regcred\"\n+\n+   #cd kubernetes/samples/scripts/create-kuberetes-secrets\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e <foo@bar.com> -p <myDockerPassword> -u <myDockerUserId> -d container-registry.oracle.com\n+   ```\n+\n+   The following is an example of successful output:\n+\n+   ```bash\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e foo@bar.com -p myDockerPassword -u myDockerUserId\n+   secret/0730regcred created\n+   The secret 0730regcred has been successfully created in the default namespace.\n+   ```\n+\n+   Verify secrets with the following command:\n+\n+   ```bash\n+   $ kubectl get secret\n+   ```\n+\n+   Example output:\n+\n+   ```bash\n+   $ kubectl get secret\n+   NAME                                      TYPE                                  DATA   AGE\n+   0730azure-secret                          Opaque                                2      17m\n+   0730regcred                               kubernetes.io/dockerconfigjson        1      2m25s\n+   default-token-csdvd                       kubernetes.io/service-account-token   3      25m\n+   domain1-weblogic-credentials              Opaque                                2      3m42s\n+   sh.helm.release.v1.weblogic-operator.v1   helm.sh/release.v1                    1      5m41s\n+   weblogic-operator-secrets                 Opaque                                1      5m41s\n+   ```\n+\n+   > **Note**: If the `NAME` column in your output is missing any of the values shown above, please reexamine your execution of the preceding steps in this sample to ensure that you correctly followed all of them.  The `default-token-mwdj8` shown above will have a different ending in your output.\n+\n+3. We will use `kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh` script to create the WLS domain in the persistent volume we created previously.\n+\n+   First, we need to set up the domain configuration for the WebLogic domain.  This step uses the configuration generated previously.\n+\n+   Next, validate all the resources created above using script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh`.\n+   \n+   Use the following commands to check if the resources are ready:\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+   $ ./validate.sh -g ${AKS_PERS_RESOURCE_GROUP} \\\n+      --aks-name ${AKS_CLUSTER_NAME} \\\n+      --file-share ${AKS_PERS_SHARE_NAME} \\\n+      --storage-account ${AKS_PERS_STORAGE_ACCOUNT_NAME} \\\n+      --domain-uid domain1 \\\n+      --pv-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --pvc-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --secret-docker ${SECRET_NAME_DOCKER} \\\n+      --secret-storage ${SECRET_NAME_AZURE_FILE}\n+   ```\n+\n+   You will see output with `PASS` if all the resources are ready. The following is an example of output:\n+\n+   ```text\n+   PASS\n+   You can create your domain with the following resources ready:\n+     Azure resource group: 0730resourcegroup1597391432\n+     Azure Kubenetes Service instacne: 0730aks1597391432\n+     Azure storage account: 0730storage1597391432\n+     Azure file share: 0730-weblogic-1597391432\n+     Kubenetes secret for Azure storage: 0730azure-secret\n+     Kubenetes secret for Docker Account: 0730regcred\n+     Kubenetes secret for Weblogic domain: domain1-weblogic-credentials\n+     Persistent Volume: 0730-azurefile-1597391432\n+     Persistent Volume Claim: 0730-azurefile-1597391432\n+   ```\n+\n+   Now let's ask the operator to create a WebLogic Server domain within the AKS cluster.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   ```\n+\n+   You may observe error-related output during the creation of the domain.  This is due to timing issues during domain creation.  The script accounts for this with a series of retries.  The error output looks similar to the following:\n+\n+   ```text\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   ```\n+   \n+   If you see error messages that include the status `ImagePullBackOff` along with output similar to the following, it is likely your credentials for the Oracle Container Registry have not been successfully conveyed to the AKS cluster.\n+   \n+   ```bash\n+   Failed to pull image \"container-registry.oracle.com/middleware/weblogic:12.2.1.3\": rpc error: code = Unknown desc = Error response from daemon: Get https://container-registry-phx.oracle.com/v2/middleware/weblogic/manifests/12.2.1.3: unauthorized: authentication required\n+   ```\n+   \n+   Ensure the arguments you passed to the script `create-docker-credentials-secret.sh` are correct with respect to your Oracle SSO credentials.\n+\n+   The following example output shows the WebLogic domain was created successfully.\n+\n+   ```bash\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   Input parameters being used\n+   export version=\"create-weblogic-sample-domain-inputs-v1\"\n+   export adminPort=\"7001\"\n+   export adminServerName=\"admin-server\"\n+   export domainUID=\"domain1\"\n+   export domainHome=\"/shared/domains/domain1\"\n+   export serverStartPolicy=\"IF_NEEDED\"\n+   export clusterName=\"cluster-1\"\n+   export configuredManagedServerCount=\"5\"\n+   export initialManagedServerReplicas=\"2\"\n+   export managedServerNameBase=\"managed-server\"\n+   export managedServerPort=\"8001\"\n+   export image=\"store/oracle/weblogic:12.2.1.3\"\n+   export imagePullPolicy=\"IfNotPresent\"\n+   export imagePullSecretName=\"0730regcred\"\n+   export productionModeEnabled=\"true\"\n+   export weblogicCredentialsSecretName=\"domain1-weblogic-credentials\"\n+   export includeServerOutInPodLog=\"true\"\n+   export logHome=\"/shared/logs/domain1\"\n+   export httpAccessLogInLogHome=\"true\"\n+   export t3ChannelPort=\"30012\"\n+   export exposeAdminT3Channel=\"false\"\n+   export adminNodePort=\"30701\"\n+   export exposeAdminNodePort=\"true\"\n+   export namespace=\"default\"\n+   javaOptions=-Dweblogic.StdoutDebugEnabled=false\n+   export persistentVolumeClaimName=\"0730-azurefile-1597391432\"\n+   export domainPVMountPath=\"/shared\"\n+   export createDomainScriptsMountPath=\"/u01/weblogic\"\n+   export createDomainScriptName=\"create-domain-job.sh\"\n+   export createDomainFilesDir=\"wlst\"\n+   export serverPodMemoryRequest=\"768Mi\"\n+   export serverPodCpuRequest=\"250m\"\n+   export istioEnabled=\"false\"\n+   export istioReadinessPort=\"8888\"\n+\n+   Generating /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/delete-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/domain.yaml\n+   Checking to see if the secret domain1-weblogic-credentials exists in namespace default\n+   Checking if the persistent volume claim 0730-azurefile-1597391432 in NameSpace default exists\n+   The persistent volume claim 0730-azurefile-1597391432 already exists in NameSpace default\n+   W0730 07:15:52.866794   53745 helpers.go:535] --dry-run is deprecated and can be replaced with --dry-run=client.\n+   configmap/domain1-create-weblogic-sample-domain-job-cm created\n+   Checking the configmap domain1-create-weblogic-sample-domain-job-cm was created\n+   configmap/domain1-create-weblogic-sample-domain-job-cm labeled\n+   Checking if object type job with name domain1-create-weblogic-sample-domain-job exists\n+   No resources found in default namespace.\n+   Creating the domain by creating the job /home/weblogic/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   job.batch/domain1-create-weblogic-sample-domain-job created\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   status on iteration 3 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Completed\n+   domain.weblogic.oracle/domain1 created\n+\n+   Domain domain1 was created and will be started by the WebLogic Kubernetes Operator\n+\n+   Administration console access is available at http://wlswls1596-0730resourcegrou-685ba0-7434b4f5.hcp.eastus.azmk8s.io:30701/console\n+   The following files were generated:\n+     /home/username/azure/weblogic-domains/domain1/create-domain-inputs.yaml\n+     /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+     /home/username/azure/weblogic-domains/domain1/domain.yaml\n+\n+   Completed\n+   ```\n+\n+   > **Note**: If your output does not show a successful completion, you must\n+   troubleshoot the reason and resolve it before proceeding to the next\n+   step.\n+\n+4. You must create `LoadBalancer` services for the Administration Server and the WLS cluster.  This enables WLS to service requests from outside the AKS cluster.\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/admin-lb.yaml` to create a load balancer service for the Administration Server. The following content is an example of `admin-lb.yaml`, with default domain UID  `domain1`, server name `admin-server`, and default port `7001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-admin-server-external-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 7001\n+       protocol: TCP\n+       targetPort: 7001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.serverName: admin-server\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   service/domain1-admin-server-external-lb created\n+   ```\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/cluster-lb.yaml` to create a load balancer service for the managed servers. The following content is an example of `cluster-lb.yaml`, with default domain UID `domain1`, cluster name `cluster-1`, and default managed server port `8001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-cluster-1-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 8001\n+       protocol: TCP\n+       targetPort: 8001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.clusterName: cluster-1\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl  apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   service/domain1-cluster-1-external-lb created\n+   ```\n+\n+   After a short time, you will see the Administration Server and Managed Servers running. \n+\n+   Use the following command to check server pod status:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   ```\n+\n+   It may take you up to 20 minutes to deploy all pods, please wait and make sure everything is ready. \n+   \n+   You can tail the logs of the admin server with this command:\n+   \n+   ```bash\n+   kubectl logs -f domain1-admin-server\n+   ```\n+   \n+   The final example of pod output is as following:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   NAME                                              READY   STATUS      RESTARTS   AGE\n+   domain1-admin-server                              1/1     Running     0          11m\n+   domain1-create-weblogic-sample-domain-job-4l767   0/1     Completed   0          13m\n+   domain1-managed-server1                           1/1     Running     0          3m56s\n+   domain1-managed-server2                           1/1     Running     0          3m56s\n+   weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+   ```\n+   \n+{{% notice tip %}} If Kubernetes advertises the WebLogic pod as `Running` you can be assured the WebLogic Server actually is running because the operator ensures the Kubernetes health checks are actually polling the WebLogic health check mechanism.\n+{{% /notice %}}\n+\n+   Get the addresses of the Administration Server and Managed Servers (please wait for the external IP addresses to be assigned):\n+\n+   ```bash\n+   $ kubectl get svc --watch\n+   ```\n+\n+   The final example of servcie output is as following:\n+\n+   ```bash\n+   $ kubectl get svc --watch\n+   NAME                               TYPE           CLUSTER-IP    EXTERNAL-IP      PORT(S)              AGE\n+   domain1-admin-server               ClusterIP      None          <none>           30012/TCP,7001/TCP   2d20h\n+   domain1-admin-server-external      NodePort       10.0.182.50   <none>           7001:30701/TCP       2d20h\n+   domain1-admin-server-external-lb   LoadBalancer   10.0.67.79    52.188.176.103   7001:32227/TCP       2d20h\n+   domain1-cluster-1-lb               LoadBalancer   10.0.112.43   104.45.176.215   8001:30874/TCP       2d17h\n+   domain1-cluster-cluster-1          ClusterIP      10.0.162.19   <none>           8001/TCP             2d20h\n+   domain1-managed-server1            ClusterIP      None          <none>           8001/TCP             2d20h\n+   domain1-managed-server2            ClusterIP      None          <none>           8001/TCP             2d20h\n+   internal-weblogic-operator-svc     ClusterIP      10.0.192.13   <none>           8082/TCP             2d22h\n+   kubernetes                         ClusterIP      10.0.0.1      <none>           443/TCP              2d22h\n+   ```\n+\n+   In the example, the URL to access the Administration Server is: `http://52.188.176.103:7001/console`.  The default user name for the Administration Console is `weblogic` and the default password is `welcome1`.  Please change this for production deployments.\n+\n+   If the WLS Administration Console is still not available, use `kubectl describe domain` to check domain status.\n+\n+   ```bash\n+   $ kubectl describe domain domain1\n+   ```\n+\n+   Make sure the status of cluster-1 is `ServersReady` and `Available`.\n+\n+   ```yaml\n+   Status:\n+    Clusters:\n+      Cluster Name:      cluster-1\n+      Maximum Replicas:  5\n+      Minimum Replicas:  1\n+      Ready Replicas:    2\n+      Replicas:          2\n+      Replicas Goal:     2\n+    Conditions:\n+      Last Transition Time:  2020-07-06T05:39:32.539Z\n+      Reason:                ServersReady\n+      Status:                True\n+      Type:                  Available\n+    Replicas:                2\n+    Servers:\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    admin-server\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    managed-server1\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    managed-server2\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server3\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server4\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server5\n+   ```\n+\n+#### Automation\n+\n+If you want to automate the above steps from [Create the AKS cluster](#create-the-aks-cluster) onward, you can use the `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` script with the `-e` option. This option applies the YAML files generated by the script.\n+\n+For input values, you can edit `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml` directly, or copy the file and edit in your copy. The following values must be specified:\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | Application id of your service principal, refer to the application id in [Create Service Principal](#create-service-principal-for-aks) section. |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | A client secret of your service principal, refer to the client secret in [Create Service Principal](#create-service-principal-for-aks) section. |", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY3NzIxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471677216", "bodyText": "WebLogic Cluster -> WebLogic cluster", "author": "rosemarymarano", "createdAt": "2020-08-17T18:22:56Z", "path": "kubernetes/samples/README.md", "diffHunk": "@@ -16,6 +16,7 @@ While these samples may be useful and usable as is, it is intended that you woul\n * [Sample for configuring the Elasticsearch and Kibana](scripts/elasticsearch-and-kibana/README.md) deployments and services for the operator's logs.\n * [Sample for generating a self-signed certificate and private key](scripts/rest/README.md) that can be used for the operator's external REST API.\n * [Sample for creating an OKE cluster using Terraform](scripts/terraform/README.md).\n+* [Sample for running a WebLogic Cluster on the Azure Kubernetes Service](scripts/create-weblogic-domain-on-azure-kubernetes-service/README.md), and the YAML file for deploying the Azure resources and generated WebLogic domain.", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTc0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471805741", "bodyText": "\"WLS cluster domain\". Remove either \"cluster\" or \"domain\". I think it reads better if you keep \"domain\".", "author": "rjeberhard", "createdAt": "2020-08-17T22:18:50Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwODE2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r471808161", "bodyText": "The instructions here to create a ClusterRoleBinding and to grant the role to a Helm service account are only required for Helm 2.x, which is no longer supported.", "author": "rjeberhard", "createdAt": "2020-08-17T22:25:21Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,996 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS cluster domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, Unix, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your docker id|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. Use the configuration file in `~/azure/weblogic-on-aks/cluster-admin-role.yaml` to grant the Helm service account with the permission to install the operator. The following are the contents of `cluster-admin-role.yaml`:", "originalCommit": "2b19812ec47dc82af0b8803bb3983042bc0561bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NTQxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r472445411", "bodyText": "we will use it to -> we will use it to...?", "author": "rosemarymarano", "createdAt": "2020-08-18T19:58:40Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,966 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, UNIX, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to", "originalCommit": "b1b1c00237fb3bb8289c969706e873e428a62220", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ1NDg4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r472454886", "bodyText": "the application ID in ... section. -> the application ID in the ... section.", "author": "rosemarymarano", "createdAt": "2020-08-18T20:10:50Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,966 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, UNIX, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the Docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your Docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your Docker ID|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches the value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+\n+# For helm 2.x, run the following:\n+$ helm init\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator/weblogic-operator --name weblogic-operator --version \"3.0.0\"\n+```\n+\n+The output will show something similar to the following:\n+\n+```bash\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+NAME: weblogic-operator\n+LAST DEPLOYED: Wed Jul  1 23:47:44 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+Verify the operator with the following command; the status will be running.\n+\n+```bash\n+$ kubectl get pods -w\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pods -w\n+NAME                                              READY   STATUS      RESTARTS   AGE\n+weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+```\n+\n+{{% notice tip %}} You will have to press Ctrl-C to exit this command due to the `-w` flag.\n+{{% /notice %}}\n+\n+#### Create WebLogic domain\n+\n+Now that we have created the AKS cluster, installed the operator, and verified that the operator is ready to go, we can have the operator create a WLS domain.\n+\n+1. We will use the `kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh` script to create the domain credentials as a Kubernetes secret.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-credentials\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   ```\n+\n+   The successful output will look similar to the following:\n+\n+   ```bash\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   secret/domain1-weblogic-credentials created\n+   secret/domain1-weblogic-credentials labeled\n+   The secret domain1-weblogic-credentials has been successfully created in the default namespace.\n+    ```\n+\n+2. We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh` script to create the Docker credentials as a Kubernetes secret. Please run:\n+\n+   ```bash\n+   # Please change imagePullSecretNameSuffix if you change pre-defined value \"regcred\" before generating the configuration files.\n+   $ export SECRET_NAME_DOCKER=\"${NAME_PREFIX}regcred\"\n+\n+   #cd kubernetes/samples/scripts/create-kuberetes-secrets\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e <foo@bar.com> -p <myDockerPassword> -u <myDockerUserId> -d container-registry.oracle.com\n+   ```\n+\n+   The following is an example of successful output:\n+\n+   ```bash\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e foo@bar.com -p myDockerPassword -u myDockerUserId\n+   secret/0730regcred created\n+   The secret 0730regcred has been successfully created in the default namespace.\n+   ```\n+\n+   Verify secrets with the following command:\n+\n+   ```bash\n+   $ kubectl get secret\n+   ```\n+\n+   Example output:\n+\n+   ```bash\n+   $ kubectl get secret\n+   NAME                                      TYPE                                  DATA   AGE\n+   0730azure-secret                          Opaque                                2      17m\n+   0730regcred                               kubernetes.io/dockerconfigjson        1      2m25s\n+   default-token-csdvd                       kubernetes.io/service-account-token   3      25m\n+   domain1-weblogic-credentials              Opaque                                2      3m42s\n+   sh.helm.release.v1.weblogic-operator.v1   helm.sh/release.v1                    1      5m41s\n+   weblogic-operator-secrets                 Opaque                                1      5m41s\n+   ```\n+\n+   > **Note**: If the `NAME` column in your output is missing any of the values shown above, please reexamine your execution of the preceding steps in this sample to ensure that you correctly followed all of them.  The `default-token-mwdj8` shown above will have a different ending in your output.\n+\n+3. We will use the `kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh` script to create the WLS domain in the persistent volume we created previously.\n+\n+   First, we need to set up the domain configuration for the WebLogic domain.  This step uses the configuration generated previously.\n+\n+   Next, validate all the resources created above using script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh`.\n+   \n+   Use the following commands to check if the resources are ready:\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+   $ ./validate.sh -g ${AKS_PERS_RESOURCE_GROUP} \\\n+      --aks-name ${AKS_CLUSTER_NAME} \\\n+      --file-share ${AKS_PERS_SHARE_NAME} \\\n+      --storage-account ${AKS_PERS_STORAGE_ACCOUNT_NAME} \\\n+      --domain-uid domain1 \\\n+      --pv-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --pvc-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --secret-docker ${SECRET_NAME_DOCKER} \\\n+      --secret-storage ${SECRET_NAME_AZURE_FILE}\n+   ```\n+\n+   You will see output with `PASS` if all the resources are ready. The following is an example of output:\n+\n+   ```text\n+   PASS\n+   You can create your domain with the following resources ready:\n+     Azure resource group: 0730resourcegroup1597391432\n+     Azure Kubenetes Service instacne: 0730aks1597391432\n+     Azure storage account: 0730storage1597391432\n+     Azure file share: 0730-weblogic-1597391432\n+     Kubenetes secret for Azure storage: 0730azure-secret\n+     Kubenetes secret for Docker Account: 0730regcred\n+     Kubenetes secret for Weblogic domain: domain1-weblogic-credentials\n+     Persistent Volume: 0730-azurefile-1597391432\n+     Persistent Volume Claim: 0730-azurefile-1597391432\n+   ```\n+\n+   Now let's ask the operator to create a WebLogic Server domain within the AKS cluster.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   ```\n+\n+   You may observe error-related output during the creation of the domain.  This is due to timing issues during domain creation.  The script accounts for this with a series of retries.  The error output looks similar to the following:\n+\n+   ```text\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   ```\n+   \n+   If you see error messages that include the status `ImagePullBackOff` along with output similar to the following, it is likely your credentials for the Oracle Container Registry have not been successfully conveyed to the AKS cluster.\n+   \n+   ```bash\n+   Failed to pull image \"container-registry.oracle.com/middleware/weblogic:12.2.1.3\": rpc error: code = Unknown desc = Error response from daemon: Get https://container-registry-phx.oracle.com/v2/middleware/weblogic/manifests/12.2.1.3: unauthorized: authentication required\n+   ```\n+   \n+   Ensure the arguments you passed to the script `create-docker-credentials-secret.sh` are correct with respect to your Oracle SSO credentials.\n+\n+   The following example output shows the WebLogic domain was created successfully.\n+\n+   ```bash\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   Input parameters being used\n+   export version=\"create-weblogic-sample-domain-inputs-v1\"\n+   export adminPort=\"7001\"\n+   export adminServerName=\"admin-server\"\n+   export domainUID=\"domain1\"\n+   export domainHome=\"/shared/domains/domain1\"\n+   export serverStartPolicy=\"IF_NEEDED\"\n+   export clusterName=\"cluster-1\"\n+   export configuredManagedServerCount=\"5\"\n+   export initialManagedServerReplicas=\"2\"\n+   export managedServerNameBase=\"managed-server\"\n+   export managedServerPort=\"8001\"\n+   export image=\"store/oracle/weblogic:12.2.1.3\"\n+   export imagePullPolicy=\"IfNotPresent\"\n+   export imagePullSecretName=\"0730regcred\"\n+   export productionModeEnabled=\"true\"\n+   export weblogicCredentialsSecretName=\"domain1-weblogic-credentials\"\n+   export includeServerOutInPodLog=\"true\"\n+   export logHome=\"/shared/logs/domain1\"\n+   export httpAccessLogInLogHome=\"true\"\n+   export t3ChannelPort=\"30012\"\n+   export exposeAdminT3Channel=\"false\"\n+   export adminNodePort=\"30701\"\n+   export exposeAdminNodePort=\"true\"\n+   export namespace=\"default\"\n+   javaOptions=-Dweblogic.StdoutDebugEnabled=false\n+   export persistentVolumeClaimName=\"0730-azurefile-1597391432\"\n+   export domainPVMountPath=\"/shared\"\n+   export createDomainScriptsMountPath=\"/u01/weblogic\"\n+   export createDomainScriptName=\"create-domain-job.sh\"\n+   export createDomainFilesDir=\"wlst\"\n+   export serverPodMemoryRequest=\"768Mi\"\n+   export serverPodCpuRequest=\"250m\"\n+   export istioEnabled=\"false\"\n+   export istioReadinessPort=\"8888\"\n+\n+   Generating /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/delete-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/domain.yaml\n+   Checking to see if the secret domain1-weblogic-credentials exists in namespace default\n+   Checking if the persistent volume claim 0730-azurefile-1597391432 in NameSpace default exists\n+   The persistent volume claim 0730-azurefile-1597391432 already exists in NameSpace default\n+   W0730 07:15:52.866794   53745 helpers.go:535] --dry-run is deprecated and can be replaced with --dry-run=client.\n+   configmap/domain1-create-weblogic-sample-domain-job-cm created\n+   Checking the configmap domain1-create-weblogic-sample-domain-job-cm was created\n+   configmap/domain1-create-weblogic-sample-domain-job-cm labeled\n+   Checking if object type job with name domain1-create-weblogic-sample-domain-job exists\n+   No resources found in default namespace.\n+   Creating the domain by creating the job /home/weblogic/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   job.batch/domain1-create-weblogic-sample-domain-job created\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   status on iteration 3 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Completed\n+   domain.weblogic.oracle/domain1 created\n+\n+   Domain domain1 was created and will be started by the WebLogic Kubernetes Operator\n+\n+   Administration console access is available at http://wlswls1596-0730resourcegrou-685ba0-7434b4f5.hcp.eastus.azmk8s.io:30701/console\n+   The following files were generated:\n+     /home/username/azure/weblogic-domains/domain1/create-domain-inputs.yaml\n+     /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+     /home/username/azure/weblogic-domains/domain1/domain.yaml\n+\n+   Completed\n+   ```\n+\n+   > **Note**: If your output does not show a successful completion, you must\n+   troubleshoot the reason and resolve it before proceeding to the next\n+   step.\n+\n+4. You must create `LoadBalancer` services for the Administration Server and the WLS cluster.  This enables WLS to service requests from outside the AKS cluster.\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/admin-lb.yaml` to create a load balancer service for the Administration Server. The following content is an example of `admin-lb.yaml`, with default domain UID  `domain1`, server name `admin-server`, and default port `7001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-admin-server-external-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 7001\n+       protocol: TCP\n+       targetPort: 7001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.serverName: admin-server\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml\n+   service/domain1-admin-server-external-lb created\n+   ```\n+\n+   Use the configuration file in `~/azure/weblogic-on-aks/cluster-lb.yaml` to create a load balancer service for the managed servers. The following content is an example of `cluster-lb.yaml`, with default domain UID `domain1`, cluster name `cluster-1`, and default managed server port `8001`.\n+\n+   ```yaml\n+   apiVersion: v1\n+   kind: Service\n+   metadata:\n+     name: domain1-cluster-1-lb\n+     namespace: default\n+   spec:\n+     ports:\n+     - name: default\n+       port: 8001\n+       protocol: TCP\n+       targetPort: 8001\n+     selector:\n+       weblogic.domainUID: domain1\n+       weblogic.clusterName: cluster-1\n+     sessionAffinity: None\n+     type: LoadBalancer\n+   ```\n+\n+   Create the load balancer service using the following command:\n+\n+   ```bash\n+   $ kubectl apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   ```\n+\n+   You will see the following output:\n+\n+   ```bash\n+   $ kubectl  apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml\n+   service/domain1-cluster-1-external-lb created\n+   ```\n+\n+   After a short time, you will see the Administration Server and Managed Servers running. \n+\n+   Use the following command to check server pod status:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   ```\n+\n+   It may take you up to 20 minutes to deploy all pods, please wait and make sure everything is ready. \n+   \n+   You can tail the logs of the Administration Server with this command:\n+   \n+   ```bash\n+   kubectl logs -f domain1-admin-server\n+   ```\n+   \n+   The final example of pod output is as following:\n+\n+   ```bash\n+   $ kubectl get pods --watch\n+   NAME                                              READY   STATUS      RESTARTS   AGE\n+   domain1-admin-server                              1/1     Running     0          11m\n+   domain1-create-weblogic-sample-domain-job-4l767   0/1     Completed   0          13m\n+   domain1-managed-server1                           1/1     Running     0          3m56s\n+   domain1-managed-server2                           1/1     Running     0          3m56s\n+   weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+   ```\n+   \n+{{% notice tip %}} If Kubernetes advertises the WebLogic pod as `Running` you can be assured the WebLogic Server actually is running because the operator ensures the Kubernetes health checks are actually polling the WebLogic health check mechanism.\n+{{% /notice %}}\n+\n+   Get the addresses of the Administration Server and Managed Servers (please wait for the external IP addresses to be assigned):\n+\n+   ```bash\n+   $ kubectl get svc --watch\n+   ```\n+\n+   The final example of servcie output is as following:\n+\n+   ```bash\n+   $ kubectl get svc --watch\n+   NAME                               TYPE           CLUSTER-IP    EXTERNAL-IP      PORT(S)              AGE\n+   domain1-admin-server               ClusterIP      None          <none>           30012/TCP,7001/TCP   2d20h\n+   domain1-admin-server-external      NodePort       10.0.182.50   <none>           7001:30701/TCP       2d20h\n+   domain1-admin-server-external-lb   LoadBalancer   10.0.67.79    52.188.176.103   7001:32227/TCP       2d20h\n+   domain1-cluster-1-lb               LoadBalancer   10.0.112.43   104.45.176.215   8001:30874/TCP       2d17h\n+   domain1-cluster-cluster-1          ClusterIP      10.0.162.19   <none>           8001/TCP             2d20h\n+   domain1-managed-server1            ClusterIP      None          <none>           8001/TCP             2d20h\n+   domain1-managed-server2            ClusterIP      None          <none>           8001/TCP             2d20h\n+   internal-weblogic-operator-svc     ClusterIP      10.0.192.13   <none>           8082/TCP             2d22h\n+   kubernetes                         ClusterIP      10.0.0.1      <none>           443/TCP              2d22h\n+   ```\n+\n+   In the example, the URL to access the Administration Server is: `http://52.188.176.103:7001/console`.  The default user name for the Administration Console is `weblogic` and the default password is `welcome1`.  Please change this for production deployments.\n+\n+   If the WLS Administration Console is still not available, use `kubectl describe domain` to check domain status.\n+\n+   ```bash\n+   $ kubectl describe domain domain1\n+   ```\n+\n+   Make sure the status of cluster-1 is `ServersReady` and `Available`.\n+\n+   ```yaml\n+   Status:\n+    Clusters:\n+      Cluster Name:      cluster-1\n+      Maximum Replicas:  5\n+      Minimum Replicas:  1\n+      Ready Replicas:    2\n+      Replicas:          2\n+      Replicas Goal:     2\n+    Conditions:\n+      Last Transition Time:  2020-07-06T05:39:32.539Z\n+      Reason:                ServersReady\n+      Status:                True\n+      Type:                  Available\n+    Replicas:                2\n+    Servers:\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    admin-server\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    managed-server1\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  RUNNING\n+      Node Name:      aks-nodepool1-11471722-vmss000001\n+      Server Name:    managed-server2\n+      State:          RUNNING\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server3\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server4\n+      Cluster Name:   cluster-1\n+      Desired State:  SHUTDOWN\n+      Server Name:    managed-server5\n+   ```\n+\n+#### Automation\n+\n+If you want to automate the above steps from [Create the AKS cluster](#create-the-aks-cluster) onward, you can use the `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` script with the `-e` option. This option applies the YAML files generated by the script.\n+\n+For input values, you can edit `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml` directly, or copy the file and edit your copy. The following values must be specified:\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | Application ID of your service principal, refer to the application ID in [Create Service Principal](#create-service-principal-for-aks) section. |", "originalCommit": "b1b1c00237fb3bb8289c969706e873e428a62220", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2Mzg0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r472463840", "bodyText": "For helm 2.x, run the following: -> I think that you can remove these commands because support for Helm 2.x was removed in operator 3.0, https://oracle.github.io/weblogic-kubernetes-operator/release-notes/", "author": "rosemarymarano", "createdAt": "2020-08-18T20:20:55Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,966 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, UNIX, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it to\n+# Specifically we will need the app ID, client secret and tenant ID later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 3 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_D4s_v3 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the Docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your Docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your Docker ID|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches the value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+\n+# For helm 2.x, run the following:", "originalCommit": "b1b1c00237fb3bb8289c969706e873e428a62220", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODg2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r472508861", "bodyText": "Is there a better path for this ?  /samples/ seems to be an odd location", "author": "jshum2479", "createdAt": "2020-08-18T21:40:05Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,966 @@\n+---", "originalCommit": "b1b1c00237fb3bb8289c969706e873e428a62220", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMjcyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r472512721", "bodyText": "Do you have any clean up steps?", "author": "jshum2479", "createdAt": "2020-08-18T21:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NTU2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r472575561", "bodyText": "Is there a better path for this ? /samples/ seems to be an odd location\n\nWell, we want it to show up at this point in the TOC on the left.\n\nWould you like to see it in another place, @jshum2479 ?\n\nDo you have any clean up steps?\n\nGood idea, I'll add that now.", "author": "edburns", "createdAt": "2020-08-19T01:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MTA4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r472581082", "bodyText": "ok, I didn't know that the source dir is organized by \"simple\" as simple samples,  then that's fine for the directory location.", "author": "jshum2479", "createdAt": "2020-08-19T01:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwNjQ4Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r474306487", "bodyText": "Maybe you could point to the Debugging suggestions in the operator documentation https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/debugging/ to help users debug.", "author": "mriccell", "createdAt": "2020-08-20T22:27:36Z", "path": "docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "diffHunk": "@@ -0,0 +1,975 @@\n+---\n+title: \"Azure Kubernetes Service\"\n+date: 2020-07-12T18:22:31-05:00\n+weight: 8\n+description: \"Sample for using the operator to set up a WLS cluster on the Azure Kubernetes Service.\"\n+---\n+\n+This sample demonstrates how to use the [Oracle WebLogic Server Kubernetes Operator](/weblogic-kubernetes-operator/) (hereafter \"the operator\") to set up a WebLogic Server (WLS) cluster on the Azure Kubernetes Service (AKS). After going through the steps, your WLS domain runs on an AKS cluster instance and you can manage your WLS domain by accessing the WebLogic Server Administration Console.\n+\n+AKS is a managed Kubernetes Service that lets you quickly deploy and manage Kubernetes clusters. To learn more, please see the [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/) overview page.\n+\n+#### Contents\n+\n+ - [Prerequisites](#prerequisites)\n+ - [Create the AKS cluster](#create-the-aks-cluster)\n+ - [Create storage and set up file share](#create-storage-and-set-up-file-share)\n+ - [Install WebLogic Server Kubernetes Operator](#install-weblogic-server-kubernetes-operator)\n+ - [Create WebLogic domain](#create-weblogic-domain)\n+ - [Automation](#automation)\n+ - [Deploy sample application](#deploy-sample-application)\n+ - [Access WebLogic Server logs](#access-weblogic-server-logs)\n+ - [Troubleshooting](#troubleshooting)\n+ - [Useful links](#useful-links)\n+\n+#### Prerequisites\n+\n+This sample assumes the following prerequisites.\n+\n+##### Environment for setup\n+\n+This sample assumes one of the following two execution environments:\n+\n+1. Run the commands on your local computer. This allows for the greatest flexibility while requiring some setup effort.\n+1. Run the commands in the Azure Cloud Shell. Cloud Shell is a browser-based utility and runs on the Azure portal. This option may be best for users already familiar with the utility and Azure. It is also suitable for users wanting to avoid installing additional software on their local computer.\n+\n+* Local Environment Setup\n+\n+  * Operating System: Linux, UNIX, macOS or [WSL for Windows 10](https://docs.microsoft.com/windows/wsl/install-win10).\n+  * [Git](https://git-scm.com/downloads), use `git --version` to test if `git` works.  This document was tested with version 2.17.1.\n+  * [Azure CLI](https://docs.microsoft.com/cli/azure), use `az --version` to test if `az` works.  This document was tested with version 2.9.1.\n+  * [kubectl](https://kubernetes-io-vnext-staging.netlify.com/docs/tasks/tools/install-kubectl/), use `kubectl version` to test if `kubectl` works.  This document was tested with version v1.16.3.\n+  * [helm](https://helm.sh/docs/intro/install/), version 3.1 and later, use `helm version` to check the `helm` version.  This document was tested with version v3.2.4.\n+\n+* Azure Cloud Shell\n+\n+  The Azure Cloud Shell already has the necessary prerequisites installed. \n+  To start the Azure Cloud Shell, please go to [Overview of Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/overview).\n+\n+##### Create Service Principal for AKS\n+\n+An AKS cluster requires either an [Azure Active Directory (AD) service principal](https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) or a [managed identity](https://docs.microsoft.com/azure/aks/use-managed-identity) to interact with Azure resources.\n+\n+We will use a service principal to create an AKS cluster. Follow the commands below to create a new service principal.\n+\n+If you run commands in your local environment, please run `az login` first. Skip that command if you run on the Azure Cloud Shell. Do set the subscription you want to work with. You can get a list of your subscriptions by running `az account list`.\n+\n+```bash\n+# Login\n+$ az login\n+\n+# Set your working subscription\n+$ export SUBSCRIPTION_ID=<your-subscription-id>\n+$ az account set -s $SUBSCRIPTION_ID\n+```\n+\n+Create the new service principal with the following commands:\n+\n+```bash\n+# Create Service Principal\n+$ export SP_NAME=myAKSClusterServicePrincipal\n+$ az ad sp create-for-rbac --skip-assignment --name $SP_NAME\n+\n+# Copy the output to a file, we will use it later.\n+```\n+\n+If you see an error similar to the following:\n+\n+```bash\n+Found an existing application instance of \"5pn2s201-nq4q-43n1-z942-p9r9571qr3rp\". We will patch it\n+Insufficient privileges to complete the operation.\n+```\n+\n+The problem may be a pre-existing service principal with the same name.  Either delete the other Service Principal or pick a different name.\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"appId\": \"r3qnq743-61s9-4758-8163-4qpo87s72s54\",\n+  \"displayName\": \"myAKSClusterServicePrincipal\",\n+  \"name\": \"http://myAKSClusterServicePrincipal\",\n+  \"password\": \"TfhR~uOJ1C1ftD5NS_LzJJj6UOjS2OwXfz\",\n+  \"tenant\": \"82sr215n-0ns5-404e-9161-206r0oqyq999\"\n+}\n+```\n+\n+Grant your service principal with a contributor role to create AKS resources.\n+\n+```bash\n+# Use the <appId> from the output of the last command\n+$ export SP_APP_ID=r3qnq743-61s9-4758-8163-4qpo87s72s54\n+$ az role assignment create --assignee $SP_APP_ID --role Contributor\n+```\n+\n+Successful output will look like the following:\n+\n+```json\n+{\n+  \"canDelegate\": null,\n+  \"id\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleAssignments/4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"name\": \"4oq396os-rs95-4n6s-n3qo-sqqpnpo91035\",\n+  \"principalId\": \"952551r8-n129-4on3-oqo9-231n0s6011n3\",\n+  \"principalType\": \"ServicePrincipal\",\n+  \"roleDefinitionId\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9/providers/Microsoft.Authorization/roleDefinitions/o24988np-6180-42n0-no88-20s7382qq24p\",\n+  \"scope\": \"/subscriptions/p7844r91-o11q-4n7s-np6s-996308sopqo9\",\n+}\n+```\n+\n+##### Oracle Container Registry\n+\n+You will need an Oracle account.  Follow the steps at [GET IMAGES](/weblogic-kubernetes-operator/quickstart/get-images/), accepting the license agreement for WebLogic Server in the process.  Make note of your Oracle Account password and email.  This sample pertains to 12.2.1.3, but other\n+versions may work as well.\n+\n+##### Clone WebLogic Server Kubernetes Operator repository\n+\n+Clone this repository to your machine. We will use several scripts in this repository to create a WebLogic domain. This sample was tested with v3.0.0.\n+\n+```bash\n+$ git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+$ git checkout v3.0.0\n+```\n+  \n+{{% notice info %}} The following sections of the sample instructions will guide you, step-by-step, through the process of setting up a WebLogic cluster on AKS - remaining as close as possible to a native Kubernetes experience. This lets you understand and customize each step. If you wish to have a more automated experience that abstracts some lower level details, you can skip to the [Automation](#automation) section.\n+{{% /notice %}}\n+\n+#### Create the AKS cluster\n+\n+This sample requires that you disable http-application-routing by default.  If you want to enable  http_application_routing, please follow [HTTP application routing](https://docs.microsoft.com/azure/aks/http-application-routing).\n+\n+Run the following commands to create the AKS cluster instance.\n+\n+```bash\n+# Change these parameters as needed for your own environment\n+# Specify a prefix to name resources, only allow lowercase letters and numbers, between 1 and 7 characters\n+$ export NAME_PREFIX=0730\n+# Used to generate resource names.\n+$ export TIMESTAMP=`date +%s`\n+$ export AKS_CLUSTER_NAME=\"${NAME_PREFIX}aks${TIMESTAMP}\"\n+$ export AKS_PERS_RESOURCE_GROUP=\"${NAME_PREFIX}resourcegroup${TIMESTAMP}\"\n+$ export AKS_PERS_LOCATION=eastus\n+$ export SP_APP_ID=<appId from the az ad sp create-for-rbac command>\n+$ export SP_CLIENT_SECRET=<password from the az ad sp create-for-rbac command>\n+\n+$ az group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION\n+$ az aks create \\\n+   --resource-group $AKS_PERS_RESOURCE_GROUP \\\n+   --name $AKS_CLUSTER_NAME \\\n+   --node-count 2 \\\n+   --generate-ssh-keys \\\n+   --nodepool-name nodepool1 \\\n+   --node-vm-size Standard_DS2_v2 \\\n+   --location $AKS_PERS_LOCATION \\\n+   --service-principal $SP_APP_ID \\\n+   --client-secret $SP_CLIENT_SECRET\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.ContainerService/ManagedClusters\"`.\n+\n+After the deployment finishes, run the following command to connect to the AKS cluster. This command updates your local `~/.kube/config` so that subsequent `kubectl` commands interact with the named AKS cluster.\n+\n+```bash\n+$ az aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME\n+```\n+\n+Successful output will look similar to:\n+\n+```bash\n+Merged \"0730aks1596087429\" as current context in /home/username/.kube/config\n+```\n+\n+To verify the connection to your cluster, use the `kubectl get` command to return a list of the cluster nodes.\n+\n+```bash\n+$ kubectl get nodes\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get nodes\n+NAME                                STATUS   ROLES   AGE     VERSION\n+aks-nodepool1-15992006-vmss000000   Ready    agent   7m49s   v1.15.11\n+aks-nodepool1-15992006-vmss000001   Ready    agent   7m32s   v1.15.11\n+aks-nodepool1-15992006-vmss000002   Ready    agent   7m52s   v1.15.11\n+```\n+\n+#### Create storage and set up file share\n+\n+Our usage pattern for the operator involves creating Kubernetes \"persistent volumes\" to allow the WebLogic Server to persist its configuration and data separately from the Kubernetes Pods that run WebLogic Server workloads.\n+\n+We will create an external data volume to access and persist data. There are several options for data sharing as described in [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/azure/aks/concepts-storage).\n+\n+We will use Azure Files as a Kubernetes volume. Consult the [Azure Files Documentation](https://docs.microsoft.com/azure/aks/azure-files-volume) for details about this full featured cloud storage solution.\n+\n+First, create a storage account. Note that the storage account name can contain only lowercase letters and numbers, and must be between 3 and 24 characters in length:\n+\n+```bash\n+# Change the value as needed for your own environment\n+$ export AKS_PERS_STORAGE_ACCOUNT_NAME=\"${NAME_PREFIX}storage${TIMESTAMP}\"\n+\n+$ az storage account create \\\n+   -n $AKS_PERS_STORAGE_ACCOUNT_NAME \\\n+   -g $AKS_PERS_RESOURCE_GROUP \\\n+   -l $AKS_PERS_LOCATION \\\n+   --sku Standard_LRS\n+```\n+\n+Successful output will be a JSON object with the entry `\"type\": \"Microsoft.Storage/storageAccounts\"`.\n+\n+Now we need to create a file share. To create the file share, you need a storage connection string. Run the `show-connection-string` command to get connection string, then create the share with `az storage share create`, as shown here.\n+\n+```bash\n+# Change value as needed for your own environment\n+$ export AKS_PERS_SHARE_NAME=\"${NAME_PREFIX}-weblogic-${TIMESTAMP}\"\n+# Get connection string\n+$ export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)\n+# Create file share\n+$ az storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n+```\n+\n+Successful output will be exactly the following:\n+\n+```bash\n+{\n+  \"created\": true\n+}\n+```\n+\n+The operator uses Kubernetes Secrets.  We need a storage key for the secret. These commands query the storage account to obtain the key, and then stores the storage account key as a Kubernetes secret.\n+\n+```bash\n+$ export STORAGE_KEY=$(az storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query \"[0].value\" -o tsv)\n+```\n+\n+Verify the successful output by examining the `STORAGE_KEY` environment variable.  It must not be empty.  It must be a long ASCII string.\n+\n+We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh` script to create the storage account key as a Kubernetes secret, naming the secret with value `${NAME_PREFIX}azure-secret`. Please run:\n+\n+```bash\n+# Please change persistentVolumeClaimNameSuffix if you changed pre-defined value \"regcred\" before generating the configuration files.\n+$ export SECRET_NAME_AZURE_FILE=\"${NAME_PREFIX}azure-secret\"\n+\n+#cd kubernetes/samples/scripts/create-kuberetes-secrets\n+$ ./create-azure-storage-credentials-secret.sh -s $SECRET_NAME_AZURE_FILE -a $AKS_PERS_STORAGE_ACCOUNT_NAME -k $STORAGE_KEY\n+```\n+\n+You will see the following output:\n+\n+```text\n+secret/0730azure-secret created\n+The secret 0730azure-secret has been successfully created in the default namespace.\n+```\n+\n+##### Generate configuration files\n+\n+This sample uses Kubernetes Persistent Volume Claims (PVC) and load balancing to bring WLS to AKS.  These features are expressed to Kubernetes using YAML files.  The script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh` generates the required configuration files automatically, given an input file containing the parameters.  A parameters file is provided at `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml`.  Copy and customize this file for your needs.\n+\n+For example, given the service principal created above, the following values must be substituted in your copy of the input file.\n+\n+| Name in YAML file | Example value | Notes |\n+|-------------------|---------------|-------|\n+| `azureLocation`   | `eastus`      | Must match the value provided for the environment variable `AKS_PERS_LOCATION`. |\n+| `azureServicePrincipalAppId` | `nr086o75-pn59-4782-no5n-nq2op0rsr1q6` | `appId` |\n+| `azureServicePrincipalClientSecret` | `8693089o-q190-45ps-9319-or36252s3s90` | `password` |\n+| `azureServicePrincipalTenantId` | `72s988os-86s1-cafe-babe-2q7pq011qo47` | `tenant` |\n+| `dockerEmail` | `yourDockerEmail` | The email address corresponding to the Docker user name |\n+| `dockerPassword` | `yourDockerPassword`| Your Docker password in clear text |\n+| `dockerUserName` | `yourDockerId` | Your Docker ID|\n+| `namePrefix` | `0730` | Alphanumeric value used as a disambiguation prefix for several Kubernetes resources. Make sure the value matches the value of `${NAME_PREFIX}` to keep names in step-by-step commands the same with those in configuration files. |\n+\n+Use the following command to generate configuration files, assuming the output directory is `~/azure`.  The script will overwrite any files generated by a previous invocation.\n+\n+```bash\n+#cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+$ cp create-domain-on-aks-inputs.yaml my-create-domain-on-aks-inputs.yaml\n+$ ./create-domain-on-aks.sh -i my-create-domain-on-aks-inputs.yaml -o ~/azure -u ${TIMESTAMP}\n+```\n+\n+After running the command, all needed configuration files are generated and output to `~/azure/weblogic-on-aks`:\n+\n+```bash\n+The following files were generated:\n+  /home/username/azure/weblogic-on-aks/pv.yaml\n+  /home/username/azure/weblogic-on-aks/pvc.yaml\n+  /home/username/azure/weblogic-on-aks/admin-lb.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-lb.yaml\n+  /home/username/azure/weblogic-on-aks/domain1.yaml\n+  /home/username/azure/weblogic-on-aks/cluster-admin-role.yaml\n+\n+Completed\n+```\n+\n+{{% notice info %}} Beyond the required and default configurations generated by the command, you can modify the generated YAML files to further customize your deployment. Please consult the [operator documentation]({{< relref \"/userguide/_index.md\" >}}), [AKS documentation](https://docs.microsoft.com/en-us/azure/aks/) and Kubernetes references for further information about customizing your deployment.\n+{{% /notice %}}\n+\n+##### Apply generated configuration files\n+\n+In order to mount the file share as a persistent volume, we have provided a configuration file `pv.yaml`. You can find it in your output directory. The following content is an example that uses the value `0730-weblogic-1597391432` as \"shareName\", `0730azure-secret` as \"secretName\", and the persistent volume name is `0730-azurefile-1597391432`.\n+\n+We will use the initial StorageClasses `azurefile`. If you want to create a new class, follow this document [Create a storage class](https://docs.microsoft.com/en-us/azure/aks/azure-files-dynamic-pv#create-a-storage-class). For more information, see the page [Storage options for applications in Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/concepts-storage#storage-classes).\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolume\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  capacity:\n+    storage: 5Gi\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  azureFile:\n+    secretName: 0730azure-secret\n+    shareName: 0730-weblogic-1597391432\n+    readOnly: false\n+  mountOptions:\n+  - dir_mode=0777\n+  - file_mode=0777\n+  - uid=1000\n+  - gid=1000\n+  - mfsymlinks\n+  - nobrl\n+```\n+\n+We have provided another configuration file `pvc.yaml` for the PersistentVolumeClaim.  Both `pv.yaml` and `pvc.yaml` have exactly the same content for `storageClassName` attributes. This is required. We set the same value to the `metadata` property in both files. The following content is an example that uses the persistent volume claim name `0730-azurefile-1597391432`.\n+\n+```yaml\n+apiVersion: v1\n+kind: PersistentVolumeClaim\n+metadata:\n+  name: 0730-azurefile-1597391432\n+spec:\n+  accessModes:\n+    - ReadWriteMany\n+  storageClassName: azurefile\n+  resources:\n+    requests:\n+      storage: 5Gi\n+```\n+\n+Use the `kubectl` command to create the persistent volume and persistent volume claim.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+```\n+\n+You will see the following output after each command, respectively.\n+\n+```bash\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pv.yaml\n+persistentvolume/0730-azurefile-1597391432 created\n+$ kubectl apply -f ~/azure/weblogic-on-aks/pvc.yaml\n+persistentvolumeclaim/0730-azurefile-1597391432 created\n+```\n+\n+Use the following command to verify:\n+\n+```bash\n+$ kubectl get pv,pvc\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pv,pvc\n+NAME                                          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS   REASON   AGE\n+persistentvolume/0730-azurefile-1597391432   5Gi        RWX            Retain           Bound    default/0730-azurefile-1597391432   azurefile               16m\n+\n+NAME                                               STATUS   VOLUME                       CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/0730-azurefile-1597391432   Bound    0730-azurefile-1597391432   5Gi        RWX            azurefile      16m\n+```\n+\n+> **Note**: Carefully inspect the output and verify it matches the above. `ACCESS MODES`, `CLAIM`, and `STORAGECLASS` are vital.\n+\n+#### Install WebLogic Server Kubernetes Operator into the AKS cluster\n+\n+The Oracle WebLogic Server Kubernetes Operator is an adapter to integrate WebLogic Server and Kubernetes, allowing Kubernetes to serve as a container infrastructure hosting WLS instances.  The operator runs as a Kubernetes Pod and stands ready to perform actions related to running WLS on Kubernetes.\n+\n+Kubernetes Operators use [Helm](https://helm.sh/) to manage Kubernetes applications. The operator\u2019s Helm chart is located in the `kubernetes/charts/weblogic-operator` directory. Please check the Helm version first if you are using the Azure Cloud Shell, and run the corresponding command. This sample was tested with v3.0.0.\n+\n+```bash\n+# Check the helm version\n+$ helm version\n+\n+# For Helm 3.x, run the following:\n+$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts\n+$ helm repo update\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+```\n+\n+The output will show something similar to the following:\n+\n+```bash\n+$ helm install weblogic-operator weblogic-operator/weblogic-operator --version \"3.0.0\"\n+NAME: weblogic-operator\n+LAST DEPLOYED: Wed Jul  1 23:47:44 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+Verify the operator with the following command; the status will be running.\n+\n+```bash\n+$ kubectl get pods -w\n+```\n+\n+Example output:\n+\n+```bash\n+$ kubectl get pods -w\n+NAME                                              READY   STATUS      RESTARTS   AGE\n+weblogic-operator-56654bcdb7-qww7f                1/1     Running     0          25m\n+```\n+\n+{{% notice tip %}} You will have to press Ctrl-C to exit this command due to the `-w` flag.\n+{{% /notice %}}\n+\n+#### Create WebLogic domain\n+\n+Now that we have created the AKS cluster, installed the operator, and verified that the operator is ready to go, we can have the operator create a WLS domain.\n+\n+1. We will use the `kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh` script to create the domain credentials as a Kubernetes secret.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-credentials\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   ```\n+\n+   The successful output will look similar to the following:\n+\n+   ```bash\n+   $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -d domain1\n+   secret/domain1-weblogic-credentials created\n+   secret/domain1-weblogic-credentials labeled\n+   The secret domain1-weblogic-credentials has been successfully created in the default namespace.\n+    ```\n+\n+2. We will use the `kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh` script to create the Docker credentials as a Kubernetes secret. Please run:\n+\n+   ```bash\n+   # Please change imagePullSecretNameSuffix if you change pre-defined value \"regcred\" before generating the configuration files.\n+   $ export SECRET_NAME_DOCKER=\"${NAME_PREFIX}regcred\"\n+\n+   #cd kubernetes/samples/scripts/create-kuberetes-secrets\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e <foo@bar.com> -p <myDockerPassword> -u <myDockerUserId> -d container-registry.oracle.com\n+   ```\n+\n+   The following is an example of successful output:\n+\n+   ```bash\n+   $ ./create-docker-credentials-secret.sh -s ${SECRET_NAME_DOCKER} -e foo@bar.com -p myDockerPassword -u myDockerUserId\n+   secret/0730regcred created\n+   The secret 0730regcred has been successfully created in the default namespace.\n+   ```\n+\n+   Verify secrets with the following command:\n+\n+   ```bash\n+   $ kubectl get secret\n+   ```\n+\n+   Example output:\n+\n+   ```bash\n+   $ kubectl get secret\n+   NAME                                      TYPE                                  DATA   AGE\n+   0730azure-secret                          Opaque                                2      17m\n+   0730regcred                               kubernetes.io/dockerconfigjson        1      2m25s\n+   default-token-csdvd                       kubernetes.io/service-account-token   3      25m\n+   domain1-weblogic-credentials              Opaque                                2      3m42s\n+   sh.helm.release.v1.weblogic-operator.v1   helm.sh/release.v1                    1      5m41s\n+   weblogic-operator-secrets                 Opaque                                1      5m41s\n+   ```\n+\n+   > **Note**: If the `NAME` column in your output is missing any of the values shown above, please reexamine your execution of the preceding steps in this sample to ensure that you correctly followed all of them.  The `default-token-mwdj8` shown above will have a different ending in your output.\n+\n+3. We will use the `kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh` script to create the WLS domain in the persistent volume we created previously.\n+\n+   First, we need to set up the domain configuration for the WebLogic domain.  This step uses the configuration generated previously.\n+\n+   Next, validate all the resources created above using script `kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh`.\n+   \n+   Use the following commands to check if the resources are ready:\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service\n+   $ ./validate.sh -g ${AKS_PERS_RESOURCE_GROUP} \\\n+      --aks-name ${AKS_CLUSTER_NAME} \\\n+      --file-share ${AKS_PERS_SHARE_NAME} \\\n+      --storage-account ${AKS_PERS_STORAGE_ACCOUNT_NAME} \\\n+      --domain-uid domain1 \\\n+      --pv-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --pvc-name ${NAME_PREFIX}-azurefile-${TIMESTAMP} \\\n+      --secret-docker ${SECRET_NAME_DOCKER} \\\n+      --secret-storage ${SECRET_NAME_AZURE_FILE}\n+   ```\n+\n+   You will see output with `PASS` if all the resources are ready. The following is an example of output:\n+\n+   ```text\n+   PASS\n+   You can create your domain with the following resources ready:\n+     Azure resource group: 0730resourcegroup1597391432\n+     Azure Kubenetes Service instacne: 0730aks1597391432\n+     Azure storage account: 0730storage1597391432\n+     Azure file share: 0730-weblogic-1597391432\n+     Kubenetes secret for Azure storage: 0730azure-secret\n+     Kubenetes secret for Docker Account: 0730regcred\n+     Kubenetes secret for Weblogic domain: domain1-weblogic-credentials\n+     Persistent Volume: 0730-azurefile-1597391432\n+     Persistent Volume Claim: 0730-azurefile-1597391432\n+   ```\n+\n+   Now let's ask the operator to create a WebLogic Server domain within the AKS cluster.\n+\n+   ```bash\n+   #cd kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   ```\n+\n+   You may observe error-related output during the creation of the domain.  This is due to timing issues during domain creation.  The script accounts for this with a series of retries.  The error output looks similar to the following:\n+\n+   ```text\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   ```\n+   \n+   If you see error messages that include the status `ImagePullBackOff` along with output similar to the following, it is likely your credentials for the Oracle Container Registry have not been successfully conveyed to the AKS cluster.\n+   \n+   ```bash\n+   Failed to pull image \"container-registry.oracle.com/middleware/weblogic:12.2.1.3\": rpc error: code = Unknown desc = Error response from daemon: Get https://container-registry-phx.oracle.com/v2/middleware/weblogic/manifests/12.2.1.3: unauthorized: authentication required\n+   ```\n+   \n+   Ensure the arguments you passed to the script `create-docker-credentials-secret.sh` are correct with respect to your Oracle SSO credentials.\n+\n+   The following example output shows the WebLogic domain was created successfully.\n+\n+   ```bash\n+   $ ./create-domain.sh -i ~/azure/weblogic-on-aks/domain1.yaml -o ~/azure -e -v\n+   Input parameters being used\n+   export version=\"create-weblogic-sample-domain-inputs-v1\"\n+   export adminPort=\"7001\"\n+   export adminServerName=\"admin-server\"\n+   export domainUID=\"domain1\"\n+   export domainHome=\"/shared/domains/domain1\"\n+   export serverStartPolicy=\"IF_NEEDED\"\n+   export clusterName=\"cluster-1\"\n+   export configuredManagedServerCount=\"5\"\n+   export initialManagedServerReplicas=\"2\"\n+   export managedServerNameBase=\"managed-server\"\n+   export managedServerPort=\"8001\"\n+   export image=\"store/oracle/weblogic:12.2.1.3\"\n+   export imagePullPolicy=\"IfNotPresent\"\n+   export imagePullSecretName=\"0730regcred\"\n+   export productionModeEnabled=\"true\"\n+   export weblogicCredentialsSecretName=\"domain1-weblogic-credentials\"\n+   export includeServerOutInPodLog=\"true\"\n+   export logHome=\"/shared/logs/domain1\"\n+   export httpAccessLogInLogHome=\"true\"\n+   export t3ChannelPort=\"30012\"\n+   export exposeAdminT3Channel=\"false\"\n+   export adminNodePort=\"30701\"\n+   export exposeAdminNodePort=\"true\"\n+   export namespace=\"default\"\n+   javaOptions=-Dweblogic.StdoutDebugEnabled=false\n+   export persistentVolumeClaimName=\"0730-azurefile-1597391432\"\n+   export domainPVMountPath=\"/shared\"\n+   export createDomainScriptsMountPath=\"/u01/weblogic\"\n+   export createDomainScriptName=\"create-domain-job.sh\"\n+   export createDomainFilesDir=\"wlst\"\n+   export serverPodMemoryRequest=\"768Mi\"\n+   export serverPodCpuRequest=\"250m\"\n+   export istioEnabled=\"false\"\n+   export istioReadinessPort=\"8888\"\n+\n+   Generating /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/delete-domain-job.yaml\n+   Generating /home/username/azure/weblogic-domains/domain1/domain.yaml\n+   Checking to see if the secret domain1-weblogic-credentials exists in namespace default\n+   Checking if the persistent volume claim 0730-azurefile-1597391432 in NameSpace default exists\n+   The persistent volume claim 0730-azurefile-1597391432 already exists in NameSpace default\n+   W0730 07:15:52.866794   53745 helpers.go:535] --dry-run is deprecated and can be replaced with --dry-run=client.\n+   configmap/domain1-create-weblogic-sample-domain-job-cm created\n+   Checking the configmap domain1-create-weblogic-sample-domain-job-cm was created\n+   configmap/domain1-create-weblogic-sample-domain-job-cm labeled\n+   Checking if object type job with name domain1-create-weblogic-sample-domain-job exists\n+   No resources found in default namespace.\n+   Creating the domain by creating the job /home/weblogic/azure/weblogic-domains/domain1/create-domain-job.yaml\n+   job.batch/domain1-create-weblogic-sample-domain-job created\n+   Waiting for the job to complete...\n+   Error from server (BadRequest): container \"create-weblogic-sample-domain-job\" in pod \"domain1-create-weblogic-sample-domain-job-4l767\" is waiting to start: PodInitializing\n+   status on iteration 1 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Init:0/1\n+   status on iteration 2 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Running\n+   status on iteration 3 of 20\n+   pod domain1-create-weblogic-sample-domain-job-4l767 status is Completed\n+   domain.weblogic.oracle/domain1 created\n+\n+   Domain domain1 was created and will be started by the WebLogic Kubernetes Operator\n+\n+   Administration console access is available at http://wlswls1596-0730resourcegrou-685ba0-7434b4f5.hcp.eastus.azmk8s.io:30701/console\n+   The following files were generated:\n+     /home/username/azure/weblogic-domains/domain1/create-domain-inputs.yaml\n+     /home/username/azure/weblogic-domains/domain1/create-domain-job.yaml\n+     /home/username/azure/weblogic-domains/domain1/domain.yaml\n+\n+   Completed\n+   ```\n+\n+   > **Note**: If your output does not show a successful completion, you must", "originalCommit": "fb3b3b45cca18bc949f451e3d16806efc1ef4ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxMjI2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r474312268", "bodyText": "The image should come from Oracle Container Registry and not Docker Hub.  Typo checkouted -> checked out", "author": "mriccell", "createdAt": "2020-08-20T22:45:21Z", "path": "kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh", "diffHunk": "@@ -0,0 +1,540 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# Description\n+#  This sample script creates a WebLogic domain home on the Azure Kubernetes Service (AKS). \n+#  It creates a new Azure resource group, with a new Azure Storage Account and Azure File Share to allow WebLogic \n+#  to persist its configuration and data separately from the Kubernetes pods that run WebLogic workloads.\n+#  Besides, it also generates the domain resource yaml files, which can be used to restart the Kubernetes \n+#  artifacts of the corresponding domain.\n+#\n+#  The Azure resource customized by editing create-domain-on-aks-inputs.yaml\n+#  If you also want to customized WebLogic domain configuration, please edit kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml. \n+#  or create a new copy and edit it, specify the file using \"-d <your-domain-inputs.yaml>\".\n+#\n+#  The following pre-requisites must be handled prior to running this script:\n+#    * Environment has set up, with git, azure cli, kubectl and helm installed.\n+#    * The doker hub account must have created, and checkouted Oracle WebLogic Server, we use 12.2.1.3 by default.", "originalCommit": "fb3b3b45cca18bc949f451e3d16806efc1ef4ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxMzM3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r474313375", "bodyText": "WebLogic Server domain", "author": "mriccell", "createdAt": "2020-08-20T22:48:37Z", "path": "kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh", "diffHunk": "@@ -0,0 +1,540 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# Description\n+#  This sample script creates a WebLogic domain home on the Azure Kubernetes Service (AKS). ", "originalCommit": "fb3b3b45cca18bc949f451e3d16806efc1ef4ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxMzgxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r474313817", "bodyText": "WebLogic domain", "author": "mriccell", "createdAt": "2020-08-20T22:49:57Z", "path": "kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh", "diffHunk": "@@ -0,0 +1,540 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# Description\n+#  This sample script creates a WebLogic domain home on the Azure Kubernetes Service (AKS). \n+#  It creates a new Azure resource group, with a new Azure Storage Account and Azure File Share to allow WebLogic \n+#  to persist its configuration and data separately from the Kubernetes pods that run WebLogic workloads.\n+#  Besides, it also generates the domain resource yaml files, which can be used to restart the Kubernetes \n+#  artifacts of the corresponding domain.\n+#\n+#  The Azure resource customized by editing create-domain-on-aks-inputs.yaml\n+#  If you also want to customized WebLogic domain configuration, please edit kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml. \n+#  or create a new copy and edit it, specify the file using \"-d <your-domain-inputs.yaml>\".\n+#\n+#  The following pre-requisites must be handled prior to running this script:\n+#    * Environment has set up, with git, azure cli, kubectl and helm installed.\n+#    * The doker hub account must have created, and checkouted Oracle WebLogic Server, we use 12.2.1.3 by default.\n+#    * The Azure Service Principal must have created, with permission to create AKS.\n+\n+# Initialize\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+source ${scriptDir}/../common/utility.sh\n+source ${scriptDir}/../common/validate.sh\n+\n+function usage {\n+  echo usage: ${script} -i file -o dir [-u uid] [-e] [-d] [-h]\n+  echo \"  -i Parameter inputs file, must be specified.\"\n+  echo \"  -o Output directory for the generated yaml files, must be specified.\"\n+  echo \"  -u UID of resource, used to name file share, persistent valume, and persistent valume claim. \"\n+  echo \"  -e Also create the Azure Kubernetes Service and create WebLogic domain on it using the generated yaml files\"\n+  echo \"  -d Paramters inputs file for creating domain, you can use specifed configuration by changing values of kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml, otherwise, we will use that file by default.\"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+#\n+# Parse the command line options\n+#\n+executeIt=false\n+while getopts \"ehi:o:u:\" opt; do\n+  case $opt in\n+    i) valuesInputFile=\"${OPTARG}\"\n+    ;;\n+    o) outputDir=\"${OPTARG}\"\n+    ;;\n+    u) azureResourceUID=\"${OPTARG}\"\n+    ;;\n+    e) executeIt=true\n+    ;;\n+    d) domainInputFile=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+if [ -z ${valuesInputFile} ]; then\n+  echo \"${script}: -i must be specified.\"\n+  missingRequiredOption=\"true\"\n+fi\n+\n+if [ -z ${outputDir} ]; then\n+  echo \"${script}: -o must be specified.\"\n+  missingRequiredOption=\"true\"\n+fi\n+\n+if [ \"${missingRequiredOption}\" == \"true\" ]; then\n+  usage 1\n+fi\n+\n+if [ -z \"${azureResourceUID}\" ];then \n+  azureResourceUID=`date +%s`\n+fi\n+\n+#\n+# Function to exit and print an error message\n+# $1 - text of message\n+function fail {\n+  echo [ERROR] $*\n+  exit 1\n+}\n+\n+#\n+# Function to initialize and validate the output directory\n+# for the generated yaml files for this domain.\n+#\n+function initOutputDir {\n+  aksOutputDir=\"$outputDir/weblogic-on-aks\"\n+\n+  pvOutput=\"${aksOutputDir}/pv.yaml\"\n+  pvcOutput=\"${aksOutputDir}/pvc.yaml\"\n+  adminLbOutput=\"${aksOutputDir}/admin-lb.yaml\"\n+  clusterLbOutput=\"${aksOutputDir}/cluster-lb.yaml\"\n+  domain1Output=\"${aksOutputDir}/domain1.yaml\"\n+\n+  removeFileIfExists ${pvOutput}\n+  removeFileIfExists ${pvcOutput}\n+  removeFileIfExists ${adminLbOutput}\n+  removeFileIfExists ${clusterLbOutput}\n+  removeFileIfExists ${domain1Output}\n+  removeFileIfExists ${aksOutputDir}/create-domain-on-aks-inputs.yaml\n+}\n+\n+#\n+# Function to setup the environment to run the create Azure resource and domain job\n+#\n+function initialize {\n+\n+  # Validate the required files exist\n+  validateErrors=false\n+\n+  if [ -z \"${valuesInputFile}\" ]; then\n+    validationError \"You must use the -i option to specify the name of the inputs parameter file (a modified copy of kubernetes/samples/scripts/create-weblogic-domain-on-aks/create-domain-on-aks-inputs.yaml).\"\n+  else\n+    if [ ! -f ${valuesInputFile} ]; then\n+      validationError \"Unable to locate the input parameters file ${valuesInputFile}\"\n+    fi\n+  fi\n+\n+  if [ -z \"${outputDir}\" ]; then\n+    validationError \"You must use the -o option to specify the name of an existing directory to store the generated yaml files in.\"\n+  fi\n+\n+  domainPVInput=\"${scriptDir}/azure-file-pv-template.yaml\"\n+  if [ ! -f ${domainPVInput} ]; then\n+    validationError \"The template file ${domainPVInput} for generating a persistent volume was not found\"\n+  fi\n+\n+  domainPVCInput=\"${scriptDir}/azure-file-pvc-template.yaml\"\n+  if [ ! -f ${domainPVCInput} ]; then\n+    validationError \"The template file ${domainPVCInput} for generating a persistent volume claim was not found\"\n+  fi\n+\n+  wlsLbInput=\"${scriptDir}/loadbalancer-template.yaml\"\n+  if [ ! -f ${wlsLbInput} ]; then\n+    validationError \"The template file ${wlsLbInput} for generating load balancer for admin server was not found\"\n+  fi\n+\n+  failIfValidationErrors\n+\n+  # Parse the common inputs file\n+  parseCommonInputs\n+  initOutputDir\n+  failIfValidationErrors\n+\n+  if [ ${#namePrefix} -gt 7 ]; then\n+    fail \"namePrefix is allowed lowercase letters and numbers, between 1 and 7 characters.\"\n+  fi\n+\n+  # Generate Azure resource name\n+  export azureResourceGroupName=\"${namePrefix}resourcegroup${azureResourceUID}\"\n+  export aksClusterName=\"${namePrefix}akscluster${azureResourceUID}\"\n+  export storageAccountName=\"${namePrefix}storage${azureResourceUID}\"\n+\n+  export azureFileShareSecretName=\"${namePrefix}${azureFileShareSecretNameSuffix}\"\n+  export azureKubernetesNodepoolName=\"${azureKubernetesNodepoolNamePrefix}${namePrefix}\"\n+  export azureStorageShareName=\"${namePrefix}-${azureStorageShareNameSuffix}-${azureResourceUID}\"\n+  export imagePullSecretName=\"${namePrefix}${imagePullSecretNameSuffix}\"\n+  export persistentVolumeClaimName=\"${namePrefix}-${persistentVolumeClaimNameSuffix}-${azureResourceUID}\"\n+\n+}\n+\n+#\n+# Function to generate the yaml files for creating Azure resources and weblogic domain", "originalCommit": "fb3b3b45cca18bc949f451e3d16806efc1ef4ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNDAyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r474314022", "bodyText": "WebLogic domain", "author": "mriccell", "createdAt": "2020-08-20T22:50:29Z", "path": "kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh", "diffHunk": "@@ -0,0 +1,540 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# Description\n+#  This sample script creates a WebLogic domain home on the Azure Kubernetes Service (AKS). \n+#  It creates a new Azure resource group, with a new Azure Storage Account and Azure File Share to allow WebLogic \n+#  to persist its configuration and data separately from the Kubernetes pods that run WebLogic workloads.\n+#  Besides, it also generates the domain resource yaml files, which can be used to restart the Kubernetes \n+#  artifacts of the corresponding domain.\n+#\n+#  The Azure resource customized by editing create-domain-on-aks-inputs.yaml\n+#  If you also want to customized WebLogic domain configuration, please edit kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml. \n+#  or create a new copy and edit it, specify the file using \"-d <your-domain-inputs.yaml>\".\n+#\n+#  The following pre-requisites must be handled prior to running this script:\n+#    * Environment has set up, with git, azure cli, kubectl and helm installed.\n+#    * The doker hub account must have created, and checkouted Oracle WebLogic Server, we use 12.2.1.3 by default.\n+#    * The Azure Service Principal must have created, with permission to create AKS.\n+\n+# Initialize\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+source ${scriptDir}/../common/utility.sh\n+source ${scriptDir}/../common/validate.sh\n+\n+function usage {\n+  echo usage: ${script} -i file -o dir [-u uid] [-e] [-d] [-h]\n+  echo \"  -i Parameter inputs file, must be specified.\"\n+  echo \"  -o Output directory for the generated yaml files, must be specified.\"\n+  echo \"  -u UID of resource, used to name file share, persistent valume, and persistent valume claim. \"\n+  echo \"  -e Also create the Azure Kubernetes Service and create WebLogic domain on it using the generated yaml files\"\n+  echo \"  -d Paramters inputs file for creating domain, you can use specifed configuration by changing values of kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml, otherwise, we will use that file by default.\"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+#\n+# Parse the command line options\n+#\n+executeIt=false\n+while getopts \"ehi:o:u:\" opt; do\n+  case $opt in\n+    i) valuesInputFile=\"${OPTARG}\"\n+    ;;\n+    o) outputDir=\"${OPTARG}\"\n+    ;;\n+    u) azureResourceUID=\"${OPTARG}\"\n+    ;;\n+    e) executeIt=true\n+    ;;\n+    d) domainInputFile=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+if [ -z ${valuesInputFile} ]; then\n+  echo \"${script}: -i must be specified.\"\n+  missingRequiredOption=\"true\"\n+fi\n+\n+if [ -z ${outputDir} ]; then\n+  echo \"${script}: -o must be specified.\"\n+  missingRequiredOption=\"true\"\n+fi\n+\n+if [ \"${missingRequiredOption}\" == \"true\" ]; then\n+  usage 1\n+fi\n+\n+if [ -z \"${azureResourceUID}\" ];then \n+  azureResourceUID=`date +%s`\n+fi\n+\n+#\n+# Function to exit and print an error message\n+# $1 - text of message\n+function fail {\n+  echo [ERROR] $*\n+  exit 1\n+}\n+\n+#\n+# Function to initialize and validate the output directory\n+# for the generated yaml files for this domain.\n+#\n+function initOutputDir {\n+  aksOutputDir=\"$outputDir/weblogic-on-aks\"\n+\n+  pvOutput=\"${aksOutputDir}/pv.yaml\"\n+  pvcOutput=\"${aksOutputDir}/pvc.yaml\"\n+  adminLbOutput=\"${aksOutputDir}/admin-lb.yaml\"\n+  clusterLbOutput=\"${aksOutputDir}/cluster-lb.yaml\"\n+  domain1Output=\"${aksOutputDir}/domain1.yaml\"\n+\n+  removeFileIfExists ${pvOutput}\n+  removeFileIfExists ${pvcOutput}\n+  removeFileIfExists ${adminLbOutput}\n+  removeFileIfExists ${clusterLbOutput}\n+  removeFileIfExists ${domain1Output}\n+  removeFileIfExists ${aksOutputDir}/create-domain-on-aks-inputs.yaml\n+}\n+\n+#\n+# Function to setup the environment to run the create Azure resource and domain job\n+#\n+function initialize {\n+\n+  # Validate the required files exist\n+  validateErrors=false\n+\n+  if [ -z \"${valuesInputFile}\" ]; then\n+    validationError \"You must use the -i option to specify the name of the inputs parameter file (a modified copy of kubernetes/samples/scripts/create-weblogic-domain-on-aks/create-domain-on-aks-inputs.yaml).\"\n+  else\n+    if [ ! -f ${valuesInputFile} ]; then\n+      validationError \"Unable to locate the input parameters file ${valuesInputFile}\"\n+    fi\n+  fi\n+\n+  if [ -z \"${outputDir}\" ]; then\n+    validationError \"You must use the -o option to specify the name of an existing directory to store the generated yaml files in.\"\n+  fi\n+\n+  domainPVInput=\"${scriptDir}/azure-file-pv-template.yaml\"\n+  if [ ! -f ${domainPVInput} ]; then\n+    validationError \"The template file ${domainPVInput} for generating a persistent volume was not found\"\n+  fi\n+\n+  domainPVCInput=\"${scriptDir}/azure-file-pvc-template.yaml\"\n+  if [ ! -f ${domainPVCInput} ]; then\n+    validationError \"The template file ${domainPVCInput} for generating a persistent volume claim was not found\"\n+  fi\n+\n+  wlsLbInput=\"${scriptDir}/loadbalancer-template.yaml\"\n+  if [ ! -f ${wlsLbInput} ]; then\n+    validationError \"The template file ${wlsLbInput} for generating load balancer for admin server was not found\"\n+  fi\n+\n+  failIfValidationErrors\n+\n+  # Parse the common inputs file\n+  parseCommonInputs\n+  initOutputDir\n+  failIfValidationErrors\n+\n+  if [ ${#namePrefix} -gt 7 ]; then\n+    fail \"namePrefix is allowed lowercase letters and numbers, between 1 and 7 characters.\"\n+  fi\n+\n+  # Generate Azure resource name\n+  export azureResourceGroupName=\"${namePrefix}resourcegroup${azureResourceUID}\"\n+  export aksClusterName=\"${namePrefix}akscluster${azureResourceUID}\"\n+  export storageAccountName=\"${namePrefix}storage${azureResourceUID}\"\n+\n+  export azureFileShareSecretName=\"${namePrefix}${azureFileShareSecretNameSuffix}\"\n+  export azureKubernetesNodepoolName=\"${azureKubernetesNodepoolNamePrefix}${namePrefix}\"\n+  export azureStorageShareName=\"${namePrefix}-${azureStorageShareNameSuffix}-${azureResourceUID}\"\n+  export imagePullSecretName=\"${namePrefix}${imagePullSecretNameSuffix}\"\n+  export persistentVolumeClaimName=\"${namePrefix}-${persistentVolumeClaimNameSuffix}-${azureResourceUID}\"\n+\n+}\n+\n+#\n+# Function to generate the yaml files for creating Azure resources and weblogic domain\n+#\n+function createYamlFiles {\n+\n+  # Create a directory for this domain's output files\n+  mkdir -p ${aksOutputDir}\n+\n+  # Make sure the output directory has a copy of the inputs file.\n+  # The user can either pre-create the output directory, put the inputs\n+  # file there, and create the domain from it, or the user can put the\n+  # inputs file some place else and let this script create the output directory\n+  # (if needed) and copy the inputs file there.\n+  copyInputsFileToOutputDirectory ${valuesInputFile} \"${aksOutputDir}/create-domain-on-aks-inputs.yaml\"\n+\n+  echo Generating ${pvOutput}\n+\n+  cp ${domainPVInput} ${pvOutput}\n+  sed -i -e \"s:%PERSISTENT_VOLUME_NAME%:${persistentVolumeClaimName}:g\" ${pvOutput}\n+  sed -i -e \"s:%AZURE_FILE_SHARE_SECRET_NAME%:${azureFileShareSecretName}:g\" ${pvOutput}\n+  sed -i -e \"s:%AZURE_FILE_SHARE_NAME%:${azureStorageShareName}:g\" ${pvOutput}\n+  sed -i -e \"s:%STORAGE_CLASS_NAME%:${azureStorageClassName}:g\" ${pvOutput}\n+\n+  # Generate the yaml to create the persistent volume claim\n+  echo Generating ${pvcOutput}\n+\n+  cp ${domainPVCInput} ${pvcOutput}\n+  sed -i -e \"s:%PERSISTENT_VOLUME_CLAIM_NAME%:${persistentVolumeClaimName}:g\" ${pvcOutput}\n+  sed -i -e \"s:%STORAGE_CLASS_NAME%:${azureStorageClassName}:g\" ${pvcOutput}\n+\n+  # Generate the yaml to create weblogic domain.", "originalCommit": "fb3b3b45cca18bc949f451e3d16806efc1ef4ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNDMzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r474314336", "bodyText": "Administration Server", "author": "mriccell", "createdAt": "2020-08-20T22:51:35Z", "path": "kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh", "diffHunk": "@@ -0,0 +1,540 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# Description\n+#  This sample script creates a WebLogic domain home on the Azure Kubernetes Service (AKS). \n+#  It creates a new Azure resource group, with a new Azure Storage Account and Azure File Share to allow WebLogic \n+#  to persist its configuration and data separately from the Kubernetes pods that run WebLogic workloads.\n+#  Besides, it also generates the domain resource yaml files, which can be used to restart the Kubernetes \n+#  artifacts of the corresponding domain.\n+#\n+#  The Azure resource customized by editing create-domain-on-aks-inputs.yaml\n+#  If you also want to customized WebLogic domain configuration, please edit kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml. \n+#  or create a new copy and edit it, specify the file using \"-d <your-domain-inputs.yaml>\".\n+#\n+#  The following pre-requisites must be handled prior to running this script:\n+#    * Environment has set up, with git, azure cli, kubectl and helm installed.\n+#    * The doker hub account must have created, and checkouted Oracle WebLogic Server, we use 12.2.1.3 by default.\n+#    * The Azure Service Principal must have created, with permission to create AKS.\n+\n+# Initialize\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+source ${scriptDir}/../common/utility.sh\n+source ${scriptDir}/../common/validate.sh\n+\n+function usage {\n+  echo usage: ${script} -i file -o dir [-u uid] [-e] [-d] [-h]\n+  echo \"  -i Parameter inputs file, must be specified.\"\n+  echo \"  -o Output directory for the generated yaml files, must be specified.\"\n+  echo \"  -u UID of resource, used to name file share, persistent valume, and persistent valume claim. \"\n+  echo \"  -e Also create the Azure Kubernetes Service and create WebLogic domain on it using the generated yaml files\"\n+  echo \"  -d Paramters inputs file for creating domain, you can use specifed configuration by changing values of kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml, otherwise, we will use that file by default.\"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+#\n+# Parse the command line options\n+#\n+executeIt=false\n+while getopts \"ehi:o:u:\" opt; do\n+  case $opt in\n+    i) valuesInputFile=\"${OPTARG}\"\n+    ;;\n+    o) outputDir=\"${OPTARG}\"\n+    ;;\n+    u) azureResourceUID=\"${OPTARG}\"\n+    ;;\n+    e) executeIt=true\n+    ;;\n+    d) domainInputFile=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+if [ -z ${valuesInputFile} ]; then\n+  echo \"${script}: -i must be specified.\"\n+  missingRequiredOption=\"true\"\n+fi\n+\n+if [ -z ${outputDir} ]; then\n+  echo \"${script}: -o must be specified.\"\n+  missingRequiredOption=\"true\"\n+fi\n+\n+if [ \"${missingRequiredOption}\" == \"true\" ]; then\n+  usage 1\n+fi\n+\n+if [ -z \"${azureResourceUID}\" ];then \n+  azureResourceUID=`date +%s`\n+fi\n+\n+#\n+# Function to exit and print an error message\n+# $1 - text of message\n+function fail {\n+  echo [ERROR] $*\n+  exit 1\n+}\n+\n+#\n+# Function to initialize and validate the output directory\n+# for the generated yaml files for this domain.\n+#\n+function initOutputDir {\n+  aksOutputDir=\"$outputDir/weblogic-on-aks\"\n+\n+  pvOutput=\"${aksOutputDir}/pv.yaml\"\n+  pvcOutput=\"${aksOutputDir}/pvc.yaml\"\n+  adminLbOutput=\"${aksOutputDir}/admin-lb.yaml\"\n+  clusterLbOutput=\"${aksOutputDir}/cluster-lb.yaml\"\n+  domain1Output=\"${aksOutputDir}/domain1.yaml\"\n+\n+  removeFileIfExists ${pvOutput}\n+  removeFileIfExists ${pvcOutput}\n+  removeFileIfExists ${adminLbOutput}\n+  removeFileIfExists ${clusterLbOutput}\n+  removeFileIfExists ${domain1Output}\n+  removeFileIfExists ${aksOutputDir}/create-domain-on-aks-inputs.yaml\n+}\n+\n+#\n+# Function to setup the environment to run the create Azure resource and domain job\n+#\n+function initialize {\n+\n+  # Validate the required files exist\n+  validateErrors=false\n+\n+  if [ -z \"${valuesInputFile}\" ]; then\n+    validationError \"You must use the -i option to specify the name of the inputs parameter file (a modified copy of kubernetes/samples/scripts/create-weblogic-domain-on-aks/create-domain-on-aks-inputs.yaml).\"\n+  else\n+    if [ ! -f ${valuesInputFile} ]; then\n+      validationError \"Unable to locate the input parameters file ${valuesInputFile}\"\n+    fi\n+  fi\n+\n+  if [ -z \"${outputDir}\" ]; then\n+    validationError \"You must use the -o option to specify the name of an existing directory to store the generated yaml files in.\"\n+  fi\n+\n+  domainPVInput=\"${scriptDir}/azure-file-pv-template.yaml\"\n+  if [ ! -f ${domainPVInput} ]; then\n+    validationError \"The template file ${domainPVInput} for generating a persistent volume was not found\"\n+  fi\n+\n+  domainPVCInput=\"${scriptDir}/azure-file-pvc-template.yaml\"\n+  if [ ! -f ${domainPVCInput} ]; then\n+    validationError \"The template file ${domainPVCInput} for generating a persistent volume claim was not found\"\n+  fi\n+\n+  wlsLbInput=\"${scriptDir}/loadbalancer-template.yaml\"\n+  if [ ! -f ${wlsLbInput} ]; then\n+    validationError \"The template file ${wlsLbInput} for generating load balancer for admin server was not found\"\n+  fi\n+\n+  failIfValidationErrors\n+\n+  # Parse the common inputs file\n+  parseCommonInputs\n+  initOutputDir\n+  failIfValidationErrors\n+\n+  if [ ${#namePrefix} -gt 7 ]; then\n+    fail \"namePrefix is allowed lowercase letters and numbers, between 1 and 7 characters.\"\n+  fi\n+\n+  # Generate Azure resource name\n+  export azureResourceGroupName=\"${namePrefix}resourcegroup${azureResourceUID}\"\n+  export aksClusterName=\"${namePrefix}akscluster${azureResourceUID}\"\n+  export storageAccountName=\"${namePrefix}storage${azureResourceUID}\"\n+\n+  export azureFileShareSecretName=\"${namePrefix}${azureFileShareSecretNameSuffix}\"\n+  export azureKubernetesNodepoolName=\"${azureKubernetesNodepoolNamePrefix}${namePrefix}\"\n+  export azureStorageShareName=\"${namePrefix}-${azureStorageShareNameSuffix}-${azureResourceUID}\"\n+  export imagePullSecretName=\"${namePrefix}${imagePullSecretNameSuffix}\"\n+  export persistentVolumeClaimName=\"${namePrefix}-${persistentVolumeClaimNameSuffix}-${azureResourceUID}\"\n+\n+}\n+\n+#\n+# Function to generate the yaml files for creating Azure resources and weblogic domain\n+#\n+function createYamlFiles {\n+\n+  # Create a directory for this domain's output files\n+  mkdir -p ${aksOutputDir}\n+\n+  # Make sure the output directory has a copy of the inputs file.\n+  # The user can either pre-create the output directory, put the inputs\n+  # file there, and create the domain from it, or the user can put the\n+  # inputs file some place else and let this script create the output directory\n+  # (if needed) and copy the inputs file there.\n+  copyInputsFileToOutputDirectory ${valuesInputFile} \"${aksOutputDir}/create-domain-on-aks-inputs.yaml\"\n+\n+  echo Generating ${pvOutput}\n+\n+  cp ${domainPVInput} ${pvOutput}\n+  sed -i -e \"s:%PERSISTENT_VOLUME_NAME%:${persistentVolumeClaimName}:g\" ${pvOutput}\n+  sed -i -e \"s:%AZURE_FILE_SHARE_SECRET_NAME%:${azureFileShareSecretName}:g\" ${pvOutput}\n+  sed -i -e \"s:%AZURE_FILE_SHARE_NAME%:${azureStorageShareName}:g\" ${pvOutput}\n+  sed -i -e \"s:%STORAGE_CLASS_NAME%:${azureStorageClassName}:g\" ${pvOutput}\n+\n+  # Generate the yaml to create the persistent volume claim\n+  echo Generating ${pvcOutput}\n+\n+  cp ${domainPVCInput} ${pvcOutput}\n+  sed -i -e \"s:%PERSISTENT_VOLUME_CLAIM_NAME%:${persistentVolumeClaimName}:g\" ${pvcOutput}\n+  sed -i -e \"s:%STORAGE_CLASS_NAME%:${azureStorageClassName}:g\" ${pvcOutput}\n+\n+  # Generate the yaml to create weblogic domain.\n+  echo Generating ${domain1Output}\n+\n+  if [ -z ${domainInputFile} ]; then\n+    domainInputFile=\"${dirCreateDomain}/create-domain-inputs.yaml\"\n+  fi\n+  \n+  cp ${domainInputFile} ${domain1Output}\n+  sed -i -e \"s;^image\\:.*;image\\: ${weblogicDockerImage};g\" ${domain1Output}\n+  sed -i -e \"s:#imagePullSecretName.*:imagePullSecretName\\: ${imagePullSecretName}:g\" ${domain1Output}\n+  sed -i -e \"s:imagePullSecretName.*:imagePullSecretName\\: ${imagePullSecretName}:g\" ${domain1Output}\n+  sed -i -e \"s:exposeAdminNodePort.*:exposeAdminNodePort\\: true:g\" ${domain1Output}\n+  sed -i -e \"s:persistentVolumeClaimName.*:persistentVolumeClaimName\\: ${persistentVolumeClaimName}:g\" ${domain1Output}\n+\n+  # Parse domain configuration yaml for usage in load balancer\n+  exportValuesFile=$(mktemp /tmp/export-values-XXXXXXXXX.sh)\n+  tmpFile=$(mktemp /tmp/javaoptions_tmp-XXXXXXXXX.dat) \n+  parseYaml ${domain1Output} ${exportValuesFile}\n+  if [ ! -f ${exportValuesFile} ]; then\n+    echo Unable to locate the parsed output of ${domain1Output}.\n+    fail 'The file ${exportValuesFile} could not be found.'\n+  fi\n+\n+  # Define the environment variables that will be used to fill in template values\n+  echo Domain parameters being used\n+  cat ${exportValuesFile}\n+  echo\n+  # javaOptions may contain tokens that are not allowed in export command\n+  # we need to handle it differently. \n+  # we set the javaOptions variable that can be used later\n+  tmpStr=`grep \"javaOptions\" ${exportValuesFile}`\n+  javaOptions=${tmpStr//\"javaOptions=\"/}\n+\n+  # We exclude javaOptions from the exportValuesFile\n+  grep -v \"javaOptions\" ${exportValuesFile} > ${tmpFile}\n+  source ${tmpFile}\n+  rm ${exportValuesFile} ${tmpFile}\n+\n+  # Generate the yaml to create load balancer for admin server.", "originalCommit": "fb3b3b45cca18bc949f451e3d16806efc1ef4ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNDQwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r474314408", "bodyText": "WebLogic", "author": "mriccell", "createdAt": "2020-08-20T22:51:47Z", "path": "kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh", "diffHunk": "@@ -0,0 +1,540 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# Description\n+#  This sample script creates a WebLogic domain home on the Azure Kubernetes Service (AKS). \n+#  It creates a new Azure resource group, with a new Azure Storage Account and Azure File Share to allow WebLogic \n+#  to persist its configuration and data separately from the Kubernetes pods that run WebLogic workloads.\n+#  Besides, it also generates the domain resource yaml files, which can be used to restart the Kubernetes \n+#  artifacts of the corresponding domain.\n+#\n+#  The Azure resource customized by editing create-domain-on-aks-inputs.yaml\n+#  If you also want to customized WebLogic domain configuration, please edit kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml. \n+#  or create a new copy and edit it, specify the file using \"-d <your-domain-inputs.yaml>\".\n+#\n+#  The following pre-requisites must be handled prior to running this script:\n+#    * Environment has set up, with git, azure cli, kubectl and helm installed.\n+#    * The doker hub account must have created, and checkouted Oracle WebLogic Server, we use 12.2.1.3 by default.\n+#    * The Azure Service Principal must have created, with permission to create AKS.\n+\n+# Initialize\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+source ${scriptDir}/../common/utility.sh\n+source ${scriptDir}/../common/validate.sh\n+\n+function usage {\n+  echo usage: ${script} -i file -o dir [-u uid] [-e] [-d] [-h]\n+  echo \"  -i Parameter inputs file, must be specified.\"\n+  echo \"  -o Output directory for the generated yaml files, must be specified.\"\n+  echo \"  -u UID of resource, used to name file share, persistent valume, and persistent valume claim. \"\n+  echo \"  -e Also create the Azure Kubernetes Service and create WebLogic domain on it using the generated yaml files\"\n+  echo \"  -d Paramters inputs file for creating domain, you can use specifed configuration by changing values of kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain-inputs.yaml, otherwise, we will use that file by default.\"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+#\n+# Parse the command line options\n+#\n+executeIt=false\n+while getopts \"ehi:o:u:\" opt; do\n+  case $opt in\n+    i) valuesInputFile=\"${OPTARG}\"\n+    ;;\n+    o) outputDir=\"${OPTARG}\"\n+    ;;\n+    u) azureResourceUID=\"${OPTARG}\"\n+    ;;\n+    e) executeIt=true\n+    ;;\n+    d) domainInputFile=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+if [ -z ${valuesInputFile} ]; then\n+  echo \"${script}: -i must be specified.\"\n+  missingRequiredOption=\"true\"\n+fi\n+\n+if [ -z ${outputDir} ]; then\n+  echo \"${script}: -o must be specified.\"\n+  missingRequiredOption=\"true\"\n+fi\n+\n+if [ \"${missingRequiredOption}\" == \"true\" ]; then\n+  usage 1\n+fi\n+\n+if [ -z \"${azureResourceUID}\" ];then \n+  azureResourceUID=`date +%s`\n+fi\n+\n+#\n+# Function to exit and print an error message\n+# $1 - text of message\n+function fail {\n+  echo [ERROR] $*\n+  exit 1\n+}\n+\n+#\n+# Function to initialize and validate the output directory\n+# for the generated yaml files for this domain.\n+#\n+function initOutputDir {\n+  aksOutputDir=\"$outputDir/weblogic-on-aks\"\n+\n+  pvOutput=\"${aksOutputDir}/pv.yaml\"\n+  pvcOutput=\"${aksOutputDir}/pvc.yaml\"\n+  adminLbOutput=\"${aksOutputDir}/admin-lb.yaml\"\n+  clusterLbOutput=\"${aksOutputDir}/cluster-lb.yaml\"\n+  domain1Output=\"${aksOutputDir}/domain1.yaml\"\n+\n+  removeFileIfExists ${pvOutput}\n+  removeFileIfExists ${pvcOutput}\n+  removeFileIfExists ${adminLbOutput}\n+  removeFileIfExists ${clusterLbOutput}\n+  removeFileIfExists ${domain1Output}\n+  removeFileIfExists ${aksOutputDir}/create-domain-on-aks-inputs.yaml\n+}\n+\n+#\n+# Function to setup the environment to run the create Azure resource and domain job\n+#\n+function initialize {\n+\n+  # Validate the required files exist\n+  validateErrors=false\n+\n+  if [ -z \"${valuesInputFile}\" ]; then\n+    validationError \"You must use the -i option to specify the name of the inputs parameter file (a modified copy of kubernetes/samples/scripts/create-weblogic-domain-on-aks/create-domain-on-aks-inputs.yaml).\"\n+  else\n+    if [ ! -f ${valuesInputFile} ]; then\n+      validationError \"Unable to locate the input parameters file ${valuesInputFile}\"\n+    fi\n+  fi\n+\n+  if [ -z \"${outputDir}\" ]; then\n+    validationError \"You must use the -o option to specify the name of an existing directory to store the generated yaml files in.\"\n+  fi\n+\n+  domainPVInput=\"${scriptDir}/azure-file-pv-template.yaml\"\n+  if [ ! -f ${domainPVInput} ]; then\n+    validationError \"The template file ${domainPVInput} for generating a persistent volume was not found\"\n+  fi\n+\n+  domainPVCInput=\"${scriptDir}/azure-file-pvc-template.yaml\"\n+  if [ ! -f ${domainPVCInput} ]; then\n+    validationError \"The template file ${domainPVCInput} for generating a persistent volume claim was not found\"\n+  fi\n+\n+  wlsLbInput=\"${scriptDir}/loadbalancer-template.yaml\"\n+  if [ ! -f ${wlsLbInput} ]; then\n+    validationError \"The template file ${wlsLbInput} for generating load balancer for admin server was not found\"\n+  fi\n+\n+  failIfValidationErrors\n+\n+  # Parse the common inputs file\n+  parseCommonInputs\n+  initOutputDir\n+  failIfValidationErrors\n+\n+  if [ ${#namePrefix} -gt 7 ]; then\n+    fail \"namePrefix is allowed lowercase letters and numbers, between 1 and 7 characters.\"\n+  fi\n+\n+  # Generate Azure resource name\n+  export azureResourceGroupName=\"${namePrefix}resourcegroup${azureResourceUID}\"\n+  export aksClusterName=\"${namePrefix}akscluster${azureResourceUID}\"\n+  export storageAccountName=\"${namePrefix}storage${azureResourceUID}\"\n+\n+  export azureFileShareSecretName=\"${namePrefix}${azureFileShareSecretNameSuffix}\"\n+  export azureKubernetesNodepoolName=\"${azureKubernetesNodepoolNamePrefix}${namePrefix}\"\n+  export azureStorageShareName=\"${namePrefix}-${azureStorageShareNameSuffix}-${azureResourceUID}\"\n+  export imagePullSecretName=\"${namePrefix}${imagePullSecretNameSuffix}\"\n+  export persistentVolumeClaimName=\"${namePrefix}-${persistentVolumeClaimNameSuffix}-${azureResourceUID}\"\n+\n+}\n+\n+#\n+# Function to generate the yaml files for creating Azure resources and weblogic domain\n+#\n+function createYamlFiles {\n+\n+  # Create a directory for this domain's output files\n+  mkdir -p ${aksOutputDir}\n+\n+  # Make sure the output directory has a copy of the inputs file.\n+  # The user can either pre-create the output directory, put the inputs\n+  # file there, and create the domain from it, or the user can put the\n+  # inputs file some place else and let this script create the output directory\n+  # (if needed) and copy the inputs file there.\n+  copyInputsFileToOutputDirectory ${valuesInputFile} \"${aksOutputDir}/create-domain-on-aks-inputs.yaml\"\n+\n+  echo Generating ${pvOutput}\n+\n+  cp ${domainPVInput} ${pvOutput}\n+  sed -i -e \"s:%PERSISTENT_VOLUME_NAME%:${persistentVolumeClaimName}:g\" ${pvOutput}\n+  sed -i -e \"s:%AZURE_FILE_SHARE_SECRET_NAME%:${azureFileShareSecretName}:g\" ${pvOutput}\n+  sed -i -e \"s:%AZURE_FILE_SHARE_NAME%:${azureStorageShareName}:g\" ${pvOutput}\n+  sed -i -e \"s:%STORAGE_CLASS_NAME%:${azureStorageClassName}:g\" ${pvOutput}\n+\n+  # Generate the yaml to create the persistent volume claim\n+  echo Generating ${pvcOutput}\n+\n+  cp ${domainPVCInput} ${pvcOutput}\n+  sed -i -e \"s:%PERSISTENT_VOLUME_CLAIM_NAME%:${persistentVolumeClaimName}:g\" ${pvcOutput}\n+  sed -i -e \"s:%STORAGE_CLASS_NAME%:${azureStorageClassName}:g\" ${pvcOutput}\n+\n+  # Generate the yaml to create weblogic domain.\n+  echo Generating ${domain1Output}\n+\n+  if [ -z ${domainInputFile} ]; then\n+    domainInputFile=\"${dirCreateDomain}/create-domain-inputs.yaml\"\n+  fi\n+  \n+  cp ${domainInputFile} ${domain1Output}\n+  sed -i -e \"s;^image\\:.*;image\\: ${weblogicDockerImage};g\" ${domain1Output}\n+  sed -i -e \"s:#imagePullSecretName.*:imagePullSecretName\\: ${imagePullSecretName}:g\" ${domain1Output}\n+  sed -i -e \"s:imagePullSecretName.*:imagePullSecretName\\: ${imagePullSecretName}:g\" ${domain1Output}\n+  sed -i -e \"s:exposeAdminNodePort.*:exposeAdminNodePort\\: true:g\" ${domain1Output}\n+  sed -i -e \"s:persistentVolumeClaimName.*:persistentVolumeClaimName\\: ${persistentVolumeClaimName}:g\" ${domain1Output}\n+\n+  # Parse domain configuration yaml for usage in load balancer\n+  exportValuesFile=$(mktemp /tmp/export-values-XXXXXXXXX.sh)\n+  tmpFile=$(mktemp /tmp/javaoptions_tmp-XXXXXXXXX.dat) \n+  parseYaml ${domain1Output} ${exportValuesFile}\n+  if [ ! -f ${exportValuesFile} ]; then\n+    echo Unable to locate the parsed output of ${domain1Output}.\n+    fail 'The file ${exportValuesFile} could not be found.'\n+  fi\n+\n+  # Define the environment variables that will be used to fill in template values\n+  echo Domain parameters being used\n+  cat ${exportValuesFile}\n+  echo\n+  # javaOptions may contain tokens that are not allowed in export command\n+  # we need to handle it differently. \n+  # we set the javaOptions variable that can be used later\n+  tmpStr=`grep \"javaOptions\" ${exportValuesFile}`\n+  javaOptions=${tmpStr//\"javaOptions=\"/}\n+\n+  # We exclude javaOptions from the exportValuesFile\n+  grep -v \"javaOptions\" ${exportValuesFile} > ${tmpFile}\n+  source ${tmpFile}\n+  rm ${exportValuesFile} ${tmpFile}\n+\n+  # Generate the yaml to create load balancer for admin server.\n+  echo Generating ${adminLbOutput}\n+\n+  cp ${wlsLbInput} ${adminLbOutput}  \n+  sed -i -e \"s:%SELECTOR_SERVER_TYPE%:${selectorAdminServerName}:g\" ${adminLbOutput}\n+  sed -i -e \"s:%DOMAIN_UID%:${domainUID}:g\" ${adminLbOutput}\n+  sed -i -e \"s:%SERVER_PORT%:${adminPort}:g\" ${adminLbOutput}\n+  sed -i -e \"s:%SERVER_NAME%:${adminServerName}:g\" ${adminLbOutput}\n+\n+  # Generate the yaml to create load balancer for weblogic cluster.", "originalCommit": "fb3b3b45cca18bc949f451e3d16806efc1ef4ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNTA4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1873#discussion_r474315088", "bodyText": "WebLogic Server domain", "author": "mriccell", "createdAt": "2020-08-20T22:53:48Z", "path": "kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh", "diffHunk": "@@ -0,0 +1,362 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# Description\n+# This script is to validate if resources are ready for creating a new WebLogic domain.", "originalCommit": "fb3b3b45cca18bc949f451e3d16806efc1ef4ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f172a37ef0ea6ef28329dabed1e19c261963e4a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0f172a37ef0ea6ef28329dabed1e19c261963e4a", "message": "PR to add sample running Oracle WLS Kubernetes Operator on Azure Kubernetes Service.  Thanks to Johnny Shum, Ryan Eberhart and Monica Ricelli.\n\nMerge from branch created for https://github.com/oracle/weblogic-kubernetes-operator/pull/1804\n\nUpdate _index.md\n\nOn branch edburns-msft-180-01-wls-aks\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\n\n- Version numbers in prerequisites.\n\n- Additional \"Successful output looks like\" blocks.\n\n- When a code block defines an env var, export it.\n\n- Before running the script to create the yaml, rm -rf ~/azure.\n\nmodified:   kubernetes/samples/scripts/create-kuberetes-secrets/create-azure-storage-credentials-secret.sh\nmodified:   kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh\n\n- chmod ugo+x\n\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml\n\n- Readability.\n\n- Move the \"prefix\" stuff to the \"must change\" section.\n\nOn branch edburns-msft-180-01-wls-aks\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\n\n- Working toward 1163875 Apply disambiguation prefix on additional items.\n\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh\n\n- Correct spelling error in comment.\n\nTask 1163875: Apply disambiguation prefix on additional items\n\nChanges after reviewing commit 705ab338ab4647c2af963ed58b74872d4fb1de6b with Ed.\n\nFix check points and check length of namePrefix.\n\nCreate validate.sh to validate resources before creating domain manually.\n\nTypos\n\nOn branch edburns-msft-180-01-wls-aks typos\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\n\nOn branch edburns-msft-180-01-wls-aks\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\n\n- Spelling.\n\n- Additional validation: kubectl logs -f.\n\n- Mention health checks.\n\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh\n\n- Make it so the script can be run from an absolute path.\n\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh\n\n- chmod ugo+x\n\nModified in kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml\nUpdate _index.md and all related samples script and yaml files to remove all mention of Docker Hub\n\nModified in kubernetes/samples/scripts/create-kuberetes-secrets/create-docker-credentials-secret.sh\nUpdate dockerServer=container-registry.oracle.com\n\nOn branch edburns-msft-180-01-wls-aks\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\n\n- Fix link to GET IMAGES.\n\n- Fix lower case l.\n\n- Update heading.\n\n- Correct wording.\n\n- Give hint about ImagePullBackoff.\n\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml\n\n- Adjust comments to make it clear that it's Oracle SSO credentials.\n\nmodified:   kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv/create-domain.sh\n\n- Increased retries to 30.\n\nOn branch edburns-msft-180-01-wls-aks\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/azure-file-pv-template.yaml\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/azure-file-pvc-template.yaml\n\n- Changes suggested by Johnny Shum to get past the cluster distribution problem.\n\nRevert \"On branch edburns-msft-180-01-wls-aks\"\n\nThis reverts commit b52b466ab5b8eb2a7493e829e125be876dc516a1.\n\nName vp/pvc, file share with unique name.\n\nAdd testwebapp.war for testing.\n\nModified in kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh\nChange file share name with \"prefix-weblogic-time\"\nChange pv, pvc name with \"prefix-azurefile-time\"\nOutput status during waiting for job completed.\n\nModified in docs-source/content/samples/simple/azure-kubernetes-service/_index.md\nUpdate text with pv/pvc, file share unique name.\n\nModified in kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml\nChange name structure of pvc and file share.\n\nModified in kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/validate.sh\nFix validate.sh with pv/pvc, file share unique name.\n\nOn branch edburns-msft-180-02-wls-aks forward slashes only.\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\n\nOn branch edburns-msft-180-02-wls-aks Verified manual execution of steps works on Oracle Enterprise Java subscription.\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/azure-file-pv-template.yaml\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/azure-file-pvc-template.yaml\n\n- increase capacity to 10Gi.\n\n- Set on pv:\n\n   ```\n   persistentVolumeReclaimPolicy: Retain\n   ```\n\n- Remove nobrl.\n\n- Set on pvc:\n\n+  selector:\n+    matchLabels:\n+      usage: %PERSISTENT_VOLUME_CLAIM_NAME%\n\nOn branch edburns-msft-180-02-wls-aks In table for automation, update description for docker related parameters.\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md", "committedDate": "2020-08-20T23:01:55Z", "type": "commit"}, {"oid": "539900f6b34c82756e38ed31947a1c780d2e199d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/539900f6b34c82756e38ed31947a1c780d2e199d", "message": "Update _index.md\n\nAddress comments from @rosemarymarano.", "committedDate": "2020-08-20T23:01:55Z", "type": "commit"}, {"oid": "1ba54bd097021fb3deefd5b5383e176678826285", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1ba54bd097021fb3deefd5b5383e176678826285", "message": "Update README.md\n\nAddress @rosemarymarano comment.", "committedDate": "2020-08-20T23:01:55Z", "type": "commit"}, {"oid": "fd865c719218c5190c020a683f2aeccba3dceb9c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fd865c719218c5190c020a683f2aeccba3dceb9c", "message": "Update _index.md", "committedDate": "2020-08-20T23:01:55Z", "type": "commit"}, {"oid": "6bca6ee4e2a17b5f9067a60df66b58f917c8dd00", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6bca6ee4e2a17b5f9067a60df66b58f917c8dd00", "message": "On branch edburns-msft-180-02-wls-aks\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\n\n- Copyedits.\n\n- Remove ClusterRoleBinding\n\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh\n\n- Remove ClusterRoleBinding", "committedDate": "2020-08-20T23:01:55Z", "type": "commit"}, {"oid": "b87d380cc017a1c48252b670d00e3a1aefade948", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b87d380cc017a1c48252b670d00e3a1aefade948", "message": "On branch edburns-msft-180-02-wls-aks\ndeleted:    kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/testwebapp.war\n\n- \"security policy doesn't let us merge changes with non-image binary files.\"\n\n- This deleted file has the same checksum as `kubernetes/samples/charts/application/testwebapp.war` so let's just use that.\n\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\n\n- Use `kubernetes/samples/charts/application/testwebapp.war`", "committedDate": "2020-08-20T23:01:55Z", "type": "commit"}, {"oid": "2f349954320801093054502c93d67e32069550fc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2f349954320801093054502c93d67e32069550fc", "message": "Change default VMSize and node number, as Standard_D4s_v3 and 3 node exceed quota on free azure account.\n\nModified on docs-source/content/samples/simple/azure-kubernetes-service/_index.md\nChange VM size to Standard_D4s_v3 and node number to 2 in document.\n\nModified in kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks-inputs.yaml\nChange default value of VM size to Standard_D4s_v3 and node number to 2.\n\nTested in Oracle Enterprise Java and a free azure account.", "committedDate": "2020-08-20T23:01:55Z", "type": "commit"}, {"oid": "28d7e2b6df16c916758f148f932f8ad5959f77fb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/28d7e2b6df16c916758f148f932f8ad5959f77fb", "message": "On branch edburns-msft-180-02-wls-aks Add Clean Up section.\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh", "committedDate": "2020-08-20T23:01:55Z", "type": "commit"}, {"oid": "39ed4677d6d7045633922e2df014897450536d73", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/39ed4677d6d7045633922e2df014897450536d73", "message": "On branch edburns-msft-180-02-wls-aks Apply changes suggested by @mriccell.\nmodified:   docs-source/content/samples/simple/azure-kubernetes-service/_index.md\nmodified:   kubernetes/samples/scripts/create-weblogic-domain-on-azure-kubernetes-service/create-domain-on-aks.sh", "committedDate": "2020-08-20T23:23:22Z", "type": "commit"}]}