{"pr_number": 1789, "pr_title": "Documentation for introspection and significant rewrites around the Domain", "pr_createdAt": "2020-07-08T23:29:31Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789", "timeline": [{"oid": "3b6cfc63726707d0dedfe2ff535f4e29fc27cb7b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3b6cfc63726707d0dedfe2ff535f4e29fc27cb7b", "message": "Updates to domain resource doc.", "committedDate": "2020-07-06T23:17:08Z", "type": "commit"}, {"oid": "32652c4407da9bfa214c4c4906b543485c3cc82a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/32652c4407da9bfa214c4c4906b543485c3cc82a", "message": "Further edits", "committedDate": "2020-07-07T20:40:35Z", "type": "commit"}, {"oid": "220cfdf687fa32cdc1cefb51b499cc9debd27042", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/220cfdf687fa32cdc1cefb51b499cc9debd27042", "message": "Continued updates", "committedDate": "2020-07-07T21:18:55Z", "type": "commit"}, {"oid": "5aaca340bb311a09b5fc202322dc065eea33bcaf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5aaca340bb311a09b5fc202322dc065eea33bcaf", "message": "Finished introspection doc", "committedDate": "2020-07-08T23:05:13Z", "type": "commit"}, {"oid": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "message": "A few more changes", "committedDate": "2020-07-08T23:25:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2OTkyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452169927", "bodyText": "processes these domains -> processes these Domains", "author": "rosemarymarano", "createdAt": "2020-07-09T12:09:39Z", "path": "docs-source/content/developerguide/domain-processing.md", "diffHunk": "@@ -6,10 +6,10 @@ weight: 8\n ---\n \n \n-When the operator starts, it lists all existing Domain resources and processes these domains to create the necessary Kubernetes resources, such as Pods and Services, if they don't already exist.  This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain resource.\n+When the operator starts, it lists all existing Domains and processes these domains to create the necessary Kubernetes resources, such as Pods and Services, if they don't already exist.  This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3Mzk3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452173971", "bodyText": "in to alignment -> into alignment", "author": "rosemarymarano", "createdAt": "2020-07-09T12:17:28Z", "path": "docs-source/content/developerguide/domain-processing.md", "diffHunk": "@@ -6,10 +6,10 @@ weight: 8\n ---\n \n \n-When the operator starts, it lists all existing Domain resources and processes these domains to create the necessary Kubernetes resources, such as Pods and Services, if they don't already exist.  This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain resource.\n+When the operator starts, it lists all existing Domains and processes these domains to create the necessary Kubernetes resources, such as Pods and Services, if they don't already exist.  This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain.\n \n-After this, the operator starts watches for changes to Domain resources and any changes to other resources created by the operator.  When a watch event is received, the operator processes the modified Domain resource to again bring the runtime presence in to alignment with the desired state.\n+After this, the operator starts watches for changes to Domains and any changes to other resources created by the operator.  When a watch event is received, the operator processes the modified Domain to again bring the runtime presence in to alignment with the desired state.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE4OTg4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452189889", "bodyText": "the lifecycle -> the life cycle  (life cycle (n), lifecycle (adj))", "author": "rosemarymarano", "createdAt": "2020-07-09T12:45:26Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the\n+[domain home source types](({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}})) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the introspection runs in a Kubernetes Pod\n+as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is\n+analyzing the same WebLogic domain configuration that WebLogic Server instances will use.\n+\n+Introspection ensures that:\n+1. The operator is aware of domain topology from the WebLogic domain configuration, including servers, clusters, network access points, listen addresses, and other configurations.\n+2. The operator can generate configuration overrides to adjust the WebLogic domain configuration to match the Kubernetes environment, such as modifying listen addresses.\n+3. For Model in Image, the operator can generate the WebLogic domain home, including the final domain configuration.\n+4. For Domain in PV and Domain in Image, the operator can use any customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}) along with the operator-generated overrides to generate the final configuration overrides.\n+\n+#### When introspection occurs automatically\n+\n+Introspection automatically occurs when:\n+1. The operator is starting a WebLogic Server instance when there are currently no other servers running. This occurs when the operator first starts servers for a domain or when starting servers following a full domain shutdown.\n+2. For Model in Image, the operator determines that at least one WebLogic Server instance that is currently running must be shut down and restarted. This could be a rolling of one or more clusters, the shut down and restart of one or more WebLogic Server instances, or a combination.\n+\n+#### Initiating introspection\n+\n+Sometimes, such as for the [use cases](#introspection-use-cases) described below, it is desirable to explicitly initiate introspection. To initiate introspection, change the value of your Domain `introspectVersion` field.\n+\n+Set `introspectVersion` to a new value.\n+\n+```\n+  kind: Domain\n+  metadata:\n+    name: domain1\n+  spec:\n+    introspectVersion: \"2\"\n+    ...\n+```\n+\n+As with `restartVersion`, the `introspectVersion` field has no required format; however, we recommend using a value likely to be unique such as a continually increasing number or a timestamp.\n+\n+#### Failed introspection\n+\n+When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.\n+\n+The introspection will be periodically retried and then will eventually timeout with the Domain `status` indicating the processing failed. To recover from a failed state, correct the underlying problem and update the `introspectVersion`.\n+\n+### Introspection use cases\n+\n+#### Adding clusters or Managed Servers to the WebLogic domain configuration\n+\n+When you have an existing WebLogic domain home on a persistent volume (\"Domain in PV\") and you currently have WebLogic Server instances running, it is now possible to define new WebLogic clusters or Managed Servers in the domain configuration and start these new instances without affecting the lifecycle of any WebLogic Server instances that are already running.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MDc5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452190795", "bodyText": "full domain shutdown -> full domain shut down  (shut down (v), shutdown (n))", "author": "rosemarymarano", "createdAt": "2020-07-09T12:47:02Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the\n+[domain home source types](({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}})) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the introspection runs in a Kubernetes Pod\n+as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is\n+analyzing the same WebLogic domain configuration that WebLogic Server instances will use.\n+\n+Introspection ensures that:\n+1. The operator is aware of domain topology from the WebLogic domain configuration, including servers, clusters, network access points, listen addresses, and other configurations.\n+2. The operator can generate configuration overrides to adjust the WebLogic domain configuration to match the Kubernetes environment, such as modifying listen addresses.\n+3. For Model in Image, the operator can generate the WebLogic domain home, including the final domain configuration.\n+4. For Domain in PV and Domain in Image, the operator can use any customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}) along with the operator-generated overrides to generate the final configuration overrides.\n+\n+#### When introspection occurs automatically\n+\n+Introspection automatically occurs when:\n+1. The operator is starting a WebLogic Server instance when there are currently no other servers running. This occurs when the operator first starts servers for a domain or when starting servers following a full domain shutdown.\n+2. For Model in Image, the operator determines that at least one WebLogic Server instance that is currently running must be shut down and restarted. This could be a rolling of one or more clusters, the shut down and restart of one or more WebLogic Server instances, or a combination.\n+\n+#### Initiating introspection\n+\n+Sometimes, such as for the [use cases](#introspection-use-cases) described below, it is desirable to explicitly initiate introspection. To initiate introspection, change the value of your Domain `introspectVersion` field.\n+\n+Set `introspectVersion` to a new value.\n+\n+```\n+  kind: Domain\n+  metadata:\n+    name: domain1\n+  spec:\n+    introspectVersion: \"2\"\n+    ...\n+```\n+\n+As with `restartVersion`, the `introspectVersion` field has no required format; however, we recommend using a value likely to be unique such as a continually increasing number or a timestamp.\n+\n+#### Failed introspection\n+\n+When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.\n+\n+The introspection will be periodically retried and then will eventually timeout with the Domain `status` indicating the processing failed. To recover from a failed state, correct the underlying problem and update the `introspectVersion`.\n+\n+### Introspection use cases\n+\n+#### Adding clusters or Managed Servers to the WebLogic domain configuration\n+\n+When you have an existing WebLogic domain home on a persistent volume (\"Domain in PV\") and you currently have WebLogic Server instances running, it is now possible to define new WebLogic clusters or Managed Servers in the domain configuration and start these new instances without affecting the lifecycle of any WebLogic Server instances that are already running.\n+\n+Prior to operator 3.0.0, this was not possible because there was no mechanism to initiate introspection other than a full domain shutdown and restart and so the operator was unaware of the new clusters or Managed Servers. Now, after updating the domain configuration, you can initiate introspection by changing the `introspectVersion`.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MTM2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452191368", "bodyText": "named \"cluster-1\" then your Domain YAML -> named \"cluster-1\", then your Domain YAML file", "author": "rosemarymarano", "createdAt": "2020-07-09T12:48:00Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the\n+[domain home source types](({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}})) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the introspection runs in a Kubernetes Pod\n+as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is\n+analyzing the same WebLogic domain configuration that WebLogic Server instances will use.\n+\n+Introspection ensures that:\n+1. The operator is aware of domain topology from the WebLogic domain configuration, including servers, clusters, network access points, listen addresses, and other configurations.\n+2. The operator can generate configuration overrides to adjust the WebLogic domain configuration to match the Kubernetes environment, such as modifying listen addresses.\n+3. For Model in Image, the operator can generate the WebLogic domain home, including the final domain configuration.\n+4. For Domain in PV and Domain in Image, the operator can use any customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}) along with the operator-generated overrides to generate the final configuration overrides.\n+\n+#### When introspection occurs automatically\n+\n+Introspection automatically occurs when:\n+1. The operator is starting a WebLogic Server instance when there are currently no other servers running. This occurs when the operator first starts servers for a domain or when starting servers following a full domain shutdown.\n+2. For Model in Image, the operator determines that at least one WebLogic Server instance that is currently running must be shut down and restarted. This could be a rolling of one or more clusters, the shut down and restart of one or more WebLogic Server instances, or a combination.\n+\n+#### Initiating introspection\n+\n+Sometimes, such as for the [use cases](#introspection-use-cases) described below, it is desirable to explicitly initiate introspection. To initiate introspection, change the value of your Domain `introspectVersion` field.\n+\n+Set `introspectVersion` to a new value.\n+\n+```\n+  kind: Domain\n+  metadata:\n+    name: domain1\n+  spec:\n+    introspectVersion: \"2\"\n+    ...\n+```\n+\n+As with `restartVersion`, the `introspectVersion` field has no required format; however, we recommend using a value likely to be unique such as a continually increasing number or a timestamp.\n+\n+#### Failed introspection\n+\n+When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.\n+\n+The introspection will be periodically retried and then will eventually timeout with the Domain `status` indicating the processing failed. To recover from a failed state, correct the underlying problem and update the `introspectVersion`.\n+\n+### Introspection use cases\n+\n+#### Adding clusters or Managed Servers to the WebLogic domain configuration\n+\n+When you have an existing WebLogic domain home on a persistent volume (\"Domain in PV\") and you currently have WebLogic Server instances running, it is now possible to define new WebLogic clusters or Managed Servers in the domain configuration and start these new instances without affecting the lifecycle of any WebLogic Server instances that are already running.\n+\n+Prior to operator 3.0.0, this was not possible because there was no mechanism to initiate introspection other than a full domain shutdown and restart and so the operator was unaware of the new clusters or Managed Servers. Now, after updating the domain configuration, you can initiate introspection by changing the `introspectVersion`.\n+\n+For instance, if you had a domain configuration with a single cluster named \"cluster-1\" then your Domain YAML may have content like this:", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MzUyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452193523", "bodyText": "Place a comma after \"cluster-2\" and always specify file after YAML (YAML file).", "author": "rosemarymarano", "createdAt": "2020-07-09T12:51:38Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the\n+[domain home source types](({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}})) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the introspection runs in a Kubernetes Pod\n+as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is\n+analyzing the same WebLogic domain configuration that WebLogic Server instances will use.\n+\n+Introspection ensures that:\n+1. The operator is aware of domain topology from the WebLogic domain configuration, including servers, clusters, network access points, listen addresses, and other configurations.\n+2. The operator can generate configuration overrides to adjust the WebLogic domain configuration to match the Kubernetes environment, such as modifying listen addresses.\n+3. For Model in Image, the operator can generate the WebLogic domain home, including the final domain configuration.\n+4. For Domain in PV and Domain in Image, the operator can use any customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}) along with the operator-generated overrides to generate the final configuration overrides.\n+\n+#### When introspection occurs automatically\n+\n+Introspection automatically occurs when:\n+1. The operator is starting a WebLogic Server instance when there are currently no other servers running. This occurs when the operator first starts servers for a domain or when starting servers following a full domain shutdown.\n+2. For Model in Image, the operator determines that at least one WebLogic Server instance that is currently running must be shut down and restarted. This could be a rolling of one or more clusters, the shut down and restart of one or more WebLogic Server instances, or a combination.\n+\n+#### Initiating introspection\n+\n+Sometimes, such as for the [use cases](#introspection-use-cases) described below, it is desirable to explicitly initiate introspection. To initiate introspection, change the value of your Domain `introspectVersion` field.\n+\n+Set `introspectVersion` to a new value.\n+\n+```\n+  kind: Domain\n+  metadata:\n+    name: domain1\n+  spec:\n+    introspectVersion: \"2\"\n+    ...\n+```\n+\n+As with `restartVersion`, the `introspectVersion` field has no required format; however, we recommend using a value likely to be unique such as a continually increasing number or a timestamp.\n+\n+#### Failed introspection\n+\n+When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.\n+\n+The introspection will be periodically retried and then will eventually timeout with the Domain `status` indicating the processing failed. To recover from a failed state, correct the underlying problem and update the `introspectVersion`.\n+\n+### Introspection use cases\n+\n+#### Adding clusters or Managed Servers to the WebLogic domain configuration\n+\n+When you have an existing WebLogic domain home on a persistent volume (\"Domain in PV\") and you currently have WebLogic Server instances running, it is now possible to define new WebLogic clusters or Managed Servers in the domain configuration and start these new instances without affecting the lifecycle of any WebLogic Server instances that are already running.\n+\n+Prior to operator 3.0.0, this was not possible because there was no mechanism to initiate introspection other than a full domain shutdown and restart and so the operator was unaware of the new clusters or Managed Servers. Now, after updating the domain configuration, you can initiate introspection by changing the `introspectVersion`.\n+\n+For instance, if you had a domain configuration with a single cluster named \"cluster-1\" then your Domain YAML may have content like this:\n+\n+```\n+spec:\n+  ...\n+  clusters:\n+    - clusterName: cluster-1\n+      replicas: 3\n+  ...\n+```\n+\n+If you modified your WebLogic domain configuration (using the console or WLST) to add a new dynamic cluster named \"cluster-2\" then you could immediately start cluster members of this new cluster by updating your Domain YAML like this:", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5NzkxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452197910", "bodyText": "called overrideDistributionStrategy, and located under configuration that -> called overrideDistributionStrategy and located under configuration, that (misplaced comma)", "author": "rosemarymarano", "createdAt": "2020-07-09T12:58:56Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the\n+[domain home source types](({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}})) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the introspection runs in a Kubernetes Pod\n+as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is\n+analyzing the same WebLogic domain configuration that WebLogic Server instances will use.\n+\n+Introspection ensures that:\n+1. The operator is aware of domain topology from the WebLogic domain configuration, including servers, clusters, network access points, listen addresses, and other configurations.\n+2. The operator can generate configuration overrides to adjust the WebLogic domain configuration to match the Kubernetes environment, such as modifying listen addresses.\n+3. For Model in Image, the operator can generate the WebLogic domain home, including the final domain configuration.\n+4. For Domain in PV and Domain in Image, the operator can use any customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}) along with the operator-generated overrides to generate the final configuration overrides.\n+\n+#### When introspection occurs automatically\n+\n+Introspection automatically occurs when:\n+1. The operator is starting a WebLogic Server instance when there are currently no other servers running. This occurs when the operator first starts servers for a domain or when starting servers following a full domain shutdown.\n+2. For Model in Image, the operator determines that at least one WebLogic Server instance that is currently running must be shut down and restarted. This could be a rolling of one or more clusters, the shut down and restart of one or more WebLogic Server instances, or a combination.\n+\n+#### Initiating introspection\n+\n+Sometimes, such as for the [use cases](#introspection-use-cases) described below, it is desirable to explicitly initiate introspection. To initiate introspection, change the value of your Domain `introspectVersion` field.\n+\n+Set `introspectVersion` to a new value.\n+\n+```\n+  kind: Domain\n+  metadata:\n+    name: domain1\n+  spec:\n+    introspectVersion: \"2\"\n+    ...\n+```\n+\n+As with `restartVersion`, the `introspectVersion` field has no required format; however, we recommend using a value likely to be unique such as a continually increasing number or a timestamp.\n+\n+#### Failed introspection\n+\n+When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.\n+\n+The introspection will be periodically retried and then will eventually timeout with the Domain `status` indicating the processing failed. To recover from a failed state, correct the underlying problem and update the `introspectVersion`.\n+\n+### Introspection use cases\n+\n+#### Adding clusters or Managed Servers to the WebLogic domain configuration\n+\n+When you have an existing WebLogic domain home on a persistent volume (\"Domain in PV\") and you currently have WebLogic Server instances running, it is now possible to define new WebLogic clusters or Managed Servers in the domain configuration and start these new instances without affecting the lifecycle of any WebLogic Server instances that are already running.\n+\n+Prior to operator 3.0.0, this was not possible because there was no mechanism to initiate introspection other than a full domain shutdown and restart and so the operator was unaware of the new clusters or Managed Servers. Now, after updating the domain configuration, you can initiate introspection by changing the `introspectVersion`.\n+\n+For instance, if you had a domain configuration with a single cluster named \"cluster-1\" then your Domain YAML may have content like this:\n+\n+```\n+spec:\n+  ...\n+  clusters:\n+    - clusterName: cluster-1\n+      replicas: 3\n+  ...\n+```\n+\n+If you modified your WebLogic domain configuration (using the console or WLST) to add a new dynamic cluster named \"cluster-2\" then you could immediately start cluster members of this new cluster by updating your Domain YAML like this:\n+\n+```\n+spec:\n+  ...\n+  clusters:\n+    - clusterName: cluster-1\n+      replicas: 3\n+    - clusterName: cluster-2\n+      replicas: 2\n+  introspectVersion: \"2\"\n+  ...\n+```\n+\n+When this updated Domain YAML file is applied, the operator will initiate a new introspection of the domain configuration during which it will learn about the additional WebLogic cluster and then the operator will continue to start WebLogic Server instances that are members of this new cluster. In this case, the operator will start two Managed Servers that are members of the cluster named \"cluster-2\".\n+\n+#### Distributing changes to configuration overrides\n+\n+The operator supports customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}). These configuration overrides, which are supported with Domain in PV or Domain in Image, allow you to override elements of the domian configuration, such as data source URL's or credentials.\n+\n+With operator 3.0.0, you can now change the configuration overrides and distribute these new configuration overrides to already running WebLogic Server instances. To do this, update the ConfigMap that contains the configuration overrides or update one or more of the Secrets referenced by those configuration overrides and then initiate introspection by changing the `introspectVersion` field.\n+\n+We have introduced a new field, called `overrideDistributionStrategy`, and located under `configuration` that controls whether updated configuration overrides are distributed dynamically to already running WebLogic Server instances or if the new configuration overrides are only applied when servers are started or restarted.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5ODY2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452198667", "bodyText": "but will instead only be applied -> but will instead be applied only", "author": "rosemarymarano", "createdAt": "2020-07-09T13:00:06Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the\n+[domain home source types](({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}})) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the introspection runs in a Kubernetes Pod\n+as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is\n+analyzing the same WebLogic domain configuration that WebLogic Server instances will use.\n+\n+Introspection ensures that:\n+1. The operator is aware of domain topology from the WebLogic domain configuration, including servers, clusters, network access points, listen addresses, and other configurations.\n+2. The operator can generate configuration overrides to adjust the WebLogic domain configuration to match the Kubernetes environment, such as modifying listen addresses.\n+3. For Model in Image, the operator can generate the WebLogic domain home, including the final domain configuration.\n+4. For Domain in PV and Domain in Image, the operator can use any customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}) along with the operator-generated overrides to generate the final configuration overrides.\n+\n+#### When introspection occurs automatically\n+\n+Introspection automatically occurs when:\n+1. The operator is starting a WebLogic Server instance when there are currently no other servers running. This occurs when the operator first starts servers for a domain or when starting servers following a full domain shutdown.\n+2. For Model in Image, the operator determines that at least one WebLogic Server instance that is currently running must be shut down and restarted. This could be a rolling of one or more clusters, the shut down and restart of one or more WebLogic Server instances, or a combination.\n+\n+#### Initiating introspection\n+\n+Sometimes, such as for the [use cases](#introspection-use-cases) described below, it is desirable to explicitly initiate introspection. To initiate introspection, change the value of your Domain `introspectVersion` field.\n+\n+Set `introspectVersion` to a new value.\n+\n+```\n+  kind: Domain\n+  metadata:\n+    name: domain1\n+  spec:\n+    introspectVersion: \"2\"\n+    ...\n+```\n+\n+As with `restartVersion`, the `introspectVersion` field has no required format; however, we recommend using a value likely to be unique such as a continually increasing number or a timestamp.\n+\n+#### Failed introspection\n+\n+When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.\n+\n+The introspection will be periodically retried and then will eventually timeout with the Domain `status` indicating the processing failed. To recover from a failed state, correct the underlying problem and update the `introspectVersion`.\n+\n+### Introspection use cases\n+\n+#### Adding clusters or Managed Servers to the WebLogic domain configuration\n+\n+When you have an existing WebLogic domain home on a persistent volume (\"Domain in PV\") and you currently have WebLogic Server instances running, it is now possible to define new WebLogic clusters or Managed Servers in the domain configuration and start these new instances without affecting the lifecycle of any WebLogic Server instances that are already running.\n+\n+Prior to operator 3.0.0, this was not possible because there was no mechanism to initiate introspection other than a full domain shutdown and restart and so the operator was unaware of the new clusters or Managed Servers. Now, after updating the domain configuration, you can initiate introspection by changing the `introspectVersion`.\n+\n+For instance, if you had a domain configuration with a single cluster named \"cluster-1\" then your Domain YAML may have content like this:\n+\n+```\n+spec:\n+  ...\n+  clusters:\n+    - clusterName: cluster-1\n+      replicas: 3\n+  ...\n+```\n+\n+If you modified your WebLogic domain configuration (using the console or WLST) to add a new dynamic cluster named \"cluster-2\" then you could immediately start cluster members of this new cluster by updating your Domain YAML like this:\n+\n+```\n+spec:\n+  ...\n+  clusters:\n+    - clusterName: cluster-1\n+      replicas: 3\n+    - clusterName: cluster-2\n+      replicas: 2\n+  introspectVersion: \"2\"\n+  ...\n+```\n+\n+When this updated Domain YAML file is applied, the operator will initiate a new introspection of the domain configuration during which it will learn about the additional WebLogic cluster and then the operator will continue to start WebLogic Server instances that are members of this new cluster. In this case, the operator will start two Managed Servers that are members of the cluster named \"cluster-2\".\n+\n+#### Distributing changes to configuration overrides\n+\n+The operator supports customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}). These configuration overrides, which are supported with Domain in PV or Domain in Image, allow you to override elements of the domian configuration, such as data source URL's or credentials.\n+\n+With operator 3.0.0, you can now change the configuration overrides and distribute these new configuration overrides to already running WebLogic Server instances. To do this, update the ConfigMap that contains the configuration overrides or update one or more of the Secrets referenced by those configuration overrides and then initiate introspection by changing the `introspectVersion` field.\n+\n+We have introduced a new field, called `overrideDistributionStrategy`, and located under `configuration` that controls whether updated configuration overrides are distributed dynamically to already running WebLogic Server instances or if the new configuration overrides are only applied when servers are started or restarted.\n+\n+The default value for `overrideDistributionStrategy` is DYNAMIC, which means that new configuration overrides are distributed dynamically to already running WebLogic Server instances. \n+\n+Alternately, you can set `overrideDistributionStrategy` to ON_RESTART, which means that the new configuration overrides will not be distributed to already running WebLogic Server instances, but will instead only be applied to servers as they start or restart. Use of this value will *not* cause WebLogic Server instances to restart absent changes to other fields, such as `restartVersion`.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMTU1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452201556", "bodyText": "a full shutdown -> a full shut down", "author": "rosemarymarano", "createdAt": "2020-07-09T13:04:59Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image\n \n ### Use cases\n \n-#### Modifying the WebLogic Server configuration\n+#### Modifying the WebLogic domain configuration\n \n-Changes to the Oracle WebLogic Server configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n+Changes to the WebLogic domain configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n \n * **Domain in Image:**\n-For a domain home in image, any changes (dynamic or non-dynamic) to the WebLogic configuration requires a full domain restart.  \n-    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n-    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}).\n+\n+For Domain in Image, you may only perform a rolling restart if both the WebLogic configuration changes between the present image and a new image are dynamic and you have [followed the CI/CD guidelines]({{< relref \"/userguide/cicd/mutate-the-domain-layer\">}}) to create an image with compatible encryption keys.\n+\n+Otherwise, use of a new image that does not have compatible encryption keys or any non-dynamic configuration changes require a full domain restart.  \n+    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image field on a Domain](#avoiding-a-rolling-restart-when-changing-image-field-on-a-domain).\n+    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}).\n \n * **Model in Image:**\n \n-    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the domain resource image setting, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n+    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the Domain `image` field, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTk4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452205980", "bodyText": "either static or dynamic -> either configured or dynamic  (AFAIK, the term \"static cluster\" is not used anywhere in the WLS documentation, https://docs.oracle.com/en/middleware/standalone/weblogic-server/14.1.1.0/clust/dynamic_clusters.html#GUID-DA7F7FAD-49AA-4F3D-8A05-0D9921B96971)", "author": "rosemarymarano", "createdAt": "2020-07-09T13:12:08Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image\n \n ### Use cases\n \n-#### Modifying the WebLogic Server configuration\n+#### Modifying the WebLogic domain configuration\n \n-Changes to the Oracle WebLogic Server configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n+Changes to the WebLogic domain configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n \n * **Domain in Image:**\n-For a domain home in image, any changes (dynamic or non-dynamic) to the WebLogic configuration requires a full domain restart.  \n-    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n-    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}).\n+\n+For Domain in Image, you may only perform a rolling restart if both the WebLogic configuration changes between the present image and a new image are dynamic and you have [followed the CI/CD guidelines]({{< relref \"/userguide/cicd/mutate-the-domain-layer\">}}) to create an image with compatible encryption keys.\n+\n+Otherwise, use of a new image that does not have compatible encryption keys or any non-dynamic configuration changes require a full domain restart.  \n+    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image field on a Domain](#avoiding-a-rolling-restart-when-changing-image-field-on-a-domain).\n+    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}).\n \n * **Model in Image:**\n \n-    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the domain resource image setting, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n+    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the Domain `image` field, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n \n-    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n+    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing the image field on a Domain](#avoiding-a-rolling-restart-when-changing-the-image-field-on-a-domain).\n \n-    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}). To initiate a rolling restart, change the value of your domain resource `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n+    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}). To initiate a rolling restart, change the value of your Domain `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n \n-    * If you are supplying updated models or secrets for a running domain, and you want the configuration updates to take effect using a rolling restart:\n-      * You must either supply a new image name in the domain resource or change the domain resource `restartVersion` in order to force the operator to reload the configuration.\n-      * With either of these two changes, the operator will rerun the domain's introspector job, which will verify and apply the new configuration. If the introspector job's configuration verification succeeds, then it will subsequently roll (restart) the pods; if the job fails, then a roll will not occur.\n-      * If you change other fields that typically cause a restart, such as `volumes`, `env`, and such, then the introspector job will not rerun and a rolling restart will proceed without loading the configuration changes.\n+    * If you are supplying updated models or Secrets for a running domain, and you want the configuration updates to take effect using a rolling restart, then do one of the following:\n+      * Supply a new value for the `image` field in the Domain or any of the other [fields affecting WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}).\n+      * Change the Domain `restartVersion` field. This will cause the operator to restart all running servers and, prior to the restarts, the operator will introspect any new configuration.\n+      * Change the Domain `introspectVersion` field. This will cause the operator to introspect any new configuration and, if needed, restart servers to use that new configuration.\n \n * **Domain in PV:**\n-For a domain home on PV, the type of restart needed to apply the changes depends on the nature of the WebLogic configuration change:\n-    * Changes to parts of the WebLogic configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n-      The following are the types of changes to the WebLogic Server configuration that the operator introspects:\n-        * Adding or removing a cluster, server, dynamic server, or network access point\n+\n+For Domain in PV, the type of restart needed depends on the nature of the WebLogic domain configuration change:\n+    * With operator version 3.0.0, domain configuration changes that add clusters, either static or dynamic, cluster member servers, or standalone servers can now be performed dynamically. This support requires that the new clusters or servers are added to the domain configuration and then [triggering the operator's introspection]({{< relref \"/userguide/managing-domains/domain-lifecycle/introspection.md\" >}}) of that new configuration.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNzE0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452207140", "bodyText": "are only processed  -> are processed only\nwill then apply -> then will apply", "author": "rosemarymarano", "createdAt": "2020-07-09T13:13:57Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image\n \n ### Use cases\n \n-#### Modifying the WebLogic Server configuration\n+#### Modifying the WebLogic domain configuration\n \n-Changes to the Oracle WebLogic Server configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n+Changes to the WebLogic domain configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n \n * **Domain in Image:**\n-For a domain home in image, any changes (dynamic or non-dynamic) to the WebLogic configuration requires a full domain restart.  \n-    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n-    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}).\n+\n+For Domain in Image, you may only perform a rolling restart if both the WebLogic configuration changes between the present image and a new image are dynamic and you have [followed the CI/CD guidelines]({{< relref \"/userguide/cicd/mutate-the-domain-layer\">}}) to create an image with compatible encryption keys.\n+\n+Otherwise, use of a new image that does not have compatible encryption keys or any non-dynamic configuration changes require a full domain restart.  \n+    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image field on a Domain](#avoiding-a-rolling-restart-when-changing-image-field-on-a-domain).\n+    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}).\n \n * **Model in Image:**\n \n-    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the domain resource image setting, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n+    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the Domain `image` field, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n \n-    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n+    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing the image field on a Domain](#avoiding-a-rolling-restart-when-changing-the-image-field-on-a-domain).\n \n-    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}). To initiate a rolling restart, change the value of your domain resource `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n+    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}). To initiate a rolling restart, change the value of your Domain `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n \n-    * If you are supplying updated models or secrets for a running domain, and you want the configuration updates to take effect using a rolling restart:\n-      * You must either supply a new image name in the domain resource or change the domain resource `restartVersion` in order to force the operator to reload the configuration.\n-      * With either of these two changes, the operator will rerun the domain's introspector job, which will verify and apply the new configuration. If the introspector job's configuration verification succeeds, then it will subsequently roll (restart) the pods; if the job fails, then a roll will not occur.\n-      * If you change other fields that typically cause a restart, such as `volumes`, `env`, and such, then the introspector job will not rerun and a rolling restart will proceed without loading the configuration changes.\n+    * If you are supplying updated models or Secrets for a running domain, and you want the configuration updates to take effect using a rolling restart, then do one of the following:\n+      * Supply a new value for the `image` field in the Domain or any of the other [fields affecting WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}).\n+      * Change the Domain `restartVersion` field. This will cause the operator to restart all running servers and, prior to the restarts, the operator will introspect any new configuration.\n+      * Change the Domain `introspectVersion` field. This will cause the operator to introspect any new configuration and, if needed, restart servers to use that new configuration.\n \n * **Domain in PV:**\n-For a domain home on PV, the type of restart needed to apply the changes depends on the nature of the WebLogic configuration change:\n-    * Changes to parts of the WebLogic configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n-      The following are the types of changes to the WebLogic Server configuration that the operator introspects:\n-        * Adding or removing a cluster, server, dynamic server, or network access point\n+\n+For Domain in PV, the type of restart needed depends on the nature of the WebLogic domain configuration change:\n+    * With operator version 3.0.0, domain configuration changes that add clusters, either static or dynamic, cluster member servers, or standalone servers can now be performed dynamically. This support requires that the new clusters or servers are added to the domain configuration and then [triggering the operator's introspection]({{< relref \"/userguide/managing-domains/domain-lifecycle/introspection.md\" >}}) of that new configuration.\n+    * Other changes to parts of the domain configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n+      The following are the other types of changes to the domain configuration that the operator introspects:\n+        * Adding or removing a network access point\n         * Changing a cluster, server, dynamic server, or network access point name\n         * Enabling or disabling the listen port, SSL port, or admin port\n         * Changing any port numbers\n         * Changing a network access point's public address\n-    * Other dynamic WebLogic configuration changes do not require a restart.  For example, a change to a server's connection timeout property\n+    * Other dynamic WebLogic configuration changes do not require a restart. For example, a change to a server's connection timeout property\n is dynamic and does not require a restart.\n-    * Other non-dynamic WebLogic configuration changes require either a manually initiated rolling restart or a full domain restart, depending on the nature of the change.\n+    * Other non-dynamic domain configuration changes require either a manually initiated rolling restart or a full domain restart, depending on the nature of the change.\n       For example, a rolling restart is applicable when changing a WebLogic Server `stuck thread timer interval` property. See [Restart all the servers in the domain]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restart-all-the-servers-in-the-domain\" >}}).\n \n \n-#### Changing the custom domain configuration overrides\n+#### Changing the domain configuration overrides\n \n-Any change to domain configuration overrides requires a full domain restart.  This includes:\n+With operator version 3.0.0, changes to domain configuration overrides can be applied dynamically or as part of a rolling restart. Previously, any change to configuration overrides required a full domain restart.\n+Changes to configuration overrides include:\n \n-  * Changing the domain resource's `configuration.overridesConfigMap` to point to a different configuration map\n-  * Changing the domain resource's `configuration.secrets` to point to a different list of secrets\n-  * Changing the contents of the configuration map referenced by `configuration.overridesConfigMap`\n-  * Changing the contents to any of the secrets referenced by `configuration.secrets`\n+  * Changing the Domain YAML file's `configuration.overridesConfigMap` to point to a different ConfigMap\n+  * Changing the Domain YAML file's `configuration.secrets` to point to a different list of Secrets\n+  * Changing the contents of the ConfigMap referenced by `configuration.overridesConfigMap`\n+  * Changing the contents to any of the Secrets referenced by `configuration.secrets`\n+  \n+The changes to the above fields or contents of related resources are not processed automatically. Instead, these fields are only processed when you [trigger operator introspection]({{< relref \"/userguide/managing-domains/domain-lifecycle/introspection.md\" >}}). The operator will then apply the new configuration overrides dynamically or only apply the overrides when WebLogic Server instances restart, depending on the strategy that you select.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMDIxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452210216", "bodyText": "by using the kubectl. ->  by using kubectl.", "author": "rosemarymarano", "createdAt": "2020-07-09T13:18:27Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/scaling.md", "diffHunk": "@@ -15,17 +15,17 @@ The following blogs provide more in-depth information on support for scaling Web\n \n The operator provides several ways to initiate scaling of WebLogic clusters, including:\n \n-* [On-demand, updating the domain resource directly (using `kubectl`)](#on-demand-updating-the-domain-resource-directly).\n+* [On-demand, updating the Domain directly (using `kubectl`)](#on-demand-updating-the-domain-directly).\n * [Calling the operator's REST scale API, for example, from `curl`](#calling-the-operators-rest-scale-api).\n * [Using a WLDF policy rule and script action to call the operator's REST scale API](#using-a-wldf-policy-rule-and-script-action-to-call-the-operators-rest-scale-api).\n * [Using a Prometheus alert action to call the operator's REST scale API](#using-a-prometheus-alert-action-to-call-the-operators-rest-scale-api).\n \n-#### On-demand, updating the domain resource directly\n-The easiest way to scale a WebLogic cluster in Kubernetes is to simply edit the `replicas` property within a domain resource.  This can be done by using the `kubectl` command-line interface for running commands against Kubernetes clusters.  More specifically, you can modify the domain resource directly by using the `kubectl edit` command.  For example:\n+#### On-demand, updating the Domain directly\n+The easiest way to scale a WebLogic cluster in Kubernetes is to simply edit the `replicas` field of a Domain. This can be done by using the `kubectl`. More specifically, you can modify the Domain directly by using the `kubectl edit` command.  For example:", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjc3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452212772", "bodyText": "started or restarted -> started, or restarted", "author": "rosemarymarano", "createdAt": "2020-07-09T13:22:12Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/startup.md", "diffHunk": "@@ -3,8 +3,8 @@ title: \"Startup and shutdown\"\n date: 2019-02-23T17:04:41-05:00\n draft: false\n weight: 1\n-description: \"There are properties on the domain resource that specify which servers should be running\n-and which servers should be restarted. To start, stop, or restart servers, modify these properties on the domain resource.\"\n+description: \"There are fields on the Domain that specify which WebLogic Server instances should be running,\n+started or restarted. To start, stop, or restart servers, modify these fields on the Domain.\"", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMzI0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452213248", "bodyText": "should be restarted and the -> should be restarted, and the", "author": "rosemarymarano", "createdAt": "2020-07-09T13:22:55Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/startup.md", "diffHunk": "@@ -16,16 +16,16 @@ and which servers should be restarted. To start, stop, or restart servers, modif\n     * [Rolling restarts](#rolling-restarts)\n     * [Common restarting scenarios](#common-restarting-scenarios)\n \n-There are properties on the domain resource that specify which servers should be running,\n-which servers should be restarted and the desired initial state. To start, stop, or restart servers, modify these properties on the domain resource\n-(for example, by using `kubectl` or the Kubernetes REST API).  The operator will notice the changes and apply them.  Beginning,\n-with operator version 2.2, there are now properties to control server shutdown handling, such as whether the shutdown\n+There are fields on the Domain that specify which servers should be running,\n+which servers should be restarted and the desired initial state. To start, stop, or restart servers, modify these fields on the Domain", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMzg1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452213855", "bodyText": "Beginning, with operator version 2.2.0, -> Beginning with operator version 2.2.0,", "author": "rosemarymarano", "createdAt": "2020-07-09T13:23:48Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/startup.md", "diffHunk": "@@ -16,16 +16,16 @@ and which servers should be restarted. To start, stop, or restart servers, modif\n     * [Rolling restarts](#rolling-restarts)\n     * [Common restarting scenarios](#common-restarting-scenarios)\n \n-There are properties on the domain resource that specify which servers should be running,\n-which servers should be restarted and the desired initial state. To start, stop, or restart servers, modify these properties on the domain resource\n-(for example, by using `kubectl` or the Kubernetes REST API).  The operator will notice the changes and apply them.  Beginning,\n-with operator version 2.2, there are now properties to control server shutdown handling, such as whether the shutdown\n+There are fields on the Domain that specify which servers should be running,\n+which servers should be restarted and the desired initial state. To start, stop, or restart servers, modify these fields on the Domain\n+(for example, by using `kubectl` or the Kubernetes REST API).  The operator will detect the changes and apply them. Beginning,\n+with operator version 2.2.0, there are now fields to control server shutdown handling, such as whether the shutdown", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNTI3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452215270", "bodyText": "adminServer and -> adminServer, and", "author": "rosemarymarano", "createdAt": "2020-07-09T13:25:56Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/startup.md", "diffHunk": "@@ -168,21 +168,21 @@ The server will count toward the cluster's `replicas` count.  Also, if you confi\n \n ### Shutdown options\n \n-The domain resource includes the element `serverPod` that is available under `spec`, `adminServer` and each entry of\n-`clusters` and `managedServers`. The `serverPod` element controls many details of how pods are created for server instances.\n+The Domain YAML file includes the field `serverPod` that is available under `spec`, `adminServer` and each entry of", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNTcxNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452215715", "bodyText": "will be shutdown -> will be shut down", "author": "rosemarymarano", "createdAt": "2020-07-09T13:26:35Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/startup.md", "diffHunk": "@@ -168,21 +168,21 @@ The server will count toward the cluster's `replicas` count.  Also, if you confi\n \n ### Shutdown options\n \n-The domain resource includes the element `serverPod` that is available under `spec`, `adminServer` and each entry of\n-`clusters` and `managedServers`. The `serverPod` element controls many details of how pods are created for server instances.\n+The Domain YAML file includes the field `serverPod` that is available under `spec`, `adminServer` and each entry of\n+`clusters` and `managedServers`. The `serverPod` field controls many details of how Pods are generated for WebLogic Server instances.\n \n-The `shutdown` element of `serverPod` controls how servers will be shutdown.  This element has three properties:\n-`shutdownType`, `timeoutSeconds`, and `ignoreSessions`.  The `shutdownType` property can be set to either `Graceful`, the default,\n+The `shutdown` field of `serverPod` controls how servers will be shutdown and has three fields:", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzNTg0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452235849", "bodyText": "CustomResourceDefinition -> CustomResourceDefinition (CRD) (introduce the acronym on first mention, then you can use it wherever you want later on)", "author": "rosemarymarano", "createdAt": "2020-07-09T13:55:19Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzNzk3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452237973", "bodyText": "1.16 and above -> 1.16 and later (version \u2013 describe as a later version \u2013 not a higher version. Same for earlier version.)", "author": "rosemarymarano", "createdAt": "2020-07-09T13:58:12Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.\n \n-The `metadata` section names the domain resource and its namespace.  The name of the domain resource is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name.  The domain resource name is required to be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n+For Kubernetes 1.16 and above:", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzODMwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452238304", "bodyText": "1.15 and below -> 1.15 and earlier", "author": "rosemarymarano", "createdAt": "2020-07-09T13:58:39Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.\n \n-The `metadata` section names the domain resource and its namespace.  The name of the domain resource is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name.  The domain resource name is required to be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n+For Kubernetes 1.16 and above:\n \n-The `spec` section describes the intended running state of the domain, including intended runtime state of server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+```none\n+$ kubectl create -f kubernetes/crd/domain-crd.yaml\n+```\n \n-The `status` section is updated by the operator and describes the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+For Kubernetes 1.15 and below:", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzOTE0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452239144", "bodyText": "above -> later", "author": "rosemarymarano", "createdAt": "2020-07-09T13:59:50Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.\n \n-The `metadata` section names the domain resource and its namespace.  The name of the domain resource is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name.  The domain resource name is required to be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n+For Kubernetes 1.16 and above:\n \n-The `spec` section describes the intended running state of the domain, including intended runtime state of server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+```none\n+$ kubectl create -f kubernetes/crd/domain-crd.yaml\n+```\n \n-The `status` section is updated by the operator and describes the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+For Kubernetes 1.15 and below:\n \n-#### Domain resource spec elements\n+```none\n+$ kubectl create -f kubernetes/crd/domain-v1beta1-crd.yaml\n+```\n \n-The domain resource `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+After the CustomResourceDefinition is installed, either by the operator or using one of the `create` commands above, you can verify that the CRD is installed correctly using:\n \n-Elements related to domain identification, Docker image, and domain home:\n+```none\n+$ kubectl get crd domains.weblogic.oracle\n+```\n+\n+If you are using Kubernetes 1.16 or above, you can access the description of any field of the Domain using `kubectl explain`. For instance, the following command displays the description of the `domainUID` field:", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MTQxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452241416", "bodyText": "Never and -> Never, and", "author": "rosemarymarano", "createdAt": "2020-07-09T14:02:51Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.\n \n-The `metadata` section names the domain resource and its namespace.  The name of the domain resource is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name.  The domain resource name is required to be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n+For Kubernetes 1.16 and above:\n \n-The `spec` section describes the intended running state of the domain, including intended runtime state of server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+```none\n+$ kubectl create -f kubernetes/crd/domain-crd.yaml\n+```\n \n-The `status` section is updated by the operator and describes the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+For Kubernetes 1.15 and below:\n \n-#### Domain resource spec elements\n+```none\n+$ kubectl create -f kubernetes/crd/domain-v1beta1-crd.yaml\n+```\n \n-The domain resource `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+After the CustomResourceDefinition is installed, either by the operator or using one of the `create` commands above, you can verify that the CRD is installed correctly using:\n \n-Elements related to domain identification, Docker image, and domain home:\n+```none\n+$ kubectl get crd domains.weblogic.oracle\n+```\n+\n+If you are using Kubernetes 1.16 or above, you can access the description of any field of the Domain using `kubectl explain`. For instance, the following command displays the description of the `domainUID` field:\n+\n+```none\n+$ kubectl explain domains.spec.domainUID\n+KIND:     Domain\n+VERSION:  weblogic.oracle/v8\n+\n+FIELD:    domainUID <string>\n+\n+DESCRIPTION:\n+     Domain unique identifier. It is recommended that this value be unique to\n+     assist in future work to identify related domains in active-passive\n+     scenarios across data centers; however, it is only required that this value\n+     be unique within the namespace, similarly to the names of Kubernetes\n+     resources. This value is distinct and need not match the domain name from\n+     the WebLogic domain configuration. Defaults to the value of\n+     `metadata.name`.\n+```\n \n-* `domainUID`: The domain unique identifier. Must be unique across the Kubernetes cluster. Not required. Defaults to the value of `metadata.name`.\n-* `image`: The WebLogic Docker image. Required when `domainHomeSourceType` is `Image`; otherwise, defaults to `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n-* `imagePullPolicy`: The image pull policy for the WebLogic Docker image. Legal values are `Always`, `Never`, and `IfNotPresent`. Defaults to `Always` if image ends in `:latest`; `IfNotPresent` otherwise.\n-* `imagePullSecrets`: A list of image pull secrets for the WebLogic Docker image.\n-* `domainHome`: The folder for the WebLogic domain. Not required. Defaults to `/shared/domains/domains/domainUID` if `domainHomeSourceType` is `PersistentVolume`. Defaults to `/u01/oracle/user_projects/domains/` if `domainHomeSourceType` is `Image`. Defaults to `/u01/domains/domainUID` if `domainHomeSourceType` is `FromModel`.\n-* `domainHomeSourceType`: The source for the domain home. Legal values are `Image` (for Domain in Image), `PersistentVolume` (for Domain in PV), and `FromModel` (for Model in Image). Defaults to `Image`.\n+The `metadata` section names the Domain and its namespace.  The name of the Domain is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name. The Domain name must be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, Domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n \n+The `spec` section describes the intended running state of the domain, including intended runtime state of WebLogic Server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+\n+The operator automatically updates the `status` section to describe the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+\n+#### Domain spec elements\n+\n+The Domain `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+\n+Elements related to domain identification, container image, and domain home:\n+\n+* `domainUID`: Domain unique identifier. It is recommended that this value be unique to assist in future work to identify related domains in active-passive scenarios across data centers; however, it is only required that this value be unique within the namespace, similarly to the names of Kubernetes resources. This value is distinct and need not match the domain name from the WebLogic domain configuration. Defaults to the value of `metadata.name`.\n+* `image`: The WebLogic container image; required when `domainHomeSourceType` is Image or FromModel; otherwise, defaults to container-registry.oracle.com/middleware/weblogic:12.2.1.4.\n+* `imagePullPolicy`: The image pull policy for the WebLogic container image. Legal values are Always, Never and IfNotPresent. Defaults to Always if image ends in :latest; IfNotPresent, otherwise.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0NTEwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452245105", "bodyText": "full domain shutdown -> full domain shut down", "author": "rosemarymarano", "createdAt": "2020-07-09T14:08:14Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.\n \n-The `metadata` section names the domain resource and its namespace.  The name of the domain resource is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name.  The domain resource name is required to be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n+For Kubernetes 1.16 and above:\n \n-The `spec` section describes the intended running state of the domain, including intended runtime state of server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+```none\n+$ kubectl create -f kubernetes/crd/domain-crd.yaml\n+```\n \n-The `status` section is updated by the operator and describes the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+For Kubernetes 1.15 and below:\n \n-#### Domain resource spec elements\n+```none\n+$ kubectl create -f kubernetes/crd/domain-v1beta1-crd.yaml\n+```\n \n-The domain resource `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+After the CustomResourceDefinition is installed, either by the operator or using one of the `create` commands above, you can verify that the CRD is installed correctly using:\n \n-Elements related to domain identification, Docker image, and domain home:\n+```none\n+$ kubectl get crd domains.weblogic.oracle\n+```\n+\n+If you are using Kubernetes 1.16 or above, you can access the description of any field of the Domain using `kubectl explain`. For instance, the following command displays the description of the `domainUID` field:\n+\n+```none\n+$ kubectl explain domains.spec.domainUID\n+KIND:     Domain\n+VERSION:  weblogic.oracle/v8\n+\n+FIELD:    domainUID <string>\n+\n+DESCRIPTION:\n+     Domain unique identifier. It is recommended that this value be unique to\n+     assist in future work to identify related domains in active-passive\n+     scenarios across data centers; however, it is only required that this value\n+     be unique within the namespace, similarly to the names of Kubernetes\n+     resources. This value is distinct and need not match the domain name from\n+     the WebLogic domain configuration. Defaults to the value of\n+     `metadata.name`.\n+```\n \n-* `domainUID`: The domain unique identifier. Must be unique across the Kubernetes cluster. Not required. Defaults to the value of `metadata.name`.\n-* `image`: The WebLogic Docker image. Required when `domainHomeSourceType` is `Image`; otherwise, defaults to `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n-* `imagePullPolicy`: The image pull policy for the WebLogic Docker image. Legal values are `Always`, `Never`, and `IfNotPresent`. Defaults to `Always` if image ends in `:latest`; `IfNotPresent` otherwise.\n-* `imagePullSecrets`: A list of image pull secrets for the WebLogic Docker image.\n-* `domainHome`: The folder for the WebLogic domain. Not required. Defaults to `/shared/domains/domains/domainUID` if `domainHomeSourceType` is `PersistentVolume`. Defaults to `/u01/oracle/user_projects/domains/` if `domainHomeSourceType` is `Image`. Defaults to `/u01/domains/domainUID` if `domainHomeSourceType` is `FromModel`.\n-* `domainHomeSourceType`: The source for the domain home. Legal values are `Image` (for Domain in Image), `PersistentVolume` (for Domain in PV), and `FromModel` (for Model in Image). Defaults to `Image`.\n+The `metadata` section names the Domain and its namespace.  The name of the Domain is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name. The Domain name must be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, Domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n \n+The `spec` section describes the intended running state of the domain, including intended runtime state of WebLogic Server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+\n+The operator automatically updates the `status` section to describe the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+\n+#### Domain spec elements\n+\n+The Domain `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+\n+Elements related to domain identification, container image, and domain home:\n+\n+* `domainUID`: Domain unique identifier. It is recommended that this value be unique to assist in future work to identify related domains in active-passive scenarios across data centers; however, it is only required that this value be unique within the namespace, similarly to the names of Kubernetes resources. This value is distinct and need not match the domain name from the WebLogic domain configuration. Defaults to the value of `metadata.name`.\n+* `image`: The WebLogic container image; required when `domainHomeSourceType` is Image or FromModel; otherwise, defaults to container-registry.oracle.com/middleware/weblogic:12.2.1.4.\n+* `imagePullPolicy`: The image pull policy for the WebLogic container image. Legal values are Always, Never and IfNotPresent. Defaults to Always if image ends in :latest; IfNotPresent, otherwise.\n+* `imagePullSecrets`: A list of image pull Secrets for the WebLogic container image.\n+* `domainHome`: The directory containing the WebLogic domain configuration inside the container. Defaults to /shared/domains/domains/<domainUID> if `domainHomeSourceType` is PersistentVolume. Defaults to /u01/oracle/user_projects/domains/ if `domainHomeSourceType` is Image. Defaults to /u01/domains/<domainUID> if `domainHomeSourceType` is FromModel.\n+* `domainHomeSourceType`: Domain home file system source type: Legal values: Image, PersistentVolume, FromModel. Image indicates that the domain home file system is present in the container image specified by the `image` field. PersistentVolume indicates that the domain home file system is located on a persistent volume. FromModel indicates that the domain home file system will be created and managed by the operator based on a WDT domain model. If this field is specified, it overrides the value of `domainHomeInImage`. If both fields are unspecified, then `domainHomeSourceType` defaults to Image.\n+* `dataHome`: An optional directory in a server's container for data storage of default and custom file stores. If `dataHome` is not specified or its value is either not set or empty, then the data storage directories are determined from the WebLogic domain configuration.\n+                   \n Elements related to logging:\n \n-* `includeServerOutInPodLog`: If true (the default), the server `.out` file will be included in the pod's `stdout`.\n-* `logHome`: The in-pod name of the directory in which to store the domain, Node Manager, server logs, and server `.out` files. Defaults to `/shared/logs/<domainUID>`. Ignored if `logHomeEnabled` is `false`.\n-* `logHomeEnabled`: Specifies whether the log home folder is enabled. Not required. Defaults to true if `domainHomeSourceType` is `PersistentVolume`. Defaults to false if `domainHomeSourceType` is `Image` or `FromModel`.\n+* `includeServerOutInPodLog`: Specifies whether the server .out file will be included in the Pod's log. Defaults to true.\n+* `logHome`: The directory in a server's container in which to store the domain, Node Manager, server logs, server *.out, and optionally HTTP access log files if `httpAccessLogInLogHome` is true. Ignored if `logHomeEnabled` is false.\n+* `logHomeEnabled`: Specifies whether the log home folder is enabled. Defaults to true if `domainHomeSourceType` is PersistentVolume; false, otherwise.\n+* `httpAccessLogInLogHome`: Specifies whether the server HTTP access log files will be written to the same directory specified in `logHome`. Otherwise, server HTTP access log files will be written to the directory configured in the WebLogic domain configuration. Defaults to true.\n \n Elements related to security:\n \n-* `webLogicCredentialsSecret`: The name of a pre-created Kubernetes Secret, in the domain resource's namespace, that holds the user name and password needed to boot WebLogic Server under the `username` and `password` fields.\n+* `webLogicCredentialsSecret`: Reference to a Kubernetes Secret that contains the user name and password needed to boot a WebLogic Server under the `username` and `password` fields.\n * See also elements under `configuration` below.\n \n Elements related to domain [startup and shutdown]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup.md\" >}}):\n \n-* `serverStartPolicy`: The strategy for deciding whether to start a server. Legal values are `ADMIN_ONLY`, `NEVER`, or `IF_NEEDED`.\n-* `serverStartState`: The state in which the server is to be started. Use `ADMIN` if the server should start in the admin state. Defaults to `RUNNING`.\n-* `restartVersion`: If present, every time this value is updated, the operator will restart the required servers.\n-* `replicas`: The number of Managed Servers to run in any cluster that does not specify a `replicas` count.\n+* `serverStartPolicy`: The strategy for [deciding whether to start](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#starting-and-stopping-servers) a WebLogic Server instance. Legal values are ADMIN_ONLY, NEVER, or IF_NEEDED. Defaults to IF_NEEDED.\n+* `serverStartState`: The WebLogic runtime state in which the server is to be started. Use ADMIN if the server should start in the admin state. Defaults to RUNNING.\n+* `restartVersion`: Changes to this field cause the [operator to restart](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#restarting-servers) WebLogic Server instances.\n+* `replicas`: The default number of cluster member Managed Server instances to start for each WebLogic cluster in the domain configuration, unless `replicas` is specified for that cluster under the `clusters` field. For each cluster, the operator will sort cluster member Managed Server names from the WebLogic domain configuration by normalizing any numbers in the Managed Server name and then sorting alphabetically. This is done so that server names such as \"managed-server10\" come after \"managed-server9\". The operator will then start Managed Servers from the sorted list, up to the `replicas` count, unless specific Managed Servers are specified as starting in their entry under the `managedServers` field. In that case, the specified Managed Servers will be started and then additional cluster members will be started, up to the `replicas` count, by finding further cluster members in the sorted list that are not already started. If cluster members are started because of their entries under `managedServers`, then a cluster may have more cluster members running than its `replicas` count. Defaults to 0.\n+* `maxClusterConcurrentStartup`: The maximum number of cluster member Managed Server instances that the operator will start in parallel for a given cluster, if `maxConcurrentStartup` is not specified for a specific cluster under the `clusters` field. A value of 0 means there is no configured limit. Defaults to 0.\n+* `allowReplicasBelowMinDynClusterSize`: Whether to allow the number of running cluster member Managed Server instances to drop below the minimum dynamic cluster size configured in the WebLogic domain configuration, if this is not specified for a specific cluster under the `clusters` field. Defaults to true.\n+* `introspectVersion`: Changes to this field cause the operator to repeat its introspection of the WebLogic domain configuration. Repeating introspection is required for the operator to recognize changes to the domain configuration, such as adding a new WebLogic cluster or Managed Server instance, to regenerate configuration overrides, or to regenerate the WebLogic domain home when the `domainHomeSourceType` is FromModel. Introspection occurs automatically, without requiring change to this field, when servers are first started or restarted after a full domain shutdown. For the FromModel `domainHomeSourceType`, introspection also occurs when a running server must be restarted because of changes to any of the fields [listed here](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#properties-that-cause-servers-to-be-restarted). See also `overridesConfigurationStrategy`.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0ODQ5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452248491", "bodyText": "model in Image -> Model in Image", "author": "rosemarymarano", "createdAt": "2020-07-09T14:12:56Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.\n \n-The `metadata` section names the domain resource and its namespace.  The name of the domain resource is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name.  The domain resource name is required to be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n+For Kubernetes 1.16 and above:\n \n-The `spec` section describes the intended running state of the domain, including intended runtime state of server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+```none\n+$ kubectl create -f kubernetes/crd/domain-crd.yaml\n+```\n \n-The `status` section is updated by the operator and describes the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+For Kubernetes 1.15 and below:\n \n-#### Domain resource spec elements\n+```none\n+$ kubectl create -f kubernetes/crd/domain-v1beta1-crd.yaml\n+```\n \n-The domain resource `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+After the CustomResourceDefinition is installed, either by the operator or using one of the `create` commands above, you can verify that the CRD is installed correctly using:\n \n-Elements related to domain identification, Docker image, and domain home:\n+```none\n+$ kubectl get crd domains.weblogic.oracle\n+```\n+\n+If you are using Kubernetes 1.16 or above, you can access the description of any field of the Domain using `kubectl explain`. For instance, the following command displays the description of the `domainUID` field:\n+\n+```none\n+$ kubectl explain domains.spec.domainUID\n+KIND:     Domain\n+VERSION:  weblogic.oracle/v8\n+\n+FIELD:    domainUID <string>\n+\n+DESCRIPTION:\n+     Domain unique identifier. It is recommended that this value be unique to\n+     assist in future work to identify related domains in active-passive\n+     scenarios across data centers; however, it is only required that this value\n+     be unique within the namespace, similarly to the names of Kubernetes\n+     resources. This value is distinct and need not match the domain name from\n+     the WebLogic domain configuration. Defaults to the value of\n+     `metadata.name`.\n+```\n \n-* `domainUID`: The domain unique identifier. Must be unique across the Kubernetes cluster. Not required. Defaults to the value of `metadata.name`.\n-* `image`: The WebLogic Docker image. Required when `domainHomeSourceType` is `Image`; otherwise, defaults to `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n-* `imagePullPolicy`: The image pull policy for the WebLogic Docker image. Legal values are `Always`, `Never`, and `IfNotPresent`. Defaults to `Always` if image ends in `:latest`; `IfNotPresent` otherwise.\n-* `imagePullSecrets`: A list of image pull secrets for the WebLogic Docker image.\n-* `domainHome`: The folder for the WebLogic domain. Not required. Defaults to `/shared/domains/domains/domainUID` if `domainHomeSourceType` is `PersistentVolume`. Defaults to `/u01/oracle/user_projects/domains/` if `domainHomeSourceType` is `Image`. Defaults to `/u01/domains/domainUID` if `domainHomeSourceType` is `FromModel`.\n-* `domainHomeSourceType`: The source for the domain home. Legal values are `Image` (for Domain in Image), `PersistentVolume` (for Domain in PV), and `FromModel` (for Model in Image). Defaults to `Image`.\n+The `metadata` section names the Domain and its namespace.  The name of the Domain is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name. The Domain name must be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, Domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n \n+The `spec` section describes the intended running state of the domain, including intended runtime state of WebLogic Server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+\n+The operator automatically updates the `status` section to describe the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+\n+#### Domain spec elements\n+\n+The Domain `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+\n+Elements related to domain identification, container image, and domain home:\n+\n+* `domainUID`: Domain unique identifier. It is recommended that this value be unique to assist in future work to identify related domains in active-passive scenarios across data centers; however, it is only required that this value be unique within the namespace, similarly to the names of Kubernetes resources. This value is distinct and need not match the domain name from the WebLogic domain configuration. Defaults to the value of `metadata.name`.\n+* `image`: The WebLogic container image; required when `domainHomeSourceType` is Image or FromModel; otherwise, defaults to container-registry.oracle.com/middleware/weblogic:12.2.1.4.\n+* `imagePullPolicy`: The image pull policy for the WebLogic container image. Legal values are Always, Never and IfNotPresent. Defaults to Always if image ends in :latest; IfNotPresent, otherwise.\n+* `imagePullSecrets`: A list of image pull Secrets for the WebLogic container image.\n+* `domainHome`: The directory containing the WebLogic domain configuration inside the container. Defaults to /shared/domains/domains/<domainUID> if `domainHomeSourceType` is PersistentVolume. Defaults to /u01/oracle/user_projects/domains/ if `domainHomeSourceType` is Image. Defaults to /u01/domains/<domainUID> if `domainHomeSourceType` is FromModel.\n+* `domainHomeSourceType`: Domain home file system source type: Legal values: Image, PersistentVolume, FromModel. Image indicates that the domain home file system is present in the container image specified by the `image` field. PersistentVolume indicates that the domain home file system is located on a persistent volume. FromModel indicates that the domain home file system will be created and managed by the operator based on a WDT domain model. If this field is specified, it overrides the value of `domainHomeInImage`. If both fields are unspecified, then `domainHomeSourceType` defaults to Image.\n+* `dataHome`: An optional directory in a server's container for data storage of default and custom file stores. If `dataHome` is not specified or its value is either not set or empty, then the data storage directories are determined from the WebLogic domain configuration.\n+                   \n Elements related to logging:\n \n-* `includeServerOutInPodLog`: If true (the default), the server `.out` file will be included in the pod's `stdout`.\n-* `logHome`: The in-pod name of the directory in which to store the domain, Node Manager, server logs, and server `.out` files. Defaults to `/shared/logs/<domainUID>`. Ignored if `logHomeEnabled` is `false`.\n-* `logHomeEnabled`: Specifies whether the log home folder is enabled. Not required. Defaults to true if `domainHomeSourceType` is `PersistentVolume`. Defaults to false if `domainHomeSourceType` is `Image` or `FromModel`.\n+* `includeServerOutInPodLog`: Specifies whether the server .out file will be included in the Pod's log. Defaults to true.\n+* `logHome`: The directory in a server's container in which to store the domain, Node Manager, server logs, server *.out, and optionally HTTP access log files if `httpAccessLogInLogHome` is true. Ignored if `logHomeEnabled` is false.\n+* `logHomeEnabled`: Specifies whether the log home folder is enabled. Defaults to true if `domainHomeSourceType` is PersistentVolume; false, otherwise.\n+* `httpAccessLogInLogHome`: Specifies whether the server HTTP access log files will be written to the same directory specified in `logHome`. Otherwise, server HTTP access log files will be written to the directory configured in the WebLogic domain configuration. Defaults to true.\n \n Elements related to security:\n \n-* `webLogicCredentialsSecret`: The name of a pre-created Kubernetes Secret, in the domain resource's namespace, that holds the user name and password needed to boot WebLogic Server under the `username` and `password` fields.\n+* `webLogicCredentialsSecret`: Reference to a Kubernetes Secret that contains the user name and password needed to boot a WebLogic Server under the `username` and `password` fields.\n * See also elements under `configuration` below.\n \n Elements related to domain [startup and shutdown]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup.md\" >}}):\n \n-* `serverStartPolicy`: The strategy for deciding whether to start a server. Legal values are `ADMIN_ONLY`, `NEVER`, or `IF_NEEDED`.\n-* `serverStartState`: The state in which the server is to be started. Use `ADMIN` if the server should start in the admin state. Defaults to `RUNNING`.\n-* `restartVersion`: If present, every time this value is updated, the operator will restart the required servers.\n-* `replicas`: The number of Managed Servers to run in any cluster that does not specify a `replicas` count.\n+* `serverStartPolicy`: The strategy for [deciding whether to start](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#starting-and-stopping-servers) a WebLogic Server instance. Legal values are ADMIN_ONLY, NEVER, or IF_NEEDED. Defaults to IF_NEEDED.\n+* `serverStartState`: The WebLogic runtime state in which the server is to be started. Use ADMIN if the server should start in the admin state. Defaults to RUNNING.\n+* `restartVersion`: Changes to this field cause the [operator to restart](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#restarting-servers) WebLogic Server instances.\n+* `replicas`: The default number of cluster member Managed Server instances to start for each WebLogic cluster in the domain configuration, unless `replicas` is specified for that cluster under the `clusters` field. For each cluster, the operator will sort cluster member Managed Server names from the WebLogic domain configuration by normalizing any numbers in the Managed Server name and then sorting alphabetically. This is done so that server names such as \"managed-server10\" come after \"managed-server9\". The operator will then start Managed Servers from the sorted list, up to the `replicas` count, unless specific Managed Servers are specified as starting in their entry under the `managedServers` field. In that case, the specified Managed Servers will be started and then additional cluster members will be started, up to the `replicas` count, by finding further cluster members in the sorted list that are not already started. If cluster members are started because of their entries under `managedServers`, then a cluster may have more cluster members running than its `replicas` count. Defaults to 0.\n+* `maxClusterConcurrentStartup`: The maximum number of cluster member Managed Server instances that the operator will start in parallel for a given cluster, if `maxConcurrentStartup` is not specified for a specific cluster under the `clusters` field. A value of 0 means there is no configured limit. Defaults to 0.\n+* `allowReplicasBelowMinDynClusterSize`: Whether to allow the number of running cluster member Managed Server instances to drop below the minimum dynamic cluster size configured in the WebLogic domain configuration, if this is not specified for a specific cluster under the `clusters` field. Defaults to true.\n+* `introspectVersion`: Changes to this field cause the operator to repeat its introspection of the WebLogic domain configuration. Repeating introspection is required for the operator to recognize changes to the domain configuration, such as adding a new WebLogic cluster or Managed Server instance, to regenerate configuration overrides, or to regenerate the WebLogic domain home when the `domainHomeSourceType` is FromModel. Introspection occurs automatically, without requiring change to this field, when servers are first started or restarted after a full domain shutdown. For the FromModel `domainHomeSourceType`, introspection also occurs when a running server must be restarted because of changes to any of the fields [listed here](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#properties-that-cause-servers-to-be-restarted). See also `overridesConfigurationStrategy`.\n \n Elements related to specifying and overriding WebLogic domain configuration:\n \n * These elements are under `configuration`.\n \n-  * `overridesConfigMap`: The name of the ConfigMap for optional [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}). The value only applies if the `domainHomeSourceType` is `Image` or `PersistentVolume`. Do not set this value if the `domainHomeSourceType` is `FromModel`.\n-  * `secrets`: A list of secret names for optional [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}) macros or Model in Image [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) macros. Often used for specifying data source URLs, user names, and passwords.\n-  * `introspectorJobActiveDeadlineSeconds`: Time in seconds before timing out the introspector job. Default is 120 seconds.\n-\n+  * `overridesConfigMap`: The name of the ConfigMap for WebLogic [configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}). If this field is specified, then the value of `spec.configOverrides` is ignored.\n+  * `overrideDistributionStrategy`: Determines how updated configuration overrides are distributed to already running WebLogic Server instances following introspection when the `domainHomeSourceType` is PersistentVolume or Image. Configuration overrides are generated during introspection from Secrets, the `overrideConfigMap` field, and WebLogic domain topology. Legal values are DYNAMIC, which means that the operator will distribute updated configuration overrides dynamically to running servers, and ON_RESTART, which means that servers will use updated configuration overrides only after the server's next restart. The selection of ON_RESTART will not cause servers to restart when there are updated configuration overrides available. See also `introspectVersion`. Defaults to DYNAMIC.\n+  * `secrets`: A list of names of the Secrets for WebLogic [configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}) or model. If this field is specified, then the value of `spec.configOverrideSecrets` is ignored.\n+  * `introspectorJobActiveDeadlineSeconds`: The introspector job timeout value in seconds. If this field is specified, then the operator's ConfigMap `data.introspectorJobActiveDeadlineSeconds` value is ignored. Defaults to 120 seconds.\n+  \n * These elements are under `configuration.model`, only apply if the `domainHomeSourceType` is `FromModel`, and are discussed in [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}).\n \n-  * `configMap`: Optional configuration map for supplying [runtime model file updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) to Model in Image model configuration.\n-  * `domainType`: Must be one of `WLS`, `JRF`, or `RestrictedJRF`.  Default is `WLS`.\n-  * `runtimeEncryptionSecret`: Required. Expected field is `password`. This is used by Model in Image to encrypt data while the data is passed from the introspector job to WebLogic pods. The password can be arbitrary: the only requirement is that it must stay the same for the life of a domain resource. If a domain resource is deleted then redeployed, it's fine to change the password during the interim.\n-  * `wdtEncryptionSecret`: Optional. Rarely used. See [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) for details.\n+  * `configMap`: Name of a ConfigMap containing the WebLogic Deploy Tooling model.\n+  * `domainType`: WebLogic Deploy Tooling domain type. Legal values: WLS, RestrictedJRF, JRF. Defaults to WLS.\n+  * `runtimeEncryptionSecret`: Runtime encryption secret. Required when `domainHomeSourceType` is set to FromModel.\n \n * These elements are under `configuration.opss`, and only apply if the `domainHomeSourceType` is `FromModel` and the `domainType` is `JRF`.\n \n-  * `walletPasswordSecret`: The expected secret field is `walletPassword`. Used to encrypt/decrypt the wallet that's used for accessing the domain's entries in its RCU database.\n-  * `walletFileSecret`: Optional. The expected secret field is `walletFile`. Use this to allow a JRF domain to reuse its entries in the RCU database (specify a wallet file that was obtained from the domain home while the domain was booted for the first time).\n+  * `walletPasswordSecret`: Name of a Secret containing the OPSS key passphrase.\n+  * `walletFileSecret`: Name of a Secret containing the OPSS key wallet file.\n+\n+* These elements are under `configuration.istio`.\n+\n+  * `enabled`: True, if this domain is deployed under an Istio service mesh. Defaults to true when the `istio` field is specified.\n+  * `readinessPort`: The operator will create a WebLogic network access point with this port for use by the readiness probe. Defaults to 8888.\n \n Elements related to Kubernetes Pod and Service generation:\n \n-* `serverPod`: Configuration affecting server pods for WebLogic Server instances. Most entries specify standard Kubernetes content for pods that you may want the operator to include in pods generated for WebLogic Server instances, such as labels, annotations, volumes, or scheduling constraints, including anti-affinity.\n-* `serverService`: Customization affecting ClusterIP Kubernetes services for WebLogic Server instances.\n+* `serverPod`: Customization affecting the generation of Pods for WebLogic Server instances. \n+* `serverService`: Customization affecting the generation of Kubernetes Services for WebLogic Server instances.\n \n Sub-sections related to the Administration Server, specific clusters, or specific Managed Servers:\n \n-* `adminServer`: Configuration for the Administration Server.\n-* `clusters`: Configuration for specific clusters.\n-* `managedServers`: Configuration for specific Managed Servers.\n+* `adminServer`: Lifecycle options for the Administration Server, including Java options, environment variables, additional Pod content, and which channels or network access points should be exposed using a NodePort Service.\n+* `clusters`: Lifecycle options for all of the Managed Server members of a WebLogic cluster, including Java options, environment variables, additional Pod content, and the ability to explicitly start, stop, or restart cluster members. The `clusterName` field of each entry must match a cluster that already exists in the WebLogic domain configuration.\n+* `managedServers`: Lifecycle options for individual Managed Servers, including Java options, environment variables, additional Pod content, and the ability to explicitly start, stop, or restart a named server instance. The `serverName` field of each entry must match a Managed Server that already exists in the WebLogic domain configuration or that matches a dynamic cluster member based on the server template.\n \n The elements `serverStartPolicy`, `serverStartState`, `serverPod` and `serverService` are repeated under `adminServer` and under each entry of `clusters` or `managedServers`.  The values directly under `spec`, set the defaults for the entire domain.  The values under a specific entry under `clusters`, set the defaults for cluster members of that cluster.  The values under `adminServer` or an entry under `managedServers`, set the values for that specific server.  Values from the domain scope and values from the cluster (for cluster members) are merged with or overridden by the setting for the specific server depending on the element.  See [Startup and shutdown]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup.md\" >}}) for details about `serverStartPolicy` combinations.\n \n ### JVM memory and Java option environment variables\n \n You can use the following environment variables to specify JVM memory and JVM option arguments to WebLogic Server Managed Server and Node Manager instances:\n \n-* `JAVA_OPTIONS` : Java options for starting WebLogic Server.\n-* `USER_MEM_ARGS` : JVM memory arguments for starting WebLogic Server.\n-* `NODEMGR_JAVA_OPTIONS` : Java options for starting a Node Manager instance.\n-* `NODEMGR_MEM_ARGS` : JVM memory arguments for starting a Node Manager instance.\n-* `WLST_PROPERTIES` : System properties for WLST commands in introspector jobs or WebLogic pods.\n-* `WLSDEPLOY_PROPERTIES` : System properties for WebLogic Deploy Tool commands in Model in Image introspector jobs or WebLogic pods.\n+* `JAVA_OPTIONS`: Java options for starting WebLogic Server.\n+* `USER_MEM_ARGS`: JVM memory arguments for starting WebLogic Server.\n+* `NODEMGR_JAVA_OPTIONS`: Java options for starting a Node Manager instance.\n+* `NODEMGR_MEM_ARGS`: JVM memory arguments for starting a Node Manager instance.\n+* `WLST_PROPERTIES`: System properties for WLST commands in introspector jobs or WebLogic Server instance containers.\n+* `WLSDEPLOY_PROPERTIES`: System properties for WebLogic Deploy Tool commands during model in Image introspector jobs or WebLogic Server instance containers.", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1ODI4Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452258287", "bodyText": "full domain shutdown -> full domain shut down", "author": "rosemarymarano", "createdAt": "2020-07-09T14:26:34Z", "path": "docs/domains/Domain.md", "diffHunk": "@@ -30,7 +30,7 @@ The specification of the operation of the WebLogic domain. Required.\n | `imagePullPolicy` | string | The image pull policy for the WebLogic container image. Legal values are Always, Never and IfNotPresent. Defaults to Always if image ends in :latest; IfNotPresent, otherwise. |\n | `imagePullSecrets` | array of [Local Object Reference](k8s1.13.5.md#local-object-reference) | A list of image pull Secrets for the WebLogic container image. |\n | `includeServerOutInPodLog` | Boolean | Specifies whether the server .out file will be included in the Pod's log. Defaults to true. |\n-| `introspectVersion` | string | Changes to this field cause the operator to repeat its introspection of the WebLogic domain configuration. Repeating introspection is required for the operator to recognize changes to the domain configuration, such as adding a new WebLogic cluster or Managed Server instance, to regenerate configuration overrides, or to regenerate the WebLogic domain home when the `domainHomeSourceType` is FromModel. Introspection occurs automatically, without requiring change to this field, when servers are first started or restarted after a full domain shutdown. For the FromModel `domainHomeSourceType`, introspection also occurs when a running server must be restarted because of changes to any of the fields listed here: https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#properties-that-cause-servers-to-be-restarted. See also `overridesConfigurationStrategy`. |\n+| `introspectVersion` | string | Changes to this field cause the operator to repeat its introspection of the WebLogic domain configuration. Repeating introspection is required for the operator to recognize changes to the domain configuration, such as adding a new WebLogic cluster or Managed Server instance, to regenerate configuration overrides, or to regenerate the WebLogic domain home when the `domainHomeSourceType` is FromModel. Introspection occurs automatically, without requiring change to this field, when servers are first started or restarted after a full domain shutdown. For the FromModel `domainHomeSourceType`, introspection also occurs when a running server must be restarted because of changes to any of the fields listed here: https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#properties-that-cause-servers-to-be-restarted. See also `domains.spec.configuration.overridesConfigurationStrategy`. |", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "message": "Review comments", "committedDate": "2020-07-09T15:15:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTQ3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452295471", "bodyText": "integration-tests: Integration test suite (see also new-integration-tests)\nnew-integration-tests: Integration test suite (see also integration-tests)", "author": "tbarnes-us", "createdAt": "2020-07-09T15:16:50Z", "path": "docs-source/content/developerguide/code-structure.md", "diffHunk": "@@ -13,11 +13,11 @@ This project has the following directory structure:\n * `json-schema-maven-plugin`: Maven plugin for schema generator\n * `kubernetes/charts`: Helm charts\n * `kubernetes/samples`: All samples, including for WebLogic domain creation\n-* `model`: Domain resource Java model\n+* `model`: Domain Java model", "originalCommit": "8e746fd0279a81cb175cf0904a8f6720cc4b5e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNzAzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452317038", "bodyText": "The configuration overrides row  of 'choosing-a-model' needs update - as we no longer always require restarting a domain to propagate runtime override modifications.", "author": "tbarnes-us", "createdAt": "2020-07-09T15:47:58Z", "path": "docs-source/content/userguide/managing-domains/choosing-a-model/_index.md", "diffHunk": "@@ -21,7 +21,7 @@ Note that you can use different domain home types for different domains; there's\n | No state is kept in Docker images making them completely throw away (cattle not pets). | Runtime state should not be kept in the images, but applications and configuration are. | Runtime state should not be kept in the images.  Application and configuration may be. |\n | The domain is long-lived, so you can mutate the configuration or deploy new applications using standard methods (Administration Console, WLST, and such). You can also mutate the configuration using configuration overrides. | If you want to mutate the domain home configuration, then you can apply configuration overrides or create a new image. If you want to deploy application updates, then you must create a new image. | If you want to mutate the domain home configuration, then you can override it with additional model files supplied in a ConfigMap or you can supply a new image. If you want to deploy application updates, then you must create a new image.  |\n | You can use configuration overrides to mutate the domain at runtime, but this requires first shutting down the entire domain, and then restarting it for the change to take effect. | You can use configuration overrides to mutate the domain home at runtime, but this requires first shutting down the entire domain, and then restarting it for the change to take effect. You should not use the Administration Console or WLST for these domains as changes are ephemeral and will be lost when servers restart. | You can deploy model files to a ConfigMap to mutate the domain at runtime, and may not need to restart the entire domain for the change to take effect. Instead, you can initiate a rolling upgrade, which restarts your WebLogic Server pods one at a time. Also, the model file syntax is far simpler and less error prone than the configuration override syntax, and, unlike configuration overrides, allows you to directly add data sources and JMS modules. You should not use the Administration Console or WLST for these domains as changes are ephemeral and will be lost when servers restart. |", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMzQ0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452323447", "bodyText": "The config overrides documentation needs to be updated to reflect the new introspectVersion support. This includes, but may not be limited to:\n\nAdding a section about introspectVersion and/or reference the new related documentation.\nLooking for keywords like stopping, starting, and restarting and make it clear in their respective locations that a full domain restart isn't always needed.\nUpdating the 'internal design flow' section at the end.", "author": "tbarnes-us", "createdAt": "2020-07-09T15:57:50Z", "path": "docs-source/content/userguide/managing-domains/configoverrides/_index.md", "diffHunk": "@@ -36,22 +36,22 @@ You can use overrides to customize domains as they are moved from QA to producti\n \n * Make sure your domain home meets the prerequisites. See [Prerequisites](#prerequisites).\n * Make sure your overrides are supported. See [Typical overrides](#typical-overrides) and [Unsupported overrides](#unsupported-overrides).\n-* Create a Kubernetes configuration map that contains:\n+* Create a Kubernetes ConfigMap that contains:", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMzEyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453823124", "bodyText": "It looks like the 'checklist', 'step-by-step', and 'limitations' sections could still use some rework.  Perhaps others?", "author": "tbarnes-us", "createdAt": "2020-07-13T17:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMzQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTcxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452301710", "bodyText": "@rosemarymarano can you make a suggestion here.  I stumbled and had to re-read these sentences three times before I understood them.", "author": "ddsharpe", "createdAt": "2020-07-09T15:25:49Z", "path": "docs-source/content/developerguide/domain-processing.md", "diffHunk": "@@ -6,10 +6,10 @@ weight: 8\n ---\n \n \n-When the operator starts, it lists all existing Domain resources and processes these domains to create the necessary Kubernetes resources, such as Pods and Services, if they don't already exist.  This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain resource.\n+When the operator starts, it lists all existing Domains and processes these Domains to create the necessary Kubernetes resources, such as Pods and Services, if they don't already exist.  This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain.", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MjUyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452342524", "bodyText": "@ddsharpe @rjeberhard We can add a few words to the first sentence to help clarify it or break it into two sentences, if you prefer. Suggestion 1: \"When the operator starts, it lists all the existing Domains and then processes these Domains to create the necessary Kubernetes resources, such as Pods and Services, if they don't already exist.\" Suggestion 2: \"When the operator starts, it lists all the existing Domains. It then processes these Domains to create the necessary Kubernetes resources, such as Pods and Services, if they don't already exist.\" Are either of these choices better, or does it need further clarification?", "author": "rosemarymarano", "createdAt": "2020-07-09T16:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMzgxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452303818", "bodyText": "Should this be:\n\"If an EJB or JMS service is only running on an Administration Server...\"", "author": "ddsharpe", "createdAt": "2020-07-09T15:28:49Z", "path": "docs-source/content/faq/external-clients.md", "diffHunk": "@@ -146,7 +146,7 @@ In this example:\n \n A Kubernetes `NodePort` exposes a port on each worker node in the Kubernetes cluster (they are not typically exposed on masters), where the port is accessible from outside of a Kubernetes cluster. This port redirects network traffic to pods within the Kubernetes cluster. Setting up a Kubernetes `NodePort` is one approach for giving external WebLogic clients access to JMS or EJBs.\n \n-If an EJB or JMS service is running on an Administration Server, then you can skip the rest of this section and use the `spec.adminServer.adminService.channels` domain resource attribute to have the operator create a `NodePort` for you. See [Reference - Domain resource]({{<relref \"/reference/domain-resource/_index.md\">}}). Otherwise, if the EJB or JMS service is running in a WebLogic cluster or standalone WebLogic Server Managed Server, and you desire to provide access to the service using a `NodePort`, then the `NodePort` must be exposed 'manually' - see the following sample and table.\n+If an EJB or JMS service is running on an Administration Server, then you can skip the rest of this section and use the `spec.adminServer.adminService.channels` Domain field to have the operator create a `NodePort` for you. See [Reference - Domain]({{<relref \"/reference/domain-resource/_index.md\">}}). Otherwise, if the EJB or JMS service is running in a WebLogic cluster or standalone WebLogic Server Managed Server, and you desire to provide access to the service using a `NodePort`, then the `NodePort` must be exposed 'manually' - see the following sample and table.", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNzg2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452327868", "bodyText": "I think it'd be helpful to provide a debugging section here: minimally pointers to, or cut-and-pastes from, the model-in-image and config-overrides debugging sections.", "author": "tbarnes-us", "createdAt": "2020-07-09T16:05:03Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the\n+[domain home source types](({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}})) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the introspection runs in a Kubernetes Pod\n+as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is\n+analyzing the same WebLogic domain configuration that WebLogic Server instances will use.\n+\n+Introspection ensures that:\n+1. The operator is aware of domain topology from the WebLogic domain configuration, including servers, clusters, network access points, listen addresses, and other configurations.\n+2. The operator can generate configuration overrides to adjust the WebLogic domain configuration to match the Kubernetes environment, such as modifying listen addresses.\n+3. For Model in Image, the operator can generate the WebLogic domain home, including the final domain configuration.\n+4. For Domain in PV and Domain in Image, the operator can use any customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}) along with the operator-generated overrides to generate the final configuration overrides.\n+\n+#### When introspection occurs automatically\n+\n+Introspection automatically occurs when:\n+1. The operator is starting a WebLogic Server instance when there are currently no other servers running. This occurs when the operator first starts servers for a domain or when starting servers following a full domain shutdown.\n+2. For Model in Image, the operator determines that at least one WebLogic Server instance that is currently running must be shut down and restarted. This could be a rolling of one or more clusters, the shut down and restart of one or more WebLogic Server instances, or a combination.\n+\n+#### Initiating introspection\n+\n+Sometimes, such as for the [use cases](#introspection-use-cases) described below, it is desirable to explicitly initiate introspection. To initiate introspection, change the value of your Domain `introspectVersion` field.\n+\n+Set `introspectVersion` to a new value.\n+\n+```\n+  kind: Domain\n+  metadata:\n+    name: domain1\n+  spec:\n+    introspectVersion: \"2\"\n+    ...\n+```\n+\n+As with `restartVersion`, the `introspectVersion` field has no required format; however, we recommend using a value likely to be unique such as a continually increasing number or a timestamp.\n+\n+#### Failed introspection\n+\n+When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.\n+\n+The introspection will be periodically retried and then will eventually timeout with the Domain `status` indicating the processing failed. To recover from a failed state, correct the underlying problem and update the `introspectVersion`.\n+", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MDkyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452340929", "bodyText": "Also, just like in the introduction, consider working in a mention that the job is named DOMAIN_UID-introspect-domain-job and that it runs in the same namespace as the Domain.", "author": "tbarnes-us", "createdAt": "2020-07-09T16:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNzg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNzExNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452337117", "bodyText": "It'd be helpful to have a bolded and/or top level section that discusses dynamic override limitations.  Maybe this is a good candidate for 'notice' box.\nSpecifically, we should call out that dynamic overrides on running WL servers can only take effect if the corresponding mbean attribute is 'dynamic' (for example datasource Url and username fields are not dynamic, while the encryptedPassword field is).  Perhaps include a similar notice in the config-overrides doc.", "author": "tbarnes-us", "createdAt": "2020-07-09T16:19:51Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the\n+[domain home source types](({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}})) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the introspection runs in a Kubernetes Pod\n+as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is\n+analyzing the same WebLogic domain configuration that WebLogic Server instances will use.\n+\n+Introspection ensures that:\n+1. The operator is aware of domain topology from the WebLogic domain configuration, including servers, clusters, network access points, listen addresses, and other configurations.\n+2. The operator can generate configuration overrides to adjust the WebLogic domain configuration to match the Kubernetes environment, such as modifying listen addresses.\n+3. For Model in Image, the operator can generate the WebLogic domain home, including the final domain configuration.\n+4. For Domain in PV and Domain in Image, the operator can use any customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}) along with the operator-generated overrides to generate the final configuration overrides.\n+\n+#### When introspection occurs automatically\n+\n+Introspection automatically occurs when:\n+1. The operator is starting a WebLogic Server instance when there are currently no other servers running. This occurs when the operator first starts servers for a domain or when starting servers following a full domain shutdown.\n+2. For Model in Image, the operator determines that at least one WebLogic Server instance that is currently running must be shut down and restarted. This could be a rolling of one or more clusters, the shut down and restart of one or more WebLogic Server instances, or a combination.\n+\n+#### Initiating introspection\n+\n+Sometimes, such as for the [use cases](#introspection-use-cases) described below, it is desirable to explicitly initiate introspection. To initiate introspection, change the value of your Domain `introspectVersion` field.\n+\n+Set `introspectVersion` to a new value.\n+\n+```\n+  kind: Domain\n+  metadata:\n+    name: domain1\n+  spec:\n+    introspectVersion: \"2\"\n+    ...\n+```\n+\n+As with `restartVersion`, the `introspectVersion` field has no required format; however, we recommend using a value likely to be unique such as a continually increasing number or a timestamp.\n+\n+#### Failed introspection\n+\n+When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.\n+\n+The introspection will be periodically retried and then will eventually timeout with the Domain `status` indicating the processing failed. To recover from a failed state, correct the underlying problem and update the `introspectVersion`.\n+\n+### Introspection use cases\n+\n+#### Adding clusters or Managed Servers to the WebLogic domain configuration\n+\n+When you have an existing WebLogic domain home on a persistent volume (\"Domain in PV\") and you currently have WebLogic Server instances running, it is now possible to define new WebLogic clusters or Managed Servers in the domain configuration and start these new instances without affecting the life cycle of any WebLogic Server instances that are already running.\n+\n+Prior to operator 3.0.0, this was not possible because there was no mechanism to initiate introspection other than a full domain shut down and restart and so the operator was unaware of the new clusters or Managed Servers. Now, after updating the domain configuration, you can initiate introspection by changing the `introspectVersion`.\n+\n+For instance, if you had a domain configuration with a single cluster named \"cluster-1\" then your Domain YAML file may have content like this:\n+\n+```\n+spec:\n+  ...\n+  clusters:\n+    - clusterName: cluster-1\n+      replicas: 3\n+  ...\n+```\n+\n+If you modified your WebLogic domain configuration (using the console or WLST) to add a new dynamic cluster named \"cluster-2\", then you could immediately start cluster members of this new cluster by updating your Domain YAML file like this:\n+\n+```\n+spec:\n+  ...\n+  clusters:\n+    - clusterName: cluster-1\n+      replicas: 3\n+    - clusterName: cluster-2\n+      replicas: 2\n+  introspectVersion: \"2\"\n+  ...\n+```\n+\n+When this updated Domain YAML file is applied, the operator will initiate a new introspection of the domain configuration during which it will learn about the additional WebLogic cluster and then the operator will continue to start WebLogic Server instances that are members of this new cluster. In this case, the operator will start two Managed Servers that are members of the cluster named \"cluster-2\".\n+\n+#### Distributing changes to configuration overrides\n+\n+The operator supports customer-provided [configuration overrides]({{<relref \"/userguide/managing-domains/configoverrides/_index.md\">}}). These configuration overrides, which are supported with Domain in PV or Domain in Image, allow you to override elements of the domain configuration, such as data source URL's or credentials.\n+\n+With operator 3.0.0, you can now change the configuration overrides and distribute these new configuration overrides to already running WebLogic Server instances. To do this, update the ConfigMap that contains the configuration overrides or update one or more of the Secrets referenced by those configuration overrides and then initiate introspection by changing the `introspectVersion` field.\n+\n+We have introduced a new field, called `overrideDistributionStrategy` and located under `configuration`, that controls whether updated configuration overrides are distributed dynamically to already running WebLogic Server instances or if the new configuration overrides are only applied when servers are started or restarted.\n+\n+The default value for `overrideDistributionStrategy` is DYNAMIC, which means that new configuration overrides are distributed dynamically to already running WebLogic Server instances. \n+\n+Alternately, you can set `overrideDistributionStrategy` to ON_RESTART, which means that the new configuration overrides will not be distributed to already running WebLogic Server instances, but will instead be applied only to servers as they start or restart. Use of this value will *not* cause WebLogic Server instances to restart absent changes to other fields, such as `restartVersion`.", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzOTgxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452339816", "bodyText": "Consider working in a mention that the job is named DOMAIN_UID-introspect-domain-job and that it runs in the same namespace as the Domain.", "author": "tbarnes-us", "createdAt": "2020-07-09T16:24:26Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MDAwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452340006", "bodyText": "Consider working in a mention that the job is named DOMAIN_UID-introspect-domain-job and that it runs in the same namespace as the Domain.", "author": "tbarnes-us", "createdAt": "2020-07-09T16:24:40Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"Domain introspection\"\n+date: 2020-07-07T08:14:51-05:00\n+draft: true\n+weight: 5\n+description: \"This document describes domain introspection in the Oracle WebLogic Server in Kubernetes environment.\"\n+---\n+\n+\n+This document describes domain introspection, when it occurs automatically, and how and when to trigger additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.\n+\n+In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic\n+domain configuration using an \"introspection\" job. This job must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0Njg1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452346858", "bodyText": "Updating deployed applications for Domain in Image --> Updating deployed applications for Domain in Image or Model in Image", "author": "tbarnes-us", "createdAt": "2020-07-09T16:35:48Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0ODQzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452348431", "bodyText": "Indentation issue? This paragraph and the following don't appear to be indented as far as their owning bullet.  I could be wrong, as I didn't check in hugo, but the github markup parser is having an issue.", "author": "tbarnes-us", "createdAt": "2020-07-09T16:38:24Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image\n \n ### Use cases\n \n-#### Modifying the WebLogic Server configuration\n+#### Modifying the WebLogic domain configuration\n \n-Changes to the Oracle WebLogic Server configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n+Changes to the WebLogic domain configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n \n * **Domain in Image:**\n-For a domain home in image, any changes (dynamic or non-dynamic) to the WebLogic configuration requires a full domain restart.  \n-    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n-    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}).\n+\n+For Domain in Image, you may only perform a rolling restart if both the WebLogic configuration changes between the present image and a new image are dynamic and you have [followed the CI/CD guidelines]({{< relref \"/userguide/cicd/mutate-the-domain-layer\">}}) to create an image with compatible encryption keys.", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MjE4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452372185", "bodyText": "This is also having indenting issues (verified by viewing in hugo).", "author": "tbarnes-us", "createdAt": "2020-07-09T17:18:58Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image\n \n ### Use cases\n \n-#### Modifying the WebLogic Server configuration\n+#### Modifying the WebLogic domain configuration\n \n-Changes to the Oracle WebLogic Server configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n+Changes to the WebLogic domain configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n \n * **Domain in Image:**\n-For a domain home in image, any changes (dynamic or non-dynamic) to the WebLogic configuration requires a full domain restart.  \n-    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n-    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}).\n+\n+For Domain in Image, you may only perform a rolling restart if both the WebLogic configuration changes between the present image and a new image are dynamic and you have [followed the CI/CD guidelines]({{< relref \"/userguide/cicd/mutate-the-domain-layer\">}}) to create an image with compatible encryption keys.\n+\n+Otherwise, use of a new image that does not have compatible encryption keys or any non-dynamic configuration changes require a full domain restart.  \n+    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image field on a Domain](#avoiding-a-rolling-restart-when-changing-image-field-on-a-domain).\n+    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}).\n \n * **Model in Image:**\n \n-    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the domain resource image setting, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n+    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shut down before changing the Domain `image` field, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n \n-    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n+    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing the image field on a Domain](#avoiding-a-rolling-restart-when-changing-the-image-field-on-a-domain).\n \n-    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}). To initiate a rolling restart, change the value of your domain resource `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n+    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}). To initiate a rolling restart, change the value of your Domain `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n \n-    * If you are supplying updated models or secrets for a running domain, and you want the configuration updates to take effect using a rolling restart:\n-      * You must either supply a new image name in the domain resource or change the domain resource `restartVersion` in order to force the operator to reload the configuration.\n-      * With either of these two changes, the operator will rerun the domain's introspector job, which will verify and apply the new configuration. If the introspector job's configuration verification succeeds, then it will subsequently roll (restart) the pods; if the job fails, then a roll will not occur.\n-      * If you change other fields that typically cause a restart, such as `volumes`, `env`, and such, then the introspector job will not rerun and a rolling restart will proceed without loading the configuration changes.\n+    * If you are supplying updated models or Secrets for a running domain, and you want the configuration updates to take effect using a rolling restart, then do one of the following:\n+      * Supply a new value for the `image` field in the Domain or any of the other [fields affecting WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}).\n+      * Change the Domain `restartVersion` field. This will cause the operator to restart all running servers and, prior to the restarts, the operator will introspect any new configuration.\n+      * Change the Domain `introspectVersion` field. This will cause the operator to introspect any new configuration and, if needed, restart servers to use that new configuration.\n \n * **Domain in PV:**\n-For a domain home on PV, the type of restart needed to apply the changes depends on the nature of the WebLogic configuration change:\n-    * Changes to parts of the WebLogic configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n-      The following are the types of changes to the WebLogic Server configuration that the operator introspects:\n-        * Adding or removing a cluster, server, dynamic server, or network access point\n+\n+For Domain in PV, the type of restart needed depends on the nature of the WebLogic domain configuration change:", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MzIwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452373201", "bodyText": "Prepend \"With operator version 3.0.0, ...\" just like you did for the first bullet.", "author": "tbarnes-us", "createdAt": "2020-07-09T17:20:35Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image\n \n ### Use cases\n \n-#### Modifying the WebLogic Server configuration\n+#### Modifying the WebLogic domain configuration\n \n-Changes to the Oracle WebLogic Server configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n+Changes to the WebLogic domain configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n \n * **Domain in Image:**\n-For a domain home in image, any changes (dynamic or non-dynamic) to the WebLogic configuration requires a full domain restart.  \n-    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n-    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}).\n+\n+For Domain in Image, you may only perform a rolling restart if both the WebLogic configuration changes between the present image and a new image are dynamic and you have [followed the CI/CD guidelines]({{< relref \"/userguide/cicd/mutate-the-domain-layer\">}}) to create an image with compatible encryption keys.\n+\n+Otherwise, use of a new image that does not have compatible encryption keys or any non-dynamic configuration changes require a full domain restart.  \n+    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image field on a Domain](#avoiding-a-rolling-restart-when-changing-image-field-on-a-domain).\n+    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}).\n \n * **Model in Image:**\n \n-    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the domain resource image setting, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n+    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shut down before changing the Domain `image` field, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n \n-    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n+    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing the image field on a Domain](#avoiding-a-rolling-restart-when-changing-the-image-field-on-a-domain).\n \n-    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}). To initiate a rolling restart, change the value of your domain resource `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n+    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}). To initiate a rolling restart, change the value of your Domain `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n \n-    * If you are supplying updated models or secrets for a running domain, and you want the configuration updates to take effect using a rolling restart:\n-      * You must either supply a new image name in the domain resource or change the domain resource `restartVersion` in order to force the operator to reload the configuration.\n-      * With either of these two changes, the operator will rerun the domain's introspector job, which will verify and apply the new configuration. If the introspector job's configuration verification succeeds, then it will subsequently roll (restart) the pods; if the job fails, then a roll will not occur.\n-      * If you change other fields that typically cause a restart, such as `volumes`, `env`, and such, then the introspector job will not rerun and a rolling restart will proceed without loading the configuration changes.\n+    * If you are supplying updated models or Secrets for a running domain, and you want the configuration updates to take effect using a rolling restart, then do one of the following:\n+      * Supply a new value for the `image` field in the Domain or any of the other [fields affecting WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}).\n+      * Change the Domain `restartVersion` field. This will cause the operator to restart all running servers and, prior to the restarts, the operator will introspect any new configuration.\n+      * Change the Domain `introspectVersion` field. This will cause the operator to introspect any new configuration and, if needed, restart servers to use that new configuration.\n \n * **Domain in PV:**\n-For a domain home on PV, the type of restart needed to apply the changes depends on the nature of the WebLogic configuration change:\n-    * Changes to parts of the WebLogic configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n-      The following are the types of changes to the WebLogic Server configuration that the operator introspects:\n-        * Adding or removing a cluster, server, dynamic server, or network access point\n+\n+For Domain in PV, the type of restart needed depends on the nature of the WebLogic domain configuration change:\n+    * With operator version 3.0.0, domain configuration changes that add clusters, either configured or dynamic, cluster member servers, or standalone servers can now be performed dynamically. This support requires that the new clusters or servers are added to the domain configuration and then [triggering the operator's introspection]({{< relref \"/userguide/managing-domains/domain-lifecycle/introspection.md\" >}}) of that new configuration.\n+    * Other changes to parts of the domain configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n+      The following are the other types of changes to the domain configuration that the operator introspects:\n+        * Adding or removing a network access point\n         * Changing a cluster, server, dynamic server, or network access point name\n         * Enabling or disabling the listen port, SSL port, or admin port\n         * Changing any port numbers\n         * Changing a network access point's public address\n-    * Other dynamic WebLogic configuration changes do not require a restart.  For example, a change to a server's connection timeout property\n+    * Other dynamic WebLogic configuration changes do not require a restart. For example, a change to a server's connection timeout property", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3Mzc0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452373749", "bodyText": "Also, perhaps this bullet, and the next, can be grouped with the first bullet.", "author": "tbarnes-us", "createdAt": "2020-07-09T17:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MzIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMjE3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453832170", "bodyText": "It looks like this comment has not been addressed yet.", "author": "tbarnes-us", "createdAt": "2020-07-13T18:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MzIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkyNzg3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453927872", "bodyText": "I went the other way and made the \"it didn't always work like this\" a note after.", "author": "rjeberhard", "createdAt": "2020-07-13T20:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MzIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTE1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452375156", "bodyText": "I think we still don't support Adding/removing a server to/from an existing cluster.", "author": "tbarnes-us", "createdAt": "2020-07-09T17:24:03Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image\n \n ### Use cases\n \n-#### Modifying the WebLogic Server configuration\n+#### Modifying the WebLogic domain configuration\n \n-Changes to the Oracle WebLogic Server configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n+Changes to the WebLogic domain configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n \n * **Domain in Image:**\n-For a domain home in image, any changes (dynamic or non-dynamic) to the WebLogic configuration requires a full domain restart.  \n-    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n-    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}).\n+\n+For Domain in Image, you may only perform a rolling restart if both the WebLogic configuration changes between the present image and a new image are dynamic and you have [followed the CI/CD guidelines]({{< relref \"/userguide/cicd/mutate-the-domain-layer\">}}) to create an image with compatible encryption keys.\n+\n+Otherwise, use of a new image that does not have compatible encryption keys or any non-dynamic configuration changes require a full domain restart.  \n+    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image field on a Domain](#avoiding-a-rolling-restart-when-changing-image-field-on-a-domain).\n+    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}).\n \n * **Model in Image:**\n \n-    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the domain resource image setting, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n+    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shut down before changing the Domain `image` field, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n \n-    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n+    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing the image field on a Domain](#avoiding-a-rolling-restart-when-changing-the-image-field-on-a-domain).\n \n-    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}). To initiate a rolling restart, change the value of your domain resource `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n+    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}). To initiate a rolling restart, change the value of your Domain `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n \n-    * If you are supplying updated models or secrets for a running domain, and you want the configuration updates to take effect using a rolling restart:\n-      * You must either supply a new image name in the domain resource or change the domain resource `restartVersion` in order to force the operator to reload the configuration.\n-      * With either of these two changes, the operator will rerun the domain's introspector job, which will verify and apply the new configuration. If the introspector job's configuration verification succeeds, then it will subsequently roll (restart) the pods; if the job fails, then a roll will not occur.\n-      * If you change other fields that typically cause a restart, such as `volumes`, `env`, and such, then the introspector job will not rerun and a rolling restart will proceed without loading the configuration changes.\n+    * If you are supplying updated models or Secrets for a running domain, and you want the configuration updates to take effect using a rolling restart, then do one of the following:\n+      * Supply a new value for the `image` field in the Domain or any of the other [fields affecting WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}).\n+      * Change the Domain `restartVersion` field. This will cause the operator to restart all running servers and, prior to the restarts, the operator will introspect any new configuration.\n+      * Change the Domain `introspectVersion` field. This will cause the operator to introspect any new configuration and, if needed, restart servers to use that new configuration.\n \n * **Domain in PV:**\n-For a domain home on PV, the type of restart needed to apply the changes depends on the nature of the WebLogic configuration change:\n-    * Changes to parts of the WebLogic configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n-      The following are the types of changes to the WebLogic Server configuration that the operator introspects:\n-        * Adding or removing a cluster, server, dynamic server, or network access point\n+\n+For Domain in PV, the type of restart needed depends on the nature of the WebLogic domain configuration change:\n+    * With operator version 3.0.0, domain configuration changes that add clusters, either configured or dynamic, cluster member servers, or standalone servers can now be performed dynamically. This support requires that the new clusters or servers are added to the domain configuration and then [triggering the operator's introspection]({{< relref \"/userguide/managing-domains/domain-lifecycle/introspection.md\" >}}) of that new configuration.\n+    * Other changes to parts of the domain configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n+      The following are the other types of changes to the domain configuration that the operator introspects:\n+        * Adding or removing a network access point", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NjY3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452376675", "bodyText": "The owning bullet's two sentences are confusing when read together (Other changes... and The following ...).  They conflate what requires a full restart with what the operator introspects (they're not the same thing).", "author": "tbarnes-us", "createdAt": "2020-07-09T17:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNDU2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453634562", "bodyText": "How do you suggest that I update the wording? I don't really understand how we could not support adding a server to an existing cluster. Is your concern about whether already running servers would be able to properly address the new server or something else?", "author": "rjeberhard", "createdAt": "2020-07-13T13:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc0MDg4MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453740881", "bodyText": "Adding a server to an existing cluster has the following concerns:\n\nThis hasn't been tested.  It's not known how well this works in combination with a dynamic (or rolling?) update.\nThe admin server and existing servers need to know the overridden address/port of the new server, for JNDI, JTA, RMI stub load balancing, etc, purposes.\nIt's not clear if these fields are fully dynamic for mbean/configuration purposes, or for their individual purposes.", "author": "tbarnes-us", "createdAt": "2020-07-13T15:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1MzA4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453753083", "bodyText": "Do we document any of these limitations or problems for on-premise WebLogic? Just to clarify, I'm not doubting that there are problems here. It's just very ugly to only say that you can't add a server to an existing cluster for all use cases because there exist use cases where this may be problematic.", "author": "rjeberhard", "createdAt": "2020-07-13T15:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MzY1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453763653", "bodyText": "We don't know which use cases work well (if any) - there's been no testing IIRC.\nThe WL documentation for situational configuration doesn't seem to mention situations where network configuration of newly added sister-servers in a cluster is dynamically overridden: https://docs.oracle.com/middleware/12213/wls/DOMCF/changes.htm#DOMCF172", "author": "tbarnes-us", "createdAt": "2020-07-13T16:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjAxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453766019", "bodyText": "Okay, I'll try and come up with something.", "author": "rjeberhard", "createdAt": "2020-07-13T16:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMzE3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453833176", "bodyText": "The 'something' LGTM.", "author": "tbarnes-us", "createdAt": "2020-07-13T18:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MzgzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452383837", "bodyText": "This section leaves it unclear that some changes require rolling - it implies that all changes can be done dynamically.", "author": "tbarnes-us", "createdAt": "2020-07-09T17:39:42Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -3,116 +3,123 @@ title: \"Restarting\"\n date: 2019-02-23T20:58:51-05:00\n draft: false\n weight: 2\n-description: \"This document describes when to restart servers in the Oracle WebLogic Server in Kubernetes environment.\"\n+description: \"This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\"\n ---\n \n \n-This document describes _when_ to restart servers in the Oracle WebLogic Server in Kubernetes environment.\n+This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.\n \n #### Overview\n \n-There are many situations where changes to the Oracle WebLogic Server in Kubernetes environment require that all the servers in\n+There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in\n a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.\n \n-One of the operator's most important jobs is to start and stop WebLogic Servers by creating and deleting their corresponding Kubernetes Pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, sometimes the pods can be gradually recreated, without taking the entire domain out of service\n-(for example, `rolling restarts`) and sometimes all the pods need to be deleted then recreated, taking the entire domain out of\n-service for a while (for example, `full restarts`).\n+One of the operator's most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods. Sometimes, you need to make changes that make the pods obsolete, therefore the pods need to be deleted and recreated. Depending on the change, often the pods can be gradually recreated, without taking the domain or cluster out of service\n+(for example, \"rolling restarts\") and sometimes all the pods need to be deleted and then recreated as part of a downtime (for example, \"full restarts\").\n \n-The following types of server restarts are supported in Oracle WebLogic Server in Kubernetes:\n+The following types of server restarts are supported by the operator:\n \n * Rolling restarts - a coordinated and controlled shut down of all of the servers in a domain or cluster while ensuring that service to the end user is not interrupted.\n \n-   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of server pods in a WebLogic domain.\n+   * Operator initiated - where the WebLogic Server Kubernetes Operator can detect some types of changes and will automatically initiate rolling restarts of pods in a domain or cluster.\n \n    * Manually initiated - required when certain changes in the Oracle WebLogic Server in Kubernetes environment cannot be detected by the operator, so a rolling restart must be manually initiated.\n \n * Full domain restarts - the Administration Server and all the Managed Servers in a domain are shutdown, impacting service availability to the end user, and then restarted.  Unlike a rolling restart, the operator cannot detect and initiate a full domain restart; it must always be manually initiated.\n \n-For detailed information on how to restart servers in a Oracle WebLogic Server in Kubernetes environment, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n+For detailed information on how to restart servers using the operator, see [Starting, stopping, and restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md\" >}}).\n \n #### Common restart scenarios\n \n This document describes what actions you need to take to properly restart your servers for a number of common scenarios:\n \n-* Modifying the WebLogic configuration\n-* Changing the custom domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n+* Modifying the WebLogic domain configuration\n+* Changing the domain configuration overrides (also called situational configuration) for Domain in PV and Domain in Image domains\n * Changing the model files for Model in Image domains\n * Changing the WebLogic Server credentials (the user name and password)\n-* Changing properties on the domain resource that affect server pods (such as `image`, `volumes`, and `env`)\n+* Changing fields on the Domain that [affect WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}) (such as `image`, `volumes`, and `env`)\n * Applying WebLogic Server patches\n-* Updating deployed applications for domain home in image\n+* Updating deployed applications for Domain in Image\n \n ### Use cases\n \n-#### Modifying the WebLogic Server configuration\n+#### Modifying the WebLogic domain configuration\n \n-Changes to the Oracle WebLogic Server configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n+Changes to the WebLogic domain configuration may require either a rolling or full domain restart depending on the domain home location and the type of configuration change.\n \n * **Domain in Image:**\n-For a domain home in image, any changes (dynamic or non-dynamic) to the WebLogic configuration requires a full domain restart.  \n-    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n-    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}).\n+\n+For Domain in Image, you may only perform a rolling restart if both the WebLogic configuration changes between the present image and a new image are dynamic and you have [followed the CI/CD guidelines]({{< relref \"/userguide/cicd/mutate-the-domain-layer\">}}) to create an image with compatible encryption keys.\n+\n+Otherwise, use of a new image that does not have compatible encryption keys or any non-dynamic configuration changes require a full domain restart.  \n+    * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image field on a Domain](#avoiding-a-rolling-restart-when-changing-image-field-on-a-domain).\n+    * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}).\n \n * **Model in Image:**\n \n-    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the domain resource image setting, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n+    * Any image that supplies configuration changes that are incompatible with the current running domain require a full shut down before changing the Domain `image` field, instead of a rolling restart. For changes that support a rolling restart, see [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}).\n \n-    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n+    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing the image field on a Domain](#avoiding-a-rolling-restart-when-changing-the-image-field-on-a-domain).\n \n-    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}). To initiate a rolling restart, change the value of your domain resource `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n+    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\">}}). To initiate a rolling restart, change the value of your Domain `restartVersion` field.  See [Restarting servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}).\n \n-    * If you are supplying updated models or secrets for a running domain, and you want the configuration updates to take effect using a rolling restart:\n-      * You must either supply a new image name in the domain resource or change the domain resource `restartVersion` in order to force the operator to reload the configuration.\n-      * With either of these two changes, the operator will rerun the domain's introspector job, which will verify and apply the new configuration. If the introspector job's configuration verification succeeds, then it will subsequently roll (restart) the pods; if the job fails, then a roll will not occur.\n-      * If you change other fields that typically cause a restart, such as `volumes`, `env`, and such, then the introspector job will not rerun and a rolling restart will proceed without loading the configuration changes.\n+    * If you are supplying updated models or Secrets for a running domain, and you want the configuration updates to take effect using a rolling restart, then do one of the following:\n+      * Supply a new value for the `image` field in the Domain or any of the other [fields affecting WebLogic Server instance Pod generation]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#fields-that-cause-servers-to-be-restarted\" >}}).\n+      * Change the Domain `restartVersion` field. This will cause the operator to restart all running servers and, prior to the restarts, the operator will introspect any new configuration.\n+      * Change the Domain `introspectVersion` field. This will cause the operator to introspect any new configuration and, if needed, restart servers to use that new configuration.\n \n * **Domain in PV:**\n-For a domain home on PV, the type of restart needed to apply the changes depends on the nature of the WebLogic configuration change:\n-    * Changes to parts of the WebLogic configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n-      The following are the types of changes to the WebLogic Server configuration that the operator introspects:\n-        * Adding or removing a cluster, server, dynamic server, or network access point\n+\n+For Domain in PV, the type of restart needed depends on the nature of the WebLogic domain configuration change:\n+    * With operator version 3.0.0, domain configuration changes that add clusters, either configured or dynamic, cluster member servers, or standalone servers can now be performed dynamically. This support requires that the new clusters or servers are added to the domain configuration and then [triggering the operator's introspection]({{< relref \"/userguide/managing-domains/domain-lifecycle/introspection.md\" >}}) of that new configuration.\n+    * Other changes to parts of the domain configuration that the operator introspects, require a full restart, even if the changes are dynamic.\n+      The following are the other types of changes to the domain configuration that the operator introspects:\n+        * Adding or removing a network access point\n         * Changing a cluster, server, dynamic server, or network access point name\n         * Enabling or disabling the listen port, SSL port, or admin port\n         * Changing any port numbers\n         * Changing a network access point's public address\n-    * Other dynamic WebLogic configuration changes do not require a restart.  For example, a change to a server's connection timeout property\n+    * Other dynamic WebLogic configuration changes do not require a restart. For example, a change to a server's connection timeout property\n is dynamic and does not require a restart.\n-    * Other non-dynamic WebLogic configuration changes require either a manually initiated rolling restart or a full domain restart, depending on the nature of the change.\n+    * Other non-dynamic domain configuration changes require either a manually initiated rolling restart or a full domain restart, depending on the nature of the change.\n       For example, a rolling restart is applicable when changing a WebLogic Server `stuck thread timer interval` property. See [Restart all the servers in the domain]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restart-all-the-servers-in-the-domain\" >}}).\n \n \n-#### Changing the custom domain configuration overrides\n+#### Changing the domain configuration overrides\n \n-Any change to domain configuration overrides requires a full domain restart.  This includes:\n+With operator version 3.0.0, changes to domain configuration overrides can be applied dynamically or as part of a rolling restart. Previously, any change to configuration overrides required a full domain restart.", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NTAzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452385038", "bodyText": "For example, non-dynamic mbean attributes can't be changed dynamically, but this section ends with The operator then will apply the new configuration overrides dynamically or only apply the overrides when WebLogic Server instances restart, depending on the strategy that you select..  Which is technically correct, but doesn't let the reader know that there are caveats.", "author": "tbarnes-us", "createdAt": "2020-07-09T17:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MzgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MTYzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452391631", "bodyText": "introspectVersion should be mentioned here to cover the MII case.  E.g. if a MII introspectVersion re-introspect detects a model change (including changes to secrets or config maps that the model depends on), then MII will subsequently roll the domain in order to propagate the model change.", "author": "tbarnes-us", "createdAt": "2020-07-09T17:54:15Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/startup.md", "diffHunk": "@@ -229,13 +229,13 @@ instance will not ignore sessions and will have a longer timeout.\n \n ### Restarting servers\n \n-The operator runtime automatically recreates (restarts) server pods when properties on the domain resource that affect server pods change (such as `image`, `volumes`, and `env`).\n-The `restartVersion` property on the domain resource lets you force the operator to restart a set of server pods.\n+The operator automatically recreates (restarts) WebLogic Server instance Pods when fields on the Domain that affect Pod generation change (such as `image`, `volumes`, and `env`).\n+The `restartVersion` field on the Domain lets you force the operator to restart a set of WebLogic Server instance Pods.\n \n-The operator runtime does rolling restarts of clustered servers so that service is maintained.\n+The operator does rolling restarts of clustered servers so that service is maintained.\n \n-#### Properties that cause servers to be restarted\n-The operator will restart servers when any of the follow properties on the domain resource that affect the server are changed:\n+#### Fields that cause servers to be restarted\n+The operator will restart servers when any of the follow fields on the Domain that affect the WebLogic Server instance Pod generation are changed:", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MjA2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452392063", "bodyText": "of course this isn't applicable to DII or DIPV.", "author": "tbarnes-us", "createdAt": "2020-07-09T17:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5NDc1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452394758", "bodyText": "Maybe explain when installing a CRD in advance is advisable?", "author": "tbarnes-us", "createdAt": "2020-07-09T18:00:10Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition (CRD) and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5ODIyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452398221", "bodyText": "IMO, the descriptions of the wallet password/file secret fields have been stripped down too much.  See original wording.", "author": "tbarnes-us", "createdAt": "2020-07-09T18:06:21Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition (CRD) and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.\n \n-The `metadata` section names the domain resource and its namespace.  The name of the domain resource is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name.  The domain resource name is required to be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n+For Kubernetes 1.16 and later:\n \n-The `spec` section describes the intended running state of the domain, including intended runtime state of server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+```none\n+$ kubectl create -f kubernetes/crd/domain-crd.yaml\n+```\n \n-The `status` section is updated by the operator and describes the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+For Kubernetes 1.15 and earlier:\n \n-#### Domain resource spec elements\n+```none\n+$ kubectl create -f kubernetes/crd/domain-v1beta1-crd.yaml\n+```\n \n-The domain resource `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+After the CustomResourceDefinition is installed, either by the operator or using one of the `create` commands above, you can verify that the CRD is installed correctly using:\n \n-Elements related to domain identification, Docker image, and domain home:\n+```none\n+$ kubectl get crd domains.weblogic.oracle\n+```\n+\n+If you are using Kubernetes 1.16 or later, you can access the description of any field of the Domain using `kubectl explain`. For instance, the following command displays the description of the `domainUID` field:\n+\n+```none\n+$ kubectl explain domains.spec.domainUID\n+KIND:     Domain\n+VERSION:  weblogic.oracle/v8\n+\n+FIELD:    domainUID <string>\n+\n+DESCRIPTION:\n+     Domain unique identifier. It is recommended that this value be unique to\n+     assist in future work to identify related domains in active-passive\n+     scenarios across data centers; however, it is only required that this value\n+     be unique within the namespace, similarly to the names of Kubernetes\n+     resources. This value is distinct and need not match the domain name from\n+     the WebLogic domain configuration. Defaults to the value of\n+     `metadata.name`.\n+```\n \n-* `domainUID`: The domain unique identifier. Must be unique across the Kubernetes cluster. Not required. Defaults to the value of `metadata.name`.\n-* `image`: The WebLogic Docker image. Required when `domainHomeSourceType` is `Image`; otherwise, defaults to `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n-* `imagePullPolicy`: The image pull policy for the WebLogic Docker image. Legal values are `Always`, `Never`, and `IfNotPresent`. Defaults to `Always` if image ends in `:latest`; `IfNotPresent` otherwise.\n-* `imagePullSecrets`: A list of image pull secrets for the WebLogic Docker image.\n-* `domainHome`: The folder for the WebLogic domain. Not required. Defaults to `/shared/domains/domains/domainUID` if `domainHomeSourceType` is `PersistentVolume`. Defaults to `/u01/oracle/user_projects/domains/` if `domainHomeSourceType` is `Image`. Defaults to `/u01/domains/domainUID` if `domainHomeSourceType` is `FromModel`.\n-* `domainHomeSourceType`: The source for the domain home. Legal values are `Image` (for Domain in Image), `PersistentVolume` (for Domain in PV), and `FromModel` (for Model in Image). Defaults to `Image`.\n+The `metadata` section names the Domain and its namespace.  The name of the Domain is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name. The Domain name must be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, Domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n \n+The `spec` section describes the intended running state of the domain, including intended runtime state of WebLogic Server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+\n+The operator automatically updates the `status` section to describe the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+\n+#### Domain spec elements\n+\n+The Domain `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+\n+Elements related to domain identification, container image, and domain home:\n+\n+* `domainUID`: Domain unique identifier. It is recommended that this value be unique to assist in future work to identify related domains in active-passive scenarios across data centers; however, it is only required that this value be unique within the namespace, similarly to the names of Kubernetes resources. This value is distinct and need not match the domain name from the WebLogic domain configuration. Defaults to the value of `metadata.name`.\n+* `image`: The WebLogic container image; required when `domainHomeSourceType` is Image or FromModel; otherwise, defaults to container-registry.oracle.com/middleware/weblogic:12.2.1.4.\n+* `imagePullPolicy`: The image pull policy for the WebLogic container image. Legal values are Always, Never, and IfNotPresent. Defaults to Always if image ends in :latest; IfNotPresent, otherwise.\n+* `imagePullSecrets`: A list of image pull Secrets for the WebLogic container image.\n+* `domainHome`: The directory containing the WebLogic domain configuration inside the container. Defaults to /shared/domains/domains/<domainUID> if `domainHomeSourceType` is PersistentVolume. Defaults to /u01/oracle/user_projects/domains/ if `domainHomeSourceType` is Image. Defaults to /u01/domains/<domainUID> if `domainHomeSourceType` is FromModel.\n+* `domainHomeSourceType`: Domain home file system source type: Legal values: Image, PersistentVolume, FromModel. Image indicates that the domain home file system is present in the container image specified by the `image` field. PersistentVolume indicates that the domain home file system is located on a persistent volume. FromModel indicates that the domain home file system will be created and managed by the operator based on a WDT domain model. If this field is specified, it overrides the value of `domainHomeInImage`. If both fields are unspecified, then `domainHomeSourceType` defaults to Image.\n+* `dataHome`: An optional directory in a server's container for data storage of default and custom file stores. If `dataHome` is not specified or its value is either not set or empty, then the data storage directories are determined from the WebLogic domain configuration.\n+                   \n Elements related to logging:\n \n-* `includeServerOutInPodLog`: If true (the default), the server `.out` file will be included in the pod's `stdout`.\n-* `logHome`: The in-pod name of the directory in which to store the domain, Node Manager, server logs, and server `.out` files. Defaults to `/shared/logs/<domainUID>`. Ignored if `logHomeEnabled` is `false`.\n-* `logHomeEnabled`: Specifies whether the log home folder is enabled. Not required. Defaults to true if `domainHomeSourceType` is `PersistentVolume`. Defaults to false if `domainHomeSourceType` is `Image` or `FromModel`.\n+* `includeServerOutInPodLog`: Specifies whether the server .out file will be included in the Pod's log. Defaults to true.\n+* `logHome`: The directory in a server's container in which to store the domain, Node Manager, server logs, server *.out, and optionally HTTP access log files if `httpAccessLogInLogHome` is true. Ignored if `logHomeEnabled` is false.\n+* `logHomeEnabled`: Specifies whether the log home folder is enabled. Defaults to true if `domainHomeSourceType` is PersistentVolume; false, otherwise.\n+* `httpAccessLogInLogHome`: Specifies whether the server HTTP access log files will be written to the same directory specified in `logHome`. Otherwise, server HTTP access log files will be written to the directory configured in the WebLogic domain configuration. Defaults to true.\n \n Elements related to security:\n \n-* `webLogicCredentialsSecret`: The name of a pre-created Kubernetes Secret, in the domain resource's namespace, that holds the user name and password needed to boot WebLogic Server under the `username` and `password` fields.\n+* `webLogicCredentialsSecret`: Reference to a Kubernetes Secret that contains the user name and password needed to boot a WebLogic Server under the `username` and `password` fields.\n * See also elements under `configuration` below.\n \n Elements related to domain [startup and shutdown]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup.md\" >}}):\n \n-* `serverStartPolicy`: The strategy for deciding whether to start a server. Legal values are `ADMIN_ONLY`, `NEVER`, or `IF_NEEDED`.\n-* `serverStartState`: The state in which the server is to be started. Use `ADMIN` if the server should start in the admin state. Defaults to `RUNNING`.\n-* `restartVersion`: If present, every time this value is updated, the operator will restart the required servers.\n-* `replicas`: The number of Managed Servers to run in any cluster that does not specify a `replicas` count.\n+* `serverStartPolicy`: The strategy for [deciding whether to start](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#starting-and-stopping-servers) a WebLogic Server instance. Legal values are ADMIN_ONLY, NEVER, or IF_NEEDED. Defaults to IF_NEEDED.\n+* `serverStartState`: The WebLogic runtime state in which the server is to be started. Use ADMIN if the server should start in the admin state. Defaults to RUNNING.\n+* `restartVersion`: Changes to this field cause the [operator to restart](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#restarting-servers) WebLogic Server instances.\n+* `replicas`: The default number of cluster member Managed Server instances to start for each WebLogic cluster in the domain configuration, unless `replicas` is specified for that cluster under the `clusters` field. For each cluster, the operator will sort cluster member Managed Server names from the WebLogic domain configuration by normalizing any numbers in the Managed Server name and then sorting alphabetically. This is done so that server names such as \"managed-server10\" come after \"managed-server9\". The operator will then start Managed Servers from the sorted list, up to the `replicas` count, unless specific Managed Servers are specified as starting in their entry under the `managedServers` field. In that case, the specified Managed Servers will be started and then additional cluster members will be started, up to the `replicas` count, by finding further cluster members in the sorted list that are not already started. If cluster members are started because of their entries under `managedServers`, then a cluster may have more cluster members running than its `replicas` count. Defaults to 0.\n+* `maxClusterConcurrentStartup`: The maximum number of cluster member Managed Server instances that the operator will start in parallel for a given cluster, if `maxConcurrentStartup` is not specified for a specific cluster under the `clusters` field. A value of 0 means there is no configured limit. Defaults to 0.\n+* `allowReplicasBelowMinDynClusterSize`: Whether to allow the number of running cluster member Managed Server instances to drop below the minimum dynamic cluster size configured in the WebLogic domain configuration, if this is not specified for a specific cluster under the `clusters` field. Defaults to true.\n+* `introspectVersion`: Changes to this field cause the operator to repeat its introspection of the WebLogic domain configuration. Repeating introspection is required for the operator to recognize changes to the domain configuration, such as adding a new WebLogic cluster or Managed Server instance, to regenerate configuration overrides, or to regenerate the WebLogic domain home when the `domainHomeSourceType` is FromModel. Introspection occurs automatically, without requiring change to this field, when servers are first started or restarted after a full domain shut down. For the FromModel `domainHomeSourceType`, introspection also occurs when a running server must be restarted because of changes to any of the fields [listed here](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#properties-that-cause-servers-to-be-restarted). See also `overridesConfigurationStrategy`.\n \n Elements related to specifying and overriding WebLogic domain configuration:\n \n * These elements are under `configuration`.\n \n-  * `overridesConfigMap`: The name of the ConfigMap for optional [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}). The value only applies if the `domainHomeSourceType` is `Image` or `PersistentVolume`. Do not set this value if the `domainHomeSourceType` is `FromModel`.\n-  * `secrets`: A list of secret names for optional [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}) macros or Model in Image [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) macros. Often used for specifying data source URLs, user names, and passwords.\n-  * `introspectorJobActiveDeadlineSeconds`: Time in seconds before timing out the introspector job. Default is 120 seconds.\n-\n+  * `overridesConfigMap`: The name of the ConfigMap for WebLogic [configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}). If this field is specified, then the value of `spec.configOverrides` is ignored.\n+  * `overrideDistributionStrategy`: Determines how updated configuration overrides are distributed to already running WebLogic Server instances following introspection when the `domainHomeSourceType` is PersistentVolume or Image. Configuration overrides are generated during introspection from Secrets, the `overrideConfigMap` field, and WebLogic domain topology. Legal values are DYNAMIC, which means that the operator will distribute updated configuration overrides dynamically to running servers, and ON_RESTART, which means that servers will use updated configuration overrides only after the server's next restart. The selection of ON_RESTART will not cause servers to restart when there are updated configuration overrides available. See also `introspectVersion`. Defaults to DYNAMIC.\n+  * `secrets`: A list of names of the Secrets for WebLogic [configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}) or model. If this field is specified, then the value of `spec.configOverrideSecrets` is ignored.\n+  * `introspectorJobActiveDeadlineSeconds`: The introspector job timeout value in seconds. If this field is specified, then the operator's ConfigMap `data.introspectorJobActiveDeadlineSeconds` value is ignored. Defaults to 120 seconds.\n+  \n * These elements are under `configuration.model`, only apply if the `domainHomeSourceType` is `FromModel`, and are discussed in [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}).\n \n-  * `configMap`: Optional configuration map for supplying [runtime model file updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) to Model in Image model configuration.\n-  * `domainType`: Must be one of `WLS`, `JRF`, or `RestrictedJRF`.  Default is `WLS`.\n-  * `runtimeEncryptionSecret`: Required. Expected field is `password`. This is used by Model in Image to encrypt data while the data is passed from the introspector job to WebLogic pods. The password can be arbitrary: the only requirement is that it must stay the same for the life of a domain resource. If a domain resource is deleted then redeployed, it's fine to change the password during the interim.\n-  * `wdtEncryptionSecret`: Optional. Rarely used. See [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) for details.\n+  * `configMap`: Name of a ConfigMap containing the WebLogic Deploy Tooling model.\n+  * `domainType`: WebLogic Deploy Tooling domain type. Legal values: WLS, RestrictedJRF, JRF. Defaults to WLS.\n+  * `runtimeEncryptionSecret`: Runtime encryption secret. Required when `domainHomeSourceType` is set to FromModel.\n \n * These elements are under `configuration.opss`, and only apply if the `domainHomeSourceType` is `FromModel` and the `domainType` is `JRF`.\n \n-  * `walletPasswordSecret`: The expected secret field is `walletPassword`. Used to encrypt/decrypt the wallet that's used for accessing the domain's entries in its RCU database.\n-  * `walletFileSecret`: Optional. The expected secret field is `walletFile`. Use this to allow a JRF domain to reuse its entries in the RCU database (specify a wallet file that was obtained from the domain home while the domain was booted for the first time).\n+  * `walletPasswordSecret`: Name of a Secret containing the OPSS key passphrase.\n+  * `walletFileSecret`: Name of a Secret containing the OPSS key wallet file.", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMDA3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452400075", "bodyText": "...will create a WebLogic network port with... --> ...will create a WebLogic network port on every WebLogic pod with...", "author": "tbarnes-us", "createdAt": "2020-07-09T18:09:53Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -30,114 +30,163 @@ See the WebLogic Server samples, [Domain home on a PV]({{< relref \"/samples/simp\n \n After you have written your YAML files, you use them to create your domain artifacts using the `kubectl apply -f` command.\n \n-```\n+```none\n $ kubectl apply -f domain-resource.yaml\n ```\n \n #### Verify the results\n \n-To confirm that the domain resource was created, use this command:\n+To confirm that the Domain was created, use this command:\n \n-```\n+```none\n $ kubectl describe domain [domain name] -n [namespace]\n ```\n \n #### Domain resource overview\n \n-The domain resource, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.  \n+The Domain type is defined by a CustomResourceDefinition (CRD) and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.\n+\n+The operator installs the CustomResourceDefinition for the Domain type when the operator first starts. Customers may also install the CustomResourceDefinition in advance by using one of the provided YAML files.\n \n-The `metadata` section names the domain resource and its namespace.  The name of the domain resource is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name.  The domain resource name is required to be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n+For Kubernetes 1.16 and later:\n \n-The `spec` section describes the intended running state of the domain, including intended runtime state of server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+```none\n+$ kubectl create -f kubernetes/crd/domain-crd.yaml\n+```\n \n-The `status` section is updated by the operator and describes the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+For Kubernetes 1.15 and earlier:\n \n-#### Domain resource spec elements\n+```none\n+$ kubectl create -f kubernetes/crd/domain-v1beta1-crd.yaml\n+```\n \n-The domain resource `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+After the CustomResourceDefinition is installed, either by the operator or using one of the `create` commands above, you can verify that the CRD is installed correctly using:\n \n-Elements related to domain identification, Docker image, and domain home:\n+```none\n+$ kubectl get crd domains.weblogic.oracle\n+```\n+\n+If you are using Kubernetes 1.16 or later, you can access the description of any field of the Domain using `kubectl explain`. For instance, the following command displays the description of the `domainUID` field:\n+\n+```none\n+$ kubectl explain domains.spec.domainUID\n+KIND:     Domain\n+VERSION:  weblogic.oracle/v8\n+\n+FIELD:    domainUID <string>\n+\n+DESCRIPTION:\n+     Domain unique identifier. It is recommended that this value be unique to\n+     assist in future work to identify related domains in active-passive\n+     scenarios across data centers; however, it is only required that this value\n+     be unique within the namespace, similarly to the names of Kubernetes\n+     resources. This value is distinct and need not match the domain name from\n+     the WebLogic domain configuration. Defaults to the value of\n+     `metadata.name`.\n+```\n \n-* `domainUID`: The domain unique identifier. Must be unique across the Kubernetes cluster. Not required. Defaults to the value of `metadata.name`.\n-* `image`: The WebLogic Docker image. Required when `domainHomeSourceType` is `Image`; otherwise, defaults to `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n-* `imagePullPolicy`: The image pull policy for the WebLogic Docker image. Legal values are `Always`, `Never`, and `IfNotPresent`. Defaults to `Always` if image ends in `:latest`; `IfNotPresent` otherwise.\n-* `imagePullSecrets`: A list of image pull secrets for the WebLogic Docker image.\n-* `domainHome`: The folder for the WebLogic domain. Not required. Defaults to `/shared/domains/domains/domainUID` if `domainHomeSourceType` is `PersistentVolume`. Defaults to `/u01/oracle/user_projects/domains/` if `domainHomeSourceType` is `Image`. Defaults to `/u01/domains/domainUID` if `domainHomeSourceType` is `FromModel`.\n-* `domainHomeSourceType`: The source for the domain home. Legal values are `Image` (for Domain in Image), `PersistentVolume` (for Domain in PV), and `FromModel` (for Model in Image). Defaults to `Image`.\n+The `metadata` section names the Domain and its namespace.  The name of the Domain is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name. The Domain name must be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, Domain resource name, and domain name (from the WebLogic domain configuration) may all be different.\n \n+The `spec` section describes the intended running state of the domain, including intended runtime state of WebLogic Server instances, number of cluster members started, and details about Kubernetes Pod or Service generation, such as resource constraints, scheduling requirements, or volume mounts.\n+\n+The operator automatically updates the `status` section to describe the actual running state of the domain, including WebLogic Server instance runtime states and current health.\n+\n+#### Domain spec elements\n+\n+The Domain `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.\n+\n+Elements related to domain identification, container image, and domain home:\n+\n+* `domainUID`: Domain unique identifier. It is recommended that this value be unique to assist in future work to identify related domains in active-passive scenarios across data centers; however, it is only required that this value be unique within the namespace, similarly to the names of Kubernetes resources. This value is distinct and need not match the domain name from the WebLogic domain configuration. Defaults to the value of `metadata.name`.\n+* `image`: The WebLogic container image; required when `domainHomeSourceType` is Image or FromModel; otherwise, defaults to container-registry.oracle.com/middleware/weblogic:12.2.1.4.\n+* `imagePullPolicy`: The image pull policy for the WebLogic container image. Legal values are Always, Never, and IfNotPresent. Defaults to Always if image ends in :latest; IfNotPresent, otherwise.\n+* `imagePullSecrets`: A list of image pull Secrets for the WebLogic container image.\n+* `domainHome`: The directory containing the WebLogic domain configuration inside the container. Defaults to /shared/domains/domains/<domainUID> if `domainHomeSourceType` is PersistentVolume. Defaults to /u01/oracle/user_projects/domains/ if `domainHomeSourceType` is Image. Defaults to /u01/domains/<domainUID> if `domainHomeSourceType` is FromModel.\n+* `domainHomeSourceType`: Domain home file system source type: Legal values: Image, PersistentVolume, FromModel. Image indicates that the domain home file system is present in the container image specified by the `image` field. PersistentVolume indicates that the domain home file system is located on a persistent volume. FromModel indicates that the domain home file system will be created and managed by the operator based on a WDT domain model. If this field is specified, it overrides the value of `domainHomeInImage`. If both fields are unspecified, then `domainHomeSourceType` defaults to Image.\n+* `dataHome`: An optional directory in a server's container for data storage of default and custom file stores. If `dataHome` is not specified or its value is either not set or empty, then the data storage directories are determined from the WebLogic domain configuration.\n+                   \n Elements related to logging:\n \n-* `includeServerOutInPodLog`: If true (the default), the server `.out` file will be included in the pod's `stdout`.\n-* `logHome`: The in-pod name of the directory in which to store the domain, Node Manager, server logs, and server `.out` files. Defaults to `/shared/logs/<domainUID>`. Ignored if `logHomeEnabled` is `false`.\n-* `logHomeEnabled`: Specifies whether the log home folder is enabled. Not required. Defaults to true if `domainHomeSourceType` is `PersistentVolume`. Defaults to false if `domainHomeSourceType` is `Image` or `FromModel`.\n+* `includeServerOutInPodLog`: Specifies whether the server .out file will be included in the Pod's log. Defaults to true.\n+* `logHome`: The directory in a server's container in which to store the domain, Node Manager, server logs, server *.out, and optionally HTTP access log files if `httpAccessLogInLogHome` is true. Ignored if `logHomeEnabled` is false.\n+* `logHomeEnabled`: Specifies whether the log home folder is enabled. Defaults to true if `domainHomeSourceType` is PersistentVolume; false, otherwise.\n+* `httpAccessLogInLogHome`: Specifies whether the server HTTP access log files will be written to the same directory specified in `logHome`. Otherwise, server HTTP access log files will be written to the directory configured in the WebLogic domain configuration. Defaults to true.\n \n Elements related to security:\n \n-* `webLogicCredentialsSecret`: The name of a pre-created Kubernetes Secret, in the domain resource's namespace, that holds the user name and password needed to boot WebLogic Server under the `username` and `password` fields.\n+* `webLogicCredentialsSecret`: Reference to a Kubernetes Secret that contains the user name and password needed to boot a WebLogic Server under the `username` and `password` fields.\n * See also elements under `configuration` below.\n \n Elements related to domain [startup and shutdown]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup.md\" >}}):\n \n-* `serverStartPolicy`: The strategy for deciding whether to start a server. Legal values are `ADMIN_ONLY`, `NEVER`, or `IF_NEEDED`.\n-* `serverStartState`: The state in which the server is to be started. Use `ADMIN` if the server should start in the admin state. Defaults to `RUNNING`.\n-* `restartVersion`: If present, every time this value is updated, the operator will restart the required servers.\n-* `replicas`: The number of Managed Servers to run in any cluster that does not specify a `replicas` count.\n+* `serverStartPolicy`: The strategy for [deciding whether to start](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#starting-and-stopping-servers) a WebLogic Server instance. Legal values are ADMIN_ONLY, NEVER, or IF_NEEDED. Defaults to IF_NEEDED.\n+* `serverStartState`: The WebLogic runtime state in which the server is to be started. Use ADMIN if the server should start in the admin state. Defaults to RUNNING.\n+* `restartVersion`: Changes to this field cause the [operator to restart](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#restarting-servers) WebLogic Server instances.\n+* `replicas`: The default number of cluster member Managed Server instances to start for each WebLogic cluster in the domain configuration, unless `replicas` is specified for that cluster under the `clusters` field. For each cluster, the operator will sort cluster member Managed Server names from the WebLogic domain configuration by normalizing any numbers in the Managed Server name and then sorting alphabetically. This is done so that server names such as \"managed-server10\" come after \"managed-server9\". The operator will then start Managed Servers from the sorted list, up to the `replicas` count, unless specific Managed Servers are specified as starting in their entry under the `managedServers` field. In that case, the specified Managed Servers will be started and then additional cluster members will be started, up to the `replicas` count, by finding further cluster members in the sorted list that are not already started. If cluster members are started because of their entries under `managedServers`, then a cluster may have more cluster members running than its `replicas` count. Defaults to 0.\n+* `maxClusterConcurrentStartup`: The maximum number of cluster member Managed Server instances that the operator will start in parallel for a given cluster, if `maxConcurrentStartup` is not specified for a specific cluster under the `clusters` field. A value of 0 means there is no configured limit. Defaults to 0.\n+* `allowReplicasBelowMinDynClusterSize`: Whether to allow the number of running cluster member Managed Server instances to drop below the minimum dynamic cluster size configured in the WebLogic domain configuration, if this is not specified for a specific cluster under the `clusters` field. Defaults to true.\n+* `introspectVersion`: Changes to this field cause the operator to repeat its introspection of the WebLogic domain configuration. Repeating introspection is required for the operator to recognize changes to the domain configuration, such as adding a new WebLogic cluster or Managed Server instance, to regenerate configuration overrides, or to regenerate the WebLogic domain home when the `domainHomeSourceType` is FromModel. Introspection occurs automatically, without requiring change to this field, when servers are first started or restarted after a full domain shut down. For the FromModel `domainHomeSourceType`, introspection also occurs when a running server must be restarted because of changes to any of the fields [listed here](https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/#properties-that-cause-servers-to-be-restarted). See also `overridesConfigurationStrategy`.\n \n Elements related to specifying and overriding WebLogic domain configuration:\n \n * These elements are under `configuration`.\n \n-  * `overridesConfigMap`: The name of the ConfigMap for optional [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}). The value only applies if the `domainHomeSourceType` is `Image` or `PersistentVolume`. Do not set this value if the `domainHomeSourceType` is `FromModel`.\n-  * `secrets`: A list of secret names for optional [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}) macros or Model in Image [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) macros. Often used for specifying data source URLs, user names, and passwords.\n-  * `introspectorJobActiveDeadlineSeconds`: Time in seconds before timing out the introspector job. Default is 120 seconds.\n-\n+  * `overridesConfigMap`: The name of the ConfigMap for WebLogic [configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}). If this field is specified, then the value of `spec.configOverrides` is ignored.\n+  * `overrideDistributionStrategy`: Determines how updated configuration overrides are distributed to already running WebLogic Server instances following introspection when the `domainHomeSourceType` is PersistentVolume or Image. Configuration overrides are generated during introspection from Secrets, the `overrideConfigMap` field, and WebLogic domain topology. Legal values are DYNAMIC, which means that the operator will distribute updated configuration overrides dynamically to running servers, and ON_RESTART, which means that servers will use updated configuration overrides only after the server's next restart. The selection of ON_RESTART will not cause servers to restart when there are updated configuration overrides available. See also `introspectVersion`. Defaults to DYNAMIC.\n+  * `secrets`: A list of names of the Secrets for WebLogic [configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}) or model. If this field is specified, then the value of `spec.configOverrideSecrets` is ignored.\n+  * `introspectorJobActiveDeadlineSeconds`: The introspector job timeout value in seconds. If this field is specified, then the operator's ConfigMap `data.introspectorJobActiveDeadlineSeconds` value is ignored. Defaults to 120 seconds.\n+  \n * These elements are under `configuration.model`, only apply if the `domainHomeSourceType` is `FromModel`, and are discussed in [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}).\n \n-  * `configMap`: Optional configuration map for supplying [runtime model file updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) to Model in Image model configuration.\n-  * `domainType`: Must be one of `WLS`, `JRF`, or `RestrictedJRF`.  Default is `WLS`.\n-  * `runtimeEncryptionSecret`: Required. Expected field is `password`. This is used by Model in Image to encrypt data while the data is passed from the introspector job to WebLogic pods. The password can be arbitrary: the only requirement is that it must stay the same for the life of a domain resource. If a domain resource is deleted then redeployed, it's fine to change the password during the interim.\n-  * `wdtEncryptionSecret`: Optional. Rarely used. See [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) for details.\n+  * `configMap`: Name of a ConfigMap containing the WebLogic Deploy Tooling model.\n+  * `domainType`: WebLogic Deploy Tooling domain type. Legal values: WLS, RestrictedJRF, JRF. Defaults to WLS.\n+  * `runtimeEncryptionSecret`: Runtime encryption secret. Required when `domainHomeSourceType` is set to FromModel.\n \n * These elements are under `configuration.opss`, and only apply if the `domainHomeSourceType` is `FromModel` and the `domainType` is `JRF`.\n \n-  * `walletPasswordSecret`: The expected secret field is `walletPassword`. Used to encrypt/decrypt the wallet that's used for accessing the domain's entries in its RCU database.\n-  * `walletFileSecret`: Optional. The expected secret field is `walletFile`. Use this to allow a JRF domain to reuse its entries in the RCU database (specify a wallet file that was obtained from the domain home while the domain was booted for the first time).\n+  * `walletPasswordSecret`: Name of a Secret containing the OPSS key passphrase.\n+  * `walletFileSecret`: Name of a Secret containing the OPSS key wallet file.\n+\n+* These elements are under `configuration.istio`.\n+\n+  * `enabled`: True, if this domain is deployed under an Istio service mesh. Defaults to true when the `istio` field is specified.\n+  * `readinessPort`: The operator will create a WebLogic network access point with this port for use by the readiness probe. Defaults to 8888.", "originalCommit": "bd8f602f1e39cd50131b75d3315f0d5d3c17e2cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMDk1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r452400953", "bodyText": "side question: is this NAP securable?  (e.g. https only?)", "author": "tbarnes-us", "createdAt": "2020-07-09T18:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMDA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjgyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453836826", "bodyText": "The rework LGTM, but the side question remains.  If the side question is an open issue, maybe we need a JIRA to track the outage?", "author": "tbarnes-us", "createdAt": "2020-07-13T18:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMDA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjM2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453882366", "bodyText": "Quang is doing some research as part of OWLS-82955 to see what the current state is of accessing the readiness port over SSL.", "author": "rjeberhard", "createdAt": "2020-07-13T19:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMDA3NQ=="}], "type": "inlineReview"}, {"oid": "fb143ab56a0a69eaa89729d076bc8a67e280b2d6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fb143ab56a0a69eaa89729d076bc8a67e280b2d6", "message": "Additional updates in progress", "committedDate": "2020-07-12T21:24:44Z", "type": "commit"}, {"oid": "480c1461c7e074a947e014caaa2dd777ddbc7717", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/480c1461c7e074a947e014caaa2dd777ddbc7717", "message": "Update implementation details", "committedDate": "2020-07-12T23:18:28Z", "type": "commit"}, {"oid": "657e2e1b7f4c0a9137b0854afa6230b3c55f7e3c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/657e2e1b7f4c0a9137b0854afa6230b3c55f7e3c", "message": "Work in progress", "committedDate": "2020-07-13T13:06:20Z", "type": "commit"}, {"oid": "ad4f5ddffa9f720cc72502910fc6cdbb95f8322e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ad4f5ddffa9f720cc72502910fc6cdbb95f8322e", "message": "More review comment work", "committedDate": "2020-07-13T14:59:34Z", "type": "commit"}, {"oid": "d9aa5fc38a63bcf74c11fda1941cb1fee2c4d441", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d9aa5fc38a63bcf74c11fda1941cb1fee2c4d441", "message": "OPSS field updates", "committedDate": "2020-07-13T15:26:15Z", "type": "commit"}, {"oid": "964c2b977e06cfef2598722ae8695701b30d15ec", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/964c2b977e06cfef2598722ae8695701b30d15ec", "message": "Update descrition of Istio readinessProbe", "committedDate": "2020-07-13T16:32:34Z", "type": "commit"}, {"oid": "7fe511eafa8d1aa25b3da7619270c8dbe71e467a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7fe511eafa8d1aa25b3da7619270c8dbe71e467a", "message": "Adjust config overrides for PV restarting language", "committedDate": "2020-07-13T17:06:56Z", "type": "commit"}, {"oid": "2798a0b9616c1368b98cbed3c497657964f19981", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2798a0b9616c1368b98cbed3c497657964f19981", "message": "Clarify dynamic", "committedDate": "2020-07-13T17:26:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMjAyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453822023", "bodyText": "The limitations link here points into the config-overrides documentation, which is out of date as it assumes old behavior for override distribution.  The limitations section should be reworked to discuss the new capabilities and point to the new documentation about same.  (Overall the config-overrides doc looks like its 'check-list', 'step-by-step', and 'limitations' sections still could use updates in this area...)", "author": "tbarnes-us", "createdAt": "2020-07-13T17:45:35Z", "path": "docs-source/content/userguide/managing-domains/choosing-a-model/_index.md", "diffHunk": "@@ -5,25 +5,25 @@ weight = 1\n pre = \"<b> </b>\"\n +++\n \n-When using the operator to deploy a WebLogic domain, you have the choice of the following WebLogic domain home source types:\n+When using the operator to start WebLogic Server instances from a domain, you have the choice of the following WebLogic domain home source types:\n \n  - **Domain in PV**: Supply your domain home configuration in a persistent volume.\n  - **Domain in Image**: Supply your domain home in a Docker image.\n- - **Model in Image**: Supply a WebLogic Deployment Tool model file in a Docker image.\n+ - **Model in Image**: Supply a WebLogic Deployment Tool (WDT) model file in a Docker image.\n \n-There are advantages for each domain home source type, but sometimes there are technical limitations of various cloud providers that may make one type better suited to your needs.\n+There are advantages for each domain home source type, but sometimes there are also technical limitations of various cloud providers that may make one type better suited to your needs.\n \n-Note that you can use different domain home types for different domains; there's no restriction on having domains with different domain home types deployed to the same Kubernetes cluster or namespace.\n+Note that you can use different domain home types for different domains; there's no restriction on having domains with different domain home types in the same Kubernetes cluster or namespace.\n \n | Domain in PV | Domain in Image | Model in Image |\n | --- | --- | --- |\n-| Lets you use the same standard read-only Docker image for every server in every domain. | Requires a different image for each domain, but all servers in that domain use the same image. | Different domains can use the same image, but require different domainUID and may have different configuration.  |\n-| No state is kept in Docker images making them completely throw away (cattle not pets). | Runtime state should not be kept in the images, but applications and configuration are. | Runtime state should not be kept in the images.  Application and configuration may be. |\n-| The domain is long-lived, so you can mutate the configuration or deploy new applications using standard methods (Administration Console, WLST, and such). You can also mutate the configuration using configuration overrides. | If you want to mutate the domain home configuration, then you can apply configuration overrides or create a new image. If you want to deploy application updates, then you must create a new image. | If you want to mutate the domain home configuration, then you can override it with additional model files supplied in a ConfigMap or you can supply a new image. If you want to deploy application updates, then you must create a new image.  |\n-| You can use configuration overrides to mutate the domain at runtime, but this requires first shutting down the entire domain, and then restarting it for the change to take effect. | You can use configuration overrides to mutate the domain home at runtime, but this requires first shutting down the entire domain, and then restarting it for the change to take effect. You should not use the Administration Console or WLST for these domains as changes are ephemeral and will be lost when servers restart. | You can deploy model files to a ConfigMap to mutate the domain at runtime, and may not need to restart the entire domain for the change to take effect. Instead, you can initiate a rolling upgrade, which restarts your WebLogic Server pods one at a time. Also, the model file syntax is far simpler and less error prone than the configuration override syntax, and, unlike configuration overrides, allows you to directly add data sources and JMS modules. You should not use the Administration Console or WLST for these domains as changes are ephemeral and will be lost when servers restart. |\n-| Logs are automatically placed on persistent storage and sent to the pod's stdout.  | Logs are kept in the images and sent to the pod's log (`stdout`) by default. To change their location, you can set the domain resource `logHomeEnabled` to true and configure the desired directory using `logHome`. | Same as Domain in Image.  |\n+| Lets you use the same standard WebLogic Docker image for every server in every domain. | Requires a different image for each domain, but all servers in that domain use the same image. | Different domains can use the same image, but require different domainUID and may have different configuration.  |\n+| No state is kept in Docker images making the containers created from these images completely throw away (cattle not pets). | Runtime state should not be kept in the images, but applications and configuration are. | Runtime state should not be kept in the images.  Application and configuration may be. |\n+| The domain is long-lived, so you can mutate the configuration or deploy new applications using the Administration Console or WLST. You can also mutate the configuration using configuration overrides. | If you want to mutate the domain home configuration, then you can apply configuration overrides or create a new image. If you want to deploy application updates, then you must create a new image. | If you want to mutate the domain home configuration, then you can override it with additional model files supplied in a ConfigMap or you can supply a new image. If you want to deploy application updates, then you must create a new image.  |\n+| You can use configuration overrides to mutate the domain configuration, but there are [limitations]({{< relref \"/userguide/managing-domains/configoverrides/_index.md#unsupported-overrides\" >}}) and non-dynamic configuration attributes can only be changed when servers are starting. | You can use configuration overrides to mutate the domain configuration, but there are [limitations]({{< relref \"/userguide/managing-domains/configoverrides/_index.md#unsupported-overrides\" >}}) and non-dynamic configuration attributes can only be changed when servers are starting. You should not use the Administration Console or WLST for these domains as changes are ephemeral and will be lost when servers restart. | You can deploy model files to a ConfigMap to mutate the domain, and may not need to restart the entire domain for the change to take effect. Instead, you can initiate a rolling upgrade, which restarts your WebLogic Server instance Pods one at a time. Also, the model file syntax is far simpler and less error prone than the configuration override syntax, and, unlike configuration overrides, allows you to directly add data sources and JMS modules. You should not use the Administration Console or WLST for these domains as changes are ephemeral and will be lost when servers restart. |", "originalCommit": "2798a0b9616c1368b98cbed3c497657964f19981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkzMTE2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453931161", "bodyText": "I'm not quite sure what you want me to change... The link is to one of the other documents in this PR that is updated.", "author": "rjeberhard", "createdAt": "2020-07-13T21:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMjAyMw=="}], "type": "inlineReview"}, {"oid": "cb6c76fb4beea839ca39ea45f6c39f6c8f57dfc9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cb6c76fb4beea839ca39ea45f6c39f6c8f57dfc9", "message": "Update domain in PV restarting section", "committedDate": "2020-07-13T20:56:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkzMTA4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453931085", "bodyText": "lifecycle  -> life cycle (life cycle (n), lifecycle (adj) )", "author": "rosemarymarano", "createdAt": "2020-07-13T21:02:57Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -84,6 +84,9 @@ For Domain in PV, the type of restart needed depends on the nature of the WebLog\n * Other non-dynamic domain configuration changes require either a manually initiated rolling restart or a full domain shut down and restart, depending on the nature of the change.\n   * For example, a rolling restart is applicable when changing a WebLogic Server `stuck thread timer interval` property. See [Restart all the servers in the domain]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restart-all-the-servers-in-the-domain\" >}}).\n \n+{{% notice note %}} The preceding description of the operator's lifecycle of responding to WebLogic domain configuration changes applies to version 3.0.0 and later. Prior to operator version 3.0.0, while you could make changes to WebLogic domain configuration using the Administration Console or WLST, the operator would only detect and respond to those changes following a full domain shut down and restart.", "originalCommit": "cb6c76fb4beea839ca39ea45f6c39f6c8f57dfc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26ff2a55cd404f17ba08e388761d2f39cb1cd6e1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/26ff2a55cd404f17ba08e388761d2f39cb1cd6e1", "message": "Typo", "committedDate": "2020-07-13T21:06:20Z", "type": "commit"}, {"oid": "20c394f97e72f5a3fe5ee0dbb0c207a7b9177adf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/20c394f97e72f5a3fe5ee0dbb0c207a7b9177adf", "message": "Work with Tom", "committedDate": "2020-07-13T22:56:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NzMzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1789#discussion_r453997332", "bodyText": "Will fix this typo", "author": "rjeberhard", "createdAt": "2020-07-13T23:08:13Z", "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Opss.java", "diffHunk": "@@ -12,11 +12,14 @@\n \n public class Opss {\n \n-  @Description(\"Name of a Secret containing the OPSS key wallet file.\")\n+  @Description(\"Name of a Secret containing the OPSS key wallet file, which must be in a filed named `walletFile`.\"", "originalCommit": "20c394f97e72f5a3fe5ee0dbb0c207a7b9177adf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7562ca1a1143156d0f1908dc25e7d1be1734f3a3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7562ca1a1143156d0f1908dc25e7d1be1734f3a3", "message": "Fix typo", "committedDate": "2020-07-13T23:21:45Z", "type": "commit"}, {"oid": "de52607f2f93abd2f7e4c3ccb22d99bc1e851aff", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/de52607f2f93abd2f7e4c3ccb22d99bc1e851aff", "message": "Break long sentence", "committedDate": "2020-07-14T12:33:03Z", "type": "commit"}]}