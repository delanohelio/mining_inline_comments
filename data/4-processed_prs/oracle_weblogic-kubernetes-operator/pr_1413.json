{"pr_number": 1413, "pr_title": "model-in-image sample update", "pr_createdAt": "2020-01-31T17:30:48Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413", "timeline": [{"oid": "beab47454fe072a792b0b694a132c0b8d207d685", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/beab47454fe072a792b0b694a132c0b8d207d685", "message": "model-in-image sample update", "committedDate": "2020-01-31T17:26:36Z", "type": "commit"}, {"oid": "517ebd5e80f4d529fe1d0066bbff694ca485d4bb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/517ebd5e80f4d529fe1d0066bbff694ca485d4bb", "message": "model-in-image sample update", "committedDate": "2020-01-31T18:03:53Z", "type": "commit"}, {"oid": "63456b145777fcb7510761d908e89e6069fb8067", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/63456b145777fcb7510761d908e89e6069fb8067", "message": "model-in-image sample update", "committedDate": "2020-01-31T18:06:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMjQxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373622416", "bodyText": "This is no longer used, once the final schema schema is settled, it can be removed", "author": "jshum2479", "createdAt": "2020-01-31T18:32:18Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template", "diffHunk": "@@ -80,36 +91,39 @@ spec:\n     replicas: 2\n   # The number of managed servers to start for unlisted clusters\n   # replicas: 1\n-  #\n+  \n   # Optional configmap for additional models and variable files\n-  #\n-  wdtConfigMap : wdt-config-map\n-  #\n-  # user online update or not (default is false)\n-  #\n+  wdtConfigMap : domain1-wdt-config-map\n+\n+  # user model-in-image online update or not (default is false)\n   #useOnlineUpdate: \"true\"\n+\n   #\n   # For life cycle online update, if it is set to true it will cancel the update and error out\n   # default is false if not set\n   #\n   #rollbackIfRequireStart: true\n+\n   #\n-  # wdt domain type for model in image case\n-  # Valid WDT_DOMAIN_TYPE_VALUES are 'WLS', 'JRF', and 'RestrictedJRF'\n+  # The wdt domain type for model in image case.\n+  # Valid values are 'WLS', 'JRF', and 'RestrictedJRF'\n   #\n   wdtDomainType: \"@@DOMTYPE@@\"\n+\n   #\n   #\n-  # keep jrf schema between updates. If not set default to true\n+  # Keep jrf schema between updates. If not set, defaults to true.\n   #\n   #keepJRFSchema: \"true\"", "originalCommit": "63456b145777fcb7510761d908e89e6069fb8067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyNTIxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373725217", "bodyText": "ok let's leave it in then for now", "author": "tbarnes-us", "createdAt": "2020-01-31T23:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMjQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNTc3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373705775", "bodyText": "Is CGBU a division name or product name?  I believe the initial goal is simplify some products like OHS that needs part of JRF functionalities for security but don't want a database approach.  https://docs.oracle.com/middleware/12213/webtier/administer-ohs/GUID-11F66F85-C131-4F87-9989-27FF2AACED76.htm#HSADM12062", "author": "jshum2479", "createdAt": "2020-01-31T22:03:48Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/README.md", "diffHunk": "@@ -1,56 +1,44 @@\n # Model in Image Sample\n \n-This sample demonstrates the WebLogic Kubernetes Operator \"Model in Image\" feature. Model in Image enables specifying a Weblogic Deploy Tool (WDT) model that the operator uses to generate a full domain home during runtime. This eliminates the need to pre-create a WebLogic domain home prior to deploying your domain resource. \n+This sample demonstrates the WebLogic Kubernetes Operator \"Model in Image\" feature. Model in Image allows you to supply a Weblogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime. This eliminates the need to pre-create a WebLogic domain home prior to deploying your domain resource.\n \n-WDT models are a convenient and succinct alternative to WebLogic configuration scripts. They compactly define a WebLogic domain via yaml files, plus support for application archives. The WDT model \n- format is \n- described in [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling).\n+WDT models are a convenient and succinct alternative to WebLogic configuration scripts and templates. They compactly define a WebLogic domain via yaml files, plus support for application archives. The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n  \n-When using ```Model In Image```, you can specify the WDT models and archives in the image. In addition, you can also \n-provide additional models and variable files in a ```Kubernetes Configuration Map (configmap)```.  The WDT artifacts \n-will be \n-combined together and used by the ```WebLogic Deploy Tool``` to generate the domain.  Life cycle updates can be \n-applied to the image or the configmap after initial deployment.\n+When using `Model In Image`, you can include your WDT models, WDT archives, and the WDT install in your image. In addition, you can also provide additional models and variable files in a Kubernetes configuration map (configmap). When you deploy your domain resource, the operator will combine the WDT artifacts and then run the WDT tooling to generate the domain. Life cycle updates can be applied to the image or the configmap after initial deployment.\n \n-This sample demonstrates deploying a WebLogic servlet application within a basic `WLS` domain, a Oracle Fusion \n-Middleware Infrastructure `JRF` domain, or a `RestrictedJRF` domain. The `JRF` domain path through the sample includes additional steps for deploying a database and initializing the database using the RCU tool. `JRF` domains are used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. `RestrictedJRF` domains are used by other Oracle layered products such as CGBU.\n+This sample demonstrates deploying a WebLogic servlet application within a basic `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain. The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains are used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. `RestrictedJRF` domains are used by other Oracle layered products such as CGBU.", "originalCommit": "63456b145777fcb7510761d908e89e6069fb8067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyNTAxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373725019", "bodyText": "updated", "author": "tbarnes-us", "createdAt": "2020-01-31T23:10:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNTc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNzIwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373707209", "bodyText": "Do we want to specify this is helm 2 syntax only ?", "author": "jshum2479", "createdAt": "2020-01-31T22:07:52Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/README.md", "diffHunk": "@@ -59,218 +47,120 @@ It is helpful to understand the following high-level flow before running the sam\n      | /u01/wdt/models          | optional application archives      | zip         |\n      | /u01/wdt/weblogic-deploy | unzipped weblogic deploy install   |             |\n \n-     Note that the WebLogic Image Tool mentioned in the previous step can create and populate this directory structure for you.\n+     Note that the WebLogic Image Tool mentioned in the previous bullet can create and populate this directory structure for you.\n \n-   - To control the model file loading order, see [Model File Naming and Loading Order](#model-file-naming-and-loading-order).\n \n-4. Create a WDT model config map (optional if step 3 fully defines your model).\n+4. Create a WDT model config map (optional if the image supplied by step 3 already fully defines your model).\n \n-   - You can optionally create a config map containing additional model yaml and model variable property files. They \n-   will be applied during domain creation after the models found in the image directory `/u01/wdt/models`. Note that \n-   it is a best practice to label the configmap with its domainUID to help ensure that cleanup scripts can find and delete the resource. \n+   - You can optionally create a config map containing additional model yaml and model variable property files. They will be applied during domain creation after the models found in the image directory `/u01/wdt/models`. Note that it is a best practice to label the configmap with its domainUID to help ensure that cleanup scripts can find and delete the resource. It is also a best practice to include the name of the domainUID in your configmap name so that it is unique from other domains.\n \n-   - For example, in a directory ```/home/acmeuser/wdtoverride```, place additional models and variables files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n+   - For example, in a directory `/home/acmeuser/wdtoverride`, place additional models and variables files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n \n      ```\n      kubectl -n sample-domain1-ns \\\n-       create configmap sample-domain1-wdt-config-map \\\n+       create configmap domain1-wdt-config-map \\\n        --from-file /home/acmeuser/wdtoverride\n      kubectl -n sample-domain1-ns \\\n-       label configmap sample-domain1-wdt-config-map \\\n+       label configmap domain1-wdt-config-map \\\n        weblogic.domainUID=sample-domain1\n      ```\n \n    - To control the model file loading order, see [Model File Naming and Loading Order](#model-file-naming-and-loading-order).\n \n-5. Optionally create an encryption secret\n+5. Optionally create an encryption secret.\n \n-   - The ```WebLogic Deploy Tool``` encryption option is one of two options for encrypting sensitive information stored in a model.\n+   - The `WebLogic Deploy Tool` encryption option is one of two options for encrypting sensitive information stored in a model.\n \n      > __NOTE__: Oracle recommends storing sensitive information using Kubernetes secrets when practical instead of relying on the WDT encryption option. See [Using Secrets in Model Files](#using-secrets-in-model-files).\n \n-   - If you want to use the WDT encryption option, then you need to create a secret to store the encryption \n-   passphrase. The passphrase will be used to decrypt the model during domain creation. The secret can be named \n-   anything, but it must contain a key named ```passphrase```.  Note that it is a best practice to label secrets with \n-   their \n-   domain UID to help ensure that cleanup scripts can find and delete them.\n+   - If you want to use the WDT encryption option, then you need to create a secret to store the encryption passphrase. The passphrase will be used to decrypt the model during domain creation. The secret can be named anything, but it must contain a key named `passphrase`.  Note that it is a best practice to label secrets with their domain UID to help ensure that cleanup scripts can find and delete them.\n \n      ```\n      kubectl -n sample-domain1-ns \\\n-       create secret generic sample-domain1-wdt-secret \\\n+       create secret generic sample-domain1-wdt-encrypt-secret \\\n        --from-literal=passphrase=welcome1\n      kubectl -n sample-domain1-ns \\\n-       label secret sample-domain1-wdt-secret \\\n+       label secret sample-domain1-wdt-encrypt-secret \\\n        weblogic.domainUID=sample-domain1\n      ```\n \n-6. Update the domain resource yaml file \n+6. Update domain resource yaml file attributes:\n \n-   - ```domainHomeInImage``` must set to true in the domain resource yaml file\n+   - Set `domainHomeInImage` to true.\n    \n-   - ```domainHome``` must be set.  This is the domain home directory to be created, so it must not exist \n-   in the image nor in the mount path of any persistent volume. \n+   - Set `domainHome` to the domain home directory that will be created within the image at runtime. It must not already exist in the image. It must not include the mount path of any persistent volume. \n    \n-   - If you have additional models stored in a config map, then include the following keys to the domain resource \n-   yaml file as needed:\n+   - Set `wdtConfigMap` if you have additional models stored in a config map. For example, assuming the config map is named `domain1-wdt-config-map` as per step 4 above:\n    \n      ```\n-     wdtConfigMap : wdt-config-map\n+     wdtConfigMap : domain1-wdt-config-map\n      ```\n \n-   - If you models reference Kubernetes secrets, then include the following keys to the domain resource yaml file as needed:\n+   - If your models reference Kubernetes secrets, then include them as in the following domain resource attribute as needed:\n    \n      ```\n      configOverrideSecrets: [my-secret, my-other-secret]\n      ```\n \n-   - In addition, specify the domain type in the domain resource yaml attribute. Valid values are `WLS`, `JRF`, and `RestrictedJRF`.\n-\n-     ```\n-       wdtDomainType: \"WLS\"\n-     ```\n-\n-   - In addition, if the WDT model is encrypted, create a Kubernetes secret and then specify the secret name.\n+   - Set `wdtDomainType`. Valid values are `WLS`, `JRF`, and `RestrictedJRF` where `WLS` is the default.\n \n      ```\n-         kubectl -n sample-domain1-ns create secret generic wdt-encrypt-passphrase-secret --from-literal=passhrase=welcome1\n-\n-  \n-         wdtEncryptionPassPhrase: \n-           name: wdt-encrypt-passphrase-secret\n+     wdtDomainType: \"WLS\"\n      ```\n \n-   - For JRF domain type, since the domain may be recreated in each life cycle deployment and you want to be able to \n-   reuse the same infrastructure database.  WebLogic Kubernetes Operator will extract and store the OPSS wallet of \n-   the domain and stored in the introspect domain configmap.  However, if the introspect configmap is deleted, the \n-   OPSS is gone and you will not be able to attach any domain to that database. Oracle strongly recommends creating a passphrase \n-   in a Kubernetes secret and extract the OPSS key from the introspect configmap and back up in a safe location.\n-   There are additional attributes in the domain resource yaml file that you must set.\n-\n-     | Attribute                | Usage                                                                          |\n-     | ------------------------ | ------------------------------------------------------------------------------| \n-     | opssWalletSecret        | Kubernetes secret name for the opss wallet  |\n-     | | When this is set. The operator will use the value of the ```passphrase``` key in the secret to extract the \n-     | | opss wallet and store it in the introspector config map.  | \n-     | | In situation if it is desirable to share the same infrastructure database across multiple domains, the |\n-     | | wallet stored in the introspector config map can be extract and store in the same secret with key |\n-     | | ```ewallet.p12``` |\n-\n-\n-     Create secret with the passphrase \n-     \n+   - Finally, if the WDT model is encrypted, then create a Kubernetes secret for its `passphrase` as described in step 5 above, and specify the secret name in your domain resource using the `wdtEncryptionPassPhrase` attribute.  For example:\n      ```\n-        kubectl -n sample-domain1-ns create secret generic opss-key-passphrase-secret --from-literal=passhrase=welcome1\n+     wdtEncryptionPassPhrase: \n+       name: sample-domain1-wdt-encrypt-secret\n      ```\n-            \n-     You can extract the opss wallet from the introspect domain after it is first deployed.\n-   \n-    ```\n-    kubectl -n <ns> describe configmap <domain-uid>-weblogic-domain-introspect-cm | sed -n '/ewallet.p12/ {n;n;p}' > \n-    ewallet.p12\n-    ```\n-    \n-    Create the secret with both passphrase and opss wallet\n-    \n-    ```\n-    kubectl -n sample-domain1-ns create secret generic opss-key-passphrase-secret --from-literal=passhrase=welcome1 \n-    --from-file=ewallet.p12\n-      \n-    ```\n-\n-   - (Experimental) During lifecycle updates, specify the behavior of whether to use dynamic update (no rolling of \n-   server). \n-\n-\n-     | Attribute                | Usage                              |\n-     | ------------------------ | ---------------------------------- | \n-     | useOnlineUpdate          | (true or false) Default is false. User WLST online update for changes.      |\n-     | rollbackIfRequireStart   | (true or false) Default is true. If successful, there will be no rolling restart,  |                        \n-     | | Otherwise, it will cancel the changes and the introspector job will have error.  Note: your changes  |\n-     || in the image or configmap will not be rollback |\n-\n-\n \n+7. If you are using a `JRF` domain type, see [Setup Prerequisites for JRF Domains](#setup-prerequisites-for-jrf-domains).\n      \n-# Model File Naming and Loading Order\n-\n-During domain home creation, model and property files are first loaded from directory `/u01/model_home/models` within the image and are then loaded from the optional wdt config map.  \n-\n-The loading order within each of these locations is first determined using the convention `filename.##.yaml` and `filename.##.properties`, where `##` is a numeric number that specifies the desired order, and then is determined alphabetically as a tie-breaker. File names that don't include `.##.` sort _before_ other files as if they implicitly have the lowest possible `.##.`. If an image file and config map file both have the same name, then both files are loaded.\n-\n-For example, if you have these files in the image directory `/u01/model_home/models`: \n-\n-  ```\n-  jdbc.20.yaml\n-  main-model.10.yaml\n-  my-model.10.yaml\n-  y.yaml\n-  ```\n-And you have these files in the config map:\n-\n-  ```\n-  jdbc-dev-urlprops.10.yaml\n-  z.yaml\n-  ```\n-Then the combined model files list passed to the ```WebLogic Deploy Tool``` becomes:\n-\n-  ```y.yaml,main-model.10.yaml,my-model.10.yaml,jdbc.20.yaml,z.yaml,jdbc-dev-urlprops.10.yaml```\n-\n-Property files (ending in `.properties`) use the same sorting algorithm, but they are appended together into a single file prior to passing them to the ```WebLogic Deploy Tool```.\n-\n-# Using Secrets in Model Files\n-\n-You can use wdt model `@@FILE` macros to reference the WebLogic administrator username and password that is stored in \n-a Kubernetes secret and to optionally reference additional secrets. \n-\n-Secret names are specified in your domain resource using the `weblogicCredentialsSecret` and `configOverridesSecrets` fields, and secret mounts are at the following locations:\n-\n-  |domain resource field|directory location|\n-  |---------------------|-------------|\n-  |webLogicCredentialsSecret|/weblogic-operator/secrets|\n-  |configOverridesSecrets|/weblogic-operator/config-overrides-secrets/SECRET_NAME|\n-\n-For example:\n-  \n-  - You can reference the weblogic credentials secret via `@@FILE:/weblogic-operator/secrets/username@@` and `@@FILE:/weblogic-operator/secrets/password@@`.  \n-  - You can reference a config overrides secret `mysecret` with value `myvalue` via `@@FILE:/weblogic-operator/config-overrides-secrets/mysecret/myvalue@@`.\n-\n # Using this Sample\n \n ## Prerequisites for all domain types\n \n-1. JAVA_HOME environment must be set and point to a valid JDK8 installation.\n+1. The JAVA_HOME environment variable must be set and must reference a valid JDK8 installation.\n+\n+2. Setup a source directory env variable `SRCDIR`, an empty test directory, and a test directory environment variable `WORKDIR`.  Specifically:\n \n-2. Setup a test directory, a source directory env variable, and a test directory environment variable.\n+   - Store the location of the Operator source code in an environment variable `SRCDIR`.  For example:\n \n-   - Store the location of the Operator source code in an environment variable `SRCDIR`.\n+     ```\n+     mkdir ~/wlopsrc\n+     cd ~/wlopsrc\n+     git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+     export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+     ```\n+\n+     For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n    \n-   - Create an empty temporary working directory with 10g of space, and store its location in `WORKDIR`.\n+   - Create an empty temporary working directory with 10g of space, and store its location in `WORKDIR`. For example:\n \n-   ```\n-   cd <top of source tree - should end with '/weblogic-kubernetes-operator'>\n-   export SRCDIR=$(pwd)\n-   cd <location of empty temporary directory with 10g of space>\n-   export WORKDIR=$(pwd)\n-   ```\n+     ```\n+     cd <location of empty temporary directory with 10g of space>\n+     export WORKDIR=$(pwd)\n+     ```\n \n-3. Copy all the files in this sample to the working directory (substitute your Operator source location for SRCDIR).\n+3. Copy all the files in this sample to the `$WORKDIR` working directory. For example:\n \n    ```\n    cp -R ${SRCDIR?}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/* ${WORKDIR?}\n    ```\n \n-4. Deploy the Operator and setup the Operaator to manage namespace `sample-domain1-ns`. \n+4. Deploy the Operator and setup the Operator to manage namespace `sample-domain1-ns`. \n+\n    - For example, see [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/) up through the `PREPARE FOR A DOMAIN` step. Note that you can skip the Quick Start steps for obtaining a WebLogic image and for configuring Traefik load balancer - as instead we we will generate our own image and setup an nginx load balancer instead.\n-   - If you've already deployed the Operater, you can use `helm get values my-operator-release` to check if it is \n-   managing namespace `sample-domain1-ns` and use helm upgrade to add this namespace if needed.  For example:\n+   - After you've deployed the Operater, check if it is managing namespace `sample-domain1-ns` and use helm upgrade to add this namespace if needed.  For example:\n      ```\n-     # get the helm release name for the running operator\n+     # get the helm release name for the running operator, and use\n+     # this release name in place of 'my-operator-release' below", "originalCommit": "63456b145777fcb7510761d908e89e6069fb8067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMDQ4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373720484", "bodyText": "can you supply the helm 3 syntax?", "author": "tbarnes-us", "createdAt": "2020-01-31T22:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNzIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyNTMzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373725333", "bodyText": "or merge the pull, and make the update yourself?", "author": "tbarnes-us", "createdAt": "2020-01-31T23:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNzIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwODA4Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373708087", "bodyText": "This is the one time cost.  During update, the import key tells the opss installer to reuse the database.  But I suggest we add the attribute to the helm chart and also fix system test and other classes necessary to make it easier.", "author": "jshum2479", "createdAt": "2020-01-31T22:10:49Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/README.md", "diffHunk": "@@ -452,3 +289,175 @@ the pods are up, you can ctrl-c to exit the build script.\n    ```\n    kubectl delete -f k8s-db-slim.yaml\n    ```\n+\n+# Model File Naming and Loading Order\n+\n+Refer to this section if you need to control the order in which your model files are loaded. \n+\n+During domain home creation, model and property files are first loaded from directory `/u01/model_home/models` within the image and are then loaded from the optional wdt config map. The loading order within each of these locations is first determined using the convention `filename.##.yaml` and `filename.##.properties`, where `##` is a numeric number that specifies the desired order, and then is determined alphabetically as a tie-breaker. File names that don't include `.##.` sort _before_ other files as if they implicitly have the lowest possible `.##.`. If an image file and config map file both have the same name, then both files are loaded.\n+\n+For example, if you have these files in the image directory `/u01/model_home/models`: \n+\n+  ```\n+  jdbc.20.yaml\n+  main-model.10.yaml\n+  my-model.10.yaml\n+  y.yaml\n+  ```\n+And you have these files in the config map:\n+\n+  ```\n+  jdbc-dev-urlprops.10.yaml\n+  z.yaml\n+  ```\n+Then the combined model files list passed to the `WebLogic Deploy Tool` becomes:\n+\n+  ```y.yaml,main-model.10.yaml,my-model.10.yaml,jdbc.20.yaml,z.yaml,jdbc-dev-urlprops.10.yaml```\n+\n+Property files (ending in `.properties`) use the same sorting algorithm, but they are appended together into a single file prior to passing them to the `WebLogic Deploy Tool`.\n+\n+# Using Secrets in Model Files\n+\n+You can use wdt model `@@FILE` macros to reference the WebLogic administrator username and password that is stored in a Kubernetes secret and to optionally reference additional secrets. \n+\n+Secret names are specified in your domain resource using the `weblogicCredentialsSecret` and `configOverridesSecrets` fields, and secret mounts are at the following locations:\n+\n+  |domain resource field|directory location|\n+  |---------------------|-------------|\n+  |webLogicCredentialsSecret|/weblogic-operator/secrets|\n+  |configOverridesSecrets|/weblogic-operator/config-overrides-secrets/SECRET_NAME|\n+\n+For example:\n+  \n+  - You can reference the weblogic credentials secret via `@@FILE:/weblogic-operator/secrets/username@@` and `@@FILE:/weblogic-operator/secrets/password@@`.  \n+  - You can reference a config overrides secret `mysecret` with value `myvalue` via `@@FILE:/weblogic-operator/config-overrides-secrets/mysecret/myvalue@@`.\n+\n+\n+# Setup Prerequisites for JRF Domains\n+\n+> __IMPORTANT__: This section is only required for demonstrating a `JRF` domain type. Skip this section if your domain type is simply a `WLS` or a `RestrictedJRF` domain.\n+\n+A JRF domain requires an infrastructure database called an RCU Database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain. \n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to setup an infrastructure database that will work with this sample:\n+\n+  - Step 1) See [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  - Step 2) See [Increase Introspection Job Timeout](#increase-introspection-job-timeout).\n+  - Step 3) See [Setup RCU model attributes, domain resource attributes, and secrets](#setup-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+\n+\n+> __Reusing or sharing RCU tables__: When you deploy a JRF domain for the first time, the domain will further update the RCU tables from step 1 and also create a 'wallet' in the domain's local directory that enables access the domain's data in the RCU DB. To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet from the original domain and save the OPSS key that was used for the original domain. The key and wallet are needed again when you recreate the domain or share the database with other domains. See [Reusing an RCU Database between Domain Deployments](#reusing-an-rcu-database-between-domain-deployments) for instructions.\n+\n+\n+## Set Up and Initialize an RCU Database\n+\n+A JRF domain requires an infrastructure database and also requires initalizing this database with a schema and a set of tables. The following example shows how to setup a sample RCU Database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is setup with the following aspects so that it works with the sample: \n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | default |\n+| database Kubernetes pod | oracle-db |\n+| database image | container-registry.oracle.com/database/enterprise:12.2.0.1-slim |\n+| database password | Oradoc_db1 |\n+| infrastructure schema prefix | FMW1 |\n+| infrastructure schema password | Oradoc_db1 |\n+| database URL | oracle-db.default.svc.cluster.local:1521/devpdb.k8s |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to login to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+     > __NOTE__: If a local docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote k8s cluster), then uncomment the imagePullSecrets stanza in '$WORKDIR/k8s-db-slim.yaml' and create the image pull secret:\n+       ```\n+       kubectl create secret docker-registry regsecret \\\n+         --docker-server=container-registry.oracle.com \\\n+         --docker-username=your.email@some.com \\\n+         --docker-password=your-password \\\n+         --docker-email=your.email@some.com \n+       ```\n+\n+   - Use the sample script in '$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service' to create an Oracle DB running in pod 'oracle-db'.\n+\n+     > __NOTE__: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service \n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with URL `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` and administration password `Oradoc_db1`.\n+ \n+     > __WARNING__: The Oracle Database Docker images are only supported for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) \n+     >            : All the data is gone when the database is restarted. \n+   \n+     > __NOTE__: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `WORDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the dba password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema \n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3\n+   ```\n+\n+3. __NOTE__:  If you need to drop the repository, you can use this command in the terminal:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+## Increase Introspection Job Timeout\n+\n+Since JRF domain home creation takes considerable time, and since model-in-image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the command `kubectl -n sample-weblogic-operator-ns edit configmap weblogic-operator-cm` to open up an editor for the operator settings, and then use this editor to add parameter `introspectorJobActiveDeadlineSeconds` with a value of at least 300 seconds (default is 120 seconds).  \n+\n+TBD Is this a one time cost (first time), or does this happen every time a domain is restarted?", "originalCommit": "63456b145777fcb7510761d908e89e6069fb8067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMDk1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373720957", "bodyText": "ok - sounds like this is more work than just changing the README - i'll update the README and push a change to this pull plus add you're comment to the to-do list in your wiki", "author": "tbarnes-us", "createdAt": "2020-01-31T22:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwODA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyNTEyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1413#discussion_r373725128", "bodyText": "updated - left a simpler TBD in-line and updated our to-do list", "author": "tbarnes-us", "createdAt": "2020-01-31T23:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwODA4Nw=="}], "type": "inlineReview"}, {"oid": "4583dd429c46470faad5930957c2fa394663007f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4583dd429c46470faad5930957c2fa394663007f", "message": "README update", "committedDate": "2020-01-31T23:09:18Z", "type": "commit"}]}