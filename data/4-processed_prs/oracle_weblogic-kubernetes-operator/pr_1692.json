{"pr_number": 1692, "pr_title": "MII Documentation Updates", "pr_createdAt": "2020-05-29T22:23:11Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692", "timeline": [{"oid": "78cfc84989f6b72d5974d0f73af3a3b619043219", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/78cfc84989f6b72d5974d0f73af3a3b619043219", "message": "MII Documentation Updates", "committedDate": "2020-05-29T22:21:25Z", "type": "commit"}, {"oid": "b1300f937764af1228ec3dd2be027798223c67ad", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b1300f937764af1228ec3dd2be027798223c67ad", "message": "MII minor doc updates.", "committedDate": "2020-05-30T18:22:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxNDA0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433214045", "bodyText": "to login to -> to log in to (log in to (v), login (n))", "author": "rosemarymarano", "createdAt": "2020-06-01T12:49:18Z", "path": "docs-source/content/faq/cannot-pull-image.md", "diffHunk": "@@ -122,15 +122,37 @@ kubectl patch serviceaccount default \\\n ```\n \n {{% notice note %}}\n-You can provide mutliple `imagePullSecrets` if you need to pull Docker images from multiple\n+You can provide multiple `imagePullSecrets` if you need to pull Docker images from multiple\n remote Docker registries or if your images require different authentication credentials.\n For more information, see [Docker Image Protection]({{<relref \"/security/domain-security/image-protection#weblogic-domain-in-docker-image-protection\">}}).\n {{% /notice %}}\n \n+#### Pushing the image to a repository\n+\n+If you have an image in your local repository that you would like to copy to\n+a remote repository, then the Docker steps are:\n+\n+- Use [docker login](https://docs.docker.com/engine/reference/commandline/login/)\n+  to login to the target repository's registry. For example: ", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyMDE4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433220189", "bodyText": "docker  -> Docker", "author": "rosemarymarano", "createdAt": "2020-06-01T13:02:23Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -111,6 +112,22 @@ Location | Description |\n `utils/patch-restart-version.sh` | Utility for updating a running domain `spec.restartVersion` field (which causes it to 're-instrospect' and 'roll'). |\n `utils/opss-wallet.sh` | Utility for exporting or importing a JRF domain OPSS wallet file. |\n \n+#### Ensuring your Kubernetes cluster can access images\n+\n+If you run the sample from a machine that is remote to one or more of your Kubernetes cluster worker nodes, then you need to ensure that the images you create can be accessed from any node in the cluster.\n+\n+For example, if you have permission to put the image in a Docker repository that the cluster can also access, then:\n+  - After you've created an image:\n+    - `docker tag` the image with a target image name (including the registry hostname, port, repository name, and the tag, if needed).\n+    - `docker push` the tagged image to the target repository.\n+  - Before you deploy a domain resource:\n+    - Modify the domain resource file's `image:` value to match the Docker tag for the image in the repository. \n+    - If the repository requires a login, then also deploy a corresponding Kubernetes docker secret to the same namespace that the domain resource will use, and modify the domain resource file's `imagePullSecrets:` to reference this secret. ", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyMDQ0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433220440", "bodyText": "docker -> Docker (globally)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:02:55Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -111,6 +112,22 @@ Location | Description |\n `utils/patch-restart-version.sh` | Utility for updating a running domain `spec.restartVersion` field (which causes it to 're-instrospect' and 'roll'). |\n `utils/opss-wallet.sh` | Utility for exporting or importing a JRF domain OPSS wallet file. |\n \n+#### Ensuring your Kubernetes cluster can access images\n+\n+If you run the sample from a machine that is remote to one or more of your Kubernetes cluster worker nodes, then you need to ensure that the images you create can be accessed from any node in the cluster.\n+\n+For example, if you have permission to put the image in a Docker repository that the cluster can also access, then:\n+  - After you've created an image:\n+    - `docker tag` the image with a target image name (including the registry hostname, port, repository name, and the tag, if needed).\n+    - `docker push` the tagged image to the target repository.\n+  - Before you deploy a domain resource:\n+    - Modify the domain resource file's `image:` value to match the Docker tag for the image in the repository. \n+    - If the repository requires a login, then also deploy a corresponding Kubernetes docker secret to the same namespace that the domain resource will use, and modify the domain resource file's `imagePullSecrets:` to reference this secret. \n+\n+Alternatively, if you have access to the local Docker image cache on each worker node in the cluster, then you can use a docker command to save the image to a file, copy the image file to each worker node, and use a docker command to load the image file into the node's image cache.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyMTY5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433221692", "bodyText": "fmw -> FMW", "author": "rosemarymarano", "createdAt": "2020-06-01T13:05:39Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -350,25 +367,31 @@ A JRF domain requires an infrastructure database and also requires initializing\n \n      This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n \n+     __NOTE__: If your Kubernetes cluster nodes do not all have access to the database image in a local docker cache, then deploy a Kubernetes `docker secret` to the default namespace with login credentials for `container-registry.oracle.com`, and pass the name of this secret as a parameter to `start-db-service.sh` using `-s your-image-pull-secret`. Alternatively, copy the database image to each local docker cache in the cluster.  For more information, see the [Cannot pull image FAQ]({{<relref \"/faq/cannot-pull-image\">}}).\n+\n      **WARNING:** The Oracle Database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1).\n \n \n-2. Use the sample script in `/tmp/operator-source/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+2. Use the sample script in `/tmp/operator-source/kubernetes/samples/scripts/create-rcu-schema` to create an RCU schema for each domain (schema prefixes `FMW1` and `FMW2`).\n \n    Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n \n    ```\n    $ cd /tmp/operator-source/kubernetes/samples/scripts/create-rcu-schema\n    $ ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   $ ./create-rcu-schema.sh -s FMW2 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n    ```\n \n-   __NOTE__:  If you need to drop the repository, use this command:\n+   __NOTE__: If your Kubernetes cluster nodes do not all have access to the fmw infrastructure image in a local docker cache, then deploy a Kubernetes `docker secret` to the default namespace with login credentials for `container-registry.oracle.com`, and pass the name of this secret as a parameter to `./create-rcu-schema.sh` using `-p your-image-pull-secret`. Alternatively, copy the fmw infrastructure image to each local docker cache in the cluster. For more information, see the [Cannot pull image FAQ]({{<relref \"/faq/cannot-pull-image\">}}).", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyMzAwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433223001", "bodyText": "using RCU prefix -> using the RCU prefix\nas the first domain -> because the first domain (since/as \u2013 don't use to mean for the reason of; use because.)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:08:24Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -1827,14 +1858,14 @@ Here are the steps for this use case:\n        - To make it easier to keep the life cycle and/or CI/CD process for the two domains simple and independent.\n        - To 'future proof' the new domain so that changes to the original domain's secrets or new domain's secrets can be independent.\n \n-   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation.\n+   If you're following the `JRF` path through the sample, then you also need to deploy the additional secret referenced by macros in the `JRF` model `RCUDbInfo` clause, plus an `OPSS` wallet password secret. For details about the uses of these secrets, see the [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation. Note that we are using RCU prefix `FMW2` for this domain, as the first domain is already using `FMW1`.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyNDcxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433224717", "bodyText": "WebLogic pods -> WebLogic Server pods (globally, if technically correct)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:11:55Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -125,17 +125,19 @@ You can use the following environment variables to specify JVM memory and JVM op\n * `USER_MEM_ARGS` : JVM memory arguments for starting WebLogic Server.\n * `NODEMGR_JAVA_OPTIONS` : Java options for starting a Node Manager instance.\n * `NODEMGR_MEM_ARGS` : JVM memory arguments for starting a Node Manager instance.\n+* `WLST_PROPERTIES` : System properties for WLST commands in introspector jobs or WebLogic pods.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyNTI2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433225266", "bodyText": "(FAN), see -> (FAN); see (these are actually two sentences; if you want them joined, then use a semi-colon.)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:13:00Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -125,17 +125,19 @@ You can use the following environment variables to specify JVM memory and JVM op\n * `USER_MEM_ARGS` : JVM memory arguments for starting WebLogic Server.\n * `NODEMGR_JAVA_OPTIONS` : Java options for starting a Node Manager instance.\n * `NODEMGR_MEM_ARGS` : JVM memory arguments for starting a Node Manager instance.\n+* `WLST_PROPERTIES` : System properties for WLST commands in introspector jobs or WebLogic pods.\n+* `WLSDEPLOY_PROPERTIES` : System properties for WebLogic Deploy Tool commands in Model in Image introspector jobs or WebLogic pods.\n \n-**Note**: The `USER_MEM_ARGS` environment variable defaults to `-Djava.security.egd=file:/dev/./urandom` in all WebLogic Server pods and the WebLogic introspection job. It can be explicitly set to another value in your domain resource YAML file using the `env` attribute under the `serverPod` configuration.\n+**Notes:**\n \n-The following behavior occurs depending on whether or not `NODEMGR_JAVA_OPTIONS` and `NODEMGR_MEM_ARGS` are defined:\n+* The following behavior occurs depending on whether or not `NODEMGR_JAVA_OPTIONS` and `NODEMGR_MEM_ARGS` are defined:\n+  * If `NODEMGR_JAVA_OPTIONS` is not defined and `JAVA_OPTIONS` is defined, then the `JAVA_OPTIONS` value will be applied to the Node Manager instance.\n+  * If `NODEMGR_MEM_ARGS` is not defined, then default memory and Java security property values (`-Xms64m -Xmx100m -Djava.security.egd=file:/dev/./urandom`) will be applied to the Node Manager instance. It can be explicitly set to another value in your domain resource YAML file using the `env` attribute under the `serverPod` configuration.\n+* The `USER_MEM_ARGS` environment variable defaults to `-Djava.security.egd=file:/dev/./urandom` in all WebLogic Server pods and the WebLogic introspection job. It can be explicitly set to another value in your domain resource YAML file using the `env` attribute under the `serverPod` configuration.\n+* Notice that the `NODEMGR_MEM_ARGS` and `USER_MEM_ARGS` environment variables both set `-Djava.security.egd=file:/dev/./urandom` by default. This respectively helps to speed up the Node Manager and WebLogic Server startup on systems with low entropy. \n+* You can use `JAVA_OPTIONS` to disable Fast Application Notifications (FAN), see the [Disable Fast Application Notifications FAQ]({{<relref \"/faq/fan.md\">}}) for details.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MjM1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433452355", "bodyText": "I don't see this one fixed.", "author": "rosemarymarano", "createdAt": "2020-06-01T19:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyNTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyNTcyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433225727", "bodyText": "helm -> Helm", "author": "rosemarymarano", "createdAt": "2020-06-01T13:13:58Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/debugging.md", "diffHunk": "@@ -29,6 +30,10 @@ To check the domain resource status: `kubectl -n MY_NAMESPACE describe domain MY\n \n If your introspector job failed, then examine the `kubectl describe` of the job and its pod, and also examine its log, if one exists.\n \n+{{% notice tip %}}\n+To prevent the introspector job from retrying while you are debugging a failure, set the operator's helm `domainPresenceFailureRetryMaxCount` parameter to `0`. For more information, see  [Manage operators -> Use the operator -> Use Helm]({{<relref \"/userguide/managing-operators/using-the-operator/using-helm\">}}).", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyNjgwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433226801", "bodyText": "config map -> ConfigMap (Because config map is not an English word (configuration map is), we decided to use the Kubernetes camel case in every instance.)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:16:01Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/debugging.md", "diffHunk": "@@ -68,13 +73,17 @@ For example, assuming your domain UID is `sample-domain1` and your domain namesp\n         1. WLSDPLY-05007: Model file /u01/wdt/models/model1.yaml,/weblogic-operator/wdt-config-map/..2020_03_19_15_43_05.993607882/datasource.yaml contains an unrecognized section: TYPOresources. The recognized sections are domainInfo, topology, resources, appDeployments, kubernetes\n   ```\n \n+{{% notice tip %}}\n+When a model file error references a model file in your model config map, then you can correct the error by redeploying the configmap with a corrected model file and then initiating a domain restart or roll. Similarly, if a model file error references a model file in your model image, then you can correct the error by deploying a corrected image, modifying your domain resource to reference the new image, and then initiating a domain restart or roll.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyOTY1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433229652", "bodyText": "Common issues with corresponding FAQ entries include -> Common issues that have corresponding FAQ entries, include: (otherwise, the sentence could mean that there are issues with the FAQ.)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:21:31Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/debugging.md", "diffHunk": "@@ -99,3 +108,9 @@ Look for `SEVERE` and `ERROR` level messages in your operator logs. For example:\n     | egrep -e \"level...(SEVERE|WARNING)\" \\\n     | grep \"domainUID...sample-domain1\"\n   ```\n+\n+#### Check the FAQ\n+\n+Common issues with corresponding FAQ entries include:", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyOTgxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433229817", "bodyText": "WebLogic pods -> WebLogic Server pods", "author": "rosemarymarano", "createdAt": "2020-06-01T13:21:52Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/debugging.md", "diffHunk": "@@ -99,3 +108,9 @@ Look for `SEVERE` and `ERROR` level messages in your operator logs. For example:\n     | egrep -e \"level...(SEVERE|WARNING)\" \\\n     | grep \"domainUID...sample-domain1\"\n   ```\n+\n+#### Check the FAQ\n+\n+Common issues with corresponding FAQ entries include:\n+- When a domain resource is deployed and no introspector or WebLogic pods start, plus the operator log contains no mention of the domain, then check to make sure that the domain resource's namespace has been set up to be monitored by an operator. See the [Managing domain namespaces FAQ]({{<relref \"/faq/namespace-management\">}}).", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzMTU0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433231547", "bodyText": "stanza, see -> stanza; see (these are actually two sentences; if you want them joined, then use a semi-colon.)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:25:10Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/model-files.md", "diffHunk": "@@ -83,6 +85,9 @@ For a description of model file macro references to secrets and environment vari\n       AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n       AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n     ```\n+\n+- A JRF domain type model __must__ contain a `domainInfo.RCUDbInfo` stanza, see [Requirements for JRF domain types]({{< relref \"/userguide/managing-domains/model-in-image/usage/_index.md#requirements-for-jrf-domain-types\" >}}).", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzMjg3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433232870", "bodyText": "file name (adj) (n) (Oops, looks like a per-exisitng error. Use two words in instructional text, but use filename as a variable in code instructions and commands.)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:27:43Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/model-files.md", "diffHunk": "@@ -93,7 +98,8 @@ During domain home creation, model, and property files are first loaded from the\n \n The loading order within each of these locations is first determined using the convention `filename.##.yaml` and `filename.##.properties`, where `##` are digits that specify the desired order when sorted numerically. Additional details:\n \n- * Embedding a `.##.` in a filename is optional and can appear anywhere in the file name before the `properties` or `yaml` extension.\n+ * Embedding a `.##.` in a filename is optional.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0MDA5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433240096", "bodyText": "Question here: (I'm using semi-colons only to highlight the difference in phrases), is it \"additional support for initializing the infrastructure database for a domain when a domain is started for the first time; supplying a database password; and obtaining an database wallet\" OR is it: \"additional support for initializing the infrastructure database for a domain; when a domain is started for the first time, supplying a database password; and obtaining an database wallet\"? IF the correct phrasing is the latter, then remove the comma after domain, before when.", "author": "rosemarymarano", "createdAt": "2020-06-01T13:40:59Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/overview.md", "diffHunk": "@@ -34,44 +35,34 @@ It enables:\n \n This feature is supported for standard WLS domains, Restricted JRF domains, and JRF domains.\n \n-WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file.  The WDT model format is described in the open source, [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+For JRF domains, Model in Image provides additional support for initializing the infrastructure database for a domain, when a domain is started for the first time, supplying an database password, and obtaining an database wallet for re-use in subsequent restarts of the same domain. See [Requirements for JRF domain types]({{< relref \"/userguide/managing-domains/model-in-image/usage/_index.md#requirements-for-jrf-domain-types\" >}}).", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0MTI2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433241268", "bodyText": "WebLogic WLST -> WLST (or WebLogic Scripting Tool). WebLogic WLST is redundant.", "author": "rosemarymarano", "createdAt": "2020-06-01T13:43:04Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/overview.md", "diffHunk": "@@ -34,44 +35,34 @@ It enables:\n \n This feature is supported for standard WLS domains, Restricted JRF domains, and JRF domains.\n \n-WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file.  The WDT model format is described in the open source, [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+For JRF domains, Model in Image provides additional support for initializing the infrastructure database for a domain, when a domain is started for the first time, supplying an database password, and obtaining an database wallet for re-use in subsequent restarts of the same domain. See [Requirements for JRF domain types]({{< relref \"/userguide/managing-domains/model-in-image/usage/_index.md#requirements-for-jrf-domain-types\" >}}).\n \n-For JRF domains, Model in Image provides additional support for initializing the infrastructure database for a domain, when a domain is started for the first time, supplying an database password, and obtaining an database wallet for re-use in subsequent restarts of the same domain. See [Prerequisites for JRF domain types]({{< relref \"/userguide/managing-domains/model-in-image/usage/_index.md#prerequisites-for-jrf-domain-types\" >}}).\n+#### WebLogic Deploy Tool models\n \n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. For a discussion of the model format and its integration with Model in Image, see [WebLogic Server image]({{< relref \"/userguide/managing-domains/model-in-image/usage/_index.md#weblogic-server-image\" >}}) and [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}). The WDT model format is fully described in the open source, [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0MjU2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433242564", "bodyText": "WebLogics servers -> WebLogic Servers", "author": "rosemarymarano", "createdAt": "2020-06-01T13:45:26Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/runtime-updates.md", "diffHunk": "@@ -101,18 +101,16 @@ No. Custom configuration overrides, which are WebLogic configuration overrides s\n  - You cannot change the domain name at runtime.\n \n  - The following types of runtime update configuration are _not_ supported in this release of Model in Image. If you need to make these kinds of updates, shut down your domain entirely before making the change:\n-   * Domain topology (cluster members)\n-   * Network channel listen address, port, and enabled configuration\n+   * Domain topology of an existing WebLogic cluster (cluster members)\n+   * Network channel listen address, port, and enabled configuration of an existing cluster or server\n    * Server and domain log locations\n    * Node Manager related configuration\n    * Changing any existing MBean name\n \n    Specifically, do not apply runtime updates for:\n \n-   * Adding or removing:\n-     * Servers\n-     * Clusters\n-     * Network Access Points (custom channels)\n+   * Adding WebLogics servers to a cluster, or removing them", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0NDg0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433244847", "bodyText": "and the WebLogic Deploy Tooling [Compare Model Tool] > and the [Compare Model Tool]\nYAML -> YAML file", "author": "rosemarymarano", "createdAt": "2020-06-01T13:49:34Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/runtime-updates.md", "diffHunk": "@@ -153,9 +151,9 @@ As was mentioned in the [overview](#overview), one way to tell the operator to a\n    fi\n    ```\n \n-#### Using the WDT Discover Domain Tool\n+#### Using the WDT Discover Domain and Compare Model Tools\n \n-The WebLogic Deploy Tooling [Discover Domain Tool](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/discover.md) generates model files from an existing domain home. You can use this tool to help determine the model file contents you would need to supply to update an existing model.\n+The WebLogic Deploy Tooling [Discover Domain Tool](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/discover.md) generates model files from an existing domain home, and the WebLogic Deploy Tooling [Compare Model Tool](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/compare.md) compares two domain models and generates the YAML for updating the first domain to the second domain. You can use these tools in combination to help determine the model file contents you would need to supply to update an existing model.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzODQ4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433438486", "bodyText": "I don't see this corrected, the removal of the redundant \"WebLogic Deploy Tooling\" in front of Compare Model Tool.", "author": "rosemarymarano", "createdAt": "2020-06-01T19:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0NDg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMjIxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433502218", "bodyText": "oops - sorry - missed that one", "author": "tbarnes-us", "createdAt": "2020-06-01T21:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0NDg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMjI3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433502274", "bodyText": "it's corrected now", "author": "tbarnes-us", "createdAt": "2020-06-01T21:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0NDg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0NzExNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433247115", "bodyText": "model YAML settings -> model YAML file settings (YAML -> YAML file, globally)", "author": "rosemarymarano", "createdAt": "2020-06-01T13:53:38Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -130,7 +143,9 @@ A JRF domain requires an infrastructure database, initializing this database usi\n \n Furthermore, if you want to safely ensure that a restarted JRF domain can access updates to the infrastructure database that the domain made at an earlier time, the original domain's wallet file must be safely saved as soon as practical, and the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n \n-Here are the required settings for Model in Image JRF domains:\n+#### JRF domain resource and model YAML settings", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0ODI0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433248240", "bodyText": "config map -> ConfigMap", "author": "rosemarymarano", "createdAt": "2020-06-01T13:55:31Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -151,9 +166,56 @@ Here are the required settings for Model in Image JRF domains:\n \n   ```\n \n-Important instructions when changing a database password:\n+#### Saving and restoring JRF wallets\n+\n+It is important to save a JRF domain's OPSS wallet password and wallet file so that you can restore them as needed. This ensures that a restart or migration of the domain can continue to access the domain's FMW infrastructure database.\n+\n+When you deploy a JRF domain for the first time, the domain will add itself to its RCU database tables, and also create a 'wallet' file in the domain's home directory that enables access to the domain's data in the RCU database. This wallet is encrypted using an OPSS key password that you supply to the domain using a secret that is referenced by your domain resource `configuration.opss.walletPasswordSecret` attribute. \n+ \n+For a domain that has been started by Model in Image, the operator will copy the wallet file from the domain home of a new JRF domain and store it in the domain's introspector domain config map in file `ewallet.p12`. Here is how to export this wallet file from the introspector domain config map:", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0ODk5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433248995", "bodyText": "to ensure a JRF domain -> to ensure that a JRF domain", "author": "rosemarymarano", "createdAt": "2020-06-01T13:56:50Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -151,9 +166,56 @@ Here are the required settings for Model in Image JRF domains:\n \n   ```\n \n-Important instructions when changing a database password:\n+#### Saving and restoring JRF wallets\n+\n+It is important to save a JRF domain's OPSS wallet password and wallet file so that you can restore them as needed. This ensures that a restart or migration of the domain can continue to access the domain's FMW infrastructure database.\n+\n+When you deploy a JRF domain for the first time, the domain will add itself to its RCU database tables, and also create a 'wallet' file in the domain's home directory that enables access to the domain's data in the RCU database. This wallet is encrypted using an OPSS key password that you supply to the domain using a secret that is referenced by your domain resource `configuration.opss.walletPasswordSecret` attribute. \n+ \n+For a domain that has been started by Model in Image, the operator will copy the wallet file from the domain home of a new JRF domain and store it in the domain's introspector domain config map in file `ewallet.p12`. Here is how to export this wallet file from the introspector domain config map:\n+\n+- Option 1\n+  ```\n+  kubectl -n MY_DOMAIN_NAMESPACE \\\n+    get configmap MY_DOMAIN_UID-weblogic-domain-introspect-cm \\\n+    -o jsonpath='{.data.ewallet\\.p12}' \\\n+    > ewallet.p12\n+  ```\n+- Option 2\n+\n+  Alternatively, you can use the `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/opss_wallet_util.sh -s` command to export the wallet file (pass `-?` to this script's command-line arguments and defaults).\n+\n+{{% notice tip %}}\n+Always back up your wallet file to a safe location that can be retrieved later. In addition, save your OPSS key password.\n+{{% /notice %}}\n \n-- Shut down all domains that access the database schema. For example, set their `serverStartPolicy` to `NEVER`.\n+To reuse the wallet:\n+  - Create a secret with a key named `walletPassword` that contains the same OPSS password that you specified in the original domain. For example, assuming the password is `welcome1`:\n+    ```\n+    kubectl -n MY_DOMAIN_NAMESPACE \\\n+      create secret generic MY_DOMAIN_UID-my-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+    kubectl -n MY_DOMAIN_NAMESPACE \\\n+      label secret MY_DOMAIN_UID-my-opss-wallet-password-secret \\\n+      weblogic.domainUID=sample-domain1\n+  - Create a secret with a key named `walletFile` that contains the OPSS wallet file that you exported above. For example, assuming the file is `ewallet.p12`:\n+    ```\n+    kubectl -n MY_DOMAIN_NAMESPACE \\\n+      create secret generic MY_DOMAIN_UID-my-opss-wallet-file-secret \\\n+      --from-file=walletFile=ewallet.p12\n+    kubectl -n sample-domain1-ns \\\n+      label secret MY_DOMAIN_UID-my-opss-wallet-file-secret \\\n+      weblogic.domainUID=sample-domain1\n+    ```\n+    Alternatively, you can use the `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/opss_wallet_util.sh -r` command to deploy a local wallet file as a secret (pass `-?` to get this script's command-line arguments and defaults).\n+  - Make sure that your domain resource `configuration.opss.walletPasswordSecret` attribute names the OPSS password secret, and make sure that your domain resource `configuration.opss.walletFileSecret` attribute names the OPSS wallet file secret.\n+\n+\n+#### Instructions for changing a JRF domain's database password\n+\n+Follow these steps to ensure a JRF domain can continue to access its RCU data after changing its database password.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0OTMyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433249322", "bodyText": "changing database password -> changing the database password", "author": "rosemarymarano", "createdAt": "2020-06-01T13:57:23Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -151,9 +166,56 @@ Here are the required settings for Model in Image JRF domains:\n \n   ```\n \n-Important instructions when changing a database password:\n+#### Saving and restoring JRF wallets\n+\n+It is important to save a JRF domain's OPSS wallet password and wallet file so that you can restore them as needed. This ensures that a restart or migration of the domain can continue to access the domain's FMW infrastructure database.\n+\n+When you deploy a JRF domain for the first time, the domain will add itself to its RCU database tables, and also create a 'wallet' file in the domain's home directory that enables access to the domain's data in the RCU database. This wallet is encrypted using an OPSS key password that you supply to the domain using a secret that is referenced by your domain resource `configuration.opss.walletPasswordSecret` attribute. \n+ \n+For a domain that has been started by Model in Image, the operator will copy the wallet file from the domain home of a new JRF domain and store it in the domain's introspector domain config map in file `ewallet.p12`. Here is how to export this wallet file from the introspector domain config map:\n+\n+- Option 1\n+  ```\n+  kubectl -n MY_DOMAIN_NAMESPACE \\\n+    get configmap MY_DOMAIN_UID-weblogic-domain-introspect-cm \\\n+    -o jsonpath='{.data.ewallet\\.p12}' \\\n+    > ewallet.p12\n+  ```\n+- Option 2\n+\n+  Alternatively, you can use the `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/opss_wallet_util.sh -s` command to export the wallet file (pass `-?` to this script's command-line arguments and defaults).\n+\n+{{% notice tip %}}\n+Always back up your wallet file to a safe location that can be retrieved later. In addition, save your OPSS key password.\n+{{% /notice %}}\n \n-- Shut down all domains that access the database schema. For example, set their `serverStartPolicy` to `NEVER`.\n+To reuse the wallet:\n+  - Create a secret with a key named `walletPassword` that contains the same OPSS password that you specified in the original domain. For example, assuming the password is `welcome1`:\n+    ```\n+    kubectl -n MY_DOMAIN_NAMESPACE \\\n+      create secret generic MY_DOMAIN_UID-my-opss-wallet-password-secret \\\n+      --from-literal=walletPassword=welcome1\n+    kubectl -n MY_DOMAIN_NAMESPACE \\\n+      label secret MY_DOMAIN_UID-my-opss-wallet-password-secret \\\n+      weblogic.domainUID=sample-domain1\n+  - Create a secret with a key named `walletFile` that contains the OPSS wallet file that you exported above. For example, assuming the file is `ewallet.p12`:\n+    ```\n+    kubectl -n MY_DOMAIN_NAMESPACE \\\n+      create secret generic MY_DOMAIN_UID-my-opss-wallet-file-secret \\\n+      --from-file=walletFile=ewallet.p12\n+    kubectl -n sample-domain1-ns \\\n+      label secret MY_DOMAIN_UID-my-opss-wallet-file-secret \\\n+      weblogic.domainUID=sample-domain1\n+    ```\n+    Alternatively, you can use the `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/opss_wallet_util.sh -r` command to deploy a local wallet file as a secret (pass `-?` to get this script's command-line arguments and defaults).\n+  - Make sure that your domain resource `configuration.opss.walletPasswordSecret` attribute names the OPSS password secret, and make sure that your domain resource `configuration.opss.walletFileSecret` attribute names the OPSS wallet file secret.\n+\n+\n+#### Instructions for changing a JRF domain's database password\n+\n+Follow these steps to ensure a JRF domain can continue to access its RCU data after changing its database password.\n+\n+- Before changing database password, shut down all domains that access the database schema. For example, set their `serverStartPolicy` to `NEVER`.", "originalCommit": "b1300f937764af1228ec3dd2be027798223c67ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c999623246db068342fdb796c44154d14851f9a1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c999623246db068342fdb796c44154d14851f9a1", "message": "MII Doc & Sample: editorial revisions", "committedDate": "2020-06-01T19:06:52Z", "type": "commit"}, {"oid": "8aab0e0309d1677cb70d5d269acc01886bddc373", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8aab0e0309d1677cb70d5d269acc01886bddc373", "message": "MII Sample Doc: Minor editorial fix.", "committedDate": "2020-06-01T21:31:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzODg3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433438878", "bodyText": "Docker Hub?  The link is pointing to the Oracle docker-images GitHub project.  Did you intend to point them to where our pre-built images are in OCR ?", "author": "mriccell", "createdAt": "2020-06-01T19:22:23Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -12,25 +12,26 @@ This feature is supported only in 3.0.0-RC1.\n \n This document describes what's needed to create and deploy a typical Model in Image domain.\n \n-#### Contents\n+### Contents\n \n    - [WebLogic Server Kubernetes Operator](#weblogic-server-kubernetes-operator)\n    - [WebLogic Server image](#weblogic-server-image)\n    - [Optional WDT model ConfigMap](#optional-wdt-model-configmap)\n    - [Required runtime encryption secret](#required-runtime-encryption-secret)\n    - [Secrets for model macros](#secrets-for-model-macros)\n    - [Domain resource attributes](#domain-resource-attributes)\n-   - [Prerequisites for JRF domain types](#prerequisites-for-jrf-domain-types)\n+   - [Always use external state](#always-use-external-state)\n+   - [Requirements for JRF domain types](#requirements-for-jrf-domain-types)\n \n-#### WebLogic Server Kubernetes Operator\n+### WebLogic Server Kubernetes Operator\n \n Deploy the operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See [Manage operators]({{< relref \"/userguide/managing-operators/_index.md\" >}}) and [Quick Start]({{< relref \"/quickstart/_index.md\" >}}).\n \n-#### WebLogic Server image\n+### WebLogic Server image\n \n Model in Image requires creating a Docker image that has WebLogic Server and WDT installed, plus optionally, your model and application files.\n \n-You can start with a WebLogic Server 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}), or build a base image using the [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample.\n+You can start with a WebLogic Server 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}) (this is useful if you want your base images to include additional patches), or build a base image using the [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample.", "originalCommit": "c999623246db068342fdb796c44154d14851f9a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5Mzg4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r434093886", "bodyText": "Fixed.", "author": "tbarnes-us", "createdAt": "2020-06-02T18:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzODg3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MDM0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r433440340", "bodyText": "What do you think of pointing them to the documentation which provides guidance how to tune JDBC stores https://docs.oracle.com/en/middleware/fusion-middleware/weblogic-server/12.2.1.4/perfm/storetune.html#GUID-F868624F-2898-4330-AF96-FC0EAB3CFE0A.  I got this question in the #operator channel on Friday.", "author": "mriccell", "createdAt": "2020-06-01T19:25:33Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -117,11 +118,23 @@ The following domain resource attributes are specific to Model in Image domains.\n \n  - There are additional attributes that are common to all domain home source types, such as the `image` field. See the Domain Resource [schema](https://github.com/oracle/weblogic-kubernetes-operator/blob/master/docs/domains/Domain.md) and [documentation]({{< relref \"/userguide/managing-domains/domain-resource.md\" >}}) for a full list of domain resource fields.\n \n- - There are also additional fields that are specific to JRF domain types. For more information, see [Prerequisites for JRF domain types](#prerequisites-for-jrf-domain-types).\n+ - There are also additional fields that are specific to JRF domain types. For more information, see [Requirements for JRF domain types](#requirements-for-jrf-domain-types).\n \n  - Sample domain resource: For an example of a fully specified sample domain resource, see the the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template` file for the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample. Note that the `@@` entries in this template are not processed by the operator; they need to replaced with actual values before the resource can be applied.\n \n-#### Prerequisites for JRF domain types\n+### Always use external state\n+\n+Regardless of the domain home source type, we recommend that you always keep\n+state outside the Docker image. This includes JDBC stores for leasing tables, JMS and transaction stores,\n+EJB timers, JMS queues, and so on. This ensures that data will not be lost when\n+a container is destroyed.\n+\n+We recommend that state be kept in a database to take advantage of built-in", "originalCommit": "c999623246db068342fdb796c44154d14851f9a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5Mzk3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r434093976", "bodyText": "Sure. Updated.", "author": "tbarnes-us", "createdAt": "2020-06-02T18:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MDM0MA=="}], "type": "inlineReview"}, {"oid": "efc8aa1386b908569a742ccba9a90ff784e9932c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/efc8aa1386b908569a742ccba9a90ff784e9932c", "message": "MII User doc: Minor updates.", "committedDate": "2020-06-02T18:29:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5NDcxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1692#discussion_r434894717", "bodyText": "For model in image type of domain.  The -Doracle.jdbc.fanEnabled=false needs to be in both WLSDEPLOY_PROPERTIES.  It's because during domain creation, opss uses jdbc to write data to the database since WDT ignored JAVA_OPTIONS and WLST_PROPERTIES.", "author": "jshum2479", "createdAt": "2020-06-03T22:34:36Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -125,17 +125,19 @@ You can use the following environment variables to specify JVM memory and JVM op\n * `USER_MEM_ARGS` : JVM memory arguments for starting WebLogic Server.\n * `NODEMGR_JAVA_OPTIONS` : Java options for starting a Node Manager instance.\n * `NODEMGR_MEM_ARGS` : JVM memory arguments for starting a Node Manager instance.\n+* `WLST_PROPERTIES` : System properties for WLST commands in introspector jobs or WebLogic pods.\n+* `WLSDEPLOY_PROPERTIES` : System properties for WebLogic Deploy Tool commands in Model in Image introspector jobs or WebLogic pods.\n \n-**Note**: The `USER_MEM_ARGS` environment variable defaults to `-Djava.security.egd=file:/dev/./urandom` in all WebLogic Server pods and the WebLogic introspection job. It can be explicitly set to another value in your domain resource YAML file using the `env` attribute under the `serverPod` configuration.\n+**Notes:**\n \n-The following behavior occurs depending on whether or not `NODEMGR_JAVA_OPTIONS` and `NODEMGR_MEM_ARGS` are defined:\n+* The following behavior occurs depending on whether or not `NODEMGR_JAVA_OPTIONS` and `NODEMGR_MEM_ARGS` are defined:\n+  * If `NODEMGR_JAVA_OPTIONS` is not defined and `JAVA_OPTIONS` is defined, then the `JAVA_OPTIONS` value will be applied to the Node Manager instance.\n+  * If `NODEMGR_MEM_ARGS` is not defined, then default memory and Java security property values (`-Xms64m -Xmx100m -Djava.security.egd=file:/dev/./urandom`) will be applied to the Node Manager instance. It can be explicitly set to another value in your domain resource YAML file using the `env` attribute under the `serverPod` configuration.\n+* The `USER_MEM_ARGS` environment variable defaults to `-Djava.security.egd=file:/dev/./urandom` in all WebLogic Server pods and the WebLogic introspection job. It can be explicitly set to another value in your domain resource YAML file using the `env` attribute under the `serverPod` configuration.\n+* Notice that the `NODEMGR_MEM_ARGS` and `USER_MEM_ARGS` environment variables both set `-Djava.security.egd=file:/dev/./urandom` by default. This respectively helps to speed up the Node Manager and WebLogic Server startup on systems with low entropy. \n+* You can use `JAVA_OPTIONS` to disable Fast Application Notifications (FAN); see the [Disable Fast Application Notifications FAQ]({{<relref \"/faq/fan.md\">}}) for details.", "originalCommit": "efc8aa1386b908569a742ccba9a90ff784e9932c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d10cc5ac77a9d667bdd3c0258a47bbb398319be", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3d10cc5ac77a9d667bdd3c0258a47bbb398319be", "message": "User doc FAN info update for WDT.", "committedDate": "2020-06-04T15:08:49Z", "type": "commit"}]}