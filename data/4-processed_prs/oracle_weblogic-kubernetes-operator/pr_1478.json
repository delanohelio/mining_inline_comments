{"pr_number": 1478, "pr_title": "Model in image support", "pr_createdAt": "2020-03-17T19:29:22Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MTUxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397991516", "bodyText": "@jshum2479 Maybe for post V1:  Please consider renaming all MII-only variables so that they start with 'MII_\" or maybe \"MODEL_\" (your choice), and maybe also do this in the shell scripts too.  That'd help differentiate the globals that are specific to MII when reading through the code.  Similarly, if adding a MII only function/method, consider decorating it with 'model' or 'mii'...", "author": "tbarnes-us", "createdAt": "2020-03-25T16:25:41Z", "path": "operator/src/main/resources/scripts/introspectDomain.py", "diffHunk": "@@ -118,13 +116,31 @@ def open(self):\n     self.CUSTOM_PREFIX_WLDF = 'Sit-Cfg-WLDF--'\n     self.CUSTOM_PREFIX_CFG  = 'Sit-Cfg-CFG--'\n \n-    self.INTROSPECT_HOME        = '/tmp/introspect/' + self.DOMAIN_UID\n-    self.TOPOLOGY_FILE          = self.INTROSPECT_HOME + '/topology.yaml'\n-    self.CM_FILE                = self.INTROSPECT_HOME + '/' + self.CUSTOM_PREFIX_CFG + 'introspector-situational-config.xml'\n-    self.BOOT_FILE              = self.INTROSPECT_HOME + '/boot.properties'\n-    self.USERCONFIG_FILE        = self.INTROSPECT_HOME + '/userConfigNodeManager.secure'\n-    self.USERKEY_FILE           = self.INTROSPECT_HOME + '/userKeyNodeManager.secure'\n-    self.DOMAIN_SECRET_MD5_FILE = '/tmp/DomainSecret.md5'\n+    self.INTROSPECT_HOME          = '/tmp/introspect/' + self.DOMAIN_UID\n+    self.TOPOLOGY_FILE            = self.INTROSPECT_HOME + '/topology.yaml'\n+    self.CM_FILE                  = self.INTROSPECT_HOME + '/' + self.CUSTOM_PREFIX_CFG + 'introspector-situational-config.xml'\n+    self.BOOT_FILE                = self.INTROSPECT_HOME + '/boot.properties'\n+    self.USERCONFIG_FILE          = self.INTROSPECT_HOME + '/userConfigNodeManager.secure'\n+    self.USERKEY_FILE             = self.INTROSPECT_HOME + '/userKeyNodeManager.secure'\n+\n+    # Model in image attributes\n+\n+    self.DOMAIN_SECRET_MD5_FILE   = '/tmp/DomainSecret.md5'", "originalCommit": "5aed198290f7fbda117af521d1a5d712be660fd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNjUzOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399436539", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MTUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4ODgxMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399488813", "bodyText": "Yes, let's leave it for post V1", "author": "jshum2479", "createdAt": "2020-03-27T19:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MTUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NDg0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402374844", "bodyText": "I'll file a JIRA to track.  Resolving.", "author": "tbarnes-us", "createdAt": "2020-04-02T14:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MTUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MjYyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397992625", "bodyText": "Start name with MII_", "author": "tbarnes-us", "createdAt": "2020-03-25T16:27:11Z", "path": "operator/src/main/resources/scripts/introspectDomain.py", "diffHunk": "@@ -1200,6 +1361,60 @@ def generateAndValidate(self):\n       gen.addGeneratedFile()\n \n \n+class WDTConfigIntrospector(SecretManager):", "originalCommit": "5aed198290f7fbda117af521d1a5d712be660fd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNjg2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399436867", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MjYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NDA3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399484070", "bodyText": "No longer needed", "author": "jshum2479", "createdAt": "2020-03-27T19:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MjYyNQ=="}], "type": "inlineReview"}, {"oid": "62c56ef60b39e04a56307f4ecdc3b3756bdbec7d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/62c56ef60b39e04a56307f4ecdc3b3756bdbec7d", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-25T16:29:49Z", "type": "commit"}, {"oid": "ea9dc9e2db65db8254da52355f83b6f2846a1efd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ea9dc9e2db65db8254da52355f83b6f2846a1efd", "message": "doc update", "committedDate": "2020-03-25T16:46:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5ODg5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397998896", "bodyText": "irrecoverably", "author": "markxnelson", "createdAt": "2020-03-25T16:35:26Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -0,0 +1,173 @@\n++++\n+title = \"Usage\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 20\n+pre = \"<b> </b>\"\n+description = \"Steps for creating and deploying Model in Image images and their associated domain resources.\"\n++++\n+\n+\n+#### Contents\n+\n+   - [WebLogic Kubernetes Operator](#1-weblogic-kubernetes-operator)\n+   - [WebLogic Server image](#2-weblogic-server-image)\n+   - [Optional WDT model config map](#3-optional-wdt-model-config-map)\n+   - [Required runtime encryption secret](#4-required-runtime-encryption-secret)\n+   - [Secrets for model macros](#5-secrets-for-model-macros)\n+   - [Domain resource attributes](#6-domain-resource-attributes)\n+   - [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types)\n+\n+#### Requirements\n+\n+Here's what's needed to create and deploy a typical Model in Image domain. These items do not need to be created in order.\n+\n+#### 1. WebLogic Kubernetes Operator\n+\n+Deploy the operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See [Manage operators]({{< relref \"/userguide/managing-operators/_index.md\" >}}) and [Quick Start]({{< relref \"/quickstart/_index.md\" >}}).\n+\n+#### 2. WebLogic Server image\n+\n+Model in Image requires creating a 'final' deployable image that has WebLogic Server and WDT installed, plus your model and application files.\n+\n+You can start with a WebLogic Server 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}), or build a base image using the [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample.\n+\n+After you have a base image, Model in Image requires layering the following directory structure for its (optional) WDT models artifacts and (required) WDT binaries:\n+\n+| Directory                | Contents                           | Extension   |\n+| ------------------------ | ---------------------------------- | ----------- |\n+| `/u01/wdt/models`         | Optional domain model YAML files   | .yaml       |\n+| `/u01/wdt/models`         | Optional model variable files      | .properties |\n+| `/u01/wdt/models`         | Optional application archives      | .zip        |\n+| `/u01/wdt/weblogic-deploy`| Unzipped WebLogic deploy install   |             |\n+\n+There are two methods for layering Model in Image artifacts on top of a base image:\n+\n+  - **Manual Image Creation**: Use Docker commands to layer the WDT artifacts from the above table on top of your base image into a new image.\n+\n+  - **WebLogic Image Tool**: Use the convenient [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). The WebLogic Image Tool (WIT) has built-in options for embedding WDT model files, WDT binaries, WebLogic Server binaries, and WebLogic Server patches in an image. The [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample uses the WIT approach. For an example, see the sample's `build_image_model.sh` file in the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image` directory.\n+\n+For a discussion of model file syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 3. Optional WDT model config map\n+\n+You can create a WDT model config map that defines additional model `.yaml` and `.properties` files beyond what you've already supplied in your image, and then reference this config map using your domain resource's `configuration.model.configMap` attribute. This is optional if the supplied image already fully defines your model.\n+\n+WDT model config map files will be merged with the WDT files defined in your image at runtime before your domain home is created. The config map files can add to, remove from, or alter the model configuration that you supplied within your image.\n+\n+For example, place additional `.yaml` and `.properties` files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create configmap MY-DOMAINUID-my-wdt-config-map \\\n+    --from-file /home/acmeuser/wdtoverride\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label  configmap MY-DOMAINUID-my-wdt-config-map \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax and loading order, and see [Runtime updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) for a discussion of using WDT model config maps to update the model configuration of a running domain.\n+\n+\n+#### 4. Required runtime encryption secret\n+\n+Model in Image requires a runtime encryption secret with a secure `password` key. This secret is used by the operator to encrypt model and domain home artifacts before it adds them to a runtime config map or log. The `password` that you set can safely change any time after you've fully shut down a domain but must remain the same for the life of a running domain. The runtime encryption secret that you create can be named anything but note that it is a best practice to name and label secrets with their domain UID to help ensure that cleanup scripts can find and delete them.\n+\n+**NOTE**: Because the runtime encryption password does not need to be shared and only needs to exist for the life of a domain, you may want to use a password generator.\n+\n+Example:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create secret generic MY-DOMAINUID-runtime-encrypt-secret \\\n+    --from-literal=password=welcome1\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label secret MY-DOMAINUID-runtime-encrypt-secret \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+Corresponding domain resource snippet:\n+\n+  ```\n+  configuration:\n+    model:\n+      runtimeEncryptionSecret: MY-DOMAINUID-runtime-encrypt-secret\n+  ```\n+\n+#### 5. Secrets for model macros\n+\n+Create additional secrets as needed by macros in your model files. For example, these can store database URLs and credentials that are accessed using `@@SECRET` macros in your model that reference the secrets.  For a discussion of model macros, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 6. Domain resource attributes\n+\n+The following domain resource attributes are specific to Model in Image domains.\n+\n+| Domain Resource Attribute                    |  Notes |\n+| -------------------------                    |  ------------------ |\n+| `domainHomeSourceType`                       |  Required. Set to `FromModel`. |\n+| `domainHome`                                 |  Must reference an empty or non-existent directory within your image. Do not include the mount path of any persistent volume. Note that Model in Image recreates the domain home for a WebLogic pod every time the pod restarts.|\n+| `configuration.model.configMap`             | Optional. Set if you have stored additional models in a config map as per [Optional WDT model config map](#3-optional-wdt-model-config-map). |\n+| `configuration.secrets`                      | Optional. Set this array if your image or config map models contain macros that reference custom Kubernetes secrets. For example, if your macros depend on secrets `my-secret` and `my-other-secret`, then set to `[my-secret, my-other-secret]`.|\n+| `configuration.model.runtimeEncryptionSecret`| Required. All Model in Image domains must specify a runtime encryption secret. See [Required runtime encryption secret](#4-required-runtime-encryption-secret). |\n+| `configuration.model.domainType`             | Set the type of domain. Valid values are `WLS`, `JRF`, and `RestrictedJRF` where `WLS` is the default. See [WDT Domain Types](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/type_def.md).|\n+\n+Notes:\n+\n+ - There are additional attributes that are common to all domain home source types, such as the `image` field. See the Domain Resource [schema](https://github.com/oracle/weblogic-kubernetes-operator/blob/master/docs/domains/Domain.md) and [documentation]({{< relref \"/userguide/managing-domains/domain-resource.md\" >}}) for a full list of domain resource fields.\n+\n+ - There are also additional fields that are specific to JRF domain types. For more information, see [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types).\n+\n+ - Sample domain resource: For an example of a fully specified sample domain resource, see the the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template` file for the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample. Note that the `@@` entries in this template are not processed by the operator; they need to replaced with actual values before the resource can be applied.\n+\n+#### 7. Prerequisites for JRF domain types\n+\n+{{% notice info %}} This section applies only for a `JRF` domain type. Skip it if your domain type is `WLS` or `RestrictedJRF`.\n+{{% /notice %}}\n+\n+A JRF domain requires an infrastructure database called an RCU database, initializing this database, and configuring your domain to access this database. All of these steps must occur before you first deploy your domain. When you first deploy your domain, the introspector job will initialize it's RCU schema tables in the database - a process that can take several minutes.\n+\n+Furthermore, if you want to safely ensure that a restarted JRF domain can access updates to the infrastructure database that the domain made at an earlier time, the original domain's wallet file must be safely saved as soon as practical, and the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain, as discussed in [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}).\n+\n+__Here are the required settings for Model in Image JRF domains:__\n+\n+- Set `configuration.model.domainType` to `JRF`.\n+\n+- Set `configuration.opss.walletPasswordSecret` to reference a secret that defines a `walletPassword` key. This is used to encrypt the domain's OPSS wallet file. This is a required field for JRF domains.\n+\n+- Set `configuration.opss.walletFileSecret` to reference a secret that contains your domain's OPSS wallet file in its `walletFile` key. This assumes you have an OPSS wallet file from a previous start of the same domain. It enables a restarted or migrated domain to access its RCU database information. For more information, see [Reusing an RCU database between domain deployments]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}). This is an optional field for JRF domains, but must always be set if you want a restarted or migrated domain to access its RCU database information.\n+\n+- Set the `configuration.introspectorJobActiveDeadlineSeconds` introspection job timeout to at least 300. This is in an optional field but is needed because domain home creation takes a considerable amount of time the first time a JRF domain is created (due to initializing the domain's RCU database tables), and because Model in Image creates your domain home for you using the introspection job.\n+\n+- Define an `RCUDbInfo` stanza in your model. Access to an RCU database requires defining a `RCUDbInfo` stanza in your model's `domainInfo` stanza with the necessary information for accessing the domain's schema within the database. Usually this information should be supplied using a secret that you deploy and reference in your domain resource's `configuration.secrets` field. Here's an example `RCUDbInfo` stanza:\n+\n+  ```\n+  domainInfo:\n+      RCUDbInfo:\n+          rcu_prefix:          '@@SECRET:sample-domain1-rcu-access/rcu_prefix@@'\n+          rcu_schema_password: '@@SECRET:sample-domain1-rcu-access/rcu_schema_password@@'\n+          rcu_db_conn_string:  '@@SECRET:sample-domain1-rcu-access/rcu_db_conn_string@@'\n+\n+  ```\n+\n+__Important instructions when changing an RCU schema password:__\n+\n+  {{% notice warning %}}\n+  Carefully follow these instructions in order to prevent unrecoverably locking up your RCU database schema account when changing your RCU schema password.", "originalCommit": "62c56ef60b39e04a56307f4ecdc3b3756bdbec7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxMjkzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398012931", "bodyText": "done.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5ODg5Ng=="}], "type": "inlineReview"}, {"oid": "052184b0304ccd38cbce2ee30853df310456e698", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/052184b0304ccd38cbce2ee30853df310456e698", "message": "doc update", "committedDate": "2020-03-25T16:53:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNDc0Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398024746", "bodyText": "so i read this, and it makes no sense to me - what is this file for? what are all these things in here? there is no explanation of what this is", "author": "markxnelson", "createdAt": "2020-03-25T17:10:08Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/model-files.md", "diffHunk": "@@ -0,0 +1,156 @@\n++++\n+title = \"Model files\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 30\n+pre = \"<b> </b>\"\n+description = \"Model file requirements, macros, and loading order.\"\n++++\n+\n+#### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Sample model file](#sample-model-file)\n+ - [Important notes about Model in Image model files](#important-notes-about-model-in-image-model-files)\n+ - [Model file naming and loading order](#model-file-naming-and-loading-order)\n+ - [Model file macros](#model-file-macros)\n+   - [Using secrets in model files](#using-secrets-in-model-files)\n+   - [Using environment variables in model files](#using-environment-variables-in-model-files)\n+   - [Combining secrets and environment variables in model files](#combining-secrets-and-environment-variables-in-model-files)\n+\n+#### Introduction\n+\n+This document describes basic Model in Image model file syntax, naming, and macros. For additional information, see the [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) documentation.\n+\n+{{% notice tip %}} The WDT 'discover tool' is particularly useful for generating model files from an existing domain home.\n+{{% /notice %}}\n+\n+#### Sample model file\n+\n+Here's an example of a model `.yaml` file that defines a WebLogic Administration Server and dynamic cluster.", "originalCommit": "ea9dc9e2db65db8254da52355f83b6f2846a1efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNzk2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399437960", "bodyText": "@markxnelson As we discussed in slack, let's follow up via a zoom discussion when you have a chance.", "author": "tbarnes-us", "createdAt": "2020-03-27T17:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNDc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNTQ3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398025475", "bodyText": "how do i know if i need that?", "author": "markxnelson", "createdAt": "2020-03-25T17:11:00Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/model-files.md", "diffHunk": "@@ -0,0 +1,156 @@\n++++\n+title = \"Model files\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 30\n+pre = \"<b> </b>\"\n+description = \"Model file requirements, macros, and loading order.\"\n++++\n+\n+#### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Sample model file](#sample-model-file)\n+ - [Important notes about Model in Image model files](#important-notes-about-model-in-image-model-files)\n+ - [Model file naming and loading order](#model-file-naming-and-loading-order)\n+ - [Model file macros](#model-file-macros)\n+   - [Using secrets in model files](#using-secrets-in-model-files)\n+   - [Using environment variables in model files](#using-environment-variables-in-model-files)\n+   - [Combining secrets and environment variables in model files](#combining-secrets-and-environment-variables-in-model-files)\n+\n+#### Introduction\n+\n+This document describes basic Model in Image model file syntax, naming, and macros. For additional information, see the [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) documentation.\n+\n+{{% notice tip %}} The WDT 'discover tool' is particularly useful for generating model files from an existing domain home.\n+{{% /notice %}}\n+\n+#### Sample model file\n+\n+Here's an example of a model `.yaml` file that defines a WebLogic Administration Server and dynamic cluster.\n+\n+```\n+domainInfo:\n+  AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+  AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+  ServerStartMode: 'prod'\n+\n+topology:\n+  Name: '@@ENV:DOMAIN_UID@@'\n+  AdminServerName: \"admin-server\"\n+  Cluster:\n+    \"cluster-1\":\n+      DynamicServers:\n+        ServerTemplate:  \"cluster-1-template\"\n+        ServerNamePrefix: \"managed-server\"\n+        DynamicClusterSize: 5\n+        MaxDynamicClusterSize: 5\n+        CalculatedListenPorts: false\n+  Server:\n+    \"admin-server\":\n+      ListenPort: 7001\n+  ServerTemplate:\n+    \"cluster-1-template\":\n+      Cluster: \"cluster-1\"\n+      ListenPort: 8001\n+```\n+\n+Some notes about the sample model file:\n+ - It includes a WebLogic credentials stanza that is required by Model in Image.\n+ - It derives its domain name from the pre-defined environment variable `DOMAIN_UID` but note that this is not required.\n+ - For a description of model file macro references to secrets and environment variables, see [Model file macros](#model-file-macros).\n+\n+#### Important notes about Model in Image model files\n+\n+- Understand when to use model macros.\n+\n+  - You can use model macros to reference arbitrary secrets from model files. This is recommended for handling mutable values such as database user names, passwords, and URLs. See **[Using secrets in model files](#using-secrets-in-model-files)**.\n+\n+    - All password fields in a model should use a secret macro. Passwords should not be directly included in property or model files because the files may appear in logs or debugging. \n+\n+    - Model files encrypted with the [WDT Encrypt Model Tool](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/encrypt.md) are not supported. Use secrets instead.\n+\n+  - You can use model macros to reference arbitrary environment variables from model files. This is useful for handling plain text mutable values that you can define using an `env` stanza in your domain resource, and is also useful for accessing the built in `DOMAIN_UID` environment variable. See [Using environment variables in model files](#using-environment-variables-in-model-files).\n+\n+  - For most models, it's useful to minimize or eliminate the usage of model variable files (also known as property files) and use secrets or environment variables instead.\n+\n+- A model __must__ contain a `domainInfo` stanza that references your WebLogic administrative credentials. You can use the `@@SECRET` macro with the reserved secret name `__weblogic-credentials__` to reference your domain resource's WebLogic credentials secret for this purpose. For example:\n+\n+    ```\n+    domainInfo:\n+      AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+      AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ```\n+- You can control the order that WDT uses to load your model files, see [Model file naming and loading order](#model-file-naming-and-loading-order).\n+\n+#### Model file naming and loading order\n+\n+Refer to this section if you need to control the order in which your model files are loaded.", "originalCommit": "ea9dc9e2db65db8254da52355f83b6f2846a1efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NjAwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399496004", "bodyText": "@markxnelson Please review #1510   I will resolve once the change is merged.", "author": "tbarnes-us", "createdAt": "2020-03-27T19:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNTQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNjc1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398026751", "bodyText": "there is no such thing as \"an RCU database\"", "author": "markxnelson", "createdAt": "2020-03-25T17:12:46Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/reusing-rcu.md", "diffHunk": "@@ -0,0 +1,53 @@\n++++\n+title = \"Reusing an RCU database\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 70\n+pre = \"<b> </b>\"\n+description = \"Reusing an RCU database between deployments of a Model in Image JRF domain.\"\n++++\n+\n+#### Reusing an RCU database between JRF domain deployments", "originalCommit": "052184b0304ccd38cbce2ee30853df310456e698", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MDUzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402380535", "bodyText": "What is the correct term?", "author": "tbarnes-us", "createdAt": "2020-04-02T14:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNjc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzI1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398027257", "bodyText": "the domain will add itself to its tables?\nawkward/confusing wording", "author": "markxnelson", "createdAt": "2020-03-25T17:13:29Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/reusing-rcu.md", "diffHunk": "@@ -0,0 +1,53 @@\n++++\n+title = \"Reusing an RCU database\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 70\n+pre = \"<b> </b>\"\n+description = \"Reusing an RCU database between deployments of a Model in Image JRF domain.\"\n++++\n+\n+#### Reusing an RCU database between JRF domain deployments\n+\n+{{% notice info %}} This section only applies for a JRF domain type. Skip it if your domain type is `WLS` or `Restricted JRF`.\n+{{% /notice %}}\n+\n+When you deploy a JRF domain for the first time, the domain will add itself to its RCU database tables, and also create a 'wallet' file in the domain's home directory that enables access to the domain's data in the RCU database. This wallet is encrypted using an OPSS key password that you supply to the domain using a secret.", "originalCommit": "052184b0304ccd38cbce2ee30853df310456e698", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4Mzk5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399483994", "bodyText": "@markxnelson As per our conversation in slack, we need to zoom about this. I don't have the background to make updates here. Please please ping me when you're available to zoom.", "author": "tbarnes-us", "createdAt": "2020-03-27T19:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzc0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398027747", "bodyText": "you cant share the OPSS data between domains - not sure what this is talking about", "author": "markxnelson", "createdAt": "2020-03-25T17:14:07Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/reusing-rcu.md", "diffHunk": "@@ -0,0 +1,53 @@\n++++\n+title = \"Reusing an RCU database\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 70\n+pre = \"<b> </b>\"\n+description = \"Reusing an RCU database between deployments of a Model in Image JRF domain.\"\n++++\n+\n+#### Reusing an RCU database between JRF domain deployments\n+\n+{{% notice info %}} This section only applies for a JRF domain type. Skip it if your domain type is `WLS` or `Restricted JRF`.\n+{{% /notice %}}\n+\n+When you deploy a JRF domain for the first time, the domain will add itself to its RCU database tables, and also create a 'wallet' file in the domain's home directory that enables access to the domain's data in the RCU database. This wallet is encrypted using an OPSS key password that you supply to the domain using a secret.\n+\n+If it is important to reuse or share the same database and data between deployments of your domain, then it is also important locate and preserve its OPSS wallet password and wallet file. An OPSS wallet password and wallet file allows a JRF deployment to access a FMW infrastructure database that has already been initialized and used before.", "originalCommit": "052184b0304ccd38cbce2ee30853df310456e698", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzk4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398027980", "bodyText": "FMW Infrastructure has a capital I", "author": "markxnelson", "createdAt": "2020-03-25T17:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4Mzc1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399483755", "bodyText": "@markxnelson As per our conversation in slack, we need to zoom about this.  I don't have the background to make updates here.  Please please ping me when you're available to zoom.", "author": "tbarnes-us", "createdAt": "2020-03-27T19:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzc0Nw=="}], "type": "inlineReview"}, {"oid": "5a9e06aa840d5a65c26d91380586b547d566c876", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5a9e06aa840d5a65c26d91380586b547d566c876", "message": "add usage and friendlier syntax error reporting to MII sample create_secret.sh + create_configmap.sh, correct the usage text in opss_wallet_util.sh", "committedDate": "2020-03-25T17:37:11Z", "type": "commit"}, {"oid": "04e242c66ffb7a2f94128ed709e6a1458553e02e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/04e242c66ffb7a2f94128ed709e6a1458553e02e", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T17:37:23Z", "type": "commit"}, {"oid": "4530c8b7388ffc3eb88c08e74382503e743d89a4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4530c8b7388ffc3eb88c08e74382503e743d89a4", "message": "doc update", "committedDate": "2020-03-25T17:52:12Z", "type": "commit"}, {"oid": "4d391f06a731ab2b47409a4764044b0b3bb7893d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4d391f06a731ab2b47409a4764044b0b3bb7893d", "message": "doc update", "committedDate": "2020-03-25T17:55:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMTYxMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398031613", "bodyText": "reading this, i was thinking \"and why would i do these things?\"\nseems to be a sentence missing above to provide context", "author": "markxnelson", "createdAt": "2020-03-25T17:19:11Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,558 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic Server Console](#optionally-access-the-weblogic-server-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and the model for a WebLogic domain configuration defined using a WDT model file.", "originalCommit": "052184b0304ccd38cbce2ee30853df310456e698", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MjgwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399482800", "bodyText": "Good point @markxnelson . I've fleshed out a proposed intro.  See pull #1510  .\n@tbarnes-us Resolve this once the pull is merged.", "author": "tbarnes-us", "createdAt": "2020-03-27T19:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMTYxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NjA0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398056045", "bodyText": "dies -- ```$ p $SAMPLEDIR/run_domain.sh\n@@ Info: Running 'run_domain.sh'.\n@@ Info: WORKDIR='/home/mark/operator/mii/work'.\n@@ Info: Deleting weblogic domain 'sample-domain1' if it already exists\n\nkubectl -n sample-domain1-ns delete domain sample-domain1 --ignore-not-found\n@@ Info: Creating weblogic domain secret\nError from server (NotFound): namespaces \"sample-domain1-ns\" not found", "author": "markxnelson", "createdAt": "2020-03-25T17:54:37Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,558 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic Server Console](#optionally-access-the-weblogic-server-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and the model for a WebLogic domain configuration defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   We will refer to this environment variable later in this document.\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+   We will refer to this environment variable later in this document.\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+   We will refer to this environment variable later in this document, and it is used by the sample scripts. If you do not set this environement variable, then the sample scripts will default to `/tmp/$USER/model-in-image-sample-work-dir` where `$USER` is your user name.\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains).\n+\n+> __NOTE__: Skip to section [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if you're not using a `JRF` domain type.\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle Database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. |\n+| `k8s-domain.yaml.template` | Set `configuration.introspectorJobActiveDeadlineSeconds` to 300; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag model-in-image:v1 my.remote.registry.com/model-in-image:v1\n+```\n+\n+2.  Push the image to the remote Docker registry, for example:\n+\n+```\n+docker push my.remote.registry.com/model-in-image:v1\n+```\n+\n+3. Create the pull secret for the remote Docker registry:\n+\n+```\n+ kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n+     --docker-server=my.remote.registry.com \\\n+     --docker-username=your.email@some.com \\\n+     --docker-password=your-password \\\n+     --docker-email=your.email@some.com\n+\n+```\n+\n+4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+\n+```\n+  imagePullSecrets:\n+  - name: <secret name>\n+\n+```\n+\n+This domain template file will be used in the next step ([Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)) when it creates your final domain resource file.\n+\n+5. Export the environment variables for the image name and tag using the same values in step 1:\n+\n+```\n+export MODEL_IMAGE_NAME=\"my.remote.registry.com/model-in-image\"\n+export MODEL_IMAGE_TAG=\"v1\"\n+```\n+\n+These environment variables will be used in the next step ([Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)) when it creates your final domain resource file.\n+\n+### Create and deploy your Kubernetes resources\n+\n+To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+\n+  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n+  - Creates a secret containing your WebLogic administrator user name and password.\n+  - Creates a secret containing your Model in Image runtime encryption password:\n+    - All model-in-image domains must supply a runtime encryption secret with a `password` value.\n+    - It is used to encrypt configuration that is passed around internally by the Operator.\n+    - The value must be kept private but can be arbitrary: you can optionally supply a different secret value every time you restart the domain.\n+  - Creates secrets containing your RCU access URL, credentials, and prefix (these are unused unless the domain type is `JRF`).\n+  - Creates a config map containing an additional WDT model properties file, `$SAMPLEDIR/model1.20.properties`.\n+  - Generates a domain resource YAML file, `$WORKDIR/k8s-domain.yaml`, using `$SAMPLEDIR/k8s-domain.yaml.template`.\n+  - Deploys `k8s-domain.yaml`.\n+  - Displays the status of the domain pods.\n+\n+The script expects `WDT_DOMAIN_TYPE` and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/run_domain.sh\n+  ```", "originalCommit": "052184b0304ccd38cbce2ee30853df310456e698", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NjQ3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398056475", "bodyText": "i had to create the ns first", "author": "markxnelson", "createdAt": "2020-03-25T17:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NjA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NzEzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398057132", "bodyText": "after that it failes with this:\n@@ Info: Running 'create_domain.sh'.\n@@ Info: WORKDIR='/home/mark/operator/mii/work'.\n@@ Info: Creating domain resource file '/home/mark/operator/mii/work/k8s-domain.yaml' from '/home/mark/operator/mii/weblogic-kubernetes-operator/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template'\nsed: -e expression #1, char 36: unknown option to `s'", "author": "markxnelson", "createdAt": "2020-03-25T17:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NjA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2NDQwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399464400", "bodyText": "@markxnelson\nIn theory you should have been following the sample directions, which redirect to 'quick start' directions for setting up the operator and ns.  But I can have run_domain.sh report an error if the ns isn't found, and even also check if there's no running operator monitoring the namespace (but the latter might be a bit too fancy for a sample script?).   Up to you.  But if so, I'd prefer to do this after RC1.\nSide note 1: post RC1 I'd like to move the 'create_domain.sh' script into a separate explicit step in the sample, instead of having it called from 'run_domain.sh'.  Plus call it something like 'stage_domain_resource.sh'.\nSide note 2: I think the sed thingy is now  fixed - per the '/' discussion we had on slack.", "author": "tbarnes-us", "createdAt": "2020-03-27T18:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NjA0NQ=="}], "type": "inlineReview"}, {"oid": "effa05a219d187168288e72d9c5475f18d115efe", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/effa05a219d187168288e72d9c5475f18d115efe", "message": "fix to handle image names with '/' in them in create_domain.sh sample script", "committedDate": "2020-03-25T18:50:36Z", "type": "commit"}, {"oid": "e15eefd1a0a24919416d0e8950fa1785a628d040", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e15eefd1a0a24919416d0e8950fa1785a628d040", "message": "remove mention of unused var from build_image_model.sh sample script", "committedDate": "2020-03-25T19:25:39Z", "type": "commit"}, {"oid": "87a0f1f29796898d9c6ecd6a39f0fba28fe8f5a8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/87a0f1f29796898d9c6ecd6a39f0fba28fe8f5a8", "message": "Fix help text in create_configmap.sh helper script.", "committedDate": "2020-03-25T20:22:00Z", "type": "commit"}, {"oid": "2a38367da0a7460ca107c3d376c6a1c51ed9f826", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2a38367da0a7460ca107c3d376c6a1c51ed9f826", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-25T20:50:42Z", "type": "commit"}, {"oid": "1a673eb04eda35524c4edc146ae9608d71837909", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1a673eb04eda35524c4edc146ae9608d71837909", "message": "Put the domain name back if present", "committedDate": "2020-03-25T20:54:24Z", "type": "commit"}, {"oid": "493ccafaf8069be6bd3a13cad35f0521c9d4d0da", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/493ccafaf8069be6bd3a13cad35f0521c9d4d0da", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T20:55:09Z", "type": "commit"}, {"oid": "8e6769eb6d5297b711f54c4edfb3a22c82ba4348", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8e6769eb6d5297b711f54c4edfb3a22c82ba4348", "message": "remove printing the model", "committedDate": "2020-03-25T20:55:52Z", "type": "commit"}, {"oid": "92dc7bd2cb10529455e6c79c0c56ce2c3bc75b33", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/92dc7bd2cb10529455e6c79c0c56ce2c3bc75b33", "message": "Correct configmap data is not inserted into the flow after it's read.", "committedDate": "2020-03-26T17:06:08Z", "type": "commit"}, {"oid": "397a65de0a3ae8b8a380003dda866a7bbee80796", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/397a65de0a3ae8b8a380003dda866a7bbee80796", "message": "Minor change to Operator.properties\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-26T17:58:39Z", "type": "commit"}, {"oid": "1f22f97c2ed7ad25f34b38a75d0ca1912317bb53", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1f22f97c2ed7ad25f34b38a75d0ca1912317bb53", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-26T19:38:39Z", "type": "commit"}, {"oid": "a6266991c26ea38adbc777dfa98b69fac6743ce8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a6266991c26ea38adbc777dfa98b69fac6743ce8", "message": "remove debug code", "committedDate": "2020-03-26T19:47:42Z", "type": "commit"}, {"oid": "192939b3b39521734257dc61f98289b864c5a71b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/192939b3b39521734257dc61f98289b864c5a71b", "message": "minor help text correction for create_configmap.sh sample script", "committedDate": "2020-03-27T00:21:10Z", "type": "commit"}, {"oid": "2bcd9cefb852057d0ecb6291b30fef40b0c97849", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2bcd9cefb852057d0ecb6291b30fef40b0c97849", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-27T00:21:27Z", "type": "commit"}, {"oid": "98353983987192325498f6a3ffdc8a786f65490c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/98353983987192325498f6a3ffdc8a786f65490c", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-27T21:45:26Z", "type": "commit"}, {"oid": "cd90f050704c251bf41e239a99a484dc09bb2365", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cd90f050704c251bf41e239a99a484dc09bb2365", "message": "doc update (#1509)\n\n* doc update\r\n\r\n* doc update\r\n\r\n* doc update", "committedDate": "2020-03-27T21:49:17Z", "type": "commit"}, {"oid": "90a8c4e3dd0f8f382bf88bdf9a6e6fdc7102a668", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/90a8c4e3dd0f8f382bf88bdf9a6e6fdc7102a668", "message": "MII: avoid deploying/referencing JRF secrets for non-JRF domain types, it's too confusing (#1507)", "committedDate": "2020-03-27T21:50:10Z", "type": "commit"}, {"oid": "cf5ffc4a58b6c3df685f752ab5791cc912233eca", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cf5ffc4a58b6c3df685f752ab5791cc912233eca", "message": "doc update (#1510)\n\n* doc update\r\n\r\n* doc update\r\n\r\n* doc update", "committedDate": "2020-03-27T21:51:15Z", "type": "commit"}, {"oid": "06a91867b90c54a2e5844dce43892bad067bf14c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/06a91867b90c54a2e5844dce43892bad067bf14c", "message": "update ci/cd doc for mii (#1502)\n\n* update ci/cd doc for mii\r\n\r\n* first pass edits\r\n\r\n* doc update\r\n\r\n* doc update\r\n\r\nCo-authored-by: Rosemary Marano <rosemary.marano@oracle.com>", "committedDate": "2020-03-27T21:52:28Z", "type": "commit"}, {"oid": "3b23e490cdf956acdcafa59f0288d573ffc9cd5c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3b23e490cdf956acdcafa59f0288d573ffc9cd5c", "message": "cherry pick 1517 from develop", "committedDate": "2020-03-31T00:50:08Z", "type": "commit"}, {"oid": "867c5287ac0eabf6cf78319ad39b804e172b28ac", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/867c5287ac0eabf6cf78319ad39b804e172b28ac", "message": "two automated test case for Wdt Config Update w single Model File jenkins-ignore (#1495)\n\n* The first test case for OWLS-80444 Automate Wdt Config Override with single Model File jenkins-ignore\r\n\r\n* Modified TestUtils.java jenkins-ignore\r\n\r\n* Added python file to verify JDBC DS prop in server pod jenkins-ignore\r\n\r\n* Changes b ased on the comments jenkins-ignore\r\n\r\n* Added the 2nd test case jenkins-ignore\r\n\r\n* Used patch domain to restart domain jenkins-ignore\r\n\r\n* Changed test case names jenkins-ignore", "committedDate": "2020-03-31T19:13:44Z", "type": "commit"}, {"oid": "cdd5cd60d6b5349895630c10c5f840b3634bcf56", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cdd5cd60d6b5349895630c10c5f840b3634bcf56", "message": "adding config delete and app delete tests using mode file (#1521)\n\n* adding config update tests\r\n\r\n* add config and app delete tests", "committedDate": "2020-04-01T13:17:44Z", "type": "commit"}, {"oid": "193c4f30fa7eaa6a474b42414e1cb49c609b8c5f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/193c4f30fa7eaa6a474b42414e1cb49c609b8c5f", "message": "Model in image namefixes (#1515)\n\n* Fix for PR1478\r\n\r\n* add more traces and minor update\r\n\r\nCo-authored-by: Johnny Shum <cbdream99@gmail.com>", "committedDate": "2020-04-03T13:51:56Z", "type": "commit"}, {"oid": "2723ab2208945cdf4cb8275c34d6996843bf1250", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2723ab2208945cdf4cb8275c34d6996843bf1250", "message": "Missing secret dir fix (#1525)\n\n* Add temporary work around for WDT return non-zero rc if secret directory doesn't exist.\r\n\r\n* Change per WDT fix for no more default for custom secrets mount\r\n\r\nCo-authored-by: Johnny Shum <cbdream99@gmail.com>", "committedDate": "2020-04-03T13:52:12Z", "type": "commit"}, {"oid": "8f9225247231add8fca45faf2ed746a03daa4586", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8f9225247231add8fca45faf2ed746a03daa4586", "message": "Merge remote-tracking branch 'origin/develop' into develop-mii-merge", "committedDate": "2020-04-03T16:24:16Z", "type": "commit"}, {"oid": "7bcd53d66efab573f0302382fe5a44248bb1bf66", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7bcd53d66efab573f0302382fe5a44248bb1bf66", "message": "Update rest_domainqualtrue.yml", "committedDate": "2020-04-03T18:57:29Z", "type": "commit"}, {"oid": "1fba26b44cac5faa1670ea2f4cb3341031de8765", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1fba26b44cac5faa1670ea2f4cb3341031de8765", "message": "Update OperatorUtils.java", "committedDate": "2020-04-03T18:58:54Z", "type": "commit"}, {"oid": "47b3a69883f9c734dde8558040b362830c2ca87b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/47b3a69883f9c734dde8558040b362830c2ca87b", "message": "Update OperatorUtils.java", "committedDate": "2020-04-03T19:00:13Z", "type": "commit"}, {"oid": "099ec582c55dbede5d11d8ed329b433a5d735d41", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/099ec582c55dbede5d11d8ed329b433a5d735d41", "message": "removing commented/incomplete test code (#1533)", "committedDate": "2020-04-03T21:17:54Z", "type": "commit"}, {"oid": "7d85da51c9f15d3b5e25cf4637e87f925f0b70af", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7d85da51c9f15d3b5e25cf4637e87f925f0b70af", "message": "Merge from develop to model-in-image with conflict resolution (#1531)\n\n* OWLS-80522 Domain status ordering, OWLS-80144 Ordered rolling upgrade (#1503)\r\n\r\n* Domain.getServers() should return servers in order\r\n\r\n* ordered rolling upgrade\r\n\r\n* minor test fix\r\n\r\n* new RollingHelperTest\r\n\r\n* update getSortingString to handle up to 20 digits\r\n\r\n* rolling upgrade clusters sorted by cluster names\r\n\r\n* add isAdminServer to ServerStatus\r\n\r\n* ServerStatus isAdminServer excluded from json schema\r\n\r\n* ClusterStatus sorted by sorting name\r\n\r\n* getClusters returning sorted clusters\r\n\r\n* add unit tests\r\n\r\n* handle null map\r\n\r\n* Enhance Helm chart deletion Logic in cleanup.sh Script   (#1517)\r\n\r\n* Enhance the clean up Script to support Helm 2/3\r\n\r\n* Addressed the review comment\r\n\r\nCo-authored-by: ANTARYAMI.PANIGRAHI@ORACLE.COM <anpanigr@anpanigr-1.subnet1ad2phx.devweblogicphx.oraclevcn.com>\r\n\r\n* Added test for domainQualifier=true, added cleanup for intermittent failures (#1513)\r\n\r\n* added support for helm 3.0\r\n\r\n* added check for repo\r\n\r\n* moved from monitoring ns\r\n\r\n* added the test\r\n\r\n* fixed style\r\n\r\n* added missed file\r\n\r\n* added condition for ver\r\n\r\n* rework to avoid interm failures\r\n\r\n* fixed docs\r\n\r\n* updated version of MonExp\r\n\r\n* Stub the ApiClient in tests that get connections but where this was not already done. (#1519)\r\n\r\n* Enhance the cleanup script to include deletion of few namesapce(s) created by Integration Tests (#1523)\r\n\r\nCo-authored-by: ANTARYAMI.PANIGRAHI@ORACLE.COM <anpanigr@anpanigr-1.subnet1ad2phx.devweblogicphx.oraclevcn.com>\r\n\r\n* overall doc edits (#1518)\r\n\r\n* overall doc edits\r\n\r\n* fix a mistake I created\r\n\r\n* update Kubernetes prereqs\r\n\r\n* incorporate edits from Ryan and Mark\r\n\r\n* fix typo\r\n\r\n* fix my mistake\r\n\r\n* minor fixes\r\n\r\n* Disable preserveUnknownFields\r\n\r\n* Update rest_domainqualtrue.yml\r\n\r\n* Update OperatorUtils.java\r\n\r\n* Update OperatorUtils.java\r\n\r\nCo-authored-by: Anthony Lai <anthony.lai@oracle.com>\r\nCo-authored-by: Antaryami Panigrahi <31135902+anpanigr@users.noreply.github.com>\r\nCo-authored-by: ANTARYAMI.PANIGRAHI@ORACLE.COM <anpanigr@anpanigr-1.subnet1ad2phx.devweblogicphx.oraclevcn.com>\r\nCo-authored-by: Marina Kogan <marina.kogan@oracle.com>\r\nCo-authored-by: Rosemary Marano <rosemary.marano@oracle.com>", "committedDate": "2020-04-03T22:09:08Z", "type": "commit"}, {"oid": "53e1fc3154785e97feed965076f03c3319b2be77", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/53e1fc3154785e97feed965076f03c3319b2be77", "message": "Merge remote-tracking branch 'origin/develop-mii-merge' into model-in-image", "committedDate": "2020-04-03T22:11:06Z", "type": "commit"}, {"oid": "754c924a17b69ccc8fa8357f78d4a09a0ea1373b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/754c924a17b69ccc8fa8357f78d4a09a0ea1373b", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-04-03T22:11:31Z", "type": "commit"}, {"oid": "9f2886948f25cda604186f3bd73bda120fc3e30b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9f2886948f25cda604186f3bd73bda120fc3e30b", "message": "Fix javadoc", "committedDate": "2020-04-03T22:18:00Z", "type": "commit"}, {"oid": "9c5fb5ae3b29686cb2ee3278a8f455963e1c1053", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9c5fb5ae3b29686cb2ee3278a8f455963e1c1053", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-04-04T19:16:13Z", "type": "commit"}, {"oid": "617bf2ba9544174d7b6b5500a7501c5cb15b4654", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/617bf2ba9544174d7b6b5500a7501c5cb15b4654", "message": "fix broken anchor links (#1540)", "committedDate": "2020-04-06T14:46:58Z", "type": "commit"}, {"oid": "c43d74fd57f7eed4e46fb9e678194b26ae136e18", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c43d74fd57f7eed4e46fb9e678194b26ae136e18", "message": "Updated model files to user @@SECRET macro; added sparce jms/wldf mod\u2026 (#1529)\n\n* Updated model files to user @@SECRET macro; added sparce jms/wldf model files\r\n\r\n* Added Copyright Statements\r\n\r\n* Missing CopyRight\r\n\r\n* Resync the branch and removed work-around\r\n\r\n* Addressed review comment\r\n\r\nCo-authored-by: ANTARYAMI.PANIGRAHI@ORACLE.COM <anpanigr@anpanigr-1.subnet1ad2phx.devweblogicphx.oraclevcn.com>", "committedDate": "2020-04-06T18:53:07Z", "type": "commit"}, {"oid": "00062d88fb18318622d13f29a0a02e8df19f089d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/00062d88fb18318622d13f29a0a02e8df19f089d", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-04-06T21:57:44Z", "type": "commit"}, {"oid": "a1b8fded1b8cfa38d019c524e79947eb88c1e416", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a1b8fded1b8cfa38d019c524e79947eb88c1e416", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-04-07T21:21:52Z", "type": "commit"}, {"oid": "9d51cdd4aadda47d45f614d08748d0ea6f010a65", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9d51cdd4aadda47d45f614d08748d0ea6f010a65", "message": "Correct merge of cleanup.sh", "committedDate": "2020-04-08T17:09:03Z", "type": "commit"}, {"oid": "e07c5d45d42208df3058f5e07565e8b1f35687ea", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e07c5d45d42208df3058f5e07565e8b1f35687ea", "message": "entire site doc edits (#1551)\n\n* entire site doc edits\r\n\r\n* sentence perfection", "committedDate": "2020-04-10T13:38:34Z", "type": "commit"}, {"oid": "6465266ecd02c89330ef3bb1dbd19d1e55a639ad", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6465266ecd02c89330ef3bb1dbd19d1e55a639ad", "message": "Added two more tests to cover config update by creating an image w a new tag  (#1528)\n\n* Added two more tests to cover config update by creating an image with a new tag jenkins-ignore\r\n\r\n* Changes for the comments jenkins-ignore\r\n\r\n* Changed logs jenkins-ignore", "committedDate": "2020-04-10T14:00:08Z", "type": "commit"}, {"oid": "d6e6a7655b26576a88bd6aa3320b788b1aa48b5d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d6e6a7655b26576a88bd6aa3320b788b1aa48b5d", "message": "Mii introspect test (#1530)\n\n* for mii\r\n\r\n* MII updates\r\n\r\n* add wdt configmap mount\r\n\r\n* remove image and wdt configmap first\r\n\r\n* correct script error\r\n\r\n* update model values\r\n\r\n* update properties value\r\n\r\n* template the mii mount and make it optional\r\n\r\n* Making override cm optional\r\n\r\n* revert\r\n\r\n* update the models\r\n\r\n* remove introspectMIITest.sh\r\n\r\n* update secret key\r\n\r\n* clean up\r\n\r\n* clean up workdir\r\n\r\n* Fix missing secret and cleanup\r\n\r\n* Incorporate Tom's changes\r\n\r\n* refresh from model-in-image\r\n\r\n* various changes for the PR\r\n\r\n* fix zip output\r\n\r\n* fix script error\r\n\r\n* correct archive location\r\n\r\n* push no-effect change\r\n\r\n* move WDT_DOMAIN_TYPE to yamlt\r\n\r\n* update for PR\r\n\r\n* fix test for MII\r\n\r\n* Remove custom overrides and adjust overrides test.\r\n\r\n* Update script and readme\r\n\r\n* minor fixes\r\n\r\n* hide k8s output\r\n\r\n* Fix copyright\r\n\r\n* Fix copyright\r\n\r\n* Fix copyright\r\n\r\n* Fix copyright\r\n\r\n* updated copyrights\r\n\r\n* Add copyrights\r\n\r\n* update from model-in-image\r\n\r\nCo-authored-by: Johnny Shum <cbdream99@gmail.com>\r\nCo-authored-by: Ryan Eberhard <ryan.eberhard@oracle.com>", "committedDate": "2020-04-10T14:27:34Z", "type": "commit"}, {"oid": "55ba070a8f13b5cde15c4fca9ef5273522f4b84c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/55ba070a8f13b5cde15c4fca9ef5273522f4b84c", "message": "fix log format (#1553)", "committedDate": "2020-04-10T15:05:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MTg2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397381865", "bodyText": "Okay, this is the wrong spot for this.  Reminder to myself to relocate as a property.", "author": "rjeberhard", "createdAt": "2020-03-24T18:43:20Z", "path": "operator/src/main/java/oracle/kubernetes/operator/work/Packet.java", "diffHunk": "@@ -15,6 +15,7 @@\n   private final ConcurrentMap<String, Component> components =\n       new ConcurrentHashMap<String, Component>();\n   private final ConcurrentMap<String, Object> delegate = new ConcurrentHashMap<String, Object>();\n+  private boolean isDynamicUpdate = false;", "originalCommit": "03cfb0b64df7a60893e19bb0a11fc80286351290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNDEyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397414124", "bodyText": "We can actually remove this for v1", "author": "jshum2479", "createdAt": "2020-03-24T19:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MTg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNzcyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397417721", "bodyText": "This is not require for v1", "author": "jshum2479", "createdAt": "2020-03-24T19:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MTg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjQxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397422411", "bodyText": "Okay, I'll take care of it unless you tell me you've already done it", "author": "rjeberhard", "createdAt": "2020-03-24T19:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MTg2NQ=="}], "type": "inlineReview"}, {"oid": "c9432fba0794d460069fe8a92d7fd57d9d207b57", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c9432fba0794d460069fe8a92d7fd57d9d207b57", "message": "doc update", "committedDate": "2020-03-24T19:42:06Z", "type": "commit"}, {"oid": "ceffd5d5373bb40ceb5cafd70dbdaa7b7b4adf7b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ceffd5d5373bb40ceb5cafd70dbdaa7b7b4adf7b", "message": "clean up sample descriptor", "committedDate": "2020-03-24T19:45:02Z", "type": "commit"}, {"oid": "a1d82b208e369ad5fa6d6b7c4c3e437141567cb4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a1d82b208e369ad5fa6d6b7c4c3e437141567cb4", "message": "Update Operator.properties", "committedDate": "2020-03-24T19:47:35Z", "type": "commit"}, {"oid": "0010e11e4d00918e9b22d2725ca7341e6da5a051", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0010e11e4d00918e9b22d2725ca7341e6da5a051", "message": "doc update", "committedDate": "2020-03-24T20:00:56Z", "type": "commit"}, {"oid": "1aeb3d5f08198fbae7f97381795e8abd80fcb25d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1aeb3d5f08198fbae7f97381795e8abd80fcb25d", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-24T20:01:06Z", "type": "commit"}, {"oid": "59e829314113917c3c9ba8d95422c8ea8f095355", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/59e829314113917c3c9ba8d95422c8ea8f095355", "message": "Removed unused field", "committedDate": "2020-03-24T20:01:26Z", "type": "commit"}, {"oid": "ed4ac9415084fda37ac6f6a3e547ae9aa7d4f3d3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ed4ac9415084fda37ac6f6a3e547ae9aa7d4f3d3", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-24T20:01:35Z", "type": "commit"}, {"oid": "5d986b3e00490d255b9e7b741c9c2128b5b71d6b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5d986b3e00490d255b9e7b741c9c2128b5b71d6b", "message": "edit new choose a model doc", "committedDate": "2020-03-24T20:09:26Z", "type": "commit"}, {"oid": "d1f8dbbe58aef46fb4fd330f1d6eca1f34ed930e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d1f8dbbe58aef46fb4fd330f1d6eca1f34ed930e", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-24T20:09:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397434142", "bodyText": "@tbarnes-us I used your title suggestion but it seems a bit clunky to me. If \"Choose a Model\" is no longer accurate, would \"Choose a domain home type\" or \"Choose a domain home source\" work?", "author": "rosemarymarano", "createdAt": "2020-03-24T20:17:55Z", "path": "docs-source/content/userguide/managing-domains/choosing-a-model/_index.md", "diffHunk": "@@ -1,5 +1,5 @@\n +++\n-title = \"Choose a model\"\n+title = \"Choose a domain home source type\"", "originalCommit": "5d986b3e00490d255b9e7b741c9c2128b5b71d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1MzQ5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397453499", "bodyText": "Let's go with 'Choose a domain home type'.", "author": "tbarnes-us", "createdAt": "2020-03-24T20:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1MzY1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397453653", "bodyText": "Wait. Let's ask Ryan.", "author": "tbarnes-us", "createdAt": "2020-03-24T20:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1Mzc0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397453748", "bodyText": "@rjeberhard ^^^", "author": "tbarnes-us", "createdAt": "2020-03-24T20:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3NTIwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397475203", "bodyText": "In the domain resource, we have a field called domainHomeSourceType.  This was the best name @mriccell and I could come up with.", "author": "rjeberhard", "createdAt": "2020-03-24T21:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMTI5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397521294", "bodyText": "@rosemarymarano I think that's our final answer.  Please update all references to this section so that they use the new title.  For example please update the ci/cd doc reference accordingly.", "author": "tbarnes-us", "createdAt": "2020-03-24T23:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzNzAwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397837009", "bodyText": "@tbarnes-us Will do, then I'll close this comment.", "author": "rosemarymarano", "createdAt": "2020-03-25T13:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMDU0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399430545", "bodyText": "@rosemarymarano ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDc4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399434789", "bodyText": "Done.", "author": "rosemarymarano", "createdAt": "2020-03-27T17:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDIwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397434202", "bodyText": "Copyright is incorrect -- No more \"All rights reserved.\"", "author": "rjeberhard", "createdAt": "2020-03-24T20:18:02Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build.sh", "diffHunk": "@@ -0,0 +1,37 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. All rights reserved.", "originalCommit": "d1f8dbbe58aef46fb4fd330f1d6eca1f34ed930e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDM0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397434344", "bodyText": "I think I'll just search and correct these.", "author": "rjeberhard", "createdAt": "2020-03-24T20:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDIwMg=="}], "type": "inlineReview"}, {"oid": "bb5f89eda50a85f5d6797c0fce0bbb572344399c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb5f89eda50a85f5d6797c0fce0bbb572344399c", "message": "Minor doc fix - address review comment\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-24T20:47:22Z", "type": "commit"}, {"oid": "1221bf5084a9305f341625e33f748e97a300b5f9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1221bf5084a9305f341625e33f748e97a300b5f9", "message": "Fix copyrights", "committedDate": "2020-03-24T20:49:02Z", "type": "commit"}, {"oid": "336d597545f5fb98aef48a856778050938888ff8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/336d597545f5fb98aef48a856778050938888ff8", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-24T20:49:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NjY1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397456655", "bodyText": "Typo - \"Let's you\".", "author": "doxiao", "createdAt": "2020-03-24T20:58:38Z", "path": "docs-source/content/userguide/managing-domains/choosing-a-model/_index.md", "diffHunk": "@@ -1,23 +1,31 @@\n +++\n-title = \"Choose a model\"\n+title = \"Choose a domain home source type\"\n date = 2019-02-23T16:44:54-05:00\n weight = 1\n pre = \"<b> </b>\"\n +++\n \n-When using the operator, a WebLogic domain can be located either in a persistent volume (PV) or in a Docker image.\n-There are advantages to both approaches, and there are sometimes technical limitations of various\n-cloud providers that may make one approach better suited to your needs.\n-You can also mix and match on a domain-by-domain basis.\n+> TBD/WIP: This is a work in progress. Please do not post review comments here.\n \n-| Domain on a persistent volume | Domain in a Docker image |\n-| --- | --- |\n-| Let's you use the same standard read-only Docker image for every server in every domain. | Requires a different image for each domain, but all servers in that domain use the same image. |\n-| No state is kept in Docker images making them completely throw away (cattle not pets). | Runtime state should not be kept in the images, but applications and configuration are. |\n-| The domain is long-lived, so you can mutate the configuration or deploy new applications using standard methods (Administration Console, WLST, and such). | If you want to mutate the domain configuration or deploy application updates, you must create a new image. |\n-| Logs are automatically placed on persistent storage.  | Logs are kept in the images, and sent to the pod's log (stdout) unless you manually place them on persistent storage.  |\n-| Patches can be applied by simply changing the image and rolling the domain.  | To apply patches, you must create a new domain-specific image and then roll the domain.  |\n-| Many cloud providers do not provide persistent volumes that are shared across availability zones, so you may not be able to use a single persistent volume.  You may need to use some kind of volume replication technology or a clustered file system. | You do not have to worry about volume replication across availability zones since each pod has its own copy of the domain.  WebLogic replication will handle propagation of any online configuration changes.  |\n-| CI/CD pipelines may be more complicated because you would probably need to run WLST against the live domain directory to effect changes.  | CI/CD pipelines are simpler because you can create the whole domain in the image and don't have to worry about a persistent copy of the domain.  |\n-| There are less images to manage and store, which could provide significant storage and network savings.  |  There are more images to manage and store in this approach. |\n-| You may be able to use standard Oracle-provided images or, at least, a very small number of self-built images, for example, with patches installed. | You may need to do more work to set up processes to build and maintain your images. |\n+> TBD/WIP: Change 'configuration overrides' to a link throughout. Anything else need links?\n+\n+When using the operator to deploy a WebLogic domain, you have the choice of the following WebLogic domain home source types:\n+\n+ - **Domain in PV**: Supply your domain home configuration in a persistent volume (Domain in PV).\n+ - **Domain in Image**: Supply your domain home in a Docker image (Domain in Image).\n+ - **Model in Image**: Supply a WebLogic Deployment Tool model file in a Docker image (Model in Image).\n+\n+There are advantages to all approaches, and there are sometimes technical limitations of various cloud providers that may make one approach better suited to your needs.  You can also mix and match on a domain-by-domain basis.\n+\n+| Domain in PV | Domain in Image | Model in Image |\n+| --- | --- | --- |\n+| Let's you use the same standard read-only Docker image for every server in every domain. | Requires a different image for each domain, but all servers in that domain use the same image. | Same as Domain in Image. |", "originalCommit": "336d597545f5fb98aef48a856778050938888ff8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NjQ2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397466462", "bodyText": "In other samples (on-pv and in-image samples), the script that generates the domain resource is create-domain.sh. The doc area that is general to all domain source types refers to create-domain.sh (see  > User Guide > Manage WebLogic domains > Domain resource). But for MII samples, the script file is named as create_domain.sh. Not sure if it is critical to make it consistent with other samples.", "author": "doxiao", "createdAt": "2020-03-24T21:17:09Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/create_domain.sh", "diffHunk": "@@ -0,0 +1,63 @@\n+#!/bin/bash", "originalCommit": "336d597545f5fb98aef48a856778050938888ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0Mzg1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397543857", "bodyText": "I'm in favor of leaving it alone or doing something else:\n\nUnlike the swiss-army-knife domain-create.sh, this script only creates the domain resource file - it doesn't deploy it or implicitly build an image...\nTo reflect this, a better name might be 'stage-domain-resource-file' (similarly 'build_model' would probably be better named 'stage-model-files-for-image.sh', and ' build_download.sh' should probably be named 'stage-tooling.sh').\n\n@rjeberhard What do you think?  Maybe leave things as is and clean up in a later release when we break this sample into even smaller steps/parts?", "author": "tbarnes-us", "createdAt": "2020-03-25T00:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NjQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNTIxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397805216", "bodyText": "Do we have a style disagreement between underscore and dash?  Otherwise, I'm fine with leaving the content of these samples alone.", "author": "rjeberhard", "createdAt": "2020-03-25T12:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NjQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk1NDQ0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397954442", "bodyText": "The > User Guide > Manage WebLogic domains > Domain resource doc has been updated not to mention any script file names. I have not checked who updated it, but the latest looks fine.", "author": "doxiao", "createdAt": "2020-03-25T15:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NjQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2Nzc0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397467744", "bodyText": "The new introspectorJobActiveDeadlineSecodns is missing under configuration.", "author": "doxiao", "createdAt": "2020-03-24T21:19:41Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -86,8 +86,9 @@ Elements related to domain [startup and shutdown]({{< relref \"/userguide/managin\n \n Elements related to overriding WebLogic domain configuration:", "originalCommit": "336d597545f5fb98aef48a856778050938888ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2Nzg1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397467850", "bodyText": "I'll add it.", "author": "doxiao", "createdAt": "2020-03-24T21:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2Nzc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNzgyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397637827", "bodyText": "@doxiao I just added it. Please take a look and resolve this if correct.", "author": "tbarnes-us", "createdAt": "2020-03-25T06:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2Nzc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3NDk4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397474983", "bodyText": "This doc discusses the domain resource in general. Feels like we need to cover the new elements in the latest schema here, for example, things under configuration.model and configuration.opss. Thoughts? @rjeberhard @tbarnes-us @jshum2479.", "author": "doxiao", "createdAt": "2020-03-24T21:33:59Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -86,8 +86,9 @@ Elements related to domain [startup and shutdown]({{< relref \"/userguide/managin\n \n Elements related to overriding WebLogic domain configuration:\n \n-* `configOverrides`: The name of the config map for optional WebLogic configuration overrides.\n-* `configOverrideSecrets`: A list of names of the secrets for optional WebLogic configuration overrides.\n+These elements are under `configuration`.\n+* `overridesConfigMap`: The name of the config map for optional WebLogic configuration overrides. The value should be empty/unset, if the `domainHomeSourceType` is set to `FromModel`.\n+* `secrets`: A list of names of the secrets for optional WebLogic configuration overrides or model.\n ", "originalCommit": "336d597545f5fb98aef48a856778050938888ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3NjU5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397476596", "bodyText": "For the MII specific ones, we could indicate that and point to the model-in-image doc.", "author": "doxiao", "createdAt": "2020-03-24T21:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3NDk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzODA2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397638062", "bodyText": "@doxiao Good catch.  I've updated the doc.  Please take a look at resolve this comment if you think it's OK.", "author": "tbarnes-us", "createdAt": "2020-03-25T06:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3NDk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk1NTg4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397955885", "bodyText": "The update looks great.", "author": "doxiao", "createdAt": "2020-03-25T15:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3NDk4Mw=="}], "type": "inlineReview"}, {"oid": "d6b0193d0a04eb86861339561c10ed23a4c2b80c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d6b0193d0a04eb86861339561c10ed23a4c2b80c", "message": "Add support for defaulting the MII sample's WORKDIR. Default is '/tmp/tbarnes/model-in-image-sample-work-dir'.", "committedDate": "2020-03-24T21:42:00Z", "type": "commit"}, {"oid": "ec1b69864973ac45d245b70c84cd6e03c42f4958", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ec1b69864973ac45d245b70c84cd6e03c42f4958", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-24T21:42:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MjQyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397482423", "bodyText": "@vanajamukkara @tbarnes-us @jshum2479 @mriccell @ddsharpe @markxnelson Obviously, we've all been reviewing doc, code, and scripts, but I'm thinking that the tests need a lot more attention.  There are only two tests here (since one is commented out).  I don't think we can release without substantially more tests.  I knew that we were going to rely on some amount of manual testing -- in hindsight, that may be an incorrect choice, since there needs to be more here.", "author": "rjeberhard", "createdAt": "2020-03-24T21:48:54Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImage.java", "diffHunk": "@@ -0,0 +1,227 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "originalCommit": "336d597545f5fb98aef48a856778050938888ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMDkyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399430922", "bodyText": "Resolving.  Being addressed.", "author": "tbarnes-us", "createdAt": "2020-03-27T17:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MjQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4NTY2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397485668", "bodyText": "Change \"configuration.model.wdtConfigMap\" to \"configuration.model.configMap\"?", "author": "doxiao", "createdAt": "2020-03-24T21:55:50Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -0,0 +1,155 @@\n++++\n+title = \"Usage\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 20\n+pre = \"<b> </b>\"\n+description = \"Steps for creating and deploying Model in Image images and their associated domain resources.\"\n++++\n+\n+\n+#### Contents\n+\n+   - [WebLogic operator](#1-weblogic-operator)\n+   - [WebLogic image](#2-weblogic-image)\n+   - [Optional WDT model config map](#3-optional-wdt-model-config-map)\n+   - [Required runtime encryption secret](#4-required-runtime-encryption-secret)\n+   - [Secrets for model macros](#5-secrets-for-model-macros)\n+   - [Domain resource attributes](#6-domain-resource-attributes)\n+   - [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types)\n+\n+#### Requirements\n+\n+Here's what's needed to create and deploy a typical Model in Image domain. These items do not need to be created in order.\n+\n+#### 1. WebLogic operator\n+\n+Deploy a WebLogic operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See [Manage operators]({{< relref \"/userguide/managing-operators/_index.md\" >}}) and [Quick Start]({{< relref \"/quickstart/_index.md\" >}}).\n+\n+#### 2. WebLogic image\n+\n+Model in Image requires creating a 'final' deployable image that has WebLogic Server and WDT installed, plus your model and application files.\n+\n+You can start with a WebLogic 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}), or build a base image using the [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample.\n+\n+After you have a base image, Model in Image requires layering the following directory structure for its (optional) WDT models artifacts and (required) WDT binaries:\n+\n+| Directory                | Contents                           | Extension   |\n+| ------------------------ | ---------------------------------- | ----------- |\n+| `/u01/wdt/models`         | Optional domain model YAML files   | .yaml       |\n+| `/u01/wdt/models`         | Optional model variable files      | .properties |\n+| `/u01/wdt/models`         | Optional application archives      | .zip        |\n+| `/u01/wdt/weblogic-deploy`| Unzipped WebLogic deploy install   |             |\n+\n+There are two methods for layering Model in Image artifacts on top of a base image:\n+\n+  - **Manual Image Creation**: Use Docker commands to layer the WDT artifacts from the above table on top of your base image into a new image.\n+\n+  - **WebLogic Image Tool**: Use the convenient [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). The WebLogic Image Tool (WIT) has built-in options for embedding WDT model files, WDT binaries, WebLogic Server binaries, and WebLogic Server patches in an image. The [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample uses the WIT approach. For an example, see the sample's `build_image_model.sh` file in the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image` directory.\n+\n+For a discussion of model file syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 3. Optional WDT model config map\n+\n+You can create a WDT model config map that defines additional model `.yaml` and `.properties` files beyond what you've already supplied in your image, and then reference this config map using your domain resource's `configuration.model.configMap` attribute. This is optional if the supplied image already fully defines your model.\n+\n+WDT model config map files will be merged with the WDT files defined in your image at runtime before your domain home is created. The config map files can add to, remove from, or alter the model configuration that you supplied within your image.\n+\n+For example, place additional `.yaml` and `.properties` files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create configmap MY-DOMAINUID-my-wdt-config-map \\\n+    --from-file /home/acmeuser/wdtoverride\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label  configmap MY-DOMAINUID-my-wdt-config-map \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax and loading order, and see [Runtime updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) for a discussion of using WDT model config maps to update the model configuration of a running domain.\n+\n+\n+#### 4. Required runtime encryption secret\n+\n+Model in Image requires a runtime encryption secret with a secure `password` key. This secret is used by the operator to encrypt model and domain home artifacts before it adds them to a runtime config map or log. The `password` that you set can safely change any time after you've fully shut down a domain but must remain the same for the life of a running domain. The runtime encryption secret that you create can be named anything but note that it is a best practice to name and label secrets with their domain UID to help ensure that cleanup scripts can find and delete them.\n+\n+**NOTE**: Because the runtime encryption password does not need to be shared and only needs to exist for the life of a domain, you may want to use a password generator.\n+\n+Example:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create secret generic MY-DOMAINUID-runtime-encrypt-secret \\\n+    --from-literal=password=welcome1\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label secret MY-DOMAINUID-runtime-encrypt-secret \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+Corresponding domain resource snippet:\n+\n+  ```\n+  configuration:\n+    model:\n+      runtimeEncryptionSecret: MY-DOMAINUID-runtime-encrypt-secret\n+  ```\n+\n+#### 5. Secrets for model macros\n+\n+Create additional secrets as needed by macros in your model files. For example, these can store database URLs and credentials that are accessed using `@@SECRET` macros in your model that reference the secrets.  For a discussion of model macros, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 6. Domain resource attributes\n+\n+The following domain resource attributes are specific to Model in Image domains.\n+\n+| Domain Resource Attribute                    |  Notes |\n+| -------------------------                    |  ------------------ |\n+| `domainHomeSourceType`                       |  Required. Set to `FromModel`. |\n+| `domainHome`                                 |  Must reference an empty or non-existent directory within your image. Do not include the mount path of any persistent volume. Note that Model in Image recreates the domain home for a WebLogic pod every time the pod restarts.|\n+| `configuration.model.wdtConfigMap`           | Optional. Set if you have stored additional models in a config map as per [Optional WDT model config map](#3-optional-wdt-model-config-map). |", "originalCommit": "ec1b69864973ac45d245b70c84cd6e03c42f4958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzOTYxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397639614", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-03-25T06:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4NTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzOTY1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397639656", "bodyText": "fixed", "author": "tbarnes-us", "createdAt": "2020-03-25T06:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4NTY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4Njg5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397486893", "bodyText": "There is no \"configuration.model.secrets\"; model does not have \"secrets\", but configuration does.", "author": "doxiao", "createdAt": "2020-03-24T21:58:25Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -0,0 +1,155 @@\n++++\n+title = \"Usage\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 20\n+pre = \"<b> </b>\"\n+description = \"Steps for creating and deploying Model in Image images and their associated domain resources.\"\n++++\n+\n+\n+#### Contents\n+\n+   - [WebLogic operator](#1-weblogic-operator)\n+   - [WebLogic image](#2-weblogic-image)\n+   - [Optional WDT model config map](#3-optional-wdt-model-config-map)\n+   - [Required runtime encryption secret](#4-required-runtime-encryption-secret)\n+   - [Secrets for model macros](#5-secrets-for-model-macros)\n+   - [Domain resource attributes](#6-domain-resource-attributes)\n+   - [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types)\n+\n+#### Requirements\n+\n+Here's what's needed to create and deploy a typical Model in Image domain. These items do not need to be created in order.\n+\n+#### 1. WebLogic operator\n+\n+Deploy a WebLogic operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See [Manage operators]({{< relref \"/userguide/managing-operators/_index.md\" >}}) and [Quick Start]({{< relref \"/quickstart/_index.md\" >}}).\n+\n+#### 2. WebLogic image\n+\n+Model in Image requires creating a 'final' deployable image that has WebLogic Server and WDT installed, plus your model and application files.\n+\n+You can start with a WebLogic 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}), or build a base image using the [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample.\n+\n+After you have a base image, Model in Image requires layering the following directory structure for its (optional) WDT models artifacts and (required) WDT binaries:\n+\n+| Directory                | Contents                           | Extension   |\n+| ------------------------ | ---------------------------------- | ----------- |\n+| `/u01/wdt/models`         | Optional domain model YAML files   | .yaml       |\n+| `/u01/wdt/models`         | Optional model variable files      | .properties |\n+| `/u01/wdt/models`         | Optional application archives      | .zip        |\n+| `/u01/wdt/weblogic-deploy`| Unzipped WebLogic deploy install   |             |\n+\n+There are two methods for layering Model in Image artifacts on top of a base image:\n+\n+  - **Manual Image Creation**: Use Docker commands to layer the WDT artifacts from the above table on top of your base image into a new image.\n+\n+  - **WebLogic Image Tool**: Use the convenient [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). The WebLogic Image Tool (WIT) has built-in options for embedding WDT model files, WDT binaries, WebLogic Server binaries, and WebLogic Server patches in an image. The [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample uses the WIT approach. For an example, see the sample's `build_image_model.sh` file in the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image` directory.\n+\n+For a discussion of model file syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 3. Optional WDT model config map\n+\n+You can create a WDT model config map that defines additional model `.yaml` and `.properties` files beyond what you've already supplied in your image, and then reference this config map using your domain resource's `configuration.model.configMap` attribute. This is optional if the supplied image already fully defines your model.\n+\n+WDT model config map files will be merged with the WDT files defined in your image at runtime before your domain home is created. The config map files can add to, remove from, or alter the model configuration that you supplied within your image.\n+\n+For example, place additional `.yaml` and `.properties` files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create configmap MY-DOMAINUID-my-wdt-config-map \\\n+    --from-file /home/acmeuser/wdtoverride\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label  configmap MY-DOMAINUID-my-wdt-config-map \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax and loading order, and see [Runtime updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) for a discussion of using WDT model config maps to update the model configuration of a running domain.\n+\n+\n+#### 4. Required runtime encryption secret\n+\n+Model in Image requires a runtime encryption secret with a secure `password` key. This secret is used by the operator to encrypt model and domain home artifacts before it adds them to a runtime config map or log. The `password` that you set can safely change any time after you've fully shut down a domain but must remain the same for the life of a running domain. The runtime encryption secret that you create can be named anything but note that it is a best practice to name and label secrets with their domain UID to help ensure that cleanup scripts can find and delete them.\n+\n+**NOTE**: Because the runtime encryption password does not need to be shared and only needs to exist for the life of a domain, you may want to use a password generator.\n+\n+Example:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create secret generic MY-DOMAINUID-runtime-encrypt-secret \\\n+    --from-literal=password=welcome1\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label secret MY-DOMAINUID-runtime-encrypt-secret \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+Corresponding domain resource snippet:\n+\n+  ```\n+  configuration:\n+    model:\n+      runtimeEncryptionSecret: MY-DOMAINUID-runtime-encrypt-secret\n+  ```\n+\n+#### 5. Secrets for model macros\n+\n+Create additional secrets as needed by macros in your model files. For example, these can store database URLs and credentials that are accessed using `@@SECRET` macros in your model that reference the secrets.  For a discussion of model macros, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 6. Domain resource attributes\n+\n+The following domain resource attributes are specific to Model in Image domains.\n+\n+| Domain Resource Attribute                    |  Notes |\n+| -------------------------                    |  ------------------ |\n+| `domainHomeSourceType`                       |  Required. Set to `FromModel`. |\n+| `domainHome`                                 |  Must reference an empty or non-existent directory within your image. Do not include the mount path of any persistent volume. Note that Model in Image recreates the domain home for a WebLogic pod every time the pod restarts.|\n+| `configuration.model.wdtConfigMap`           | Optional. Set if you have stored additional models in a config map as per [Optional WDT model config map](#3-optional-wdt-model-config-map). |\n+| `configuration.model.secrets`                | Optional. Set this array if your image or config map models contain macros that reference custom Kubernetes secrets. For example, if your macros depend on secrets `my-secret` and `my-other-secret`, then set to `[my-secret, my-other-secret]`.|", "originalCommit": "ec1b69864973ac45d245b70c84cd6e03c42f4958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzOTc4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397639785", "bodyText": "Fixed.", "author": "tbarnes-us", "createdAt": "2020-03-25T06:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4Njg5Mw=="}], "type": "inlineReview"}, {"oid": "57d73bf8e73f68a0456c3b9276612a10b5f4eeac", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/57d73bf8e73f68a0456c3b9276612a10b5f4eeac", "message": "doc update", "committedDate": "2020-03-24T22:22:16Z", "type": "commit"}, {"oid": "c6061ede98790cc8840ae8df78838db67cd2a027", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c6061ede98790cc8840ae8df78838db67cd2a027", "message": "sample update", "committedDate": "2020-03-24T22:45:26Z", "type": "commit"}, {"oid": "9d4477d1cc26b7250c0a0a5896980bc4d7ce8910", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9d4477d1cc26b7250c0a0a5896980bc4d7ce8910", "message": "doc update", "committedDate": "2020-03-24T22:59:48Z", "type": "commit"}, {"oid": "58c7fc3a1f4162deaa6eaee61088ffc0da343aab", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/58c7fc3a1f4162deaa6eaee61088ffc0da343aab", "message": "doc update", "committedDate": "2020-03-24T23:05:09Z", "type": "commit"}, {"oid": "118777b9d469e2fef8c236ea8758afa6b02acdec", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/118777b9d469e2fef8c236ea8758afa6b02acdec", "message": "fix for MII sample script opss_wallet_util.sh", "committedDate": "2020-03-24T23:10:22Z", "type": "commit"}, {"oid": "e8545d44c6f9f72c593185be785016cf9a23c9c4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e8545d44c6f9f72c593185be785016cf9a23c9c4", "message": "remove mention of helm 2.x syntax from MII sample", "committedDate": "2020-03-24T23:17:16Z", "type": "commit"}, {"oid": "23820baeef6d6e27baa6bfbb5cf63c99ec89eb0f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/23820baeef6d6e27baa6bfbb5cf63c99ec89eb0f", "message": "doc update", "committedDate": "2020-03-24T23:21:05Z", "type": "commit"}, {"oid": "3b90b11f5ae67cb0e5903df4120ed6a783f3a167", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3b90b11f5ae67cb0e5903df4120ed6a783f3a167", "message": "doc update", "committedDate": "2020-03-24T23:31:34Z", "type": "commit"}, {"oid": "70e95ea5023a69212536acdc08858d364801079d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/70e95ea5023a69212536acdc08858d364801079d", "message": "doc update", "committedDate": "2020-03-24T23:36:59Z", "type": "commit"}, {"oid": "99d7439ac29de1b07a1c0f6ba95eec359ce2355a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/99d7439ac29de1b07a1c0f6ba95eec359ce2355a", "message": "doc update", "committedDate": "2020-03-24T23:58:36Z", "type": "commit"}, {"oid": "e5649f2519cdc49c2e216ea8c4109f7ed40724dc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e5649f2519cdc49c2e216ea8c4109f7ed40724dc", "message": "doc update", "committedDate": "2020-03-25T00:04:25Z", "type": "commit"}, {"oid": "b2a9763ed28d550f39dcce02dfb256796b1db58e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b2a9763ed28d550f39dcce02dfb256796b1db58e", "message": "doc update", "committedDate": "2020-03-25T00:06:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNjM0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397536340", "bodyText": "I thought introspectVersion was removed.  Why is it showing up here?\n@jshum2479", "author": "tbarnes-us", "createdAt": "2020-03-25T00:09:53Z", "path": "docs/domains/Domain.json", "diffHunk": "@@ -271,59 +345,33 @@\n           \"description\": \"If present, every time this value is updated the operator will restart the required servers.\",\n           \"type\": \"string\"\n         },\n+        \"introspectVersion\": {\n+          \"description\": \"If present, every time this value is updated, the operator will start introspect domain job\",", "originalCommit": "ec1b69864973ac45d245b70c84cd6e03c42f4958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDU4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397640580", "bodyText": "If it must remain, can its descriptions in all locations be decorated with something like 'This is an experimental setting that isn't supported in production deployments.'?\n@rjeberhard FYI", "author": "tbarnes-us", "createdAt": "2020-03-25T06:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNjM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNzAwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397537005", "bodyText": "Shouldn't 'introspectVersion' be gone? @jshum2479", "author": "tbarnes-us", "createdAt": "2020-03-25T00:11:57Z", "path": "docs/domains/index.html", "diffHunk": "@@ -1191,59 +1265,33 @@\n           \"description\": \"If present, every time this value is updated the operator will restart the required servers.\",\n           \"type\": \"string\"\n         },\n+        \"introspectVersion\": {\n+          \"description\": \"If present, every time this value is updated, the operator will start introspect domain job\",\n+          \"type\": \"string\"\n+        },", "originalCommit": "ec1b69864973ac45d245b70c84cd6e03c42f4958", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "99f2f8a58a98b61787718bfe9f3960e88139acbe", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/99f2f8a58a98b61787718bfe9f3960e88139acbe", "message": "Update the wallet in the primordial domain if the rcu schema password changed", "committedDate": "2020-03-25T03:16:45Z", "type": "commit"}, {"oid": "b2b41665e85c37e19e8c09319cfb791210d477c1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b2b41665e85c37e19e8c09319cfb791210d477c1", "message": "doc update", "committedDate": "2020-03-25T04:10:51Z", "type": "commit"}, {"oid": "9cd848bfd5e26220b7e1fb87a7fba8a1f5b19262", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9cd848bfd5e26220b7e1fb87a7fba8a1f5b19262", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T04:10:59Z", "type": "commit"}, {"oid": "0fe5255d547855735b38e7cca8cf29e3ceb2086c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0fe5255d547855735b38e7cca8cf29e3ceb2086c", "message": "doc update", "committedDate": "2020-03-25T04:26:56Z", "type": "commit"}, {"oid": "6c2ac7f5b44fda06793181c2b7dbb692af7960bd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6c2ac7f5b44fda06793181c2b7dbb692af7960bd", "message": "add error checking", "committedDate": "2020-03-25T05:01:11Z", "type": "commit"}, {"oid": "2537871e2c934f026528a2e28072f792d2c1dfc5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2537871e2c934f026528a2e28072f792d2c1dfc5", "message": "doc update", "committedDate": "2020-03-25T05:57:20Z", "type": "commit"}, {"oid": "ab17543b0b6748e49b0c4ff4b4a80505ada12e0d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ab17543b0b6748e49b0c4ff4b4a80505ada12e0d", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T05:57:39Z", "type": "commit"}, {"oid": "0e54bd8ee74d94e324fb9d3fc5f25b0d57047b12", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0e54bd8ee74d94e324fb9d3fc5f25b0d57047b12", "message": "doc update", "committedDate": "2020-03-25T06:44:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjQyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397642427", "bodyText": "This is not entirely correct.  The operator keeps a copy of the wallet file in the introspector configmap.  The wallet file is only required if you want to share the database with other domains or if the domain is deleted and recreated (essentially sharing with another domain).  The reason for this is - we split into primordial domain and then update with the rest of the config.  The primordial jrf domain has all the wallet and all the default JRF apps/resources info. In order to re-create another domain to share the rcu database,  the wallet+password must be provided.  We only re-create the primordial domain if there is a security info change (e.g. wls credentials and security roles) and for the same domain if the walletFile is not provided, it will reuse the one in the introspect configmap.\nHowever, for safety and best practice, user should save , backup and use the walletFile in the domain resource yaml - such as the case when the domain is deleted by accident.", "author": "jshum2479", "createdAt": "2020-03-25T07:01:54Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -0,0 +1,173 @@\n++++\n+title = \"Usage\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 20\n+pre = \"<b> </b>\"\n+description = \"Steps for creating and deploying Model in Image images and their associated domain resources.\"\n++++\n+\n+\n+#### Contents\n+\n+   - [WebLogic operator](#1-weblogic-operator)\n+   - [WebLogic image](#2-weblogic-image)\n+   - [Optional WDT model config map](#3-optional-wdt-model-config-map)\n+   - [Required runtime encryption secret](#4-required-runtime-encryption-secret)\n+   - [Secrets for model macros](#5-secrets-for-model-macros)\n+   - [Domain resource attributes](#6-domain-resource-attributes)\n+   - [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types)\n+\n+#### Requirements\n+\n+Here's what's needed to create and deploy a typical Model in Image domain. These items do not need to be created in order.\n+\n+#### 1. WebLogic operator\n+\n+Deploy a WebLogic operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See [Manage operators]({{< relref \"/userguide/managing-operators/_index.md\" >}}) and [Quick Start]({{< relref \"/quickstart/_index.md\" >}}).\n+\n+#### 2. WebLogic image\n+\n+Model in Image requires creating a 'final' deployable image that has WebLogic Server and WDT installed, plus your model and application files.\n+\n+You can start with a WebLogic 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}), or build a base image using the [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample.\n+\n+After you have a base image, Model in Image requires layering the following directory structure for its (optional) WDT models artifacts and (required) WDT binaries:\n+\n+| Directory                | Contents                           | Extension   |\n+| ------------------------ | ---------------------------------- | ----------- |\n+| `/u01/wdt/models`         | Optional domain model YAML files   | .yaml       |\n+| `/u01/wdt/models`         | Optional model variable files      | .properties |\n+| `/u01/wdt/models`         | Optional application archives      | .zip        |\n+| `/u01/wdt/weblogic-deploy`| Unzipped WebLogic deploy install   |             |\n+\n+There are two methods for layering Model in Image artifacts on top of a base image:\n+\n+  - **Manual Image Creation**: Use Docker commands to layer the WDT artifacts from the above table on top of your base image into a new image.\n+\n+  - **WebLogic Image Tool**: Use the convenient [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). The WebLogic Image Tool (WIT) has built-in options for embedding WDT model files, WDT binaries, WebLogic Server binaries, and WebLogic Server patches in an image. The [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample uses the WIT approach. For an example, see the sample's `build_image_model.sh` file in the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image` directory.\n+\n+For a discussion of model file syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 3. Optional WDT model config map\n+\n+You can create a WDT model config map that defines additional model `.yaml` and `.properties` files beyond what you've already supplied in your image, and then reference this config map using your domain resource's `configuration.model.configMap` attribute. This is optional if the supplied image already fully defines your model.\n+\n+WDT model config map files will be merged with the WDT files defined in your image at runtime before your domain home is created. The config map files can add to, remove from, or alter the model configuration that you supplied within your image.\n+\n+For example, place additional `.yaml` and `.properties` files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create configmap MY-DOMAINUID-my-wdt-config-map \\\n+    --from-file /home/acmeuser/wdtoverride\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label  configmap MY-DOMAINUID-my-wdt-config-map \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax and loading order, and see [Runtime updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) for a discussion of using WDT model config maps to update the model configuration of a running domain.\n+\n+\n+#### 4. Required runtime encryption secret\n+\n+Model in Image requires a runtime encryption secret with a secure `password` key. This secret is used by the operator to encrypt model and domain home artifacts before it adds them to a runtime config map or log. The `password` that you set can safely change any time after you've fully shut down a domain but must remain the same for the life of a running domain. The runtime encryption secret that you create can be named anything but note that it is a best practice to name and label secrets with their domain UID to help ensure that cleanup scripts can find and delete them.\n+\n+**NOTE**: Because the runtime encryption password does not need to be shared and only needs to exist for the life of a domain, you may want to use a password generator.\n+\n+Example:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create secret generic MY-DOMAINUID-runtime-encrypt-secret \\\n+    --from-literal=password=welcome1\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label secret MY-DOMAINUID-runtime-encrypt-secret \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+Corresponding domain resource snippet:\n+\n+  ```\n+  configuration:\n+    model:\n+      runtimeEncryptionSecret: MY-DOMAINUID-runtime-encrypt-secret\n+  ```\n+\n+#### 5. Secrets for model macros\n+\n+Create additional secrets as needed by macros in your model files. For example, these can store database URLs and credentials that are accessed using `@@SECRET` macros in your model that reference the secrets.  For a discussion of model macros, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 6. Domain resource attributes\n+\n+The following domain resource attributes are specific to Model in Image domains.\n+\n+| Domain Resource Attribute                    |  Notes |\n+| -------------------------                    |  ------------------ |\n+| `domainHomeSourceType`                       |  Required. Set to `FromModel`. |\n+| `domainHome`                                 |  Must reference an empty or non-existent directory within your image. Do not include the mount path of any persistent volume. Note that Model in Image recreates the domain home for a WebLogic pod every time the pod restarts.|\n+| `configuration.model.configMap`             | Optional. Set if you have stored additional models in a config map as per [Optional WDT model config map](#3-optional-wdt-model-config-map). |\n+| `configuration.secrets`                      | Optional. Set this array if your image or config map models contain macros that reference custom Kubernetes secrets. For example, if your macros depend on secrets `my-secret` and `my-other-secret`, then set to `[my-secret, my-other-secret]`.|\n+| `configuration.model.RuntimeEncryptionSecret`| Required. All Model in Image domains must specify a runtime encryption secret. See [Required runtime encryption secret](#4-required-runtime-encryption-secret). |\n+| `configuration.model.domainType`             | Set the type of domain. Valid values are `WLS`, `JRF`, and `RestrictedJRF` where `WLS` is the default. See [WDT Domain Types](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/type_def.md).|\n+\n+Notes:\n+\n+ - There are additional attributes that are common to all domain home source types, such as the `image` field. See the Domain Resource [schema](https://github.com/oracle/weblogic-kubernetes-operator/blob/master/docs/domains/Domain.md) and [documentation]({{< relref \"/userguide/managing-domains/domain-resource.md\" >}}) for a full list of domain resource fields.\n+\n+ - There are also additional fields that are specific to JRF domain types. For more information, see [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types).\n+\n+ - Sample domain resource: For an example of a fully specified sample domain resource, see the the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template` file for the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample. Note that the `@@` entries in this template are not processed by the operator; they need to replaced with actual values before the resource can be applied.\n+\n+#### 7. Prerequisites for JRF domain types\n+\n+{{% notice info %}} This section applies only for a `JRF` domain type. Skip it if your domain type is `WLS` or `RestrictedJRF`.\n+{{% /notice %}}\n+\n+A JRF domain requires an infrastructure database called an RCU database, initializing this database, and configuring your domain to access this database. All of these steps must occur before you first deploy your domain. When you first deploy your domain, the introspector job will initialize it's RCU schema tables in the database - a process that can take several minutes.", "originalCommit": "0e54bd8ee74d94e324fb9d3fc5f25b0d57047b12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0NDE3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397644170", "bodyText": "It looks right to me - let's discuss tomorrow.  Once a domain is deployed, the db is initialized.   We don't want to give customer a false sense of security that since their wallet happens to be in a config map then 'it's safe'.  It's not safe.  If anything goes wrong - power outage, crash, etc, etc, then the config map is lost and the wallet is lost.    As for your 'However,' the documentation after the above covers the wallet recovery use case.", "author": "tbarnes-us", "createdAt": "2020-03-25T07:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0NjczNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397646735", "bodyText": "Oh. You were actually talking about the following paragraph.  I've updated the wording slightly so that simply makes sure one knows that one must always save the wallet after a first starting a domain, without explaining that the wallet stays around for a while in an introspect map for re-use if you happen to restart the domain without losing the introspector config map in between.   Please take a look and comment.  Or resolve if yo uthink the change is good.", "author": "tbarnes-us", "createdAt": "2020-03-25T07:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxMTYwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398011609", "bodyText": "@jshum2479 Please comment, or resolve if you think this is good now.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4OTYxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402389617", "bodyText": "Looks good", "author": "jshum2479", "createdAt": "2020-04-02T15:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjQyNw=="}], "type": "inlineReview"}, {"oid": "babb50a8da98a0cb6bed089db00fdda9f49e4516", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/babb50a8da98a0cb6bed089db00fdda9f49e4516", "message": "doc update", "committedDate": "2020-03-25T07:15:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3NzgzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397777838", "bodyText": "\"Domain type\" -> \"Domain source type\"", "author": "rjeberhard", "createdAt": "2020-03-25T11:17:26Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,95 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"", "originalCommit": "babb50a8da98a0cb6bed089db00fdda9f49e4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3ODE0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397778144", "bodyText": "Needs to be \"trace SEVERE\" so it ends up in domain status", "author": "rjeberhard", "createdAt": "2020-03-25T11:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3NzgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMTU0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399431548", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3NzgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MzM5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399473397", "bodyText": "done", "author": "jshum2479", "createdAt": "2020-03-27T18:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3NzgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNzIyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402527225", "bodyText": "@jshum2479, this doesn't look done", "author": "rjeberhard", "createdAt": "2020-04-02T18:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3NzgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjM4MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402532381", "bodyText": "It's in another PR 1515", "author": "jshum2479", "createdAt": "2020-04-02T18:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3NzgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0OTI1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402549251", "bodyText": "Oh, right \ud83e\udd26\u200d\u2642", "author": "rjeberhard", "createdAt": "2020-04-02T19:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3NzgzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3ODU2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397778565", "bodyText": "Is the \"cd /\" necessary given that all the paths are absolute?", "author": "rjeberhard", "createdAt": "2020-03-25T11:18:40Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,95 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\", "originalCommit": "babb50a8da98a0cb6bed089db00fdda9f49e4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MTAyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397841023", "bodyText": "the tar strip off leading '/' ,  this is to guaranteed we are in the root, otherwise it can be anywhere.", "author": "jshum2479", "createdAt": "2020-03-25T13:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3ODU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTE3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397779171", "bodyText": "Similar... \"Domain source type\" and \"trace SEVERE\"", "author": "rjeberhard", "createdAt": "2020-03-25T11:19:48Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,95 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz\n+\n+  # decrypt the SerializedSystemIni first\n+  if [ -f ${RUNTIME_ENCRYPTION_SECRET_PASSWORD} ] ; then\n+    MII_PASSPHRASE=$(cat ${RUNTIME_ENCRYPTION_SECRET_PASSWORD})\n+  else\n+    trace SEVERE \"Domain Source Type is 'FromModel' which requires specifying a runtimeEncryptionSecret \" \\\n+    \"in your domain resource and deploying this secret with a 'password' key, but the secret does not have this key.\"\n+    exit 1\n+  fi\n+  encrypt_decrypt_domain_secret \"decrypt\" ${DOMAIN_HOME} ${MII_PASSPHRASE}\n+\n+  # restore the config zip\n+  #\n+  cd / && base64 -d /weblogic-operator/introspector/domainzip.secure > /tmp/domain.tar.gz && \\\n+    tar -xzf /tmp/domain.tar.gz\n+  chmod +x ${DOMAIN_HOME}/bin/*.sh ${DOMAIN_HOME}/*.sh\n+\n+  # restore the archive apps and libraries\n+  #\n+  trace \"Model-in-Image: Deploying libraries.\"\n+\n+  mkdir -p ${DOMAIN_HOME}/lib\n+  if [ $? -ne 0 ] ; then\n+    trace \"Domain type is FromModel, cannot create ${DOMAIN_HOME}/lib \"", "originalCommit": "babb50a8da98a0cb6bed089db00fdda9f49e4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MjkwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397842905", "bodyText": "done", "author": "jshum2479", "createdAt": "2020-03-25T13:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTMyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397779325", "bodyText": "Same.", "author": "rjeberhard", "createdAt": "2020-03-25T11:20:07Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,95 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz\n+\n+  # decrypt the SerializedSystemIni first\n+  if [ -f ${RUNTIME_ENCRYPTION_SECRET_PASSWORD} ] ; then\n+    MII_PASSPHRASE=$(cat ${RUNTIME_ENCRYPTION_SECRET_PASSWORD})\n+  else\n+    trace SEVERE \"Domain Source Type is 'FromModel' which requires specifying a runtimeEncryptionSecret \" \\\n+    \"in your domain resource and deploying this secret with a 'password' key, but the secret does not have this key.\"\n+    exit 1\n+  fi\n+  encrypt_decrypt_domain_secret \"decrypt\" ${DOMAIN_HOME} ${MII_PASSPHRASE}\n+\n+  # restore the config zip\n+  #\n+  cd / && base64 -d /weblogic-operator/introspector/domainzip.secure > /tmp/domain.tar.gz && \\\n+    tar -xzf /tmp/domain.tar.gz\n+  chmod +x ${DOMAIN_HOME}/bin/*.sh ${DOMAIN_HOME}/*.sh\n+\n+  # restore the archive apps and libraries\n+  #\n+  trace \"Model-in-Image: Deploying libraries.\"\n+\n+  mkdir -p ${DOMAIN_HOME}/lib\n+  if [ $? -ne 0 ] ; then\n+    trace \"Domain type is FromModel, cannot create ${DOMAIN_HOME}/lib \"\n+    exit 1\n+  fi\n+\n+  for file in $(sort_files ${IMG_ARCHIVES_ROOTDIR} \"*.zip\")\n+    do\n+        # expand the archive domain libraries to the domain lib\n+        cd ${DOMAIN_HOME}/lib  || exit 1\n+        jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/domainLibraries/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace \"Domain type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"", "originalCommit": "babb50a8da98a0cb6bed089db00fdda9f49e4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MTU3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397841571", "bodyText": "done", "author": "jshum2479", "createdAt": "2020-03-25T13:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTMyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTU1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397779556", "bodyText": "Are we guaranteed that jar will be on the path or should we use $JAVA_HOME?", "author": "rjeberhard", "createdAt": "2020-03-25T11:20:34Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,95 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz\n+\n+  # decrypt the SerializedSystemIni first\n+  if [ -f ${RUNTIME_ENCRYPTION_SECRET_PASSWORD} ] ; then\n+    MII_PASSPHRASE=$(cat ${RUNTIME_ENCRYPTION_SECRET_PASSWORD})\n+  else\n+    trace SEVERE \"Domain Source Type is 'FromModel' which requires specifying a runtimeEncryptionSecret \" \\\n+    \"in your domain resource and deploying this secret with a 'password' key, but the secret does not have this key.\"\n+    exit 1\n+  fi\n+  encrypt_decrypt_domain_secret \"decrypt\" ${DOMAIN_HOME} ${MII_PASSPHRASE}\n+\n+  # restore the config zip\n+  #\n+  cd / && base64 -d /weblogic-operator/introspector/domainzip.secure > /tmp/domain.tar.gz && \\\n+    tar -xzf /tmp/domain.tar.gz\n+  chmod +x ${DOMAIN_HOME}/bin/*.sh ${DOMAIN_HOME}/*.sh\n+\n+  # restore the archive apps and libraries\n+  #\n+  trace \"Model-in-Image: Deploying libraries.\"\n+\n+  mkdir -p ${DOMAIN_HOME}/lib\n+  if [ $? -ne 0 ] ; then\n+    trace \"Domain type is FromModel, cannot create ${DOMAIN_HOME}/lib \"\n+    exit 1\n+  fi\n+\n+  for file in $(sort_files ${IMG_ARCHIVES_ROOTDIR} \"*.zip\")\n+    do\n+        # expand the archive domain libraries to the domain lib\n+        cd ${DOMAIN_HOME}/lib  || exit 1\n+        jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/domainLibraries/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace \"Domain type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"\n+          exit 1\n+        fi\n+\n+        # expand the archive apps and shared lib to the wlsdeploy/* directories\n+        # the config.xml is referencing them from that path\n+\n+        cd ${DOMAIN_HOME} || exit 1\n+        jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/", "originalCommit": "babb50a8da98a0cb6bed089db00fdda9f49e4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MTQ1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397841451", "bodyText": "done", "author": "jshum2479", "createdAt": "2020-03-25T13:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTcwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397779702", "bodyText": "Same", "author": "rjeberhard", "createdAt": "2020-03-25T11:20:51Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,95 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz\n+\n+  # decrypt the SerializedSystemIni first\n+  if [ -f ${RUNTIME_ENCRYPTION_SECRET_PASSWORD} ] ; then\n+    MII_PASSPHRASE=$(cat ${RUNTIME_ENCRYPTION_SECRET_PASSWORD})\n+  else\n+    trace SEVERE \"Domain Source Type is 'FromModel' which requires specifying a runtimeEncryptionSecret \" \\\n+    \"in your domain resource and deploying this secret with a 'password' key, but the secret does not have this key.\"\n+    exit 1\n+  fi\n+  encrypt_decrypt_domain_secret \"decrypt\" ${DOMAIN_HOME} ${MII_PASSPHRASE}\n+\n+  # restore the config zip\n+  #\n+  cd / && base64 -d /weblogic-operator/introspector/domainzip.secure > /tmp/domain.tar.gz && \\\n+    tar -xzf /tmp/domain.tar.gz\n+  chmod +x ${DOMAIN_HOME}/bin/*.sh ${DOMAIN_HOME}/*.sh\n+\n+  # restore the archive apps and libraries\n+  #\n+  trace \"Model-in-Image: Deploying libraries.\"\n+\n+  mkdir -p ${DOMAIN_HOME}/lib\n+  if [ $? -ne 0 ] ; then\n+    trace \"Domain type is FromModel, cannot create ${DOMAIN_HOME}/lib \"\n+    exit 1\n+  fi\n+\n+  for file in $(sort_files ${IMG_ARCHIVES_ROOTDIR} \"*.zip\")\n+    do\n+        # expand the archive domain libraries to the domain lib\n+        cd ${DOMAIN_HOME}/lib  || exit 1\n+        jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/domainLibraries/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace \"Domain type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"\n+          exit 1\n+        fi\n+\n+        # expand the archive apps and shared lib to the wlsdeploy/* directories\n+        # the config.xml is referencing them from that path\n+\n+        cd ${DOMAIN_HOME} || exit 1\n+        jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace \"Domain type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"", "originalCommit": "babb50a8da98a0cb6bed089db00fdda9f49e4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MTMzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397841338", "bodyText": "done", "author": "jshum2479", "createdAt": "2020-03-25T13:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTk4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397779989", "bodyText": "If we don't need it then we should remove.", "author": "rjeberhard", "createdAt": "2020-03-25T11:21:23Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,95 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz\n+\n+  # decrypt the SerializedSystemIni first\n+  if [ -f ${RUNTIME_ENCRYPTION_SECRET_PASSWORD} ] ; then\n+    MII_PASSPHRASE=$(cat ${RUNTIME_ENCRYPTION_SECRET_PASSWORD})\n+  else\n+    trace SEVERE \"Domain Source Type is 'FromModel' which requires specifying a runtimeEncryptionSecret \" \\\n+    \"in your domain resource and deploying this secret with a 'password' key, but the secret does not have this key.\"\n+    exit 1\n+  fi\n+  encrypt_decrypt_domain_secret \"decrypt\" ${DOMAIN_HOME} ${MII_PASSPHRASE}\n+\n+  # restore the config zip\n+  #\n+  cd / && base64 -d /weblogic-operator/introspector/domainzip.secure > /tmp/domain.tar.gz && \\\n+    tar -xzf /tmp/domain.tar.gz\n+  chmod +x ${DOMAIN_HOME}/bin/*.sh ${DOMAIN_HOME}/*.sh\n+\n+  # restore the archive apps and libraries\n+  #\n+  trace \"Model-in-Image: Deploying libraries.\"\n+\n+  mkdir -p ${DOMAIN_HOME}/lib\n+  if [ $? -ne 0 ] ; then\n+    trace \"Domain type is FromModel, cannot create ${DOMAIN_HOME}/lib \"\n+    exit 1\n+  fi\n+\n+  for file in $(sort_files ${IMG_ARCHIVES_ROOTDIR} \"*.zip\")\n+    do\n+        # expand the archive domain libraries to the domain lib\n+        cd ${DOMAIN_HOME}/lib  || exit 1\n+        jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/domainLibraries/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace \"Domain type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"\n+          exit 1\n+        fi\n+\n+        # expand the archive apps and shared lib to the wlsdeploy/* directories\n+        # the config.xml is referencing them from that path\n+\n+        cd ${DOMAIN_HOME} || exit 1\n+        jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace \"Domain type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"\n+          exit 1\n+        fi\n+        # no need we are not expanding to it", "originalCommit": "babb50a8da98a0cb6bed089db00fdda9f49e4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMjU2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397832565", "bodyText": "done", "author": "jshum2479", "createdAt": "2020-03-25T12:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3OTk4OQ=="}], "type": "inlineReview"}, {"oid": "932021a42bfc0fa72ba18f6c62e54f8f29feee2e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/932021a42bfc0fa72ba18f6c62e54f8f29feee2e", "message": "Checkstyle", "committedDate": "2020-03-25T11:41:05Z", "type": "commit"}, {"oid": "568041d718b6fcd25ca6440535bbbb367507829c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/568041d718b6fcd25ca6440535bbbb367507829c", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T11:41:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MjM3Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397792377", "bodyText": "Return value of replaceAll is ignored.", "author": "rjeberhard", "createdAt": "2020-03-25T11:44:29Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+\n+public class MiiBaseTest extends BaseTest {\n+  /**\n+   * Creates a map with customized domain input attributes using suffixCount and prefix\n+   * to make the namespaces and ports unique for model in image.\n+   *\n+   * @param suffixCount unique numeric value\n+   * @param prefix      prefix for the artifact names\n+   * @return map with domain input attributes\n+   */\n+  public Map<String, Object> createModelInImageMap(\n+      int suffixCount, String prefix) {\n+    Map<String, Object> domainMap = createDomainMap(suffixCount, prefix);\n+    domainMap.put(\"domainHomeSourceType\", \"FromModel\");\n+    domainMap.put(\"domainHomeImageBase\",\n+        getWeblogicImageName() + \":\" + getWeblogicImageTag());\n+    domainMap.put(\"logHomeOnPV\", \"true\");\n+    //domainMap.put(\"wdtDomainType\", \"WLS\");\n+\n+    if (prefix != null && !prefix.trim().equals(\"\")) {\n+      domainMap.put(\"image\", prefix.toLowerCase() + \"-modelinimage-\" + suffixCount + \":latest\");\n+    } else {\n+      domainMap.put(\"image\", \"modelinimage-\" + suffixCount + \":latest\");\n+    }\n+    return domainMap;\n+  }\n+\n+  /**\n+   * Create domain using model in image.\n+   * @param domainUidPrefix domain UID prefix\n+   * @param domainNS domain namespace\n+   * @param wdtModelFile file should be under test/resouces/model-in-image dir,\n+   *                     value can be ./model.wls.yaml\n+   * @param wdtModelPropertiesFile file should be under test/resouces/model-in-image dir,\n+   *                               value can be ./model.empty.properties\n+   * @param cmFile creates configmap from this file or dir\n+   */\n+  public Domain createMiiDomainWithConfigMap(String domainUidPrefix,\n+                                             String domainNS, String wdtModelFile, String wdtModelPropertiesFile,\n+                                             String cmFile, String wdtDomainType) throws Exception {\n+    Map<String, Object> domainMap =\n+        createModelInImageMap(getNewSuffixCount(), domainUidPrefix);\n+    // config map before deploying domain crd\n+    String cmName = domainMap.get(\"domainUID\") + \"-mii-config-map\";\n+\n+    domainMap.put(\"namespace\", domainNS);\n+    domainMap.put(\"wdtModelFile\", wdtModelFile);\n+    domainMap.put(\"wdtModelPropertiesFile\", wdtModelPropertiesFile);\n+    domainMap.put(\"wdtDomainType\", wdtDomainType);\n+\n+    domainMap.put(\"miiConfigMap\", cmName);\n+    domainMap.put(\"miiConfigMapFileOrDir\", cmFile);\n+\n+    Domain domain = TestUtils.createDomain(domainMap);\n+    // domain = new Domain(domainMap, true, false);\n+    domain.verifyDomainCreated();\n+    return domain;\n+  }\n+\n+  /**\n+   * Modify the domain yaml to add reference to config map and change domain-level restart version.\n+   * @param cmName Config map name\n+   * @param domain the domain\n+   * @throws Exception on failure\n+   */\n+  public void modifyDomainYamlWithNewConfigMapAndDomainRestartVersion(\n+      String cmName, Domain domain)\n+      throws Exception {\n+    String originalYaml =\n+        getUserProjectsDir()\n+            + \"/weblogic-domains/\"\n+            + domain.getDomainUid()\n+            + \"/domain.yaml\";\n+\n+    // Modify the original domain yaml to include restartVersion in admin server node\n+    DomainCrd crd = new DomainCrd(originalYaml);\n+    Map<String, String> objectNode = new HashMap<>();\n+    objectNode.put(\"restartVersion\", \"v1.1\");\n+    crd.addObjectNodeToDomain(objectNode);\n+    String modYaml = crd.getYamlTree();\n+    LoggerHelper.getLocal().log(Level.INFO, modYaml);\n+\n+    //change config map name to new config map\n+    modYaml.replaceAll((String)domain.getDomainMap().get(\"miiConfigMap\"), cmName);", "originalCommit": "568041d718b6fcd25ca6440535bbbb367507829c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMjI3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399432270", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5ODM0Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402398346", "bodyText": "@vanajamukkara  It should replace the modYaml", "author": "jshum2479", "createdAt": "2020-04-02T15:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNDg0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402524843", "bodyText": "It's not doing that presently since Java Strings are immutable.  The return value has the modified String", "author": "rjeberhard", "createdAt": "2020-04-02T18:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MjM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5Mzk5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397793991", "bodyText": "lowercase \"Operator\"", "author": "rjeberhard", "createdAt": "2020-03-25T11:47:26Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -52,6 +53,18 @@ For domain home in image, any changes (dynamic or non-dynamic) to the WebLogic c\n     * If you create a new image with a new name, then you must avoid a rolling restart, which can cause unexpected behavior for the running domain due to configuration inconsistencies as seen by the various servers, by following the steps in [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n     * If you create a new image with the same name, then you must manually initiate a full domain restart. See [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}) in Starting, stopping, and restarting servers.\n \n+* **Model in image:**\n+\n+    * For Model in Image, any image that supplies configuration changes that are incompatible with the current running domain require a full shutdown before changing the domain resource image setting instead of a rolling restart. Consult [Supported and unsupported updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates/_index.md#supported-and-unsupported-updates\" >}}) in Model in Image Runtime Updates for changes that support a rolling restart.\n+\n+    * If you create a new image with a new name, and you want to avoid a rolling restart, see [Avoiding a rolling restart when changing image property on a domain resource](#avoiding-a-rolling-restart-when-changing-image-property-on-a-domain-resource).\n+\n+    * If you create a new image with the same name, then you must manually initiate either a full domain restart or rolling restart for Pods to run with the new image. To initiate a full restart, see [Full domain restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#full-domain-restarts\" >}}) in Starting, stopping, and restarting servers. To initiate a rolling restart, change the value of your domain resource `restartVersion` field.  See [Restarting Servers]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#restarting-servers\" >}}) and [Rolling Restarts]({{< relref \"/userguide/managing-domains/domain-lifecycle/startup/_index.md#rolling-restarts\" >}}) in Starting, stopping, and restarting servers\n+\n+    * If you are supplying updated models or secrets for a running domain, and you want the configuration updates to take effect using a rolling restart: \n+      * You must either supply a new image name in the domain resource or change the domain resource's `restartVersion` in order to force the Operator to reload the configuration. ", "originalCommit": "568041d718b6fcd25ca6440535bbbb367507829c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMjkyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399432924", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-03-27T17:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5Mzk5MQ=="}], "type": "inlineReview"}, {"oid": "d2c5250c4901dd2b4c892cb9a29714a0a3dfc4f3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d2c5250c4901dd2b4c892cb9a29714a0a3dfc4f3", "message": "Update restarting.md", "committedDate": "2020-03-25T11:50:50Z", "type": "commit"}, {"oid": "9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "message": "Update usage.md", "committedDate": "2020-03-25T11:54:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwMjU3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397802572", "bodyText": "@mriccell @vanajamukkara @tbarnes-us @ddsharpe  This is a big script to be part of tests.  It looks like product code.", "author": "rjeberhard", "createdAt": "2020-03-25T12:03:50Z", "path": "integration-tests/src/test/resources/model-in-image/create-domain.sh", "diffHunk": "@@ -0,0 +1,291 @@\n+#!/usr/bin/env bash", "originalCommit": "9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3ODg4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398078882", "bodyText": "Looking inside this script, it looks like a repeat of the MII sample scripts which could be used instead to do the same tasks.  I think this is a side effect of the QA tests and sample scripts being developed at the same time.  But I don't mind that this script doesn't depend on the MII sample scripts - maybe that's a good thing.  Note that there are dedicated tests for directly testing the MII sample scripts.", "author": "tbarnes-us", "createdAt": "2020-03-25T18:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwMjU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMzMzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399433330", "bodyText": "@rjeberhard  Please resolve if you think this comment is being addressed now.", "author": "tbarnes-us", "createdAt": "2020-03-27T17:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwMjU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNjA4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397806080", "bodyText": "This is not a useful error message.", "author": "rjeberhard", "createdAt": "2020-03-25T12:10:47Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/create_secret.sh", "diffHunk": "@@ -0,0 +1,60 @@\n+# !/bin/sh\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# Helper script for creating and labeling a Kubernetes secret.  The secret\n+# is labeled with the specified domain-uid.\n+#\n+# Usage:\n+#\n+# ./create_secret.sh [-n mynamespace] [-d mydomainuid] -s mysecretname [-l key1=val1] [-l key2=val2] [-f key=fileloc ]...\n+# \n+# -d <domain_uid>     : Defaults to $DOMAIN_UID if DOMAIN_UID is set, 'sample-domain1' otherwise.\n+# -n <namespace>      : Defaults to $DOMAIN_NAMESPACE if DOMAIN_NAMESPACE is set, 'DOMAIN_UID-ns' otherwise.\n+# -s <secret-name>    : Name of secret. Required.\n+# -l <key-value-pair> : Secret 'literal' key/value pair, for example '-l password=abc123'.\n+#                       Can be specified more than once. \n+#                       This script doesn't support spaces in the key/value pair.\n+# -f <key-value-pair> : Secret 'file-name' key/file pair, for example '-l walletFile=./ewallet.p12'.\n+#                       Can be specified more than once. \n+#                       This script doesn't support spaces in the key/file pair.\n+#\n+\n+set -e\n+\n+DOMAIN_UID=\"${DOMAIN_UID:-sample-domain1}\"\n+NAMESPACE=\"${DOMAIN_NAMESPACE:-${DOMAIN_UID}-ns}\"\n+SECRET_NAME=\"\"\n+LITERALS=\"\"\n+FILENAMES=\"\"\n+\n+while [ ! \"$1\" = \"\" ]; do\n+  if [ \"$2\" = \"\" ]; then\n+    echo Syntax Error", "originalCommit": "9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0NTIwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398045202", "bodyText": "OK. I've gone ahead and added a help option and friendlier syntax error reporting to  create_secret.sh + create_configmap.sh, plus corrected the usage text in opss_wallet_util.sh.", "author": "tbarnes-us", "createdAt": "2020-03-25T17:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNjA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0NTY2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398045665", "bodyText": "@rjeberhard Please re-review the above files and comment if you're unhappy. Or resolve if you're happy.  Thanks.", "author": "tbarnes-us", "createdAt": "2020-03-25T17:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNjA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNzg1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397807852", "bodyText": "What about other data that is input to the domain home generation?  @jshum2479, remind me how this will be used.", "author": "rjeberhard", "createdAt": "2020-03-25T12:14:04Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java", "diffHunk": "@@ -137,6 +144,17 @@ static String extractFilename(String line) {\n     return fname;\n   }\n \n+  /**\n+   * getModelInImageSpecHash returns the hash for the fields that should be compared for changes.\n+   *\n+   * @return int hash value of the fields\n+   */\n+  public static int getModelInImageSpecHash(String imageName) {\n+    return new HashCodeBuilder(17, 37)\n+        .append(imageName)", "originalCommit": "9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMDk2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397830962", "bodyText": "The restartVersion and introspectVersion has it own label in the pod, so the operator is already taking care of that.", "author": "jshum2479", "createdAt": "2020-03-25T12:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNzg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwODMxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397808318", "bodyText": "Odd... duplicated code lines", "author": "rjeberhard", "createdAt": "2020-03-25T12:14:54Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java", "diffHunk": "@@ -380,6 +400,27 @@ public NextAction apply(Packet packet) {\n         ScanCache.INSTANCE.registerScan(\n             info.getNamespace(), info.getDomainUid(), new Scan(wlsDomainConfig, new DateTime()));\n         packet.put(ProcessingConstants.DOMAIN_TOPOLOGY, wlsDomainConfig);\n+        if (miiDomainZipHash != null) {\n+          packet.put(ProcessingConstants.DOMAIN_HASH, miiDomainZipHash);\n+        }\n+        if (miiModelSecretsHash != null) {\n+          packet.put(ProcessingConstants.SECRETS_HASH, miiModelSecretsHash);\n+        }\n+        String domainRestartVersion = info.getDomain().getRestartVersion();\n+        String domainIntrospectVersion = info.getDomain().getIntrospectVersion();\n+        int modelInImageSpecHash =  ConfigMapHelper.getModelInImageSpecHash(info.getDomain().getSpec().getImage());\n+        if (domainRestartVersion != null) {\n+          packet.put(ProcessingConstants.DOMAIN_RESTART_VERSION, domainRestartVersion);\n+          data.put(ProcessingConstants.DOMAIN_RESTART_VERSION, domainRestartVersion);", "originalCommit": "9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwODQ1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397808455", "bodyText": "Same... very odd.  Duplicated line.", "author": "rjeberhard", "createdAt": "2020-03-25T12:15:08Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java", "diffHunk": "@@ -380,6 +400,27 @@ public NextAction apply(Packet packet) {\n         ScanCache.INSTANCE.registerScan(\n             info.getNamespace(), info.getDomainUid(), new Scan(wlsDomainConfig, new DateTime()));\n         packet.put(ProcessingConstants.DOMAIN_TOPOLOGY, wlsDomainConfig);\n+        if (miiDomainZipHash != null) {\n+          packet.put(ProcessingConstants.DOMAIN_HASH, miiDomainZipHash);\n+        }\n+        if (miiModelSecretsHash != null) {\n+          packet.put(ProcessingConstants.SECRETS_HASH, miiModelSecretsHash);\n+        }\n+        String domainRestartVersion = info.getDomain().getRestartVersion();\n+        String domainIntrospectVersion = info.getDomain().getIntrospectVersion();\n+        int modelInImageSpecHash =  ConfigMapHelper.getModelInImageSpecHash(info.getDomain().getSpec().getImage());\n+        if (domainRestartVersion != null) {\n+          packet.put(ProcessingConstants.DOMAIN_RESTART_VERSION, domainRestartVersion);\n+          data.put(ProcessingConstants.DOMAIN_RESTART_VERSION, domainRestartVersion);\n+        }\n+        if (domainIntrospectVersion != null) {\n+          packet.put(ProcessingConstants.DOMAIN_INTROSPECT_VERSION, domainIntrospectVersion);\n+          data.put(ProcessingConstants.DOMAIN_INTROSPECT_VERSION, domainIntrospectVersion);", "originalCommit": "9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwODc2OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397808769", "bodyText": "less chance for NPE if you reverse the equals check and start with the constant.", "author": "rjeberhard", "createdAt": "2020-03-25T12:15:45Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java", "diffHunk": "@@ -380,6 +400,27 @@ public NextAction apply(Packet packet) {\n         ScanCache.INSTANCE.registerScan(\n             info.getNamespace(), info.getDomainUid(), new Scan(wlsDomainConfig, new DateTime()));\n         packet.put(ProcessingConstants.DOMAIN_TOPOLOGY, wlsDomainConfig);\n+        if (miiDomainZipHash != null) {\n+          packet.put(ProcessingConstants.DOMAIN_HASH, miiDomainZipHash);\n+        }\n+        if (miiModelSecretsHash != null) {\n+          packet.put(ProcessingConstants.SECRETS_HASH, miiModelSecretsHash);\n+        }\n+        String domainRestartVersion = info.getDomain().getRestartVersion();\n+        String domainIntrospectVersion = info.getDomain().getIntrospectVersion();\n+        int modelInImageSpecHash =  ConfigMapHelper.getModelInImageSpecHash(info.getDomain().getSpec().getImage());\n+        if (domainRestartVersion != null) {\n+          packet.put(ProcessingConstants.DOMAIN_RESTART_VERSION, domainRestartVersion);\n+          data.put(ProcessingConstants.DOMAIN_RESTART_VERSION, domainRestartVersion);\n+        }\n+        if (domainIntrospectVersion != null) {\n+          packet.put(ProcessingConstants.DOMAIN_INTROSPECT_VERSION, domainIntrospectVersion);\n+          data.put(ProcessingConstants.DOMAIN_INTROSPECT_VERSION, domainIntrospectVersion);\n+        }\n+        if (info.getDomain().getDomainHomeSourceType().equals(\"FromModel\")) {", "originalCommit": "9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwODkyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397808928", "bodyText": "I wonder if this is some sort of merge problem?", "author": "rjeberhard", "createdAt": "2020-03-25T12:16:02Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java", "diffHunk": "@@ -380,6 +400,27 @@ public NextAction apply(Packet packet) {\n         ScanCache.INSTANCE.registerScan(\n             info.getNamespace(), info.getDomainUid(), new Scan(wlsDomainConfig, new DateTime()));\n         packet.put(ProcessingConstants.DOMAIN_TOPOLOGY, wlsDomainConfig);\n+        if (miiDomainZipHash != null) {\n+          packet.put(ProcessingConstants.DOMAIN_HASH, miiDomainZipHash);\n+        }\n+        if (miiModelSecretsHash != null) {\n+          packet.put(ProcessingConstants.SECRETS_HASH, miiModelSecretsHash);\n+        }\n+        String domainRestartVersion = info.getDomain().getRestartVersion();\n+        String domainIntrospectVersion = info.getDomain().getIntrospectVersion();\n+        int modelInImageSpecHash =  ConfigMapHelper.getModelInImageSpecHash(info.getDomain().getSpec().getImage());\n+        if (domainRestartVersion != null) {\n+          packet.put(ProcessingConstants.DOMAIN_RESTART_VERSION, domainRestartVersion);\n+          data.put(ProcessingConstants.DOMAIN_RESTART_VERSION, domainRestartVersion);\n+        }\n+        if (domainIntrospectVersion != null) {\n+          packet.put(ProcessingConstants.DOMAIN_INTROSPECT_VERSION, domainIntrospectVersion);\n+          data.put(ProcessingConstants.DOMAIN_INTROSPECT_VERSION, domainIntrospectVersion);\n+        }\n+        if (info.getDomain().getDomainHomeSourceType().equals(\"FromModel\")) {\n+          packet.put(ProcessingConstants.DOMAIN_INPUTS_HASH, String.valueOf(modelInImageSpecHash));\n+          data.put(ProcessingConstants.DOMAIN_INPUTS_HASH, String.valueOf(modelInImageSpecHash));", "originalCommit": "9190d5ed90dfddfb6d2576d5c6ca0628e28d409e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8d569874b6d6dbcdfc52f0e7729f2b2d8c810e0e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8d569874b6d6dbcdfc52f0e7729f2b2d8c810e0e", "message": "Code review", "committedDate": "2020-03-25T12:25:05Z", "type": "commit"}, {"oid": "ef274f02858327b733f9c1b91bd0bbb9dea57ed0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ef274f02858327b733f9c1b91bd0bbb9dea57ed0", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T12:26:05Z", "type": "commit"}, {"oid": "11e9b3fd00e2913ac9e68a80695bd4c44e16831d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/11e9b3fd00e2913ac9e68a80695bd4c44e16831d", "message": "remove unnecessary comment", "committedDate": "2020-03-25T12:58:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397833353", "bodyText": "Shall we explain how customers can mix-and-match those types? I assume they can only mix-and-match some sub-features, and we probably need to point those out.", "author": "doxiao", "createdAt": "2020-03-25T12:59:38Z", "path": "docs-source/content/userguide/managing-domains/choosing-a-model/_index.md", "diffHunk": "@@ -1,23 +1,27 @@\n +++\n-title = \"Choose a model\"\n+title = \"Choose a domain home source type\"\n date = 2019-02-23T16:44:54-05:00\n weight = 1\n pre = \"<b> </b>\"\n +++\n \n-When using the operator, a WebLogic domain can be located either in a persistent volume (PV) or in a Docker image.\n-There are advantages to both approaches, and there are sometimes technical limitations of various\n-cloud providers that may make one approach better suited to your needs.\n-You can also mix and match on a domain-by-domain basis.\n+When using the operator to deploy a WebLogic domain, you have the choice of the following WebLogic domain home source types:\n \n-| Domain on a persistent volume | Domain in a Docker image |\n-| --- | --- |\n-| Let's you use the same standard read-only Docker image for every server in every domain. | Requires a different image for each domain, but all servers in that domain use the same image. |\n-| No state is kept in Docker images making them completely throw away (cattle not pets). | Runtime state should not be kept in the images, but applications and configuration are. |\n-| The domain is long-lived, so you can mutate the configuration or deploy new applications using standard methods (Administration Console, WLST, and such). | If you want to mutate the domain configuration or deploy application updates, you must create a new image. |\n-| Logs are automatically placed on persistent storage.  | Logs are kept in the images, and sent to the pod's log (stdout) unless you manually place them on persistent storage.  |\n-| Patches can be applied by simply changing the image and rolling the domain.  | To apply patches, you must create a new domain-specific image and then roll the domain.  |\n-| Many cloud providers do not provide persistent volumes that are shared across availability zones, so you may not be able to use a single persistent volume.  You may need to use some kind of volume replication technology or a clustered file system. | You do not have to worry about volume replication across availability zones since each pod has its own copy of the domain.  WebLogic replication will handle propagation of any online configuration changes.  |\n-| CI/CD pipelines may be more complicated because you would probably need to run WLST against the live domain directory to effect changes.  | CI/CD pipelines are simpler because you can create the whole domain in the image and don't have to worry about a persistent copy of the domain.  |\n-| There are less images to manage and store, which could provide significant storage and network savings.  |  There are more images to manage and store in this approach. |\n-| You may be able to use standard Oracle-provided images or, at least, a very small number of self-built images, for example, with patches installed. | You may need to do more work to set up processes to build and maintain your images. |\n+ - **Domain in PV**: Supply your domain home configuration in a persistent volume.\n+ - **Domain in Image**: Supply your domain home in a Docker image.\n+ - **Model in Image**: Supply a WebLogic Deployment Tool model file in a Docker image.\n+\n+There are advantages to all approaches, and there are sometimes technical limitations of various cloud providers that may make one approach better suited to your needs.  You can also mix and match on a domain-by-domain basis.\n+", "originalCommit": "ef274f02858327b733f9c1b91bd0bbb9dea57ed0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk1MjAzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397952037", "bodyText": "@rjeberhard  - My read is that this is simply  supposed to mean that you can have different types of domains in the same k8s cluster or even the same namespace.   Is that correct? Can you suggest a rewording?  Or directly make the change yourself?", "author": "tbarnes-us", "createdAt": "2020-03-25T15:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk1Nzg5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397957890", "bodyText": "I was not sure what it was supposed to tell the customers. If that is the case as Tom mentioned, I suggest we remove the sentence.", "author": "doxiao", "createdAt": "2020-03-25T15:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4NzExNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397987116", "bodyText": "@doxiao @rjeberhard How about rewording to:   There are advantages for each domain home source type, but sometimes there are technical limitations of various cloud providers that may make one type better suited to your needs.  Note that your are free to use different domain home types for different domains; there is no restriction on having domains with different domain types deployed to the same Kubernetes cluster or namespace. ?", "author": "tbarnes-us", "createdAt": "2020-03-25T16:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MjcwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397992709", "bodyText": "Sounds good to me \ud83d\udc4d", "author": "rjeberhard", "createdAt": "2020-03-25T16:27:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwOTUyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398009524", "bodyText": "Done!\n@doxiao Please close this comment if you're fine with the update.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NDQzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398064437", "bodyText": "looks good to me.", "author": "doxiao", "createdAt": "2020-03-25T18:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3Mjk0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398072941", "bodyText": "OK. resolving.", "author": "tbarnes-us", "createdAt": "2020-03-25T18:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MzEzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398073130", "bodyText": "Oh. it's already resolved. Ignore that.  Thanks Dongbo!", "author": "tbarnes-us", "createdAt": "2020-03-25T18:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMzM1Mw=="}], "type": "inlineReview"}, {"oid": "6399abe246ba77a04812a2904f8491d72e7e5a31", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6399abe246ba77a04812a2904f8491d72e7e5a31", "message": "minor edit", "committedDate": "2020-03-25T13:13:17Z", "type": "commit"}, {"oid": "5d355613cda9674ce06a0cf9724342ea6905398b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5d355613cda9674ce06a0cf9724342ea6905398b", "message": "minor edit", "committedDate": "2020-03-25T13:14:40Z", "type": "commit"}, {"oid": "3747945367d8af0743083b3c7193ff454b004c20", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3747945367d8af0743083b3c7193ff454b004c20", "message": "Minor doc changes\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-25T13:43:15Z", "type": "commit"}, {"oid": "13a015a6ef0ca43b3197b3f9591423e47371cfde", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/13a015a6ef0ca43b3197b3f9591423e47371cfde", "message": "Revert one doc change\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-25T13:46:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MTQ1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397871451", "bodyText": "The paragraph above needs to mention the new option/approach - Molde-in-Image - too.", "author": "doxiao", "createdAt": "2020-03-25T13:54:43Z", "path": "docs-source/content/userguide/cicd/_index.md", "diffHunk": "@@ -56,7 +56,7 @@ outside of the image.  The second approach puts the JDK, WebLogic binaries\n and the domain all in the Docker image.  Both of these approaches are perfectly\n valid (and fully supported) and they have various advantages and disadvantages.\n ", "originalCommit": "13a015a6ef0ca43b3197b3f9591423e47371cfde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NTA2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397995060", "bodyText": "@doxiao I haven't started on this document yet - just got the 'token' - and am not sure if there'll be time to get to it before RC1 code freeze.  Please hold off on reviewing.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MTQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3MzI4MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398273281", "bodyText": "@tbarnes-us we already updated this doc and mentioned three approaches (see the paragraph below this comment). We probably at least want to make this doc itself consistent.", "author": "doxiao", "createdAt": "2020-03-26T01:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MTQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0NTIwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398845204", "bodyText": "@doxiao\nI've updated the entire CI/CD doc section via pending pull #1502\nPlease review the pull and resolve this comment if you agree the pull covers this comment.", "author": "tbarnes-us", "createdAt": "2020-03-26T19:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MTQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4ODMwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402388305", "bodyText": "I'll review the other PR and comment if needed.", "author": "doxiao", "createdAt": "2020-04-02T15:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MTQ1MQ=="}], "type": "inlineReview"}, {"oid": "d705d039bb6d9dc20b378d87d0c26ada93b90d40", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d705d039bb6d9dc20b378d87d0c26ada93b90d40", "message": "Javadoc", "committedDate": "2020-03-25T14:00:37Z", "type": "commit"}, {"oid": "cb9639063de38b4455da62833c82b8b8bb07a094", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cb9639063de38b4455da62833c82b8b8bb07a094", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T14:00:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MDI4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397880285", "bodyText": "I thought config overrides are not supported for Model in Image. Typo? \"Model in Image\" -> \"Domain in Image\"?", "author": "doxiao", "createdAt": "2020-03-25T14:06:07Z", "path": "docs-source/content/userguide/managing-domains/configoverrides/_index.md", "diffHunk": "@@ -24,7 +24,11 @@ pre = \"<b> </b>\"\n ---\n ### Overview\n \n-Use configuration overrides (also called _situational configuration_) to customize a WebLogic domain home configuration without modifying the domain's actual `config.xml` or system resource files. For example, you may want to override a JDBC data source XML module user name, password, and URL so that it references a local database.\n+{{% notice note %}}\n+Configuration overrides can only be used in combination with Domain in Image and Domain in PV domains. For Model in Image domains, use [Model in Image Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) instead.\n+{{% /notice %}}\n+\n+Use configuration overrides (also called _situational configuration_) to customize a Model in Image or Domain in PV domain's WebLogic domain home configuration without modifying the domain's actual `config.xml` or system resource files. For example, you may want to override a JDBC data source XML module user name, password, and URL so that it references a local database.", "originalCommit": "13a015a6ef0ca43b3197b3f9591423e47371cfde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNzkxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397937914", "bodyText": "Oops! Yes that's a typo! I'll fix this and resolve once fixed.", "author": "tbarnes-us", "createdAt": "2020-03-25T15:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MDI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NTk4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397995980", "bodyText": "Fixed.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MDI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NjcxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397886712", "bodyText": "A similar statement exists in the beginning of this doc as a notice (see Overview section above). It is okay if the repetition is intentional and we would like to emphasize this.", "author": "doxiao", "createdAt": "2020-03-25T14:14:52Z", "path": "docs-source/content/userguide/managing-domains/configoverrides/_index.md", "diffHunk": "@@ -59,6 +63,8 @@ For a detailed walk-through of the runtime flow, see the [Internal design flow](\n ---\n ### Prerequisites\n \n+* Configuration overrides can only be used in combination with Domain in Image and Domain in PV domains (the `domainHomeSourceType` must be either `PersistentVolume` or `Image`). For Model in Image domains (`domainHomeSourceType` is `FromModel`), use [Model in Image Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) instead.\n+", "originalCommit": "cb9639063de38b4455da62833c82b8b8bb07a094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NzI0Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397997246", "bodyText": "Yah. I did that on purpose.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NjcxMg=="}], "type": "inlineReview"}, {"oid": "b45bfbf2ef6d7f1808106b6e065a480d634a3fb6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b45bfbf2ef6d7f1808106b6e065a480d634a3fb6", "message": "Adding weblogic credentials change test (#1493)\n\n* Adding testCredentialsChange\r\n\r\n* fix import\r\n\r\n* Add utility method to replace runtimeEncryptionSecret\r\n\r\n* modify the secret\r\n\r\n* fix formatting\r\n\r\n* fix formatting\r\n\r\n* remove unwanted code\r\n\r\n* cleanup\r\n\r\n* cleanup\r\n\r\n* cleanup\r\n\r\n* fix indendation", "committedDate": "2020-03-25T14:21:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NDkzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397894933", "bodyText": "This title needs to be changed since the section applies to both domain home in image and model in image. The content has been changed already to cover the model-in-image use case.", "author": "doxiao", "createdAt": "2020-03-25T14:25:19Z", "path": "docs-source/content/userguide/managing-domains/domain-lifecycle/restarting.md", "diffHunk": "@@ -122,7 +135,7 @@ With patches that are not rolling compatible:\n #### Updating deployed applications for domain home in image", "originalCommit": "cb9639063de38b4455da62833c82b8b8bb07a094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNzczNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397927736", "bodyText": "Fixed.", "author": "rosemarymarano", "createdAt": "2020-03-25T15:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NDkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNjkxNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397926915", "bodyText": "Call 'exitOrLoop' instead of just exit 1 throughout.", "author": "tbarnes-us", "createdAt": "2020-03-25T15:04:31Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,93 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1", "originalCommit": "b45bfbf2ef6d7f1808106b6e065a480d634a3fb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMzY4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399433684", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNjkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MDgzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399480837", "bodyText": "done", "author": "jshum2479", "createdAt": "2020-03-27T19:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNjkxNQ=="}], "type": "inlineReview"}, {"oid": "8de8af31194f5ac690c7c28e77357acfd7632491", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8de8af31194f5ac690c7c28e77357acfd7632491", "message": "doc updates", "committedDate": "2020-03-25T15:06:16Z", "type": "commit"}, {"oid": "7057f19954bd59eff7aa7b04a498f41d72ad9618", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7057f19954bd59eff7aa7b04a498f41d72ad9618", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T15:06:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTAzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397929033", "bodyText": "add || exitOrLoop  (similar advice applies to all major calls that may fail)", "author": "tbarnes-us", "createdAt": "2020-03-25T15:07:20Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,93 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz", "originalCommit": "b45bfbf2ef6d7f1808106b6e065a480d634a3fb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMTcwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397931706", "bodyText": "Actually, since this is a method, it's more clear to have it return non-zero instead of exit - and then have the caller check the error code and exitOrLoop...", "author": "tbarnes-us", "createdAt": "2020-03-25T15:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMzg5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399433893", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MTgwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402391809", "bodyText": "Changed to method in PR 1515", "author": "jshum2479", "createdAt": "2020-04-02T15:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTc3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397929772", "bodyText": "Break this down and add error checks...  (Ditto for other chains like this.)", "author": "tbarnes-us", "createdAt": "2020-03-25T15:08:19Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,93 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz\n+\n+  # decrypt the SerializedSystemIni first\n+  if [ -f ${RUNTIME_ENCRYPTION_SECRET_PASSWORD} ] ; then\n+    MII_PASSPHRASE=$(cat ${RUNTIME_ENCRYPTION_SECRET_PASSWORD})\n+  else\n+    trace SEVERE \"Domain Source Type is 'FromModel' which requires specifying a runtimeEncryptionSecret \" \\\n+    \"in your domain resource and deploying this secret with a 'password' key, but the secret does not have this key.\"\n+    exit 1\n+  fi\n+  encrypt_decrypt_domain_secret \"decrypt\" ${DOMAIN_HOME} ${MII_PASSPHRASE}\n+\n+  # restore the config zip\n+  #\n+  cd / && base64 -d /weblogic-operator/introspector/domainzip.secure > /tmp/domain.tar.gz && \\", "originalCommit": "b45bfbf2ef6d7f1808106b6e065a480d634a3fb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDE0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399434140", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MjE1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402392154", "bodyText": "Changed in PR 1515", "author": "jshum2479", "createdAt": "2020-04-02T15:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDUxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397930519", "bodyText": "What if above call fails?", "author": "tbarnes-us", "createdAt": "2020-03-25T15:09:15Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,93 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz\n+\n+  # decrypt the SerializedSystemIni first\n+  if [ -f ${RUNTIME_ENCRYPTION_SECRET_PASSWORD} ] ; then\n+    MII_PASSPHRASE=$(cat ${RUNTIME_ENCRYPTION_SECRET_PASSWORD})\n+  else\n+    trace SEVERE \"Domain Source Type is 'FromModel' which requires specifying a runtimeEncryptionSecret \" \\\n+    \"in your domain resource and deploying this secret with a 'password' key, but the secret does not have this key.\"\n+    exit 1\n+  fi\n+  encrypt_decrypt_domain_secret \"decrypt\" ${DOMAIN_HOME} ${MII_PASSPHRASE}\n+\n+  # restore the config zip\n+  #\n+  cd / && base64 -d /weblogic-operator/introspector/domainzip.secure > /tmp/domain.tar.gz && \\\n+    tar -xzf /tmp/domain.tar.gz\n+  chmod +x ${DOMAIN_HOME}/bin/*.sh ${DOMAIN_HOME}/*.sh\n+\n+  # restore the archive apps and libraries\n+  #\n+  trace \"Model-in-Image: Deploying libraries.\"\n+\n+  mkdir -p ${DOMAIN_HOME}/lib\n+  if [ $? -ne 0 ] ; then\n+    trace  SEVERE \"Domain Source Type is FromModel, cannot create ${DOMAIN_HOME}/lib \"\n+    exit 1\n+  fi\n+\n+  for file in $(sort_files ${IMG_ARCHIVES_ROOTDIR} \"*.zip\")\n+    do\n+        # expand the archive domain libraries to the domain lib\n+        cd ${DOMAIN_HOME}/lib  || exit 1\n+        ${JAVA_HOME}/bin/jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/domainLibraries/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace SEVERE  \"Domain Source Type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"\n+          exit 1\n+        fi\n+\n+        # expand the archive apps and shared lib to the wlsdeploy/* directories\n+        # the config.xml is referencing them from that path\n+\n+        cd ${DOMAIN_HOME} || exit 1\n+        ${JAVA_HOME}/bin/jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace SEVERE \"Domain Source Type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"\n+          exit 1\n+        fi\n+    done\n+\n+}\n+\n # trace env vars and dirs before export.*Home calls\n \n traceEnv before\n traceDirs before\n \n+traceTiming \"POD '${SERVICE_NAME}' MII UNZIP START\"\n+\n+if [ -f /weblogic-operator/introspector/domainzip.secure ]; then\n+  prepareMIIServer", "originalCommit": "b45bfbf2ef6d7f1808106b6e065a480d634a3fb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDI3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399434274", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDgwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399490804", "bodyText": "prepareMIServer will exit if it fails", "author": "jshum2479", "createdAt": "2020-03-27T19:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2NTM3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402365378", "bodyText": "function calls shouldn't exit - the caller might want to do something on a failure (like exitOrLoop).", "author": "tbarnes-us", "createdAt": "2020-04-02T14:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MjcxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402392716", "bodyText": "Changed in PR 1515", "author": "jshum2479", "createdAt": "2020-04-02T15:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDA0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397934048", "bodyText": "It would be helpful to add cross-references between this section and  \"> User Guide > Manage FMW Domains > Manage FMW Infrastructure domains\" section.", "author": "doxiao", "createdAt": "2020-03-25T15:13:36Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -0,0 +1,173 @@\n++++\n+title = \"Usage\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 20\n+pre = \"<b> </b>\"\n+description = \"Steps for creating and deploying Model in Image images and their associated domain resources.\"\n++++\n+\n+\n+#### Contents\n+\n+   - [WebLogic Kubernetes Operator](#1-weblogic-kubernetes-operator)\n+   - [WebLogic Server image](#2-weblogic-server-image)\n+   - [Optional WDT model config map](#3-optional-wdt-model-config-map)\n+   - [Required runtime encryption secret](#4-required-runtime-encryption-secret)\n+   - [Secrets for model macros](#5-secrets-for-model-macros)\n+   - [Domain resource attributes](#6-domain-resource-attributes)\n+   - [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types)\n+\n+#### Requirements\n+\n+Here's what's needed to create and deploy a typical Model in Image domain. These items do not need to be created in order.\n+\n+#### 1. WebLogic Kubernetes Operator\n+\n+Deploy the operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See [Manage operators]({{< relref \"/userguide/managing-operators/_index.md\" >}}) and [Quick Start]({{< relref \"/quickstart/_index.md\" >}}).\n+\n+#### 2. WebLogic Server image\n+\n+Model in Image requires creating a 'final' deployable image that has WebLogic Server and WDT installed, plus your model and application files.\n+\n+You can start with a WebLogic Server 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}), or build a base image using the [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample.\n+\n+After you have a base image, Model in Image requires layering the following directory structure for its (optional) WDT models artifacts and (required) WDT binaries:\n+\n+| Directory                | Contents                           | Extension   |\n+| ------------------------ | ---------------------------------- | ----------- |\n+| `/u01/wdt/models`         | Optional domain model YAML files   | .yaml       |\n+| `/u01/wdt/models`         | Optional model variable files      | .properties |\n+| `/u01/wdt/models`         | Optional application archives      | .zip        |\n+| `/u01/wdt/weblogic-deploy`| Unzipped WebLogic deploy install   |             |\n+\n+There are two methods for layering Model in Image artifacts on top of a base image:\n+\n+  - **Manual Image Creation**: Use Docker commands to layer the WDT artifacts from the above table on top of your base image into a new image.\n+\n+  - **WebLogic Image Tool**: Use the convenient [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). The WebLogic Image Tool (WIT) has built-in options for embedding WDT model files, WDT binaries, WebLogic Server binaries, and WebLogic Server patches in an image. The [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample uses the WIT approach. For an example, see the sample's `build_image_model.sh` file in the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image` directory.\n+\n+For a discussion of model file syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 3. Optional WDT model config map\n+\n+You can create a WDT model config map that defines additional model `.yaml` and `.properties` files beyond what you've already supplied in your image, and then reference this config map using your domain resource's `configuration.model.configMap` attribute. This is optional if the supplied image already fully defines your model.\n+\n+WDT model config map files will be merged with the WDT files defined in your image at runtime before your domain home is created. The config map files can add to, remove from, or alter the model configuration that you supplied within your image.\n+\n+For example, place additional `.yaml` and `.properties` files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create configmap MY-DOMAINUID-my-wdt-config-map \\\n+    --from-file /home/acmeuser/wdtoverride\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label  configmap MY-DOMAINUID-my-wdt-config-map \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax and loading order, and see [Runtime updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) for a discussion of using WDT model config maps to update the model configuration of a running domain.\n+\n+\n+#### 4. Required runtime encryption secret\n+\n+Model in Image requires a runtime encryption secret with a secure `password` key. This secret is used by the operator to encrypt model and domain home artifacts before it adds them to a runtime config map or log. The `password` that you set can safely change any time after you've fully shut down a domain but must remain the same for the life of a running domain. The runtime encryption secret that you create can be named anything but note that it is a best practice to name and label secrets with their domain UID to help ensure that cleanup scripts can find and delete them.\n+\n+**NOTE**: Because the runtime encryption password does not need to be shared and only needs to exist for the life of a domain, you may want to use a password generator.\n+\n+Example:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create secret generic MY-DOMAINUID-runtime-encrypt-secret \\\n+    --from-literal=password=welcome1\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label secret MY-DOMAINUID-runtime-encrypt-secret \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+Corresponding domain resource snippet:\n+\n+  ```\n+  configuration:\n+    model:\n+      runtimeEncryptionSecret: MY-DOMAINUID-runtime-encrypt-secret\n+  ```\n+\n+#### 5. Secrets for model macros\n+\n+Create additional secrets as needed by macros in your model files. For example, these can store database URLs and credentials that are accessed using `@@SECRET` macros in your model that reference the secrets.  For a discussion of model macros, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+#### 6. Domain resource attributes\n+\n+The following domain resource attributes are specific to Model in Image domains.\n+\n+| Domain Resource Attribute                    |  Notes |\n+| -------------------------                    |  ------------------ |\n+| `domainHomeSourceType`                       |  Required. Set to `FromModel`. |\n+| `domainHome`                                 |  Must reference an empty or non-existent directory within your image. Do not include the mount path of any persistent volume. Note that Model in Image recreates the domain home for a WebLogic pod every time the pod restarts.|\n+| `configuration.model.configMap`             | Optional. Set if you have stored additional models in a config map as per [Optional WDT model config map](#3-optional-wdt-model-config-map). |\n+| `configuration.secrets`                      | Optional. Set this array if your image or config map models contain macros that reference custom Kubernetes secrets. For example, if your macros depend on secrets `my-secret` and `my-other-secret`, then set to `[my-secret, my-other-secret]`.|\n+| `configuration.model.runtimeEncryptionSecret`| Required. All Model in Image domains must specify a runtime encryption secret. See [Required runtime encryption secret](#4-required-runtime-encryption-secret). |\n+| `configuration.model.domainType`             | Set the type of domain. Valid values are `WLS`, `JRF`, and `RestrictedJRF` where `WLS` is the default. See [WDT Domain Types](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/type_def.md).|\n+\n+Notes:\n+\n+ - There are additional attributes that are common to all domain home source types, such as the `image` field. See the Domain Resource [schema](https://github.com/oracle/weblogic-kubernetes-operator/blob/master/docs/domains/Domain.md) and [documentation]({{< relref \"/userguide/managing-domains/domain-resource.md\" >}}) for a full list of domain resource fields.\n+\n+ - There are also additional fields that are specific to JRF domain types. For more information, see [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types).\n+\n+ - Sample domain resource: For an example of a fully specified sample domain resource, see the the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template` file for the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample. Note that the `@@` entries in this template are not processed by the operator; they need to replaced with actual values before the resource can be applied.\n+\n+#### 7. Prerequisites for JRF domain types\n+", "originalCommit": "7057f19954bd59eff7aa7b04a498f41d72ad9618", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5ODkyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397998927", "bodyText": "I'm hesitant to do this.  The 'Manage FMW Domains' section knows nothing about the MII wallet and secret handling.   In fact, that section should probably be carefully edited to redirect model users to this section.  I'll leave this comment open as a reminder to do so.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNTcxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399435719", "bodyText": "@doxiao I've filed JIRA OWLS-80732 Support opss.walletFileSecret and walletPassordSecret in domain-in-image and domain-in-pv to track this.  Please update the JIRA if you think it needs more info.  Please resolve if you think this is sufficient, or add comments otherwise.", "author": "tbarnes-us", "createdAt": "2020-03-27T17:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MDQ2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402390467", "bodyText": "Sounds good.", "author": "doxiao", "createdAt": "2020-04-02T15:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNjQxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397936416", "bodyText": "It looks like 'exportEffectiveDomainHome' further below may be called too late?  Doesn't the above depend on the domain home to be correct?\nThe problem is that an 'empty' domain home may actually mean the domain home is not in the expected location - which is what export effective domain home corrects.   A bit of a chicken-and-the-egg problem, but it needs to be solved, as the 'default domain home' is actually a dynamic calculation.", "author": "tbarnes-us", "createdAt": "2020-03-25T15:16:37Z", "path": "operator/src/main/resources/scripts/startServer.sh", "diffHunk": "@@ -126,11 +147,93 @@ function copySitCfg() {\n   fi\n }\n \n+# prepare mii server\n+\n+function prepareMIIServer() {\n+\n+  trace \"Model-in-Image: Creating domain home.\"\n+\n+  # primordial domain contain the basic structures, security and other fmwconfig templated info\n+  # domainzip only contains the domain configuration (config.xml jdbc/ jms/)\n+  # Both are needed for the complete domain reconstruction\n+\n+  if [ ! -f /weblogic-operator/introspector/primordial_domainzip.secure ] ; then\n+    trace \"Domain Source Type is FromModel, the primordial model archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  if [ ! -f /weblogic-operator/introspector/domainzip.secure ] ; then\n+    trace \"Domain type is FromModel, the domain configuration archive is missing, cannot start server\"\n+    exit 1\n+  fi\n+\n+  cd / && base64 -d /weblogic-operator/introspector/primordial_domainzip.secure > /tmp/domain.tar.gz && \\\n+   tar -xzf /tmp/domain.tar.gz\n+\n+  # decrypt the SerializedSystemIni first\n+  if [ -f ${RUNTIME_ENCRYPTION_SECRET_PASSWORD} ] ; then\n+    MII_PASSPHRASE=$(cat ${RUNTIME_ENCRYPTION_SECRET_PASSWORD})\n+  else\n+    trace SEVERE \"Domain Source Type is 'FromModel' which requires specifying a runtimeEncryptionSecret \" \\\n+    \"in your domain resource and deploying this secret with a 'password' key, but the secret does not have this key.\"\n+    exit 1\n+  fi\n+  encrypt_decrypt_domain_secret \"decrypt\" ${DOMAIN_HOME} ${MII_PASSPHRASE}\n+\n+  # restore the config zip\n+  #\n+  cd / && base64 -d /weblogic-operator/introspector/domainzip.secure > /tmp/domain.tar.gz && \\\n+    tar -xzf /tmp/domain.tar.gz\n+  chmod +x ${DOMAIN_HOME}/bin/*.sh ${DOMAIN_HOME}/*.sh\n+\n+  # restore the archive apps and libraries\n+  #\n+  trace \"Model-in-Image: Deploying libraries.\"\n+\n+  mkdir -p ${DOMAIN_HOME}/lib\n+  if [ $? -ne 0 ] ; then\n+    trace  SEVERE \"Domain Source Type is FromModel, cannot create ${DOMAIN_HOME}/lib \"\n+    exit 1\n+  fi\n+\n+  for file in $(sort_files ${IMG_ARCHIVES_ROOTDIR} \"*.zip\")\n+    do\n+        # expand the archive domain libraries to the domain lib\n+        cd ${DOMAIN_HOME}/lib  || exit 1\n+        ${JAVA_HOME}/bin/jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/domainLibraries/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace SEVERE  \"Domain Source Type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"\n+          exit 1\n+        fi\n+\n+        # expand the archive apps and shared lib to the wlsdeploy/* directories\n+        # the config.xml is referencing them from that path\n+\n+        cd ${DOMAIN_HOME} || exit 1\n+        ${JAVA_HOME}/bin/jar xf ${IMG_ARCHIVES_ROOTDIR}/${file} wlsdeploy/\n+\n+        if [ $? -ne 0 ] ; then\n+          trace SEVERE \"Domain Source Type is FromModel, error in extracting application archive ${IMG_ARCHIVES_ROOTDIR}/${file}\"\n+          exit 1\n+        fi\n+    done\n+\n+}\n+\n # trace env vars and dirs before export.*Home calls\n \n traceEnv before\n traceDirs before\n \n+traceTiming \"POD '${SERVICE_NAME}' MII UNZIP START\"\n+\n+if [ -f /weblogic-operator/introspector/domainzip.secure ]; then\n+  prepareMIIServer\n+fi", "originalCommit": "b45bfbf2ef6d7f1808106b6e065a480d634a3fb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4MTQ0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397981443", "bodyText": "Ignore this.  Resolving.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNjQxNg=="}], "type": "inlineReview"}, {"oid": "e86d407e248d39af2757f7f77ca6280830ec5bd2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e86d407e248d39af2757f7f77ca6280830ec5bd2", "message": "doc update", "committedDate": "2020-03-25T15:20:36Z", "type": "commit"}, {"oid": "341facd920a2ca32e678c1ea3681586becce33d0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/341facd920a2ca32e678c1ea3681586becce33d0", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T15:20:45Z", "type": "commit"}, {"oid": "99d9dc72b0bf631e0659b532036af45069958ad1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/99d9dc72b0bf631e0659b532036af45069958ad1", "message": "doc update", "committedDate": "2020-03-25T15:46:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NjQ0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397966441", "bodyText": "Consider renaming to 'model_encryption_util.py' so that it sorts next to the other model scripts.", "author": "tbarnes-us", "createdAt": "2020-03-25T15:53:32Z", "path": "operator/src/main/resources/scripts/encryption_util.py", "diffHunk": "@@ -0,0 +1,57 @@\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.", "originalCommit": "341facd920a2ca32e678c1ea3681586becce33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNTk0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399435949", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTMyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399489326", "bodyText": "Leaving it for later", "author": "jshum2479", "createdAt": "2020-03-27T19:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2OTQ2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402369465", "bodyText": "Please make the change or file a JIRA to track and link it here.", "author": "tbarnes-us", "createdAt": "2020-04-02T14:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3OTAxNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402379015", "bodyText": "I've filed a JIRA to track.  Resolving.", "author": "tbarnes-us", "createdAt": "2020-04-02T14:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NjQ0MQ=="}], "type": "inlineReview"}, {"oid": "ceb783b877b98aaa50d9a5946860dbeef9468a68", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ceb783b877b98aaa50d9a5946860dbeef9468a68", "message": "Minor doc fix\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-25T15:54:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NzMwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397967301", "bodyText": "@rosemarymarano, this list using (a), (b), (c) gets parsed strangely in markdown because (c) becomes the copyright symbol.  How should we organize this?", "author": "rjeberhard", "createdAt": "2020-03-25T15:54:35Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/overview.md", "diffHunk": "@@ -0,0 +1,59 @@\n++++\n+title = \"Overview\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 10\n+pre = \"<b> </b>\"\n+description = \"Introduction to Model in Image, description of its runtime behavior, and references.\"\n++++\n+\n+#### Content\n+\n+ - [Introduction](#introduction)\n+ - [Runtime behavior overview](#runtime-behavior-overview)\n+ - [Runtime updates overview](#runtime-updates-overview)\n+ - [References](#references)\n+\n+#### Introduction\n+\n+Model in Image is an alternative to the operator's Domain in Image and Domain on PV domain types. See [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}) for a comparison of operator domain types.\n+\n+Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource.\n+\n+It enables:\n+\n+ - Defining a WebLogic domain home configuration using WebLogic Deploy Tool (WDT) model files and application archives.\n+ - Embedding model files and archives in a custom Docker image, and using the WebLogic Image Tool (WIT) to generate this image.\n+ - Supplying additional model files using a Kubernetes config map.\n+ - Supplying Kubernetes secrets that resolve macro references within the models. For example, a secret can be used to supply a database credential.\n+ - Updating WDT model files at runtime. For example, you can add a data source to a running domain. Note that all such updates currently cause the domain to 'roll' in order to take effect.\n+ - Deploying standard WLS domains, Restricted JRF domains, or JRF domains.\n+\n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file.  The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+\n+For JRF domains, Model in Image provides additional support for (a) initializing the RCU database for a domain when a domain is started for first time, (b) supplying an RCU password, and finally (c) obtaining an RCU wallet for re-use in subsequent restarts of the same domain. See [Prerequisites for JRF domain types]({{< relref \"/userguide/managing-domains/model-in-image/usage/_index.md#7-prerequisites-for-jrf-domain-types\" >}}) and [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}).", "originalCommit": "99d9dc72b0bf631e0659b532036af45069958ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMzYyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398033623", "bodyText": "It looks ok in my browser (Firefox). But, if it is a problem in other browsers we can simply remove the letters. They are not needed.", "author": "rosemarymarano", "createdAt": "2020-03-25T17:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NzMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNzIxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398037214", "bodyText": "It looks fine for me too on Chrome.  @markxnelson, does this look better now that you've updated Hugo?", "author": "rjeberhard", "createdAt": "2020-03-25T17:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NzMwMQ=="}], "type": "inlineReview"}, {"oid": "5aed198290f7fbda117af521d1a5d712be660fd4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5aed198290f7fbda117af521d1a5d712be660fd4", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-25T15:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2ODIxMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397968213", "bodyText": "Missing copyright.\nMissing code comments with a description.\nConsider renaming to 'model_create_filter.py' so it sorts next to the other model related scripts.", "author": "tbarnes-us", "createdAt": "2020-03-25T15:55:47Z", "path": "operator/src/main/resources/scripts/wdt_create_filter.py", "diffHunk": "@@ -0,0 +1,23 @@\n+def filter_model(model):", "originalCommit": "341facd920a2ca32e678c1ea3681586becce33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNjE5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399436198", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2ODIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4ODI1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399488253", "bodyText": "not renaming the script for now, but added comment and copyrights", "author": "jshum2479", "createdAt": "2020-03-27T19:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2ODIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MDU5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402370596", "bodyText": "Please make the change or file a JIRA to track and link it here.", "author": "tbarnes-us", "createdAt": "2020-04-02T14:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2ODIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NTg2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402375867", "bodyText": "I'll file a JIRA to track.  Resolving.", "author": "tbarnes-us", "createdAt": "2020-04-02T14:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2ODIxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3Nzg3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397977872", "bodyText": "Since this is sourced into 'startServer.sh' is should be calling the equivalent of the startServer.sh 'exitOrLoop' instead of 'exit 1' throughout.", "author": "tbarnes-us", "createdAt": "2020-03-25T16:08:02Z", "path": "operator/src/main/resources/scripts/modelInImage.sh", "diffHunk": "@@ -0,0 +1,794 @@\n+#!/usr/bin/env bash", "originalCommit": "341facd920a2ca32e678c1ea3681586becce33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNjM1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399436356", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3Nzg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0NjIzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399546231", "bodyText": "changed to return 1 if error and let caller calls exitOrLoop", "author": "jshum2479", "createdAt": "2020-03-27T21:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3Nzg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2NjgwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395266805", "bodyText": "update copyright.", "author": "doxiao", "createdAt": "2020-03-19T19:24:45Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build.sh", "diffHunk": "@@ -0,0 +1,37 @@\n+#!/bin/bash\n+# Copyright 2019, Oracle Corporation and/or its affiliates. All rights reserved.", "originalCommit": "a87ee762d639570e75e225ff41023fecafc935a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2NzQ0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395267441", "bodyText": "update copyright", "author": "doxiao", "createdAt": "2020-03-19T19:25:58Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build_download.sh", "diffHunk": "@@ -0,0 +1,81 @@\n+#!/bin/bash\n+# Copyright 2019, Oracle Corporation and/or its affiliates. All rights reserved.", "originalCommit": "a87ee762d639570e75e225ff41023fecafc935a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5MjY2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395792668", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-03-20T17:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2NzQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwOTI1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395309255", "bodyText": "The three new methods here are for integration test only.", "author": "doxiao", "createdAt": "2020-03-19T20:45:11Z", "path": "kubernetes/samples/scripts/common/validate.sh", "diffHunk": "@@ -409,3 +412,51 @@ function validateDomainPVC {\n   failIfValidationErrors\n }\n \n+#\n+# Function to validate the WDT model file exists\n+#\n+function validateWdtModelFile {", "originalCommit": "a87ee762d639570e75e225ff41023fecafc935a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5NzY4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396697680", "bodyText": "We resolved to leave this alone.", "author": "tbarnes-us", "createdAt": "2020-03-23T19:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwOTI1NQ=="}], "type": "inlineReview"}, {"oid": "0f2f0c8bef89c7a1b0ab438d0699098b74f61725", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0f2f0c8bef89c7a1b0ab438d0699098b74f61725", "message": "add real blank lines between appending variable files", "committedDate": "2020-03-20T00:14:55Z", "type": "commit"}, {"oid": "8c6345720d6cbc7473049a36d178782ad5c6409f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8c6345720d6cbc7473049a36d178782ad5c6409f", "message": "change wdt secret key to password", "committedDate": "2020-03-20T04:00:57Z", "type": "commit"}, {"oid": "4a653acd9b75e15444ff7896b720d52427bd35ed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4a653acd9b75e15444ff7896b720d52427bd35ed", "message": "Model in image main hugo doc - first check-in.", "committedDate": "2020-03-20T05:58:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyODgzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395728835", "bodyText": "rcu_admin_password is not a required attribute since we are not supporting creation of rcu schema on the fly by WDT.", "author": "jshum2479", "createdAt": "2020-03-20T15:51:14Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/model1.yaml.jrf", "diffHunk": "@@ -0,0 +1,35 @@\n+domainInfo:\n+    AdminUserName: '@@FILE:/weblogic-operator/secrets/username@@'\n+    AdminPassword: '@@FILE:/weblogic-operator/secrets/password@@'\n+    ServerStartMode: 'prod'\n+    RCUDbInfo:\n+        rcu_prefix: '@@FILE:/weblogic-operator/config-overrides-secrets/sample-domain1-rcu-access/rcu_prefix@@'\n+        rcu_schema_password: '@@FILE:/weblogic-operator/config-overrides-secrets/sample-domain1-rcu-access/rcu_schema_password@@'\n+        rcu_admin_password: '@@FILE:/weblogic-operator/config-overrides-secrets/sample-domain1-rcu-access/rcu_admin_password@@'", "originalCommit": "4a653acd9b75e15444ff7896b720d52427bd35ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5MjQ5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395792499", "bodyText": "change complete - sample doc updated to - usage doc will be updated by Rosemary in her branch", "author": "tbarnes-us", "createdAt": "2020-03-20T17:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyODgzNQ=="}], "type": "inlineReview"}, {"oid": "dc785d88a3a645d6f161033897c8598c068d071c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dc785d88a3a645d6f161033897c8598c068d071c", "message": "Remove rcu_admin_password - not required at this point", "committedDate": "2020-03-20T16:18:28Z", "type": "commit"}, {"oid": "c9b2199b179f4b07e4234c7fb0293e03450860d8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c9b2199b179f4b07e4234c7fb0293e03450860d8", "message": "MII sample updates", "committedDate": "2020-03-20T17:13:30Z", "type": "commit"}, {"oid": "53668f2f8c4d4f45c2b3e528d5d9bce9a9603f1b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/53668f2f8c4d4f45c2b3e528d5d9bce9a9603f1b", "message": "MII sample updates", "committedDate": "2020-03-20T17:15:22Z", "type": "commit"}, {"oid": "d35a88641d150f9a58391b060826ed158972a7fe", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d35a88641d150f9a58391b060826ed158972a7fe", "message": "Update copyright\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-20T17:25:23Z", "type": "commit"}, {"oid": "bf9d03a39564c020304b6776b218ad8490b1a4b7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bf9d03a39564c020304b6776b218ad8490b1a4b7", "message": "Add introspectorJobActiveDeadlineSeconds in toString(), hashCode() and equals() calculation\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-20T17:26:49Z", "type": "commit"}, {"oid": "9e3850fe4c9fdd1ed296c878d460ce61405194b8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9e3850fe4c9fdd1ed296c878d460ce61405194b8", "message": "MII Sample README update.", "committedDate": "2020-03-20T17:27:08Z", "type": "commit"}, {"oid": "c33c404569e7bedceda28609b98efc0de4dcee84", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c33c404569e7bedceda28609b98efc0de4dcee84", "message": "MII Sample - remove mention of rcu admin password in sample doc.", "committedDate": "2020-03-20T17:34:22Z", "type": "commit"}, {"oid": "d091a973b87019cb62db6e69edb28afaa276bfd7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d091a973b87019cb62db6e69edb28afaa276bfd7", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>\n\nConflicts:\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/build.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/build_download.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/build_image_base.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/build_image_model.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/build_model.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/create_configmap.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/create_domain.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/create_secret.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/run_domain.sh", "committedDate": "2020-03-20T17:36:30Z", "type": "commit"}, {"oid": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/81623b1d513bbbfa1f2ca588a8d757daf2e38202", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-20T17:37:15Z", "type": "commit"}, {"oid": "a14f1a4621ff9576c1aa03437dbd84dcd0e466db", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a14f1a4621ff9576c1aa03437dbd84dcd0e466db", "message": "first pass edits", "committedDate": "2020-03-20T18:45:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1MDE2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395850163", "bodyText": "In the old code, if logHomeEnabled is not set, and the domain is on PV, the logHomeEnabled will be set to true. This is missing in the new code. Is this intentional.  The doc seems to indicate that the old logic remains; so the doc and the code does not match.", "author": "doxiao", "createdAt": "2020-03-20T19:32:34Z", "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/DomainSpec.java", "diffHunk": "@@ -401,8 +437,8 @@ private String validatePath(String s) {\n    * @since 2.0\n    * @return log home enabled\n    */\n-  boolean isLogHomeEnabled() {\n-    return Optional.ofNullable(logHomeEnabled).orElse(!isDomainHomeInImage());", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwMDAxNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396700015", "bodyText": "@jshum2479 Please follow up.  Make sure LogHomeEnabled defaults to true for PV, and false for FromModel and Image.", "author": "tbarnes-us", "createdAt": "2020-03-23T19:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1MDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTI1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396745258", "bodyText": "The logic is in Domain.java isLogHomeEnabled", "author": "jshum2479", "createdAt": "2020-03-23T20:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1MDE2Mw=="}], "type": "inlineReview"}, {"oid": "923c3709b8cb29f88c114e749917bddaae827ff7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/923c3709b8cb29f88c114e749917bddaae827ff7", "message": "Remove wdtEncryptionSecret from the schema and code", "committedDate": "2020-03-20T19:34:41Z", "type": "commit"}, {"oid": "8d859f89b9a45ef9ff086fae9497948acae75879", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8d859f89b9a45ef9ff086fae9497948acae75879", "message": "fix two broken links", "committedDate": "2020-03-20T20:08:32Z", "type": "commit"}, {"oid": "8e50ab70fb2de1b488b7c28bf3dc6652fe392447", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8e50ab70fb2de1b488b7c28bf3dc6652fe392447", "message": "Merge pull request #1483 from oracle/rmarano\n\nuser guide edits", "committedDate": "2020-03-20T20:20:05Z", "type": "commit"}, {"oid": "a8bc12b12102add4c7bf908d569ea6958a169d2f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a8bc12b12102add4c7bf908d569ea6958a169d2f", "message": "Clean up after WDT encryption secret related code is removed\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-20T21:14:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTA4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395731085", "bodyText": "This is a required attribute", "author": "jshum2479", "createdAt": "2020-03-20T15:54:39Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -0,0 +1,176 @@\n++++\n+title = \"Usage\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 20\n+pre = \"<b> </b>\"\n+description = \"Steps for creating and deploying Model in Image images and their associated domain resourcess.\"\n++++\n+\n+\n+### Contents\n+\n+   - [(1) WebLogic operator.](#1-weblogic-operator)\n+   - [(2) WebLogic image.](#2-weblogic-image)\n+   - [(3) Optional WDT model config map.](#3-optional-wdt-model-config-map)\n+   - [(4) Optional WDT encryption secret.](#4-optional-wdt-encryption-secret)\n+   - [(5) Required runtime encryption secret.](#5-required-runtime-encryption-secret)\n+   - [(6) Secrets for model macros.](#6-secrets-for-model-macros)\n+   - [(7) Domain resource attributes.](#7-domain-resource-attributes)\n+   - [(8) Prerequisites for JRF domain types.](#8-prerequisites-for-jrf-domain-types)\n+\n+### Requirements\n+\n+Here's what's needed to create and deploy a typical Model in Image domain:\n+\n+#### (1) WebLogic operator.\n+\n+Deploy a WebLogic operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See [Manage operators]({{< relref \"/userguide/managing-operators/_index.md\" >}}) and [Quick Start]({{< relref \"/quickstart/_index.md\" >}}).\n+\n+#### (2) WebLogic image.\n+\n+Model in Image requires creating a 'final' deployable image that has WebLogic Server and WDT installed, plus your model and application files. \n+\n+You can start with a WebLogic 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}), or build a base image using the WebLogic Image Tool [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image Sample]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}).\n+\n+Once you have a base image, Model in Image requires layering the following directory structure for its (optional) WDT models artifacts and (required) WDT binaries:\n+\n+| Directory                | Contents                           | Extension   |\n+| ------------------------ | ---------------------------------- | ----------- |\n+| /u01/wdt/models          | optional domain model yaml files   | .yaml       |\n+| /u01/wdt/models          | optional model variable files      | .properties |\n+| /u01/wdt/models          | optional application archives      | .zip        |\n+| /u01/wdt/weblogic-deploy | unzipped weblogic deploy install   |             |\n+\n+There are two methods for layering a Model in Image artifacts on top of a base image:\n+\n+  - __Method 1: Manual Image Creation__: Use docker commands to layer the WDT artifacts from the above table on top of your base image into a new image.\n+\n+  - __Method 2: WebLogic Image Tool__: Use the convenient [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). The WebLogic Image Tool (WIT) has built-in options for embedding WDT model files, WDT binaries, WebLogic binaries install, and WebLogic patches in an image. The [Model in Image sample]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) takes the WIT approach, see the sample's `build_image_model.sh` in the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image` directory for an example.\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax.\n+\n+#### (3) Optional WDT model config map.\n+\n+You can create a WDT model config map that defines additional model `.yaml` and `.properties` files beyond what you've already supplied in your image, and then reference this config map using your domain resource's `configuration.model.configMap` attribute. This is optional if the supplied image already fully defines your model. \n+\n+WDT model config map files will be merged with the WDT files defined in your image at runtime before your domain home is created. The config map files can add to, remove from, or alter the model configuration that you supplied within your image.\n+\n+For example, place additional `.yaml` and `.properties` files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create configmap MY-DOMAINUID-my-wdt-config-map \\\n+    --from-file /home/acmeuser/wdtoverride\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label  configmap MY-DOMAINUID-my-wdt-config-map \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax and loading order, and see [Runtime updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) for a discussion of using WDT model config maps to update the model configuration of a running domain.\n+\n+\n+#### (4) Optional WDT encryption secret.\n+\n+> NOTE: Oracle strongly recommends storing sensitive information using Kubernetes secrets when practical instead of relying on this option. See [(6) Secrets for model macros.](#6-secrets-for-model-macros).\n+\n+The WDT encryption option is an alternative to using secrets for encrypting sensitive information stored in a model. The WDT encryption option requires:\n+ - Using WDT tooling to encrypt your model files prior to putting them in a Model in Image image or a Model in Image WDT config map.\n+ - Supplying a WDT encryption `password` via a Kubernetes secret so that Model in Image can decrypt the model at runtime. The secret can be named anything, but it must contain a key named `password`. Example WDT encryption secret creation:\n+   ```\n+   kubectl -n MY-DOMAIN-NAMESPACE \\\n+     create secret generic MY-DOMAINUID-wdt-encrypt-secret \\\n+     --from-literal=password=welcome1\n+   kubectl -n MY-DOMAIN-NAMESPACE \\\n+     label secret MY-DOMAINUID-wdt-encrypt-secret \\\n+     weblogic.domainUID=MY-DOMAINUID\n+   ```\n+ - Setting the domain resource `config.model.wdtEncryptionSecret` field to the name of the secret.\n+\n+For more information see the [WDT Deploy Tool Encrypt Documentation](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/encrypt.md).\n+\n+#### (5) Required runtime encryption secret.\n+\n+Model in Image requires a runtime encryption secret with a secure `password` key. This secret is used by the Operator to encrypt model and domain home artifacts before it adds them to a runtime config map or log. The `password` that you set can safely change any time after you've fully shutdown a domain but must remain the same for the life of a running domain. The runtime encryption secret that you create can be named anything but note that it is a best practice to name and label secrets with their domain UID to help ensure that cleanup scripts can find and delete them.\n+\n+> NOTE: Because the runtime encryption password does not need to be shared and only needs to exist for the life of a domain, you may want to use a password generator.\n+\n+Example:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create secret generic MY-DOMAINUID-runtime-encrypt-secret \\\n+    --from-literal=password=welcome1\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label secret MY-DOMAINUID-runtime-encrypt-secret \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+Corresponding domain resource snippet:\n+\n+  ```\n+  configuration:\n+    model:\n+      runtimeEncryptionSecret: MY-DOMAINUID-runtime-encrypt-secret\n+  ```\n+\n+#### (6) Secrets for model macros.\n+\n+Create additional secrets as needed by macros in your model files. For example, these can store database URLs and credentials that are accessed via `@@FILE` macros in your model that reference the secrets.  See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discusion of model macros.\n+\n+#### (7) Domain resource attributes.\n+\n+The following domain resource attributes are specific to Model in Image domains.\n+\n+| Domain Resource Attribute                    |  Notes |\n+| -------------------------                    |  ------------------ |\n+| `domainHomeSourceType`                       |  Required. Set to `FromModel` |\n+| `domainHome`                                 |  Must reference an empty or non-existent directory within your image. Do not include the mount the path of any persistent volume. Note that Model in Image recreates the domain home for a WebLogic pod every time the pod restarts.|\n+| `configuration.model.wdtConfigMap`           | Optional. Set if you have stored additional models in a config map as per [(3) Optional WDT model config map.](#3-optional-wdt-model-config-map). |\n+| `configuration.model.secrets`                | Optional. Set this array if your image or config map models contain macros that reference custom Kubernetes secrets. For example, if your macros depend on secrets `my-secret` and `my-other-secret` then set to `[my-secret, my-other-secret]`.|\n+| `configuration.model.RuntimeEncryptionSecret`| Required. All Model in Image domain's must specify a runtime encryption secret. See [(5) Required runtime encryption secret.](#5-required-runtime-encryption-secret). |\n+| `configuration.model.wdtEncryptionSecret`    | Rarely used. Set if your using wdt model encryption as per [(4) Optional WDT encryption secret.](#4-optional-wdt-encryption-secret).|\n+| `configuration.model.domainType`             | Set the type of domain. Valid values are `WLS`, `JRF`, and `RestrictedJRF` where `WLS` is the default. See [WDT Domain Types](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/type_def.md).|\n+\n+Notes:\n+\n+ - There are additional attributes that are common to all domain home source types, such as the `image` field, etc. See the Domain Resource [Schema](https://github.com/oracle/weblogic-kubernetes-operator/blob/master/docs/domains/Domain.md) and [Doc]({{< relref \"/userguide/managing-domains/domain-resource.md\" >}}) for a full list of domain resource fields.\n+\n+ - There are also additional fields that are specific to JRF domain types. See [(8) Prerequisites for JRF domain types.](#8-prerequisites-for-jrf-domain-types) below for more information.\n+\n+ - __Sample domain resource__: For an example of a fully specified sample domain resource, see the the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template` file for the [Model in Image sample]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}). Note that the '@@' entries in this template are not processed by the Operator -- they need to replaced with actual values before the resource can be applied. \n+\n+#### (8) Prerequisites for JRF domain types.\n+\n+> __IMPORTANT__: This section only applies for a `JRF` domain type. Skip it if your domain type is simply a `WLS` or a `RestrictedJRF` domain.\n+\n+A JRF domain requires an infrastructure database called an RCU Database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain. When you first deploy your domain, the introspector job will initialize it's RCU schema tables in the database - a process that can take several minutes.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain as discussed in [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}). \n+\n+Assuming you have an RCU database that's running and initialized, here are the specific Model in Image requirements:\n+\n+- Set `configuration.model.domainType` to `JRF`.\n+\n+- Set `configuration.opss.walletPasswordSecret` to reference a secret that defines a `walletPassword` key. This is used to encrypt the domain's OPSS wallet file.", "originalCommit": "4a653acd9b75e15444ff7896b720d52427bd35ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NzQxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396577418", "bodyText": "I updated the section to make it clear all bullets are required, and added wording to some of the bullets.\n@jshum2479  Please check the update, and, if its, good, close the comment.", "author": "tbarnes-us", "createdAt": "2020-03-23T16:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0ODg3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398048872", "bodyText": "Resolving.  Assuming Johnny's OK with it.", "author": "tbarnes-us", "createdAt": "2020-03-25T17:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTg4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395731882", "bodyText": "We should remove the rcu_admin_password attribute. It's not really required for now since we do not support create rcu schema on the fly using WDT.", "author": "jshum2479", "createdAt": "2020-03-20T15:55:51Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -0,0 +1,176 @@\n++++\n+title = \"Usage\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 20\n+pre = \"<b> </b>\"\n+description = \"Steps for creating and deploying Model in Image images and their associated domain resourcess.\"\n++++\n+\n+\n+### Contents\n+\n+   - [(1) WebLogic operator.](#1-weblogic-operator)\n+   - [(2) WebLogic image.](#2-weblogic-image)\n+   - [(3) Optional WDT model config map.](#3-optional-wdt-model-config-map)\n+   - [(4) Optional WDT encryption secret.](#4-optional-wdt-encryption-secret)\n+   - [(5) Required runtime encryption secret.](#5-required-runtime-encryption-secret)\n+   - [(6) Secrets for model macros.](#6-secrets-for-model-macros)\n+   - [(7) Domain resource attributes.](#7-domain-resource-attributes)\n+   - [(8) Prerequisites for JRF domain types.](#8-prerequisites-for-jrf-domain-types)\n+\n+### Requirements\n+\n+Here's what's needed to create and deploy a typical Model in Image domain:\n+\n+#### (1) WebLogic operator.\n+\n+Deploy a WebLogic operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See [Manage operators]({{< relref \"/userguide/managing-operators/_index.md\" >}}) and [Quick Start]({{< relref \"/quickstart/_index.md\" >}}).\n+\n+#### (2) WebLogic image.\n+\n+Model in Image requires creating a 'final' deployable image that has WebLogic Server and WDT installed, plus your model and application files. \n+\n+You can start with a WebLogic 12.2.1.3 or later pre-built base image obtained from [Docker Hub](https://github.com/oracle/docker-images/tree/master/OracleWebLogic) or similar, manually build your own base image as per [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}), or build a base image using the WebLogic Image Tool [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). Note that any 12.2.1.3 image must also include patch 29135930 (the pre-built images already contain this patch). For an example of the first approach for both WLS and JRF domains, see the [Model in Image Sample]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}).\n+\n+Once you have a base image, Model in Image requires layering the following directory structure for its (optional) WDT models artifacts and (required) WDT binaries:\n+\n+| Directory                | Contents                           | Extension   |\n+| ------------------------ | ---------------------------------- | ----------- |\n+| /u01/wdt/models          | optional domain model yaml files   | .yaml       |\n+| /u01/wdt/models          | optional model variable files      | .properties |\n+| /u01/wdt/models          | optional application archives      | .zip        |\n+| /u01/wdt/weblogic-deploy | unzipped weblogic deploy install   |             |\n+\n+There are two methods for layering a Model in Image artifacts on top of a base image:\n+\n+  - __Method 1: Manual Image Creation__: Use docker commands to layer the WDT artifacts from the above table on top of your base image into a new image.\n+\n+  - __Method 2: WebLogic Image Tool__: Use the convenient [WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool). The WebLogic Image Tool (WIT) has built-in options for embedding WDT model files, WDT binaries, WebLogic binaries install, and WebLogic patches in an image. The [Model in Image sample]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) takes the WIT approach, see the sample's `build_image_model.sh` in the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image` directory for an example.\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax.\n+\n+#### (3) Optional WDT model config map.\n+\n+You can create a WDT model config map that defines additional model `.yaml` and `.properties` files beyond what you've already supplied in your image, and then reference this config map using your domain resource's `configuration.model.configMap` attribute. This is optional if the supplied image already fully defines your model. \n+\n+WDT model config map files will be merged with the WDT files defined in your image at runtime before your domain home is created. The config map files can add to, remove from, or alter the model configuration that you supplied within your image.\n+\n+For example, place additional `.yaml` and `.properties` files in a directory called `/home/acmeuser/wdtoverride` and run the following commands:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create configmap MY-DOMAINUID-my-wdt-config-map \\\n+    --from-file /home/acmeuser/wdtoverride\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label  configmap MY-DOMAINUID-my-wdt-config-map \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discussion of model file syntax and loading order, and see [Runtime updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) for a discussion of using WDT model config maps to update the model configuration of a running domain.\n+\n+\n+#### (4) Optional WDT encryption secret.\n+\n+> NOTE: Oracle strongly recommends storing sensitive information using Kubernetes secrets when practical instead of relying on this option. See [(6) Secrets for model macros.](#6-secrets-for-model-macros).\n+\n+The WDT encryption option is an alternative to using secrets for encrypting sensitive information stored in a model. The WDT encryption option requires:\n+ - Using WDT tooling to encrypt your model files prior to putting them in a Model in Image image or a Model in Image WDT config map.\n+ - Supplying a WDT encryption `password` via a Kubernetes secret so that Model in Image can decrypt the model at runtime. The secret can be named anything, but it must contain a key named `password`. Example WDT encryption secret creation:\n+   ```\n+   kubectl -n MY-DOMAIN-NAMESPACE \\\n+     create secret generic MY-DOMAINUID-wdt-encrypt-secret \\\n+     --from-literal=password=welcome1\n+   kubectl -n MY-DOMAIN-NAMESPACE \\\n+     label secret MY-DOMAINUID-wdt-encrypt-secret \\\n+     weblogic.domainUID=MY-DOMAINUID\n+   ```\n+ - Setting the domain resource `config.model.wdtEncryptionSecret` field to the name of the secret.\n+\n+For more information see the [WDT Deploy Tool Encrypt Documentation](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/encrypt.md).\n+\n+#### (5) Required runtime encryption secret.\n+\n+Model in Image requires a runtime encryption secret with a secure `password` key. This secret is used by the Operator to encrypt model and domain home artifacts before it adds them to a runtime config map or log. The `password` that you set can safely change any time after you've fully shutdown a domain but must remain the same for the life of a running domain. The runtime encryption secret that you create can be named anything but note that it is a best practice to name and label secrets with their domain UID to help ensure that cleanup scripts can find and delete them.\n+\n+> NOTE: Because the runtime encryption password does not need to be shared and only needs to exist for the life of a domain, you may want to use a password generator.\n+\n+Example:\n+\n+  ```\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    create secret generic MY-DOMAINUID-runtime-encrypt-secret \\\n+    --from-literal=password=welcome1\n+  kubectl -n MY-DOMAIN-NAMESPACE \\\n+    label secret MY-DOMAINUID-runtime-encrypt-secret \\\n+    weblogic.domainUID=MY-DOMAINUID\n+  ```\n+\n+Corresponding domain resource snippet:\n+\n+  ```\n+  configuration:\n+    model:\n+      runtimeEncryptionSecret: MY-DOMAINUID-runtime-encrypt-secret\n+  ```\n+\n+#### (6) Secrets for model macros.\n+\n+Create additional secrets as needed by macros in your model files. For example, these can store database URLs and credentials that are accessed via `@@FILE` macros in your model that reference the secrets.  See [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) for a discusion of model macros.\n+\n+#### (7) Domain resource attributes.\n+\n+The following domain resource attributes are specific to Model in Image domains.\n+\n+| Domain Resource Attribute                    |  Notes |\n+| -------------------------                    |  ------------------ |\n+| `domainHomeSourceType`                       |  Required. Set to `FromModel` |\n+| `domainHome`                                 |  Must reference an empty or non-existent directory within your image. Do not include the mount the path of any persistent volume. Note that Model in Image recreates the domain home for a WebLogic pod every time the pod restarts.|\n+| `configuration.model.wdtConfigMap`           | Optional. Set if you have stored additional models in a config map as per [(3) Optional WDT model config map.](#3-optional-wdt-model-config-map). |\n+| `configuration.model.secrets`                | Optional. Set this array if your image or config map models contain macros that reference custom Kubernetes secrets. For example, if your macros depend on secrets `my-secret` and `my-other-secret` then set to `[my-secret, my-other-secret]`.|\n+| `configuration.model.RuntimeEncryptionSecret`| Required. All Model in Image domain's must specify a runtime encryption secret. See [(5) Required runtime encryption secret.](#5-required-runtime-encryption-secret). |\n+| `configuration.model.wdtEncryptionSecret`    | Rarely used. Set if your using wdt model encryption as per [(4) Optional WDT encryption secret.](#4-optional-wdt-encryption-secret).|\n+| `configuration.model.domainType`             | Set the type of domain. Valid values are `WLS`, `JRF`, and `RestrictedJRF` where `WLS` is the default. See [WDT Domain Types](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/type_def.md).|\n+\n+Notes:\n+\n+ - There are additional attributes that are common to all domain home source types, such as the `image` field, etc. See the Domain Resource [Schema](https://github.com/oracle/weblogic-kubernetes-operator/blob/master/docs/domains/Domain.md) and [Doc]({{< relref \"/userguide/managing-domains/domain-resource.md\" >}}) for a full list of domain resource fields.\n+\n+ - There are also additional fields that are specific to JRF domain types. See [(8) Prerequisites for JRF domain types.](#8-prerequisites-for-jrf-domain-types) below for more information.\n+\n+ - __Sample domain resource__: For an example of a fully specified sample domain resource, see the the operator source's `kubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template` file for the [Model in Image sample]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}). Note that the '@@' entries in this template are not processed by the Operator -- they need to replaced with actual values before the resource can be applied. \n+\n+#### (8) Prerequisites for JRF domain types.\n+\n+> __IMPORTANT__: This section only applies for a `JRF` domain type. Skip it if your domain type is simply a `WLS` or a `RestrictedJRF` domain.\n+\n+A JRF domain requires an infrastructure database called an RCU Database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain. When you first deploy your domain, the introspector job will initialize it's RCU schema tables in the database - a process that can take several minutes.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain as discussed in [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}). \n+\n+Assuming you have an RCU database that's running and initialized, here are the specific Model in Image requirements:\n+\n+- Set `configuration.model.domainType` to `JRF`.\n+\n+- Set `configuration.opss.walletPasswordSecret` to reference a secret that defines a `walletPassword` key. This is used to encrypt the domain's OPSS wallet file.\n+\n+- Set `configuration.opss.walletFileSecret` to reference a secret that contains your domain's OPSS wallet file in its `walletFile` key. This assumes you have an OPSS wallet file from a previous start of the same domain. It enables a restarted or migrated domain to access its RCU database information. For more information, see [Reusing an RCU database between domain deployments](#reusing-an-rcu-database-between-domain-deployments).\n+\n+- Set `configuration.introspectorJobActiveDeadlineSeconds` introspection job timeout to at least 300. This is needed because domain home creation takes a considerable amount of time the first time a JRF domain is created (due to initializing the domain's RCU database tables), and because Model in Image creates your domain home for you using the introspection job. \n+\n+- Define an `RCUDbInfo` stanza in your model. Access to an RCU database requires defining a `RCUDbInfo` stanza in your model's `domainInfo` stanza with the necessary information for accessing the domain's schema within the database. Usually this information should be supplied via a secret that you deploy and reference in your domain resource's 'configuration.secrets' field. Here's an example `RCUDbInfo` stanza:\n+\n+  ```\n+  domainInfo:\n+      RCUDbInfo:\n+          rcu_prefix: '@@FILE:/weblogic-operator/config-overrides-secrets/sample-domain1-rcu-access/rcu_prefix@@'\n+          rcu_schema_password: '@@FILE:/weblogic-operator/config-overrides-secrets/sample-domain1-rcu-access/rcu_schema_password@@'\n+          rcu_admin_password: '@@FILE:/weblogic-operator/config-overrides-secrets/sample-domain1-rcu-access/rcu_admin_password@@'", "originalCommit": "4a653acd9b75e15444ff7896b720d52427bd35ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NzY4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396577686", "bodyText": "It's gone.", "author": "tbarnes-us", "createdAt": "2020-03-23T16:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTg4Mg=="}], "type": "inlineReview"}, {"oid": "732cd7e018e3169ab65449ffbbcc49fb56d549cc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/732cd7e018e3169ab65449ffbbcc49fb56d549cc", "message": "Fix doc\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-20T22:07:38Z", "type": "commit"}, {"oid": "7b33c660bbf6c903063c94f308a0d5d695613964", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7b33c660bbf6c903063c94f308a0d5d695613964", "message": "Fix doc links\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-20T22:17:28Z", "type": "commit"}, {"oid": "9f3fec42ac32ffcb4e124c7c035a6c036c8f0cec", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9f3fec42ac32ffcb4e124c7c035a6c036c8f0cec", "message": "remove wdt encryption passphrase logic from introspector job scripts since it no longer supported in the schema", "committedDate": "2020-03-20T22:50:18Z", "type": "commit"}, {"oid": "033420a40ef6839eb917300a8a5649cecbe8d0ef", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/033420a40ef6839eb917300a8a5649cecbe8d0ef", "message": "update MII doc to mention wdt encryption isn't supported", "committedDate": "2020-03-20T22:50:47Z", "type": "commit"}, {"oid": "faf27ab7657f36ca0b64d10f2a9f36b8ab8236d9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/faf27ab7657f36ca0b64d10f2a9f36b8ab8236d9", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-20T22:51:01Z", "type": "commit"}, {"oid": "1d1cb525a3b0f433b396bc85e7375c2a9216ad84", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1d1cb525a3b0f433b396bc85e7375c2a9216ad84", "message": "update error message in modelInImage.sh", "committedDate": "2020-03-20T23:15:20Z", "type": "commit"}, {"oid": "f7a1c52c69582021aa843a9dd5fd64090be18f46", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f7a1c52c69582021aa843a9dd5fd64090be18f46", "message": "Enable updateRCUSchemaPassword and add special env variables for macro expansion in modelInImage.sh script", "committedDate": "2020-03-21T00:49:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMTY2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395211668", "bodyText": "What are the values ?", "author": "mriccell", "createdAt": "2020-03-19T17:48:42Z", "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -194,9 +194,9 @@ spec:\n   # The WebLogic Domain Home\n   domainHome: /u01/oracle/user_projects/domains/domain1\n   # If the domain home is in the image\n-  domainHomeInImage: true\n+  domainHomeSourceType: Image", "originalCommit": "c489a66d68e1a760da358ae37797be87bb66b451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4MzUxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396583514", "bodyText": "Valid values are 'Image' 'FromModel' and 'PersistentVolume'.  This is doc Ryan changed as part of the mass change to the new field.  This particular doc is a cut-and-paste of the output from the inputs sample template.  I'll look into updating this template and all occurrences of the phrase \"If the domain home is in image\" right now.", "author": "tbarnes-us", "createdAt": "2020-03-23T16:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMzI5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396603296", "bodyText": "OK. I updated line 196, plus similar template/doc working in:\n+++ b/docs-source/content/samples/simple/domains/domain-home-on-pv/_index.md\n+++ b/docs-source/content/samples/simple/domains/fmw-domain/_index.md\n+++ b/docs-source/content/samples/simple/domains/soa-domain/_index.md\n+++ b/kubernetes/samples/scripts/common/domain-template.yaml\n@mriccell Please close this comment if it looks good to you.", "author": "tbarnes-us", "createdAt": "2020-03-23T16:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMTY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzQwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395213402", "bodyText": "What are the different types?", "author": "mriccell", "createdAt": "2020-03-19T17:51:42Z", "path": "docs-source/content/userguide/managing-domains/_index.md", "diffHunk": "@@ -33,9 +34,9 @@ Please be aware of the following important considerations for WebLogic domains r\n   in the ***Security*** section.\n   {{% /notice %}}\n \n-* _Log File Locations:_ The operator can automatically override WebLogic domain and server log locations using situational\n+* _Log File Locations:_ The operator can automatically override WebLogic domain and server log locations using\n   configuration overrides.  This occurs if the domain resource `logHomeEnabled` field is explicitly set to `true`, or if `logHomeEnabled` isn't set\n-  and `domainHomeInImage` is explicitly set to `false`.   When overriding, the log location will be the location specified by the `logHome` setting.\n+  and `domainHomeSourceType` is set to `PersistentVolume`.  When overriding, the log location will be the location specified by the `logHome` setting.", "originalCommit": "c489a66d68e1a760da358ae37797be87bb66b451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzODU3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396638576", "bodyText": "This doesn't look like a place in the doc we need to mention them.  Re-open this comment if you disagree.", "author": "tbarnes-us", "createdAt": "2020-03-23T17:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTQ2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395949468", "bodyText": "Today only SOA and OSB are supported please fo not mention FA which is not supported nor will it never be supported with our Operator.", "author": "mriccell", "createdAt": "2020-03-21T01:43:02Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTgyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396609820", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-23T17:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTU1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395949556", "bodyText": "JDK8 -> JDK 8", "author": "mriccell", "createdAt": "2020-03-21T01:44:00Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMDM5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396610390", "bodyText": "Done. @rosemarymarano FYI.  Not sure if this came from you or me.", "author": "tbarnes-us", "createdAt": "2020-03-23T17:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTk1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395949953", "bodyText": "When you use WIT create instead of Update the resulting image is of smaller size.  I would make a note that explains this.  Option 2 should point to https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-in-image/base-images/#creating-a-custom-image-with-patches-applied", "author": "mriccell", "createdAt": "2020-03-21T01:48:35Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NTE5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396775198", "bodyText": "Tom AI V1? V2:    Add an option  3: Skip creating a base image and create a final image that contains all required artifacts.  Point to the link Monica references above.  Update the linked chapter to include information about how to include your models in the WIT create command.   Emphasize that this creates a smaller image.", "author": "tbarnes-us", "createdAt": "2020-03-23T21:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MTQwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397491405", "bodyText": "Filed OWLS-80586\nV1? MII DOC/DEV: Provide instructions for creating a smaller image directly without starting from a base image\nto track this.", "author": "tbarnes-us", "createdAt": "2020-03-24T22:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MDQ1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395950454", "bodyText": "Can we add a link to go straight to the ### Use the WebLogic Image Tool to create an image when not creating a JRF domain", "author": "mriccell", "createdAt": "2020-03-21T01:54:55Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MDU1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395950553", "bodyText": "A base image is an image with the WebLogic binaries?  Can we clarify", "author": "mriccell", "createdAt": "2020-03-21T01:56:16Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4MTA4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396781089", "bodyText": "Tom: Add same wording as we use earlier to define what's in the base image.\nAI V2?:  Add wording that lets reader know this isn't the only option for creating a final image - one can skip directly to creating final image...", "author": "tbarnes-us", "createdAt": "2020-03-23T21:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MDU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5ODA2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397498062", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-24T22:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MDU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5ODI2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397498267", "bodyText": "AI is tracked via JIRA.", "author": "tbarnes-us", "createdAt": "2020-03-24T22:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MDU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTI0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395951241", "bodyText": "These instructions are to push the image to a registry in OCI why?  Other samples in domain-home-in-image call the image \"domain-home-in-image:12.2.1.3\" we should call our image a generic name \"domain-model-in-image:12.2.1.4\"", "author": "mriccell", "createdAt": "2020-03-21T02:04:38Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag <image-name>:<tag> <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4MzU1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396783553", "bodyText": "Tom AI: Change \"docker tag : .ocir.io///:\" to \"docker tag model-in-image:v1 my.remote.registry.com/model-in-image:v1\".   Change below as well...\", plus change below accordingly.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NzYwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397497609", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-24T22:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTMyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395951322", "bodyText": "The sample should not be based on OKE it should be based on a generic Kubernetes cluster similar to our other samples", "author": "mriccell", "createdAt": "2020-03-21T02:05:36Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag <image-name>:<tag> <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+2.  Push the image to the remote Docker registry, for example:\n+\n+```\n+docker push <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+3. Create the pull secret for the remote Docker registry:\n+\n+```\n+ kubectl -n <domain namespace> create secret docker-registry <secret name> \\", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4MzY4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396783684", "bodyText": "Tom AI: See above.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NzcxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397497718", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-24T22:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTUxNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395951515", "bodyText": "The sample should not be based on OKE it should be based on a generic Kubernetes cluster similar to our other samples", "author": "mriccell", "createdAt": "2020-03-21T02:08:02Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA, OSB, and FA. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag <image-name>:<tag> <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+2.  Push the image to the remote Docker registry, for example:\n+\n+```\n+docker push <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+3. Create the pull secret for the remote Docker registry:\n+\n+```\n+ kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n+     --docker-server=<region-key>.ocir.io/<tenancy-namespace>/<repo-name> \\\n+     --docker-username=your.email@some.com \\\n+     --docker-password=your-password \\\n+     --docker-email=your.email@some.com\n+\n+```\n+\n+4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+\n+```\n+  imagePullSecrets:\n+  - name: <secret name>\n+\n+```\n+\n+5. Export the environment variables for the image name and tag using the same values in step 1:\n+\n+```", "originalCommit": "81623b1d513bbbfa1f2ca588a8d757daf2e38202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4Mzg4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396783888", "bodyText": "Tom AI: See above.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5ODQzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397498430", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-24T22:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTg5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395951899", "bodyText": "Instructions should be based on pulling the image from the oracle container registry and not the Docker Store", "author": "mriccell", "createdAt": "2020-03-21T02:13:03Z", "path": "docs-source/content/samples/simple/domains/fmw-domain/_index.md", "diffHunk": "@@ -115,7 +115,7 @@ The following parameters can be provided in the inputs file.\n | `domainUID` | Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. | `domain1` |\n | `exposeAdminNodePort` | Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. | `false` |\n | `exposeAdminT3Channel` | Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. | `false` |\n-| `image` | WebLogic Docker image. The operator requires FMW Infrastructure 12.2.1.3.0 with patch 29135930 applied. Refer to [FMW Infrastructure domains]({{< relref \"/userguide/managing-fmw-domains/fmw-infra/_index.md#obtaining-the-fmw-infrastructure-docker-image\" >}}) for details on how to obtain or create the image. | `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3` |\n+| `image` | WebLogic Docker image. The operator requires FMW Infrastructure 12.2.1.3.0 with patch 29135930 applied or FMW Infrastructure 12.2.1.4.0. Refer to [FMW Infrastructure domains]({{< relref \"/userguide/managing-fmw-domains/fmw-infra/_index.md#obtaining-the-fmw-infrastructure-docker-image\" >}}) for details on how to obtain or create the image. | `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3` |\n | `imagePullPolicy` | WebLogic Docker image pull policy. Legal values are `IfNotPresent`, `Always`, or `Never` | `IfNotPresent` |\n | `imagePullSecretName` | Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified. |  |", "originalCommit": "f7a1c52c69582021aa843a9dd5fd64090be18f46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNzI2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396607263", "bodyText": "@mriccell Can you make the modification directly yourself? This is old doc that's unrelated to MII and I'm not exactly sure what should go here.", "author": "tbarnes-us", "createdAt": "2020-03-23T17:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTk1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395951952", "bodyText": "Change 12.2.1.3 to 12.2.1.4", "author": "mriccell", "createdAt": "2020-03-21T02:13:43Z", "path": "docs-source/content/samples/simple/domains/fmw-domain/_index.md", "diffHunk": "@@ -20,7 +20,7 @@ Before you begin, read this document, [Domain resource]({{< relref \"/userguide/m\n The following prerequisites must be handled prior to running the create domain script:\n \n * Make sure the WebLogic Kubernetes Operator is running.\n-* The operator requires FMW Infrastructure 12.2.1.3.0 with patch 29135930 applied. For details on how to obtain or create the image, refer to [FMW Infrastructure domains]({{< relref \"/userguide/managing-domains/fmw-infra/_index.md#obtaining-the-fmw-infrastructure-docker-image\" >}}).\n+* The operator requires FMW Infrastructure 12.2.1.3.0 with patch 29135930 applied or FMW Infrastructure 12.2.1.4.0. For details on how to obtain or create the image, refer to [FMW Infrastructure domains]({{< relref \"/userguide/managing-domains/fmw-infra/_index.md#obtaining-the-fmw-infrastructure-docker-image\" >}}).", "originalCommit": "f7a1c52c69582021aa843a9dd5fd64090be18f46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNDA1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396604055", "bodyText": "It's already there.", "author": "tbarnes-us", "createdAt": "2020-03-23T16:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTk1Mg=="}], "type": "inlineReview"}, {"oid": "7f767a29ea18e90d32a4567d95a4544ab90a85b5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7f767a29ea18e90d32a4567d95a4544ab90a85b5", "message": "Add @@SECRET and @@ENV support to MII sample/doc.", "committedDate": "2020-03-22T02:50:45Z", "type": "commit"}, {"oid": "e61ac20f625272af1a6d44dbd593b1ba2ac932e9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e61ac20f625272af1a6d44dbd593b1ba2ac932e9", "message": "Add utility methods for model in image tests (#1481)\n\n* adding mii utility methods\r\n\r\n* adding mii utility methods\r\n\r\n* adding wdtDomainType and use of properties for weblogic base image", "committedDate": "2020-03-22T23:44:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzU4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396207583", "bodyText": "This is a strange way of using WDT discover, why would you need to discover a domain running in the pod?  Most users will version control their models and domain.yamls.  To make updates to a running domain you can use a WDT sparse model as the following sample shows.\nIf the intent of this sample is to compare old and new models or recover a lost model then that is what the description should say.", "author": "mriccell", "createdAt": "2020-03-23T04:27:07Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/runtime-updates.md", "diffHunk": "@@ -0,0 +1,325 @@\n++++\n+title = \"Runtime updates\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 50\n+pre = \"<b> </b>\"\n+description = \"Updating a running Model in Image domain's images and model files.\"\n++++\n+\n+#### Contents\n+\n+ - [Overview](#overview)\n+ - [Important notes](#important-notes)\n+ - [Frequently asked questions](#frequently-asked-questions)\n+ - [Supported and unsupported updates](#supported-and-unsupported-updates)\n+ - [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion)\n+ - [Using the WDT Discover Domain Tool](#using-the-wdt-discover-domain-tool)\n+ - [Example of adding a data source](#example-of-adding-a-data-source)\n+\n+#### Overview\n+\n+If you want to make a WebLogic domain home configuration change to a running Model in Image domain, and you want the change to survive WebLogic pod restarts, then you can modify your existing model by one or more the following approaches:\n+\n+  - Changing secrets or environment variables that are referenced by macros in your model files.\n+\n+  - Specifying a new or updated WDT config map that contains model files and use your domain resource `configuration.model.configMap` field to reference the map.\n+\n+  - Supplying a new image with new and/or changed model files.\n+\n+After changes are in place, you can tell the operator to load the changes and propagate them to a running domain by altering the domain resource's `image` or `restartVersion` attribute.\n+\n+#### Important notes\n+\n+ - Check for [Supported and unsupported updates](#supported-and-unsupported-updates).\n+\n+ - If you specify multiple model files in your image or WDT config map, the order in which they're loaded and merged is determined as described in [Model file naming and loading order]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md#model-file-naming-and-loading-order\" >}}).\n+\n+ - You can use the WDT Discover Domain Tool to help generate your model file updates. See [Using the WDT Discover Domain Tool](#using-the-wdt-discover-tool).\n+\n+ - For simple ways to change `restartVersion`, see [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion).\n+\n+ - For a sample of adding a data source to a running domain, see [Example of adding a data source](#example-of-adding-a-data-source).\n+\n+ - For a discussion of model file syntax, see the [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) documentation and [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+ - If the introspector job reports a failure, see [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) for debugging advice.\n+\n+#### Frequently asked questions\n+\n+_Why is it necessary to specify updates using model files?_\n+\n+Similar to Domain in Image, if you make a direct runtime WebLogic configuration update of a Model in Image domain using the WebLogic console or WLST scripts, then the update is ephemeral. This is because the domain home is stored in an image directory which will not survive the restart of the owning pod.\n+\n+_How do Model in Image updates work during runtime?_\n+\n+After you make a change to your domain resource `restartVersion` or `image` attribute, the operator will rerun the domain's introspector job. This job will reload all of your secrets and environment variables, merge all of your model files, and generate a new domain home. If the job succeeds, then the operator will make the updated domain home available to pods using a config map named `DOMAIN_UID-weblogic-domain-introspect-cm`. Finally, the operator will subsequently roll (restart) each running WebLogic Server pod in the domain so that it can load the new configuration. A domain roll begins by restarting the domain's Administration Server and then proceeds to restart each Manager Server in the domain.\n+\n+_Can we use custom configuration overrides to do the updates instead?_\n+\n+No. Custom configuration overrides, which are WebLogic configuration overrides specified using a domain resource `configuration.overridesConfigMap`, as described in [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}), aren't supported in combination with Model in Image. Model in Image will generate an error if custom overrides are specified. This should not be a concern because model file, secret, and/or model image updates are simpler and more flexible than custom configuration override updates. Unlike configuration overrides, the syntax for a model file update exactly matches the syntax for specifying your model file in the first place.\n+\n+\n+#### Supported and unsupported updates\n+\n+ - You can add new MBeans or resources simply by specifying their corresponding model file YAML snippet along with their parent bean hierarchy. See [Example of adding a data source](#example-of-adding-a-datasource).\n+\n+ - You can recreate, change, or add secrets that your model depends on. For example, you can change a database password secret.\n+\n+ - You can change or add environment variables that your model macros may depend on (macros that use the `@@ENV:myenvvar@@` syntax).\n+\n+ - You can remove a named MBean or resource by specifying a model file with a `!` symbol just before the bean or resource name. For example, if you have a data source named `mynewdatasource` defined in your model, it can be removed by specifying a small model file that loads after the model file that defines the data source, where the small model file looks like this:\n+\n+  ```\n+  resources:\n+    JDBCSystemResource:\n+      !mynewdatasource:\n+  ```\n+\n+  For more information, see [Declaring Named MBeans to Delete](https://github.com/oracle/weblogic-deploy-tooling#declaring-named-mbeans-to-delete) in the WebLogic Deploying Tooling documentation.\n+\n+ - You can add or alter an MBean attribute by specifying a YAML snippet along with its parent bean hierarchy that references an existing MBean and the attribute. For example, to add or alter the max capacity of a data source named `mynewdatasource`:\n+\n+  ```\n+  resources:\n+    JDBCSystemResource:\n+      mynewdatasource:\n+        JdbcResource:\n+          JDBCConnectionPoolParams:\n+            MaxCapacity: 5\n+  ```\n+\n+  For more information, see [Using Multiple Models](https://github.com/oracle/weblogic-deploy-tooling#using-multiple-models) in the WebLogic Deploy Tooling documentation.\n+\n+ - There is no way to directly delete an attribute from an MBean that's already been specified by a model file. The work-around is to do this using two model files: (a) add a model file that deletes the named bean/resource that is a parent to the attribute you want to delete, and (b) add another  subsequent model file that fully defines the named bean/resource but without the attribute you want to delete.\n+\n+ - The following runtime updates haven't been tested and are _not_ supported in the first release of Model in Image. If you need to make these kinds of updates, consider shutting down your domain entirely before making the change:\n+   - Adding, removing, or altering the network configuration of an existing Managed Server. This includes, but isn't limited to network channels, ports, and cluster addresses.\n+   - Adding a Managed Server to an existing configured cluster.\n+   - Altering the `cluster-size` or `max-cluster-size` of an existing dynamic cluster.\n+   - TBD This needs some research. Check with QA, etc.\n+\n+#### Changing a domain resource 'restartVersion'\n+\n+As was mentioned in the [overview](#overview), one way to tell the operator to apply your configuration changes to a running domain is by altering the domain resource `restartVersion`. Here are some common ways to do this:\n+\n+ - You can alter `restartVersion` interactively using `kubectl edit -n MY_NAMESPACE domain MY_DOMAINUID`.\n+\n+ - If you have your domain's resource file, then you can alter this file and call `kubectl apply -f` on the file.\n+\n+ - You can use the Kubernetes `get` and `patch` commands. Here's a sample automation script:\n+\n+   ```\n+   #!/bin/bash\n+   NAMESPACE=${1:-sample-domain1-ns}\n+   DOMAINUID=${2:-sample-domain1}\n+   currentRV=$(kubectl -n ${NAMESPACE} get domain ${DOMAINUID} -o=jsonpath='{.spec.restartVersion}')\n+   if [ $? = 0 ]; then\n+     # we enter here only if the previous command succeeded\n+\n+     nextRV=$((currentRV + 1))\n+\n+     echo \"@@ Info: Rolling domain '${DOMAINUID}' in namespace '${NAMESPACE}' from restartVersion='${currentRV}' to restartVersion='${nextRV}'.\"\n+\n+     kubectl -n ${NAMESPACE} patch domain ${DOMAINUID} --type='json' \\\n+       -p='[{\"op\": \"replace\", \"path\": \"/spec/restartVersion\", \"value\": \"'${nextRV}'\" }]'\n+   fi\n+   ```\n+\n+#### Using the WDT Discover Domain Tool", "originalCommit": "f7a1c52c69582021aa843a9dd5fd64090be18f46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwODA0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396708043", "bodyText": "Okay, now I understand your earlier comment, @mriccell.  I thought the use of WDT discover was going to be to help generate the initial domain yaml.", "author": "rjeberhard", "createdAt": "2020-03-23T19:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMjIxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396802218", "bodyText": "Tom AI:  Put bash/ephemeral part into P4 for internal use only.   Only talk about domain-home without saying where it is.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzMzI3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397533274", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-25T00:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzU4Mw=="}], "type": "inlineReview"}, {"oid": "486fe1fd4d891b187606d5fb3b5bc10a735091fc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/486fe1fd4d891b187606d5fb3b5bc10a735091fc", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-23T12:14:07Z", "type": "commit"}, {"oid": "9e90fa01b816193532fbe25d54d75378892afa22", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9e90fa01b816193532fbe25d54d75378892afa22", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-23T13:30:58Z", "type": "commit"}, {"oid": "c2394548fa2ecd3ba6fb497f5f838a7296df1df5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c2394548fa2ecd3ba6fb497f5f838a7296df1df5", "message": "minor doc update", "committedDate": "2020-03-23T16:16:37Z", "type": "commit"}, {"oid": "3abf4b6ce7ae5a15cbdee9926c6644032c75f1af", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3abf4b6ce7ae5a15cbdee9926c6644032c75f1af", "message": "doc update", "committedDate": "2020-03-23T16:52:43Z", "type": "commit"}, {"oid": "9f15c10d5bf9e631d8abcd9f1689d8d70476bae4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9f15c10d5bf9e631d8abcd9f1689d8d70476bae4", "message": "doc update", "committedDate": "2020-03-23T16:58:10Z", "type": "commit"}, {"oid": "c37dd7d18852b339cdff65934d21ae883540b925", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c37dd7d18852b339cdff65934d21ae883540b925", "message": "doc update", "committedDate": "2020-03-23T17:05:10Z", "type": "commit"}, {"oid": "24abe59d2fab3b421b07fe3bd38181514ec2b12c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/24abe59d2fab3b421b07fe3bd38181514ec2b12c", "message": "doc update", "committedDate": "2020-03-23T17:31:42Z", "type": "commit"}, {"oid": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3f46823be21e32c4b54a101d5590aeb40dbcdb15", "message": "doc update", "committedDate": "2020-03-23T17:41:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2OTI2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396669260", "bodyText": "\"WebLogic domain that's defined using a WDT model file\"... this is confusing because it specifically doesn't include a WebLogic domain.  Let's say instead, \"and the model for a WebLogic domain configuration defined using a WDT model file.\"", "author": "rjeberhard", "createdAt": "2020-03-23T18:30:17Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MzcxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396763710", "bodyText": "will do", "author": "tbarnes-us", "createdAt": "2020-03-23T21:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2OTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzIwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397223200", "bodyText": "Done.", "author": "rosemarymarano", "createdAt": "2020-03-24T15:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2OTI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MDUyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396670528", "bodyText": "extra space \"be  used\"", "author": "rjeberhard", "createdAt": "2020-03-23T18:32:29Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyNjUyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397226527", "bodyText": "Fixed for the eagle eye, Ryan.", "author": "rosemarymarano", "createdAt": "2020-03-24T15:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMTIyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397231226", "bodyText": "Social distancing is only for us humans, sadly.", "author": "rjeberhard", "createdAt": "2020-03-24T15:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MDUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MTM4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396671382", "bodyText": "Curious why it needs to be JDK 8?  We should be able to target JDK 8 even with JDK 11.  Also, WebLogic 14.1.1 is coming....", "author": "rjeberhard", "createdAt": "2020-03-23T18:33:47Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjExNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396672116", "bodyText": "That's a question for Johnny. @jshum2479 Johnny?", "author": "tbarnes-us", "createdAt": "2020-03-23T18:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MTM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NTQwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396765404", "bodyText": "Ryan tried 11 and got errors.  Monica tried and it was fine.  Tom AI: File a follow on JIRA for V2.", "author": "tbarnes-us", "createdAt": "2020-03-23T21:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MTM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjg2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397422864", "bodyText": "We're leaving this alone for now.  I filed V2 JIRA https://jira.****/jira/browse/OWLS-80583 to track.", "author": "tbarnes-us", "createdAt": "2020-03-24T19:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MTM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjA1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396672055", "bodyText": "This ought to default", "author": "rjeberhard", "createdAt": "2020-03-23T18:34:53Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NjkzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396766936", "bodyText": "Ryan and I discussed:  Keep this 'as is' as it's needed to make the sample self documenting, but AI Tom - make sure MII sample scripts themselves default SRCDIR if possible (they're all already calculating 'SCRIPTDIR' in internally).", "author": "tbarnes-us", "createdAt": "2020-03-23T21:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMzkwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397423906", "bodyText": "It turns out the sample scripts don't use SRCDIR internally.  So nothing to see here. Moving on.", "author": "tbarnes-us", "createdAt": "2020-03-24T19:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjM3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396672372", "bodyText": "Does this default? ;)", "author": "rjeberhard", "createdAt": "2020-03-23T18:35:23Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzkxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396767911", "bodyText": "Tom: Add comment \"We will refer to the SAMPLEDIR directory later in this document.\"", "author": "tbarnes-us", "createdAt": "2020-03-23T21:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNTY3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397425674", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-24T20:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjkyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396672923", "bodyText": "Any reason it won't work?  I believe QA has tested adding cluster.  The thing I don't see here is some of these changes may require changing the domain resource yaml.   The primordial domain only has admin server and each update including the first deployment, then the python will do the scan and pass back control to operator.  So, if a new cluster is added, then the domain resource need to have a new element for it.", "author": "jshum2479", "createdAt": "2020-03-23T18:36:21Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/runtime-updates.md", "diffHunk": "@@ -0,0 +1,325 @@\n++++\n+title = \"Runtime updates\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 50\n+pre = \"<b> </b>\"\n+description = \"Updating a running Model in Image domain's images and model files.\"\n++++\n+\n+#### Contents\n+\n+ - [Overview](#overview)\n+ - [Important notes](#important-notes)\n+ - [Frequently asked questions](#frequently-asked-questions)\n+ - [Supported and unsupported updates](#supported-and-unsupported-updates)\n+ - [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion)\n+ - [Using the WDT Discover Domain Tool](#using-the-wdt-discover-domain-tool)\n+ - [Example of adding a data source](#example-of-adding-a-data-source)\n+\n+#### Overview\n+\n+If you want to make a WebLogic domain home configuration change to a running Model in Image domain, and you want the change to survive WebLogic pod restarts, then you can modify your existing model by one or more the following approaches:\n+\n+  - Changing secrets or environment variables that are referenced by macros in your model files.\n+\n+  - Specifying a new or updated WDT config map that contains model files and use your domain resource `configuration.model.configMap` field to reference the map.\n+\n+  - Supplying a new image with new and/or changed model files.\n+\n+After changes are in place, you can tell the operator to load the changes and propagate them to a running domain by altering the domain resource's `image` or `restartVersion` attribute.\n+\n+#### Important notes\n+\n+ - Check for [Supported and unsupported updates](#supported-and-unsupported-updates).\n+\n+ - If you specify multiple model files in your image or WDT config map, the order in which they're loaded and merged is determined as described in [Model file naming and loading order]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md#model-file-naming-and-loading-order\" >}}).\n+\n+ - You can use the WDT Discover Domain Tool to help generate your model file updates. See [Using the WDT Discover Domain Tool](#using-the-wdt-discover-tool).\n+\n+ - For simple ways to change `restartVersion`, see [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion).\n+\n+ - For a sample of adding a data source to a running domain, see [Example of adding a data source](#example-of-adding-a-data-source).\n+\n+ - For a discussion of model file syntax, see the [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) documentation and [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+ - If the introspector job reports a failure, see [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) for debugging advice.\n+\n+#### Frequently asked questions\n+\n+_Why is it necessary to specify updates using model files?_\n+\n+Similar to Domain in Image, if you make a direct runtime WebLogic configuration update of a Model in Image domain using the WebLogic console or WLST scripts, then the update is ephemeral. This is because the domain home is stored in an image directory which will not survive the restart of the owning pod.\n+\n+_How do Model in Image updates work during runtime?_\n+\n+After you make a change to your domain resource `restartVersion` or `image` attribute, the operator will rerun the domain's introspector job. This job will reload all of your secrets and environment variables, merge all of your model files, and generate a new domain home. If the job succeeds, then the operator will make the updated domain home available to pods using a config map named `DOMAIN_UID-weblogic-domain-introspect-cm`. Finally, the operator will subsequently roll (restart) each running WebLogic Server pod in the domain so that it can load the new configuration. A domain roll begins by restarting the domain's Administration Server and then proceeds to restart each Manager Server in the domain.\n+\n+_Can we use custom configuration overrides to do the updates instead?_\n+\n+No. Custom configuration overrides, which are WebLogic configuration overrides specified using a domain resource `configuration.overridesConfigMap`, as described in [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}), aren't supported in combination with Model in Image. Model in Image will generate an error if custom overrides are specified. This should not be a concern because model file, secret, and/or model image updates are simpler and more flexible than custom configuration override updates. Unlike configuration overrides, the syntax for a model file update exactly matches the syntax for specifying your model file in the first place.\n+\n+\n+#### Supported and unsupported updates\n+\n+ - You can add new MBeans or resources simply by specifying their corresponding model file YAML snippet along with their parent bean hierarchy. See [Example of adding a data source](#example-of-adding-a-datasource).\n+\n+ - You can recreate, change, or add secrets that your model depends on. For example, you can change a database password secret.\n+\n+ - You can change or add environment variables that your model macros may depend on (macros that use the `@@ENV:myenvvar@@` syntax).\n+\n+ - You can remove a named MBean or resource by specifying a model file with a `!` symbol just before the bean or resource name. For example, if you have a data source named `mynewdatasource` defined in your model, it can be removed by specifying a small model file that loads after the model file that defines the data source, where the small model file looks like this:\n+\n+  ```\n+  resources:\n+    JDBCSystemResource:\n+      !mynewdatasource:\n+  ```\n+\n+  For more information, see [Declaring Named MBeans to Delete](https://github.com/oracle/weblogic-deploy-tooling#declaring-named-mbeans-to-delete) in the WebLogic Deploying Tooling documentation.\n+\n+ - You can add or alter an MBean attribute by specifying a YAML snippet along with its parent bean hierarchy that references an existing MBean and the attribute. For example, to add or alter the max capacity of a data source named `mynewdatasource`:\n+\n+  ```\n+  resources:\n+    JDBCSystemResource:\n+      mynewdatasource:\n+        JdbcResource:\n+          JDBCConnectionPoolParams:\n+            MaxCapacity: 5\n+  ```\n+\n+  For more information, see [Using Multiple Models](https://github.com/oracle/weblogic-deploy-tooling#using-multiple-models) in the WebLogic Deploy Tooling documentation.\n+\n+ - There is no way to directly delete an attribute from an MBean that's already been specified by a model file. The work-around is to do this using two model files: (a) add a model file that deletes the named bean/resource that is a parent to the attribute you want to delete, and (b) add another  subsequent model file that fully defines the named bean/resource but without the attribute you want to delete.\n+\n+ - The following runtime updates haven't been tested and are _not_ supported in the first release of Model in Image. If you need to make these kinds of updates, consider shutting down your domain entirely before making the change:\n+   - Adding, removing, or altering the network configuration of an existing Managed Server. This includes, but isn't limited to network channels, ports, and cluster addresses.\n+   - Adding a Managed Server to an existing configured cluster.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNDUwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396704505", "bodyText": "I'm okay with saying that something is not supported to limit our testing requirement :)", "author": "rjeberhard", "createdAt": "2020-03-23T19:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNzcyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397527722", "bodyText": "As far as I know, none of this is getting tested.  That's a V2 plan.", "author": "tbarnes-us", "createdAt": "2020-03-24T23:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzMDIwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397530201", "bodyText": "Closing.  Started internal slack discussion at thread https://proddev-paas-fmw.slack.com/archives/CKFA73SNM/p1585093723144200", "author": "tbarnes-us", "createdAt": "2020-03-24T23:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MjkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MzQ5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396673497", "bodyText": "Broken record... I've found setting up these values to feel unnecessary.  I really like that I can set them.", "author": "rjeberhard", "createdAt": "2020-03-23T18:37:09Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2OTE0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396769148", "bodyText": "Tom:   V1? or V2: Make make this to something nice in /tmp - maybe /tmp/model-in-image-sample/$USER/...   Print out the location of WORKDIR in all scripts that use it.", "author": "tbarnes-us", "createdAt": "2020-03-23T21:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MzQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4Mjc2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397482765", "bodyText": "Done.  Default is now /tmp/$USER/model-in-image-sample-work-dir", "author": "tbarnes-us", "createdAt": "2020-03-24T21:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MzQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMjIxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398032217", "bodyText": "10g should probably be 10 GB @rosemarymarano ?", "author": "markxnelson", "createdAt": "2020-03-25T17:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MzQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MzcyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396673720", "bodyText": "Do we want to spell out deploying new application/archives use case (technically a mbean)?", "author": "jshum2479", "createdAt": "2020-03-23T18:37:32Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/runtime-updates.md", "diffHunk": "@@ -0,0 +1,325 @@\n++++\n+title = \"Runtime updates\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 50\n+pre = \"<b> </b>\"\n+description = \"Updating a running Model in Image domain's images and model files.\"\n++++\n+\n+#### Contents\n+\n+ - [Overview](#overview)\n+ - [Important notes](#important-notes)\n+ - [Frequently asked questions](#frequently-asked-questions)\n+ - [Supported and unsupported updates](#supported-and-unsupported-updates)\n+ - [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion)\n+ - [Using the WDT Discover Domain Tool](#using-the-wdt-discover-domain-tool)\n+ - [Example of adding a data source](#example-of-adding-a-data-source)\n+\n+#### Overview\n+\n+If you want to make a WebLogic domain home configuration change to a running Model in Image domain, and you want the change to survive WebLogic pod restarts, then you can modify your existing model by one or more the following approaches:\n+\n+  - Changing secrets or environment variables that are referenced by macros in your model files.\n+\n+  - Specifying a new or updated WDT config map that contains model files and use your domain resource `configuration.model.configMap` field to reference the map.\n+\n+  - Supplying a new image with new and/or changed model files.\n+\n+After changes are in place, you can tell the operator to load the changes and propagate them to a running domain by altering the domain resource's `image` or `restartVersion` attribute.\n+\n+#### Important notes\n+\n+ - Check for [Supported and unsupported updates](#supported-and-unsupported-updates).\n+\n+ - If you specify multiple model files in your image or WDT config map, the order in which they're loaded and merged is determined as described in [Model file naming and loading order]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md#model-file-naming-and-loading-order\" >}}).\n+\n+ - You can use the WDT Discover Domain Tool to help generate your model file updates. See [Using the WDT Discover Domain Tool](#using-the-wdt-discover-tool).\n+\n+ - For simple ways to change `restartVersion`, see [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion).\n+\n+ - For a sample of adding a data source to a running domain, see [Example of adding a data source](#example-of-adding-a-data-source).\n+\n+ - For a discussion of model file syntax, see the [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) documentation and [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+ - If the introspector job reports a failure, see [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) for debugging advice.\n+\n+#### Frequently asked questions\n+\n+_Why is it necessary to specify updates using model files?_\n+\n+Similar to Domain in Image, if you make a direct runtime WebLogic configuration update of a Model in Image domain using the WebLogic console or WLST scripts, then the update is ephemeral. This is because the domain home is stored in an image directory which will not survive the restart of the owning pod.\n+\n+_How do Model in Image updates work during runtime?_\n+\n+After you make a change to your domain resource `restartVersion` or `image` attribute, the operator will rerun the domain's introspector job. This job will reload all of your secrets and environment variables, merge all of your model files, and generate a new domain home. If the job succeeds, then the operator will make the updated domain home available to pods using a config map named `DOMAIN_UID-weblogic-domain-introspect-cm`. Finally, the operator will subsequently roll (restart) each running WebLogic Server pod in the domain so that it can load the new configuration. A domain roll begins by restarting the domain's Administration Server and then proceeds to restart each Manager Server in the domain.\n+\n+_Can we use custom configuration overrides to do the updates instead?_\n+\n+No. Custom configuration overrides, which are WebLogic configuration overrides specified using a domain resource `configuration.overridesConfigMap`, as described in [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}), aren't supported in combination with Model in Image. Model in Image will generate an error if custom overrides are specified. This should not be a concern because model file, secret, and/or model image updates are simpler and more flexible than custom configuration override updates. Unlike configuration overrides, the syntax for a model file update exactly matches the syntax for specifying your model file in the first place.\n+\n+\n+#### Supported and unsupported updates\n+\n+ - You can add new MBeans or resources simply by specifying their corresponding model file YAML snippet along with their parent bean hierarchy. See [Example of adding a data source](#example-of-adding-a-datasource).", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNzIyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397527226", "bodyText": "@jshum2479 No, we don't.  We just implicitly that you can deploy a new image, which implicitly includes the applications with the image.\nWhat specifically do you think we should state here?", "author": "tbarnes-us", "createdAt": "2020-03-24T23:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MzcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4NzcwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402387700", "bodyText": "I am thinking about stating clearly the application archives (hence app/shared libs etc) needs to be on the image, other mbeans resources can be on the configmap only, but if you think it's clear enough then we can close this.", "author": "jshum2479", "createdAt": "2020-04-02T15:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3MzcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NDQ5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396674495", "bodyText": "Does it have to be sample-domain1-ns?  It's hard to balance usefulness vs. sample code, but the hard-coded values ought to be configurable.", "author": "rjeberhard", "createdAt": "2020-03-23T18:38:49Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzU1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396677552", "bodyText": "That's what all of the other samples all use.  Simpler overall for the reader just to go with the flow.", "author": "tbarnes-us", "createdAt": "2020-03-23T18:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NDQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3Njk0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396676941", "bodyText": "\"Oracle Database Docker images\".... capitalize Database.", "author": "rjeberhard", "createdAt": "2020-03-23T18:43:05Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3ODA5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396678096", "bodyText": "Yes, I missed that.", "author": "rosemarymarano", "createdAt": "2020-03-23T18:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3Njk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4MDExMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396780110", "bodyText": "Ok.", "author": "tbarnes-us", "createdAt": "2020-03-23T21:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3Njk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyNzY0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397227641", "bodyText": "Fixed.", "author": "rosemarymarano", "createdAt": "2020-03-24T15:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3Njk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MjA1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396682058", "bodyText": "The use of ctrl-c is odd, but I'll try and comment on this in the sample scripts.", "author": "rjeberhard", "createdAt": "2020-03-23T18:51:54Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag <image-name>:<tag> <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+2.  Push the image to the remote Docker registry, for example:\n+\n+```\n+docker push <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+3. Create the pull secret for the remote Docker registry:\n+\n+```\n+ kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n+     --docker-server=<region-key>.ocir.io/<tenancy-namespace>/<repo-name> \\\n+     --docker-username=your.email@some.com \\\n+     --docker-password=your-password \\\n+     --docker-email=your.email@some.com\n+\n+```\n+\n+4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+\n+```\n+  imagePullSecrets:\n+  - name: <secret name>\n+\n+```\n+\n+5. Export the environment variables for the image name and tag using the same values in step 1:\n+\n+```\n+export MODEL_IMAGE_NAME=\"<region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>\"\n+export MODEL_IMAGE_TAG=\"<tag>\"\n+```\n+\n+### Create and deploy your Kubernetes resources\n+\n+To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+\n+  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n+  - Creates a secret containing your WebLogic administrator user name and password.\n+  - Creates a secret containing your Model in Image runtime encryption password:\n+    - All model-in-image domains must supply a runtime encryption secret with a `password` value.\n+    - It is used to encrypt configuration that is passed around internally by the Operator.\n+    - The value must be kept private but can be arbitrary: you can optionally supply a different secret value every time you restart the domain.\n+  - Creates secrets containing your RCU access URL, credentials, and prefix (these are unused unless the domain type is `JRF`).\n+  - Creates a config map containing an additional WDT model properties file, `$SAMPLEDIR/model1.20.properties`.\n+  - Generates a domain resource YAML file, `$WORKDIR/k8s-domain.yaml`, using `$SAMPLEDIR/k8s-domain.yaml.template`.\n+  - Deploys `k8s-domain.yaml`.\n+  - Displays the status of the domain pods.\n+\n+The script expects `WDT_DOMAIN_TYPE` and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/run_domain.sh\n+  ```\n+\n+At the end, you will see the message `Getting pod status - ctrl-c when all is running and ready to exit`. Then you should see a WebLogic Administration Server and two Managed Server pods start. After all the pods are up, you can use `ctrl-c` to exit the build script.\n+", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4NDgxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396784812", "bodyText": "Tom AI: Change sample to not actually run the command, but instead just print an info \"Run this command to see your pods startup.\"  Add a reference to the debugging section here.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MjA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4NTA3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396785075", "bodyText": "Tom AI: Also put the command right here in the documentation, along with a sample of what the output would look like.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MjA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNzY3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397517670", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-24T23:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MjA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MjQ3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396682472", "bodyText": "We're not going to support Helm 2.x with operator 3.0.0.", "author": "rjeberhard", "createdAt": "2020-03-23T18:52:37Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag <image-name>:<tag> <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+2.  Push the image to the remote Docker registry, for example:\n+\n+```\n+docker push <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+3. Create the pull secret for the remote Docker registry:\n+\n+```\n+ kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n+     --docker-server=<region-key>.ocir.io/<tenancy-namespace>/<repo-name> \\\n+     --docker-username=your.email@some.com \\\n+     --docker-password=your-password \\\n+     --docker-email=your.email@some.com\n+\n+```\n+\n+4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+\n+```\n+  imagePullSecrets:\n+  - name: <secret name>\n+\n+```\n+\n+5. Export the environment variables for the image name and tag using the same values in step 1:\n+\n+```\n+export MODEL_IMAGE_NAME=\"<region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>\"\n+export MODEL_IMAGE_TAG=\"<tag>\"\n+```\n+\n+### Create and deploy your Kubernetes resources\n+\n+To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+\n+  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n+  - Creates a secret containing your WebLogic administrator user name and password.\n+  - Creates a secret containing your Model in Image runtime encryption password:\n+    - All model-in-image domains must supply a runtime encryption secret with a `password` value.\n+    - It is used to encrypt configuration that is passed around internally by the Operator.\n+    - The value must be kept private but can be arbitrary: you can optionally supply a different secret value every time you restart the domain.\n+  - Creates secrets containing your RCU access URL, credentials, and prefix (these are unused unless the domain type is `JRF`).\n+  - Creates a config map containing an additional WDT model properties file, `$SAMPLEDIR/model1.20.properties`.\n+  - Generates a domain resource YAML file, `$WORKDIR/k8s-domain.yaml`, using `$SAMPLEDIR/k8s-domain.yaml.template`.\n+  - Deploys `k8s-domain.yaml`.\n+  - Displays the status of the domain pods.\n+\n+The script expects `WDT_DOMAIN_TYPE` and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/run_domain.sh\n+  ```\n+\n+At the end, you will see the message `Getting pod status - ctrl-c when all is running and ready to exit`. Then you should see a WebLogic Administration Server and two Managed Server pods start. After all the pods are up, you can use `ctrl-c` to exit the build script.\n+\n+\n+### Optionally test the sample application\n+\n+1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+\n+2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+\n+   For Helm 2.x:", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4NTQyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396785425", "bodyText": "Tom AI: Ok.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODc3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397518778", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-24T23:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MjQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDI1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396684251", "bodyText": "browser", "author": "rjeberhard", "createdAt": "2020-03-23T18:55:34Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag <image-name>:<tag> <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+2.  Push the image to the remote Docker registry, for example:\n+\n+```\n+docker push <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+3. Create the pull secret for the remote Docker registry:\n+\n+```\n+ kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n+     --docker-server=<region-key>.ocir.io/<tenancy-namespace>/<repo-name> \\\n+     --docker-username=your.email@some.com \\\n+     --docker-password=your-password \\\n+     --docker-email=your.email@some.com\n+\n+```\n+\n+4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+\n+```\n+  imagePullSecrets:\n+  - name: <secret name>\n+\n+```\n+\n+5. Export the environment variables for the image name and tag using the same values in step 1:\n+\n+```\n+export MODEL_IMAGE_NAME=\"<region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>\"\n+export MODEL_IMAGE_TAG=\"<tag>\"\n+```\n+\n+### Create and deploy your Kubernetes resources\n+\n+To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+\n+  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n+  - Creates a secret containing your WebLogic administrator user name and password.\n+  - Creates a secret containing your Model in Image runtime encryption password:\n+    - All model-in-image domains must supply a runtime encryption secret with a `password` value.\n+    - It is used to encrypt configuration that is passed around internally by the Operator.\n+    - The value must be kept private but can be arbitrary: you can optionally supply a different secret value every time you restart the domain.\n+  - Creates secrets containing your RCU access URL, credentials, and prefix (these are unused unless the domain type is `JRF`).\n+  - Creates a config map containing an additional WDT model properties file, `$SAMPLEDIR/model1.20.properties`.\n+  - Generates a domain resource YAML file, `$WORKDIR/k8s-domain.yaml`, using `$SAMPLEDIR/k8s-domain.yaml.template`.\n+  - Deploys `k8s-domain.yaml`.\n+  - Displays the status of the domain pods.\n+\n+The script expects `WDT_DOMAIN_TYPE` and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/run_domain.sh\n+  ```\n+\n+At the end, you will see the message `Getting pod status - ctrl-c when all is running and ready to exit`. Then you should see a WebLogic Administration Server and two Managed Server pods start. After all the pods are up, you can use `ctrl-c` to exit the build script.\n+\n+\n+### Optionally test the sample application\n+\n+1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+\n+2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+\n+   For Helm 2.x:\n+\n+   ```\n+   cd $SRCDIR\n+   $ helm install kubernetes/samples/charts/ingress-per-domain \\\n+     --name sample-domain1-ingress \\\n+     --namespace sample-domain1-ns \\\n+     --set wlsDomain.domainUID=sample-domain1 \\\n+     --set traefik.hostname=sample-domain1.org\n+   ```\n+\n+   For Helm 3.x:\n+\n+   ```\n+   cd $SRCDIR\n+   helm install sample-domain1-ingress kubernetes/samples/charts/ingress-per-domain \\\n+    --namespace sample-domain1-ns \\\n+    --set wlsDomain.domainUID=sample-domain1 \\\n+    --set traefik.hostname=sample-domain1.org\n+   ```\n+\n+   This creates an Kubernetes Ingress that helps route HTTP traffic from the Traefik load balancer's external port 30305 to the WebLogic domain's `cluster-1` 8001 port. Note that the WDT config map in this sample changes the cluster's port from 9001 to 8001 (9001 is the original port configured using the WDT model defined within in the image).\n+\n+3. Send a web application request to the load balancer:\n+\n+   ```\n+   curl -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/sample_war/index.jsp\n+   ```\n+\n+   You should see something like the following:\n+\n+   ```\n+   Hello World, you have reached server managed-server1\n+   ```\n+\n+   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+\n+4. Send a ReadyApp request to the load balancer (ReadyApp is a built-in WebLogic Server application):\n+\n+   ```\n+   curl -v -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/weblogic/ready\n+   ```\n+\n+   You should see something like the following:\n+\n+\n+   ```\n+   * About to connect() to myhost.my.dns.domain.name port 30305 (#0)\n+   *   Trying 100.111.142.32...\n+   * Connected to myhost.my.dns.domain.name (100.111.142.32) port 30305 (#0)\n+   > GET /weblogic/ready HTTP/1.1\n+   > User-Agent: curl/7.29.0\n+   > Accept: */*\n+   > host: sample-domain1.org\n+   >\n+   < HTTP/1.1 200 OK\n+   < Content-Length: 0\n+   < Date: Mon, 09 Mar 2020 20:40:37 GMT\n+   < Vary: Accept-Encoding\n+   <\n+   * Connection #0 to host myhost.my.dns.domain.name left intact\n+   ```\n+\n+   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+\n+### Optionally access the WebLogic console\n+\n+You can add an ingress rule to access the WebLogic Console from your local browser\n+\n+1. Find out the service name of the admin server and service port number.\n+\n+The name follows the pattern <Domain UID>-<admin server name> all lower case and the port number will be described in your \n+WDT model's admin server `listenPort`.\n+\n+You can also find the information by:\n+\n+```\n+kubectl -n sample-domain1-ns get services\n+```\n+\n+```\n+NAME                               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\n+sample-domain1-admin-server        ClusterIP   None           <none>        7001/TCP   48m\n+```\n+\n+This shows the admin service name is `sample-domain1-admin-server` and the port for the console is `7001`\n+\n+2. Create an ingress rule for the WebLogic console\n+\n+Create the following file and call it `console-ingress.yaml` in your `$WORKDIR`.\n+\n+```\n+apiVersion: extensions/v1beta1\n+kind: Ingress\n+metadata:\n+  name: sample-domain1-console-ingress\n+  namespace: sample-domain1-ns\n+  annotations:\n+    kubernetes.io/ingress.class: traefik\n+spec:\n+  rules:\n+  - host:\n+    http:\n+      paths:\n+      - path: /console\n+        backend:\n+          serviceName: sample-domain1-admin-server\n+          servicePort: 7001\n+\n+```\n+\n+This will route the request path `/console` to the admin service port `7001` at pod `sample-domain1-admin-server` in the `sample-domain1-ns` namespace.\n+\n+3.  Apply the ingress rule resource\n+\n+```\n+kubectl apply -f $WORKDIR/console-ingress.yaml\n+```\n+\n+4.  Access the WebLogic console from the brower", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4Nzk5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396787992", "bodyText": "you sure?", "author": "tbarnes-us", "createdAt": "2020-03-23T22:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4ODA1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396788054", "bodyText": "ok", "author": "tbarnes-us", "createdAt": "2020-03-23T22:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDUzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396684531", "bodyText": "\"running on the same machine\"", "author": "rjeberhard", "createdAt": "2020-03-23T18:56:00Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag <image-name>:<tag> <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+2.  Push the image to the remote Docker registry, for example:\n+\n+```\n+docker push <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+3. Create the pull secret for the remote Docker registry:\n+\n+```\n+ kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n+     --docker-server=<region-key>.ocir.io/<tenancy-namespace>/<repo-name> \\\n+     --docker-username=your.email@some.com \\\n+     --docker-password=your-password \\\n+     --docker-email=your.email@some.com\n+\n+```\n+\n+4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+\n+```\n+  imagePullSecrets:\n+  - name: <secret name>\n+\n+```\n+\n+5. Export the environment variables for the image name and tag using the same values in step 1:\n+\n+```\n+export MODEL_IMAGE_NAME=\"<region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>\"\n+export MODEL_IMAGE_TAG=\"<tag>\"\n+```\n+\n+### Create and deploy your Kubernetes resources\n+\n+To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+\n+  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n+  - Creates a secret containing your WebLogic administrator user name and password.\n+  - Creates a secret containing your Model in Image runtime encryption password:\n+    - All model-in-image domains must supply a runtime encryption secret with a `password` value.\n+    - It is used to encrypt configuration that is passed around internally by the Operator.\n+    - The value must be kept private but can be arbitrary: you can optionally supply a different secret value every time you restart the domain.\n+  - Creates secrets containing your RCU access URL, credentials, and prefix (these are unused unless the domain type is `JRF`).\n+  - Creates a config map containing an additional WDT model properties file, `$SAMPLEDIR/model1.20.properties`.\n+  - Generates a domain resource YAML file, `$WORKDIR/k8s-domain.yaml`, using `$SAMPLEDIR/k8s-domain.yaml.template`.\n+  - Deploys `k8s-domain.yaml`.\n+  - Displays the status of the domain pods.\n+\n+The script expects `WDT_DOMAIN_TYPE` and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/run_domain.sh\n+  ```\n+\n+At the end, you will see the message `Getting pod status - ctrl-c when all is running and ready to exit`. Then you should see a WebLogic Administration Server and two Managed Server pods start. After all the pods are up, you can use `ctrl-c` to exit the build script.\n+\n+\n+### Optionally test the sample application\n+\n+1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+\n+2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+\n+   For Helm 2.x:\n+\n+   ```\n+   cd $SRCDIR\n+   $ helm install kubernetes/samples/charts/ingress-per-domain \\\n+     --name sample-domain1-ingress \\\n+     --namespace sample-domain1-ns \\\n+     --set wlsDomain.domainUID=sample-domain1 \\\n+     --set traefik.hostname=sample-domain1.org\n+   ```\n+\n+   For Helm 3.x:\n+\n+   ```\n+   cd $SRCDIR\n+   helm install sample-domain1-ingress kubernetes/samples/charts/ingress-per-domain \\\n+    --namespace sample-domain1-ns \\\n+    --set wlsDomain.domainUID=sample-domain1 \\\n+    --set traefik.hostname=sample-domain1.org\n+   ```\n+\n+   This creates an Kubernetes Ingress that helps route HTTP traffic from the Traefik load balancer's external port 30305 to the WebLogic domain's `cluster-1` 8001 port. Note that the WDT config map in this sample changes the cluster's port from 9001 to 8001 (9001 is the original port configured using the WDT model defined within in the image).\n+\n+3. Send a web application request to the load balancer:\n+\n+   ```\n+   curl -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/sample_war/index.jsp\n+   ```\n+\n+   You should see something like the following:\n+\n+   ```\n+   Hello World, you have reached server managed-server1\n+   ```\n+\n+   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+\n+4. Send a ReadyApp request to the load balancer (ReadyApp is a built-in WebLogic Server application):\n+\n+   ```\n+   curl -v -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/weblogic/ready\n+   ```\n+\n+   You should see something like the following:\n+\n+\n+   ```\n+   * About to connect() to myhost.my.dns.domain.name port 30305 (#0)\n+   *   Trying 100.111.142.32...\n+   * Connected to myhost.my.dns.domain.name (100.111.142.32) port 30305 (#0)\n+   > GET /weblogic/ready HTTP/1.1\n+   > User-Agent: curl/7.29.0\n+   > Accept: */*\n+   > host: sample-domain1.org\n+   >\n+   < HTTP/1.1 200 OK\n+   < Content-Length: 0\n+   < Date: Mon, 09 Mar 2020 20:40:37 GMT\n+   < Vary: Accept-Encoding\n+   <\n+   * Connection #0 to host myhost.my.dns.domain.name left intact\n+   ```\n+\n+   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+\n+### Optionally access the WebLogic console\n+\n+You can add an ingress rule to access the WebLogic Console from your local browser\n+\n+1. Find out the service name of the admin server and service port number.\n+\n+The name follows the pattern <Domain UID>-<admin server name> all lower case and the port number will be described in your \n+WDT model's admin server `listenPort`.\n+\n+You can also find the information by:\n+\n+```\n+kubectl -n sample-domain1-ns get services\n+```\n+\n+```\n+NAME                               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\n+sample-domain1-admin-server        ClusterIP   None           <none>        7001/TCP   48m\n+```\n+\n+This shows the admin service name is `sample-domain1-admin-server` and the port for the console is `7001`\n+\n+2. Create an ingress rule for the WebLogic console\n+\n+Create the following file and call it `console-ingress.yaml` in your `$WORKDIR`.\n+\n+```\n+apiVersion: extensions/v1beta1\n+kind: Ingress\n+metadata:\n+  name: sample-domain1-console-ingress\n+  namespace: sample-domain1-ns\n+  annotations:\n+    kubernetes.io/ingress.class: traefik\n+spec:\n+  rules:\n+  - host:\n+    http:\n+      paths:\n+      - path: /console\n+        backend:\n+          serviceName: sample-domain1-admin-server\n+          servicePort: 7001\n+\n+```\n+\n+This will route the request path `/console` to the admin service port `7001` at pod `sample-domain1-admin-server` in the `sample-domain1-ns` namespace.\n+\n+3.  Apply the ingress rule resource\n+\n+```\n+kubectl apply -f $WORKDIR/console-ingress.yaml\n+```\n+\n+4.  Access the WebLogic console from the brower\n+\n+\n+```\n+# If the domain and your browser are running the same machine:", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4ODI5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396788292", "bodyText": "will do", "author": "tbarnes-us", "createdAt": "2020-03-23T22:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NTc4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396685785", "bodyText": "Whoops... this one is on me... I got carried away with putting in 12.2.1.4, but it's just 12.2.1.3 for SOA Suite.", "author": "rjeberhard", "createdAt": "2020-03-23T18:58:08Z", "path": "docs-source/content/samples/simple/domains/soa-domain/_index.md", "diffHunk": "@@ -98,7 +98,7 @@ The following parameters can be provided in the inputs file.\n | `domainType` | Type of the domain. Mandatory input for SOA Suite domains. You must provide one of the supported domain type values: `soa` (deploys a SOA domain),`osb` (deploys an OSB (Oracle Service Bus) domain),`soaess` (deploys a SOA domain with Enterprise Scheduler (ESS)),`soaosb` (deploys a domain with SOA and OSB), and `soaessosb` (deploys a domain with SOA, OSB, and ESS). | `soa`\n | `exposeAdminNodePort` | Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. | `false` |\n | `exposeAdminT3Channel` | Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. | `false` |\n-| `image` | SOA Suite Docker image. The operator requires SOA Suite 12.2.1.3.0 with patch 29135930 applied. Refer to [SOA domains]({{< relref \"/userguide/managing-fmw-domains/soa-suite/_index.md#obtaining-the-soa-suite-docker-image\" >}}) for details on how to obtain or create the image. | `container-registry.oracle.com/middleware/soasuite:12.2.1.3` |\n+| `image` | SOA Suite Docker image. The operator requires SOA Suite 12.2.1.3.0 with patch 29135930 applied or SOA Suite 12.2.1.4.0. Refer to [SOA domains]({{< relref \"/userguide/managing-fmw-domains/soa-suite/_index.md#obtaining-the-soa-suite-docker-image\" >}}) for details on how to obtain or create the image. | `container-registry.oracle.com/middleware/soasuite:12.2.1.3` |", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0OTkwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398049906", "bodyText": "@rjeberhard Please resolve if this is corrected.", "author": "tbarnes-us", "createdAt": "2020-03-25T17:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NTc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MTI4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396691289", "bodyText": "Does \"secret macro\" mean the @@SECRET pattern above?", "author": "rjeberhard", "createdAt": "2020-03-23T19:07:48Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/model-files.md", "diffHunk": "@@ -0,0 +1,156 @@\n++++\n+title = \"Model files\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 30\n+pre = \"<b> </b>\"\n+description = \"Model file requirements, macros, and loading order.\"\n++++\n+\n+#### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Sample model file](#sample-model-file)\n+ - [Important notes about Model in Image model files](#important-notes-about-model-in-image-model-files)\n+ - [Model file naming and loading order](#model-file-naming-and-loading-order)\n+ - [Model file macros](#model-file-macros)\n+   - [Using secrets in model files](#using-secrets-in-model-files)\n+   - [Using environment variables in model files](#using-environment-variables-in-model-files)\n+   - [Combining secrets and environment variables in model files](#combining-secrets-and-environment-variables-in-model-files)\n+\n+#### Introduction\n+\n+This document describes basic Model in Image model file syntax, naming, and macros. For additional information, see the [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) documentation.\n+\n+{{% notice tip %}} The WDT 'discover tool' is particularly useful for generating model files from an existing domain home.\n+{{% /notice %}}\n+\n+#### Sample model file\n+\n+Here's an example of a model `.yaml` file that defines a WebLogic Administration Server and dynamic cluster.\n+\n+```\n+domainInfo:\n+  AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+  AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+  ServerStartMode: 'prod'\n+\n+topology:\n+  Name: '@@ENV:DOMAIN_UID@@'\n+  AdminServerName: \"admin-server\"\n+  Cluster:\n+    \"cluster-1\":\n+      DynamicServers:\n+        ServerTemplate:  \"cluster-1-template\"\n+        ServerNamePrefix: \"managed-server\"\n+        DynamicClusterSize: 5\n+        MaxDynamicClusterSize: 5\n+        CalculatedListenPorts: false\n+  Server:\n+    \"admin-server\":\n+      ListenPort: 7001\n+  ServerTemplate:\n+    \"cluster-1-template\":\n+      Cluster: \"cluster-1\"\n+      ListenPort: 8001\n+```\n+\n+Some notes about the sample model file:\n+ - It includes a WebLogic credentials stanza that is required by Model in Image.\n+ - It derives its domain name from the pre-defined environment variable `DOMAIN_UID` but note that this is not required.\n+ - For a description of model file macro references to secrets and environment variables, see [Model file macros](#model-file-macros).\n+\n+#### Important notes about Model in Image model files\n+\n+- Understand when to use model macros.\n+\n+  - You can use model macros to reference arbitrary secrets from model files. This is recommended for handling mutable values such as database user names, passwords, and URLs. See [Using secrets in model files](#using-secrets-in-model-files).\n+\n+    - All password fields in a model should use secret macro. Passwords should not be directly included in property or model files because the files may appear in logs or debugging. ", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MDg1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396790852", "bodyText": "Tom AI: \"use secret macro\" --> \"use a secret macro\".   Put the above link in all bold.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MTI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2MDQ2OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397960468", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-25T15:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MTI4OQ=="}], "type": "inlineReview"}, {"oid": "8e2cd577c5946a45fad51e663e41f9e5f0bd9905", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8e2cd577c5946a45fad51e663e41f9e5f0bd9905", "message": "add script comment", "committedDate": "2020-03-23T19:17:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Njc4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396696788", "bodyText": "\"domain types\"?  Unfortunately, we used to call this, \"models\".  Note that link is choose a model.", "author": "rjeberhard", "createdAt": "2020-03-23T19:17:56Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/overview.md", "diffHunk": "@@ -0,0 +1,57 @@\n++++\n+title = \"Overview\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 10\n+pre = \"<b> </b>\"\n+description = \"Introduction to Model in Image, description of its runtime behavior, and references.\"\n++++\n+\n+#### Content\n+\n+ - [Introduction](#introduction)\n+ - [Runtime behavior overview](#runtime-behavior-overview)\n+ - [Runtime updates overview](#runtime-updates-overview)\n+ - [References](#references)\n+\n+#### Introduction\n+\n+Model in Image is an alternative to the operator's Domain in Image and Domain on PV domain types. See [Choose a Model]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}) for a comparison of operator domain types.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MjQ3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396792479", "bodyText": "AI Tom: Ask Rosemary or do it yourself:   change title to 'Choosing a Domain Home Source Type'.  Change directory to 'choosing-a-domain-home-source-type'.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Njc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1MDM2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398050360", "bodyText": "Resolving. Rosemary is now working on this via a different comment.", "author": "tbarnes-us", "createdAt": "2020-03-25T17:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Njc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1Mzk5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398053993", "bodyText": "@tbarnes-us I did the first part: \"change title to 'Choosing a Domain Home Source Type'.\"", "author": "rosemarymarano", "createdAt": "2020-03-25T17:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Njc4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Nzk0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396697945", "bodyText": "Need a @rosemarymarano here on this sentence. :). The \"plus support\" phrase seems awkward.", "author": "rjeberhard", "createdAt": "2020-03-23T19:19:54Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/overview.md", "diffHunk": "@@ -0,0 +1,57 @@\n++++\n+title = \"Overview\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 10\n+pre = \"<b> </b>\"\n+description = \"Introduction to Model in Image, description of its runtime behavior, and references.\"\n++++\n+\n+#### Content\n+\n+ - [Introduction](#introduction)\n+ - [Runtime behavior overview](#runtime-behavior-overview)\n+ - [Runtime updates overview](#runtime-updates-overview)\n+ - [References](#references)\n+\n+#### Introduction\n+\n+Model in Image is an alternative to the operator's Domain in Image and Domain on PV domain types. See [Choose a Model]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}) for a comparison of operator domain types.\n+\n+Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource.\n+\n+It enables:\n+\n+ - Defining a WebLogic domain home configuration using WebLogic Deploy Tool (WDT) model files and application archives.\n+ - Embedding model files and archives in a custom Docker image, and using the WebLogic Image Tool (WIT) to generate this image.\n+ - Supplying additional model files using a Kubernetes config map.\n+ - Supplying Kubernetes secrets that resolve macro references within the models. For example, a secret can be used to supply a database credential.\n+ - Updating WDT model files at runtime. For example, you can add a data source to a running domain. Note that all such updates currently cause the domain to 'roll' in order to take effect.\n+ - Deploying standard WLS domains, Restricted JRF domains, or JRF domains.\n+\n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files, plus support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwMTU1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396701550", "bodyText": "Yes, it's awkward. I had to read it twice before understanding the meaning. Better wording would be, \"They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file.\"", "author": "rosemarymarano", "createdAt": "2020-03-23T19:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Nzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MjgzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396792830", "bodyText": "Ok. Will do.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Nzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNTc5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397525790", "bodyText": "done.", "author": "tbarnes-us", "createdAt": "2020-03-24T23:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Nzk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5ODM2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396698363", "bodyText": "Just curious... do these have to be zips or are they tar files.", "author": "rjeberhard", "createdAt": "2020-03-23T19:20:42Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/overview.md", "diffHunk": "@@ -0,0 +1,57 @@\n++++\n+title = \"Overview\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 10\n+pre = \"<b> </b>\"\n+description = \"Introduction to Model in Image, description of its runtime behavior, and references.\"\n++++\n+\n+#### Content\n+\n+ - [Introduction](#introduction)\n+ - [Runtime behavior overview](#runtime-behavior-overview)\n+ - [Runtime updates overview](#runtime-updates-overview)\n+ - [References](#references)\n+\n+#### Introduction\n+\n+Model in Image is an alternative to the operator's Domain in Image and Domain on PV domain types. See [Choose a Model]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}) for a comparison of operator domain types.\n+\n+Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource.\n+\n+It enables:\n+\n+ - Defining a WebLogic domain home configuration using WebLogic Deploy Tool (WDT) model files and application archives.\n+ - Embedding model files and archives in a custom Docker image, and using the WebLogic Image Tool (WIT) to generate this image.\n+ - Supplying additional model files using a Kubernetes config map.\n+ - Supplying Kubernetes secrets that resolve macro references within the models. For example, a secret can be used to supply a database credential.\n+ - Updating WDT model files at runtime. For example, you can add a data source to a running domain. Note that all such updates currently cause the domain to 'roll' in order to take effect.\n+ - Deploying standard WLS domains, Restricted JRF domains, or JRF domains.\n+\n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files, plus support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+\n+For JRF domains, Model in Image provides additional support for (a) initializing the RCU database for a domain when a domain is started for first time, (b) supplying an RCU password, and finally (c) obtaining an RCU wallet for re-use in subsequent restarts of the same domain. See [Prerequisites for JRF domain types]({{< relref \"/userguide/managing-domains/model-in-image/usage.md#7-prerequisites-for-jrf-domain-types\" >}}) and [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}).\n+\n+\n+#### Runtime behavior overview\n+\n+When you deploy a Model in Image domain resource, the operator will run a Kubernetes job called the 'introspector job' that:\n+\n+  - Merges your WDT artifacts.\n+  - Runs WDT tooling to generate a domain home.\n+  - Zips up the domain home.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MzczMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396793731", "bodyText": "Tom: Change Zip to something generic like 'Package'.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5ODM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1MTM1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398051350", "bodyText": "Done.", "author": "tbarnes-us", "createdAt": "2020-03-25T17:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5ODM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5OTIyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396699227", "bodyText": "Is this the first time we are referring to the output config map?  If so, we either need a picture of the moving parts or just avoid discussing how we are injecting the domain home.", "author": "rjeberhard", "createdAt": "2020-03-23T19:22:19Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/overview.md", "diffHunk": "@@ -0,0 +1,57 @@\n++++\n+title = \"Overview\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 10\n+pre = \"<b> </b>\"\n+description = \"Introduction to Model in Image, description of its runtime behavior, and references.\"\n++++\n+\n+#### Content\n+\n+ - [Introduction](#introduction)\n+ - [Runtime behavior overview](#runtime-behavior-overview)\n+ - [Runtime updates overview](#runtime-updates-overview)\n+ - [References](#references)\n+\n+#### Introduction\n+\n+Model in Image is an alternative to the operator's Domain in Image and Domain on PV domain types. See [Choose a Model]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}) for a comparison of operator domain types.\n+\n+Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource.\n+\n+It enables:\n+\n+ - Defining a WebLogic domain home configuration using WebLogic Deploy Tool (WDT) model files and application archives.\n+ - Embedding model files and archives in a custom Docker image, and using the WebLogic Image Tool (WIT) to generate this image.\n+ - Supplying additional model files using a Kubernetes config map.\n+ - Supplying Kubernetes secrets that resolve macro references within the models. For example, a secret can be used to supply a database credential.\n+ - Updating WDT model files at runtime. For example, you can add a data source to a running domain. Note that all such updates currently cause the domain to 'roll' in order to take effect.\n+ - Deploying standard WLS domains, Restricted JRF domains, or JRF domains.\n+\n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files, plus support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+\n+For JRF domains, Model in Image provides additional support for (a) initializing the RCU database for a domain when a domain is started for first time, (b) supplying an RCU password, and finally (c) obtaining an RCU wallet for re-use in subsequent restarts of the same domain. See [Prerequisites for JRF domain types]({{< relref \"/userguide/managing-domains/model-in-image/usage.md#7-prerequisites-for-jrf-domain-types\" >}}) and [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}).\n+\n+\n+#### Runtime behavior overview\n+\n+When you deploy a Model in Image domain resource, the operator will run a Kubernetes job called the 'introspector job' that:\n+\n+  - Merges your WDT artifacts.\n+  - Runs WDT tooling to generate a domain home.\n+  - Zips up the domain home.\n+  - Puts the ZIP file in an output Kubernetes config map named `DOMAIN_UID-weblogic-domain-introspect-cm`.\n+\n+After the introspector job completes, the operator subsequently boots your domain's WebLogic pods, and the pods will obtain their domain home from the introspector's output config map.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NjQ4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396796483", "bodyText": "Tom: ok.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5OTIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1Nzg4MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r398057881", "bodyText": "@rjeberhard I've updated the section. Please comment if not happy, or resolve if happy.", "author": "tbarnes-us", "createdAt": "2020-03-25T17:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5OTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNDEzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396704138", "bodyText": "extra space \"another  subsequent\"", "author": "rjeberhard", "createdAt": "2020-03-23T19:30:59Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/runtime-updates.md", "diffHunk": "@@ -0,0 +1,325 @@\n++++\n+title = \"Runtime updates\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 50\n+pre = \"<b> </b>\"\n+description = \"Updating a running Model in Image domain's images and model files.\"\n++++\n+\n+#### Contents\n+\n+ - [Overview](#overview)\n+ - [Important notes](#important-notes)\n+ - [Frequently asked questions](#frequently-asked-questions)\n+ - [Supported and unsupported updates](#supported-and-unsupported-updates)\n+ - [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion)\n+ - [Using the WDT Discover Domain Tool](#using-the-wdt-discover-domain-tool)\n+ - [Example of adding a data source](#example-of-adding-a-data-source)\n+\n+#### Overview\n+\n+If you want to make a WebLogic domain home configuration change to a running Model in Image domain, and you want the change to survive WebLogic pod restarts, then you can modify your existing model by one or more the following approaches:\n+\n+  - Changing secrets or environment variables that are referenced by macros in your model files.\n+\n+  - Specifying a new or updated WDT config map that contains model files and use your domain resource `configuration.model.configMap` field to reference the map.\n+\n+  - Supplying a new image with new and/or changed model files.\n+\n+After changes are in place, you can tell the operator to load the changes and propagate them to a running domain by altering the domain resource's `image` or `restartVersion` attribute.\n+\n+#### Important notes\n+\n+ - Check for [Supported and unsupported updates](#supported-and-unsupported-updates).\n+\n+ - If you specify multiple model files in your image or WDT config map, the order in which they're loaded and merged is determined as described in [Model file naming and loading order]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md#model-file-naming-and-loading-order\" >}}).\n+\n+ - You can use the WDT Discover Domain Tool to help generate your model file updates. See [Using the WDT Discover Domain Tool](#using-the-wdt-discover-tool).\n+\n+ - For simple ways to change `restartVersion`, see [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion).\n+\n+ - For a sample of adding a data source to a running domain, see [Example of adding a data source](#example-of-adding-a-data-source).\n+\n+ - For a discussion of model file syntax, see the [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) documentation and [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+ - If the introspector job reports a failure, see [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) for debugging advice.\n+\n+#### Frequently asked questions\n+\n+_Why is it necessary to specify updates using model files?_\n+\n+Similar to Domain in Image, if you make a direct runtime WebLogic configuration update of a Model in Image domain using the WebLogic console or WLST scripts, then the update is ephemeral. This is because the domain home is stored in an image directory which will not survive the restart of the owning pod.\n+\n+_How do Model in Image updates work during runtime?_\n+\n+After you make a change to your domain resource `restartVersion` or `image` attribute, the operator will rerun the domain's introspector job. This job will reload all of your secrets and environment variables, merge all of your model files, and generate a new domain home. If the job succeeds, then the operator will make the updated domain home available to pods using a config map named `DOMAIN_UID-weblogic-domain-introspect-cm`. Finally, the operator will subsequently roll (restart) each running WebLogic Server pod in the domain so that it can load the new configuration. A domain roll begins by restarting the domain's Administration Server and then proceeds to restart each Manager Server in the domain.\n+\n+_Can we use custom configuration overrides to do the updates instead?_\n+\n+No. Custom configuration overrides, which are WebLogic configuration overrides specified using a domain resource `configuration.overridesConfigMap`, as described in [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}), aren't supported in combination with Model in Image. Model in Image will generate an error if custom overrides are specified. This should not be a concern because model file, secret, and/or model image updates are simpler and more flexible than custom configuration override updates. Unlike configuration overrides, the syntax for a model file update exactly matches the syntax for specifying your model file in the first place.\n+\n+\n+#### Supported and unsupported updates\n+\n+ - You can add new MBeans or resources simply by specifying their corresponding model file YAML snippet along with their parent bean hierarchy. See [Example of adding a data source](#example-of-adding-a-datasource).\n+\n+ - You can recreate, change, or add secrets that your model depends on. For example, you can change a database password secret.\n+\n+ - You can change or add environment variables that your model macros may depend on (macros that use the `@@ENV:myenvvar@@` syntax).\n+\n+ - You can remove a named MBean or resource by specifying a model file with a `!` symbol just before the bean or resource name. For example, if you have a data source named `mynewdatasource` defined in your model, it can be removed by specifying a small model file that loads after the model file that defines the data source, where the small model file looks like this:\n+\n+  ```\n+  resources:\n+    JDBCSystemResource:\n+      !mynewdatasource:\n+  ```\n+\n+  For more information, see [Declaring Named MBeans to Delete](https://github.com/oracle/weblogic-deploy-tooling#declaring-named-mbeans-to-delete) in the WebLogic Deploying Tooling documentation.\n+\n+ - You can add or alter an MBean attribute by specifying a YAML snippet along with its parent bean hierarchy that references an existing MBean and the attribute. For example, to add or alter the max capacity of a data source named `mynewdatasource`:\n+\n+  ```\n+  resources:\n+    JDBCSystemResource:\n+      mynewdatasource:\n+        JdbcResource:\n+          JDBCConnectionPoolParams:\n+            MaxCapacity: 5\n+  ```\n+\n+  For more information, see [Using Multiple Models](https://github.com/oracle/weblogic-deploy-tooling#using-multiple-models) in the WebLogic Deploy Tooling documentation.\n+\n+ - There is no way to directly delete an attribute from an MBean that's already been specified by a model file. The work-around is to do this using two model files: (a) add a model file that deletes the named bean/resource that is a parent to the attribute you want to delete, and (b) add another  subsequent model file that fully defines the named bean/resource but without the attribute you want to delete.", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0NTQ5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397145496", "bodyText": "The extra space that you see here, does not show up in the UI, \"(b) add another subsequent model file that...\"", "author": "rosemarymarano", "createdAt": "2020-03-24T13:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNDEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwODUxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396708517", "bodyText": "What is \"This is a comment\" for? :)", "author": "rjeberhard", "createdAt": "2020-03-23T19:38:57Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/runtime-updates.md", "diffHunk": "@@ -0,0 +1,325 @@\n++++\n+title = \"Runtime updates\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 50\n+pre = \"<b> </b>\"\n+description = \"Updating a running Model in Image domain's images and model files.\"\n++++\n+\n+#### Contents\n+\n+ - [Overview](#overview)\n+ - [Important notes](#important-notes)\n+ - [Frequently asked questions](#frequently-asked-questions)\n+ - [Supported and unsupported updates](#supported-and-unsupported-updates)\n+ - [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion)\n+ - [Using the WDT Discover Domain Tool](#using-the-wdt-discover-domain-tool)\n+ - [Example of adding a data source](#example-of-adding-a-data-source)\n+\n+#### Overview\n+\n+If you want to make a WebLogic domain home configuration change to a running Model in Image domain, and you want the change to survive WebLogic pod restarts, then you can modify your existing model by one or more the following approaches:\n+\n+  - Changing secrets or environment variables that are referenced by macros in your model files.\n+\n+  - Specifying a new or updated WDT config map that contains model files and use your domain resource `configuration.model.configMap` field to reference the map.\n+\n+  - Supplying a new image with new and/or changed model files.\n+\n+After changes are in place, you can tell the operator to load the changes and propagate them to a running domain by altering the domain resource's `image` or `restartVersion` attribute.\n+\n+#### Important notes\n+\n+ - Check for [Supported and unsupported updates](#supported-and-unsupported-updates).\n+\n+ - If you specify multiple model files in your image or WDT config map, the order in which they're loaded and merged is determined as described in [Model file naming and loading order]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md#model-file-naming-and-loading-order\" >}}).\n+\n+ - You can use the WDT Discover Domain Tool to help generate your model file updates. See [Using the WDT Discover Domain Tool](#using-the-wdt-discover-tool).\n+\n+ - For simple ways to change `restartVersion`, see [Changing a domain resource 'restartVersion'](#changing-a-domain-resource-restartversion).\n+\n+ - For a sample of adding a data source to a running domain, see [Example of adding a data source](#example-of-adding-a-data-source).\n+\n+ - For a discussion of model file syntax, see the [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) documentation and [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n+\n+ - If the introspector job reports a failure, see [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) for debugging advice.\n+\n+#### Frequently asked questions\n+\n+_Why is it necessary to specify updates using model files?_\n+\n+Similar to Domain in Image, if you make a direct runtime WebLogic configuration update of a Model in Image domain using the WebLogic console or WLST scripts, then the update is ephemeral. This is because the domain home is stored in an image directory which will not survive the restart of the owning pod.\n+\n+_How do Model in Image updates work during runtime?_\n+\n+After you make a change to your domain resource `restartVersion` or `image` attribute, the operator will rerun the domain's introspector job. This job will reload all of your secrets and environment variables, merge all of your model files, and generate a new domain home. If the job succeeds, then the operator will make the updated domain home available to pods using a config map named `DOMAIN_UID-weblogic-domain-introspect-cm`. Finally, the operator will subsequently roll (restart) each running WebLogic Server pod in the domain so that it can load the new configuration. A domain roll begins by restarting the domain's Administration Server and then proceeds to restart each Manager Server in the domain.\n+\n+_Can we use custom configuration overrides to do the updates instead?_\n+\n+No. Custom configuration overrides, which are WebLogic configuration overrides specified using a domain resource `configuration.overridesConfigMap`, as described in [Configuration overrides]({{< relref \"/userguide/managing-domains/configoverrides/_index.md\" >}}), aren't supported in combination with Model in Image. Model in Image will generate an error if custom overrides are specified. This should not be a concern because model file, secret, and/or model image updates are simpler and more flexible than custom configuration override updates. Unlike configuration overrides, the syntax for a model file update exactly matches the syntax for specifying your model file in the first place.\n+\n+\n+#### Supported and unsupported updates\n+\n+ - You can add new MBeans or resources simply by specifying their corresponding model file YAML snippet along with their parent bean hierarchy. See [Example of adding a data source](#example-of-adding-a-datasource).\n+\n+ - You can recreate, change, or add secrets that your model depends on. For example, you can change a database password secret.\n+\n+ - You can change or add environment variables that your model macros may depend on (macros that use the `@@ENV:myenvvar@@` syntax).\n+\n+ - You can remove a named MBean or resource by specifying a model file with a `!` symbol just before the bean or resource name. For example, if you have a data source named `mynewdatasource` defined in your model, it can be removed by specifying a small model file that loads after the model file that defines the data source, where the small model file looks like this:\n+\n+  ```\n+  resources:\n+    JDBCSystemResource:\n+      !mynewdatasource:\n+  ```\n+\n+  For more information, see [Declaring Named MBeans to Delete](https://github.com/oracle/weblogic-deploy-tooling#declaring-named-mbeans-to-delete) in the WebLogic Deploying Tooling documentation.\n+\n+ - You can add or alter an MBean attribute by specifying a YAML snippet along with its parent bean hierarchy that references an existing MBean and the attribute. For example, to add or alter the max capacity of a data source named `mynewdatasource`:\n+\n+  ```\n+  resources:\n+    JDBCSystemResource:\n+      mynewdatasource:\n+        JdbcResource:\n+          JDBCConnectionPoolParams:\n+            MaxCapacity: 5\n+  ```\n+\n+  For more information, see [Using Multiple Models](https://github.com/oracle/weblogic-deploy-tooling#using-multiple-models) in the WebLogic Deploy Tooling documentation.\n+\n+ - There is no way to directly delete an attribute from an MBean that's already been specified by a model file. The work-around is to do this using two model files: (a) add a model file that deletes the named bean/resource that is a parent to the attribute you want to delete, and (b) add another  subsequent model file that fully defines the named bean/resource but without the attribute you want to delete.\n+\n+ - The following runtime updates haven't been tested and are _not_ supported in the first release of Model in Image. If you need to make these kinds of updates, consider shutting down your domain entirely before making the change:\n+   - Adding, removing, or altering the network configuration of an existing Managed Server. This includes, but isn't limited to network channels, ports, and cluster addresses.\n+   - Adding a Managed Server to an existing configured cluster.\n+   - Altering the `cluster-size` or `max-cluster-size` of an existing dynamic cluster.\n+   - TBD This needs some research. Check with QA, etc.\n+\n+#### Changing a domain resource 'restartVersion'\n+\n+As was mentioned in the [overview](#overview), one way to tell the operator to apply your configuration changes to a running domain is by altering the domain resource `restartVersion`. Here are some common ways to do this:\n+\n+ - You can alter `restartVersion` interactively using `kubectl edit -n MY_NAMESPACE domain MY_DOMAINUID`.\n+\n+ - If you have your domain's resource file, then you can alter this file and call `kubectl apply -f` on the file.\n+\n+ - You can use the Kubernetes `get` and `patch` commands. Here's a sample automation script:\n+\n+   ```\n+   #!/bin/bash\n+   NAMESPACE=${1:-sample-domain1-ns}\n+   DOMAINUID=${2:-sample-domain1}\n+   currentRV=$(kubectl -n ${NAMESPACE} get domain ${DOMAINUID} -o=jsonpath='{.spec.restartVersion}')\n+   if [ $? = 0 ]; then\n+     # we enter here only if the previous command succeeded\n+\n+     nextRV=$((currentRV + 1))\n+\n+     echo \"@@ Info: Rolling domain '${DOMAINUID}' in namespace '${NAMESPACE}' from restartVersion='${currentRV}' to restartVersion='${nextRV}'.\"\n+\n+     kubectl -n ${NAMESPACE} patch domain ${DOMAINUID} --type='json' \\\n+       -p='[{\"op\": \"replace\", \"path\": \"/spec/restartVersion\", \"value\": \"'${nextRV}'\" }]'\n+   fi\n+   ```\n+\n+#### Using the WDT Discover Domain Tool\n+\n+The WebLogic Deploy Tooling [Discover Domain Tool](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/discover.md) generates model files from an existing domain home. You can use this tool to help determine the model file contents you would need to supply to update an existing model.\n+\n+For example, if you already have a running Model in Image domain in `sample-domain1-ns` with an Administration Server pod, `sample-domain1-admin-server`, you can do the following:\n+\n+  ```\n+  # (1) get a bash prompt in your admin server pod\n+  kubectl -n sample-domain1-ns \\\n+    exec -it sample-domain1-admin-server /bin/bash\n+\n+  # (2) In the pod, use the image's WDT discover script to\n+  # get the original WDT configuration. Notes:\n+  #  - WebLogic pods define ORACLE_HOME and DOMAIN_HOME\n+  #    for you.\n+  #  - A Model in Image image will already have WDT binaries\n+  #    in '/u01/wdt/weblogic-deploy/bin'.\n+  #  - Set 'domain_type' to one of WLS, JRF, or\n+  #    RestrictedJRF.\n+\n+  /u01/wdt/weblogic-deploy/bin/discoverDomain.sh \\\n+    -oracle_home $ORACLE_HOME \\\n+    -domain_home $DOMAIN_HOME \\\n+    -domain_type WLS \\\n+    -archive_file old.zip \\\n+    -model_file old.yaml \\\n+    -variable_file old.properties\n+\n+  # (3) Now make some WebLogic config changes via the console or WLST.\n+\n+  # (4) In the pod, use the image's WDT discover script to\n+  # get the latest WDT configuration after your changes. Notes:\n+  #  - Set 'domain_type' to one of WLS, JRF, or\n+  #    RestrictedJRF.\n+\n+  /u01/wdt/weblogic-deploy/bin/discoverDomain.sh \\\n+    -oracle_home $ORACLE_HOME \\\n+    -domain_home $DOMAIN_HOME \\\n+    -domain_type WLS \\\n+    -archive_file new.zip \\\n+    -model_file new.yaml \\\n+    -variable_file new.properties\n+\n+  # (5) In the pod, compare your old and new yaml to see what\n+  # changed.\n+\n+  diff new.yaml old.yaml\n+  ```\n+\n+#### Example of adding a data source\n+\n+Here's an example script for adding a data source to a WebLogic cluster named `cluster-1` for a domain resource in namespace, `sample-domain1-ns`, with domain UID, `sample-domain1`. This example is designed to work on top of the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample.\n+\n+This example references a database running in the `default` namespace that is accessed with the URL `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, user `sys as dba`, and password `Oradoc_db1`. Note that you can still add this data source even if there's no database running at this location.\n+\n+{{% notice note %}} If you already have a WDT config map deployed for your running domain, as is true for the [Model in Image]({{< relref \"/samples/simple/domains/model-in-image/_index.md\" >}}) sample, then you should ensure that it includes any other needed files that were in the original WDT config map, in addition to the new data source YAML file. For example, the Model in Image sample puts file(s) in a directory that it uses to stage its config map in `$WORKDIR/wdtconfigmap`.\n+{{% /notice %}}\n+\n+\n+  ```\n+  #!/bin/bash\n+\n+  set -eu\n+\n+  # Assume SAMPLEDIR references the 'kubernetes/samples/scripts/create-weblogic-domain/model-in-image' directory within the operator source.\n+\n+  # Assume the DB is running in the following namespace\n+\n+  DB_NAMESPACE=\"default\"\n+\n+  # Assume DOMAIN_UID is the following\n+\n+  DOMAIN_UID=sample-domain1\n+\n+  # Assume DOMAIN_NAMESPACE is the following\n+\n+  DOMAIN_NAMESPACE=sample-domain1-ns\n+\n+  # Assume the DB URL and password are defined in a secret as follows\n+\n+  $SAMPLEDIR/create_secret.sh \\\n+    -n ${DOMAIN_NAMESPACE} \\\n+    -s ${DOMAIN_UID}-new-db-access-secret \\\n+    -l password=Oradoc_db1 \\\n+    -l url=oracle-db.${DB_NAMESPACE}.svc.cluster.local:1521/devpdb.k8s\n+\n+  # Assume WORKDIR is your working directory\n+\n+  cd $WORKDIR\n+\n+  # Create a WDT configmap with the datasource WDT yaml snippet\n+\n+  mkdir -p ./wdtconfigmap\n+\n+  cat << EOF > wdtconfigmap/datasource.yaml\n+  resources:\n+    JDBCSystemResource:\n+      mynewdatasource:\n+        Target: 'cluster-1'\n+        JdbcResource:\n+          JDBCDataSourceParams:\n+            JNDIName: [\n+              jdbc/generic2,\n+              jdbc/special2\n+            ]\n+            GlobalTransactionsProtocol: TwoPhaseCommit\n+          JDBCDriverParams:\n+            DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+            URL:               '@@SECRET:@@ENV:DOMAIN_UID@@-new-db-access-secret/url@@'\n+            PasswordEncrypted: '@@SECRET:@@ENV:DOMAIN_UID@@-new-db-access-secret/password@@'\n+            Properties:\n+              user:\n+                Value: 'sys as sysdba'\n+              oracle.net.CONNECT_TIMEOUT:\n+                Value: 5000\n+              oracle.jdbc.ReadTimeout:\n+                Value: 30000\n+          JDBCConnectionPoolParams:\n+              InitialCapacity: 0\n+              MaxCapacity: 1                   # This is a comment", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMjUxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396712512", "bodyText": "Assuming you're serious:  it's to teach folks how one can put comments in a model file.", "author": "tbarnes-us", "createdAt": "2020-03-23T19:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwODUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyNTM4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396725385", "bodyText": "I was being serious!  Okay, then I'd prefer: \"# Include comments like this\"", "author": "rjeberhard", "createdAt": "2020-03-23T20:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwODUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMzc4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396803784", "bodyText": "Tom AI: Remove fancy macro-within-macro, to be more clear.   Tom AI: Replace \"/\" with \":\" that's a typo.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwODUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTMyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397535325", "bodyText": "done", "author": "tbarnes-us", "createdAt": "2020-03-25T00:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwODUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMDM2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396710361", "bodyText": "The parenthetical is a bit confusing.  It might be clearer to just have a second sentence saying, \"These items do not need to be created in order.\"", "author": "rjeberhard", "createdAt": "2020-03-23T19:41:20Z", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -0,0 +1,155 @@\n++++\n+title = \"Usage\"\n+date = 2020-03-11T16:45:16-05:00\n+weight = 20\n+pre = \"<b> </b>\"\n+description = \"Steps for creating and deploying Model in Image images and their associated domain resources.\"\n++++\n+\n+\n+#### Contents\n+\n+   - [WebLogic operator](#1-weblogic-operator)\n+   - [WebLogic image](#2-weblogic-image)\n+   - [Optional WDT model config map](#3-optional-wdt-model-config-map)\n+   - [Required runtime encryption secret](#4-required-runtime-encryption-secret)\n+   - [Secrets for model macros](#5-secrets-for-model-macros)\n+   - [Domain resource attributes](#6-domain-resource-attributes)\n+   - [Prerequisites for JRF domain types](#7-prerequisites-for-jrf-domain-types)\n+\n+#### Requirements\n+\n+Here's what's needed to create and deploy a typical Model in Image domain (though enumerated, you need not supply them in order):", "originalCommit": "3f46823be21e32c4b54a101d5590aeb40dbcdb15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNzA1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397217054", "bodyText": "ok, less fancy but more clear. Done.", "author": "rosemarymarano", "createdAt": "2020-03-24T14:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMDM2MQ=="}], "type": "inlineReview"}, {"oid": "8b42d4a5a8538feebae7f9446eb324995d3c49a3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8b42d4a5a8538feebae7f9446eb324995d3c49a3", "message": "Add introspectorJobActiveDeadlinSeconds to the samples\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-23T19:57:30Z", "type": "commit"}, {"oid": "2b01c3744a72e136023f270c573a225024a3a128", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2b01c3744a72e136023f270c573a225024a3a128", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-23T20:02:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyODQwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396728402", "bodyText": "Do we have PV directories for model-in-image tests?", "author": "rjeberhard", "createdAt": "2020-03-23T20:12:31Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImage.java", "diffHunk": "@@ -0,0 +1,227 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImage extends MiiBaseTest {\n+  private static Operator operator;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+\n+    createResultAndPvDirs(testClassName);", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NzY3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402357670", "bodyText": "@anpanigr @vanajamukkara This question is for the QA team.", "author": "tbarnes-us", "createdAt": "2020-04-02T14:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyODQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4OTgzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402389837", "bodyText": "logs are written on PV", "author": "vanajamukkara", "createdAt": "2020-04-02T15:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyODQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzE4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396733184", "bodyText": "Why is @Test commented out?", "author": "rjeberhard", "createdAt": "2020-03-23T20:22:12Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImage.java", "diffHunk": "@@ -0,0 +1,227 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImage extends MiiBaseTest {\n+  private static Operator operator;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image with model yaml and model properties\n+   * file in the image. Deploy the domain, verify the running domain has\n+   * the correct configuration as given in the image.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiWithNoConfigMap() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    Domain domain = null;\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      Map<String, Object> domainMap =\n+          createModelInImageMap(getNewSuffixCount(), testClassName);\n+      domainMap.put(\"namespace\", domainNS);\n+      domainMap.put(\"wdtModelFile\", \"./model.wls.yaml\");\n+      domainMap.put(\"wdtModelPropertiesFile\", \"./model.properties\");\n+\n+      domain = TestUtils.createDomain(domainMap);\n+      // domain = new Domain(domainMap, true, false);\n+      domain.verifyDomainCreated();\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd, create a new\n+   * config map and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiWithConfigMapBothBeforeAndAfterDeployingDomain() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    Domain domain = null;\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+\n+      domain = createMIIDomainWithConfigMap(testClassName, domainNS, \"./model.wls.yaml\",\n+          \"./model.empty.properties\", \"./model.properties\", \"WLS\");\n+      Map<String, Object> domainMap = domain.getDomainMap();\n+      //ToDo: access MS using port given in the configmap props\n+\n+      // config map after deploying domain crd\n+      String cmName = domainMap.get(\"domainUID\") + \"-mii-config-map2\";\n+      String cmFile = getResultDir() + \"/samples/model-in-image/model.cm.properties\";\n+      TestUtils.createConfigMap(cmName, cmFile, domainNS,\n+          \" weblogic.domainUID=\" + domainMap.get(\"domainUID\"));\n+\n+      // update domain yaml with new config map, restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithNewConfigMapAndDomainRestartVersion(\n+          cmName, domain);\n+      LoggerHelper.getLocal().log(Level.INFO, \"Verifying if the domain is restarted\");\n+      domain.verifyDomainRestarted();\n+      //ToDo: access MS using port given in the new configmap props\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  /**\n+   * Negative test. overridesConfigMap should fail with model in image domain.\n+   * Create a domain using model in image and deploy the domain.\n+   * After deploying the domain, update domain crd with overrides configmap and\n+   * apply the crd.\n+   * Verify that the domain deployment fails with proper error in the operator log.\n+   *\n+   * @throws Exception exception\n+   */\n+  //@Test", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNjYzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399426635", "bodyText": "@vanajamukkara This one is for you.", "author": "tbarnes-us", "createdAt": "2020-03-27T17:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDY5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402394695", "bodyText": "The test was not fully developed and tested.", "author": "vanajamukkara", "createdAt": "2020-04-02T15:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNjA1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402526053", "bodyText": "Let's remove it then", "author": "rjeberhard", "createdAt": "2020-04-02T18:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNTY1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402535653", "bodyText": "ok", "author": "vanajamukkara", "createdAt": "2020-04-02T18:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNjYwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396736603", "bodyText": "What will be the content of this config map?", "author": "rjeberhard", "createdAt": "2020-03-23T20:28:49Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,28 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**\n+   * create configmap in the given namespace. Also creates label.\n+   * @param cmName\n+   * @param fileOrDirPath\n+   * @param namespace\n+   * @throws Exception\n+   */\n+  public static void createConfigMap(String cmName, String fileOrDirPath,", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODU2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402358565", "bodyText": "@vanajamukkara ?", "author": "tbarnes-us", "createdAt": "2020-04-02T14:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNjYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MDg5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402390890", "bodyText": "creates config map from the file or files given as input", "author": "vanajamukkara", "createdAt": "2020-04-02T15:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNjYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNzQ3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396737475", "bodyText": "What is model-in-image using PV mount for?", "author": "rjeberhard", "createdAt": "2020-03-23T20:30:21Z", "path": "integration-tests/src/test/resources/model-in-image/create-domain-inputs.yaml", "diffHunk": "@@ -0,0 +1,167 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# The version of this inputs file.  Do not modify.\n+version: create-weblogic-sample-domain-inputs-v1\n+\n+# Port number for admin server\n+adminPort: 7001\n+\n+# Name of the Admin Server\n+adminServerName: admin-server\n+\n+# Unique ID identifying a domain.\n+# This ID must not contain an underscope (\"_\"), and must be lowercase and unique across all domains\n+# in a Kubernetes cluster.\n+domainUID: domain1\n+\n+# Determines which WebLogic Servers the operator will start up\n+# Legal values are \"NEVER\", \"IF_NEEDED\", or \"ADMIN_ONLY\"\n+serverStartPolicy: IF_NEEDED\n+\n+# Cluster name\n+clusterName: cluster-1\n+\n+# Number of managed servers to generate for the domain\n+configuredManagedServerCount: 5\n+\n+# Number of managed servers to initially start for the domain\n+initialManagedServerReplicas: 2\n+\n+# Base string used to generate managed server names\n+managedServerNameBase: managed-server\n+\n+# Port number for each managed server\n+managedServerPort: 8001\n+\n+# Boolean indicating if production mode is enabled for the domain\n+productionModeEnabled: true\n+\n+# Name of the image for the created model in image. With Model In Image, WDT models, WDT\n+# archives and WDT install can be included in the image. Additional models and variable\n+# files can be provided using kubernetes config map.\n+# If this property is set, the create domain scripts will use the value specified, instead of the\n+# default value, to tag the generated image and set the `image` in the domain YAML file.\n+#\n+# A unique value is required for each domain that is created using the scripts.\n+#\n+# If you are running the sample scripts from a machine that is remote to the Kubernetes cluster where\n+# the domain is going to be running, you need to set this property to the image name that is intended\n+# to be used in a registry local to that Kubernetes cluster. You also need to push the `image` to\n+# that registry before starting the domain using the `kubectl create -f` or `kubectl apply -f` command.\n+# See README.md for more help.\n+image: model-in-image:v1\n+\n+# Image pull policy\n+# Legal values are \"IfNotPresent\", \"Always\", or \"Never\"\n+imagePullPolicy: IfNotPresent\n+\n+# Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image\n+# The presence of the secret will be validated when this parameter is enabled.\n+#imagePullSecretName:\n+\n+# Name of the Kubernetes secret for the Admin Server's username and password\n+# The name must be lowercase.\n+# If not specified, the value is derived from the domainUID as <domainUID>-weblogic-credentials\n+weblogicCredentialsSecretName: domain1-weblogic-credentials\n+\n+# Whether to include server .out to the pod's stdout.\n+# The default is true.\n+includeServerOutInPodLog: true\n+\n+# Specifies whether the log home is stored on the persistent volume.\n+# If set to true, then you must specify the 'logHome', 'persistentVolumeClaimName'\n+# and 'domainPVMountPath' properties.\n+# The default is false.\n+logHomeOnPV: false\n+\n+# The in-pod location for domain log, server logs, server out, and node manager log files\n+# If not specified, the value is derived from the domainUID as /shared/logs/<domainUID>\n+# This parameter is required if 'logHomeOnPV' is true.\n+# Otherwise, it is ignored.\n+logHome: /shared/logs/domain1\n+\n+# An (optional) in-pod location for data storage of default and custom file stores.\n+# If not specified or the value is either not set or empty (e.g. dataHome: \"\") then the\n+# data storage directories are determined from the WebLogic domain home configuration.\n+#dataHome:\n+\n+# Port for the T3Channel of the NetworkAccessPoint\n+t3ChannelPort: 30012\n+\n+# Public address for T3Channel of the NetworkAccessPoint.  This value should be set to the\n+# kubernetes server address, which you can get by running \"kubectl cluster-info\".  If this\n+# value is not set to that address, WLST will not be able to connect from outside the\n+# kubernetes cluster.\n+#t3PublicAddress: \n+\n+# Boolean to indicate if the channel should be exposed as a service\n+exposeAdminT3Channel: false\n+\n+# NodePort to expose for the admin server\n+adminNodePort: 30701\n+\n+# Boolean to indicate if the adminNodePort will be exposed\n+exposeAdminNodePort: false\n+\n+# Name of the domain namespace\n+namespace: default\n+\n+# Java Option for WebLogic Server\n+javaOptions: -Dweblogic.StdoutDebugEnabled=false\n+\n+# Name of the persistent volume claim\n+# If not specified, the value is derived from the domainUID as <domainUID>-weblogic-sample-pvc\n+# This parameter is required if 'logHomeOnPV' is true.\n+# Otherwise, it is ignored.\n+persistentVolumeClaimName: domain1-weblogic-sample-pvc\n+\n+# Mount path of the domain persistent volume.\n+# This parameter is required if 'logHomeOnPV' is true.\n+# Otherwise, it is ignored.\n+domainPVMountPath: /shared", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNjk5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399426991", "bodyText": "@vanajamukkara This one is for you.  I assume it's using it for the logs, right?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNzQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MzMwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402393300", "bodyText": "yes, for logs", "author": "vanajamukkara", "createdAt": "2020-04-02T15:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNzQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczOTIxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396739219", "bodyText": "Not a comment on this file... What is model.empty.properties below?", "author": "rjeberhard", "createdAt": "2020-03-23T20:33:30Z", "path": "integration-tests/src/test/resources/model-in-image/model.cm.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+# Copyright 2019, Oracle Corporation and/or its affiliates. All rights reserved.\n+# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.\n+#\n+\n+MANSVR_PORT=9001", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MDA4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396740088", "bodyText": "Why is this commented out?", "author": "rjeberhard", "createdAt": "2020-03-23T20:35:08Z", "path": "integration-tests/src/test/resources/model-in-image/sample_app/wlsdeploy/applications/sample_war/WEB-INF/web.xml", "diffHunk": "@@ -0,0 +1,34 @@\n+<web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\" version=\"2.4\">\r\n+\r\n+<!--\r", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNjgyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397416821", "bodyText": "Removed from sample descriptor", "author": "jshum2479", "createdAt": "2020-03-24T19:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MDA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MDI1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396740257", "bodyText": "Same.  Why is this commented out?", "author": "rjeberhard", "createdAt": "2020-03-23T20:35:28Z", "path": "integration-tests/src/test/resources/model-in-image/sample_app/wlsdeploy/applications/sample_war/WEB-INF/weblogic.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+\r\n+<weblogic-web-app xmlns=\"http://www.bea.com/ns/weblogic/90\">\r\n+  <session-descriptor>\r\n+     <timeout-secs>15</timeout-secs>\r\n+     <invalidation-interval-secs>60</invalidation-interval-secs>\r\n+  </session-descriptor>\r\n+  <jsp-descriptor>\r\n+    <page-check-seconds>1</page-check-seconds>\r\n+    <verbose>true</verbose>\r\n+  </jsp-descriptor>\r\n+    <!--\r", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzUwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399427506", "bodyText": "@jshum2479 ?", "author": "tbarnes-us", "createdAt": "2020-03-27T17:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MDI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4ODExMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402388113", "bodyText": "already removed", "author": "jshum2479", "createdAt": "2020-04-02T15:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MDI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MjQxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396742412", "bodyText": "I think there is a paradigm for relative links I saw earlier... Might be less cumbersome than this.", "author": "rjeberhard", "createdAt": "2020-03-23T20:39:28Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/README.md", "diffHunk": "@@ -0,0 +1,9 @@\n+# Model in Image Sample\n+\n+This sample demonstrates the WebLogic Kubernetes Operator \"Model in Image\" feature. Model in Image allows you to supply a Weblogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime. This eliminates the need to pre-create a WebLogic domain home prior to deploying your domain resource.\n+\n+# References\n+\n+- Sample doc: [source](../../../../../docs-source/content/samples/simple/domains/model-in-image/_index.md), [latest public](https://oracle.github.io/weblogic-kubernetes-operator/samples/simple/domains/model-in-image).", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NDg1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396744859", "bodyText": "Conflicted... latest is good for a sample, but I'd really like to specify my versions more easily.", "author": "rjeberhard", "createdAt": "2020-03-23T20:44:10Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build_download.sh", "diffHunk": "@@ -0,0 +1,81 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. All rights reserved.\n+# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.\n+\n+#\n+# This script downloads the latest WebLogic Deploy Tool and WebLogic Image Tool \n+# to the WORKDIR directory.\n+#\n+# Expects the following env vars to already be set:\n+#    \n+#    WORKDIR \n+#      working directory for the sample with at least 10g of space\n+#\n+# Optional env vars:\n+#    http_proxy https_proxy\n+#      If running behind a proxy, then set as needed to allow curl access to github.com.\n+#\n+#    DOWNLOAD_WDT DOWNLOAD_WIT\n+#      Default to 'when-missing'. Set to 'always' to force download even\n+#      if local installer zip is missing.\n+#\n+#    WDT_INSTALLER_URL WIT_INSTALLER_URL\n+#      Defaults to 'https://github.com/oracle/weblogic-deploy-tooling/releases/latest'\n+#      and 'https://github.com/oracle/weblogic-image-tool/releases/latest' respectively.\n+#\n+#      To override an installer URL, export the URL env to point to a specific zip file, for example:\n+#      export WDT_INSTALLER_URL=https://github.com/oracle/weblogic-deploy-tooling/releases/download/weblogic-deploy-tooling-1.7.0/weblogic-deploy.zip\n+#\n+\n+set -o pipefail\n+\n+set -eu\n+\n+SCRIPTDIR=\"$( cd \"$(dirname \"$0\")\" > /dev/null 2>&1 ; pwd -P )\"\n+echo \"@@ Info: Running '$(basename \"$0\")'.\"\n+\n+cd ${WORKDIR}\n+\n+DOWNLOAD_WIT=${DOWNLOAD_WIT:-when-missing}\n+DOWNLOAD_WDT=${DOWNLOAD_WDT:-when-missing}\n+WDT_INSTALLER_URL=${WDT_INSTALLER_URL:-https://github.com/oracle/weblogic-deploy-tooling/releases/latest}", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MjMyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397482324", "bodyText": "You already can specify a specific version by specifying the full URL to the installer - instructions are in the description comments above for WDT_INSTALLER_URL and WIT_INSTALLER_URL.", "author": "tbarnes-us", "createdAt": "2020-03-24T21:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NDg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MDg1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397540858", "bodyText": "@rjeberhard Please resolve this if you think it's OK. Otherwise provide more feedback. Thanks.", "author": "tbarnes-us", "createdAt": "2020-03-25T00:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NDg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTY1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396745652", "bodyText": "docker -> Docker", "author": "rjeberhard", "createdAt": "2020-03-23T20:45:46Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build_image_model.sh", "diffHunk": "@@ -0,0 +1,133 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. All rights reserved.\n+# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.\n+\n+#  This script uses the WebLogic Image Tool to build a docker image with model in image", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODU5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397218593", "bodyText": "Fixed.", "author": "rosemarymarano", "createdAt": "2020-03-24T14:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTk5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396745998", "bodyText": "Add a comma, \"Optionally,\"", "author": "rjeberhard", "createdAt": "2020-03-23T20:46:31Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build_image_model.sh", "diffHunk": "@@ -0,0 +1,133 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. All rights reserved.\n+# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.\n+\n+#  This script uses the WebLogic Image Tool to build a docker image with model in image\n+#  artifacts. By default, it uses the base image obtained earlier with build_image_base.sh,\n+#  and it gets model files from the WORKDIR/models directory that was setup by the build_model.sh script.\n+#\n+#  The model image is named MODEL_IMAGE_NAME:MODEL_IMAGE_TAG.  See build_init_image.sh for\n+#  the defaults for these values.\n+#  \n+#  Assumptions:\n+#\n+#    This script should be called by build.sh.  \n+#    The WebLogic Image Tool is downloaded to WORKDIR/weblogic-image-tool.zip (see ./build_download.sh).\n+#    The WebLogic Deploy Tool is downloaded to WORKDIR/weblogic-deploy-tooling.zip (see ./build_download.sh).\n+#    Model files have been staged in the \"WORKDIR/models\" directory (see ./build_model.sh) or\n+#    MODEL_DIR has been explicitly set to point to a different location.\n+#\n+#  Required environment variables:\n+#\n+#    WORKDIR - working directory for the sample with at least 10g of space\n+#\n+#  Optional environment variables:\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied in to the image.  Default is 'WORKDIR/models'\n+#      which is populated by the ./build_model.sh script.\n+#\n+#    MODEL_YAML_FILES, MODEL_ARCHIVE_FILES, MODEL_VARIABLES_FILES:\n+#      Optionally set one or more of these with comma-separated lists of file", "originalCommit": "2b01c3744a72e136023f270c573a225024a3a128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxOTEzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397219137", "bodyText": "Done.", "author": "rosemarymarano", "createdAt": "2020-03-24T14:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTk5OA=="}], "type": "inlineReview"}, {"oid": "2fba221ce914a4203a00686a377dd8e9ba04b2ee", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2fba221ce914a4203a00686a377dd8e9ba04b2ee", "message": "first draft update of 'choosing a model' doc", "committedDate": "2020-03-23T20:48:12Z", "type": "commit"}, {"oid": "fb00e30046ed7f08cd6847a6810ebe7cae7e3086", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fb00e30046ed7f08cd6847a6810ebe7cae7e3086", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-23T20:48:32Z", "type": "commit"}, {"oid": "89880074649148f0d832e0b96163913ef9baf5f9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/89880074649148f0d832e0b96163913ef9baf5f9", "message": "first draft update of 'choosing a model' doc", "committedDate": "2020-03-23T20:52:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjY4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396752685", "bodyText": "Why is this commented?", "author": "rjeberhard", "createdAt": "2020-03-23T20:59:06Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample_app/wlsdeploy/applications/sample_war/WEB-INF/web.xml", "diffHunk": "@@ -0,0 +1,34 @@\n+<web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\" version=\"2.4\">\r\n+\r\n+<!--\r", "originalCommit": "89880074649148f0d832e0b96163913ef9baf5f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNTM0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397415345", "bodyText": "removed from sample descriptor", "author": "jshum2479", "createdAt": "2020-03-24T19:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1Mjg0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396752843", "bodyText": "Why is this commented?", "author": "rjeberhard", "createdAt": "2020-03-23T20:59:22Z", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample_app/wlsdeploy/applications/sample_war/WEB-INF/weblogic.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+\r\n+<weblogic-web-app xmlns=\"http://www.bea.com/ns/weblogic/90\">\r\n+  <session-descriptor>\r\n+     <timeout-secs>15</timeout-secs>\r\n+     <invalidation-interval-secs>60</invalidation-interval-secs>\r\n+  </session-descriptor>\r\n+  <jsp-descriptor>\r\n+    <page-check-seconds>1</page-check-seconds>\r\n+    <verbose>true</verbose>\r\n+  </jsp-descriptor>\r\n+    <!--\r", "originalCommit": "89880074649148f0d832e0b96163913ef9baf5f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNTE5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397415191", "bodyText": "Removed from sample descriptor.", "author": "jshum2479", "createdAt": "2020-03-24T19:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1Mjg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyOTgzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399429836", "bodyText": "@jshum2479 I still see the comment.  Please explain why it needs to remain, or remove it and resolve this comment.", "author": "tbarnes-us", "createdAt": "2020-03-27T17:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1Mjg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4ODYzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r402388637", "bodyText": "already removed", "author": "jshum2479", "createdAt": "2020-04-02T15:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1Mjg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzQ1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396757456", "bodyText": "Don't use getAdminServerSpec().  This could be info.getDomain().getSpec().getRestartVersion();", "author": "rjeberhard", "createdAt": "2020-03-23T21:07:54Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java", "diffHunk": "@@ -380,6 +401,27 @@ public NextAction apply(Packet packet) {\n         ScanCache.INSTANCE.registerScan(\n             info.getNamespace(), info.getDomainUid(), new Scan(wlsDomainConfig, new DateTime()));\n         packet.put(ProcessingConstants.DOMAIN_TOPOLOGY, wlsDomainConfig);\n+        if (miiDomainZipHash != null) {\n+          packet.put(ProcessingConstants.DOMAIN_HASH, miiDomainZipHash);\n+        }\n+        if (miiModelSecretsHash != null) {\n+          packet.put(ProcessingConstants.SECRETS_HASH, miiModelSecretsHash);\n+        }\n+        String domainRestartVersion = info.getDomain().getAdminServerSpec().getDomainRestartVersion();", "originalCommit": "89880074649148f0d832e0b96163913ef9baf5f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2ODkzNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396768934", "bodyText": "There is no getRestartVersion in the spec.The restartVersion is in the server spec.", "author": "jshum2479", "createdAt": "2020-03-23T21:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NTIyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396775226", "bodyText": "I checked... you are incorrect ;).  It's in the base class.", "author": "rjeberhard", "createdAt": "2020-03-23T21:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1NjYzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397256632", "bodyText": "Okay, I figured out what I'd missed before.  The field restartVersion is on base config because you can have different values at the domain level, cluster, or on a specific server.  But introspectVersion is only at top-level.  I have a fix for what I'm thinking.", "author": "rjeberhard", "createdAt": "2020-03-24T15:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNDkwNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397414907", "bodyText": "Thanks", "author": "jshum2479", "createdAt": "2020-03-24T19:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMDIzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r399430237", "bodyText": "@rjeberhard Please resolve this comment if/when the fix is in place.", "author": "tbarnes-us", "createdAt": "2020-03-27T17:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1ODE2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396758167", "bodyText": "I don't understand this logic.", "author": "rjeberhard", "createdAt": "2020-03-23T21:09:18Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java", "diffHunk": "@@ -388,9 +430,29 @@ public NextAction apply(Packet packet) {\n             new SitConfigMapContext(\n                 this, info.getDomainUid(), getOperatorNamespace(), info.getNamespace(), data);\n \n+        // Cannot short circuit here\n+        //\n+        if (updateDomainResult != null) {\n+          LOGGER.fine(\"ConfigMapHelper:updateDomainResult \" + updateDomainResult);\n+          if (updateDomainResult.equals(\"0\")) {\n+            LOGGER.fine(\"ConfigMapHelper apply: short circuit finished online update\");\n+            packet.setDynamicUpdate(true);", "originalCommit": "89880074649148f0d832e0b96163913ef9baf5f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2ODA1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396768051", "bodyText": "Removed the code, they are for online update", "author": "jshum2479", "createdAt": "2020-03-23T21:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1ODE2Nw=="}], "type": "inlineReview"}, {"oid": "7967bdeabeb5e6379e3b3b14603944f0cd5adacb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7967bdeabeb5e6379e3b3b14603944f0cd5adacb", "message": "Remove updateDomainResult - dynamic update code", "committedDate": "2020-03-23T21:33:09Z", "type": "commit"}, {"oid": "fcad13b588791c61f93fbce6f9fada5f22dab504", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fcad13b588791c61f93fbce6f9fada5f22dab504", "message": "doc updated", "committedDate": "2020-03-23T21:54:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4NzM4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396787385", "bodyText": "Tom: Add the usual warnings about exposing the console.", "author": "tbarnes-us", "createdAt": "2020-03-23T22:11:23Z", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -0,0 +1,520 @@\n+---\n+title: \"Model in image\"\n+date: 2019-02-23T17:32:31-05:00\n+weight: 4\n+description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator automatically expands into a full domain home during runtime.\"\n+---\n+\n+### Contents\n+\n+  - [Introduction](#introduction)\n+  - [References](#references)\n+  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n+    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n+    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n+    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n+  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n+  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n+  - [Optionally test the sample application](#optionally-test-the-sample-application)\n+  - [Optionally access the WebLogic console](#optionally-access-the-weblogic-console)\n+  - [Cleanup](#cleanup)\n+\n+### Introduction\n+\n+This sample demonstrates:\n+\n+  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and a WebLogic domain that's defined using a WDT model file.\n+  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n+  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n+  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n+  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+\n+Supported domain types:\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+\n+The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be  used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+\n+### References\n+\n+To reference the relevant user documentation, see:\n+ - [Model in Image User Guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n+ - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n+ - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n+\n+\n+\n+### Prerequisites for all domain types\n+\n+1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+\n+2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+\n+   ```\n+   mkdir ~/wlopsrc\n+   cd ~/wlopsrc\n+   git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n+   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+   ```\n+\n+   For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+\n+3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+\n+   ```\n+   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   ```\n+\n+4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+\n+   ```\n+   cd <location of empty temporary directory with 10g of space>\n+   export WORKDIR=$(pwd)\n+   ```\n+\n+5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   Note that:\n+   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n+   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+\n+\n+6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+\n+   ```\n+   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   ```\n+\n+7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+\n+   - __Option 1, download an existing WebLogic image.__\n+\n+     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+\n+     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+\n+     b. Choose an image location:\n+       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n+       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+\n+     c. Select Sign In and accept the license agreement.\n+\n+     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+\n+     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n+       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n+       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+\n+   - __Option 2, create your own WebLogic base image.__\n+\n+     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+\n+8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains). You can do this step before or after you create your final image. If you're not using a `JRF` domain type, proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image).\n+\n+### Prerequisites for JRF domains\n+\n+> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+\n+A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+\n+Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+\n+The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+\n+  1. [Set up and initialize an RCU database](#set-up-and-initialize-an-rcu-database).\n+  2. [Increase introspection job timeout](#increase-introspection-job-timeout).\n+  3. [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets).\n+  4. [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables).\n+\n+\n+\n+##### Set up and initialize an RCU database\n+\n+A JRF domain requires an infrastructure database and also requires initializing this database with a schema and a set of tables. The following example shows how to set up a sample RCU database and use the RCU tool to create the infrastructure schema for a JRF domain. The RCU database is set up with the following attributes:\n+\n+| Attribute | Value |\n+| --------- | ----- |\n+| database Kubernetes namespace | `default` |\n+| database Kubernetes pod | `oracle-db` |\n+| database image | `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` |\n+| database password | `Oradoc_db1` |\n+| infrastructure schema prefix | `FMW1` |\n+| infrastructure schema password | `Oradoc_db1` |\n+| database URL | `oracle-db.default.svc.cluster.local:1521/devpdb.k8s` |\n+\n+\n+1. Ensure you have access to the database image, and then deploy it:\n+\n+   - Use a browser to log in to `https://container-registry.oracle.com`, select `database->enterprise` and accept the license agreement.\n+\n+   - Get the database image:\n+     - In the local shell, `docker login container-registry.oracle.com`.\n+     - In the local shell, `docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim`.\n+\n+\n+       {{% notice note %}} If a local Docker login and manual pull of `container-registry.oracle.com/database/enterprise:12.2.0.1-slim` is not sufficient (for example, if you are using a remote Kubernetes cluster), then uncomment the `imagePullSecrets` stanza in `$WORKDIR/k8s-db-slim.yaml` and create the image pull secret as follows:\n+\n+              ```\n+              kubectl create secret docker-registry regsecret \\\n+                --docker-server=container-registry.oracle.com \\\n+                --docker-username=your.email@some.com \\\n+                --docker-password=your-password \\\n+                --docker-email=your.email@some.com\n+              ```\n+       {{% /notice %}}\n+\n+\n+   - Use the sample script in `$SRCDIR/kubernetes/samples/scripts/create-oracle-db-service` to create an Oracle database running in the pod, `oracle-db`.\n+\n+      **NOTE**: If your database image access requires the `regsecret` image pull secret that you optionally created above, then pass `-s regsecret` to the `start-db-service.sh` command line.\n+\n+     ```\n+     cd $SRCDIR/kubernetes/samples/scripts/create-oracle-db-service\n+     start-db-service.sh\n+     ```\n+\n+     This script will deploy a database with the URL, `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`, and administration password, `Oradoc_db1`.\n+\n+     {{% notice warning %}} The Oracle database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1) : All the data is gone when the database is restarted.\n+     {{% /notice %}}\n+\n+     **NOTE**: This step is based on the steps documented in [Run a Database](https://oracle.github.io/weblogic-kubernetes-operator/userguide/overview/database/).\n+\n+2. Use the sample script in `SRCDIR/kubernetes/samples/scripts/create-rcu-schema` to create the RCU schema with the schema prefix `FMW1`.\n+\n+   Note that this script assumes `Oradoc_db1` is the DBA password, `Oradoc_db1` is the schema password, and that the database URL is `oracle-db.default.svc.cluster.local:1521/devpdb.k8s`.\n+\n+   ```\n+   cd $SRCDIR/kubernetes/samples/scripts/create-rcu-schema\n+   ./create-rcu-schema.sh -s FMW1 -i container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n+   ```\n+\n+   __NOTE__:  If you need to drop the repository, use this command:\n+\n+   ```\n+   drop-rcu-schema.sh -s FMW1\n+   ```\n+\n+\n+##### Increase introspection job timeout\n+\n+Because JRF domain home creation takes a considerable amount of time the first time it is created, and because Model in Image creates your domain home for you using the introspection job, you should increase the timeout for the introspection job. Use the `configuration.introspectorJobActiveDeadlineSeconds` in `k8s-domain.yaml.template` to override the default with a value of at least 300 seconds (the default is 120 seconds).  \n+\n+##### Set up RCU model attributes, domain resource attributes, and secrets\n+\n+To allow Model in Image to access the RCU database and OPSS wallet, it's necessary to set up an RCU access secret and an OPSS secret before deploying your domain. It's also necessary to define an `RCUDbInfo` stanza in your model. The sample already sets up all of these for you.  See:\n+\n+| Sample file | Description |\n+| --------- | ----- |\n+| `run_domain.sh` | Defines secret, `sample-domain1-opss-wallet-password-secret`, with `password=welcome1`. |\n+| `run_domain.sh` | Defines secret, `sample-domain1-rcu-access`, with appropriate values for attributes `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string`. |\n+| `model1.yaml.jrf` | Populates the `domainInfo -> RCUDbInfo` stanza `rcu_prefix`, `rcu_schema_password`, and `rcu_db_conn_string` attributes by referencing their locations in the `sample-domain1-rcu-access` secret. The `build.sh` script uses this model instead of `model.yaml.wls` when the source domain type is `JRF`. |\n+| `k8s-domain.yaml.template` | Ensures that the domain mounts the OPSS key secret by setting the domain resource `configuration.opss.walletPasswordSecret` attribute to `sample-domain1-opss-wallet-password-secret`, and ensures the domain mounts the RCU access secret, `sample-domain1-rcu-access`, for reference by WDT model macros by setting the domain resource `configuration.secrets` attribute. Use configuration.introspectorJobActiveDeadlineSeconds to increase the timeout value of the introspector job; see [Increase introspection job timeout](#increase-introspection-job-timeout). |\n+\n+ **NOTE**: This step is for information purposes only. Do not run the above sample files directly. The sample's main build and run scripts will run them for you.\n+\n+##### Reusing or sharing RCU tables\n+\n+Note that when you succesfully deploy your JRF domain resource for the first time, the introspector job will initialize the RCU tables for the domain using the `domainInfo -> RCUDbInfo` stanza in the WDT model plus the `configuration.opss.walletPasswordSecret` specified in the domain resource. The job will also create a new domain home. Finally, the operator will also capture an OPSS wallet file from the new domain's local directory and place this file in a new Kubernetes config map.\n+\n+There are scenarios when the domain needs to be re-created between updates such as WebLogic credentials are changed, security roles defined in the WDT model have been changed or you want to share the same RCU tables with different domains.  Under these scenarios, the operator needs the `walletPasswordSecret` as well as the OPSS wallet file, together with the exact information in `domainInfo -> RCUDbInfo` so that the domain can be re-created and access the same set of RCU tables.  Without the wallet file and wallet password, you will not be able to re-create a domain accessing the same set of RCU tables, therefore it is highly recommended to backup the wallet file.\n+\n+To recover a domain's RCU tables between domain restarts or to share an RCU schema between different domains, it is necessary to extract this wallet file from the config map and save the OPSS wallet password secret that was used for the original domain. The wallet password and wallet file are needed again when you recreate the domain or share the database with other domains.\n+\n+To save the wallet file:\n+\n+```\n+    opss_wallet_util.sh -s [-wf <name of the wallet file. Default ./ewallet.p12>]\n+```\n+\n+You should back up this file to a safe location that can be retrieved later.\n+\n+To reuse the wallet for subsequent redeployments or share the RCU tables between different domains:\n+\n+1. Store the wallet in a secret:\n+\n+```\n+    opss_wallet_util.sh -r [-wf <name of the wallet file. Default ./ewallet.p12>] [-ws <name of the secret. Default DOMAIN_UID-opss-walletfile-secret> ]\n+\n+```\n+\n+2. Modify the domain resource YAML file to provide the secret names:\n+\n+```\n+  configuration:\n+    opss:\n+      # Name of secret with walletPassword for extracting the wallet\n+      walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n+      # Name of secret with walletFile containing base64 encoded opss wallet\n+      walletFileSecret: sample-domain1-opss-walletfile-secret\n+\n+```\n+\n+See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n+\n+### Use the WebLogic Image Tool to create an image\n+\n+Model in Image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+\n+  - Uses `docker pull` to obtain a base image. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n+  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n+  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n+    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n+    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n+  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n+    - Builds the final image as a layer on the base image.\n+    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n+    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+\n+The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/build.sh\n+  ```\n+\n+If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+\n+1.  Tag the image for the remote Docker registry, for example:\n+\n+```\n+docker tag <image-name>:<tag> <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+2.  Push the image to the remote Docker registry, for example:\n+\n+```\n+docker push <region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>:<tag>\n+```\n+\n+3. Create the pull secret for the remote Docker registry:\n+\n+```\n+ kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n+     --docker-server=<region-key>.ocir.io/<tenancy-namespace>/<repo-name> \\\n+     --docker-username=your.email@some.com \\\n+     --docker-password=your-password \\\n+     --docker-email=your.email@some.com\n+\n+```\n+\n+4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+\n+```\n+  imagePullSecrets:\n+  - name: <secret name>\n+\n+```\n+\n+5. Export the environment variables for the image name and tag using the same values in step 1:\n+\n+```\n+export MODEL_IMAGE_NAME=\"<region-key>.ocir.io/<tenancy-namespace>/<repo-name>/<image-name>\"\n+export MODEL_IMAGE_TAG=\"<tag>\"\n+```\n+\n+### Create and deploy your Kubernetes resources\n+\n+To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+\n+  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n+  - Creates a secret containing your WebLogic administrator user name and password.\n+  - Creates a secret containing your Model in Image runtime encryption password:\n+    - All model-in-image domains must supply a runtime encryption secret with a `password` value.\n+    - It is used to encrypt configuration that is passed around internally by the Operator.\n+    - The value must be kept private but can be arbitrary: you can optionally supply a different secret value every time you restart the domain.\n+  - Creates secrets containing your RCU access URL, credentials, and prefix (these are unused unless the domain type is `JRF`).\n+  - Creates a config map containing an additional WDT model properties file, `$SAMPLEDIR/model1.20.properties`.\n+  - Generates a domain resource YAML file, `$WORKDIR/k8s-domain.yaml`, using `$SAMPLEDIR/k8s-domain.yaml.template`.\n+  - Deploys `k8s-domain.yaml`.\n+  - Displays the status of the domain pods.\n+\n+The script expects `WDT_DOMAIN_TYPE` and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+\n+Run the script:\n+\n+  ```\n+  $SAMPLEDIR/run_domain.sh\n+  ```\n+\n+At the end, you will see the message `Getting pod status - ctrl-c when all is running and ready to exit`. Then you should see a WebLogic Administration Server and two Managed Server pods start. After all the pods are up, you can use `ctrl-c` to exit the build script.\n+\n+\n+### Optionally test the sample application\n+\n+1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+\n+2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+\n+   For Helm 2.x:\n+\n+   ```\n+   cd $SRCDIR\n+   $ helm install kubernetes/samples/charts/ingress-per-domain \\\n+     --name sample-domain1-ingress \\\n+     --namespace sample-domain1-ns \\\n+     --set wlsDomain.domainUID=sample-domain1 \\\n+     --set traefik.hostname=sample-domain1.org\n+   ```\n+\n+   For Helm 3.x:\n+\n+   ```\n+   cd $SRCDIR\n+   helm install sample-domain1-ingress kubernetes/samples/charts/ingress-per-domain \\\n+    --namespace sample-domain1-ns \\\n+    --set wlsDomain.domainUID=sample-domain1 \\\n+    --set traefik.hostname=sample-domain1.org\n+   ```\n+\n+   This creates an Kubernetes Ingress that helps route HTTP traffic from the Traefik load balancer's external port 30305 to the WebLogic domain's `cluster-1` 8001 port. Note that the WDT config map in this sample changes the cluster's port from 9001 to 8001 (9001 is the original port configured using the WDT model defined within in the image).\n+\n+3. Send a web application request to the load balancer:\n+\n+   ```\n+   curl -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/sample_war/index.jsp\n+   ```\n+\n+   You should see something like the following:\n+\n+   ```\n+   Hello World, you have reached server managed-server1\n+   ```\n+\n+   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+\n+4. Send a ReadyApp request to the load balancer (ReadyApp is a built-in WebLogic Server application):\n+\n+   ```\n+   curl -v -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/weblogic/ready\n+   ```\n+\n+   You should see something like the following:\n+\n+\n+   ```\n+   * About to connect() to myhost.my.dns.domain.name port 30305 (#0)\n+   *   Trying 100.111.142.32...\n+   * Connected to myhost.my.dns.domain.name (100.111.142.32) port 30305 (#0)\n+   > GET /weblogic/ready HTTP/1.1\n+   > User-Agent: curl/7.29.0\n+   > Accept: */*\n+   > host: sample-domain1.org\n+   >\n+   < HTTP/1.1 200 OK\n+   < Content-Length: 0\n+   < Date: Mon, 09 Mar 2020 20:40:37 GMT\n+   < Vary: Accept-Encoding\n+   <\n+   * Connection #0 to host myhost.my.dns.domain.name left intact\n+   ```\n+\n+   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+\n+### Optionally access the WebLogic console", "originalCommit": "89880074649148f0d832e0b96163913ef9baf5f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMDAyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397520023", "bodyText": "done.", "author": "tbarnes-us", "createdAt": "2020-03-24T23:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4NzM4NQ=="}], "type": "inlineReview"}, {"oid": "90de5ca4e8776724d76f719279e18af952281e3a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/90de5ca4e8776724d76f719279e18af952281e3a", "message": "Doc update.", "committedDate": "2020-03-23T22:31:57Z", "type": "commit"}, {"oid": "d59250308b0c502ac901eae564e357db349aeaa9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d59250308b0c502ac901eae564e357db349aeaa9", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-24T14:06:12Z", "type": "commit"}, {"oid": "9b9f67cbe454cc7e40b96eace6eb778b9314384a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9b9f67cbe454cc7e40b96eace6eb778b9314384a", "message": "doc edits from Ryan", "committedDate": "2020-03-24T15:11:29Z", "type": "commit"}, {"oid": "2e5b2dcb5e9f465838d2517a6d6d0227ff4db9fb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2e5b2dcb5e9f465838d2517a6d6d0227ff4db9fb", "message": "clean up sample descriptor", "committedDate": "2020-03-24T15:12:23Z", "type": "commit"}, {"oid": "79d85e037ba57344e1f53e6038c66bf8b99a59c3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/79d85e037ba57344e1f53e6038c66bf8b99a59c3", "message": "Remove mii section from samples domain-template.yaml (#1491)\n\n* undo changes in domain-template.yaml\r\n\r\n* adding mii config file\r\n\r\n* resolve comment merge", "committedDate": "2020-03-24T15:21:22Z", "type": "commit"}, {"oid": "88a5e69e8ae21f94232ea3bd12592ea17c36f7f0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/88a5e69e8ae21f94232ea3bd12592ea17c36f7f0", "message": "Move introspectVersion to spec level only", "committedDate": "2020-03-24T15:51:19Z", "type": "commit"}, {"oid": "07a63758aae716d0ce2868676ddb7dc6ffe18c76", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/07a63758aae716d0ce2868676ddb7dc6ffe18c76", "message": "Update _index.md", "committedDate": "2020-03-24T16:24:50Z", "type": "commit"}, {"oid": "cd8bad94b5633d925fb66a46537ce977be1187a6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cd8bad94b5633d925fb66a46537ce977be1187a6", "message": "Fix inadvertent change", "committedDate": "2020-03-24T16:25:52Z", "type": "commit"}, {"oid": "6086c18bbe83dde3aa5723952e42c8f7bb3ff8ae", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6086c18bbe83dde3aa5723952e42c8f7bb3ff8ae", "message": "Update sample doc for introspectorJobActiveDeadlineSeconds and runtimeEncryptionSecret\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-24T17:04:20Z", "type": "commit"}, {"oid": "03cfb0b64df7a60893e19bb0a11fc80286351290", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/03cfb0b64df7a60893e19bb0a11fc80286351290", "message": "More sample doc update\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-24T17:24:27Z", "type": "commit"}, {"oid": "eae6a8f7792fa5a7709c8aa17f96347b395fde63", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eae6a8f7792fa5a7709c8aa17f96347b395fde63", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-10T15:09:11Z", "type": "commit"}, {"oid": "7bca3faa35908174b6ecd1b44c4490ae4558bc86", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7bca3faa35908174b6ecd1b44c4490ae4558bc86", "message": "Merge remote-tracking branch 'origin' into model-in-image-security", "committedDate": "2020-03-10T15:16:31Z", "type": "commit"}, {"oid": "94e50d5034a5652740da7d8dcacd13fd15b37dda", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/94e50d5034a5652740da7d8dcacd13fd15b37dda", "message": "minor README update", "committedDate": "2020-03-10T16:16:42Z", "type": "commit"}, {"oid": "3d96e2c9d85739b2b903fd65bccc4deeb60705f8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3d96e2c9d85739b2b903fd65bccc4deeb60705f8", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-10T16:16:50Z", "type": "commit"}, {"oid": "f20bb4358ac6a6ccb184736494efe0776faac74a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f20bb4358ac6a6ccb184736494efe0776faac74a", "message": "hugo FAQ link fix", "committedDate": "2020-03-10T16:46:42Z", "type": "commit"}, {"oid": "868e59f7cac44d0e8044b0ca9fdd560ecc0564a0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/868e59f7cac44d0e8044b0ca9fdd560ecc0564a0", "message": "refactor save wallet script 1.", "committedDate": "2020-03-10T17:29:09Z", "type": "commit"}, {"oid": "80c723f617c027038c30c386143809724819e65b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/80c723f617c027038c30c386143809724819e65b", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-10T17:33:53Z", "type": "commit"}, {"oid": "efb2e52edf199097c796454700cf1a0168ff1d26", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/efb2e52edf199097c796454700cf1a0168ff1d26", "message": "Merge remote-tracking branch 'origin' into model-in-image-security", "committedDate": "2020-03-10T18:52:14Z", "type": "commit"}, {"oid": "5cb3d3e60925ac57a19e261d94fe840640efeab7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5cb3d3e60925ac57a19e261d94fe840640efeab7", "message": "Model in image scripts fixes to work on MacOS (#1465)\n\n* Make scripts run on MacOS\r\n\r\n* Remove unnintentional adds", "committedDate": "2020-03-11T16:12:05Z", "type": "commit"}, {"oid": "bd634702758455c61a0d270db8c180046f67263d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bd634702758455c61a0d270db8c180046f67263d", "message": "rename key for secrets", "committedDate": "2020-03-11T16:52:03Z", "type": "commit"}, {"oid": "7eb8af52e3a7b51c93e9e18188085636466cd1c6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7eb8af52e3a7b51c93e9e18188085636466cd1c6", "message": "MII Sample: remove vestigal nginx", "committedDate": "2020-03-11T17:08:10Z", "type": "commit"}, {"oid": "9334288370df68780bd1e0badfd7644f6b9155d5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9334288370df68780bd1e0badfd7644f6b9155d5", "message": "Fix template and script error", "committedDate": "2020-03-11T17:32:28Z", "type": "commit"}, {"oid": "1bf56886250800a1cc848a7090d0d349200f3baf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1bf56886250800a1cc848a7090d0d349200f3baf", "message": "Edit due to key changes", "committedDate": "2020-03-11T17:54:58Z", "type": "commit"}, {"oid": "b4699fe637afec679c5f5ed965cc1fc18eaaab9d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b4699fe637afec679c5f5ed965cc1fc18eaaab9d", "message": "placeholders for MII", "committedDate": "2020-03-11T18:07:06Z", "type": "commit"}, {"oid": "f39edaed58303086cee85b3162406b35b9ff74f5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f39edaed58303086cee85b3162406b35b9ff74f5", "message": "Merge branch 'model-in-image' of\nhttps://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-11T18:08:07Z", "type": "commit"}, {"oid": "25d2b6148d1c46fd3b133c0e6e89f40efc1c96bb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/25d2b6148d1c46fd3b133c0e6e89f40efc1c96bb", "message": "sample fodder for rosemary", "committedDate": "2020-03-11T18:24:11Z", "type": "commit"}, {"oid": "bdfcd300beb0273a7da46f25300d9bbd0d013bc3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bdfcd300beb0273a7da46f25300d9bbd0d013bc3", "message": "Add for debugging merged model", "committedDate": "2020-03-11T19:32:27Z", "type": "commit"}, {"oid": "6c5ab17ffa3e2e53546703aa169980d445bbb6ed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6c5ab17ffa3e2e53546703aa169980d445bbb6ed", "message": "first pass on MII sample content", "committedDate": "2020-03-11T20:42:08Z", "type": "commit"}, {"oid": "ad81cc3e2d33dbeb6466e36c0b07b44568e43155", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ad81cc3e2d33dbeb6466e36c0b07b44568e43155", "message": "name reconciliation", "committedDate": "2020-03-11T20:59:14Z", "type": "commit"}, {"oid": "ce6e505202959bab1e078472e3e5f80fc6359b0d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ce6e505202959bab1e078472e3e5f80fc6359b0d", "message": "update from model-in-image", "committedDate": "2020-03-11T23:00:39Z", "type": "commit"}, {"oid": "12de24541d951e47f7bd57f777f7d32f0f983064", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/12de24541d951e47f7bd57f777f7d32f0f983064", "message": "revert accidental changes", "committedDate": "2020-03-11T23:04:28Z", "type": "commit"}, {"oid": "fc37556398e7da1a5aa1943992d474fa74397e14", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fc37556398e7da1a5aa1943992d474fa74397e14", "message": "mii sample doc edits", "committedDate": "2020-03-11T23:22:06Z", "type": "commit"}, {"oid": "3a0e3e3b9a2029c9af64c02cd47b0abcef05759e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3a0e3e3b9a2029c9af64c02cd47b0abcef05759e", "message": "second round edits", "committedDate": "2020-03-12T11:59:58Z", "type": "commit"}, {"oid": "e4a355279f145d0a520807c4ec5095937efcf68c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e4a355279f145d0a520807c4ec5095937efcf68c", "message": "Update script", "committedDate": "2020-03-12T13:05:14Z", "type": "commit"}, {"oid": "fba4e2731774002650dd936dec9986c787106eda", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fba4e2731774002650dd936dec9986c787106eda", "message": "Add validation, volume and volume mount for runtime encryption secret\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-12T19:03:09Z", "type": "commit"}, {"oid": "0c2bfa85bc72fae074d5ad71bb4ca1c72bd0b8d9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0c2bfa85bc72fae074d5ad71bb4ca1c72bd0b8d9", "message": "Merge branch 'model-in-image-security' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image-security", "committedDate": "2020-03-12T19:04:16Z", "type": "commit"}, {"oid": "d775cc40b97ae95033fd45aacbec0dc5358ad7e4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d775cc40b97ae95033fd45aacbec0dc5358ad7e4", "message": "Merge remote-tracking branch 'origin' into owls-80253-secret-validation", "committedDate": "2020-03-12T19:05:58Z", "type": "commit"}, {"oid": "96890a18f70945c25bb3609366ce2a5bd3b21c5f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/96890a18f70945c25bb3609366ce2a5bd3b21c5f", "message": "Merge branch 'model-in-image-security' into owls-80253-secret-validation\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>\n\nConflicts:\n\tkubernetes/crd/domain-crd.yaml\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/README.md\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/model1.10.properties\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/run_domain.sh\n\toperator/src/main/java/oracle/kubernetes/operator/helpers/JobStepContext.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/Model.java\n\toperator/src/main/resources/scripts/startServer.sh", "committedDate": "2020-03-12T21:15:07Z", "type": "commit"}, {"oid": "33a6ec97cce2fbcb7ce5abf295dee72e4abbb75e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/33a6ec97cce2fbcb7ce5abf295dee72e4abbb75e", "message": "Fix an issue after merge with model-in-image-security\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-12T22:17:13Z", "type": "commit"}, {"oid": "a40edee4201a17de9c8114bac7c3bee37ab66b3c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a40edee4201a17de9c8114bac7c3bee37ab66b3c", "message": "Add part of the changes for runtime secret validation and mount\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-12T23:54:08Z", "type": "commit"}, {"oid": "7143974f715c01e8c343a0cdaf9b0d33afbfd5bf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7143974f715c01e8c343a0cdaf9b0d33afbfd5bf", "message": "Second part of the change\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-13T00:29:31Z", "type": "commit"}, {"oid": "8842d00ccf3f636d780d03780c9073380cbd1af3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8842d00ccf3f636d780d03780c9073380cbd1af3", "message": "Change the sample\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-13T00:37:22Z", "type": "commit"}, {"oid": "c743072c3d513dffa6505bc11334c7179ec39f38", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c743072c3d513dffa6505bc11334c7179ec39f38", "message": "Modify the sample to use the right secret\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-13T00:52:38Z", "type": "commit"}, {"oid": "a9cc1ca8ed9829ada33b3c3eadde7385a2125217", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a9cc1ca8ed9829ada33b3c3eadde7385a2125217", "message": "Fix a typo\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-13T01:07:11Z", "type": "commit"}, {"oid": "3ef8312068a86fe1372cfc2678de86401061290a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3ef8312068a86fe1372cfc2678de86401061290a", "message": "Minor fix\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-13T01:21:50Z", "type": "commit"}, {"oid": "6dc738329a8d1db51e6fd2acd3d3710ffcbbdaff", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6dc738329a8d1db51e6fd2acd3d3710ffcbbdaff", "message": "Fix generated files\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-13T01:25:49Z", "type": "commit"}, {"oid": "f950f052fffe8b1c5b12ae2f40957f042221f248", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f950f052fffe8b1c5b12ae2f40957f042221f248", "message": "pickup changes from model-in-image-security", "committedDate": "2020-03-13T19:19:27Z", "type": "commit"}, {"oid": "8e717d81b9411a230232482e9f5c8513180f62aa", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8e717d81b9411a230232482e9f5c8513180f62aa", "message": "Fixing error message", "committedDate": "2020-03-13T19:23:48Z", "type": "commit"}, {"oid": "362936223cdc0cab435cf98f87996ea7cea320b6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/362936223cdc0cab435cf98f87996ea7cea320b6", "message": "Fix TBD", "committedDate": "2020-03-13T19:39:08Z", "type": "commit"}, {"oid": "d08be4160e1d4ca3c6493b44c1f9ee71ff3905f2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d08be4160e1d4ca3c6493b44c1f9ee71ff3905f2", "message": "remove comments", "committedDate": "2020-03-13T19:46:49Z", "type": "commit"}, {"oid": "0cf6e43a0fa6b6aac30e1228a2b1fc49376e9a7a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0cf6e43a0fa6b6aac30e1228a2b1fc49376e9a7a", "message": "mark README.md as outdated (will remove later)", "committedDate": "2020-03-13T19:50:02Z", "type": "commit"}, {"oid": "dc81bc984bf7cb24fb6f9c3df0451dd2639c3016", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dc81bc984bf7cb24fb6f9c3df0451dd2639c3016", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-13T19:50:17Z", "type": "commit"}, {"oid": "a1cfb7017a659a1f68c96fc857ef91b6d3620be5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a1cfb7017a659a1f68c96fc857ef91b6d3620be5", "message": "final round edits on sample doc", "committedDate": "2020-03-13T20:05:25Z", "type": "commit"}, {"oid": "8f2ecc4778e4049a86e2e2ab97a4b15bcdb1cb66", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8f2ecc4778e4049a86e2e2ab97a4b15bcdb1cb66", "message": "Add validation checks for OPSS secret\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-13T20:09:06Z", "type": "commit"}, {"oid": "7bcd010604d578a0f5745dd463b9891dc633493c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7bcd010604d578a0f5745dd463b9891dc633493c", "message": "Merge remote-tracking branch 'origin/model-in-image' into owls-80253-secret-valid-mount\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>\n\nConflicts:\n\tkubernetes/crd/domain-crd.yaml\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/README.md\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/k8s-domain.yaml.template\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/model1.10.properties\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/run_domain.sh\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/save_ewallet.sh\n\toperator/src/main/java/oracle/kubernetes/operator/helpers/JobStepContext.java\n\toperator/src/main/java/oracle/kubernetes/operator/helpers/StepContextConstants.java\n\toperator/src/main/java/oracle/kubernetes/operator/logging/MessageKeys.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/DomainConfigurator.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/DomainCommonConfigurator.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/Model.java\n\toperator/src/main/resources/Operator.properties\n\toperator/src/main/resources/scripts/introspectDomain.sh\n\toperator/src/main/resources/scripts/modelInImage.sh\n\toperator/src/main/resources/scripts/startServer.sh\n\toperator/src/test/java/oracle/kubernetes/weblogic/domain/model/DomainValidationTest.java", "committedDate": "2020-03-13T22:18:22Z", "type": "commit"}, {"oid": "d511984a04d171d0e1fa608b43d217e9c00bf660", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d511984a04d171d0e1fa608b43d217e9c00bf660", "message": "Minor javadoc fix\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-15T20:40:29Z", "type": "commit"}, {"oid": "a684fb89742b0847e1140bf29fd1a2334e06c65f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a684fb89742b0847e1140bf29fd1a2334e06c65f", "message": "refacto startServer.sh", "committedDate": "2020-03-16T13:36:43Z", "type": "commit"}, {"oid": "158aee8ad6c6bd85780e6506cb0d0ab79796fe89", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/158aee8ad6c6bd85780e6506cb0d0ab79796fe89", "message": "update script and doc", "committedDate": "2020-03-16T14:21:11Z", "type": "commit"}, {"oid": "3da91c47e7c050f3bb603fec49f976cd96c0e542", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3da91c47e7c050f3bb603fec49f976cd96c0e542", "message": "More javadoc changes\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-16T15:40:22Z", "type": "commit"}, {"oid": "a87ecb3a36cef20234c5919af2cbccfb7117c35c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a87ecb3a36cef20234c5919af2cbccfb7117c35c", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-16T15:42:19Z", "type": "commit"}, {"oid": "0a8f4312160f1fc4224c40ee06a57b8eb23ddd00", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0a8f4312160f1fc4224c40ee06a57b8eb23ddd00", "message": "MII sample doc update", "committedDate": "2020-03-16T15:52:00Z", "type": "commit"}, {"oid": "01413620bb1645cd0e6a2ecae06bb54da6684c5c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/01413620bb1645cd0e6a2ecae06bb54da6684c5c", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-16T15:52:18Z", "type": "commit"}, {"oid": "9f08f23931eb2197ea641af11f9d2d81d06e2e75", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9f08f23931eb2197ea641af11f9d2d81d06e2e75", "message": "Fix a merge issue that caused duplicate configuration\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-16T16:44:31Z", "type": "commit"}, {"oid": "90a22c316db347c01feef74220f7a4c7eef42d8d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/90a22c316db347c01feef74220f7a4c7eef42d8d", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-16T16:46:31Z", "type": "commit"}, {"oid": "5521af7dac2b19f7b57f5ffd7a815f9944732d18", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5521af7dac2b19f7b57f5ffd7a815f9944732d18", "message": "MII sample script update", "committedDate": "2020-03-16T17:23:09Z", "type": "commit"}, {"oid": "663273f47103576537d3897f48654ed9fbdd4976", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/663273f47103576537d3897f48654ed9fbdd4976", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-16T17:23:20Z", "type": "commit"}, {"oid": "be9bfd06356a29a54eec419a518b4227a5ef6c25", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/be9bfd06356a29a54eec419a518b4227a5ef6c25", "message": "MII sample script update", "committedDate": "2020-03-16T18:04:57Z", "type": "commit"}, {"oid": "b614f510b69abedae394ea3d798b5eff49678260", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b614f510b69abedae394ea3d798b5eff49678260", "message": "update doc for saving wallet and remote docker registry instructions", "committedDate": "2020-03-16T18:14:14Z", "type": "commit"}, {"oid": "afc8237619c260379570cd0f13ba1aeacb39c08f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/afc8237619c260379570cd0f13ba1aeacb39c08f", "message": "update doc for script name changes", "committedDate": "2020-03-16T19:09:34Z", "type": "commit"}, {"oid": "ccd0e8265d27685a4811fc43c852921c9d7bc232", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ccd0e8265d27685a4811fc43c852921c9d7bc232", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-16T20:17:05Z", "type": "commit"}, {"oid": "7723a2bc9657b642359eb430b454a5f7add06146", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7723a2bc9657b642359eb430b454a5f7add06146", "message": "Add unit test cases\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-16T20:36:26Z", "type": "commit"}, {"oid": "dba57283287cc0a3d6223c3aa83ab0cc7dc1c42f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dba57283287cc0a3d6223c3aa83ab0cc7dc1c42f", "message": "Shorten suffix names", "committedDate": "2020-03-16T21:13:14Z", "type": "commit"}, {"oid": "accdc77f5798cb7910d0f630fa6dfb3d46cced83", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/accdc77f5798cb7910d0f630fa6dfb3d46cced83", "message": "Merge remote-tracking branch 'origin/model-in-image' into owls-80353-opss-secret-valid\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>\n\nConflicts:\n\tdocs/domains/Domain.json\n\tdocs/domains/Domain.md\n\tdocs/domains/index.html\n\tkubernetes/crd/domain-crd.yaml\n\tkubernetes/samples/scripts/create-weblogic-domain/model-in-image/run_domain.sh\n\toperator/src/main/java/oracle/kubernetes/operator/helpers/JobStepContext.java\n\toperator/src/main/java/oracle/kubernetes/operator/helpers/SecretType.java\n\toperator/src/main/java/oracle/kubernetes/operator/logging/MessageKeys.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/DomainConfigurator.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/DomainCommonConfigurator.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/DomainValidationMessages.java\n\toperator/src/main/java/oracle/kubernetes/weblogic/domain/model/Model.java\n\toperator/src/main/resources/Operator.properties\n\toperator/src/main/resources/scripts/startServer.sh\n\toperator/src/test/java/oracle/kubernetes/weblogic/domain/model/DomainValidationTest.java", "committedDate": "2020-03-16T21:18:09Z", "type": "commit"}, {"oid": "c416e143779352a2f833e694bb4429d781e9ed77", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c416e143779352a2f833e694bb4429d781e9ed77", "message": "Fix merge issues\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-16T21:30:04Z", "type": "commit"}, {"oid": "105f114f91f56119e91d8239ac62a3bdd1940db9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/105f114f91f56119e91d8239ac62a3bdd1940db9", "message": "Fix duplicate lines\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-16T21:38:55Z", "type": "commit"}, {"oid": "fd660e80d41615a2d29568284ba1873de2a28759", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fd660e80d41615a2d29568284ba1873de2a28759", "message": "Fix generated files\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-16T21:40:50Z", "type": "commit"}, {"oid": "d7f78aa70622797ffc2b6f936c8af3b4583c1cc3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d7f78aa70622797ffc2b6f936c8af3b4583c1cc3", "message": "Merge remote-tracking branch 'origin/model-in-image' into owls-80353-opss-secret-valid", "committedDate": "2020-03-16T21:46:40Z", "type": "commit"}, {"oid": "aa32b4fbefb5cb8573460a58480037e5ab7bd02d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/aa32b4fbefb5cb8573460a58480037e5ab7bd02d", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-16T22:55:23Z", "type": "commit"}, {"oid": "9f84626bb34a870cd98eafbc0c2d5b98ed3339a2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9f84626bb34a870cd98eafbc0c2d5b98ed3339a2", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-16T22:55:32Z", "type": "commit"}, {"oid": "e85adceadcaab4a7b9c776ebdf93c134a8aff788", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e85adceadcaab4a7b9c776ebdf93c134a8aff788", "message": "refactor and remove prepending the domain name to configmap/secrets volumes", "committedDate": "2020-03-16T23:47:45Z", "type": "commit"}, {"oid": "9fa73acf8f56c9cbef43cb24b82e89744b1ee71b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9fa73acf8f56c9cbef43cb24b82e89744b1ee71b", "message": "Merge remote-tracking branch 'origin/model-in-image' into owls-80353-opss-secret-valid", "committedDate": "2020-03-17T00:39:34Z", "type": "commit"}, {"oid": "04f7a877083a67979b120a7f200d074d39dc4f54", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/04f7a877083a67979b120a7f200d074d39dc4f54", "message": "add back the mounting for existing introspect configmap source for life-cycle update", "committedDate": "2020-03-17T04:26:16Z", "type": "commit"}, {"oid": "fac7ea60344ac6b5ded8512e51e0615570aa9296", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fac7ea60344ac6b5ded8512e51e0615570aa9296", "message": "minor edit", "committedDate": "2020-03-17T13:08:35Z", "type": "commit"}, {"oid": "22e41079723f4ed53bcf29b02ea9031173ad69f9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/22e41079723f4ed53bcf29b02ea9031173ad69f9", "message": "Merge remote-tracking branch 'origin/model-in-image' into owls-80353-opss-secret-valid", "committedDate": "2020-03-17T13:46:17Z", "type": "commit"}, {"oid": "5a8080c80cee1aa80f63a4e99d1fcb9ebf12e002", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5a8080c80cee1aa80f63a4e99d1fcb9ebf12e002", "message": "additional edits", "committedDate": "2020-03-17T15:41:04Z", "type": "commit"}, {"oid": "f8170bb5a868d7beaacf7c75002810004b7200a8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f8170bb5a868d7beaacf7c75002810004b7200a8", "message": "add traefix instructions for console", "committedDate": "2020-03-17T16:54:03Z", "type": "commit"}, {"oid": "9d1ee013a027fcc0b1bd0f82f0cb46688b451395", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9d1ee013a027fcc0b1bd0f82f0cb46688b451395", "message": "Update doc for introspectorJobActiveDeadlineSeconds\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-17T19:16:17Z", "type": "commit"}, {"oid": "d623aeb1477ef91f41bdcd47a52fa47f6460105d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d623aeb1477ef91f41bdcd47a52fa47f6460105d", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-17T19:28:30Z", "type": "commit"}, {"oid": "edb7f68c724fe3ef0f440d9dc3579c59b2db4602", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/edb7f68c724fe3ef0f440d9dc3579c59b2db4602", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-17T19:33:52Z", "type": "commit"}, {"oid": "65111e65854c485135132c4c06a5578ca1d4a579", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/65111e65854c485135132c4c06a5578ca1d4a579", "message": "update doc", "committedDate": "2020-03-17T21:19:02Z", "type": "commit"}, {"oid": "81c860658b3b7db64fa3b1e8eeca311588060956", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/81c860658b3b7db64fa3b1e8eeca311588060956", "message": "QA infra change to support new secret (#1474)\n\nCo-authored-by: ANTARYAMI.PANIGRAHI@ORACLE.COM <anpanigr@anpanigr-1.subnet1ad2phx.devweblogicphx.oraclevcn.com>", "committedDate": "2020-03-17T21:29:33Z", "type": "commit"}, {"oid": "a809d0cf3ea50e32786988e4c974f62ca5cb0c01", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a809d0cf3ea50e32786988e4c974f62ca5cb0c01", "message": "update doc", "committedDate": "2020-03-17T21:57:52Z", "type": "commit"}, {"oid": "c0c74a0784d280eb221cb586df8a9c55e0029fd4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c0c74a0784d280eb221cb586df8a9c55e0029fd4", "message": "Fix a typo\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-18T13:25:46Z", "type": "commit"}, {"oid": "656371faf0ed6c121979a3f1c8844edd4562f892", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/656371faf0ed6c121979a3f1c8844edd4562f892", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-18T13:27:30Z", "type": "commit"}, {"oid": "0a4458c82bc89eee061a986dade32c7f828cb3e0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0a4458c82bc89eee061a986dade32c7f828cb3e0", "message": "Use 12.2.1.4 everywhere possible (#1475)\n\n* Use 12.2.1.4 everywhere possible\r\n\r\n* Back to soasuite:12.2.1.3\r\n\r\n* Correct some 12.2.1.3 vs. 12.2.1.4 confusion\r\n\r\n* Correct word choice", "committedDate": "2020-03-18T16:33:51Z", "type": "commit"}, {"oid": "46d956270c8c7947f04f654ede7e0aa8b082a2e8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/46d956270c8c7947f04f654ede7e0aa8b082a2e8", "message": "Merge remote-tracking branch 'origin/develop' into model-in-image", "committedDate": "2020-03-18T18:16:05Z", "type": "commit"}, {"oid": "fe8550a34d987e4cb976118113dc7bf5705a2bf9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fe8550a34d987e4cb976118113dc7bf5705a2bf9", "message": "fix to use different separator, '.' is a valid key name", "committedDate": "2020-03-18T18:37:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMjMwNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r394602307", "bodyText": "I may have missed something, but this comparison looks wrong to me.\n\nThe configMapDomainName is the string value of the hashcode of the image name in the domain spec. See line #83 in this class, line#400 and #410 in ConfigMapHelper, and the getModelInImageSpecHash() method in DomainPresenceInfo. But we are comparing it with the current image name itself.\nPotentially we may add more domain spec attributes into getModelInImageSpecHash() calculation. Once we do that, comparing a hashCode of a set of attributes with one attribute (or its hashcode) alone may not be correct.\n\nMaybe we want to use the hashcode of the current spec, instead the image name, to do the comparison(?).", "author": "doxiao", "createdAt": "2020-03-18T19:54:09Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/JobHelper.java", "diffHunk": "@@ -66,13 +66,58 @@ private static boolean runIntrospector(Packet packet, DomainPresenceInfo info) {\n     LOGGER.fine(\"runIntrospector topology: \" + topology);\n     LOGGER.fine(\"runningServersCount: \" + runningServersCount(info));\n     LOGGER.fine(\"creatingServers: \" + creatingServers(info));\n-    return topology == null || isBringingUpNewDomain(info);\n+    return topology == null || isBringingUpNewDomain(info) || isModelInImageUpdate(packet, info);\n   }\n \n   private static boolean isBringingUpNewDomain(DomainPresenceInfo info) {\n     return runningServersCount(info) == 0 && creatingServers(info);\n   }\n \n+  private static boolean isModelInImageUpdate(Packet packet, DomainPresenceInfo info) {\n+    if (info.getDomain().getDomainHomeSourceType().equals(\"FromModel\")) {\n+\n+      String currentPodRestartVersion = info.getDomain().getAdminServerSpec().getDomainRestartVersion();\n+      String currentPodIntrospectVersion = info.getDomain().getAdminServerSpec().getDomainIntrospectVersion();\n+      String configMapRestartVersion = (String)packet.get(ProcessingConstants.DOMAIN_RESTART_VERSION);\n+      String configMapIntrospectVersion = (String)packet.get(ProcessingConstants.DOMAIN_INTROSPECT_VERSION);\n+      String configMapDomainName = (String)packet.get(ProcessingConstants.DOMAIN_INPUTS_HASH);\n+      String currentImageName = info.getDomain().getSpec().getImage();\n+\n+      LOGGER.finest(\"JobHelper.isModelInImageUpdate currentPodRestartVersion \" + currentPodRestartVersion);\n+      LOGGER.finest(\"JobHelper.isModelInImageUpdate currentPodIntrospectVersion \" + currentPodIntrospectVersion);\n+      LOGGER.finest(\"JobHelper.isModelInImageUpdate configMapRestartVersion \" + configMapRestartVersion);\n+      LOGGER.finest(\"JobHelper.isModelInImageUpdate configMapIntrospectVersion \" + configMapIntrospectVersion);\n+\n+      // If either one is set, check for differences and decide to run intropsect job\n+\n+      if (currentPodIntrospectVersion != null\n+            && !currentPodIntrospectVersion.equals(configMapIntrospectVersion)) {\n+        return true;\n+      }\n+\n+      if (currentPodRestartVersion != null\n+            && !currentPodRestartVersion.equals(configMapRestartVersion)) {\n+        return true;\n+      }\n+\n+      if (configMapRestartVersion != null\n+          && !configMapRestartVersion.equals(currentPodRestartVersion)) {\n+        return true;\n+      }\n+\n+      if (configMapIntrospectVersion != null\n+          && !configMapIntrospectVersion.equals(currentPodIntrospectVersion)) {\n+        return true;\n+      }\n+\n+      if (!currentImageName.equals(configMapDomainName)) {", "originalCommit": "46d956270c8c7947f04f654ede7e0aa8b082a2e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwODQyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r394608429", "bodyText": "Yes, it should be the hash of the image name\nBut model in image, we don't want to use the hashcode for the entire spec ,  some attributes should not trigger the introspect job", "author": "jshum2479", "createdAt": "2020-03-18T20:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMjMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzI3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r394653271", "bodyText": "Sorry, I did not mean the hashcode of the whole spec. I meant to call the result of the same getModelInImageHash method for the new and current spec.", "author": "doxiao", "createdAt": "2020-03-18T21:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMjMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NjY1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r394666651", "bodyText": "I refactored the code and created the static method in ConfigMapHelper\npublic static int getModelInImageSpecHash(String imageName) and also corrected the naming and logic.", "author": "jshum2479", "createdAt": "2020-03-18T22:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMjMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0MDg3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395740870", "bodyText": "IS this fixed? If so, please close the comment.", "author": "tbarnes-us", "createdAt": "2020-03-20T16:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMjMwNw=="}], "type": "inlineReview"}, {"oid": "94d603a74812889e160c54de7a2c319c0fd77316", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/94d603a74812889e160c54de7a2c319c0fd77316", "message": "Refactor getModelInImageSpecHash and fix logic; correct minor script error in encryption_util", "committedDate": "2020-03-18T21:43:29Z", "type": "commit"}, {"oid": "b09d2f2a3e8d586a104d22af9dea11e5b3dee239", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b09d2f2a3e8d586a104d22af9dea11e5b3dee239", "message": "check in for now waiting for WDT", "committedDate": "2020-03-18T21:50:33Z", "type": "commit"}, {"oid": "8c4f9ce869248d37ac32766f6f7fb828dcae1d77", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8c4f9ce869248d37ac32766f6f7fb828dcae1d77", "message": "Make the runtime encryption secret volume source \"optional\"\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-18T21:50:49Z", "type": "commit"}, {"oid": "c489a66d68e1a760da358ae37797be87bb66b451", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c489a66d68e1a760da358ae37797be87bb66b451", "message": "Merge branch 'model-in-image' of https://github.com/oracle/weblogic-kubernetes-operator into model-in-image", "committedDate": "2020-03-18T21:52:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNzk5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395017991", "bodyText": "Shall we change the default in the table to 12.2.1.4?", "author": "doxiao", "createdAt": "2020-03-19T13:19:32Z", "path": "docs-source/content/samples/simple/domains/fmw-domain/_index.md", "diffHunk": "@@ -115,7 +115,7 @@ The following parameters can be provided in the inputs file.\n | `domainUID` | Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. | `domain1` |\n | `exposeAdminNodePort` | Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. | `false` |\n | `exposeAdminT3Channel` | Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. | `false` |\n-| `image` | WebLogic Docker image. The operator requires FMW Infrastructure 12.2.1.3.0 with patch 29135930 applied. Refer to [FMW Infrastructure domains]({{< relref \"/userguide/managing-fmw-domains/fmw-infra/_index.md#obtaining-the-fmw-infrastructure-docker-image\" >}}) for details on how to obtain or create the image. | `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3` |\n+| `image` | WebLogic Docker image. The operator requires FMW Infrastructure 12.2.1.3.0 with patch 29135930 applied or FMW Infrastructure 12.2.1.4.0. Refer to [FMW Infrastructure domains]({{< relref \"/userguide/managing-fmw-domains/fmw-infra/_index.md#obtaining-the-fmw-infrastructure-docker-image\" >}}) for details on how to obtain or create the image. | `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3` |", "originalCommit": "c489a66d68e1a760da358ae37797be87bb66b451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNjIwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396606201", "bodyText": "Done.\n@rjeberhard FYI", "author": "tbarnes-us", "createdAt": "2020-03-23T16:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNzk5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyOTgxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395029818", "bodyText": "This bullet becomes too crowded.  Using sub-bullets or a table may help.", "author": "doxiao", "createdAt": "2020-03-19T13:37:37Z", "path": "docs-source/content/userguide/managing-domains/_index.md", "diffHunk": "@@ -18,11 +18,12 @@ description: \"Important considerations for WebLogic domains in Kubernetes.\"\n \n Please be aware of the following important considerations for WebLogic domains running in Kubernetes:\n \n-* _Domain Home Location:_ The WebLogic domain home location is determined by the domain resource `domainHome` if set; otherwise, a default location is determined by the `domainHomeInImage` setting. If a domain resource `domainHome` field is not set\n-  and `domainHomeInImage` is `true` (the default), then the operator will\n+* _Domain Home Location:_ The WebLogic domain home location is determined by the domain resource `domainHome`, if specified; otherwise, a default location is determined by the `domainHomeSourceType` setting. If the domain resource `domainHome` field is not specified", "originalCommit": "c489a66d68e1a760da358ae37797be87bb66b451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNjQzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396636433", "bodyText": "Done. Please review the change, and close this comment if your good with it.", "author": "tbarnes-us", "createdAt": "2020-03-23T17:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyOTgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzU2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395047561", "bodyText": "What is the default for other domainHomeSourceType values? How does this sound - \"Defaults to false unless domainHomeSourceType is PersistentVolume\"?", "author": "doxiao", "createdAt": "2020-03-19T14:02:00Z", "path": "docs-source/content/userguide/managing-domains/domain-resource.md", "diffHunk": "@@ -61,17 +61,17 @@ The domain resource `spec` section contains elements for configuring the domain\n Elements related to domain identification, Docker image, and domain home:\n \n * `domainUID`: The domain unique identifier. Must be unique across the Kubernetes cluster. Not required. Defaults to the value of `metadata.name`.\n-* `image`: The WebLogic Docker image. Required when `domainHomeInImage` is true; otherwise, defaults to `container-registry.oracle.com/middleware/weblogic:12.2.1.3`.\n+* `image`: The WebLogic Docker image. Required when `domainHomeSourceType` is `Image`; otherwise, defaults to `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n * `imagePullPolicy`: The image pull policy for the WebLogic Docker image. Legal values are `Always`, `Never` and `IfNotPresent`. Defaults to `Always` if image ends in `:latest`; `IfNotPresent` otherwise.\n * `imagePullSecrets`: A list of image pull secrets for the WebLogic Docker image.\n-* `domainHome`: The folder for the WebLogic domain. Not required. Defaults to `/shared/domains/domains/domainUID` if `domainHomeInImage` is false. Defaults to `/u01/oracle/user_projects/domains/` if `domainHomeInImage` is true.\n-* `domainHomeInImage`: True if this domain's home is defined in the Docker image for the domain. Defaults to true.\n+* `domainHome`: The folder for the WebLogic domain. Not required. Defaults to `/shared/domains/domains/domainUID` if `domainHomeSourceType` is `PersistentVolume`. Defaults to `/u01/oracle/user_projects/domains/` if `domainHomeSourceType` is `Image`. Defaults to `/u01/domains/domainUID` if `domainHomeSourceType` is `FromModel`.\n+* `domainHomeSourceType`: The source for the domain home. Legal values are `Image`, `PersistentVolume`, and `FromModel`. Defaults to `Image`.\n \n Elements related to logging:\n \n * `includeServerOutInPodLog`: If true (the default), the server `.out` file will be included in the pod's stdout.\n-* `logHome`: The in-pod name of the directory in which to store the domain, Node Manager, server logs, and server `.out` files.\n-* `logHomeEnabled`: Specifies whether the log home folder is enabled. Not required. Defaults to true if `domainHomeInImage` is false. Defaults to false if `domainHomeInImage` is true.\n+* `logHome`: The in-pod name of the directory in which to store the domain, Node Manager, server logs, and server `.out` files. Defaults to `/shared/logs/<domainUID>`. Ignored if `logHomeEnabled` is `false`.\n+* `logHomeEnabled`: Specifies whether the log home folder is enabled. Not required. Defaults to true if `domainHomeSourceType` is `PersistentVolume`.", "originalCommit": "c489a66d68e1a760da358ae37797be87bb66b451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzOTM1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397139352", "bodyText": "Tom has made a modification.", "author": "doxiao", "createdAt": "2020-03-24T13:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NDMxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395054319", "bodyText": "I am wondering if the  soa-suite doc also needs to be updated to use fmw-infrastructure:12.2.1.4 image now.", "author": "doxiao", "createdAt": "2020-03-19T14:11:30Z", "path": "docs-source/content/userguide/managing-fmw-domains/soa-suite/_index.md", "diffHunk": "@@ -110,8 +110,8 @@ For the Fusion Middleware Infrastructure image, you must install the [required p\n \n \n   ```bash\n-    $ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3-200109\n-    $ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3-200109  oracle/fmw-infrastructure:12.2.1.3\n+    $ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3-200316", "originalCommit": "c489a66d68e1a760da358ae37797be87bb66b451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4OTQyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396689426", "bodyText": "I don't know. @rjeberhard , any thoughts?", "author": "tbarnes-us", "createdAt": "2020-03-23T19:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NDMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMzIzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396723236", "bodyText": "No, there is no soa-suite:12.2.1.4 image yet.", "author": "rjeberhard", "createdAt": "2020-03-23T20:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NDMxOQ=="}], "type": "inlineReview"}, {"oid": "a87ee762d639570e75e225ff41023fecafc935a9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a87ee762d639570e75e225ff41023fecafc935a9", "message": "Minor doc changes for introspectorJobActiveDeadlineSeconds\n\nSigned-off-by: doxiao <dongbo.xiao@oracle.com>", "committedDate": "2020-03-19T18:06:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTE4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395251184", "bodyText": "Shall we use a prefix to control the OPSS part of the configuration? The prefix can be determined by the value of domainHomeSourceType and domainType, I assume.", "author": "doxiao", "createdAt": "2020-03-19T18:56:30Z", "path": "kubernetes/samples/scripts/common/domain-template.yaml", "diffHunk": "@@ -98,3 +98,29 @@ spec:\n   # The number of managed servers to start for unlisted clusters\n   # replicas: 1\n \n+  %MII_PREFIX%configuration:\n+    # secrets: [ %DOMAIN_UID%-rcu-access ]\n+\n+  %MII_PREFIX%  model:\n+      #\n+      # Optional configmap for additional models and variable files\n+      #\n+  %MII_CONFIG_MAP_PREFIX%    configMap: %MII_CONFIG_MAP%\n+\n+      #\n+      # wdt domain type for model in image case\n+      # Valid WDT_DOMAIN_TYPE_VALUES are 'WLS', 'JRF', and 'RestrictedJRF'\n+      #\n+  %MII_PREFIX%    domainType: %WDT_DOMAIN_TYPE%\n+  %MII_PREFIX%    runtimeEncryptionSecret: %WEBLOGIC_CREDENTIALS_SECRET_NAME%\n+\n+    #opss:", "originalCommit": "a87ee762d639570e75e225ff41023fecafc935a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI3MDg2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395270865", "bodyText": "Just realized that this template is for the non-MII samples. I think I is probably clearer if we don't support the MII use case using these samples.", "author": "doxiao", "createdAt": "2020-03-19T19:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4OTc4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396689788", "bodyText": "@vanajamukkara Please follow up, and close this comment once the work is done. Thanks!", "author": "tbarnes-us", "createdAt": "2020-03-23T19:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NTc3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r397395772", "bodyText": "Vanaj made a change for this.", "author": "doxiao", "createdAt": "2020-03-24T19:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTE4NA=="}], "type": "inlineReview"}, {"oid": "5fed14ab2742d0c35d5028ffdb64a93cfbcd9c87", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5fed14ab2742d0c35d5028ffdb64a93cfbcd9c87", "message": "Add extra line between merging properties file", "committedDate": "2020-03-19T19:06:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2NDA4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r395264082", "bodyText": "This util script is only used in the domain home on pv or in image samples. Do we support the input file for those use case to have domainHomeSourceType? This line here indicates that the answer is yes, and if this input is specified, we only honor it when the value is 'FromModel', and we ignore the input setting otherwise and honor the old attribute domainHomeInImage. This can cause confusion; the customer may not have other things configured for 'FromModel' using the non-MII samples. We should not allow this in my opinion.", "author": "doxiao", "createdAt": "2020-03-19T19:20:16Z", "path": "kubernetes/samples/scripts/common/utility.sh", "diffHunk": "@@ -439,13 +452,22 @@ function createFiles {\n     sed -i -e \"s:%DOMAIN_ROOT_DIR%:${domainPVMountPath}:g\" ${deleteJobOutput}\n   fi\n \n-  if [ \"${domainHomeInImage}\" == \"true\" ]; then\n+  if [ \"${domainHomeSourceType}\" == \"FromModel\" ]; then", "originalCommit": "a87ee762d639570e75e225ff41023fecafc935a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5NzA0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1478#discussion_r396697042", "bodyText": "Resolved. Dongbo and I added a comment around line 300.  @vanajamukkara FYI", "author": "tbarnes-us", "createdAt": "2020-03-23T19:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2NDA4Mg=="}], "type": "inlineReview"}]}