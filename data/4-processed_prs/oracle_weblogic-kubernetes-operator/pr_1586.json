{"pr_number": 1586, "pr_title": "tests - create domain from existing image and same domainUID in different ns", "pr_createdAt": "2020-04-22T18:27:15Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586", "timeline": [{"oid": "67b8fa2b91ceae44ae555dd92893dae2d4222b2b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/67b8fa2b91ceae44ae555dd92893dae2d4222b2b", "message": "test to add a second domain using the image as the first one", "committedDate": "2020-04-20T22:22:58Z", "type": "commit"}, {"oid": "7770f484a364062d3ade159a63e37ec3849ed4a0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7770f484a364062d3ade159a63e37ec3849ed4a0", "message": "refactoring and also adding test for same domainUID in different ns", "committedDate": "2020-04-21T16:54:33Z", "type": "commit"}, {"oid": "54509f1d88c69775f54ee1eda00bf2266dff22d8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/54509f1d88c69775f54ee1eda00bf2266dff22d8", "message": "refactoring the test", "committedDate": "2020-04-22T13:18:46Z", "type": "commit"}, {"oid": "9673c7d9b47fcafe1072883e78af7db335e9a7c1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9673c7d9b47fcafe1072883e78af7db335e9a7c1", "message": "removing the readSecret calls and refactoring the test", "committedDate": "2020-04-22T17:15:01Z", "type": "commit"}, {"oid": "879350ea66e8e130079e9199cc821f100edcc7fb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/879350ea66e8e130079e9199cc821f100edcc7fb", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into addseconddomaintest\n\nConflicts:\n\tnew-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "committedDate": "2020-04-22T18:17:33Z", "type": "commit"}, {"oid": "c1264a33e81626591f3f05d7ca066a14214948f1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c1264a33e81626591f3f05d7ca066a14214948f1", "message": "remove empty lines", "committedDate": "2020-04-22T20:16:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MDYxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414180614", "bodyText": "not for this PR - but in general - we probably need a reliable way to get a free node port", "author": "markxnelson", "createdAt": "2020-04-23T23:03:16Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMjI4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414232282", "bodyText": "Anil mentioned that he sets \"0\" to adminNodePort and it picks the available port. @markxnelson Is it good idea to do that? It may not be in the node port range.", "author": "vanajamukkara", "createdAt": "2020-04-24T01:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MDYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3MzgyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414573826", "bodyText": "This is actually a good idea.  The Kubernetes doc says that if you don't specify a port for a NodePort type service then Kubernetes itself will select an available port.  It looks like using \"0\" is an undocumented way to get the same behavior.  After the NodePort is created, you'll need to look at the service to find out what port was chosen.\nWe've not done anything with this more generally because many of our nodeport use cases, i.e. T3, require the port in WebLogic to be the same as the external port and so this late binding would be difficult.", "author": "rjeberhard", "createdAt": "2020-04-24T13:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MDYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU5MjYwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414592608", "bodyText": "Dongbo and I discussed it, but I decided against using 0 just yet. Wanted to see what others thought about it. I could find a available free port in a range, but what should the range be?", "author": "bhavaniravichandran", "createdAt": "2020-04-24T13:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MDYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MDk4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414180982", "bodyText": "comment does not seem to match code", "author": "markxnelson", "createdAt": "2020-04-23T23:04:11Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n     // check admin server pod exist\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods exists\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     // check admin server pod is running\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods are running\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomain() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Creating unique namespace for Domain domain2\");\n+    domainNamespace1 = assertDoesNotThrow(() -> createUniqueNamespace(),\n+            \"Failed to create unique namespace due to ApiException\");\n+    logger.info(\"Created a new namespace called {0}\", domainNamespace1);\n+\n+    OperatorParams opParams =\n+            new OperatorParams()\n+                    .helmParams(opHelmParams)\n+                    .image(OPERATOR_IMAGE)\n+                    .domainNamespaces(Arrays.asList(domainNamespace,domainNamespace1))\n+                    .serviceAccount(serviceAccountName);\n+\n+    // install Operator", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MTE4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414181180", "bodyText": "again uniqueness will be an issue", "author": "markxnelson", "createdAt": "2020-04-23T23:04:43Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n     // check admin server pod exist\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods exists\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     // check admin server pod is running\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods are running\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomain() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Creating unique namespace for Domain domain2\");\n+    domainNamespace1 = assertDoesNotThrow(() -> createUniqueNamespace(),\n+            \"Failed to create unique namespace due to ApiException\");\n+    logger.info(\"Created a new namespace called {0}\", domainNamespace1);\n+\n+    OperatorParams opParams =\n+            new OperatorParams()\n+                    .helmParams(opHelmParams)\n+                    .image(OPERATOR_IMAGE)\n+                    .domainNamespaces(Arrays.asList(domainNamespace,domainNamespace1))\n+                    .serviceAccount(serviceAccountName);\n+\n+    // install Operator\n+    logger.info(\"Upgrading Operator in namespace {0}\", opNamespace);\n+    assertTrue(upgradeOperator(opParams),\n+            String.format(\"Operator upgrade failed in namespace %s\", opNamespace));\n+    logger.info(\"Operator upgraded in namespace {0}\", opNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome2\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain2\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain2\",\n+            \"weblogicencdomain2\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    int adminNodePort = 30712;", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MTMzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414181332", "bodyText": "exists", "author": "markxnelson", "createdAt": "2020-04-23T23:05:09Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n     // check admin server pod exist\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods exists\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     // check admin server pod is running\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods are running\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomain() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Creating unique namespace for Domain domain2\");\n+    domainNamespace1 = assertDoesNotThrow(() -> createUniqueNamespace(),\n+            \"Failed to create unique namespace due to ApiException\");\n+    logger.info(\"Created a new namespace called {0}\", domainNamespace1);\n+\n+    OperatorParams opParams =\n+            new OperatorParams()\n+                    .helmParams(opHelmParams)\n+                    .image(OPERATOR_IMAGE)\n+                    .domainNamespaces(Arrays.asList(domainNamespace,domainNamespace1))\n+                    .serviceAccount(serviceAccountName);\n+\n+    // install Operator\n+    logger.info(\"Upgrading Operator in namespace {0}\", opNamespace);\n+    assertTrue(upgradeOperator(opParams),\n+            String.format(\"Operator upgrade failed in namespace %s\", opNamespace));\n+    logger.info(\"Operator upgraded in namespace {0}\", opNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome2\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain2\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain2\",\n+            \"weblogicencdomain2\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    int adminNodePort = 30712;\n+    createDomainResource(domainUID1, domainNamespace1, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace1);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUID1,\n+                domainNamespace1,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUID1, DOMAIN_VERSION, domainNamespace1));\n+\n+\n+    // check admin server pod exist", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MTM4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414181382", "bodyText": "exist", "author": "markxnelson", "createdAt": "2020-04-23T23:05:19Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n     // check admin server pod exist\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods exists\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     // check admin server pod is running\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods are running\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomain() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Creating unique namespace for Domain domain2\");\n+    domainNamespace1 = assertDoesNotThrow(() -> createUniqueNamespace(),\n+            \"Failed to create unique namespace due to ApiException\");\n+    logger.info(\"Created a new namespace called {0}\", domainNamespace1);\n+\n+    OperatorParams opParams =\n+            new OperatorParams()\n+                    .helmParams(opHelmParams)\n+                    .image(OPERATOR_IMAGE)\n+                    .domainNamespaces(Arrays.asList(domainNamespace,domainNamespace1))\n+                    .serviceAccount(serviceAccountName);\n+\n+    // install Operator\n+    logger.info(\"Upgrading Operator in namespace {0}\", opNamespace);\n+    assertTrue(upgradeOperator(opParams),\n+            String.format(\"Operator upgrade failed in namespace %s\", opNamespace));\n+    logger.info(\"Operator upgraded in namespace {0}\", opNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome2\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain2\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain2\",\n+            \"weblogicencdomain2\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    int adminNodePort = 30712;\n+    createDomainResource(domainUID1, domainNamespace1, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace1);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUID1,\n+                domainNamespace1,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUID1, DOMAIN_VERSION, domainNamespace1));\n+\n+\n+    // check admin server pod exist\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkPodCreated(adminServerPodName, domainUID1, domainNamespace1);\n+\n+    // check managed server pods exists", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MTU1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414181555", "bodyText": "ready or running?", "author": "markxnelson", "createdAt": "2020-04-23T23:05:48Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n     // check admin server pod exist\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods exists\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     // check admin server pod is running\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods are running\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomain() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Creating unique namespace for Domain domain2\");\n+    domainNamespace1 = assertDoesNotThrow(() -> createUniqueNamespace(),\n+            \"Failed to create unique namespace due to ApiException\");\n+    logger.info(\"Created a new namespace called {0}\", domainNamespace1);\n+\n+    OperatorParams opParams =\n+            new OperatorParams()\n+                    .helmParams(opHelmParams)\n+                    .image(OPERATOR_IMAGE)\n+                    .domainNamespaces(Arrays.asList(domainNamespace,domainNamespace1))\n+                    .serviceAccount(serviceAccountName);\n+\n+    // install Operator\n+    logger.info(\"Upgrading Operator in namespace {0}\", opNamespace);\n+    assertTrue(upgradeOperator(opParams),\n+            String.format(\"Operator upgrade failed in namespace %s\", opNamespace));\n+    logger.info(\"Operator upgraded in namespace {0}\", opNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome2\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain2\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain2\",\n+            \"weblogicencdomain2\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    int adminNodePort = 30712;\n+    createDomainResource(domainUID1, domainNamespace1, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace1);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUID1,\n+                domainNamespace1,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUID1, DOMAIN_VERSION, domainNamespace1));\n+\n+\n+    // check admin server pod exist\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkPodCreated(adminServerPodName, domainUID1, domainNamespace1);\n+\n+    // check managed server pods exists\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkPodCreated(managedServerPrefix + i, domainUID1, domainNamespace1);\n+    }\n+\n+    // check admin server pod is running\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3ODM4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414878380", "bodyText": "This is also existing code. But I looked into it and the code only checks if the pod is Running - not if it is ready to service request. Lenny is making changes to Kubernetes.java and he is going to add a method there to check if the pod is ready.", "author": "bhavaniravichandran", "createdAt": "2020-04-24T21:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNDYyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414914627", "bodyText": "Actually, Xian has already made the change in her PR - to check Pod is ready instead of just Running.", "author": "bhavaniravichandran", "createdAt": "2020-04-24T23:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MTU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjMxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414182319", "bodyText": "we need to make sure the diagnostics are collected - i think it should be left to the extension to delete the namespaces", "author": "markxnelson", "createdAt": "2020-04-23T23:07:44Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -398,6 +534,14 @@ public void tearDownAll() {\n       logger.info(\"Deleted namespace: \" + domainNamespace);\n     }\n \n+    // Delete domain namespaces", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNDgzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414914837", "bodyText": "yes, Sankar will make the necessary change as part of his PR for diagnstics", "author": "bhavaniravichandran", "createdAt": "2020-04-24T23:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjUzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414182530", "bodyText": "include namespace in the message please", "author": "markxnelson", "createdAt": "2020-04-23T23:08:17Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -452,47 +596,139 @@ private String createImageAndVerify() {\n     return MII_IMAGE_NAME + \":\" + imageTag;\n   }\n \n+  public void createRepoSecret(String domNamespace) throws ApiException {\n+    V1Secret repoSecret = new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(repoSecretName)\n+                    .namespace(domNamespace))\n+            .type(\"kubernetes.io/dockerconfigjson\")\n+            .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = false;\n+    try {\n+      secretCreated = createSecret(repoSecret);\n+    } catch (ApiException e) {\n+      System.err.println(\"Exception when calling CoreV1Api#createNamespacedSecret\");\n+      System.err.println(\"Status code: \" + e.getCode());\n+      System.err.println(\"Reason: \" + e.getResponseBody());\n+      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n+      //409 means that the secret already exists - it is not an error, so can proceed\n+      if (e.getCode() != 409) {\n+        throw e;\n+      } else {\n+        secretCreated = true;\n+      }\n \n-  private void checkPodCreated(String podName) {\n+    }\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s\", repoSecretName));", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjY1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414182655", "bodyText": "include namespace in the message please", "author": "markxnelson", "createdAt": "2020-04-23T23:08:36Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -452,47 +596,139 @@ private String createImageAndVerify() {\n     return MII_IMAGE_NAME + \":\" + imageTag;\n   }\n \n+  public void createRepoSecret(String domNamespace) throws ApiException {\n+    V1Secret repoSecret = new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(repoSecretName)\n+                    .namespace(domNamespace))\n+            .type(\"kubernetes.io/dockerconfigjson\")\n+            .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = false;\n+    try {\n+      secretCreated = createSecret(repoSecret);\n+    } catch (ApiException e) {\n+      System.err.println(\"Exception when calling CoreV1Api#createNamespacedSecret\");\n+      System.err.println(\"Status code: \" + e.getCode());\n+      System.err.println(\"Reason: \" + e.getResponseBody());\n+      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n+      //409 means that the secret already exists - it is not an error, so can proceed\n+      if (e.getCode() != 409) {\n+        throw e;\n+      } else {\n+        secretCreated = true;\n+      }\n \n-  private void checkPodCreated(String podName) {\n+    }\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s\", repoSecretName));\n+  }\n+\n+  public void createDomainSecret(String secretName, String username, String password, String domNamespace)\n+          throws ApiException {\n+    Map<String, String> secretMap = new HashMap();\n+    secretMap.put(\"username\", username);\n+    secretMap.put(\"password\", password);\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(secretName)\n+                    .namespace(domNamespace))\n+            .stringData(secretMap)), \"Create secret failed with ApiException\");\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s\", secretName));", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjkzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414182931", "bodyText": "seems awkward", "author": "markxnelson", "createdAt": "2020-04-23T23:09:16Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -452,47 +596,139 @@ private String createImageAndVerify() {\n     return MII_IMAGE_NAME + \":\" + imageTag;\n   }\n \n+  public void createRepoSecret(String domNamespace) throws ApiException {\n+    V1Secret repoSecret = new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(repoSecretName)\n+                    .namespace(domNamespace))\n+            .type(\"kubernetes.io/dockerconfigjson\")\n+            .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = false;\n+    try {\n+      secretCreated = createSecret(repoSecret);\n+    } catch (ApiException e) {\n+      System.err.println(\"Exception when calling CoreV1Api#createNamespacedSecret\");\n+      System.err.println(\"Status code: \" + e.getCode());\n+      System.err.println(\"Reason: \" + e.getResponseBody());\n+      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n+      //409 means that the secret already exists - it is not an error, so can proceed\n+      if (e.getCode() != 409) {\n+        throw e;\n+      } else {\n+        secretCreated = true;\n+      }\n \n-  private void checkPodCreated(String podName) {\n+    }\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s\", repoSecretName));\n+  }\n+\n+  public void createDomainSecret(String secretName, String username, String password, String domNamespace)\n+          throws ApiException {\n+    Map<String, String> secretMap = new HashMap();\n+    secretMap.put(\"username\", username);\n+    secretMap.put(\"password\", password);\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(secretName)\n+                    .namespace(domNamespace))\n+            .stringData(secretMap)), \"Create secret failed with ApiException\");\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s\", secretName));\n+\n+  }\n+\n+  public void createDomainResource(String domainUID, String domNamespace, String adminSecretName,\n+                                   String repoSecretName, String encryptionSecretName,\n+                                   int adminNodePort, int replicaCount) {\n+    // create the domain CR\n+    Domain domain = new Domain()\n+            .apiVersion(API_VERSION)\n+            .kind(\"Domain\")\n+            .metadata(new V1ObjectMeta()\n+                    .name(domainUID)\n+                    .namespace(domNamespace))\n+            .spec(new DomainSpec()\n+                    .domainUid(domainUID)\n+                    .domainHomeSourceType(\"FromModel\")\n+                    .image(miiImage)\n+                    .addImagePullSecretsItem(new V1LocalObjectReference()\n+                            .name(repoSecretName))\n+                    .webLogicCredentialsSecret(new V1SecretReference()\n+                            .name(adminSecretName)\n+                            .namespace(domNamespace))\n+                    .includeServerOutInPodLog(true)\n+                    .serverStartPolicy(\"IF_NEEDED\")\n+                    .serverPod(new ServerPod()\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"JAVA_OPTIONS\")\n+                                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"USER_MEM_ARGS\")\n+                                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+                    .adminServer(new AdminServer()\n+                            .serverStartState(\"RUNNING\")\n+                            .adminService(new AdminService()\n+                                    .addChannelsItem(new Channel()\n+                                            .channelName(\"default\")\n+                                            .nodePort(adminNodePort))))\n+                    .addClustersItem(new Cluster()\n+                            .clusterName(\"cluster-1\")\n+                            .replicas(replicaCount)\n+                            .serverStartState(\"RUNNING\"))\n+                    .configuration(new Configuration()\n+                            .model(new Model()\n+                                    .domainType(\"WLS\")\n+                                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n+            domainUID, domNamespace);\n+    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n+            String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTIzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414645232", "bodyText": "Do you mean hard to read? Do you want me to split it up? This was existing code, but I can fix it.", "author": "bhavaniravichandran", "createdAt": "2020-04-24T15:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1MTA4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414851080", "bodyText": "fixing it.", "author": "bhavaniravichandran", "createdAt": "2020-04-24T20:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMjcyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414232720", "bodyText": "use logger", "author": "vanajamukkara", "createdAt": "2020-04-24T01:39:34Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -452,47 +596,139 @@ private String createImageAndVerify() {\n     return MII_IMAGE_NAME + \":\" + imageTag;\n   }\n \n+  public void createRepoSecret(String domNamespace) throws ApiException {\n+    V1Secret repoSecret = new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(repoSecretName)\n+                    .namespace(domNamespace))\n+            .type(\"kubernetes.io/dockerconfigjson\")\n+            .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = false;\n+    try {\n+      secretCreated = createSecret(repoSecret);\n+    } catch (ApiException e) {\n+      System.err.println(\"Exception when calling CoreV1Api#createNamespacedSecret\");", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1MDU2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414850562", "bodyText": "yes", "author": "bhavaniravichandran", "createdAt": "2020-04-24T20:41:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMjcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMzc5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414233796", "bodyText": "make the method private or add javadoc", "author": "vanajamukkara", "createdAt": "2020-04-24T01:43:29Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -452,47 +596,139 @@ private String createImageAndVerify() {\n     return MII_IMAGE_NAME + \":\" + imageTag;\n   }\n \n+  public void createRepoSecret(String domNamespace) throws ApiException {\n+    V1Secret repoSecret = new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(repoSecretName)\n+                    .namespace(domNamespace))\n+            .type(\"kubernetes.io/dockerconfigjson\")\n+            .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = false;\n+    try {\n+      secretCreated = createSecret(repoSecret);\n+    } catch (ApiException e) {\n+      System.err.println(\"Exception when calling CoreV1Api#createNamespacedSecret\");\n+      System.err.println(\"Status code: \" + e.getCode());\n+      System.err.println(\"Reason: \" + e.getResponseBody());\n+      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n+      //409 means that the secret already exists - it is not an error, so can proceed\n+      if (e.getCode() != 409) {\n+        throw e;\n+      } else {\n+        secretCreated = true;\n+      }\n \n-  private void checkPodCreated(String podName) {\n+    }\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s\", repoSecretName));\n+  }\n+\n+  public void createDomainSecret(String secretName, String username, String password, String domNamespace)\n+          throws ApiException {\n+    Map<String, String> secretMap = new HashMap();\n+    secretMap.put(\"username\", username);\n+    secretMap.put(\"password\", password);\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(secretName)\n+                    .namespace(domNamespace))\n+            .stringData(secretMap)), \"Create secret failed with ApiException\");\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s\", secretName));\n+\n+  }\n+\n+  public void createDomainResource(String domainUID, String domNamespace, String adminSecretName,", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1MDIxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414850214", "bodyText": "making the methods private", "author": "bhavaniravichandran", "createdAt": "2020-04-24T20:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMzc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NTkzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414255931", "bodyText": "This doesn't work for Jenkins runs. You have to move the code which gets the \"REPO\" env var into the repo* variables before calling this. Otherwise this will create secret with dummy values which won't work on Jenkins.", "author": "vanajamukkara", "createdAt": "2020-04-24T02:58:30Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -183,6 +189,10 @@ public static void initAll() {\n                 condition.getRemainingTimeInMS()))\n         .until(operatorIsRunning(opNamespace));\n \n+    JsonObject dockerConfigJsonObject = getDockerConfigJson(", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1MDAwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414850006", "bodyText": "Fixing it.", "author": "bhavaniravichandran", "createdAt": "2020-04-24T20:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NTkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMDMyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414600322", "bodyText": "The @AfterEach annotation is removed from tearDown() method, and the method is only called in this class. Change it to private.", "author": "doxiao", "createdAt": "2020-04-24T14:02:11Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n     // check admin server pod exist\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods exists\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     // check admin server pod is running\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods are running\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomain() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Creating unique namespace for Domain domain2\");\n+    domainNamespace1 = assertDoesNotThrow(() -> createUniqueNamespace(),\n+            \"Failed to create unique namespace due to ApiException\");\n+    logger.info(\"Created a new namespace called {0}\", domainNamespace1);\n+\n+    OperatorParams opParams =\n+            new OperatorParams()\n+                    .helmParams(opHelmParams)\n+                    .image(OPERATOR_IMAGE)\n+                    .domainNamespaces(Arrays.asList(domainNamespace,domainNamespace1))\n+                    .serviceAccount(serviceAccountName);\n+\n+    // install Operator\n+    logger.info(\"Upgrading Operator in namespace {0}\", opNamespace);\n+    assertTrue(upgradeOperator(opParams),\n+            String.format(\"Operator upgrade failed in namespace %s\", opNamespace));\n+    logger.info(\"Operator upgraded in namespace {0}\", opNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome2\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain2\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain2\",\n+            \"weblogicencdomain2\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    int adminNodePort = 30712;\n+    createDomainResource(domainUID1, domainNamespace1, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace1);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUID1,\n+                domainNamespace1,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUID1, DOMAIN_VERSION, domainNamespace1));\n+\n+\n+    // check admin server pod exist\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkPodCreated(adminServerPodName, domainUID1, domainNamespace1);\n+\n+    // check managed server pods exists\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkPodCreated(managedServerPrefix + i, domainUID1, domainNamespace1);\n+    }\n+\n+    // check admin server pod is running\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkPodRunning(adminServerPodName, domainUID1, domainNamespace1);\n+\n+    // check managed server pods are running\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkPodRunning(managedServerPrefix + i, domainUID1, domainNamespace1);\n     }\n \n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkServiceCreated(adminServerPodName, domainNamespace1);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace1);\n+    }\n   }\n \n-  @AfterEach\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Create a domain with same domainUID as first domain but in a new namespace\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiDomainSameDomainUIDDiffNS() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID + \"-admin-server\";\n+    final String managedServerPrefix = domainUID + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome3\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain3\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain3\",\n+            \"weblogicencdomain3\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    int adminNodePort = 30714;\n+    createDomainResource(domainUID, domainNamespace1, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace1);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                   + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUID,\n+                domainNamespace1,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace1));\n+\n+\n+    // check admin server pod exist\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace1);\n+\n+    // check managed server pods exists\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace1);\n+    }\n+\n+    // check admin server pod is running\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace1);\n+\n+    // check managed server pods are running\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace1);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkServiceCreated(adminServerPodName, domainNamespace1);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace1);\n+    }\n+  }\n+\n+\n   public void tearDown() {", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0OTY1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414849656", "bodyText": "done", "author": "bhavaniravichandran", "createdAt": "2020-04-24T20:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMDMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMTczMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414601732", "bodyText": "it seems that this is a private method.", "author": "doxiao", "createdAt": "2020-04-24T14:04:16Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -452,47 +596,139 @@ private String createImageAndVerify() {\n     return MII_IMAGE_NAME + \":\" + imageTag;\n   }\n \n+  public void createRepoSecret(String domNamespace) throws ApiException {\n+    V1Secret repoSecret = new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(repoSecretName)\n+                    .namespace(domNamespace))\n+            .type(\"kubernetes.io/dockerconfigjson\")\n+            .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = false;\n+    try {\n+      secretCreated = createSecret(repoSecret);\n+    } catch (ApiException e) {\n+      System.err.println(\"Exception when calling CoreV1Api#createNamespacedSecret\");\n+      System.err.println(\"Status code: \" + e.getCode());\n+      System.err.println(\"Reason: \" + e.getResponseBody());\n+      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n+      //409 means that the secret already exists - it is not an error, so can proceed\n+      if (e.getCode() != 409) {\n+        throw e;\n+      } else {\n+        secretCreated = true;\n+      }\n \n-  private void checkPodCreated(String podName) {\n+    }\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s\", repoSecretName));\n+  }\n+\n+  public void createDomainSecret(String secretName, String username, String password, String domNamespace)", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0OTcwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414849706", "bodyText": "done", "author": "bhavaniravichandran", "createdAt": "2020-04-24T20:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMTczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwOTM1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414609352", "bodyText": "Shall we indicate in the test name that the second domain is in the same namespace as the first domain?", "author": "doxiao", "createdAt": "2020-04-24T14:14:41Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n     // check admin server pod exist\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods exists\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     // check admin server pod is running\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods are running\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomain() {", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1OTIzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414659233", "bodyText": "The domain is created in a different Namespace (as per Monica's requirement), but I will change the test name to indicate that.", "author": "bhavaniravichandran", "createdAt": "2020-04-24T15:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwOTM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxNDE1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414614159", "bodyText": "Sankar has added injection of the namespaces in the initAll() method so that the diagnostic code can collect data of all namespaces that are used in the test. Once you sync with the latest develop branch, you can just increase the number of namespaces in the initAll() method; no need to create one yourself.", "author": "doxiao", "createdAt": "2020-04-24T14:21:18Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -214,156 +224,281 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // create docker registry secret in the domain namespace to pull the image from OCIR\n-    JsonObject dockerConfigJsonObject = getDockerConfigJson(\n-        repoUserName, repoPassword, repoEmail, repoRegistry);\n-    String dockerConfigJson = dockerConfigJsonObject.toString();\n-\n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(repoSecretName)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", repoSecretName));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", repoSecretName));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(repoSecretName))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(30711))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    int adminNodePort = 30711;\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, repoSecretName,\n+            encryptionSecretName, adminNodePort, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n     // check admin server pod exist\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods exists\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     // check admin server pod is running\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodRunning(adminServerPodName, domainUID, domainNamespace);\n \n     // check managed server pods are running\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodRunning(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomain() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Creating unique namespace for Domain domain2\");", "originalCommit": "c1264a33e81626591f3f05d7ca066a14214948f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzMTg5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r414631890", "bodyText": "yes, will do. Sankar's PR hadn't been merged when I created this PR. I will sync develop with my branch and make the changes.", "author": "bhavaniravichandran", "createdAt": "2020-04-24T14:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxNDE1OQ=="}], "type": "inlineReview"}, {"oid": "edb7f2b72cf85fc17b1456b0ba64202d05b485ff", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/edb7f2b72cf85fc17b1456b0ba64202d05b485ff", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into addseconddomaintest", "committedDate": "2020-04-24T14:47:46Z", "type": "commit"}, {"oid": "944df6e34dbbb13572d4c2430bbbe93aeca61960", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/944df6e34dbbb13572d4c2430bbbe93aeca61960", "message": "fixing after review comments", "committedDate": "2020-04-25T01:44:47Z", "type": "commit"}, {"oid": "295b0738cd04cce2f505114b8e65cedf18fef915", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/295b0738cd04cce2f505114b8e65cedf18fef915", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into addseconddomaintest\n\nConflicts:\n\tnew-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "committedDate": "2020-04-25T03:07:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NDA1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r415464054", "bodyText": "should be domainUid", "author": "vanajamukkara", "createdAt": "2020-04-27T02:14:16Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -108,12 +109,17 @@\n \n   private static HelmParams opHelmParams = null;\n   private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n   private static String opNamespace = null;\n+  private static String operatorImage = null;\n   private static String domainNamespace = null;\n+  private static String domainNamespace1 = null;\n+  private static String domainNamespace2 = null;\n   private static ConditionFactory withStandardRetryPolicy = null;\n   private static String dockerConfigJson = \"\";\n \n-  private String domainUid = \"domain1\";\n+  private String domainUID = \"domain1\";", "originalCommit": "295b0738cd04cce2f505114b8e65cedf18fef915", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NDEwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r415464106", "bodyText": "domainUid1", "author": "vanajamukkara", "createdAt": "2020-04-27T02:14:28Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -108,12 +109,17 @@\n \n   private static HelmParams opHelmParams = null;\n   private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n   private static String opNamespace = null;\n+  private static String operatorImage = null;\n   private static String domainNamespace = null;\n+  private static String domainNamespace1 = null;\n+  private static String domainNamespace2 = null;\n   private static ConditionFactory withStandardRetryPolicy = null;\n   private static String dockerConfigJson = \"\";\n \n-  private String domainUid = \"domain1\";\n+  private String domainUID = \"domain1\";\n+  private String domainUID1 = \"domain2\";", "originalCommit": "295b0738cd04cce2f505114b8e65cedf18fef915", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MDAxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r415470014", "bodyText": "resource typo", "author": "vanajamukkara", "createdAt": "2020-04-27T02:35:32Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -240,151 +248,273 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(REPO_SECRET_NAME)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", REPO_SECRET_NAME));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(REPO_SECRET_NAME))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(0))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n+              encryptionSecretName, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n-    // check admin server pod exist\n+    // check admin server pod exists\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n-    // check managed server pods exists\n+    // check managed server pods exist\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n-    // check admin server pod is running\n+    // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodReady(adminServerPodName, domainUID, domainNamespace);\n \n-    // check managed server pods are running\n+    // check managed server pods are ready\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodReady(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomainDiffNSSameImage() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    OperatorParams opParams =\n+            new OperatorParams()\n+                    .helmParams(opHelmParams)\n+                    .image(operatorImage)\n+                    .domainNamespaces(Arrays.asList(domainNamespace,domainNamespace1))\n+                    .serviceAccount(serviceAccountName);\n+\n+    // upgrade Operator\n+    logger.info(\"Upgrading Operator in namespace {0}\", opNamespace);\n+    assertTrue(upgradeOperator(opParams),\n+            String.format(\"Operator upgrade failed in namespace %s\", opNamespace));\n+    logger.info(\"Operator upgraded in namespace {0}\", opNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+              String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome2\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain2\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain2\",\n+            \"weblogicencdomain2\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    createDomainResource(domainUID1, domainNamespace1, adminSecretName, REPO_SECRET_NAME,\n+              encryptionSecretName, replicaCount);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace1);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUID1,\n+                domainNamespace1,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUID1, DOMAIN_VERSION, domainNamespace1));\n+\n+\n+    // check admin server pod exists\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkPodCreated(adminServerPodName, domainUID1, domainNamespace1);\n+\n+    // check managed server pods exist\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkPodCreated(managedServerPrefix + i, domainUID1, domainNamespace1);\n+    }\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkPodReady(adminServerPodName, domainUID1, domainNamespace1);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkPodReady(managedServerPrefix + i, domainUID1, domainNamespace1);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+            adminServerPodName, domainNamespace1);\n+    checkServiceCreated(adminServerPodName, domainNamespace1);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+              managedServerPrefix + i, domainNamespace1);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace1);\n+    }\n+  }\n+\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Create a domain with same domainUID as first domain but in a new namespace\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiDomainSameDomainUIDDiffNS() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID + \"-admin-server\";\n+    final String managedServerPrefix = domainUID + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome3\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain3\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain3\",\n+            \"weblogicencdomain3\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    createDomainResource(domainUID, domainNamespace1, adminSecretName, REPO_SECRET_NAME,\n+              encryptionSecretName, replicaCount);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace1);", "originalCommit": "295b0738cd04cce2f505114b8e65cedf18fef915", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MDEyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r415470124", "bodyText": "resource typo", "author": "vanajamukkara", "createdAt": "2020-04-27T02:36:04Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -240,151 +248,273 @@ public void testCreateMiiDomain() {\n       assertTrue(dockerPush(miiImage), String.format(\"docker push failed for image %s\", miiImage));\n     }\n \n-    // Create the V1Secret configuration\n-    V1Secret repoSecret = new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(REPO_SECRET_NAME)\n-            .namespace(domainNamespace))\n-        .type(\"kubernetes.io/dockerconfigjson\")\n-        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n-\n-    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n-        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n-    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", REPO_SECRET_NAME));\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    Map<String, String> adminSecretMap = new HashMap();\n-    adminSecretMap.put(\"username\", \"weblogic\");\n-    adminSecretMap.put(\"password\", \"welcome1\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(adminSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(adminSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    Map<String, String> encryptionSecretMap = new HashMap();\n-    encryptionSecretMap.put(\"username\", \"weblogicenc\");\n-    encryptionSecretMap.put(\"password\", \"weblogicenc\");\n-    secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n-        .metadata(new V1ObjectMeta()\n-            .name(encryptionSecretName)\n-            .namespace(domainNamespace))\n-        .stringData(encryptionSecretMap)), \"Create secret failed with ApiException\");\n-    assertTrue(secretCreated, String.format(\"create secret failed for %s\", encryptionSecretName));\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n \n     // create the domain CR\n-    Domain domain = new Domain()\n-        .apiVersion(API_VERSION)\n-        .kind(\"Domain\")\n-        .metadata(new V1ObjectMeta()\n-            .name(domainUid)\n-            .namespace(domainNamespace))\n-        .spec(new DomainSpec()\n-            .domainUid(domainUid)\n-            .domainHomeSourceType(\"FromModel\")\n-            .image(miiImage)\n-            .addImagePullSecretsItem(new V1LocalObjectReference()\n-                .name(REPO_SECRET_NAME))\n-            .webLogicCredentialsSecret(new V1SecretReference()\n-                .name(adminSecretName)\n-                .namespace(domainNamespace))\n-            .includeServerOutInPodLog(true)\n-            .serverStartPolicy(\"IF_NEEDED\")\n-            .serverPod(new ServerPod()\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-            .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\")\n-                .adminService(new AdminService()\n-                    .addChannelsItem(new Channel()\n-                        .channelName(\"default\")\n-                        .nodePort(0))))\n-            .addClustersItem(new Cluster()\n-                .clusterName(\"cluster-1\")\n-                .replicas(replicaCount)\n-                .serverStartState(\"RUNNING\"))\n-            .configuration(new Configuration()\n-                .model(new Model()\n-                    .domainType(\"WLS\")\n-                    .runtimeEncryptionSecret(encryptionSecretName))));\n-\n-    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n-        domainUid, domainNamespace);\n-    assertTrue(assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace)),\n-        String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-            domainUid, domainNamespace));\n-\n+    createDomainResource(domainUID, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n+              encryptionSecretName, replicaCount);\n \n     // wait for the domain to exist\n     logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace);\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n+                domainUID,\n                 domainNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+        .until(domainExists(domainUID, DOMAIN_VERSION, domainNamespace));\n \n \n-    // check admin server pod exist\n+    // check admin server pod exists\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName);\n+    checkPodCreated(adminServerPodName, domainUID, domainNamespace);\n \n-    // check managed server pods exists\n+    // check managed server pods exist\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n+      checkPodCreated(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n-    // check admin server pod is running\n+    // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodRunning(adminServerPodName);\n+    checkPodReady(adminServerPodName, domainUID, domainNamespace);\n \n-    // check managed server pods are running\n+    // check managed server pods are ready\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodRunning(managedServerPrefix + i);\n+      checkPodReady(managedServerPrefix + i, domainUID, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceCreated(adminServerPodName, domainNamespace);\n \n     // check managed server services created\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check managed server service {0} is created in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+      checkServiceCreated(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+  }\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Create a second domain with the image from the the first test\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiSecondDomainDiffNSSameImage() {\n+    // admin/managed server name here should match with model yaml in WDT_MODEL_FILE\n+    final String adminServerPodName = domainUID1 + \"-admin-server\";\n+    final String managedServerPrefix = domainUID1 + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    OperatorParams opParams =\n+            new OperatorParams()\n+                    .helmParams(opHelmParams)\n+                    .image(operatorImage)\n+                    .domainNamespaces(Arrays.asList(domainNamespace,domainNamespace1))\n+                    .serviceAccount(serviceAccountName);\n+\n+    // upgrade Operator\n+    logger.info(\"Upgrading Operator in namespace {0}\", opNamespace);\n+    assertTrue(upgradeOperator(opParams),\n+            String.format(\"Operator upgrade failed in namespace %s\", opNamespace));\n+    logger.info(\"Operator upgraded in namespace {0}\", opNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createRepoSecret(domainNamespace1),\n+              String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUID1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome2\", domainNamespace1),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecretdomain2\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicencdomain2\",\n+            \"weblogicencdomain2\", domainNamespace1),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain CR\n+    createDomainResource(domainUID1, domainNamespace1, adminSecretName, REPO_SECRET_NAME,\n+              encryptionSecretName, replicaCount);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resouce in namespace {0}\", domainNamespace1);", "originalCommit": "295b0738cd04cce2f505114b8e65cedf18fef915", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MDk0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r415470947", "bodyText": "change to domainUid through out the class", "author": "vanajamukkara", "createdAt": "2020-04-27T02:38:52Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -480,47 +619,139 @@ private String createImageAndVerify() {\n     return image;\n   }\n \n+  private void createRepoSecret(String domNamespace) throws ApiException {\n+    V1Secret repoSecret = new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(REPO_SECRET_NAME)\n+                    .namespace(domNamespace))\n+            .type(\"kubernetes.io/dockerconfigjson\")\n+            .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = false;\n+    try {\n+      secretCreated = createSecret(repoSecret);\n+    } catch (ApiException e) {\n+      logger.info(\"Exception when calling CoreV1Api#createNamespacedSecret\");\n+      logger.info(\"Status code: \" + e.getCode());\n+      logger.info(\"Reason: \" + e.getResponseBody());\n+      logger.info(\"Response headers: \" + e.getResponseHeaders());\n+      //409 means that the secret already exists - it is not an error, so can proceed\n+      if (e.getCode() != 409) {\n+        throw e;\n+      } else {\n+        secretCreated = true;\n+      }\n \n-  private void checkPodCreated(String podName) {\n+    }\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s in namespace %s\",\n+            REPO_SECRET_NAME, domNamespace));\n+  }\n+\n+  private void createDomainSecret(String secretName, String username, String password, String domNamespace)\n+          throws ApiException {\n+    Map<String, String> secretMap = new HashMap();\n+    secretMap.put(\"username\", username);\n+    secretMap.put(\"password\", password);\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(secretName)\n+                    .namespace(domNamespace))\n+            .stringData(secretMap)), \"Create secret failed with ApiException\");\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s in namespace %s\", secretName, domNamespace));\n+\n+  }\n+\n+  private void createDomainResource(String domainUID, String domNamespace, String adminSecretName,", "originalCommit": "295b0738cd04cce2f505114b8e65cedf18fef915", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MTQ0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r415471448", "bodyText": "you mentioned in the comments that Xian is adding check for pod ready and here you changed the method name to checkPodReady?", "author": "vanajamukkara", "createdAt": "2020-04-27T02:40:54Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -480,47 +619,139 @@ private String createImageAndVerify() {\n     return image;\n   }\n \n+  private void createRepoSecret(String domNamespace) throws ApiException {\n+    V1Secret repoSecret = new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(REPO_SECRET_NAME)\n+                    .namespace(domNamespace))\n+            .type(\"kubernetes.io/dockerconfigjson\")\n+            .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = false;\n+    try {\n+      secretCreated = createSecret(repoSecret);\n+    } catch (ApiException e) {\n+      logger.info(\"Exception when calling CoreV1Api#createNamespacedSecret\");\n+      logger.info(\"Status code: \" + e.getCode());\n+      logger.info(\"Reason: \" + e.getResponseBody());\n+      logger.info(\"Response headers: \" + e.getResponseHeaders());\n+      //409 means that the secret already exists - it is not an error, so can proceed\n+      if (e.getCode() != 409) {\n+        throw e;\n+      } else {\n+        secretCreated = true;\n+      }\n \n-  private void checkPodCreated(String podName) {\n+    }\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s in namespace %s\",\n+            REPO_SECRET_NAME, domNamespace));\n+  }\n+\n+  private void createDomainSecret(String secretName, String username, String password, String domNamespace)\n+          throws ApiException {\n+    Map<String, String> secretMap = new HashMap();\n+    secretMap.put(\"username\", username);\n+    secretMap.put(\"password\", password);\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(secretName)\n+                    .namespace(domNamespace))\n+            .stringData(secretMap)), \"Create secret failed with ApiException\");\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s in namespace %s\", secretName, domNamespace));\n+\n+  }\n+\n+  private void createDomainResource(String domainUID, String domNamespace, String adminSecretName,\n+                                    String repoSecretName, String encryptionSecretName, int replicaCount) {\n+    // create the domain CR\n+    Domain domain = new Domain()\n+            .apiVersion(API_VERSION)\n+            .kind(\"Domain\")\n+            .metadata(new V1ObjectMeta()\n+                    .name(domainUID)\n+                    .namespace(domNamespace))\n+            .spec(new DomainSpec()\n+                    .domainUid(domainUID)\n+                    .domainHomeSourceType(\"FromModel\")\n+                    .image(miiImage)\n+                    .addImagePullSecretsItem(new V1LocalObjectReference()\n+                            .name(repoSecretName))\n+                    .webLogicCredentialsSecret(new V1SecretReference()\n+                            .name(adminSecretName)\n+                            .namespace(domNamespace))\n+                    .includeServerOutInPodLog(true)\n+                    .serverStartPolicy(\"IF_NEEDED\")\n+                    .serverPod(new ServerPod()\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"JAVA_OPTIONS\")\n+                                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"USER_MEM_ARGS\")\n+                                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+                    .adminServer(new AdminServer()\n+                            .serverStartState(\"RUNNING\")\n+                            .adminService(new AdminService()\n+                                    .addChannelsItem(new Channel()\n+                                            .channelName(\"default\")\n+                                            .nodePort(0))))\n+                    .addClustersItem(new Cluster()\n+                            .clusterName(\"cluster-1\")\n+                            .replicas(replicaCount)\n+                            .serverStartState(\"RUNNING\"))\n+                    .configuration(new Configuration()\n+                            .model(new Model()\n+                                    .domainType(\"WLS\")\n+                                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+    logger.info(\"Create domain custom resource for domainUID {0} in namespace {1}\",\n+            domainUID, domNamespace);\n+    boolean domCreated = assertDoesNotThrow(() -> createDomainCustomResource(domain),\n+            String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n+                    domainUID, domNamespace));\n+    assertTrue(domCreated, String.format(\"Create domain custom resource failed with ApiException \"\n+                    + \"for %s in namespace %s\", domainUID, domNamespace));\n+  }\n+\n+  private void checkPodCreated(String podName, String domainUid, String domNamespace) {\n     withStandardRetryPolicy\n         .conditionEvaluationListener(\n             condition -> logger.info(\"Waiting for pod {0} to be created in namespace {1} \"\n                     + \"(elapsed time {2}ms, remaining time {3}ms)\",\n                 podName,\n-                domainNamespace,\n+                domNamespace,\n                 condition.getElapsedTimeInMS(),\n                 condition.getRemainingTimeInMS()))\n-        .until(assertDoesNotThrow(() -> podExists(podName, domainUid, domainNamespace),\n+        .until(assertDoesNotThrow(() -> podExists(podName, domainUid, domNamespace),\n             String.format(\"podExists failed with ApiException for %s in namespace in %s\",\n-                podName, domainNamespace)));\n+                podName, domNamespace)));\n \n   }\n \n-  private void checkPodRunning(String podName) {\n+  private void checkPodReady(String podName, String domainUid, String domNamespace) {", "originalCommit": "295b0738cd04cce2f505114b8e65cedf18fef915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3Njg3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1586#discussion_r415476870", "bodyText": "Mark asked if we were checking ready or running - they are both different. We should be checking ready. So, I changed the name to reflect that. But the actual TestAssertion method right now checks if pod is running - not if pod is ready. That is what Xian is fixing.", "author": "bhavaniravichandran", "createdAt": "2020-04-27T03:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MTQ0OA=="}], "type": "inlineReview"}, {"oid": "5d4850957d1105fbe665ea4192dd54888d2b9d2a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5d4850957d1105fbe665ea4192dd54888d2b9d2a", "message": "more updates after review comments", "committedDate": "2020-04-27T03:55:37Z", "type": "commit"}]}