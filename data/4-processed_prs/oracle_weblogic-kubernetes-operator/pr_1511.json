{"pr_number": 1511, "pr_title": "Adding more actions", "pr_createdAt": "2020-03-27T21:27:00Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511", "timeline": [{"oid": "816f3e9303ff9c75c53c850e16f88fbc2b5fbccd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/816f3e9303ff9c75c53c850e16f88fbc2b5fbccd", "message": "adding new actions", "committedDate": "2020-03-27T12:26:48Z", "type": "commit"}, {"oid": "78db1ae8e5404174d3644702c67740186fc099de", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/78db1ae8e5404174d3644702c67740186fc099de", "message": "adding more actions", "committedDate": "2020-03-28T05:17:34Z", "type": "commit"}, {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "message": "typo", "committedDate": "2020-03-28T05:24:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTE3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659175", "bodyText": "We should make a fluent API for the helm chart values", "author": "rjeberhard", "createdAt": "2020-03-28T12:53:18Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {", "originalCommit": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDgzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399670833", "bodyText": "agree", "author": "markxnelson", "createdAt": "2020-03-28T14:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MDY5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399740694", "bodyText": "work on fluent API for operator, domain and update the PR?", "author": "vanajamukkara", "createdAt": "2020-03-29T03:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTIzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659231", "bodyText": "Fluent api for domain... I'm willing to help with these :)", "author": "rjeberhard", "createdAt": "2020-03-28T12:53:45Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {", "originalCommit": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTI3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659276", "bodyText": "Similarly, let's make the tests more expressive.", "author": "rjeberhard", "createdAt": "2020-03-28T12:54:12Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {\n         return Domain.createDomainCustomResource(domainUID, namespace, domainYAML);\n     }\n \n+    /**\n+     * Shutdown the domain\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean shutdown(String domainUID, String namespace) {\n+        return Domain.shutdown(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean restart(String domainUID, String namespace) {\n+        return Domain.restart(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteDomainCustomResource(String domainUID, String namespace) {\n+        return Domain.deleteDomainCustomResource(domainUID, namespace);\n+    }\n+\n     // ------------------------   ingress controller ----------------------\n \n+    /**\n+     * Install Traefik Operator\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean installTraefik(String valuesYaml) {", "originalCommit": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTM2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659367", "bodyText": "We have an API for standard types. io.kubernetes.client.openapi.models.V1PersistentVolume", "author": "rjeberhard", "createdAt": "2020-03-28T12:55:04Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {\n         return Domain.createDomainCustomResource(domainUID, namespace, domainYAML);\n     }\n \n+    /**\n+     * Shutdown the domain\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean shutdown(String domainUID, String namespace) {\n+        return Domain.shutdown(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean restart(String domainUID, String namespace) {\n+        return Domain.restart(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteDomainCustomResource(String domainUID, String namespace) {\n+        return Domain.deleteDomainCustomResource(domainUID, namespace);\n+    }\n+\n     // ------------------------   ingress controller ----------------------\n \n+    /**\n+     * Install Traefik Operator\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean installTraefik(String valuesYaml) {\n+        return Traefik.install(valuesYaml);\n+    }\n \n+    /**\n+     * Create Treafik Ingress\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createIngress(String valuesYaml) {\n+        return Traefik.createIngress(valuesYaml);\n+    }\n \n     // -------------------------  namespaces -------------------------------\n \n+    /**\n+     * Create Kubernetes namespace\n+     * @param name the name of the namespace\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createNamespace(String name) {\n         return Namespace.createNamespace(name);\n     }\n \n+    /**\n+     * Create a namespace with unique name\n+     * @return true on success, false otherwise\n+     */\n     public static String createUniqueNamespace() {\n         return Namespace.createUniqueNamespace();\n     }\n \n+    // -------------------------   pv/pvc  ---------------------------------\n+\n+    /**\n+     * Create Kubernetes Persistent Volume using the yaml provided\n+     * @param pvYaml the persistent volume yaml file\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createPersistentVolume(String pvYaml) {", "originalCommit": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDkzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399670930", "bodyText": "happy to discuss, but if it is ugly, i would prefer to have a fluent api that hides that ugliness under the covers", "author": "markxnelson", "createdAt": "2020-03-28T14:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5MDg2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399690863", "bodyText": "These types already provide a fluent API: https://github.com/kubernetes-client/java/blob/master/examples/src/main/java/io/kubernetes/client/examples/FluentExample.java", "author": "rjeberhard", "createdAt": "2020-03-28T17:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwNjg1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399706853", "bodyText": "prefect :)", "author": "markxnelson", "createdAt": "2020-03-28T20:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzc2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399737761", "bodyText": "Test class will directly call the fluent api to create these or primitive class Kubernetes will use fluent api to create?", "author": "vanajamukkara", "createdAt": "2020-03-29T03:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTQ2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659467", "bodyText": "Similarly, have existing type", "author": "rjeberhard", "createdAt": "2020-03-28T12:56:00Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {\n         return Domain.createDomainCustomResource(domainUID, namespace, domainYAML);\n     }\n \n+    /**\n+     * Shutdown the domain\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean shutdown(String domainUID, String namespace) {\n+        return Domain.shutdown(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean restart(String domainUID, String namespace) {\n+        return Domain.restart(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteDomainCustomResource(String domainUID, String namespace) {\n+        return Domain.deleteDomainCustomResource(domainUID, namespace);\n+    }\n+\n     // ------------------------   ingress controller ----------------------\n \n+    /**\n+     * Install Traefik Operator\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean installTraefik(String valuesYaml) {\n+        return Traefik.install(valuesYaml);\n+    }\n \n+    /**\n+     * Create Treafik Ingress\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createIngress(String valuesYaml) {\n+        return Traefik.createIngress(valuesYaml);\n+    }\n \n     // -------------------------  namespaces -------------------------------\n \n+    /**\n+     * Create Kubernetes namespace\n+     * @param name the name of the namespace\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createNamespace(String name) {\n         return Namespace.createNamespace(name);\n     }\n \n+    /**\n+     * Create a namespace with unique name\n+     * @return true on success, false otherwise\n+     */\n     public static String createUniqueNamespace() {\n         return Namespace.createUniqueNamespace();\n     }\n \n+    // -------------------------   pv/pvc  ---------------------------------\n+\n+    /**\n+     * Create Kubernetes Persistent Volume using the yaml provided\n+     * @param pvYaml the persistent volume yaml file\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createPersistentVolume(String pvYaml) {\n+        return PersistentVolume.create(pvYaml);\n+    }\n+\n+    /**\n+     * Delete the Kubernetes Persistent Volume\n+     * @param pvName the name of the Persistent Volume\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deletePersistentVolume(String pvName) {\n+        return PersistentVolume.delete(pvName);\n+    }\n+\n+    /**\n+     * Create Kubernetes Persistent Volume Claim using the yaml provided\n+     * @param pvcYaml the persistent volume claim yaml file\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createPersistentVolumeClaim(String pvcYaml) {", "originalCommit": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3MTc5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399871797", "bodyText": "do we need the builder? i did a lot of googling and i did not come up with a definitive answer. this seems to be builder pattern, which is almost the same as fluent, but not exactly. i think fluent is more of a static that manages the instance. i don't mind really - i will defer to @rjeberhard and @ddsharpe on this", "author": "markxnelson", "createdAt": "2020-03-29T23:44:01Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -7,31 +7,86 @@\n \n public class Helm {\n \n-    public static boolean addRepo(String repoUrl) {\n-        // do something!!\n+    private String chart;\n+    private String name;\n+    private String namespace;\n+    private String repoUrl;\n+    private HashMap<String, String> values;\n+\n+    private Helm(HelmBuilder builder) {\n+        this.chart = builder.chart;\n+        this.name = builder.name;\n+        this.namespace = builder.namespace;\n+        this.repoUrl = builder.repoUrl;\n+        this.values = builder.values;\n+    }\n+\n+    public String getChart() {\n+        return chart;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    public String getRepoUrl() {\n+        return repoUrl;\n+    }\n+\n+    public HashMap<String, String> getValues() {\n+        return values;\n+    }\n+\n+    public boolean install(){\n         return true;\n     }\n \n-    public static boolean installRelease(\n-            String chart,\n-            String name,\n-            HashMap<String, String> values\n-    ) {\n-        // do something !!!\n+    public boolean upgrade(){\n         return true;\n     }\n \n-    public static boolean upgradeRelease(\n-        String chart,\n-        String name,\n-        HashMap<String, String> values\n-    ) {\n-        // do something !!!\n+    public boolean delete(){\n         return true;\n     }\n \n-    public static boolean deleteRelease(String name) {\n+    public boolean addRepo() {\n         return true;\n     }\n \n+    public static class HelmBuilder {", "originalCommit": "1b5653315001c2a42151d3fbd14150cac9264050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwMzI5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399903298", "bodyText": "fluent example https://github.com/kubernetes-client/java/blob/master/examples/src/main/java/io/kubernetes/client/examples/FluentExample.java @rjeberhard suggested uses builder, thought we wanted to use that pattern. Not sure if he meant to use that only for Operator or Domain.", "author": "vanajamukkara", "createdAt": "2020-03-30T02:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3MTc5Nw=="}], "type": "inlineReview"}, {"oid": "1b5653315001c2a42151d3fbd14150cac9264050", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1b5653315001c2a42151d3fbd14150cac9264050", "message": "using fluent api for Helm", "committedDate": "2020-03-30T07:13:32Z", "type": "commit"}, {"oid": "8670afc55953cf42251d0f3d896ae5de965f42d2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8670afc55953cf42251d0f3d896ae5de965f42d2", "message": "using fluent api for operatorparams instead of hashmap", "committedDate": "2020-03-30T11:57:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzkyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r400143922", "bodyText": "fix javadoc", "author": "markxnelson", "createdAt": "2020-03-30T12:15:42Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -28,8 +29,8 @@\n      * @param values map with values", "originalCommit": "8670afc55953cf42251d0f3d896ae5de965f42d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f597fe4d88b7811251e6fea7d5decde82161cebd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f597fe4d88b7811251e6fea7d5decde82161cebd", "message": "fixing javadoc", "committedDate": "2020-03-30T22:26:32Z", "type": "commit"}]}