{"pr_number": 1592, "pr_title": "HIVE-24291: Compaction cleaner should wait for all prev txn to commit", "pr_createdAt": "2020-10-20T13:34:08Z", "pr_url": "https://github.com/apache/hive/pull/1592", "timeline": [{"oid": "8df2f34b506766bd7892eab30437e30ede5022e1", "url": "https://github.com/apache/hive/commit/8df2f34b506766bd7892eab30437e30ede5022e1", "message": "Fix issue with setting next_txn_id in markCompacted + test fixes", "committedDate": "2020-10-21T13:01:59Z", "type": "forcePushed"}, {"oid": "f1401026088f6b9dea4418d1cfc949559ac0e77c", "url": "https://github.com/apache/hive/commit/f1401026088f6b9dea4418d1cfc949559ac0e77c", "message": "HIVE-24291: Compaction cleaner should wait for all prev txn to commit", "committedDate": "2020-10-21T13:11:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MDQ2OQ==", "url": "https://github.com/apache/hive/pull/1592#discussion_r514360469", "bodyText": "It's not the end of the world to add the CQ_TXN_ID column, but we can avoid that and keep things more straightforward (i.e. keep compaction stuff out of generic TxnHandler and limit it to CompactionTxnHandler which was made specifically for updating compaction-related tables) by updating CQ_NEXT_TXN_ID in CompactionTxnHandler instead, and calling it straight from Worker, maybe right between commitTxn and markCompacted. It would be so much simpler.", "author": "klcopp", "createdAt": "2020-10-29T15:41:18Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java", "diffHunk": "@@ -1526,6 +1529,10 @@ private void updateWSCommitIdAndCleanUpMetadata(Statement stmt, long txnid, TxnT\n     if (txnType == TxnType.MATER_VIEW_REBUILD) {\n       queryBatch.add(\"DELETE FROM \\\"MATERIALIZATION_REBUILD_LOCKS\\\" WHERE \\\"MRL_TXN_ID\\\" = \" + txnid);\n     }\n+    if (txnType == TxnType.COMPACTION) {", "originalCommit": "40468c3ed3951680e95c1c6b9488044d96677093", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyMzIwMw==", "url": "https://github.com/apache/hive/pull/1592#discussion_r514923203", "bodyText": "I would prefer this method for two reasons:\n\nTo work correctly, the first point when we can update the CQ_NEXT_TXN_ID, is inside the commitTxn, when we already have the lock for the txnId sequence. Anywhere before that, there can be a txn, that will have a higher txnId than the saved CQ_NEXT_TXN_ID and still not see the compaction as committed -> causing the Cleaner to clean up deltas, that should be kept for that txn. So if we don't do it in commitTxn, we only can do it after that, but that would mean, that the update won't be part of the transaction, and can fail \"silently\"\nIn a follow up Jira, I need to provide a HMS notification for every committed compaction, for that I would also need CQ_TXN_ID", "author": "pvargacl", "createdAt": "2020-10-30T07:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MDQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3OTY0MA==", "url": "https://github.com/apache/hive/pull/1592#discussion_r514979640", "bodyText": "I think, you could make updateWSCommitIdAndCleanUpMetadata protected and overwrite it in CompactionTxnHandler, so we won't scatter compaction related stuff across many classes.", "author": "deniskuzZ", "createdAt": "2020-10-30T09:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MDQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzNjYxOA==", "url": "https://github.com/apache/hive/pull/1592#discussion_r515136618", "bodyText": "Done", "author": "pvargacl", "createdAt": "2020-10-30T14:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MDQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MjMwOQ==", "url": "https://github.com/apache/hive/pull/1592#discussion_r514362309", "bodyText": "Cleaner already knows this value, Cleaner#run calls CompactionTxnHandler#findMinOpenTxnIdForCleaner first, then findReadyToClean, so you can just pass it into findReadyToClean.\n(Btw findMinOpenTxnIdForCleaner doesn't filter out timed out txns like getMinOpenTxnIdWaterMark does, might want to change that? (AcidHouseKeeperService should take care of that, but who knows if it's on... on the other hand that's another query and would take longer))", "author": "klcopp", "createdAt": "2020-10-29T15:43:37Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/CompactionTxnHandler.java", "diffHunk": "@@ -281,9 +280,14 @@ public void markCompacted(CompactionInfo info) throws MetaException {\n       try {\n         dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n         stmt = dbConn.createStatement();\n-        String s = \"SELECT \\\"CQ_ID\\\", \\\"CQ_DATABASE\\\", \\\"CQ_TABLE\\\", \\\"CQ_PARTITION\\\", \" +\n-            \"\\\"CQ_TYPE\\\", \\\"CQ_RUN_AS\\\", \\\"CQ_HIGHEST_WRITE_ID\\\" FROM \\\"COMPACTION_QUEUE\\\" \" +\n-            \"WHERE \\\"CQ_STATE\\\" = '\" + READY_FOR_CLEANING + \"'\";\n+        /*\n+         * By filtering on minOpenTxnWaterMark, we will only cleanup after every transaction is committed, that could see\n+         * the uncompacted deltas. This way the cleaner can clean up everything that was made obsolete by this compaction.\n+         */\n+        long minOpenTxnWaterMark = getMinOpenTxnIdWaterMark(dbConn);", "originalCommit": "40468c3ed3951680e95c1c6b9488044d96677093", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxOTk5MQ==", "url": "https://github.com/apache/hive/pull/1592#discussion_r514919991", "bodyText": "Passing the minOpenTxn as an argument now\nChanged the findMinOpenTxnIdForCleaner to use getMinOpenTxnIdWaterMark. The timeout boundary checking is needed, since HIVE-23084, because it might be possible for an open txn to appear later, that has txnId lower than the current minOpen and higher the timeout boundary. Probably it wouldn't cause any problem for the Cleaner, but better safe than sorry, this way it always gives correct result.\nThis also means that the max(cq_next_txnid) check is removed, but I think this will only mean, that if there were any txn after the compaction that were aborted, we are going to clean those up also, which is a good side effect.", "author": "pvargacl", "createdAt": "2020-10-30T07:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MjMwOQ=="}], "type": "inlineReview"}, {"oid": "99ff6958a35a063110394e0ae1aff0e5f4f1603a", "url": "https://github.com/apache/hive/commit/99ff6958a35a063110394e0ae1aff0e5f4f1603a", "message": "HIVE-24291: Compaction cleaner should wait for all prev txn to commit", "committedDate": "2020-10-30T07:24:54Z", "type": "commit"}, {"oid": "c882c4d3550648608d2368b00f7b911c21cbe711", "url": "https://github.com/apache/hive/commit/c882c4d3550648608d2368b00f7b911c21cbe711", "message": "Fixing tests", "committedDate": "2020-10-30T07:24:54Z", "type": "commit"}, {"oid": "d3ea9961365d4471ac6dc8a38af210831b251a58", "url": "https://github.com/apache/hive/commit/d3ea9961365d4471ac6dc8a38af210831b251a58", "message": "Address review comment", "committedDate": "2020-10-30T07:38:38Z", "type": "forcePushed"}, {"oid": "5388ecdc5c7c309f119e43d25f3f5ff0558e9e40", "url": "https://github.com/apache/hive/commit/5388ecdc5c7c309f119e43d25f3f5ff0558e9e40", "message": "Address review comment", "committedDate": "2020-10-30T07:59:33Z", "type": "commit"}, {"oid": "5388ecdc5c7c309f119e43d25f3f5ff0558e9e40", "url": "https://github.com/apache/hive/commit/5388ecdc5c7c309f119e43d25f3f5ff0558e9e40", "message": "Address review comment", "committedDate": "2020-10-30T07:59:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4OTcyOA==", "url": "https://github.com/apache/hive/pull/1592#discussion_r514989728", "bodyText": "Do we expect it to be <= 0? Could we have CQ_NEXT_TXN_ID = NULL?", "author": "deniskuzZ", "createdAt": "2020-10-30T10:07:27Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/CompactionTxnHandler.java", "diffHunk": "@@ -281,9 +281,16 @@ public void markCompacted(CompactionInfo info) throws MetaException {\n       try {\n         dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n         stmt = dbConn.createStatement();\n-        String s = \"SELECT \\\"CQ_ID\\\", \\\"CQ_DATABASE\\\", \\\"CQ_TABLE\\\", \\\"CQ_PARTITION\\\", \" +\n-            \"\\\"CQ_TYPE\\\", \\\"CQ_RUN_AS\\\", \\\"CQ_HIGHEST_WRITE_ID\\\" FROM \\\"COMPACTION_QUEUE\\\" \" +\n-            \"WHERE \\\"CQ_STATE\\\" = '\" + READY_FOR_CLEANING + \"'\";\n+        /*\n+         * By filtering on minOpenTxnWaterMark, we will only cleanup after every transaction is committed, that could see\n+         * the uncompacted deltas. This way the cleaner can clean up everything that was made obsolete by this compaction.\n+         */\n+        String s = \"SELECT \\\"CQ_ID\\\", \\\"CQ_DATABASE\\\", \\\"CQ_TABLE\\\", \\\"CQ_PARTITION\\\", \"\n+                + \"\\\"CQ_TYPE\\\", \\\"CQ_RUN_AS\\\", \\\"CQ_HIGHEST_WRITE_ID\\\" FROM \\\"COMPACTION_QUEUE\\\" WHERE \\\"CQ_STATE\\\" = '\"\n+                + READY_FOR_CLEANING;\n+        if (minOpenTxnWaterMark > 0) {", "originalCommit": "5388ecdc5c7c309f119e43d25f3f5ff0558e9e40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzODEzNw==", "url": "https://github.com/apache/hive/pull/1592#discussion_r515138137", "bodyText": "Both of them are here to support easier testing. In some of the compaction test, the compaction workflow is imitated, and it is not run in transaction, so this check would fail.", "author": "pvargacl", "createdAt": "2020-10-30T14:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4OTcyOA=="}], "type": "inlineReview"}, {"oid": "5266d4bb34ab0c681fed7accb32495ea8c1ac1b3", "url": "https://github.com/apache/hive/commit/5266d4bb34ab0c681fed7accb32495ea8c1ac1b3", "message": "move compaction update to CompactionTxnHandler", "committedDate": "2020-10-30T14:24:31Z", "type": "commit"}, {"oid": "3008a5ee29e12759d0281564cfeba5d434d81619", "url": "https://github.com/apache/hive/commit/3008a5ee29e12759d0281564cfeba5d434d81619", "message": "Revert \"move compaction update to CompactionTxnHandler\"\n\nThis reverts commit 5266d4bb34ab0c681fed7accb32495ea8c1ac1b3.", "committedDate": "2020-11-01T15:11:36Z", "type": "commit"}, {"oid": "e1068364252429cd7f65eac7a5a3106d66e3a272", "url": "https://github.com/apache/hive/commit/e1068364252429cd7f65eac7a5a3106d66e3a272", "message": "move compaction update to CTH", "committedDate": "2020-11-01T15:22:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNzg1Mg==", "url": "https://github.com/apache/hive/pull/1592#discussion_r515637852", "bodyText": "Thanks for the change! It looks much cleaner and more readable to me. Could you please add \"@OverRide\" annotation as well.\nPending tests ...", "author": "deniskuzZ", "createdAt": "2020-11-01T15:49:33Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/txn/CompactionTxnHandler.java", "diffHunk": "@@ -1120,50 +1128,34 @@ public void setHadoopJobId(String hadoopJobId, long id) {\n \n   @Override\n   @RetrySemantics.Idempotent\n-  public long findMinOpenTxnIdForCleaner() throws MetaException{\n+  public long findMinOpenTxnIdForCleaner() throws MetaException {\n     Connection dbConn = null;\n-    Statement stmt = null;\n-    ResultSet rs = null;\n     try {\n       try {\n         dbConn = getDbConn(Connection.TRANSACTION_READ_COMMITTED);\n-        stmt = dbConn.createStatement();\n-        String query = \"SELECT COUNT(\\\"TXN_ID\\\") FROM \\\"TXNS\\\" WHERE \\\"TXN_STATE\\\" = \" + TxnStatus.OPEN;\n-        LOG.debug(\"Going to execute query <\" + query + \">\");\n-        rs = stmt.executeQuery(query);\n-        if (!rs.next()) {\n-          throw new MetaException(\"Transaction tables not properly initialized.\");\n-        }\n-        long numOpenTxns = rs.getLong(1);\n-        if (numOpenTxns > 0) {\n-          query = \"SELECT MIN(\\\"RES\\\".\\\"ID\\\") FROM (\" +\n-              \"SELECT MIN(\\\"TXN_ID\\\") AS \\\"ID\\\" FROM \\\"TXNS\\\" WHERE \\\"TXN_STATE\\\" = \" + TxnStatus.OPEN +\n-              \" UNION \" +\n-              \"SELECT MAX(\\\"CQ_NEXT_TXN_ID\\\") AS \\\"ID\\\" FROM \\\"COMPACTION_QUEUE\\\" WHERE \\\"CQ_STATE\\\" = \"\n-              + quoteChar(READY_FOR_CLEANING) +\n-              \") \\\"RES\\\"\";\n-        } else {\n-          query = \"SELECT MAX(\\\"TXN_ID\\\") + 1 FROM \\\"TXNS\\\"\";\n-        }\n-        LOG.debug(\"Going to execute query <\" + query + \">\");\n-        rs = stmt.executeQuery(query);\n-        if (!rs.next()) {\n-          throw new MetaException(\"Transaction tables not properly initialized, no record found in TXNS\");\n-        }\n-        return rs.getLong(1);\n+        return getMinOpenTxnIdWaterMark(dbConn);\n       } catch (SQLException e) {\n         LOG.error(\"Unable to getMinOpenTxnIdForCleaner\", e);\n         rollbackDBConn(dbConn);\n         checkRetryable(dbConn, e, \"getMinOpenTxnForCleaner\");\n         throw new MetaException(\"Unable to execute getMinOpenTxnIfForCleaner() \" +\n             StringUtils.stringifyException(e));\n       } finally {\n-        close(rs, stmt, dbConn);\n+        closeDbConn(dbConn);\n       }\n     } catch (RetryException e) {\n       return findMinOpenTxnIdForCleaner();\n     }\n   }\n+\n+  protected void updateWSCommitIdAndCleanUpMetadata(Statement stmt, long txnid, TxnType txnType, Long commitId,", "originalCommit": "e1068364252429cd7f65eac7a5a3106d66e3a272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "002a50f39d1186ff6fdcaa07faac712ab6396620", "url": "https://github.com/apache/hive/commit/002a50f39d1186ff6fdcaa07faac712ab6396620", "message": "typo fix", "committedDate": "2020-11-01T18:15:42Z", "type": "commit"}, {"oid": "b3a3b512f7d97d0fc8d7e0e57f4a23a1d2b05000", "url": "https://github.com/apache/hive/commit/b3a3b512f7d97d0fc8d7e0e57f4a23a1d2b05000", "message": "Temporary fix HIVE-24325 test", "committedDate": "2020-11-02T10:00:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzNzY3Nw==", "url": "https://github.com/apache/hive/pull/1592#discussion_r516037677", "bodyText": "You can revert this, I disabled it a minute ago.", "author": "klcopp", "createdAt": "2020-11-02T15:10:05Z", "path": "ql/src/test/results/clientpositive/llap/cardinality_preserving_join_opt2.q.out", "diffHunk": "@@ -239,7 +239,7 @@ HiveProject(c1=[$11], c5=[$13], c6=[$14], c3=[$1], c4=[$2], c51=[$3], c61=[$4],\n             HiveFilter(condition=[IS NOT NULL($0)])\n               HiveTableScan(table=[[mydb_e10, d4_tab_e10]], table:alias=[r])\n         HiveProject(c1=[$0], c2=[$1], c4=[$3], c5=[$4])\n-          HiveFilter(condition=[AND(OR(IS NULL($4), >($4, 2020-10-01)), IS NOT NULL($1), IS NOT NULL($0))])", "originalCommit": "b3a3b512f7d97d0fc8d7e0e57f4a23a1d2b05000", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzODEyMg==", "url": "https://github.com/apache/hive/pull/1592#discussion_r516038122", "bodyText": "And rebase of course", "author": "klcopp", "createdAt": "2020-11-02T15:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzNzY3Nw=="}], "type": "inlineReview"}]}