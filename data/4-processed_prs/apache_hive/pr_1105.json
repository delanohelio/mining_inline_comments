{"pr_number": 1105, "pr_title": "HIVE-22957: Support Partition Filtering In MSCK REPAIR TABLE Command", "pr_createdAt": "2020-06-13T08:15:48Z", "pr_url": "https://github.com/apache/hive/pull/1105", "timeline": [{"oid": "d1f77c2b05d02b701ab1f83a8633ac7c9e607fc3", "url": "https://github.com/apache/hive/commit/d1f77c2b05d02b701ab1f83a8633ac7c9e607fc3", "message": "HIVE-22957: Add Option For Predicate Filtering In MSCK REPAIR TABLE Command", "committedDate": "2020-06-26T16:08:00Z", "type": "commit"}, {"oid": "747394343581b731385c88d6b3d745bfa7cd9266", "url": "https://github.com/apache/hive/commit/747394343581b731385c88d6b3d745bfa7cd9266", "message": "Refactoring Code", "committedDate": "2020-06-26T16:08:00Z", "type": "commit"}, {"oid": "3045ffa09dd928a76af8798f06ccf74f68c41bad", "url": "https://github.com/apache/hive/commit/3045ffa09dd928a76af8798f06ccf74f68c41bad", "message": "Msck Test Fix", "committedDate": "2020-06-26T16:08:00Z", "type": "commit"}, {"oid": "3045ffa09dd928a76af8798f06ccf74f68c41bad", "url": "https://github.com/apache/hive/commit/3045ffa09dd928a76af8798f06ccf74f68c41bad", "message": "Msck Test Fix", "committedDate": "2020-06-26T16:08:00Z", "type": "forcePushed"}, {"oid": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "url": "https://github.com/apache/hive/commit/c91b3d442872bbf57b33fdd1f38f1487407c1852", "message": "Rebase  master", "committedDate": "2020-06-26T16:27:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5NTgxMQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451495811", "bodyText": "is there a reason that we run this test with mr?", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:13:31Z", "path": "itests/src/test/resources/testconfiguration.properties", "diffHunk": "@@ -222,6 +222,7 @@ mr.query.files=\\\n   mapjoin_subquery2.q,\\\n   mapjoin_test_outer.q,\\\n   masking_5.q,\\\n+  msck_repair_filter.q,\\", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMjc1Mg==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452132752", "bodyText": "Not a requirement though. This was done before we moved our qtests to run on LLAP by default. It makes sense to move this to LLAP as well.\nFixed.", "author": "shameersss1", "createdAt": "2020-07-09T10:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5NTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5Nzc5Mw==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451497793", "bodyText": "I know it was here before - but let's fix this up:\ninstead of separate add/drop/sync variable ...we could have opt=(KW_ADD|KW_DROP|KW_SYNC) ? that will make the other end more readable as well", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:15:42Z", "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g", "diffHunk": "@@ -1942,9 +1942,8 @@ metastoreCheck\n @after { popMsg(state); }\n     : KW_MSCK (repair=KW_REPAIR)?\n       (KW_TABLE tableName\n-        ((add=KW_ADD | drop=KW_DROP | sync=KW_SYNC) (parts=KW_PARTITIONS))? |\n-        (partitionSpec)?)\n-    -> ^(TOK_MSCK $repair? tableName? $add? $drop? $sync? (partitionSpec*)?)\n+        ((add=KW_ADD | drop=KW_DROP | sync=KW_SYNC) (parts=KW_PARTITIONS) (filterPartitionSpec)?)?)\n+    -> ^(TOK_MSCK $repair? tableName? $add? $drop? $sync? (filterPartitionSpec)?)", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMjg2MQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452132861", "bodyText": "Yes It makes sense!. Fixed.", "author": "shameersss1", "createdAt": "2020-07-09T10:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5Nzc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMjIwMQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451502201", "bodyText": "old partitionSpec doesn't mandatorily required the constant\nidentifier (EQUAL constant)? \n\nwere there any use cases of that?", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:21:33Z", "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "diffHunk": "@@ -734,6 +734,21 @@ dropPartitionOperator\n     EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN\n     ;\n \n+filterPartitionSpec\n+    :\n+    LPAREN filterPartitionVal (COMMA  filterPartitionVal )* RPAREN -> ^(TOK_PARTSPEC filterPartitionVal +)\n+    ;\n+\n+filterPartitionVal\n+    :\n+    identifier filterPartitionOperator constant -> ^(TOK_PARTVAL identifier filterPartitionOperator constant)", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMzMwNw==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452133307", "bodyText": "Based on the implementation, I don't think there was never such a use case. I guess we always except it to be contatant\nRefer:\nhttps://github.com/apache/hive/blob/master/ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java#L66\n\n  \n    \n      hive/ql/src/java/org/apache/hadoop/hive/ql/parse/BaseSemanticAnalyzer.java\n    \n    \n         Line 1527\n      in\n      6f9c7bc\n    \n    \n    \n    \n\n        \n          \n           val = stripQuotes(child.getChild(1).getText()); \n        \n    \n  \n\n\n\n  \n    \n      hive/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java\n    \n    \n         Line 259\n      in\n      6f9c7bc\n    \n    \n    \n    \n\n        \n          \n           for (Map<String, String> map : partitions) {", "author": "shameersss1", "createdAt": "2020-07-09T10:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMjIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzYzMA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451503630", "bodyText": "I don't think this will work - this is the ql module ; while EXPRESSION_PROXY_CLASS is a metastore conf key; in a remote metastore setup this set will probably have no effect...\nhave you tried it?\nI think making a check and returning with an error that this feature is not available due to required conf change is fine", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:24:04Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "diffHunk": "@@ -63,13 +67,24 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n     }\n \n     Table table = getTable(tableName);\n-    List<Map<String, String>> specs = getPartitionSpecs(table, root);\n+    Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = getFullPartitionSpecs(root, table, conf, false);\n+    byte[] filterExp = null;\n+    if (partitionSpecs != null & !partitionSpecs.isEmpty()) {\n+      // explicitly set expression proxy class to PartitionExpressionForMetastore since we intend to use the\n+      // filterPartitionsByExpr of PartitionExpressionForMetastore for partition pruning down the line.\n+      conf.set(MetastoreConf.ConfVars.EXPRESSION_PROXY_CLASS.getVarname(),", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMjk2Mw==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452132963", "bodyText": "Yes, It won't work with remote metastore. Currently only planning for embedded metastore, Sure, we should bail out if conditions are not met. Currently i have added the bail out code in HiveMetaStoreChecker. But i feel bail out should have been much more earlier. I Couldn't think of a better spot. Any thoughts on this?", "author": "shameersss1", "createdAt": "2020-07-09T10:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNzM0OA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452137348", "bodyText": "I think it would be great to throw an exception here; I think you should throw the type SemanticException\nThrowing exceptions from in the Analyzer classes works nicely! :)", "author": "kgyrtkirk", "createdAt": "2020-07-09T11:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMjU1Nw==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452202557", "bodyText": "Done!", "author": "shameersss1", "createdAt": "2020-07-09T13:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwNzg4Ng==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451507886", "bodyText": "dropPartitionSpec seems to use almost the same construct ; I don't see any reason to duplicate it ...\nthe only difference I see right now is LIKE - are there any other differences?\nI think instead of duplicate we should use the same stuff...", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:31:36Z", "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "diffHunk": "@@ -734,6 +734,21 @@ dropPartitionOperator\n     EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN\n     ;\n \n+filterPartitionSpec\n+    :\n+    LPAREN filterPartitionVal (COMMA  filterPartitionVal )* RPAREN -> ^(TOK_PARTSPEC filterPartitionVal +)\n+    ;\n+\n+filterPartitionVal\n+    :\n+    identifier filterPartitionOperator constant -> ^(TOK_PARTVAL identifier filterPartitionOperator constant)\n+    ;\n+\n+filterPartitionOperator\n+    :\n+    EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | KW_LIKE", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMzUxMA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452133510", "bodyText": "There is one slight difference apart from the LIKE operator, dropPartitionSpec expects PARTITON keyword, But since in MSCK we already have a PARTITONS keyword in the syntax it will cause a problem.", "author": "shameersss1", "createdAt": "2020-07-09T10:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwNzg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0MDAzNQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452140035", "bodyText": "I may just blur the distinction between PARTITION/PARTITIONS :)", "author": "kgyrtkirk", "createdAt": "2020-07-09T11:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwNzg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMjU5Mg==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452202592", "bodyText": "Done!", "author": "shameersss1", "createdAt": "2020-07-09T13:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwNzg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwODUyOA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451508528", "bodyText": "why this needs to be flattened into a byte[] ?", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:32:45Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "diffHunk": "@@ -63,13 +67,24 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n     }\n \n     Table table = getTable(tableName);\n-    List<Map<String, String>> specs = getPartitionSpecs(table, root);\n+    Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = getFullPartitionSpecs(root, table, conf, false);\n+    byte[] filterExp = null;\n+    if (partitionSpecs != null & !partitionSpecs.isEmpty()) {\n+      // explicitly set expression proxy class to PartitionExpressionForMetastore since we intend to use the\n+      // filterPartitionsByExpr of PartitionExpressionForMetastore for partition pruning down the line.\n+      conf.set(MetastoreConf.ConfVars.EXPRESSION_PROXY_CLASS.getVarname(),\n+          PartitionExpressionForMetastore.class.getCanonicalName());\n+      // fetch the first value of partitionSpecs map since it will always have one key, value pair\n+      filterExp = SerializationUtilities.serializeExpressionToKryo(", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMzYyNw==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452133627", "bodyText": "PartitionPruner and msc.listPartitionsByExpr() expects serialized byte array, Hence it is required to flatten out.", "author": "shameersss1", "createdAt": "2020-07-09T10:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwODUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMTAyMw==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451511023", "bodyText": "can we find a new home for these 2 static methods? :)\nql/src/java/org/apache/hadoop/hive/ql/parse/ParseUtils.java", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:37:03Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/BaseSemanticAnalyzer.java", "diffHunk": "@@ -837,6 +844,118 @@ public static void checkColumnName(String columnName) throws SemanticException {\n     return colList;\n   }\n \n+  /**\n+   * Get the partition specs from the tree. This stores the full specification\n+   * with the comparator operator into the output list.\n+   *\n+   * @return Map of partitions by prefix length. Most of the time prefix length will\n+   *         be the same for all partition specs, so we can just OR the expressions.\n+   */\n+  public static Map<Integer, List<ExprNodeGenericFuncDesc>> getFullPartitionSpecs(", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMzY4Mg==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452133682", "bodyText": "Fixed!", "author": "shameersss1", "createdAt": "2020-07-09T10:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMTQ1MA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451511450", "bodyText": "is there a successor of this test?", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:37:52Z", "path": "ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java", "diffHunk": "@@ -330,17 +330,6 @@ public void testPartitionsCheck() throws HiveException,\n     assertEquals(partToRemove.getTable().getTableName(),\n         result.getPartitionsNotOnFs().iterator().next().getTableName());\n     assertEquals(Collections.<CheckResult.PartitionResult>emptySet(), result.getPartitionsNotInMs());\n-\n-    List<Map<String, String>> partsCopy = new ArrayList<Map<String, String>>();\n-    partsCopy.add(partitions.get(1).getSpec());", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMzkyNg==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452133926", "bodyText": "I think the qtests handles most of cases", "author": "shameersss1", "createdAt": "2020-07-09T10:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMzY1NA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451513654", "bodyText": "I wonder if there is a way to retain filterExp in a more natural way....it will be kryo-encoded almost all the time...but seems like the metastore interface method was designed to accept kryo stuff...", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:41:29Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -240,40 +243,27 @@ void checkTable(String catName, String dbName, String tableName,\n     }\n \n     PartitionIterable parts;\n-    boolean findUnknownPartitions = true;\n \n     if (isPartitioned(table)) {\n-      if (partitions == null || partitions.isEmpty()) {\n+      if (filterExp != null) {\n+        List<Partition> results = new ArrayList<>();\n+        getPartitionListByFilterExp(getMsc(), table, filterExp,", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNjIyMg==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452136222", "bodyText": "I though this initially but it becomes difficult to serialize filter exp once we move out of ql code, Hence did the kyro stuff in the initial stage", "author": "shameersss1", "createdAt": "2020-07-09T11:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0MTE2Mg==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452141162", "bodyText": "yeah I understand...sometimes we have to cook from what we have :D", "author": "kgyrtkirk", "createdAt": "2020-07-09T11:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMzY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxNzUyNQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451517525", "bodyText": "this method accepts byte[] and if I'm not wrong this is like this since around 2013", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:48:00Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/utils/MetaStoreServerUtils.java", "diffHunk": "@@ -1348,6 +1348,17 @@ public static Path getPath(Table table) {\n     }\n   }\n \n+  public static void getPartitionListByFilterExp(IMetaStoreClient msc, Table table, byte[] filterExp,\n+                                                 String defaultPartName, List<Partition> results)\n+      throws MetastoreException {\n+    try {\n+      msc.listPartitionsByExpr(table.getCatName(), table.getDbName(), table.getTableName(), filterExp,", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNTI0NA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452135244", "bodyText": "Yes, I think we also pass byte array", "author": "shameersss1", "createdAt": "2020-07-09T10:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxNzUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxODgwNg==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451518806", "bodyText": "move this variable inside the if", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:50:10Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -383,7 +375,29 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     // now check the table folder and see if we find anything\n     // that isn't in the metastore\n     Set<Path> allPartDirs = new HashSet<Path>();\n+    Set<Path> partDirs = new HashSet<Path>();", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNDA0Mg==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452134042", "bodyText": "Fixed", "author": "shameersss1", "createdAt": "2020-07-09T10:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxODgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyMjMzMA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451522330", "bodyText": "instead of concatenating with / use new Path(parentPath,child) - it's more portable", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:55:40Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -383,7 +375,29 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     // now check the table folder and see if we find anything\n     // that isn't in the metastore\n     Set<Path> allPartDirs = new HashSet<Path>();\n+    Set<Path> partDirs = new HashSet<Path>();\n+    List<FieldSchema> partColumns = table.getPartitionKeys();\n     checkPartitionDirs(tablePath, allPartDirs, Collections.unmodifiableList(getPartColNames(table)));\n+\n+    if (filterExp != null) {\n+      PartitionExpressionProxy expressionProxy = createExpressionProxy(conf);\n+      List<String> paritions = new ArrayList<>();\n+      for (Path path : allPartDirs) {\n+        // remove the table's path from the partition path\n+        // eg: <tablePath>/p1=1/p2=2/p3=3 ---> p1=1/p2=2/p3=3\n+        paritions.add(path.toString().substring(tablePath.toString().length() + 1));\n+      }\n+      // Remove all partition paths which does not matches the filter expression.\n+      expressionProxy.filterPartitionsByExpr(partColumns, filterExp,\n+          conf.get(MetastoreConf.ConfVars.DEFAULTPARTITIONNAME.getVarname()), paritions);\n+\n+      // now the partition list will contain all the paths that matches the filter expression.\n+      // add them back to partDirs.\n+      for (String path : paritions) {\n+        partDirs.add(new Path(tablePath.toString() + \"/\" + path));", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNDA5MA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452134090", "bodyText": "Fixed!", "author": "shameersss1", "createdAt": "2020-07-09T10:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyMjMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyNDE2Ng==", "url": "https://github.com/apache/hive/pull/1105#discussion_r451524166", "bodyText": "I'm wondering if tablePath could end with a '/' or not; if it does, and checkPartitionDirs are removing double slashes this could eat up 1 extra char...", "author": "kgyrtkirk", "createdAt": "2020-07-08T12:58:36Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreChecker.java", "diffHunk": "@@ -383,7 +375,29 @@ void findUnknownPartitions(Table table, Set<Path> partPaths,\n     // now check the table folder and see if we find anything\n     // that isn't in the metastore\n     Set<Path> allPartDirs = new HashSet<Path>();\n+    Set<Path> partDirs = new HashSet<Path>();\n+    List<FieldSchema> partColumns = table.getPartitionKeys();\n     checkPartitionDirs(tablePath, allPartDirs, Collections.unmodifiableList(getPartColNames(table)));\n+\n+    if (filterExp != null) {\n+      PartitionExpressionProxy expressionProxy = createExpressionProxy(conf);\n+      List<String> paritions = new ArrayList<>();\n+      for (Path path : allPartDirs) {\n+        // remove the table's path from the partition path\n+        // eg: <tablePath>/p1=1/p2=2/p3=3 ---> p1=1/p2=2/p3=3\n+        paritions.add(path.toString().substring(tablePath.toString().length() + 1));", "originalCommit": "c91b3d442872bbf57b33fdd1f38f1487407c1852", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNDMyNQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452134325", "bodyText": "Fixed!", "author": "shameersss1", "createdAt": "2020-07-09T10:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyNDE2Ng=="}], "type": "inlineReview"}, {"oid": "2afd27e6ee7ed0c11223c62ff1883f52f917957a", "url": "https://github.com/apache/hive/commit/2afd27e6ee7ed0c11223c62ff1883f52f917957a", "message": "Fix PR Comments", "committedDate": "2020-07-09T10:52:26Z", "type": "commit"}, {"oid": "412ced9a3941a64e7df23ef7096c5a6928393321", "url": "https://github.com/apache/hive/commit/412ced9a3941a64e7df23ef7096c5a6928393321", "message": "Throw exception on invalid config", "committedDate": "2020-07-09T13:06:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMTg1MA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452211850", "bodyText": "I think we are fighting with the complexity of the existing complexity :)\nright now this will mean that we may write TABLE t PARTITION PARTITION ...  :D\ndo one of the following:\n\neither push out the KW_PARTITION keyword from dropPartitionSpec to every site it's being used\nor...remove the (parts=KW_PARTITIONS)? from here and change the dropPartitionSpec to accept it optionally by using: (KW_PARTITION | KW_PARTITIONS)?\n\nI think we should also clean up a bit:\n\nrename the dropPartitionSpec to something which doesn't have drop in its name like partitionSelectorSpec", "author": "kgyrtkirk", "createdAt": "2020-07-09T13:20:52Z", "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g", "diffHunk": "@@ -1942,8 +1942,8 @@ metastoreCheck\n @after { popMsg(state); }\n     : KW_MSCK (repair=KW_REPAIR)?\n       (KW_TABLE tableName\n-        (opt=(KW_ADD|KW_DROP|KW_SYNC) (parts=KW_PARTITIONS) (filterPartitionSpec)?)?)\n-    -> ^(TOK_MSCK $repair? tableName? $opt? (filterPartitionSpec)?)\n+        (opt=(KW_ADD|KW_DROP|KW_SYNC) (parts=KW_PARTITIONS)? (dropPartitionSpec)?)?)", "originalCommit": "412ced9a3941a64e7df23ef7096c5a6928393321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODU2OQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452288569", "bodyText": "Option 2 looks good, Option 1 will change the current syntax.\nFixed.", "author": "shameersss1", "createdAt": "2020-07-09T15:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMTg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY0NQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452212645", "bodyText": "I think this should be (KW_PARTITION|KW_PARTITIONS)  ; because in it's current form it will\n\naccept PARTITION\nand PARTITIONS  (...)\nbut not  PARTITION (...)", "author": "kgyrtkirk", "createdAt": "2020-07-09T13:21:59Z", "path": "parser/src/java/org/apache/hadoop/hive/ql/parse/IdentifiersParser.g", "diffHunk": "@@ -720,7 +720,7 @@ partitionVal\n \n dropPartitionSpec\n     :\n-    KW_PARTITION\n+    KW_PARTITION | KW_PARTITIONS", "originalCommit": "412ced9a3941a64e7df23ef7096c5a6928393321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODYwMQ==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452288601", "bodyText": "As discussed above!", "author": "shameersss1", "createdAt": "2020-07-09T15:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNDEyMA==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452214120", "bodyText": "you could avoid the null/empty check by using: !PartitionExpressionForMetastore.class.getCanonicalName()).equals(expressionProxyClass)", "author": "kgyrtkirk", "createdAt": "2020-07-09T13:24:15Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ddl/misc/msck/MsckAnalyzer.java", "diffHunk": "@@ -71,10 +71,15 @@ public void analyzeInternal(ASTNode root) throws SemanticException {\n     Map<Integer, List<ExprNodeGenericFuncDesc>> partitionSpecs = ParseUtils.getFullPartitionSpecs(root, table, conf, false);\n     byte[] filterExp = null;\n     if (partitionSpecs != null & !partitionSpecs.isEmpty()) {\n-      // explicitly set expression proxy class to PartitionExpressionForMetastore since we intend to use the\n+      // expression proxy class needs to be PartitionExpressionForMetastore since we intend to use the\n       // filterPartitionsByExpr of PartitionExpressionForMetastore for partition pruning down the line.\n-      conf.set(MetastoreConf.ConfVars.EXPRESSION_PROXY_CLASS.getVarname(),\n-          PartitionExpressionForMetastore.class.getCanonicalName());\n+      // Bail out early if expressionProxyClass is not configured properly.\n+      String expressionProxyClass = conf.get(MetastoreConf.ConfVars.EXPRESSION_PROXY_CLASS.getVarname());\n+      if (expressionProxyClass == null || expressionProxyClass.isEmpty() ||\n+          !expressionProxyClass.equals(PartitionExpressionForMetastore.class.getCanonicalName())) {", "originalCommit": "412ced9a3941a64e7df23ef7096c5a6928393321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODYzMw==", "url": "https://github.com/apache/hive/pull/1105#discussion_r452288633", "bodyText": "Fixed!", "author": "shameersss1", "createdAt": "2020-07-09T15:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNDEyMA=="}], "type": "inlineReview"}, {"oid": "3943cd5026299500ad492291d722bcab8821dbb4", "url": "https://github.com/apache/hive/commit/3943cd5026299500ad492291d722bcab8821dbb4", "message": "PR Commnets", "committedDate": "2020-07-09T15:05:12Z", "type": "commit"}]}