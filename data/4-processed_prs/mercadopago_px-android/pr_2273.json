{"pr_number": 2273, "pr_title": "[Enhancement] InterestFormatter and tests added", "pr_createdAt": "2020-08-06T21:04:54Z", "pr_url": "https://github.com/mercadopago/px-android/pull/2273", "timeline": [{"oid": "db347c3a00bc43a184beae35b3849c695722cdcf", "url": "https://github.com/mercadopago/px-android/commit/db347c3a00bc43a184beae35b3849c695722cdcf", "message": "InterestFormatter and tests added", "committedDate": "2020-08-06T20:50:18Z", "type": "commit"}, {"oid": "bf67242a40b240ffcb730341b70f953e7739c9c6", "url": "https://github.com/mercadopago/px-android/commit/bf67242a40b240ffcb730341b70f953e7739c9c6", "message": "update robolectric version and formatter", "committedDate": "2020-08-06T21:29:46Z", "type": "commit"}, {"oid": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054", "url": "https://github.com/mercadopago/px-android/commit/55be082b82c0b4a8f6a9ef2c8837a5c896b5d054", "message": "merge master", "committedDate": "2020-08-10T14:30:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjk5OQ==", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r469402999", "bodyText": "osea que crashea si el interest rate es empty?", "author": "cgaggino", "createdAt": "2020-08-12T16:54:12Z", "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.mercadopago.android.px.format\n+\n+import android.support.v4.content.ContextCompat\n+import android.text.SpannableStringBuilder\n+import android.text.style.ForegroundColorSpan\n+import com.mercadopago.android.px.BasicRobolectricTest\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.JsonUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.textformatter.InterestFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class InterestRateFormatterTest : BasicRobolectricTest() {\n+\n+    private lateinit var expected: SpannableStringBuilder\n+    private lateinit var actual: SpannableStringBuilder\n+\n+    @Before\n+    fun setUp() {\n+        expected = SpannableStringBuilder()\n+        actual = SpannableStringBuilder()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFT() {\n+        setFontAndColor(expected, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFT: 199,26%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFT: 199,26%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTNA() {\n+\n+        setFontAndColor(expected, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFTNA: 96,8%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftnaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTNA: 96,8%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftnaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTEA() {\n+        setFontAndColor(expected, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        setFontAndColor(expected, \"CFTEA: 0,00%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cfteaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTEA: 0,00%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        InterestFormatter(actual).withText(cfteaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateIsEmpty() {", "originalCommit": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMzE4OA==", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r469403188", "bodyText": "o est\u00e1 handleada la excepci\u00f3n", "author": "cgaggino", "createdAt": "2020-08-12T16:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3NzMzNQ==", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r469977335", "bodyText": "Claro, el formatter no acepta un objeto Text null, el que lo usa debe checkear que no lo sea.\nfun withText(text: Text) = apply {\n        this.text = text.message\n        this.font = PxFont.from(text.weight)\n        try {\n            this.textColor = Color.parseColor(text.textColor)\n        } catch (e: IllegalArgumentException) {}\n        return this\n    }", "author": "jorGonzalez291292", "createdAt": "2020-08-13T14:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwMDcxMQ==", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r470000711", "bodyText": "borrado", "author": "jorGonzalez291292", "createdAt": "2020-08-13T14:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMzM5Mw==", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r469403393", "bodyText": "idem", "author": "cgaggino", "createdAt": "2020-08-12T16:54:52Z", "path": "px-checkout/src/test/java/com/mercadopago/android/px/format/InterestRateFormatterTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.mercadopago.android.px.format\n+\n+import android.support.v4.content.ContextCompat\n+import android.text.SpannableStringBuilder\n+import android.text.style.ForegroundColorSpan\n+import com.mercadopago.android.px.BasicRobolectricTest\n+import com.mercadopago.android.px.R\n+import com.mercadopago.android.px.internal.font.PxFont\n+import com.mercadopago.android.px.internal.util.JsonUtil\n+import com.mercadopago.android.px.internal.util.ViewUtils\n+import com.mercadopago.android.px.internal.util.textformatter.InterestFormatter\n+import com.mercadopago.android.px.model.internal.Text\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class InterestRateFormatterTest : BasicRobolectricTest() {\n+\n+    private lateinit var expected: SpannableStringBuilder\n+    private lateinit var actual: SpannableStringBuilder\n+\n+    @Before\n+    fun setUp() {\n+        expected = SpannableStringBuilder()\n+        actual = SpannableStringBuilder()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFT() {\n+        setFontAndColor(expected, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFT: 199,26%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFT: 199,26%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTNA() {\n+\n+        setFontAndColor(expected, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        setFontAndColor(expected, \"CFTNA: 96,8%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cftnaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTNA: 96,8%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$45,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$137,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftnaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test\n+    fun whenInterestRateIsCFTEA() {\n+        setFontAndColor(expected, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(expected, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        setFontAndColor(expected, \"CFTEA: 0,00%\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+\n+        val cfteaText = JsonUtil\n+                .fromJson(\"{\\\"message\\\":\\\"CFTEA: 0,00%\\\",\\\"text_color\\\":\\\"#999999\\\",\\\"weight\\\":\\\"regular\\\"}\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$40\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"Interest-free\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_components_success_color))\n+        InterestFormatter(actual).withText(cfteaText).apply(getContext())\n+\n+        assertEqualsContent()\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateIsEmpty() {\n+\n+        val cftText = JsonUtil\n+                .fromJson(\"\",\n+                        Text::class.java)\n+\n+        setFontAndColor(actual, \"3x \\$47,88\", PxFont.SEMI_BOLD, ContextCompat.getColor(getContext(), R.color.ui_meli_black))\n+        setFontAndColor(actual, \"(\\$143,64)\", PxFont.REGULAR, ContextCompat.getColor(getContext(), R.color.ui_meli_grey))\n+        InterestFormatter(actual).withText(cftText).apply(getContext())\n+    }\n+\n+    @Test(expected = IllegalStateException::class)\n+    fun whenInterestRateTextMessageIsEmpty() {", "originalCommit": "55be082b82c0b4a8f6a9ef2c8837a5c896b5d054", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwMDg0MQ==", "url": "https://github.com/mercadopago/px-android/pull/2273#discussion_r470000841", "bodyText": "cambiado!", "author": "jorGonzalez291292", "createdAt": "2020-08-13T14:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMzM5Mw=="}], "type": "inlineReview"}, {"oid": "8cac69f9fa9a21627e5a46e15bb6e4636dfbaf02", "url": "https://github.com/mercadopago/px-android/commit/8cac69f9fa9a21627e5a46e15bb6e4636dfbaf02", "message": "refactor", "committedDate": "2020-08-13T14:36:26Z", "type": "commit"}]}