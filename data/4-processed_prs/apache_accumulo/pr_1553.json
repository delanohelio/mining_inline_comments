{"pr_number": 1553, "pr_title": "Simplify some VolumeManager tooling", "pr_createdAt": "2020-03-07T11:09:00Z", "pr_url": "https://github.com/apache/accumulo/pull/1553", "timeline": [{"oid": "bf1ca8fd9cead4dd508133f822943997a96c31ad", "url": "https://github.com/apache/accumulo/commit/bf1ca8fd9cead4dd508133f822943997a96c31ad", "message": "Simplify some VolumeManager tooling\n\n* Replace getVolumeByPath(p).getFileSystem() with getFileSystemByPath(p)\n  (no caller used getVolumeByPath without immediately calling getFileSystem)\n* Remove redundant null checks for path argument by pushing down into\n  getFileSystemByPath method\n* Remove unneeded NonConfiguredVolume class and test\n* Remove unneeded (and unused) VolumeManager.getContentSummary\n* Rename create method with overwrite capability to make API more clear\n* Retain all exceptions when closing filesystems (as suppressed)\n* Simplify/shorten implementations for VolumeManagerImpl methods\n* Make VolumeManager AutoCloseable (it already had a close method)\n* Fix tests (ZooLockTest -> ZooLockIT, and numerous incorrect usages of\n  TemporaryFolder)", "committedDate": "2020-03-07T11:06:44Z", "type": "commit"}, {"oid": "e5988eb4228343c07ff7ae878b7cfbdf11848bc0", "url": "https://github.com/apache/accumulo/commit/e5988eb4228343c07ff7ae878b7cfbdf11848bc0", "message": "Clean up ViewFs related VolumeManager tooling\n\nRemove ViewFSUtils and corresponding test, since we don't need it", "committedDate": "2020-03-07T11:11:03Z", "type": "commit"}, {"oid": "811cd4141c54282cf26d1638f0eff4fb57579881", "url": "https://github.com/apache/accumulo/commit/811cd4141c54282cf26d1638f0eff4fb57579881", "message": "Use instanceof to check for ViewFs\n\nThe mechanism deployed in Hadoop's ViewFileSystemUtil to check if a\nFileSystem is ViewFs does so by checking the URI scheme. However that\ncode is not stable public API, so I had previously implemented the log\ncloser to check for ViewFs using the same implementation, but using only\nstable public APIs from Hadoop. That didn't work, because RawFileSystem\ndoesn't implement the getScheme method. So, use instanceof instead, even\nthough ViewFileSystem itself is an evolving API (even though it is\nevolving, the class name is unlikely to change).", "committedDate": "2020-03-08T02:02:43Z", "type": "commit"}, {"oid": "ba09677138f781065b83742e2d699984d5aebece", "url": "https://github.com/apache/accumulo/commit/ba09677138f781065b83742e2d699984d5aebece", "message": "Tweak timeout of IT that fails", "committedDate": "2020-03-08T05:53:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389771101", "bodyText": "Could use VisibleForTesting annotation.", "author": "milleruntime", "createdAt": "2020-03-09T15:34:26Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -95,23 +94,18 @@ protected VolumeManagerImpl(Map<String,Volume> volumes, Volume defaultVolume,\n     this.hadoopConf = hadoopConf;\n   }\n \n-  private void invertVolumesByFileSystem(Map<String,Volume> forward,\n-      Multimap<URI,Volume> inverted) {\n-    for (Volume volume : forward.values()) {\n-      inverted.put(volume.getFileSystem().getUri(), volume);\n-    }\n+  private Multimap<URI,Volume> invertVolumesByFileSystem(Map<String,Volume> forward) {\n+    Multimap<URI,Volume> inverted = HashMultimap.create();\n+    forward.values().forEach(volume -> inverted.put(volume.getFileSystem().getUri(), volume));\n+    return inverted;\n   }\n \n-  public static org.apache.accumulo.server.fs.VolumeManager getLocal(String localBasePath)\n-      throws IOException {\n+  // for testing only\n+  public static VolumeManager getLocalForTesting(String localBasePath) throws IOException {", "originalCommit": "ba09677138f781065b83742e2d699984d5aebece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2MTAxMQ==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389861011", "bodyText": "I don't like that annotation, because:\n\nit can create an unnecessary Guava dependency,\nI don't like checking to see if we already have Guava on that module, and\nthe annotation provides no additional value over a comment since there are no tools for which the annotation would matter\n\nThe method name makes it clear. The comment is bonus. An annotation wouldn't do anything other than add an import and possibly a new direct dependency if Guava wasn't already in the pom.", "author": "ctubbsii", "createdAt": "2020-03-09T17:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NTExMg==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389875112", "bodyText": "This makes me think we should just create our own annotation for VisibleForTesting since its not used for anything else other than a label.", "author": "milleruntime", "createdAt": "2020-03-09T18:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4MTY5Mw==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389881693", "bodyText": "Maybe. That would eliminate the issue of bringing in a dependency when not needed, but it still wouldn't matter whether it's an annotation or a comment if we don't have any tooling for verification.", "author": "ctubbsii", "createdAt": "2020-03-09T18:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODAzMA==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389818030", "bodyText": "Nice replacement.  Could use method reference here too:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }).map((String opt) -> new Path(opt)).findFirst().orElse(null);\n          \n          \n            \n                }).map(Path::new).findFirst().orElse(null);", "author": "milleruntime", "createdAt": "2020-03-09T16:45:28Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -381,35 +343,17 @@ public boolean isReady() throws IOException {\n \n   @Override\n   public FileStatus[] globStatus(Path pathPattern) throws IOException {\n-    return getVolumeByPath(pathPattern).getFileSystem().globStatus(pathPattern);\n+    return getFileSystemByPath(pathPattern).globStatus(pathPattern);\n   }\n \n   @Override\n   public Path matchingFileSystem(Path source, Set<String> options) {\n-    try {\n-      if (ViewFSUtils.isViewFS(source, hadoopConf)) {\n-        return ViewFSUtils.matchingFileSystem(source, options, hadoopConf);\n-      }\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-    URI uri1 = source.toUri();\n-    for (String option : options) {\n-      URI uri3 = URI.create(option);\n-      if (uri1.getScheme().equals(uri3.getScheme())) {\n-        String a1 = uri1.getAuthority();\n-        String a2 = uri3.getAuthority();\n-        if ((a1 == null && a2 == null) || (a1 != null && a1.equals(a2)))\n-          return new Path(option);\n-      }\n-    }\n-    return null;\n-  }\n-\n-  @Override\n-  public ContentSummary getContentSummary(Path dir) throws IOException {\n-    return getVolumeByPath(dir).getFileSystem().getContentSummary(dir);\n+    URI sourceUri = source.toUri();\n+    return options.stream().filter(opt -> {\n+      URI optUri = URI.create(opt);\n+      return sourceUri.getScheme().equals(optUri.getScheme())\n+          && Objects.equals(sourceUri.getAuthority(), optUri.getAuthority());\n+    }).map((String opt) -> new Path(opt)).findFirst().orElse(null);", "originalCommit": "ba09677138f781065b83742e2d699984d5aebece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1NzI1OA==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389857258", "bodyText": "I wanted to explicitly use the String version (hence the variable type) to protect against future bugs, because Path has a constructor that takes a URI also, and it behaves differently. Using this instead of the method reference ensures we use the overloaded constructor that takes a String rather than the one that takes a URI.", "author": "ctubbsii", "createdAt": "2020-03-09T17:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NTUxNg==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389865516", "bodyText": "FWIW, if Path had static factory methods rather than public constructors, this would be easier to enforce using the method reference. (Path::fromString and Path::fromURI instead of Path::new).", "author": "ctubbsii", "createdAt": "2020-03-09T18:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDIwMQ==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389850201", "bodyText": "This is cool.  Won't this delete the entire target directory though? If that is the case then I would imagine this would interfere with the build. Or is it anything that is created under this test that gets removed?  It is not clear from the javadoc.", "author": "milleruntime", "createdAt": "2020-03-09T17:36:04Z", "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/log/SortedLogRecoveryTest.java", "diffHunk": "@@ -71,6 +70,10 @@\n   static final Text cq = new Text(\"cq\");\n   static final Value value = new Value(\"value\");\n \n+  @Rule\n+  public TemporaryFolder tempFolder =\n+      new TemporaryFolder(new File(System.getProperty(\"user.dir\") + \"/target\"));", "originalCommit": "ba09677138f781065b83742e2d699984d5aebece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1ODAxOQ==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389858019", "bodyText": "The argument to the constructor is the parent folder in which the temporary directory is created. This is from the javadoc for TemporaryFolder. When the test completes, the @Rule makes it delete itself, but not the parent directory.", "author": "ctubbsii", "createdAt": "2020-03-09T17:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MjQ5OA==", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389872498", "bodyText": "Thanks.  I missed that the parameter is parentFolder.", "author": "milleruntime", "createdAt": "2020-03-09T18:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDIwMQ=="}], "type": "inlineReview"}]}