{"pr_number": 1605, "pr_title": "Fixes #564 adds support multiple compaction executors", "pr_createdAt": "2020-05-08T01:12:39Z", "pr_url": "https://github.com/apache/accumulo/pull/1605", "timeline": [{"oid": "0fc4b89f95ba922db365a36ca6e9ee8643107532", "url": "https://github.com/apache/accumulo/commit/0fc4b89f95ba922db365a36ca6e9ee8643107532", "message": "Fixes #564 adds support multiple compaction executors\n\nThis change adds support for multiple compaction executors and\nmultuple concurrent compactions per tablet.\n\nThe best way to understand these changes is to look at the documentation\nat core/src/main/java/org/apache/accumulo/core/spi/compaction/package-info.java", "committedDate": "2020-05-08T01:08:18Z", "type": "commit"}, {"oid": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "url": "https://github.com/apache/accumulo/commit/bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "message": "reduce default number of compaction threads", "committedDate": "2020-05-08T02:48:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyNzMwMQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421927301", "bodyText": "Why disable these from the full logger by default?", "author": "ctubbsii", "createdAt": "2020-05-08T04:14:11Z", "path": "assemble/conf/log4j2-service.properties", "diffHunk": "@@ -78,6 +78,9 @@ logger.zookeeper.level = error\n logger.accumulo.name = org.apache.accumulo\n logger.accumulo.level = debug\n \n+logger.audit.name = org.apache.accumulo.audit\n+logger.audit.level = off\n+", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MDY5OQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422260699", "bodyText": "I don't know, it was probably annoying me as I spent a lot of time looking at the logs while working on this.  That change should not be made in this PR, I will pull it out.", "author": "keith-turner", "createdAt": "2020-05-08T17:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyNzMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2NTE2MA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422365160", "bodyText": "removed in ecc79e3", "author": "keith-turner", "createdAt": "2020-05-08T20:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyNzMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMTgwOA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421931808", "bodyText": "I don't necessarily see the second reason to be a problem. Binding these into a single entity, can be nice for modularizing the user code to make it more reusable, and maintainable in a separate user-controlled repo. Under the new paradigm, what's the best way for users to combine their overall compaction strategy so they can maintain it separately, and just drop it in when needed? Would they just serialize the CompactionConfig in some way?", "author": "ctubbsii", "createdAt": "2020-05-08T04:32:04Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CompactionStrategyConfig.java", "diffHunk": "@@ -30,27 +26,28 @@\n  * {@link CompactionConfig}.\n  *\n  * @since 1.7.0\n+ * @deprecated since 2.1.0 CompactionStrategies were deprecated for multiple reasons. First, they do\n+ *             not support the new compaction execution model. Second, they bind selection and\n+ *             output file configuration into a single entity when users need to configure these\n+ *             independently. Third, they use internal Accumulo types and ensuring their stability", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NjQ5Mg==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422276492", "bodyText": "My motivation was in the past we had two compaction strategies included with Accumulo, one that filtered compaction candidates based on max size and another that changed the compression type based on input files sizes.  These had nothing to do with each other, but only one could be configured at a time.", "author": "keith-turner", "createdAt": "2020-05-08T17:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMTgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDIyMg==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r433510222", "bodyText": "@ctubbsii did the answer and the slack chat we had resolve this or do you think there is still something to be done?", "author": "keith-turner", "createdAt": "2020-06-01T21:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjA1Nw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421932057", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                requireNonNull(className);\n          \n          \n            \n                this.className = className;\n          \n          \n            \n                this.className = requireNonNull(className);", "author": "ctubbsii", "createdAt": "2020-05-08T04:33:15Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/PluginConfig.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * Encapsulates the configuration of an Accumulo server side plugin, which consist of a class name\n+ * and options.\n+ *\n+ * @since 2.1.0\n+ */\n+public class PluginConfig {\n+\n+  private String className;\n+  private Map<String,String> options = Collections.emptyMap();\n+\n+  /**\n+   * @param className\n+   *          The name of a class that implements\n+   *          org.apache.accumulo.tserver.compaction.CompactionStrategy. This class must be exist on\n+   *          tservers.\n+   */\n+  public PluginConfig(String className) {\n+    requireNonNull(className);\n+    this.className = className;", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2NjYzMA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422366630", "bodyText": "fixed in ecc79e3", "author": "keith-turner", "createdAt": "2020-05-08T20:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjQzMQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421932431", "bodyText": "Should the CompactionStrategy interface exist in an SPI package? Otherwise, it seems we haven't completely solved the use of internal types here.", "author": "ctubbsii", "createdAt": "2020-05-08T04:34:45Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/PluginConfig.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * Encapsulates the configuration of an Accumulo server side plugin, which consist of a class name\n+ * and options.\n+ *\n+ * @since 2.1.0\n+ */\n+public class PluginConfig {\n+\n+  private String className;\n+  private Map<String,String> options = Collections.emptyMap();\n+\n+  /**\n+   * @param className\n+   *          The name of a class that implements\n+   *          org.apache.accumulo.tserver.compaction.CompactionStrategy. This class must be exist on\n+   *          tservers.", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4OTkxOQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422289919", "bodyText": "That should not be mentioned, that is a copy and paste bug.  I will fix that.", "author": "keith-turner", "createdAt": "2020-05-08T18:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2Njc2NA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422366764", "bodyText": "fixed in ecc79e3", "author": "keith-turner", "createdAt": "2020-05-08T20:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMzY5OA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421933698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                requireNonNull(opts);\n          \n          \n            \n                this.options = Map.copyOf(opts);\n          \n          \n            \n                return this;\n          \n          \n            \n                this.options = Map.copyOf(requireNonNull(opts));\n          \n          \n            \n                return this;", "author": "ctubbsii", "createdAt": "2020-05-08T04:40:06Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/PluginConfig.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * Encapsulates the configuration of an Accumulo server side plugin, which consist of a class name\n+ * and options.\n+ *\n+ * @since 2.1.0\n+ */\n+public class PluginConfig {\n+\n+  private String className;\n+  private Map<String,String> options = Collections.emptyMap();\n+\n+  /**\n+   * @param className\n+   *          The name of a class that implements\n+   *          org.apache.accumulo.tserver.compaction.CompactionStrategy. This class must be exist on\n+   *          tservers.\n+   */\n+  public PluginConfig(String className) {\n+    requireNonNull(className);\n+    this.className = className;\n+  }\n+\n+  /**\n+   * @return the class name passed to the constructor.\n+   */\n+  public String getClassName() {\n+    return className;\n+  }\n+\n+  /**\n+   * @param opts\n+   *          The options that will be passed to the init() method of the plugin when its\n+   *          instantiated on a tserver. This method will copy the map. The default is an empty map.\n+   * @return this\n+   */\n+  public PluginConfig setOptions(Map<String,String> opts) {\n+    requireNonNull(opts);\n+    this.options = Map.copyOf(opts);\n+    return this;", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5MzkxNw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422293917", "bodyText": "The javadoc for Map.copyOf says it will thow an NPE if its input is null.  So the requireNonNull could be dropped.", "author": "keith-turner", "createdAt": "2020-05-08T18:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMzY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2NjMyMg==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422366322", "bodyText": "fixed in ecc79e3", "author": "keith-turner", "createdAt": "2020-05-08T20:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMzY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNDM4MQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421934381", "bodyText": "Since className and options have setters, this class is mutable, and changing it can result in unpredictable behavior if stored in data structures that use hashCode and equals. Can this class be refactored to be immutable?", "author": "ctubbsii", "createdAt": "2020-05-08T04:42:51Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/PluginConfig.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * Encapsulates the configuration of an Accumulo server side plugin, which consist of a class name\n+ * and options.\n+ *\n+ * @since 2.1.0\n+ */\n+public class PluginConfig {\n+\n+  private String className;\n+  private Map<String,String> options = Collections.emptyMap();\n+\n+  /**\n+   * @param className\n+   *          The name of a class that implements\n+   *          org.apache.accumulo.tserver.compaction.CompactionStrategy. This class must be exist on\n+   *          tservers.\n+   */\n+  public PluginConfig(String className) {\n+    requireNonNull(className);\n+    this.className = className;\n+  }\n+\n+  /**\n+   * @return the class name passed to the constructor.\n+   */\n+  public String getClassName() {\n+    return className;\n+  }\n+\n+  /**\n+   * @param opts\n+   *          The options that will be passed to the init() method of the plugin when its\n+   *          instantiated on a tserver. This method will copy the map. The default is an empty map.\n+   * @return this\n+   */\n+  public PluginConfig setOptions(Map<String,String> opts) {\n+    requireNonNull(opts);\n+    this.options = Map.copyOf(opts);\n+    return this;\n+  }\n+\n+  /**\n+   * @return The previously set options. Returns an unmodifiable map. The default is an empty map.\n+   */\n+  public Map<String,String> getOptions() {\n+    return options;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return className.hashCode() + options.hashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (o instanceof PluginConfig) {\n+      PluginConfig ocsc = (PluginConfig) o;\n+      return className.equals(ocsc.className) && options.equals(ocsc.options);\n+    }", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2NTkxOQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422365919", "bodyText": "Made immutable in ecc79e3", "author": "keith-turner", "createdAt": "2020-05-08T20:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNDM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTM3NQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421935375", "bodyText": "I'm confused by this javadoc. I don't think this javadoc is sufficient for me to understand how it is intended to be used, without additional outside documentation. Can you provide accompanying code for the compression example?\nAlso, I'm wondering if we can come up with a better name for this. I might be able to think of something once I get a better grasp on how it's supposed to be used.", "author": "ctubbsii", "createdAt": "2020-05-08T04:46:50Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/CompactionConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin.compaction;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment;\n+import org.apache.accumulo.core.data.TableId;\n+\n+/**\n+ * Enables dynamically overriding of per table properties used to create the output file for a\n+ * compaction. For example it could override the per table property for compression.\n+ *\n+ * @since 2.1.0\n+ */\n+public interface CompactionConfigurer {", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2ODc4OQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422268789", "bodyText": "CompressionConfigurer is an example.  It overrides the table property for compression type when the sum of input files exceeds a certain size.", "author": "keith-turner", "createdAt": "2020-05-08T17:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTU5OA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r424685598", "bodyText": "Would this be more appropriately named as a factory?  It seems to be creating a compaction configuration - so maybe something like CompressionConfigFactory?", "author": "EdColeman", "createdAt": "2020-05-13T19:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNzMwNQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r433507305", "bodyText": "I agree the current name is not great.  I am not too excited about CompressionConfigFactory either.  One thing that occurred to me while running a recent test on a cluster of this PR is that in addition to thinking of a new class name, we also need to think about the table property names.  Below are table props I set when running the test.\ntable.compaction.configurer=org.apache.accumulo.core.client.admin.compaction.CompressionConfigurer\ntable.compaction.configurer.opts.large.compress.threshold=100M\ntable.compaction.configurer.opts.large.compress.type=gz", "author": "keith-turner", "createdAt": "2020-06-01T21:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjE0Nw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421936147", "bodyText": "Can this suppression occur more narrowly, rather than for the entire class?", "author": "ctubbsii", "createdAt": "2020-05-08T04:50:15Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/CompactionStrategyConfigUtil.java", "diffHunk": "@@ -18,23 +18,17 @@\n  */\n package org.apache.accumulo.core.clientImpl;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.DataInput;\n-import java.io.DataInputStream;\n import java.io.DataOutput;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.util.HashMap;\n import java.util.Map;\n-import java.util.Map.Entry;\n \n+import org.apache.accumulo.core.client.admin.CompactionConfig;\n import org.apache.accumulo.core.client.admin.CompactionStrategyConfig;\n \n+@SuppressWarnings(\"removal\")", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MjE2Nw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422262167", "bodyText": "This entire class is utility code for a deprecated class.", "author": "keith-turner", "createdAt": "2020-05-08T17:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0Nzc2MQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422347761", "bodyText": "In that case, it too can be marked @Deprecated instead of merely suppressing the deprecation.", "author": "ctubbsii", "createdAt": "2020-05-08T20:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1MDE4Ng==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422350186", "bodyText": "I think other non-deprecated code calls this to deal with compaction strategies.  I was trying to put the code that does this in one place and in order to avoid suppression elsewhere.", "author": "keith-turner", "createdAt": "2020-05-08T20:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNzc2NA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r433507764", "bodyText": "@ctubbsii does my answer address your concern?", "author": "keith-turner", "createdAt": "2020-06-01T21:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjQyNA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421936424", "bodyText": "Where do these numbers come from? An inline comment would be useful.", "author": "ctubbsii", "createdAt": "2020-05-08T04:51:25Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/UserCompactionUtils.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInput;\n+import java.io.DataInputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.accumulo.core.client.IteratorSetting;\n+import org.apache.accumulo.core.client.admin.CompactionConfig;\n+import org.apache.accumulo.core.client.admin.PluginConfig;\n+import org.apache.hadoop.io.Text;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class UserCompactionUtils {\n+\n+  private static final int MAGIC = 0x02040810;\n+  private static final int SELECTOR_MAGIC = 0xae9270bf;\n+  private static final int CONFIGURER_MAGIC = 0xf93e570a;", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MjYyNQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r422262625", "bodyText": "I don't remember.  I may have taken a git commit hash or they may be random.  The intent is to be random.", "author": "keith-turner", "createdAt": "2020-05-08T17:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNzc3NQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r421937775", "bodyText": "Presumably, these new properties are for major compactions only. The property prefix could be made consistent with other tserver.compaction.major properties.", "author": "ctubbsii", "createdAt": "2020-05-08T04:56:48Z", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -410,6 +408,49 @@\n       \"The number of threads for the metadata table scan executor.\"),\n   TSERV_MIGRATE_MAXCONCURRENT(\"tserver.migrations.concurrent.max\", \"1\", PropertyType.COUNT,\n       \"The maximum number of concurrent tablet migrations for a tablet server\"),\n+  TSERV_MAJC_DELAY(\"tserver.compaction.major.delay\", \"30s\", PropertyType.TIMEDURATION,\n+      \"Time a tablet server will sleep between checking which tablets need compaction.\"),\n+  TSERV_COMPACTION_SERVICE_PREFIX(\"tserver.compaction.service.\", null, PropertyType.PREFIX,", "originalCommit": "bd206be8ed50ebf1fee76dc8cf1e9820ef8ca5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTg4OQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r439649889", "bodyText": "Done in 8d024d8", "author": "keith-turner", "createdAt": "2020-06-12T21:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNzc3NQ=="}], "type": "inlineReview"}, {"oid": "ecc79e3860e4c54477e421141e5ca8cadf1b8a26", "url": "https://github.com/apache/accumulo/commit/ecc79e3860e4c54477e421141e5ca8cadf1b8a26", "message": "Code review updates", "committedDate": "2020-05-08T20:44:18Z", "type": "commit"}, {"oid": "6d59d0cccc87ceb9d386a6d3e34d1bd5ecd7e2f5", "url": "https://github.com/apache/accumulo/commit/6d59d0cccc87ceb9d386a6d3e34d1bd5ecd7e2f5", "message": "Fix build bug and improve compaction plan checking", "committedDate": "2020-05-08T23:06:58Z", "type": "commit"}, {"oid": "25a44dbf3c5d2c71e580ac9e1ede264d2e6aa065", "url": "https://github.com/apache/accumulo/commit/25a44dbf3c5d2c71e580ac9e1ede264d2e6aa065", "message": "Added trivial todo for something I am too tired to do now", "committedDate": "2020-05-14T04:06:00Z", "type": "commit"}, {"oid": "a1e6cacefd690ba89e146f8d4a6f9282f6aef539", "url": "https://github.com/apache/accumulo/commit/a1e6cacefd690ba89e146f8d4a6f9282f6aef539", "message": "Improve log message", "committedDate": "2020-05-21T22:42:53Z", "type": "commit"}, {"oid": "34bc2a8ebb6783268cf4bdb339d41bc46a727cbd", "url": "https://github.com/apache/accumulo/commit/34bc2a8ebb6783268cf4bdb339d41bc46a727cbd", "message": "When compacting a subset, avoid doing more than logarithimic work for user compactions.", "committedDate": "2020-05-26T22:04:09Z", "type": "commit"}, {"oid": "a506923dda6ec92bee07ff86ab8ff3e6a980d0ac", "url": "https://github.com/apache/accumulo/commit/a506923dda6ec92bee07ff86ab8ff3e6a980d0ac", "message": "Removed TODO because issue was opened\n\nOpened\n\nhttps://github.com/apache/accumulo/issues/1617", "committedDate": "2020-06-01T21:26:09Z", "type": "commit"}, {"oid": "8d024d8ca898987c50a421288fc9eeca6427de98", "url": "https://github.com/apache/accumulo/commit/8d024d8ca898987c50a421288fc9eeca6427de98", "message": "changed compaction service property prefix", "committedDate": "2020-06-11T16:27:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3ODkwNw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440378907", "bodyText": "Typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class select which files a user compaction will compact. It can also be configured per table\n          \n          \n            \n             * This class selects which files a user compaction will compact. It can also be configured per table", "author": "milleruntime", "createdAt": "2020-06-15T18:52:54Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/CompactionSelector.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin.compaction;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment;\n+import org.apache.accumulo.core.client.sample.SamplerConfiguration;\n+import org.apache.accumulo.core.client.summary.SummarizerConfiguration;\n+import org.apache.accumulo.core.client.summary.Summary;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.accumulo.core.iterators.SortedKeyValueIterator;\n+\n+/**\n+ * This class select which files a user compaction will compact. It can also be configured per table", "originalCommit": "8d024d8ca898987c50a421288fc9eeca6427de98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MTgwNA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440381804", "bodyText": "Open issue for TODO", "author": "milleruntime", "createdAt": "2020-06-15T18:58:06Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/TooManyDeletesSelector.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.accumulo.core.client.admin.compaction;\n+\n+import static org.apache.accumulo.core.client.summary.summarizers.DeletesSummarizer.DELETES_STAT;\n+import static org.apache.accumulo.core.client.summary.summarizers.DeletesSummarizer.TOTAL_STAT;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.accumulo.core.client.rfile.RFile.WriterOptions;\n+import org.apache.accumulo.core.client.summary.SummarizerConfiguration;\n+import org.apache.accumulo.core.client.summary.Summary;\n+import org.apache.accumulo.core.client.summary.summarizers.DeletesSummarizer;\n+\n+/**\n+ * This compaction selector works in concert with the {@link DeletesSummarizer}. Using the\n+ * statistics from DeleteSummarizer this strategy will compact all files in a table when the number\n+ * of deletes/non-deletes exceeds a threshold.\n+ *\n+ * <p>\n+ * This strategy has two options. First the {@value #THRESHOLD_OPT} option allows setting the point\n+ * at which a compaction will be triggered. This options defaults to {@value #THRESHOLD_OPT_DEFAULT}\n+ * and must be in the range (0.0, 1.0]. The second option is {@value #PROCEED_ZERO_NO_SUMMARY_OPT}\n+ * which determines if the strategy should proceed when a bulk imported file has no summary\n+ * information.\n+ *\n+ * <p>\n+ * If the delete summarizer was configured on a table that already had files, then those files will\n+ * have not summary information. This strategy can still proceed in this situation. It will fall\n+ * back to using Accumulo's estimated entries per file in this case. For the files without summary\n+ * information the estimated number of deletes will be zero. This fall back method will\n+ * underestimate deletes which will not lead to false positives, except for the case of bulk\n+ * imported files. Accumulo estimates that bulk imported files have zero entires. The second option\n+ * {@value #PROCEED_ZERO_NO_SUMMARY_OPT} determines if this strategy should proceed when it sees\n+ * bulk imported files that do not have summary data. This option defaults to\n+ * {@value #PROCEED_ZERO_NO_SUMMARY_OPT_DEFAULT}.\n+ *\n+ * <p>\n+ * Bulk files can be generated with summary information by calling\n+ * {@code AccumuloFileOutputFormat#setSummarizers(JobConf, SummarizerConfiguration...)} or\n+ * {@link WriterOptions#withSummarizers(SummarizerConfiguration...)}\n+ *\n+ * <p>\n+ * When using this feature, its important to ensure summary cache is on and the summaries fit in the\n+ * cache.\n+ *\n+ * @since 2.1.0\n+ */\n+public class TooManyDeletesSelector implements CompactionSelector {\n+\n+  private double threshold;\n+\n+  private boolean proceed_bns;\n+\n+  /**\n+   * This option should be a floating point number between 1 and 0.\n+   */\n+  public static final String THRESHOLD_OPT = \"threshold\";\n+\n+  /**\n+   * The default threshold.\n+   */\n+  public static final String THRESHOLD_OPT_DEFAULT = \".25\";\n+\n+  public static final String PROCEED_ZERO_NO_SUMMARY_OPT = \"proceed_zero_no_summary\";\n+\n+  public static final String PROCEED_ZERO_NO_SUMMARY_OPT_DEFAULT = \"false\";\n+\n+  @Override\n+  public void init(InitParamaters iparams) {\n+    var options = iparams.getOptions();\n+    this.threshold = Double.parseDouble(options.getOrDefault(THRESHOLD_OPT, THRESHOLD_OPT_DEFAULT));\n+    if (threshold <= 0.0 || threshold > 1.0) {\n+      throw new IllegalArgumentException(\n+          \"Threshold must be in range (0.0, 1.0], saw : \" + threshold);\n+    }\n+\n+    this.proceed_bns = Boolean.parseBoolean(\n+        options.getOrDefault(PROCEED_ZERO_NO_SUMMARY_OPT, PROCEED_ZERO_NO_SUMMARY_OPT_DEFAULT));\n+  }\n+\n+  @Override\n+  public Selection select(SelectionParameters sparams) {\n+\n+    var tableConf = sparams.getEnvironment().getConfiguration(sparams.getTableId());\n+\n+    // TODO ISSUE could add a method to get props with prefix. That could be used to efficiently get", "originalCommit": "8d024d8ca898987c50a421288fc9eeca6427de98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MTk3OQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440381979", "bodyText": "Open Issue for TODO", "author": "milleruntime", "createdAt": "2020-06-15T18:58:24Z", "path": "server/master/src/main/java/org/apache/accumulo/master/FateServiceHandler.java", "diffHunk": "@@ -467,14 +465,11 @@ public String invalidMessage(String argument) {\n       }\n       case TABLE_COMPACT: {\n         TableOperation tableOp = TableOperation.COMPACT;\n-        validateArgumentCount(arguments, tableOp, 5);\n+        // TODO ISSUE could have compatability mode for the old number of args", "originalCommit": "8d024d8ca898987c50a421288fc9eeca6427de98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MjI1NA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440382254", "bodyText": "Open issue for TODO", "author": "milleruntime", "createdAt": "2020-06-15T18:58:58Z", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.tserver.compactions;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+\n+import org.apache.accumulo.core.client.admin.compaction.CompactableFile;\n+import org.apache.accumulo.core.conf.ConfigurationTypeHelper;\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.spi.common.ServiceEnvironment;\n+import org.apache.accumulo.core.spi.compaction.CompactionExecutorId;\n+import org.apache.accumulo.core.spi.compaction.CompactionJob;\n+import org.apache.accumulo.core.spi.compaction.CompactionKind;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlan;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlanner;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlanner.PlanningParameters;\n+import org.apache.accumulo.core.spi.compaction.CompactionServiceId;\n+import org.apache.accumulo.core.spi.compaction.ExecutorManager;\n+import org.apache.accumulo.core.util.compaction.CompactionPlanImpl;\n+import org.apache.accumulo.server.ServerContext;\n+import org.apache.accumulo.server.ServiceEnvironmentImpl;\n+import org.apache.accumulo.tserver.TabletServerResourceManager;\n+import org.apache.accumulo.tserver.compactions.SubmittedJob.Status;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class CompactionService {\n+  // TODO ISSUE move rate limiters to the compaction service level.", "originalCommit": "8d024d8ca898987c50a421288fc9eeca6427de98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MjM1Mg==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440382352", "bodyText": "Open issue for TODO", "author": "milleruntime", "createdAt": "2020-06-15T18:59:09Z", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.tserver.compactions;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+\n+import org.apache.accumulo.core.client.admin.compaction.CompactableFile;\n+import org.apache.accumulo.core.conf.ConfigurationTypeHelper;\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.spi.common.ServiceEnvironment;\n+import org.apache.accumulo.core.spi.compaction.CompactionExecutorId;\n+import org.apache.accumulo.core.spi.compaction.CompactionJob;\n+import org.apache.accumulo.core.spi.compaction.CompactionKind;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlan;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlanner;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlanner.PlanningParameters;\n+import org.apache.accumulo.core.spi.compaction.CompactionServiceId;\n+import org.apache.accumulo.core.spi.compaction.ExecutorManager;\n+import org.apache.accumulo.core.util.compaction.CompactionPlanImpl;\n+import org.apache.accumulo.server.ServerContext;\n+import org.apache.accumulo.server.ServiceEnvironmentImpl;\n+import org.apache.accumulo.tserver.TabletServerResourceManager;\n+import org.apache.accumulo.tserver.compactions.SubmittedJob.Status;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class CompactionService {\n+  // TODO ISSUE move rate limiters to the compaction service level.\n+  private final CompactionPlanner planner;\n+  private final Map<CompactionExecutorId,CompactionExecutor> executors;\n+  private final CompactionServiceId myId;\n+  private Map<KeyExtent,Collection<SubmittedJob>> submittedJobs = new ConcurrentHashMap<>();\n+  private ServerContext serverCtx;\n+\n+  private static final Logger log = LoggerFactory.getLogger(CompactionService.class);\n+\n+  // TODO ISSUE change thread pool sizes if compaction service config changes", "originalCommit": "8d024d8ca898987c50a421288fc9eeca6427de98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MjUxOQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440382519", "bodyText": "Open issue for TODO", "author": "milleruntime", "createdAt": "2020-06-15T18:59:30Z", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.tserver.compactions;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+\n+import org.apache.accumulo.core.client.admin.compaction.CompactableFile;\n+import org.apache.accumulo.core.conf.ConfigurationTypeHelper;\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.spi.common.ServiceEnvironment;\n+import org.apache.accumulo.core.spi.compaction.CompactionExecutorId;\n+import org.apache.accumulo.core.spi.compaction.CompactionJob;\n+import org.apache.accumulo.core.spi.compaction.CompactionKind;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlan;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlanner;\n+import org.apache.accumulo.core.spi.compaction.CompactionPlanner.PlanningParameters;\n+import org.apache.accumulo.core.spi.compaction.CompactionServiceId;\n+import org.apache.accumulo.core.spi.compaction.ExecutorManager;\n+import org.apache.accumulo.core.util.compaction.CompactionPlanImpl;\n+import org.apache.accumulo.server.ServerContext;\n+import org.apache.accumulo.server.ServiceEnvironmentImpl;\n+import org.apache.accumulo.tserver.TabletServerResourceManager;\n+import org.apache.accumulo.tserver.compactions.SubmittedJob.Status;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class CompactionService {\n+  // TODO ISSUE move rate limiters to the compaction service level.\n+  private final CompactionPlanner planner;\n+  private final Map<CompactionExecutorId,CompactionExecutor> executors;\n+  private final CompactionServiceId myId;\n+  private Map<KeyExtent,Collection<SubmittedJob>> submittedJobs = new ConcurrentHashMap<>();\n+  private ServerContext serverCtx;\n+\n+  private static final Logger log = LoggerFactory.getLogger(CompactionService.class);\n+\n+  // TODO ISSUE change thread pool sizes if compaction service config changes\n+  public CompactionService(String serviceName, String plannerClass,\n+      Map<String,String> serviceOptions, ServerContext sctx, TabletServerResourceManager tsrm) {\n+\n+    this.myId = CompactionServiceId.of(serviceName);\n+    this.serverCtx = sctx;\n+\n+    try {\n+      planner =\n+          ConfigurationTypeHelper.getClassInstance(null, plannerClass, CompactionPlanner.class);\n+    } catch (IOException | ReflectiveOperationException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+    Map<CompactionExecutorId,CompactionExecutor> tmpExecutors = new HashMap<>();\n+\n+    planner.init(new CompactionPlanner.InitParameters() {\n+\n+      @Override\n+      public ServiceEnvironment getServiceEnvironment() {\n+        return new ServiceEnvironmentImpl(sctx);\n+      }\n+\n+      @Override\n+      public Map<String,String> getOptions() {\n+        return serviceOptions;\n+      }\n+\n+      @Override\n+      public ExecutorManager getExecutorManager() {\n+        return new ExecutorManager() {\n+          @Override\n+          public CompactionExecutorId createExecutor(String executorName, int threads) {\n+            var ceid = CompactionExecutorId.of(serviceName + \".\" + executorName);\n+            Preconditions.checkState(!tmpExecutors.containsKey(ceid));\n+            tmpExecutors.put(ceid, new CompactionExecutor(ceid, threads, tsrm));\n+            return ceid;\n+          }\n+        };\n+      }\n+\n+      @Override\n+      public String getFullyQualifiedOption(String key) {\n+        return Property.TSERV_COMPACTION_SERVICE_PREFIX.getKey() + serviceName + \".opts.\" + key;\n+      }\n+    });\n+\n+    this.executors = Map.copyOf(tmpExecutors);\n+\n+    log.debug(\"Created new compaction service id:{} executors:{}\", myId, executors.keySet());\n+  }\n+\n+  private boolean reconcile(Set<CompactionJob> jobs, Collection<SubmittedJob> submitted) {\n+    for (SubmittedJob submittedJob : submitted) {\n+      // only read status once to avoid race conditions since multiple compares are done\n+      var status = submittedJob.getStatus();\n+      if (status == Status.QUEUED) {\n+        if (!jobs.remove(submittedJob.getJob())) {\n+          if (!submittedJob.cancel(Status.QUEUED)) {\n+            return false;\n+          }\n+        }\n+      } else if (status == Status.RUNNING) {\n+        for (CompactionJob job : jobs) {\n+          if (!Collections.disjoint(submittedJob.getJob().getFiles(), job.getFiles())) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  public void compact(CompactionKind kind, Compactable compactable,\n+      Consumer<Compactable> completionCallback) {\n+    // TODO ISSUE this could take a while... could run this in a thread pool", "originalCommit": "8d024d8ca898987c50a421288fc9eeca6427de98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0bbcc739c14302990826d64237ea03cbfc6f828c", "url": "https://github.com/apache/accumulo/commit/0bbcc739c14302990826d64237ea03cbfc6f828c", "message": "Update core/src/main/java/org/apache/accumulo/core/client/admin/compaction/CompactionSelector.java\n\nCo-authored-by: Mike Miller <mmiller@apache.org>", "committedDate": "2020-06-15T19:04:14Z", "type": "commit"}, {"oid": "40df1323ee992fee2a609727c043431b5dcae260", "url": "https://github.com/apache/accumulo/commit/40df1323ee992fee2a609727c043431b5dcae260", "message": "Removed TODOs that have issues\n\nThe issues #1609 #1608 and #1610 cover the removed TODOs", "committedDate": "2020-06-15T19:11:33Z", "type": "commit"}, {"oid": "a3819ed70540b7d37f669eb802273a5963c106aa", "url": "https://github.com/apache/accumulo/commit/a3819ed70540b7d37f669eb802273a5963c106aa", "message": "Removed TODO after opening #1627", "committedDate": "2020-06-15T19:30:30Z", "type": "commit"}, {"oid": "73be832a397c47b810a7d89d1cc84bf5bed7da1f", "url": "https://github.com/apache/accumulo/commit/73be832a397c47b810a7d89d1cc84bf5bed7da1f", "message": "Removed TODO", "committedDate": "2020-06-15T20:06:05Z", "type": "commit"}, {"oid": "c72d60ef9e170386a8636b347cbfca9ea05aa3e1", "url": "https://github.com/apache/accumulo/commit/c72d60ef9e170386a8636b347cbfca9ea05aa3e1", "message": "Removed TODO after opening #1628", "committedDate": "2020-06-15T20:14:43Z", "type": "commit"}, {"oid": "1f71201c807703429310fea6242a286c262eb96a", "url": "https://github.com/apache/accumulo/commit/1f71201c807703429310fea6242a286c262eb96a", "message": "Removed TODO after opening #1629", "committedDate": "2020-06-15T20:40:10Z", "type": "commit"}, {"oid": "5de9feda192a09b8b8d64a6a71f31dbdc23d7ee0", "url": "https://github.com/apache/accumulo/commit/5de9feda192a09b8b8d64a6a71f31dbdc23d7ee0", "message": "Removed TODO after opening #1630", "committedDate": "2020-06-15T21:02:01Z", "type": "commit"}, {"oid": "d57c45cb487b4296e541ec38ee02e4a6c221faaf", "url": "https://github.com/apache/accumulo/commit/d57c45cb487b4296e541ec38ee02e4a6c221faaf", "message": "removed TODO after confirming new and old behavior are same", "committedDate": "2020-06-15T22:03:08Z", "type": "commit"}, {"oid": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "url": "https://github.com/apache/accumulo/commit/ec6d3e385f64c88aee9699cd0ba2ed367310725a", "message": "Removed TODO after opening #1631", "committedDate": "2020-06-15T22:09:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5NzkwOQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440797909", "bodyText": "You don't want warnings for this class?  It is no longer used with this change.", "author": "milleruntime", "createdAt": "2020-06-16T12:05:04Z", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/EverythingCompactionStrategy.java", "diffHunk": "@@ -22,7 +22,7 @@\n  * The default compaction strategy for user initiated compactions. This strategy will always select\n  * all files.\n  */\n-\n+@SuppressWarnings(\"removal\")", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDU4MQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r441914581", "bodyText": "good catch, fixed in 5aa9672", "author": "keith-turner", "createdAt": "2020-06-18T01:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5NzkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxMzgxMw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440813813", "bodyText": "I think these names weren't updated after previous changes.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private PluginConfig selectorConfig = UserCompactionUtils.DEFAULT_CSC;\n          \n          \n            \n              private PluginConfig selectorConfig = UserCompactionUtils.DEFAULT_SELECTOR;", "author": "milleruntime", "createdAt": "2020-06-16T12:34:16Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CompactionConfig.java", "diffHunk": "@@ -21,25 +21,37 @@\n import static java.util.Objects.requireNonNull;\n import static org.apache.accumulo.core.clientImpl.CompactionStrategyConfigUtil.DEFAULT_STRATEGY;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.BooleanSupplier;\n \n import org.apache.accumulo.core.client.IteratorSetting;\n+import org.apache.accumulo.core.client.admin.compaction.CompactionConfigurer;\n+import org.apache.accumulo.core.client.admin.compaction.CompactionSelector;\n+import org.apache.accumulo.core.clientImpl.CompactionStrategyConfigUtil;\n+import org.apache.accumulo.core.clientImpl.UserCompactionUtils;\n import org.apache.hadoop.io.Text;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * This class exist to pass parameters to {@link TableOperations#compact(String, CompactionConfig)}\n  *\n  * @since 1.7.0\n  */\n public class CompactionConfig {\n+\n   private Text start = null;\n   private Text end = null;\n   private boolean flush = true;\n   private boolean wait = true;\n   private List<IteratorSetting> iterators = Collections.emptyList();\n+  @SuppressWarnings(\"removal\")\n   private CompactionStrategyConfig compactionStrategy = DEFAULT_STRATEGY;\n+  private Map<String,String> hints = Map.of();\n+  private PluginConfig selectorConfig = UserCompactionUtils.DEFAULT_CSC;", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDQ1OQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r441914459", "bodyText": "done in 5aa9672", "author": "keith-turner", "createdAt": "2020-06-18T01:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxMzgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxNTU1MA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440815550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private PluginConfig configurerConfig = UserCompactionUtils.DEFAULT_CCC;\n          \n          \n            \n              private PluginConfig configurerConfig = UserCompactionUtils.DEFAULT_CONFIGURER;", "author": "milleruntime", "createdAt": "2020-06-16T12:37:10Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CompactionConfig.java", "diffHunk": "@@ -21,25 +21,37 @@\n import static java.util.Objects.requireNonNull;\n import static org.apache.accumulo.core.clientImpl.CompactionStrategyConfigUtil.DEFAULT_STRATEGY;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.BooleanSupplier;\n \n import org.apache.accumulo.core.client.IteratorSetting;\n+import org.apache.accumulo.core.client.admin.compaction.CompactionConfigurer;\n+import org.apache.accumulo.core.client.admin.compaction.CompactionSelector;\n+import org.apache.accumulo.core.clientImpl.CompactionStrategyConfigUtil;\n+import org.apache.accumulo.core.clientImpl.UserCompactionUtils;\n import org.apache.hadoop.io.Text;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * This class exist to pass parameters to {@link TableOperations#compact(String, CompactionConfig)}\n  *\n  * @since 1.7.0\n  */\n public class CompactionConfig {\n+\n   private Text start = null;\n   private Text end = null;\n   private boolean flush = true;\n   private boolean wait = true;\n   private List<IteratorSetting> iterators = Collections.emptyList();\n+  @SuppressWarnings(\"removal\")\n   private CompactionStrategyConfig compactionStrategy = DEFAULT_STRATEGY;\n+  private Map<String,String> hints = Map.of();\n+  private PluginConfig selectorConfig = UserCompactionUtils.DEFAULT_CSC;\n+  private PluginConfig configurerConfig = UserCompactionUtils.DEFAULT_CCC;", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDI5MQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r441914291", "bodyText": "done in 5aa9672", "author": "keith-turner", "createdAt": "2020-06-18T01:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxNTU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODQyOA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440818428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * imported files. Accumulo estimates that bulk imported files have zero entires. The second option\n          \n          \n            \n             * imported files. Accumulo estimates that bulk imported files have zero entries. The second option", "author": "milleruntime", "createdAt": "2020-06-16T12:42:01Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/TooManyDeletesSelector.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.accumulo.core.client.admin.compaction;\n+\n+import static org.apache.accumulo.core.client.summary.summarizers.DeletesSummarizer.DELETES_STAT;\n+import static org.apache.accumulo.core.client.summary.summarizers.DeletesSummarizer.TOTAL_STAT;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import org.apache.accumulo.core.client.rfile.RFile.WriterOptions;\n+import org.apache.accumulo.core.client.summary.SummarizerConfiguration;\n+import org.apache.accumulo.core.client.summary.Summary;\n+import org.apache.accumulo.core.client.summary.summarizers.DeletesSummarizer;\n+\n+/**\n+ * This compaction selector works in concert with the {@link DeletesSummarizer}. Using the\n+ * statistics from DeleteSummarizer this strategy will compact all files in a table when the number\n+ * of deletes/non-deletes exceeds a threshold.\n+ *\n+ * <p>\n+ * This strategy has two options. First the {@value #THRESHOLD_OPT} option allows setting the point\n+ * at which a compaction will be triggered. This options defaults to {@value #THRESHOLD_OPT_DEFAULT}\n+ * and must be in the range (0.0, 1.0]. The second option is {@value #PROCEED_ZERO_NO_SUMMARY_OPT}\n+ * which determines if the strategy should proceed when a bulk imported file has no summary\n+ * information.\n+ *\n+ * <p>\n+ * If the delete summarizer was configured on a table that already had files, then those files will\n+ * have not summary information. This strategy can still proceed in this situation. It will fall\n+ * back to using Accumulo's estimated entries per file in this case. For the files without summary\n+ * information the estimated number of deletes will be zero. This fall back method will\n+ * underestimate deletes which will not lead to false positives, except for the case of bulk\n+ * imported files. Accumulo estimates that bulk imported files have zero entires. The second option", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMTU4OQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440821589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"Compaction planner for metadatat table\"),\n          \n          \n            \n                  \"Compaction planner for metadata table\"),", "author": "milleruntime", "createdAt": "2020-06-16T12:47:06Z", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -410,6 +408,53 @@\n       \"The number of threads for the metadata table scan executor.\"),\n   TSERV_MIGRATE_MAXCONCURRENT(\"tserver.migrations.concurrent.max\", \"1\", PropertyType.COUNT,\n       \"The maximum number of concurrent tablet migrations for a tablet server\"),\n+  TSERV_MAJC_DELAY(\"tserver.compaction.major.delay\", \"30s\", PropertyType.TIMEDURATION,\n+      \"Time a tablet server will sleep between checking which tablets need compaction.\"),\n+  TSERV_COMPACTION_SERVICE_PREFIX(\"tserver.compaction.major.service.\", null, PropertyType.PREFIX,\n+      \"Prefix for compaction services.\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n+      DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n+      \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_MAX_OPEN(\n+      \"tserver.compaction.major.service.root.planner.opts.maxOpen\", \"30\", PropertyType.COUNT,\n+      \"The maximum number of files a compaction will open\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_EXECUTORS(\n+      \"tserver.compaction.major.service.root.planner.opts.executors\",\n+      \"[{'name':'small','maxSize':'32M','numThreads':1},\"\n+          + \"{'name':'huge','numThreads':1}]\".replaceAll(\"'\", \"\\\"\"),\n+      PropertyType.STRING,\n+      \"See {% jlink -f org.apache.accumulo.core.spi.compaction.DefaultCompactionPlanner %} \"),\n+  TSERV_COMPACTION_SERVICE_META_PLANNER(\"tserver.compaction.major.service.meta.planner\",\n+      DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n+      \"Compaction planner for metadatat table\"),", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMzY4MQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440823681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"Options for the table compaction configuror\"),\n          \n          \n            \n                  \"Options for the table compaction configurer\"),", "author": "milleruntime", "createdAt": "2020-06-16T12:50:22Z", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -646,10 +690,30 @@\n       \"After a tablet has been idle (no mutations) for this time period it may have its \"\n           + \"in-memory map flushed to disk in a minor compaction. There is no guarantee an idle \"\n           + \"tablet will be compacted.\"),\n-  TABLE_MINC_MAX_MERGE_FILE_SIZE(\"table.compaction.minor.merge.file.size.max\", \"0\",\n-      PropertyType.BYTES,\n-      \"The max RFile size used for a merging minor compaction. The default\"\n-          + \" value of 0 disables a max file size.\"),\n+  TABLE_COMPACTION_DISPATCHER(\"table.compaction.dispatcher\",\n+      SimpleCompactionDispatcher.class.getName(), PropertyType.CLASSNAME,\n+      \"A configurable dispatcher that decides what comaction service a table should use.\"),\n+  TABLE_COMPACTION_DISPATCHER_OPTS(\"table.compaction.dispatcher.opts.\", null, PropertyType.PREFIX,\n+      \"Options for the table compaction dispatcher\"),\n+  TABLE_COMPACTION_SELECTOR(\"table.compaction.selector\", \"\", PropertyType.CLASSNAME,\n+      \"A configurable selector for a table that can periodically select file for mandatory \"\n+          + \"compaction, even if the files do not meet the compaction ratio.\"),\n+  TABLE_COMPACTION_SELECTOR_OPTS(\"table.compaction.selector.opts.\", null, PropertyType.PREFIX,\n+      \"Options for the table compaction dispatcher\"),\n+  TABLE_COMPACTION_CONFIGURER(\"table.compaction.configurer\", \"\", PropertyType.CLASSNAME,\n+      \"A plugin that can dynamically configure compaction output files based on input files.\"),\n+  TABLE_COMPACTION_CONFIGURER_OPTS(\"table.compaction.configurer.opts.\", null, PropertyType.PREFIX,\n+      \"Options for the table compaction configuror\"),", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNDA5OA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440824098", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"A configurable dispatcher that decides what comaction service a table should use.\"),\n          \n          \n            \n                  \"A configurable dispatcher that decides what compaction service a table should use.\"),", "author": "milleruntime", "createdAt": "2020-06-16T12:51:03Z", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -646,10 +690,30 @@\n       \"After a tablet has been idle (no mutations) for this time period it may have its \"\n           + \"in-memory map flushed to disk in a minor compaction. There is no guarantee an idle \"\n           + \"tablet will be compacted.\"),\n-  TABLE_MINC_MAX_MERGE_FILE_SIZE(\"table.compaction.minor.merge.file.size.max\", \"0\",\n-      PropertyType.BYTES,\n-      \"The max RFile size used for a merging minor compaction. The default\"\n-          + \" value of 0 disables a max file size.\"),\n+  TABLE_COMPACTION_DISPATCHER(\"table.compaction.dispatcher\",\n+      SimpleCompactionDispatcher.class.getName(), PropertyType.CLASSNAME,\n+      \"A configurable dispatcher that decides what comaction service a table should use.\"),", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzU4MA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440827580", "bodyText": "API javadoc needs description.", "author": "milleruntime", "createdAt": "2020-06-16T12:56:32Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/compaction/CompactableFile.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin.compaction;\n+\n+import java.net.URI;\n+\n+import org.apache.accumulo.core.metadata.CompactableFileImpl;\n+\n+/**\n+ * @since 2.1.0\n+ */", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzMTEzMQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440831131", "bodyText": "I think these names weren't updated after previous changes. (see other suggestion)", "author": "milleruntime", "createdAt": "2020-06-16T13:02:11Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/UserCompactionUtils.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInput;\n+import java.io.DataInputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.accumulo.core.client.IteratorSetting;\n+import org.apache.accumulo.core.client.admin.CompactionConfig;\n+import org.apache.accumulo.core.client.admin.PluginConfig;\n+import org.apache.hadoop.io.Text;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class UserCompactionUtils {\n+\n+  private static final int MAGIC = 0x02040810;\n+  private static final int SELECTOR_MAGIC = 0xae9270bf;\n+  private static final int CONFIGURER_MAGIC = 0xf93e570a;\n+\n+  public static final PluginConfig DEFAULT_CCC = new PluginConfig(\"\", Map.of());\n+  public static final PluginConfig DEFAULT_CSC = new PluginConfig(\"\", Map.of());", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzMjQzNQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440832435", "bodyText": "Looks like no changes to this file", "author": "milleruntime", "createdAt": "2020-06-16T13:04:11Z", "path": "core/src/main/java/org/apache/accumulo/core/singletons/SingletonManager.java", "diffHunk": "@@ -202,5 +202,4 @@ private static void transition() {\n       enabled = true;\n     }\n   }\n-\n }", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MzYyNQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440843625", "bodyText": "Not sure what this means, javadoc could be improved.", "author": "milleruntime", "createdAt": "2020-06-16T13:21:05Z", "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionDirectives.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.compaction;\n+\n+/**\n+ * The directions of a {@link CompactionDispatcher}", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NTM1MQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440845351", "bodyText": "Javadoc description needed for public facing SPI.", "author": "milleruntime", "createdAt": "2020-06-16T13:23:31Z", "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionKind.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.compaction;\n+\n+import org.apache.accumulo.core.client.admin.compaction.CompactionSelector;\n+\n+/**\n+ * @since 2.1.0\n+ * @see org.apache.accumulo.core.spi.compaction\n+ */", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1MjQ1MA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440852450", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /*\n          \n          \n            \n              /**", "author": "milleruntime", "createdAt": "2020-06-16T13:33:02Z", "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionPlanner.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.compaction;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import org.apache.accumulo.core.client.admin.CompactionConfig;\n+import org.apache.accumulo.core.client.admin.compaction.CompactableFile;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.accumulo.core.spi.common.ServiceEnvironment;\n+\n+/**\n+ * Plans compaction work for a compaction service.\n+ *\n+ * @since 2.1.0\n+ * @see org.apache.accumulo.core.spi.compaction\n+ */\n+public interface CompactionPlanner {\n+\n+  /*", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1ODczMw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440858733", "bodyText": "Should this class be in this package?", "author": "milleruntime", "createdAt": "2020-06-16T13:41:29Z", "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionsDirectiveImpl.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.compaction;\n+\n+import java.util.Objects;\n+\n+import org.apache.accumulo.core.spi.compaction.CompactionDirectives.Builder;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class intentionally package private. This implementation is odd because it supports zero\n+ * object allocations for {@code CompactionDirectives.builder().build()}.\n+ */\n+class CompactionsDirectiveImpl implements Builder, CompactionDirectives {", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MDM4OQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440860389", "bodyText": "Should have brief description.", "author": "milleruntime", "createdAt": "2020-06-16T13:43:49Z", "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionServices.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.compaction;\n+\n+import java.util.Set;\n+\n+/**\n+ * @since 2.1.0\n+ */\n+public interface CompactionServices {", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDQ5Mg==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r441914492", "bodyText": "done in 5aa9672", "author": "keith-turner", "createdAt": "2020-06-18T01:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2MDM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NTE2OQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440865169", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * default it dispatches to a compction service named default.\n          \n          \n            \n             *\n          \n          \n            \n             * <p>\n          \n          \n            \n             * The following schema is supported for configration options.\n          \n          \n            \n             * default it dispatches to a compaction service named default.\n          \n          \n            \n             *\n          \n          \n            \n             * <p>\n          \n          \n            \n             * The following schema is supported for configuration options.", "author": "milleruntime", "createdAt": "2020-06-16T13:49:56Z", "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/SimpleCompactionDispatcher.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.compaction;\n+\n+import java.util.EnumMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.accumulo.core.client.admin.CompactionConfig;\n+\n+/**\n+ * Dispatcher that supports simple configuration for making tables use compaction services. By\n+ * default it dispatches to a compction service named default.\n+ *\n+ * <p>\n+ * The following schema is supported for configration options.", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3MTAyOQ==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440871029", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The following is a desciption of each functional component.\n          \n          \n            \n             *\n          \n          \n            \n             * <ul>\n          \n          \n            \n             * <li><b>Compaction Manager</b> A non pluggable component within the tablet server that brings all\n          \n          \n            \n             * other components together. The manager will route compactables to compaction services. For each\n          \n          \n            \n             * kind of compaction, an individual compactible will be routed to a single compaction service. For\n          \n          \n            \n             * The following is a description of each functional component.\n          \n          \n            \n             *\n          \n          \n            \n             * <ul>\n          \n          \n            \n             * <li><b>Compaction Manager</b> A non pluggable component within the tablet server that brings all\n          \n          \n            \n             * other components together. The manager will route compactables to compaction services. For each\n          \n          \n            \n             * kind of compaction, an individual compactable will be routed to a single compaction service. For", "author": "milleruntime", "createdAt": "2020-06-16T13:57:12Z", "path": "core/src/main/java/org/apache/accumulo/core/spi/compaction/package-info.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/**\n+ * This package provides a place for plugin interfaces related to executing compactions. The diagram\n+ * below shows the functional components in Accumulo related to compactions. Not all of these\n+ * components are pluggable, but understanding how everything fits together is important for writing\n+ * a plugin.\n+ *\n+ * <p>\n+ * <img src=\"doc-files/compaction-spi-design.png\" alt=\"Compaction design diagram\">\n+ *\n+ * <p>\n+ * The following is a desciption of each functional component.\n+ *\n+ * <ul>\n+ * <li><b>Compaction Manager</b> A non pluggable component within the tablet server that brings all\n+ * other components together. The manager will route compactables to compaction services. For each\n+ * kind of compaction, an individual compactible will be routed to a single compaction service. For", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4OTU1Nw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440889557", "bodyText": "This related to removal for merging minor compactions?", "author": "milleruntime", "createdAt": "2020-06-16T14:21:25Z", "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java", "diffHunk": "@@ -239,12 +238,7 @@ public static StoredTabletFile updateTabletDataFile(ServerContext context, KeyEx\n     }\n     tablet.putFlushId(flushId);\n \n-    if (mergeFile != null) {\n-      tablet.deleteFile(mergeFile);\n-    }\n-\n     unusedWalLogs.forEach(tablet::deleteWal);\n-    filesInUseByScans.forEach(tablet::putScan);", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNTM1OA==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r441915358", "bodyText": "yeah, eliminating merging minor compaction eliminated the need of dealing with a file being merged and in use by scans.", "author": "keith-turner", "createdAt": "2020-06-18T01:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4OTU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5MTU2Ng==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r440891566", "bodyText": "Is all the work for removing merging minor compactions done here?", "author": "milleruntime", "createdAt": "2020-06-16T14:24:01Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/ActiveCompaction.java", "diffHunk": "@@ -35,9 +35,9 @@\n      */\n     MINOR,\n     /**\n-     * compaction to flush a tablets memory and merge it with the tablets smallest file. This type\n-     * compaction is done when a tablet has too many files\n+     * Accumulo no longer does merging minor compactions.", "originalCommit": "ec6d3e385f64c88aee9699cd0ba2ed367310725a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1ODI0Mw==", "url": "https://github.com/apache/accumulo/pull/1605#discussion_r441058243", "bodyText": "Yes", "author": "keith-turner", "createdAt": "2020-06-16T18:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5MTU2Ng=="}], "type": "inlineReview"}, {"oid": "0d44112100071ff990befa678f024c59878b126c", "url": "https://github.com/apache/accumulo/commit/0d44112100071ff990befa678f024c59878b126c", "message": "Update core/src/main/java/org/apache/accumulo/core/spi/compaction/package-info.java\n\nCo-authored-by: Mike Miller <mmiller@apache.org>", "committedDate": "2020-06-16T18:28:22Z", "type": "commit"}, {"oid": "304a2c7b34c57c956e88c117b89a44256b12752a", "url": "https://github.com/apache/accumulo/commit/304a2c7b34c57c956e88c117b89a44256b12752a", "message": "Update core/src/main/java/org/apache/accumulo/core/spi/compaction/SimpleCompactionDispatcher.java\n\nCo-authored-by: Mike Miller <mmiller@apache.org>", "committedDate": "2020-06-16T18:28:49Z", "type": "commit"}, {"oid": "0e7757b0859c690a299032ac11f24517abac4db9", "url": "https://github.com/apache/accumulo/commit/0e7757b0859c690a299032ac11f24517abac4db9", "message": "Update core/src/main/java/org/apache/accumulo/core/conf/Property.java\n\nCo-authored-by: Mike Miller <mmiller@apache.org>", "committedDate": "2020-06-16T18:29:03Z", "type": "commit"}, {"oid": "6122253c59a5e8d19ad4af077fdbeaabbee401c4", "url": "https://github.com/apache/accumulo/commit/6122253c59a5e8d19ad4af077fdbeaabbee401c4", "message": "Update core/src/main/java/org/apache/accumulo/core/client/admin/compaction/TooManyDeletesSelector.java\n\nCo-authored-by: Mike Miller <mmiller@apache.org>", "committedDate": "2020-06-16T18:29:20Z", "type": "commit"}, {"oid": "5aa967274f350da0701ce1ab573b0842cfe61f0c", "url": "https://github.com/apache/accumulo/commit/5aa967274f350da0701ce1ab573b0842cfe61f0c", "message": "code review updates", "committedDate": "2020-06-18T01:12:05Z", "type": "commit"}]}