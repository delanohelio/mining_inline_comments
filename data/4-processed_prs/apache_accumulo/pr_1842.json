{"pr_number": 1842, "pr_title": "Improve some IT framework and build-related code", "pr_createdAt": "2020-12-17T21:22:52Z", "pr_url": "https://github.com/apache/accumulo/pull/1842", "timeline": [{"oid": "dfd40cac250c5ba34012db40bd20a863c9fb3125", "url": "https://github.com/apache/accumulo/commit/dfd40cac250c5ba34012db40bd20a863c9fb3125", "message": "Improve some IT framework and build-related code\n\n* Increase the default memory for mini-based ITs (from 128MB to 256MB)\n  The justification for this is that using the G1GC in newer JVMs seems\n  to use a little bit more base memory than the old CMS, which was\n  removed. Some of our tests seem to push the memory limits a bit.\n  Increasing the default memory for mini processes in our ITs makes many\n  ITs a bit more reliable, and less prone to OutOfMemoryErrors killing\n  background threads (which I've noticed a lot more during development\n  since running my development environment with newer versions (11+) of\n  Java).\n* Use more meaningful directory name for SharedMiniClusterBase ITs to\n  make it easier to debug specific failed tests.\n* Remove a bunch of unused overloaded static create methods from\n  MiniClusterHarness and remove constants kerberos constants that are\n  available from MiniKdc (since we now build with Hadoop 3.0 or later,\n  and these have been available since 2.6)\n* Remove warning from exec-maven-plugin about Java built-in\n  ForkJoinPool.commonPool() daemon threads not being able to be stopped", "committedDate": "2020-12-17T21:20:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTMwMg==", "url": "https://github.com/apache/accumulo/pull/1842#discussion_r546235302", "bodyText": "Nice cleanup!", "author": "milleruntime", "createdAt": "2020-12-19T12:54:02Z", "path": "test/src/main/java/org/apache/accumulo/harness/MiniClusterHarness.java", "diffHunk": "@@ -57,78 +58,18 @@\n public class MiniClusterHarness {\n   private static final Logger log = LoggerFactory.getLogger(MiniClusterHarness.class);\n \n-  private static final AtomicLong COUNTER = new AtomicLong(0);\n-\n   private static final String PROP_PREFIX = \"org.apache.accumulo.test.functional.\";\n   public static final String USE_SSL_FOR_IT_OPTION = PROP_PREFIX + \"useSslForIT\";\n   public static final String USE_CRED_PROVIDER_FOR_IT_OPTION = PROP_PREFIX + \"useCredProviderForIT\";\n   public static final String USE_KERBEROS_FOR_IT_OPTION = PROP_PREFIX + \"useKrbForIT\";\n   public static final String TRUE = Boolean.toString(true);\n \n-  // TODO These are defined in MiniKdc >= 2.6.0. Can be removed when minimum Hadoop dependency is\n-  // increased to that.\n-  public static final String JAVA_SECURITY_KRB5_CONF = \"java.security.krb5.conf\",\n-      SUN_SECURITY_KRB5_DEBUG = \"sun.security.krb5.debug\";\n-\n-  /**\n-   * Create a MiniAccumuloCluster using the given Token as the credentials for the root user.\n-   */\n-  public MiniAccumuloClusterImpl create(AuthenticationToken token) throws Exception {\n-    return create(MiniClusterHarness.class.getName(), Long.toString(COUNTER.incrementAndGet()),\n-        token);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(AuthenticationToken token, TestingKdc kdc)\n-      throws Exception {\n-    return create(MiniClusterHarness.class.getName(), Long.toString(COUNTER.incrementAndGet()),\n-        token, kdc);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(AccumuloITBase testBase, AuthenticationToken token)\n-      throws Exception {\n-    return create(testBase.getClass().getName(), testBase.testName.getMethodName(), token);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(AccumuloITBase testBase, AuthenticationToken token,\n-      TestingKdc kdc) throws Exception {\n-    return create(testBase, token, kdc, MiniClusterConfigurationCallback.NO_CALLBACK);\n-  }\n-\n   public MiniAccumuloClusterImpl create(AccumuloITBase testBase, AuthenticationToken token,\n       TestingKdc kdc, MiniClusterConfigurationCallback configCallback) throws Exception {\n     return create(testBase.getClass().getName(), testBase.testName.getMethodName(), token,\n         configCallback, kdc);\n   }\n \n-  public MiniAccumuloClusterImpl create(AccumuloClusterHarness testBase, AuthenticationToken token,\n-      TestingKdc kdc) throws Exception {\n-    return create(testBase.getClass().getName(), testBase.testName.getMethodName(), token, testBase,\n-        kdc);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(AccumuloClusterHarness testBase, AuthenticationToken token,\n-      MiniClusterConfigurationCallback callback) throws Exception {\n-    return create(testBase.getClass().getName(), testBase.testName.getMethodName(), token,\n-        callback);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(String testClassName, String testMethodName,\n-      AuthenticationToken token) throws Exception {\n-    return create(testClassName, testMethodName, token,\n-        MiniClusterConfigurationCallback.NO_CALLBACK);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(String testClassName, String testMethodName,\n-      AuthenticationToken token, TestingKdc kdc) throws Exception {\n-    return create(testClassName, testMethodName, token,\n-        MiniClusterConfigurationCallback.NO_CALLBACK, kdc);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(String testClassName, String testMethodName,\n-      AuthenticationToken token, MiniClusterConfigurationCallback configCallback) throws Exception {\n-    return create(testClassName, testMethodName, token, configCallback, null);\n-  }\n-", "originalCommit": "dfd40cac250c5ba34012db40bd20a863c9fb3125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}