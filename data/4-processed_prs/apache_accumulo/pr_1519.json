{"pr_number": 1519, "pr_title": "Create StoredTabletFile to use in different situations", "pr_createdAt": "2020-02-18T18:04:53Z", "pr_url": "https://github.com/apache/accumulo/pull/1519", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDMzNg==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r380990336", "bodyText": "Recently, I've come to appreciate the use of static methods with a private constructor, rather than overloaded constructors.\nFor example:\n    var tabletFile = TabletFile.fromMetaPath(metaPath);\n    var tabletFile = TabletFile.fromMetadataEntry(strEntry);\nI recommend this over the overloaded constructors because you get to have very clear parameter semantics communicated via the method name, vs. trying to infer that from overloaded constructors. It's less error prone when parameter numbers mismatch, and easier to handle overloading when you have the same parameter type (usually String) with different semantics.", "author": "ctubbsii", "createdAt": "2020-02-18T23:09:07Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java", "diffHunk": "@@ -42,18 +43,31 @@\n   private final TableId tableId; // 2a\n   private final String tabletDir; // t-0003\n   private final String fileName; // C0004.rf\n-  private final String metadataEntry;\n   private final Path metaPath;\n   private final String normalizedPath;\n \n+  private Optional<String> metadataEntry;\n+\n   /**\n-   * Construct a tablet file using a Path object already created. Used in the case where we had to\n-   * use Path object to qualify an absolute path.\n+   * Construct new tablet file using a Path. Used in the case where we had to use Path object to\n+   * qualify an absolute path or create a new file.\n    */\n-  public TabletFile(Path metaPath, String originalMetaEntry) {\n-    this.metadataEntry = Objects.requireNonNull(originalMetaEntry);\n+  public TabletFile(Path metaPath) {", "originalCommit": "da67762531f52e1d86346ab2291d10071cc5e936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxODY2Ng==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r381418666", "bodyText": "Most of the time I would agree, especially with multiple String parameters a static method is a lot more clear.  But I don't think we need them in this case since the objects being passed are essentially the same thing just in different form.", "author": "milleruntime", "createdAt": "2020-02-19T17:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyOTA4Ng==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r381429086", "bodyText": "I don't see any downside, even if we don't \"need\" them, but I'll defer to your preference.", "author": "ctubbsii", "createdAt": "2020-02-19T17:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDk0Mw==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r380990943", "bodyText": "Should resolve this before merge, or create follow-on task.", "author": "ctubbsii", "createdAt": "2020-02-18T23:10:58Z", "path": "server/base/src/main/java/org/apache/accumulo/server/util/MetadataTableUtil.java", "diffHunk": "@@ -183,6 +183,7 @@ public static void updateTabletDataFile(long tid, KeyExtent extent,\n     tablet.putTime(time);\n     estSizes.forEach(tablet::putFile);\n \n+    // TODO check to see if we need to delete.. putBulkFile does an insert", "originalCommit": "da67762531f52e1d86346ab2291d10071cc5e936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNzY5NQ==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382227695", "bodyText": "I think this is OK since it is only called by the 2 bulk import methods.  And each has a corresponding CleanupBulkImport FATE operations which callsMetadataTableUtil.removeBulkLoadEntries()", "author": "milleruntime", "createdAt": "2020-02-20T20:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyMjg0Mg==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382022842", "bodyText": "I think Optional.of will throw an exception if null, so could drop the reqNonNull.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this(new Path(metadataEntry), Optional.of(Objects.requireNonNull(metadataEntry)));\n          \n          \n            \n                this(new Path(metadataEntry), Optional.of(metadataEntry));", "author": "keith-turner", "createdAt": "2020-02-20T14:12:39Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java", "diffHunk": "@@ -42,18 +43,31 @@\n   private final TableId tableId; // 2a\n   private final String tabletDir; // t-0003\n   private final String fileName; // C0004.rf\n-  private final String metadataEntry;\n   private final Path metaPath;\n   private final String normalizedPath;\n \n+  private Optional<String> metadataEntry;\n+\n   /**\n-   * Construct a tablet file using a Path object already created. Used in the case where we had to\n-   * use Path object to qualify an absolute path.\n+   * Construct new tablet file using a Path. Used in the case where we had to use Path object to\n+   * qualify an absolute path or create a new file.\n    */\n-  public TabletFile(Path metaPath, String originalMetaEntry) {\n-    this.metadataEntry = Objects.requireNonNull(originalMetaEntry);\n+  public TabletFile(Path metaPath) {\n+    this(metaPath, Optional.empty());\n+  }\n+\n+  /**\n+   * Construct a tablet file using the string read from the metadata. Preserve the exact string so\n+   * the entry can be deleted.\n+   */\n+  public TabletFile(String metadataEntry) {\n+    this(new Path(metadataEntry), Optional.of(Objects.requireNonNull(metadataEntry)));", "originalCommit": "da67762531f52e1d86346ab2291d10071cc5e936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNTA5Nw==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382025097", "bodyText": "It would be nice to keep this object immutable.  Could possibly have this method return a new object instead of mutating itself, but I am not sure if that is easy to do.  If my suggestion is really cumbersome to implement, please ignore this comment.", "author": "keith-turner", "createdAt": "2020-02-20T14:16:13Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java", "diffHunk": "@@ -104,21 +110,50 @@ public String getFileName() {\n   }\n \n   /**\n-   * Exact string that is stored in the metadata table\n+   * Return a string for reading the tablet file. Doesn't have to be exact string in metadata.\n    */\n-  public String getMetadataEntry() {\n-    return metadataEntry;\n+  public String getMetaRead() {\n+    return normalizedPath;\n   }\n \n   /**\n-   * Exact string that is stored in the metadata table but as a Text object\n+   * Return a string for inserting a new tablet file.\n    */\n-  public Text getMetadataText() {\n-    return new Text(metadataEntry);\n+  public String getMetaInsert() {\n+    return normalizedPath;\n   }\n \n-  public String getNormalizedPath() {\n-    return normalizedPath;\n+  /**\n+   * Return a new Text object of {@link #getMetaInsert()}\n+   */\n+  public Text getMetaInsertText() {\n+    return new Text(getMetaInsert());\n+  }\n+\n+  /**\n+   * New file was written to metadata so update the entry.\n+   */\n+  public void inserted() {\n+    this.metadataEntry = Optional.of(normalizedPath);", "originalCommit": "da67762531f52e1d86346ab2291d10071cc5e936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MTkwMg==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382051902", "bodyText": "I will give it a try since I think it is worth exploring.", "author": "milleruntime", "createdAt": "2020-02-20T14:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNTA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2MTI4Mg==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382261282", "bodyText": "@keith-turner I am not sure how returning a new immutable object will work with TabletMutatorBase here...  any ideas?", "author": "milleruntime", "createdAt": "2020-02-20T21:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNTA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNjk2NQ==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382636965", "bodyText": "It looks like I will just have to find a good spot in the code to call insert() which will return the new StoredTabletFile object.  Thankfully a lot of the util methods we use for mutations return void so I was thinking to make them return collections of the new StoredTabletFiles, such as here.", "author": "milleruntime", "createdAt": "2020-02-21T15:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNTA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNjQxMA==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382026410", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Return a string for reading the tablet file. Doesn't have to be exact string in metadata.\n          \n          \n            \n               * Return a string for opening and reading the tablet file. Doesn't have to be exact string in metadata.", "author": "keith-turner", "createdAt": "2020-02-20T14:18:19Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java", "diffHunk": "@@ -104,21 +110,50 @@ public String getFileName() {\n   }\n \n   /**\n-   * Exact string that is stored in the metadata table\n+   * Return a string for reading the tablet file. Doesn't have to be exact string in metadata.", "originalCommit": "da67762531f52e1d86346ab2291d10071cc5e936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNzEzNQ==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382027135", "bodyText": "The javadoc comment say its does not have to be the exact path in meta, but the method name has Meta in it.  I feel like Meta should be dropped from the name.", "author": "keith-turner", "createdAt": "2020-02-20T14:19:32Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java", "diffHunk": "@@ -104,21 +110,50 @@ public String getFileName() {\n   }\n \n   /**\n-   * Exact string that is stored in the metadata table\n+   * Return a string for reading the tablet file. Doesn't have to be exact string in metadata.\n    */\n-  public String getMetadataEntry() {\n-    return metadataEntry;\n+  public String getMetaRead() {", "originalCommit": "da67762531f52e1d86346ab2291d10071cc5e936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMDA5Ng==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382220096", "bodyText": "This seems to be protecting against programming errors, where the TabletFile on which this method is being called was not constructed from a metadata entry. However, a better way to protect against these kinds of programming errors is to put this method on a subclass. So, by the type hierarchy, you enforce the fact that this method can only ever be called on a subclass, which is a type where construction requires a metadata entry.", "author": "ctubbsii", "createdAt": "2020-02-20T19:46:42Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFile.java", "diffHunk": "@@ -104,21 +110,50 @@ public String getFileName() {\n   }\n \n   /**\n-   * Exact string that is stored in the metadata table\n+   * Return a string for reading the tablet file. Doesn't have to be exact string in metadata.\n    */\n-  public String getMetadataEntry() {\n-    return metadataEntry;\n+  public String getMetaRead() {\n+    return normalizedPath;\n   }\n \n   /**\n-   * Exact string that is stored in the metadata table but as a Text object\n+   * Return a string for inserting a new tablet file.\n    */\n-  public Text getMetadataText() {\n-    return new Text(metadataEntry);\n+  public String getMetaInsert() {\n+    return normalizedPath;\n   }\n \n-  public String getNormalizedPath() {\n-    return normalizedPath;\n+  /**\n+   * Return a new Text object of {@link #getMetaInsert()}\n+   */\n+  public Text getMetaInsertText() {\n+    return new Text(getMetaInsert());\n+  }\n+\n+  /**\n+   * New file was written to metadata so update the entry.\n+   */\n+  public void inserted() {\n+    this.metadataEntry = Optional.of(normalizedPath);\n+  }\n+\n+  /**\n+   * Return the exact string that is stored in the metadata table. This is important for updating\n+   * and deleting metadata entries. If the exact string is not used, erroneous entries can pollute\n+   * the metadata table.\n+   */\n+  public String getMetaUpdateDelete() {\n+    if (metadataEntry.isEmpty())\n+      throw new IllegalStateException(\n+          \"TabletFile \" + metaPath + \" does not have a metadata entry.\");\n+    return metadataEntry.get();", "originalCommit": "da67762531f52e1d86346ab2291d10071cc5e936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyODc4OQ==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r382228789", "bodyText": "This is a good idea too, and may work well with @keith-turner 's suggestion.  I will update the PR with the other minor suggestions before attempting this change.", "author": "milleruntime", "createdAt": "2020-02-20T20:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMDA5Ng=="}], "type": "inlineReview"}, {"oid": "2e9ee13563fae54a532675dfc0f67a68d56f1d80", "url": "https://github.com/apache/accumulo/commit/2e9ee13563fae54a532675dfc0f67a68d56f1d80", "message": "Update TabletFile to use getters for different situations\n\n* Created methods for read/insert/updateDel and have them called\nthroughout the code for the appropriate situation\n* Throw exception if we try to get metadata for update or delete and one\ndoes not exist\n* Call inserted() method on TabletFile to update metadata entry when a\nfile is new and inserted\n* Drop FileUtil.toPathStrings() and use object collections instead\n* Replace String path with TabletFile in FileUtil", "committedDate": "2020-02-21T14:10:09Z", "type": "commit"}, {"oid": "be8fe873753a2cd7d3c6feda09f8baca2658b8be", "url": "https://github.com/apache/accumulo/commit/be8fe873753a2cd7d3c6feda09f8baca2658b8be", "message": "Apply suggestions from code review\n\nCo-Authored-By: Keith Turner <kturner@apache.org>", "committedDate": "2020-02-21T14:10:09Z", "type": "commit"}, {"oid": "d80cc3ebae90f959ea729211846d31476fa75f17", "url": "https://github.com/apache/accumulo/commit/d80cc3ebae90f959ea729211846d31476fa75f17", "message": "PR Updates", "committedDate": "2020-02-21T14:10:09Z", "type": "commit"}, {"oid": "d80cc3ebae90f959ea729211846d31476fa75f17", "url": "https://github.com/apache/accumulo/commit/d80cc3ebae90f959ea729211846d31476fa75f17", "message": "PR Updates", "committedDate": "2020-02-21T14:10:09Z", "type": "forcePushed"}, {"oid": "95b92c555b8e78bfc1577eccd59a55f12fa80708", "url": "https://github.com/apache/accumulo/commit/95b92c555b8e78bfc1577eccd59a55f12fa80708", "message": "Create StoredTabletFile\n\n* New class that extends TabletFile for situations where we need to\nupdate or delete a TabletFile or read it directly from metadata", "committedDate": "2020-02-25T19:35:09Z", "type": "commit"}, {"oid": "01f7b68a447c8a2d02b9c16860406ec177ad7fd7", "url": "https://github.com/apache/accumulo/commit/01f7b68a447c8a2d02b9c16860406ec177ad7fd7", "message": "Fix SplitRecoveryIT", "committedDate": "2020-02-26T19:19:26Z", "type": "commit"}, {"oid": "850bcd0ba3fe1f7bd56cd24342e61b0e9d99bba1", "url": "https://github.com/apache/accumulo/commit/850bcd0ba3fe1f7bd56cd24342e61b0e9d99bba1", "message": "Replace TODO with issue number", "committedDate": "2020-02-26T20:03:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5MDkwOA==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r384790908", "bodyText": "It looks like these can all be lambdas, but that can be a follow-on issue.", "author": "ctubbsii", "createdAt": "2020-02-26T21:55:44Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/Translator.java", "diffHunk": "@@ -103,7 +104,14 @@ public TRange translate(Range input) {\n   public static class TabletFileTranslator extends Translator<TabletFile,String> {\n     @Override\n     public String translate(TabletFile input) {\n-      return input.getMetadataEntry();\n+      return input.getPathStr();\n+    }\n+  }\n+\n+  public static class StoredTabletFileTranslator extends Translator<StoredTabletFile,String> {\n+    @Override\n+    public String translate(StoredTabletFile input) {\n+      return input.getPathStr();", "originalCommit": "850bcd0ba3fe1f7bd56cd24342e61b0e9d99bba1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyNDU3MA==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r385124570", "bodyText": "Opened #1533", "author": "milleruntime", "createdAt": "2020-02-27T13:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5MDkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5MjcwOA==", "url": "https://github.com/apache/accumulo/pull/1519#discussion_r384792708", "bodyText": "If you wanted to, you could use var keyword \ud83d\ude3a", "author": "ctubbsii", "createdAt": "2020-02-26T21:59:02Z", "path": "core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletMetadataTest.java", "diffHunk": "@@ -75,12 +75,12 @@ public void testAllColumns() {\n     mutation.at().family(ClonedColumnFamily.NAME).qualifier(\"\").put(\"OK\");\n \n     DataFileValue dfv1 = new DataFileValue(555, 23);\n-    TabletFile tf1 = new TabletFile(\"hdfs://nn1/acc/tables/1/t-0001/df1.rf\");\n-    TabletFile tf2 = new TabletFile(\"hdfs://nn1/acc/tables/1/t-0001/df2.rf\");\n-    mutation.at().family(DataFileColumnFamily.NAME).qualifier(tf1.getMetadataEntry())\n+    StoredTabletFile tf1 = new StoredTabletFile(\"hdfs://nn1/acc/tables/1/t-0001/df1.rf\");\n+    StoredTabletFile tf2 = new StoredTabletFile(\"hdfs://nn1/acc/tables/1/t-0001/df2.rf\");", "originalCommit": "850bcd0ba3fe1f7bd56cd24342e61b0e9d99bba1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2540af77b85e67cc5c76acf2ce70759ef58f6443", "url": "https://github.com/apache/accumulo/commit/2540af77b85e67cc5c76acf2ce70759ef58f6443", "message": "Fix for minC - prevent checking map when the file is empty", "committedDate": "2020-02-27T18:30:21Z", "type": "commit"}]}