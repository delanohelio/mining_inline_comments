{"pr_number": 4916, "pr_title": "Issue 4915: Add timeout to add requests from Controller to Segment Store", "pr_createdAt": "2020-07-02T16:05:42Z", "pr_url": "https://github.com/pravega/pravega/pull/4916", "timeline": [{"oid": "f90d7a050875bfab2e5eee8072f890a645d3946f", "url": "https://github.com/pravega/pravega/commit/f90d7a050875bfab2e5eee8072f890a645d3946f", "message": "Add timeout\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-07-02T15:44:27Z", "type": "commit"}, {"oid": "7c81a96a5a4386c313a4136905fa2850fc439ecd", "url": "https://github.com/pravega/pravega/commit/7c81a96a5a4386c313a4136905fa2850fc439ecd", "message": "cancel the request future\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-07-02T16:18:23Z", "type": "commit"}, {"oid": "2f17bd6c5ae055366f3d3c0527b99eda316c9069", "url": "https://github.com/pravega/pravega/commit/2f17bd6c5ae055366f3d3c0527b99eda316c9069", "message": "coverage\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-07-03T01:48:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NzUxMQ==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449377511", "bodyText": "Can we create a method on lines of the below pattern? This would eliminate the need for extra code.\npublic static <T> CompletableFuture<T> wrapFutureWithTimeout(CompletableFuture<T> cf, Duration timeout, ScheduledExecutorService executorService) {\n     \n       ScheduledFuture<Boolean> sf = executorService.schedule(() -> cf.completeExceptionally(new TimeoutException(tag)), timeout.toMillis(), TimeUnit.MILLISECONDS);\n       cf.whenComplete((r, ex) -> sf.cancel(true));\n       return cf;\n   }", "author": "shrids", "createdAt": "2020-07-03T05:07:02Z", "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -635,17 +651,34 @@ private void closeConnection(Reply reply, RawClient client) {\n     }\n \n     private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) {\n-        return connection.sendRequest(requestId, request)\n+        CompletableFuture<Reply> future = Futures.futureWithTimeout(timeout.get(), executorService);\n+        AtomicReference<CompletableFuture<Reply>> f = new AtomicReference<>();\n+        Futures.completeAfter(() -> {", "originalCommit": "2f17bd6c5ae055366f3d3c0527b99eda316c9069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3OTQxNQ==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449379415", "bodyText": "Interestingly JAVA9 APIS support this https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html#completeOnTimeout-T-long-java.util.concurrent.TimeUnit-", "author": "shrids", "createdAt": "2020-07-03T05:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NzUxMQ=="}], "type": "inlineReview"}, {"oid": "0a0605369ec1e50f2b013534f2a05a4ed0677a83", "url": "https://github.com/pravega/pravega/commit/0a0605369ec1e50f2b013534f2a05a4ed0677a83", "message": "PR comment\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-07-06T01:52:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mjk4NA==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449972984", "bodyText": "Is there a reason why we need to create a new CompletableFuture object? Can we avoid it ?", "author": "shrids", "createdAt": "2020-07-06T04:04:35Z", "path": "common/src/main/java/io/pravega/common/concurrent/Futures.java", "diffHunk": "@@ -543,6 +543,32 @@\n         result.whenComplete((r, ex) -> sf.cancel(true));\n         return result;\n     }\n+    \n+    /**\n+     * Creates a new CompletableFuture that either holds the result of future from the futureSupplier\n+     * or will timeout after the given amount of time.\n+     *\n+     * @param futureSupplier  Supplier of the future. \n+     * @param timeout         The timeout for the future.\n+     * @param executorService An ExecutorService that will be used to invoke the timeout on.\n+     * @param <T>             The Type argument for the CompletableFuture to create.\n+     * @return The result.\n+     */\n+    public static <T> CompletableFuture<T> futureWithTimeout(Supplier<CompletableFuture<T>> futureSupplier, \n+                                                             Duration timeout, ScheduledExecutorService executorService) {\n+        CompletableFuture<T> result = new CompletableFuture<>();", "originalCommit": "0a0605369ec1e50f2b013534f2a05a4ed0677a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NzA0OA==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449977048", "bodyText": "i kept as separate future so that we can issue a cancel on the future received from futureSupplier.\nso at least any downstream processing that was chained may get cancelled.\ni think any ongoing computation is not interrupted with cancellation.. rather the future corresponding to it is cancelled with cancellation exception.\nbut if it were to cancel an ongoing computation, then it would be beneficial.", "author": "shiveshr", "createdAt": "2020-07-06T04:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mjk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwMDAyNg==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r450000026", "bodyText": "I have made the change to not create a new future. I have also added a method in futures to add timeout to an existing future.", "author": "shiveshr", "createdAt": "2020-07-06T06:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mjk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMjU5MA==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r450012590", "bodyText": "Thanks Shivesh.\ncancel() does not cancel the computation as per the java doc.\n/**\n     * If not already completed, completes this CompletableFuture with\n     * a {@link CancellationException}. Dependent CompletableFutures\n     * that have not already completed will also complete\n     * exceptionally, with a {@link CompletionException} caused by\n     * this {@code CancellationException}.\n     *\n     * @param mayInterruptIfRunning this value has no effect in this\n     * implementation because interrupts are not used to control\n     * processing.\n     *\n     * @return {@code true} if this task is now cancelled\n     */\n    public boolean cancel(boolean mayInterruptIfRunning)", "author": "shrids", "createdAt": "2020-07-06T06:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mjk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mzk2NQ==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449973965", "bodyText": "we should retain the auth failure logs.", "author": "shrids", "createdAt": "2020-07-06T04:09:37Z", "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -635,17 +651,27 @@ private void closeConnection(Reply reply, RawClient client) {\n     }\n \n     private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) {\n-        return connection.sendRequest(requestId, request)\n+        CompletableFuture<Reply> future = Futures.futureWithTimeout(\n+                () -> connection.sendRequest(requestId, request)\n+                                .exceptionally(e -> {\n+                                    Throwable unwrap = Exceptions.unwrap(e);\n+                                    if (unwrap instanceof ConnectionFailedException || unwrap instanceof ConnectionClosedException) {\n+                                        log.warn(requestId, \"Connection dropped\");\n+                                        throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.ConnectionFailed);\n+                                    } else {\n+                                        log.error(requestId, \"Request failed\", e);\n+                                        throw new CompletionException(e);\n+                                    }\n+                                }),\n+                timeout.get(), executorService);\n+\n+        return future\n                 .exceptionally(e -> {\n-                    Throwable unwrap = Exceptions.unwrap(e);\n-                    if (unwrap instanceof ConnectionFailedException || unwrap instanceof ConnectionClosedException) {\n-                        log.warn(requestId, \"Connection dropped\");\n+                    if (Exceptions.unwrap(e) instanceof TimeoutException) {\n+                        log.warn(requestId, \"Request timedout.\");\n                         throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.ConnectionFailed);\n-                    } else if (unwrap instanceof AuthenticationException) {\n-                        log.warn(requestId, \"Authentication Exception\");", "originalCommit": "0a0605369ec1e50f2b013534f2a05a4ed0677a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NjA1MA==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449976050", "bodyText": "authentication exception cannot come here ever. this is an unreachable code.\nthis is because auth failure will always come in as a response from segment store.\nwhich is handled and translated in handleReply method.\nI can retain it but its a code that doesnt get covered and decreases the coverage.", "author": "shiveshr", "createdAt": "2020-07-06T04:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mzk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NTEzMg==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r449975132", "bodyText": "nit: Can we have all the exception handling in one block? it will reduce the creation of a CompletionStage and all the error handling will be done in one block (e.g: right before returning the future below)", "author": "shrids", "createdAt": "2020-07-06T04:15:28Z", "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -635,17 +651,27 @@ private void closeConnection(Reply reply, RawClient client) {\n     }\n \n     private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) {\n-        return connection.sendRequest(requestId, request)\n+        CompletableFuture<Reply> future = Futures.futureWithTimeout(\n+                () -> connection.sendRequest(requestId, request)\n+                                .exceptionally(e -> {", "originalCommit": "0a0605369ec1e50f2b013534f2a05a4ed0677a83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c8cc9638c41cc239901d2cecd0fdb4541eb74745", "url": "https://github.com/pravega/pravega/commit/c8cc9638c41cc239901d2cecd0fdb4541eb74745", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-07-06T05:28:05Z", "type": "commit"}, {"oid": "c8cc9638c41cc239901d2cecd0fdb4541eb74745", "url": "https://github.com/pravega/pravega/commit/c8cc9638c41cc239901d2cecd0fdb4541eb74745", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-07-06T05:28:05Z", "type": "forcePushed"}, {"oid": "c335353087af43cc76ce5465b30516159b096726", "url": "https://github.com/pravega/pravega/commit/c335353087af43cc76ce5465b30516159b096726", "message": "merge with master\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-07-08T14:56:00Z", "type": "commit"}, {"oid": "2c026efdfd8ae215efddda15a93ec7f1f23f57f3", "url": "https://github.com/pravega/pravega/commit/2c026efdfd8ae215efddda15a93ec7f1f23f57f3", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-09T07:30:12Z", "type": "commit"}, {"oid": "7727fd59ed413f349dbb3940cf79d417f6687126", "url": "https://github.com/pravega/pravega/commit/7727fd59ed413f349dbb3940cf79d417f6687126", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-09T08:39:08Z", "type": "commit"}, {"oid": "72ab1912ef9c6c282c9ee58e2034dcbf7ca617e6", "url": "https://github.com/pravega/pravega/commit/72ab1912ef9c6c282c9ee58e2034dcbf7ca617e6", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-10T05:09:48Z", "type": "commit"}, {"oid": "addbd9ada3a9c8a525c1e99ed3892eebb9694a4a", "url": "https://github.com/pravega/pravega/commit/addbd9ada3a9c8a525c1e99ed3892eebb9694a4a", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-13T17:18:53Z", "type": "commit"}, {"oid": "90210011b77ca0fe41ea1d2ca45a26ad221309d3", "url": "https://github.com/pravega/pravega/commit/90210011b77ca0fe41ea1d2ca45a26ad221309d3", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-14T10:17:06Z", "type": "commit"}, {"oid": "8372718ea3665f7a75468f6da4c8afdd85c9cfa1", "url": "https://github.com/pravega/pravega/commit/8372718ea3665f7a75468f6da4c8afdd85c9cfa1", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-15T05:52:46Z", "type": "commit"}, {"oid": "78456e11282a73a751ee64421764eb463460077d", "url": "https://github.com/pravega/pravega/commit/78456e11282a73a751ee64421764eb463460077d", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-15T10:36:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4Njk0NA==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456486944", "bodyText": "please rewrite the futureWithTimeout above to make use of this method.\nEx:\nreturn futureWithTimeout(CompletableFuture::new, timeout, executorService)", "author": "andreipaduroiu", "createdAt": "2020-07-17T14:43:18Z", "path": "common/src/main/java/io/pravega/common/concurrent/Futures.java", "diffHunk": "@@ -567,6 +567,47 @@\n         result.whenComplete((r, ex) -> sf.cancel(true));\n         return result;\n     }\n+    \n+    /**\n+     * Creates a new CompletableFuture that either holds the result of future from the futureSupplier\n+     * or will timeout after the given amount of time.\n+     *\n+     * @param futureSupplier  Supplier of the future. \n+     * @param timeout         The timeout for the future.\n+     * @param executorService An ExecutorService that will be used to invoke the timeout on.\n+     * @param <T>             The Type argument for the CompletableFuture to create.\n+     * @return A CompletableFuture which is either completed within given timebound or failed with timeout exception.\n+     */\n+    public static <T> CompletableFuture<T> futureWithTimeout(Supplier<CompletableFuture<T>> futureSupplier,", "originalCommit": "78456e11282a73a751ee64421764eb463460077d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4Nzc5Mg==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456487792", "bodyText": "This can be rewritten as\nfutureWithTimeout(() -> future, timeout, executorService)", "author": "andreipaduroiu", "createdAt": "2020-07-17T14:44:44Z", "path": "common/src/main/java/io/pravega/common/concurrent/Futures.java", "diffHunk": "@@ -567,6 +567,47 @@\n         result.whenComplete((r, ex) -> sf.cancel(true));\n         return result;\n     }\n+    \n+    /**\n+     * Creates a new CompletableFuture that either holds the result of future from the futureSupplier\n+     * or will timeout after the given amount of time.\n+     *\n+     * @param futureSupplier  Supplier of the future. \n+     * @param timeout         The timeout for the future.\n+     * @param executorService An ExecutorService that will be used to invoke the timeout on.\n+     * @param <T>             The Type argument for the CompletableFuture to create.\n+     * @return A CompletableFuture which is either completed within given timebound or failed with timeout exception.\n+     */\n+    public static <T> CompletableFuture<T> futureWithTimeout(Supplier<CompletableFuture<T>> futureSupplier,\n+                                                             Duration timeout, ScheduledExecutorService executorService) {\n+        CompletableFuture<T> future = futureSupplier.get();\n+        ScheduledFuture<Boolean> sf = executorService.schedule(() -> future.completeExceptionally(\n+                new TimeoutException()), timeout.toMillis(), TimeUnit.MILLISECONDS);\n+        \n+        return future.whenComplete((r, ex) -> {\n+            sf.cancel(true);\n+        });\n+    }\n+\n+    /**\n+     * Add a timeout to the CompletableFuture. If the future does not complete within the specified timeout,\n+     * this would complete the future with timeout exception. \n+     *\n+     * @param future          Completable future to add timeout to. \n+     * @param timeout         The timeout for the future.\n+     * @param executorService An ExecutorService that will be used to invoke the timeout on.\n+     * @param <T>             The Type argument for the CompletableFuture to create.\n+     */\n+    public static <T> void addTimeout(CompletableFuture<T> future, Duration timeout, ScheduledExecutorService executorService) {\n+        ScheduledFuture<Boolean> sf = executorService.schedule(() -> future.completeExceptionally(new TimeoutException()), timeout.toMillis(), TimeUnit.MILLISECONDS);", "originalCommit": "78456e11282a73a751ee64421764eb463460077d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTE5OA==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456489198", "bodyText": "Please change this class to extend from ThreadPooledTestSuite and override getThreadPoolSize to return 1.\nThat base class will take care of your executor.\nWhile you're at it, there is at least one other test in this class that makes its own executor (and never shuts it down!). Please change that too to use executorService() instead.", "author": "andreipaduroiu", "createdAt": "2020-07-17T14:46:48Z", "path": "common/src/test/java/io/pravega/common/concurrent/FuturesTests.java", "diffHunk": "@@ -21,23 +24,40 @@\n import java.util.Map;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ForkJoinPool;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeoutException;\n import java.util.concurrent.Executor;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Function;\n import java.util.function.Predicate;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import lombok.val;\n+import org.junit.After;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n \n /**\n  * Unit tests for the Futures class.\n  */\n public class FuturesTests {\n+    private ScheduledExecutorService executor;", "originalCommit": "78456e11282a73a751ee64421764eb463460077d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTg4NQ==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456489885", "bodyText": "Futures.futureWithTimeout(() -> connection.sendRequest(...), ...) ?\nThat will preclude the need for Futures.addTimeout", "author": "andreipaduroiu", "createdAt": "2020-07-17T14:47:50Z", "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -605,7 +622,9 @@ private void closeConnection(Reply reply, RawClient client) {\n     }\n \n     private <T extends Request & WireCommand> CompletableFuture<Reply> sendRequest(RawClient connection, long requestId, T request) {\n-        return connection.sendRequest(requestId, request)\n+        CompletableFuture<Reply> future = connection.sendRequest(requestId, request);\n+        Futures.addTimeout(future, timeout.get(), executorService);", "originalCommit": "78456e11282a73a751ee64421764eb463460077d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDIwNw==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456490207", "bodyText": "unwrap contains the unwrapped e. Use that.", "author": "andreipaduroiu", "createdAt": "2020-07-17T14:48:19Z", "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -614,6 +633,9 @@ private void closeConnection(Reply reply, RawClient client) {\n                     } else if (unwrap instanceof AuthenticationException) {\n                         log.warn(requestId, \"Authentication Exception\");\n                         throw new WireCommandFailedException(request.getType(), WireCommandFailedException.Reason.AuthFailed);\n+                    } else if (Exceptions.unwrap(e) instanceof TimeoutException) {", "originalCommit": "78456e11282a73a751ee64421764eb463460077d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDcwNA==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456490704", "bodyText": "I would suggest you express this in seconds. We may want to add 30s timeouts. 2 minutes seems too long.", "author": "andreipaduroiu", "createdAt": "2020-07-17T14:49:05Z", "path": "controller/src/main/java/io/pravega/controller/util/Config.java", "diffHunk": "@@ -128,6 +128,9 @@\n     public static final Property<String> PROPERTY_TLS_ENABLED_FOR_SEGMENT_STORE = Property.named(\n             \"segmentstore.connect.channel.tls\", \"\", \"auth.segmentStoreTlsEnabled\");\n \n+    public static final Property<Integer> PROPERTY_SEGMENT_STORE_REQUEST_TIMEOUT_MINUTES = Property.named(\n+            \"segmentstore.connect.channel.timeoutMinutes\", 2, \"\");", "originalCommit": "78456e11282a73a751ee64421764eb463460077d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDkyMQ==", "url": "https://github.com/pravega/pravega/pull/4916#discussion_r456490921", "bodyText": "Use ThreadPooledTestSuite", "author": "andreipaduroiu", "createdAt": "2020-07-17T14:49:24Z", "path": "controller/src/test/java/io/pravega/controller/server/SegmentHelperTest.java", "diffHunk": "@@ -65,19 +70,29 @@\n     private final byte[] value = \"v\".getBytes();\n     private final ByteBuf token1 = wrappedBuffer(new byte[]{0x01});\n     private final ByteBuf token2 = wrappedBuffer(new byte[]{0x02});\n-\n+    private ScheduledExecutorService executorService;", "originalCommit": "78456e11282a73a751ee64421764eb463460077d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b68096451866e954925a1c84ba00ccf28312fb20", "url": "https://github.com/pravega/pravega/commit/b68096451866e954925a1c84ba00ccf28312fb20", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-17T15:41:33Z", "type": "commit"}, {"oid": "40a9ef65a21a9734bfe1e8ba32afd76857e4f0ae", "url": "https://github.com/pravega/pravega/commit/40a9ef65a21a9734bfe1e8ba32afd76857e4f0ae", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-07-20T06:49:17Z", "type": "commit"}, {"oid": "2d7a6fb8d4d9cf56b31aa5ec9137dacdbb8bb206", "url": "https://github.com/pravega/pravega/commit/2d7a6fb8d4d9cf56b31aa5ec9137dacdbb8bb206", "message": "Merge branch 'addTimeout' of https://github.com/shiveshr/pravega-1 into addTimeout", "committedDate": "2020-07-20T06:51:23Z", "type": "commit"}, {"oid": "e42ae41372bdbb7563ce4319293bf81297444850", "url": "https://github.com/pravega/pravega/commit/e42ae41372bdbb7563ce4319293bf81297444850", "message": "Merge branch 'master' into addTimeout", "committedDate": "2020-07-20T06:52:06Z", "type": "commit"}]}