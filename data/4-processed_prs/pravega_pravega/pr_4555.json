{"pr_number": 4555, "pr_title": "Issue 4552: Reduce Javadoc errors", "pr_createdAt": "2020-02-10T13:11:23Z", "pr_url": "https://github.com/pravega/pravega/pull/4555", "timeline": [{"oid": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "url": "https://github.com/pravega/pravega/commit/86f2a45acb71b5995b8ee84644c805c8169f9fbd", "message": "Issue 4552: Reduce Javadoc errors\n\nSigned-off-by: Bibin Sebastian <bibinvamattathil@gmail.com>", "committedDate": "2020-02-10T13:03:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1Mzc5Ng==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377053796", "bodyText": "io.pravega.segmentstore.server.host.handler.AppendProcessor javadoc refers to AppendProcessorBuilder generated using lombok. So we need to delombok before javadoc step.", "author": "bibinss", "createdAt": "2020-02-10T13:14:11Z", "path": "build.gradle", "diffHunk": "@@ -445,6 +445,13 @@ project('segmentstore:server:host') {\n     applicationDistribution.into(\"bin\") {\n         from(createAppWithGCLogging)\n     }\n+\n+    javadoc {", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzNjcxOA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377436718", "bodyText": "Sounds good.", "author": "ravisharda", "createdAt": "2020-02-11T03:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1Mzc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1Mzk3OA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377053978", "bodyText": "ClientFactory is no more present in the codebase", "author": "bibinss", "createdAt": "2020-02-10T13:14:33Z", "path": "client/src/main/java/io/pravega/client/admin/ReaderGroupManager.java", "diffHunk": "@@ -49,7 +49,7 @@ public static ReaderGroupManager withScope(String scope, ClientConfig clientConf\n      * Creates a new ReaderGroup.\n      *\n      * Readers will be able to join the group by calling\n-     * {@link ClientFactory#createReader(String, String, Serializer, ReaderConfig)}\n+     * {@link io.pravega.client.EventStreamClientFactory#createReader(String, String, Serializer, ReaderConfig)}", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NDEwNw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377054107", "bodyText": "BatchClient is already removed", "author": "bibinss", "createdAt": "2020-02-10T13:14:50Z", "path": "client/src/main/java/io/pravega/client/admin/impl/StreamManagerImpl.java", "diffHunk": "@@ -138,13 +138,11 @@ public StreamInfo getStreamInfo(String scopeName, String streamName) {\n \n     /**\n      * Fetch the {@link StreamInfo} for a given stream.\n-     * Note: The access level of this method can be reduced once the deprecated method\n-     * {@link io.pravega.client.batch.BatchClient#getStreamInfo(Stream)} is removed.", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NTI4MA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377055280", "bodyText": "PasswordAuthHandler is part of the controller module. shared/authplugin doesn't have a dependency on controller module, so javadoc can't refer to PasswordAuthHandler. So I have used @code tag here instead of @link.", "author": "bibinss", "createdAt": "2020-02-10T13:17:11Z", "path": "shared/authplugin/src/main/java/io/pravega/auth/AuthHandler.java", "diffHunk": "@@ -14,7 +14,7 @@\n /**\n  * Custom authorization/authentication handlers implement this interface.\n  * The implementations are loaded from the classpath using `ServiceLoader` (https://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html)\n- * Pravega controller also implements this interface through {@link io.pravega.controller.server.rpc.auth.PasswordAuthHandler}.\n+ * Pravega controller also implements this interface through {@code io.pravega.controller.server.rpc.auth.PasswordAuthHandler}.", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0NDM2Mw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377444363", "bodyText": "Sounds good.", "author": "ravisharda", "createdAt": "2020-02-11T04:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NTI4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NjUyNw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377056527", "bodyText": "My understanding is that javadoc @link doesn't support method chaining. So to fix the issue, I have moved out #getVersion() from @link. Though not the right fix, I hope it is better than existing.", "author": "bibinss", "createdAt": "2020-02-10T13:19:31Z", "path": "client/src/main/java/io/pravega/client/tables/impl/TableSegment.java", "diffHunk": "@@ -37,7 +37,7 @@\n \n     /**\n      * Inserts or updates an existing Table Entry into this Table Segment.\n-     * @param entry The Entry to insert or update. If {@link TableEntry#getKey()#getVersion()} is null, this will perform\n+     * @param entry The Entry to insert or update. If {@link TableEntry#getKey()}#getVersion() is null, this will perform", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MjY2Mw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377442663", "bodyText": "Sure, that looks better. Should we use something like {@link TableEntry#getKey()} {@link TableEntry#getVersion(...)} instead? I think that'd clarify even better. What do you say?", "author": "ravisharda", "createdAt": "2020-02-11T04:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NjUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1Nzk1Nw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377557957", "bodyText": "yeah.. that might be better. changed to {@link TableEntry#getKey()}{@link TableKey#getVersion()}", "author": "bibinss", "createdAt": "2020-02-11T10:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NjUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzOTI4OA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377439288", "bodyText": "Exceeds max line length. Please wrap the line.", "author": "ravisharda", "createdAt": "2020-02-11T04:08:15Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroup.java", "diffHunk": "@@ -22,7 +22,7 @@\n  * to only one reader.\n  *\n  * The readers in the group may change over time. Readers are added to the group by calling\n- * {@link ClientFactory#createReader(String, String, Serializer, ReaderConfig)} and are removed by\n+ * {@link io.pravega.client.EventStreamClientFactory#createReader(String, String, Serializer, ReaderConfig)} and are removed by", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1ODY5OA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377558698", "bodyText": "done", "author": "bibinss", "createdAt": "2020-02-11T10:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzOTI4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzOTQ3OQ==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377439479", "bodyText": "Please wrap this line as it exceeds max length.", "author": "ravisharda", "createdAt": "2020-02-11T04:09:32Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroup.java", "diffHunk": "@@ -83,7 +83,7 @@\n      * <p>- To reset a reader group to a given StreamCut use\n      * {@link ReaderGroupConfig.ReaderGroupConfigBuilder#startFromStreamCuts(Map)}.</p>\n      *\n-     * All existing readers will have to call {@link ClientFactory#createReader(String, String, Serializer, ReaderConfig)}.\n+     * All existing readers will have to call {@link io.pravega.client.EventStreamClientFactory#createReader(String, String, Serializer, ReaderConfig)}.", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1ODc2OQ==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377558769", "bodyText": "done", "author": "bibinss", "createdAt": "2020-02-11T10:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzOTQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzOTUxNw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377439517", "bodyText": "This needs wrapping as well.", "author": "ravisharda", "createdAt": "2020-02-11T04:09:55Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroup.java", "diffHunk": "@@ -106,7 +106,7 @@\n \n     /**\n      * Returns a set of readerIds for the readers that are considered to be online by the group.\n-     * i.e. {@link ClientFactory#createReader(String, String, Serializer, ReaderConfig)} was called but\n+     * i.e. {@link io.pravega.client.EventStreamClientFactory#createReader(String, String, Serializer, ReaderConfig)} was called but", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1ODg1OQ==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377558859", "bodyText": "done", "author": "bibinss", "createdAt": "2020-02-11T10:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzOTUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MjcwMA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377442700", "bodyText": "Same as earlier.", "author": "ravisharda", "createdAt": "2020-02-11T04:33:12Z", "path": "client/src/main/java/io/pravega/client/tables/impl/TableSegment.java", "diffHunk": "@@ -52,7 +52,7 @@\n      * Inserts new or updates existing Table Entries into this Table Segment.\n      *\n      * @param entries A Collection of entries to insert or update. If for at least one such entry,\n-     *                {@link TableEntry#getKey()#getVersion()} returns a non-null value, this will perform an atomic\n+     *                {@link TableEntry#getKey()}#getVersion() returns a non-null value, this will perform an atomic", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1OTEyNA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377559124", "bodyText": "changed to {@link TableEntry#getKey()}{@link TableKey#getVersion()}", "author": "bibinss", "createdAt": "2020-02-11T10:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MjcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MjkwMA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377442900", "bodyText": "Please break the line here, as it exceeds max line length.", "author": "ravisharda", "createdAt": "2020-02-11T04:34:36Z", "path": "common/src/main/java/io/pravega/common/io/serialization/RevisionDataOutput.java", "diffHunk": "@@ -63,7 +63,7 @@\n     int UUID_BYTES = 2 * Long.BYTES;\n \n     /**\n-     * Gets a value indicating whether this instance of a RevisionDataOutput requires {@link #length) to be called prior to writing\n+     * Gets a value indicating whether this instance of a RevisionDataOutput requires {@link #length} to be called prior to writing", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1OTM2OA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377559368", "bodyText": "done", "author": "bibinss", "createdAt": "2020-02-11T10:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MjkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzA4OA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443088", "bodyText": "Please wrap the line.", "author": "ravisharda", "createdAt": "2020-02-11T04:35:51Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -52,8 +52,8 @@\n  * * Are incremental on top of the previous ones, can be added on the fly, and can be used to make format changes\n  * without breaking backward or forward compatibility.\n  * * Older code will read as many revisions as it knows about, so even if newer code encodes B revisions, older code that\n- * only knows about A < B revisions will only read the first A revisions, ignoring the rest. Similarly, newer code that\n- * knows about B revisions will be able to handle A < B revisions by reading as much as is available.\n+ * only knows about {@literal A < B} revisions will only read the first A revisions, ignoring the rest. Similarly, newer code that", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1OTU0Nw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377559547", "bodyText": "done", "author": "bibinss", "createdAt": "2020-02-11T10:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzYzNw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443637", "bodyText": "&lt; and &gt; might be more appropriate here instead of the literal tag in this case, as the text Segment is part of the signature like the rest of the string.", "author": "ravisharda", "createdAt": "2020-02-11T04:39:33Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -420,7 +420,7 @@ void deserializeContents(InputStream stream, ReaderType target) throws IOExcepti\n      * <code>\n      * class Segment { ... }\n      *\n-     * class SegmentSerializer extends VersionedSerializer.Direct<Segment> {\n+     * class SegmentSerializer extends VersionedSerializer.Direct{@literal <Segment>} {", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDM2NA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377560364", "bodyText": "yeah I thought of that initially but felt that using &lt; and &gt; makes it less readable for the devs. For now, I replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzc2MA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443760", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:40:20Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -481,10 +481,10 @@ void deserializeContents(InputStream stream, ReaderType target) throws IOExcepti\n      *    private final Long lastUsed;\n      *\n      *    // Attribute class is immutable; it has a builder that helps create new instances (this can be generated with Lombok).\n-     *    static class AttributeBuilder implements ObjectBuilder<Attribute> { ... }\n+     *    static class AttributeBuilder implements ObjectBuilder{@literal <Attribute>} { ... }", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDU4Ng==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377560586", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzc3Nw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443777", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:40:28Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -481,10 +481,10 @@ void deserializeContents(InputStream stream, ReaderType target) throws IOExcepti\n      *    private final Long lastUsed;\n      *\n      *    // Attribute class is immutable; it has a builder that helps create new instances (this can be generated with Lombok).\n-     *    static class AttributeBuilder implements ObjectBuilder<Attribute> { ... }\n+     *    static class AttributeBuilder implements ObjectBuilder{@literal <Attribute>} { ... }\n      * }\n      *\n-     * class AttributeSerializer extends VersionedSerializer.WithBuilder<Attribute, Attribute.AttributeBuilder> {\n+     * class AttributeSerializer extends VersionedSerializer.WithBuilder{@literal <Attribute, Attribute.AttributeBuilder>} {", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDYzMA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377560630", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzc5Nw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443797", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:40:40Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -596,21 +596,21 @@ TargetType deserializeContents(InputStream stream) throws IOException {\n      * class BaseType { ... }\n      *\n      * class SubType1 extends BaseType {\n-     *     static class SubType1Builder implements ObjectBuilder<SubType1> { ... }\n-     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder<SubType1, SubType1Builder> { ... }\n+     *     static class SubType1Builder implements ObjectBuilder{@literal <SubType1>} { ... }", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDY4OQ==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377560689", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzgwNQ==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443805", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:40:44Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -596,21 +596,21 @@ TargetType deserializeContents(InputStream stream) throws IOException {\n      * class BaseType { ... }\n      *\n      * class SubType1 extends BaseType {\n-     *     static class SubType1Builder implements ObjectBuilder<SubType1> { ... }\n-     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder<SubType1, SubType1Builder> { ... }\n+     *     static class SubType1Builder implements ObjectBuilder{@literal <SubType1>} { ... }\n+     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder{@literal <SubType1, SubType1Builder>} { ... }", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDc1Nw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377560757", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzgzNQ==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443835", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:40:53Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -596,21 +596,21 @@ TargetType deserializeContents(InputStream stream) throws IOException {\n      * class BaseType { ... }\n      *\n      * class SubType1 extends BaseType {\n-     *     static class SubType1Builder implements ObjectBuilder<SubType1> { ... }\n-     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder<SubType1, SubType1Builder> { ... }\n+     *     static class SubType1Builder implements ObjectBuilder{@literal <SubType1>} { ... }\n+     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder{@literal <SubType1, SubType1Builder>} { ... }\n      * }\n      *\n      * class SubType11 extends SubType1 {\n-     *     static class SubType11Builder implements ObjectBuilder<SubType11> { ... }\n-     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder<SubType11, SubType11Builder> { ... }\n+     *     static class SubType11Builder implements ObjectBuilder{@literal <SubType11>} { ... }", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDgwNw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377560807", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzg2Ng==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443866", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:41:02Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -596,21 +596,21 @@ TargetType deserializeContents(InputStream stream) throws IOException {\n      * class BaseType { ... }\n      *\n      * class SubType1 extends BaseType {\n-     *     static class SubType1Builder implements ObjectBuilder<SubType1> { ... }\n-     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder<SubType1, SubType1Builder> { ... }\n+     *     static class SubType1Builder implements ObjectBuilder{@literal <SubType1>} { ... }\n+     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder{@literal <SubType1, SubType1Builder>} { ... }\n      * }\n      *\n      * class SubType11 extends SubType1 {\n-     *     static class SubType11Builder implements ObjectBuilder<SubType11> { ... }\n-     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder<SubType11, SubType11Builder> { ... }\n+     *     static class SubType11Builder implements ObjectBuilder{@literal <SubType11>} { ... }\n+     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder{@literal <SubType11, SubType11Builder>} { ... }", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDg5Mw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377560893", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzg4NA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443884", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:41:09Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -596,21 +596,21 @@ TargetType deserializeContents(InputStream stream) throws IOException {\n      * class BaseType { ... }\n      *\n      * class SubType1 extends BaseType {\n-     *     static class SubType1Builder implements ObjectBuilder<SubType1> { ... }\n-     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder<SubType1, SubType1Builder> { ... }\n+     *     static class SubType1Builder implements ObjectBuilder{@literal <SubType1>} { ... }\n+     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder{@literal <SubType1, SubType1Builder>} { ... }\n      * }\n      *\n      * class SubType11 extends SubType1 {\n-     *     static class SubType11Builder implements ObjectBuilder<SubType11> { ... }\n-     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder<SubType11, SubType11Builder> { ... }\n+     *     static class SubType11Builder implements ObjectBuilder{@literal <SubType11>} { ... }\n+     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder{@literal <SubType11, SubType11Builder>} { ... }\n      * }\n      *\n      * class SubType2 extends BaseType {\n-     *     static class SubType2Builder implements ObjectBuilder<SubType2> { ... }\n-     *     static class SubType2Serializer extends VersionedSerializer.WithBuilder<SubType2, SubType2Builder> { ... }\n+     *     static class SubType2Builder implements ObjectBuilder{@literal <SubType2>} { ... }", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDk0OQ==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377560949", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzg5Ng==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443896", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:41:14Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -596,21 +596,21 @@ TargetType deserializeContents(InputStream stream) throws IOException {\n      * class BaseType { ... }\n      *\n      * class SubType1 extends BaseType {\n-     *     static class SubType1Builder implements ObjectBuilder<SubType1> { ... }\n-     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder<SubType1, SubType1Builder> { ... }\n+     *     static class SubType1Builder implements ObjectBuilder{@literal <SubType1>} { ... }\n+     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder{@literal <SubType1, SubType1Builder>} { ... }\n      * }\n      *\n      * class SubType11 extends SubType1 {\n-     *     static class SubType11Builder implements ObjectBuilder<SubType11> { ... }\n-     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder<SubType11, SubType11Builder> { ... }\n+     *     static class SubType11Builder implements ObjectBuilder{@literal <SubType11>} { ... }\n+     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder{@literal <SubType11, SubType11Builder>} { ... }\n      * }\n      *\n      * class SubType2 extends BaseType {\n-     *     static class SubType2Builder implements ObjectBuilder<SubType2> { ... }\n-     *     static class SubType2Serializer extends VersionedSerializer.WithBuilder<SubType2, SubType2Builder> { ... }\n+     *     static class SubType2Builder implements ObjectBuilder{@literal <SubType2>} { ... }\n+     *     static class SubType2Serializer extends VersionedSerializer.WithBuilder{@literal <SubType2, SubType2Builder>} { ... }", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MTAxNQ==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377561015", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0Mzg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzkwOA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377443908", "bodyText": "Same comment as the last comment.", "author": "ravisharda", "createdAt": "2020-02-11T04:41:20Z", "path": "common/src/main/java/io/pravega/common/io/serialization/VersionedSerializer.java", "diffHunk": "@@ -596,21 +596,21 @@ TargetType deserializeContents(InputStream stream) throws IOException {\n      * class BaseType { ... }\n      *\n      * class SubType1 extends BaseType {\n-     *     static class SubType1Builder implements ObjectBuilder<SubType1> { ... }\n-     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder<SubType1, SubType1Builder> { ... }\n+     *     static class SubType1Builder implements ObjectBuilder{@literal <SubType1>} { ... }\n+     *     static class SubType1Serializer extends VersionedSerializer.WithBuilder{@literal <SubType1, SubType1Builder>} { ... }\n      * }\n      *\n      * class SubType11 extends SubType1 {\n-     *     static class SubType11Builder implements ObjectBuilder<SubType11> { ... }\n-     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder<SubType11, SubType11Builder> { ... }\n+     *     static class SubType11Builder implements ObjectBuilder{@literal <SubType11>} { ... }\n+     *     static class SubType11Serializer extends VersionedSerializer.WithBuilder{@literal <SubType11, SubType11Builder>} { ... }\n      * }\n      *\n      * class SubType2 extends BaseType {\n-     *     static class SubType2Builder implements ObjectBuilder<SubType2> { ... }\n-     *     static class SubType2Serializer extends VersionedSerializer.WithBuilder<SubType2, SubType2Builder> { ... }\n+     *     static class SubType2Builder implements ObjectBuilder{@literal <SubType2>} { ... }\n+     *     static class SubType2Serializer extends VersionedSerializer.WithBuilder{@literal <SubType2, SubType2Builder>} { ... }\n      * }\n      *\n-     * class BaseTypeSerializer extends VersionedSerializer.MultiType<BaseType> {\n+     * class BaseTypeSerializer extends VersionedSerializer.MultiType{@literal <BaseType>} {", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MTA2Mw==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377561063", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MTEzOA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377561138", "bodyText": "replaced @literal with @code. does that make it better?", "author": "bibinss", "createdAt": "2020-02-11T10:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0MzkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0NDUxMA==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377444510", "bodyText": "Please add a colon : too: ... format: {", "author": "ravisharda", "createdAt": "2020-02-11T04:45:39Z", "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -341,7 +341,7 @@ private static StringBuffer getScopedStreamNameInternal(String scope, String str\n \n     /**\n      * Method to generate Fully Qualified table name using scope, and other tokens to be used to compose the table name.\n-     * The composed name has following format \\<scope\\>/_tables/\\<tokens[0]\\>/\\<tokens[1]\\>...\n+     * The composed name has following format {@literal <scope>/_tables/<tokens[0]>/<tokens[1]>...}", "originalCommit": "86f2a45acb71b5995b8ee84644c805c8169f9fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MTIyMg==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377561222", "bodyText": "done", "author": "bibinss", "createdAt": "2020-02-11T10:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ0NDUxMA=="}], "type": "inlineReview"}, {"oid": "6ed2256bbadbcdec970dba9ab1d2a237c8711afe", "url": "https://github.com/pravega/pravega/commit/6ed2256bbadbcdec970dba9ab1d2a237c8711afe", "message": "Addressing review comments\n\nSigned-off-by: Bibin Sebastian <bibinvamattathil@gmail.com>", "committedDate": "2020-02-11T10:41:25Z", "type": "commit"}, {"oid": "f82fb971efe1809eb48435b5bc8bca6f1570dfa0", "url": "https://github.com/pravega/pravega/commit/f82fb971efe1809eb48435b5bc8bca6f1570dfa0", "message": "Merge branch 'master' into issue4552", "committedDate": "2020-02-11T11:08:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5MDg5Mg==", "url": "https://github.com/pravega/pravega/pull/4555#discussion_r377690892", "bodyText": "nice", "author": "andreipaduroiu", "createdAt": "2020-02-11T15:03:44Z", "path": "client/src/main/java/io/pravega/client/tables/impl/TableSegment.java", "diffHunk": "@@ -52,9 +52,10 @@\n      * Inserts new or updates existing Table Entries into this Table Segment.\n      *\n      * @param entries A Collection of entries to insert or update. If for at least one such entry,\n-     *                {@link TableEntry#getKey()#getVersion()} returns a non-null value, this will perform an atomic\n-     *                Conditional Update where all the entries either get applied or none will; otherwise a Unconditional\n-     *                Update will be performed. See {@link TableSegment} doc for more details on Types of Updates.\n+     *                {@link TableEntry#getKey()}{@link TableKey#getVersion()} returns a non-null value,", "originalCommit": "f82fb971efe1809eb48435b5bc8bca6f1570dfa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}