{"pr_number": 5317, "pr_title": "Issue 5294: Bookkeeper Client may cache old DNS entries for too long", "pr_createdAt": "2020-11-11T19:07:51Z", "pr_url": "https://github.com/pravega/pravega/pull/5317", "timeline": [{"oid": "67b63b4666cfa3e91821ba4f4c4af1a1c75549cd", "url": "https://github.com/pravega/pravega/commit/67b63b4666cfa3e91821ba4f4c4af1a1c75549cd", "message": "Draft for testing Bookkeeper client recreation.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-11-09T20:06:22Z", "type": "commit"}, {"oid": "f4b30cad1af166a8b5cd8f8d461b8149daf8e51d", "url": "https://github.com/pravega/pravega/commit/f4b30cad1af166a8b5cd8f8d461b8149daf8e51d", "message": "Added test to check correctness of re-creation mechanism.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-11-10T11:08:36Z", "type": "commit"}, {"oid": "8e6e5f0ae0da2654e7e3c42411c7130704c4ed94", "url": "https://github.com/pravega/pravega/commit/8e6e5f0ae0da2654e7e3c42411c7130704c4ed94", "message": "Fixed checks.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-11-10T11:46:23Z", "type": "commit"}, {"oid": "c00bf55224e0929e12881a18321ac082f9303b6e", "url": "https://github.com/pravega/pravega/commit/c00bf55224e0929e12881a18321ac082f9303b6e", "message": "Improve BK client re-creation process to prevent the client reference to be null.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-11-11T18:08:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMjM0Ng==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521622346", "bodyText": "How can you have GuardedBy and a public getter at the same time? You cannot guarantee thread safety like this. You need to provide APIs that access this while holding locks.", "author": "andreipaduroiu", "createdAt": "2020-11-11T20:34:14Z", "path": "segmentstore/storage/impl/src/main/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookKeeperLogFactory.java", "diffHunk": "@@ -26,18 +35,31 @@\n import org.apache.bookkeeper.net.CommonConfigurationKeys;\n import org.apache.curator.framework.CuratorFramework;\n \n+import javax.annotation.concurrent.GuardedBy;\n+\n /**\n  * Factory for BookKeeperLogs.\n  */\n @Slf4j\n public class BookKeeperLogFactory implements DurableDataLogFactory {\n     //region Members\n \n+    // Period of inspection to meet the maximum number of log creation attempts for a given container.\n+    private static final Duration LOG_CREATION_INSPECTION_PERIOD = Duration.ofSeconds(60);\n+    // Maximum number of log creation attempts for a given container before considering resetting the BK client.\n+    private static final int MAX_CREATE_ATTEMPTS_PER_LOG = 2;\n+\n     private final String namespace;\n     private final CuratorFramework zkClient;\n     private final AtomicReference<BookKeeper> bookKeeper;\n     private final BookKeeperConfig config;\n     private final ScheduledExecutorService executor;\n+    @GuardedBy(\"this\")\n+    @Getter(AccessLevel.PACKAGE)", "originalCommit": "c00bf55224e0929e12881a18321ac082f9303b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4OTM4Mw==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521989383", "bodyText": "Ok, moved the Getter to a explicit method tagged with @VisibleForTesting. We need access to that only for testing purposes.", "author": "RaulGracia", "createdAt": "2020-11-12T10:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMjM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMjU2MQ==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521622561", "bodyText": "Same here. Never expose Atomic* directly; use APIs.", "author": "andreipaduroiu", "createdAt": "2020-11-11T20:34:38Z", "path": "segmentstore/storage/impl/src/main/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookKeeperLogFactory.java", "diffHunk": "@@ -26,18 +35,31 @@\n import org.apache.bookkeeper.net.CommonConfigurationKeys;\n import org.apache.curator.framework.CuratorFramework;\n \n+import javax.annotation.concurrent.GuardedBy;\n+\n /**\n  * Factory for BookKeeperLogs.\n  */\n @Slf4j\n public class BookKeeperLogFactory implements DurableDataLogFactory {\n     //region Members\n \n+    // Period of inspection to meet the maximum number of log creation attempts for a given container.\n+    private static final Duration LOG_CREATION_INSPECTION_PERIOD = Duration.ofSeconds(60);\n+    // Maximum number of log creation attempts for a given container before considering resetting the BK client.\n+    private static final int MAX_CREATE_ATTEMPTS_PER_LOG = 2;\n+\n     private final String namespace;\n     private final CuratorFramework zkClient;\n     private final AtomicReference<BookKeeper> bookKeeper;\n     private final BookKeeperConfig config;\n     private final ScheduledExecutorService executor;\n+    @GuardedBy(\"this\")\n+    @Getter(AccessLevel.PACKAGE)\n+    private final Map<Integer, LogInitializationRecord> logInitializationTracker = new HashMap<>();\n+    @GuardedBy(\"this\")\n+    @Getter(AccessLevel.PACKAGE)", "originalCommit": "c00bf55224e0929e12881a18321ac082f9303b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4OTg2OA==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521989868", "bodyText": "Fixed as mentioned above.", "author": "RaulGracia", "createdAt": "2020-11-12T10:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMjU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMzMxNQ==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521623315", "bodyText": "Take logInitializationTracker.get(logId) and stash it in a local variable. Then compare it against null in the if above and reuse that variable. This should reduce the number of get calls into that HashMap.", "author": "andreipaduroiu", "createdAt": "2020-11-11T20:36:14Z", "path": "segmentstore/storage/impl/src/main/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookKeeperLogFactory.java", "diffHunk": "@@ -169,5 +193,74 @@ private BookKeeper startBookKeeperClient() throws Exception {\n                          .build();\n     }\n \n+    /**\n+     * Recreate the Bookkeeper client if a given log exhibits MAX_CREATE_ATTEMPTS_PER_LOG creation attempts (as a proxy\n+     * for Container recoveries) within the period of time defined in LOG_CREATION_INSPECTION_PERIOD.\n+     *\n+     * @param logId Id of the log being restarted.\n+     */\n+    private void tryResetBookkeeperClient(int logId) {\n+        synchronized (this) {\n+            if (logInitializationTracker.containsKey(logId)) {\n+                // Account for a restart of the Bookkeeper log.\n+                logInitializationTracker.get(logId).incrementLogCreations();", "originalCommit": "c00bf55224e0929e12881a18321ac082f9303b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MDQ2OQ==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521990469", "bodyText": "Done.", "author": "RaulGracia", "createdAt": "2020-11-12T10:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMzMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNDE1Nw==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521624157", "bodyText": "This will result in double logging. Whomever is invoking this method will absolutely log it as well.", "author": "andreipaduroiu", "createdAt": "2020-11-11T20:38:01Z", "path": "segmentstore/storage/impl/src/main/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookKeeperLogFactory.java", "diffHunk": "@@ -169,5 +193,74 @@ private BookKeeper startBookKeeperClient() throws Exception {\n                          .build();\n     }\n \n+    /**\n+     * Recreate the Bookkeeper client if a given log exhibits MAX_CREATE_ATTEMPTS_PER_LOG creation attempts (as a proxy\n+     * for Container recoveries) within the period of time defined in LOG_CREATION_INSPECTION_PERIOD.\n+     *\n+     * @param logId Id of the log being restarted.\n+     */\n+    private void tryResetBookkeeperClient(int logId) {\n+        synchronized (this) {\n+            if (logInitializationTracker.containsKey(logId)) {\n+                // Account for a restart of the Bookkeeper log.\n+                logInitializationTracker.get(logId).incrementLogCreations();\n+                // If the number of restarts for a single container is meets the threshold, let's reset the BK client.\n+                if (logInitializationTracker.get(logId).isBookkeeperClientResetNeeded()\n+                        && lastBookkeeperClientReset.get().getElapsed().compareTo(LOG_CREATION_INSPECTION_PERIOD) > 0) {\n+                    try {\n+                        log.info(\"Start creating Bookkeeper client in reset.\");\n+                        BookKeeper newClient = startBookKeeperClient();\n+                        // If we have been able to create a new client successfully, reset the current one and update timer.\n+                        log.info(\"Successfully created new Bookkeeper client, setting it as the new one to use.\");\n+                        BookKeeper oldClient = this.bookKeeper.getAndSet(newClient);\n+                        lastBookkeeperClientReset.set(new Timer());\n+                        // Lastly, attempt to close the old client.\n+                        log.info(\"Attempting to close old client.\");\n+                        oldClient.close();\n+                    } catch (Exception e) {\n+                        log.error(\"Failure resetting the Bookkeeper client: \", e);", "originalCommit": "c00bf55224e0929e12881a18321ac082f9303b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MDcwMw==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521990703", "bodyText": "Removed first log line.", "author": "RaulGracia", "createdAt": "2020-11-12T10:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNDE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNTc5MQ==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521625791", "bodyText": "Why do you subclass from this?\nCan't you do it like we test BookKeeperLog? We should have everything we need there.", "author": "andreipaduroiu", "createdAt": "2020-11-11T20:40:53Z", "path": "segmentstore/storage/impl/src/test/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookkeeperLogFactoryTests.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.impl.bookkeeper;\n+\n+import io.pravega.common.Timer;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import org.apache.bookkeeper.client.api.BookKeeper;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.curator.RetryPolicy;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Test to exercise the re-creation of the Bookkeeper client upon successive log creation attempts.\n+ */\n+public class BookkeeperLogFactoryTests extends BookKeeperClusterTestCase {", "originalCommit": "c00bf55224e0929e12881a18321ac082f9303b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MDg3MA==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521990870", "bodyText": "Moved the test to BookkeeperLogTests.", "author": "RaulGracia", "createdAt": "2020-11-12T10:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNTc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNjIzOA==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521626238", "bodyText": "If you do not need to subclass from BookKeeperClusterTestCase, then you can subclass from ThreadPooledTestSuite which will take care of your executor for you.", "author": "andreipaduroiu", "createdAt": "2020-11-11T20:41:45Z", "path": "segmentstore/storage/impl/src/test/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookkeeperLogFactoryTests.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.impl.bookkeeper;\n+\n+import io.pravega.common.Timer;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import org.apache.bookkeeper.client.api.BookKeeper;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.curator.RetryPolicy;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Test to exercise the re-creation of the Bookkeeper client upon successive log creation attempts.\n+ */\n+public class BookkeeperLogFactoryTests extends BookKeeperClusterTestCase {\n+\n+    private ScheduledExecutorService executorService = ExecutorServiceHelpers.newScheduledThreadPool(2, \"test\");", "originalCommit": "c00bf55224e0929e12881a18321ac082f9303b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MTQxOQ==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521991419", "bodyText": "Fixed by moving the test to BookkeeperLogTests.", "author": "RaulGracia", "createdAt": "2020-11-12T10:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNjIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNjcwNg==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521626706", "bodyText": "Use ManualTimer. You can set the time as you wish.", "author": "andreipaduroiu", "createdAt": "2020-11-11T20:42:44Z", "path": "segmentstore/storage/impl/src/test/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookkeeperLogFactoryTests.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.impl.bookkeeper;\n+\n+import io.pravega.common.Timer;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import org.apache.bookkeeper.client.api.BookKeeper;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.curator.RetryPolicy;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Test to exercise the re-creation of the Bookkeeper client upon successive log creation attempts.\n+ */\n+public class BookkeeperLogFactoryTests extends BookKeeperClusterTestCase {\n+\n+    private ScheduledExecutorService executorService = ExecutorServiceHelpers.newScheduledThreadPool(2, \"test\");\n+\n+    public BookkeeperLogFactoryTests() {\n+        super(1);\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        this.baseClientConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+        boolean successfulSetup = false;\n+        while (interfaces.hasMoreElements()) {\n+            try {\n+                super.setUp();\n+                successfulSetup = true;\n+                break;\n+            } catch (Exception e) {\n+                // On some environments, using default interface does not allow to resolve the host name. We keep\n+                // iterating over existing interfaces to start the Bookkeeper cluster.\n+                super.tearDown();\n+                this.baseConf.setListeningInterface(interfaces.nextElement().getName());\n+            }\n+        }\n+        assert successfulSetup;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        ExecutorServiceHelpers.shutdown(executorService);\n+    }\n+\n+    @Test\n+    public void testBookkeeperClientReCreation() throws Exception {\n+        BookKeeperConfig bookKeeperConfig = BookKeeperConfig.builder()\n+                .with(BookKeeperConfig.BK_ACK_QUORUM_SIZE, 1)\n+                .with(BookKeeperConfig.BK_LEDGER_PATH, \"/ledgers\")\n+                .with(BookKeeperConfig.ZK_METADATA_PATH, \"ledgers\")\n+                .with(BookKeeperConfig.BK_ENSEMBLE_SIZE, 1)\n+                .with(BookKeeperConfig.BK_WRITE_QUORUM_SIZE, 1)\n+                .with(BookKeeperConfig.ZK_ADDRESS, zkUtil.getZooKeeperConnectString())\n+                .build();\n+        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3, 10000);\n+        CuratorFramework zkClient = CuratorFrameworkFactory.builder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .retryPolicy(retryPolicy)\n+                .sessionTimeoutMs(30000)\n+                .build();\n+        zkClient.start();\n+        BookKeeperLogFactory factory = new BookKeeperLogFactory(bookKeeperConfig, zkClient, this.executorService);\n+        // Initialize the log, and therefore the Bookkeeper client.\n+        factory.initialize();\n+        // Set a timer with a longer period than the inspection period to allow client re-creation.\n+        factory.getLastBookkeeperClientReset().set(new OldTimer());\n+        BookKeeper oldBookkeeperClient = factory.getBookKeeperClient();\n+        // Create a log the first time.\n+        Assert.assertNull(factory.getLogInitializationTracker().get(0));\n+        factory.createDebugLogWrapper(0);\n+        // The first time we create the log the Bookkeeper client should be the same and the record for this log should\n+        // be initialized.\n+        Assert.assertEquals(oldBookkeeperClient, factory.getBookKeeperClient());\n+        Assert.assertNotNull(factory.getLogInitializationTracker().get(0));\n+        // From this point onwards, the second attempt to create the same log within the inspection period should lead\n+        // to a Bookkeeper client recreation.\n+        factory.createDebugLogWrapper(0);\n+        Assert.assertEquals(oldBookkeeperClient, factory.getBookKeeperClient());\n+        factory.createDebugLogWrapper(0);\n+        Assert.assertNotEquals(oldBookkeeperClient, factory.getBookKeeperClient());\n+        // Get a reference to the new Bookkeeper client.\n+        oldBookkeeperClient = factory.getBookKeeperClient();\n+        // The timer for this log should have been updated, so even if there are more initialization attempts, they should\n+        // not lead to a new Bookkeeper client re-creation until the inspection period expires.\n+        factory.createDebugLogWrapper(0);\n+        Assert.assertEquals(oldBookkeeperClient, factory.getBookKeeperClient());\n+        factory.createDebugLogWrapper(0);\n+        Assert.assertEquals(oldBookkeeperClient, factory.getBookKeeperClient());\n+    }\n+\n+    static class OldTimer extends Timer {", "originalCommit": "c00bf55224e0929e12881a18321ac082f9303b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MjMzMA==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r521992330", "bodyText": "I tried, but this forces me to add another dependency to segmentstore:storage:impl, so I think that just adding this mock, tiny class has less impact to the project.", "author": "RaulGracia", "createdAt": "2020-11-12T10:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNjcwNg=="}], "type": "inlineReview"}, {"oid": "1b36b9bad67ae1763ee7001b6534f9c21b8805b3", "url": "https://github.com/pravega/pravega/commit/1b36b9bad67ae1763ee7001b6534f9c21b8805b3", "message": "Comments from PR review.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-11-12T10:11:13Z", "type": "commit"}, {"oid": "2b751e267b0b7257063e45dca5379b0ce0742abc", "url": "https://github.com/pravega/pravega/commit/2b751e267b0b7257063e45dca5379b0ce0742abc", "message": "Removed unnecesary dependencies.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-11-12T10:21:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMzE1Mw==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r522003153", "bodyText": "this \"close()\" will fail all of the pending operations\nIIUC with this change we are going to close the BK client even if it is not needed", "author": "eolivelli", "createdAt": "2020-11-12T10:33:54Z", "path": "segmentstore/storage/impl/src/main/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookKeeperLogFactory.java", "diffHunk": "@@ -169,5 +189,84 @@ private BookKeeper startBookKeeperClient() throws Exception {\n                          .build();\n     }\n \n+    /**\n+     * Recreate the Bookkeeper client if a given log exhibits MAX_CREATE_ATTEMPTS_PER_LOG creation attempts (as a proxy\n+     * for Container recoveries) within the period of time defined in LOG_CREATION_INSPECTION_PERIOD.\n+     *\n+     * @param logId Id of the log being restarted.\n+     */\n+    private void tryResetBookkeeperClient(int logId) {\n+        synchronized (this) {\n+            LogInitializationRecord record = logInitializationTracker.get(logId);\n+            if (record != null) {\n+                // Account for a restart of the Bookkeeper log.\n+                record.incrementLogCreations();\n+                // If the number of restarts for a single container is meets the threshold, let's reset the BK client.\n+                if (record.isBookkeeperClientResetNeeded()\n+                        && lastBookkeeperClientReset.get().getElapsed().compareTo(LOG_CREATION_INSPECTION_PERIOD) > 0) {\n+                    try {\n+                        log.info(\"Start creating Bookkeeper client in reset.\");\n+                        BookKeeper newClient = startBookKeeperClient();\n+                        // If we have been able to create a new client successfully, reset the current one and update timer.\n+                        log.info(\"Successfully created new Bookkeeper client, setting it as the new one to use.\");\n+                        BookKeeper oldClient = this.bookKeeper.getAndSet(newClient);\n+                        lastBookkeeperClientReset.set(new Timer());\n+                        // Lastly, attempt to close the old client.\n+                        log.info(\"Attempting to close old client.\");\n+                        oldClient.close();", "originalCommit": "2b751e267b0b7257063e45dca5379b0ce0742abc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNzY4Ng==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r522007686", "bodyText": "@eolivelli correct, this defensive mechanism is going to reset the Bookkeeper client (shared across all containers) if we detect X number of restarts for a given container within a period of time T. I understand that this is not the ideal way to handle this problem, but this may be a temporarily solution to the problem reported in the issue until this is fixed: apache/bookkeeper#2482. In parallel, we are working on another solution related to better set the TCP_USER_TIMEOUT as suggested by @fpj. If that works, maybe we do not need to merge this PR.", "author": "RaulGracia", "createdAt": "2020-11-12T10:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMzE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxODU2OA==", "url": "https://github.com/pravega/pravega/pull/5317#discussion_r522018568", "bodyText": "I see, thanks for your clarification", "author": "eolivelli", "createdAt": "2020-11-12T10:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMzE1Mw=="}], "type": "inlineReview"}, {"oid": "7dab30849ad38be5ef5ceddc7affb6eacdd9458d", "url": "https://github.com/pravega/pravega/commit/7dab30849ad38be5ef5ceddc7affb6eacdd9458d", "message": "Merge branch 'master' into issue-5294-bk-client-renewal", "committedDate": "2020-11-12T17:37:04Z", "type": "commit"}, {"oid": "5ce1d4d6c86c5cf17f593c8b7225a38847b25b2a", "url": "https://github.com/pravega/pravega/commit/5ce1d4d6c86c5cf17f593c8b7225a38847b25b2a", "message": "Merge branch 'master' into issue-5294-bk-client-renewal", "committedDate": "2020-11-13T08:11:28Z", "type": "commit"}, {"oid": "4e269d4812cad83767e0fd5d37a063ebfabc3256", "url": "https://github.com/pravega/pravega/commit/4e269d4812cad83767e0fd5d37a063ebfabc3256", "message": "Merge branch 'master' into issue-5294-bk-client-renewal", "committedDate": "2020-11-13T14:47:41Z", "type": "commit"}]}