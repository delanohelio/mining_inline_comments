{"pr_number": 5431, "pr_title": "Issue 5430: Resource leak in Data Reovery CLI Tool Implementation", "pr_createdAt": "2020-12-16T09:31:24Z", "pr_url": "https://github.com/pravega/pravega/pull/5431", "timeline": [{"oid": "252c65853d8f9f8cda9e9dd5639e84c3b9524118", "url": "https://github.com/pravega/pravega/commit/252c65853d8f9f8cda9e9dd5639e84c3b9524118", "message": "Removing AutoClosable.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-12-16T09:13:32Z", "type": "commit"}, {"oid": "07a10964bc78557a222b78b105ad791d7281dbd9", "url": "https://github.com/pravega/pravega/commit/07a10964bc78557a222b78b105ad791d7281dbd9", "message": "Already tagged with @Cleanup, so no need to closed with catched exceeption.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-12-16T15:54:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5MTMxNg==", "url": "https://github.com/pravega/pravega/pull/5431#discussion_r544591316", "bodyText": "zkClient and dataLogFactory need not to be closed, as they are initialized with @CleanUp tag. In case of an exception, it will be popped up and cleanUp will clean these variables.", "author": "ManishKumarKeshri", "createdAt": "2020-12-16T20:11:42Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/dataRecovery/DurableLogRecoveryCommand.java", "diffHunk": "@@ -91,55 +85,43 @@\n     public DurableLogRecoveryCommand(CommandArgs args) {\n         super(args);\n         this.containerCount = getServiceConfig().getContainerCount();\n-        this.storageFactory = createStorageFactory(executorService);\n-        this.storage = this.storageFactory.createStorageAdapter();\n-        this.zkClient = createZKClient();\n+        this.storageFactory = createStorageFactory(this.executorService);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        @Cleanup\n+        Storage storage = this.storageFactory.createStorageAdapter();\n+        @Cleanup\n+        val zkClient = createZKClient();\n \n         val bkConfig = getCommandArgs().getState().getConfigBuilder()\n                 .include(BookKeeperConfig.builder().with(BookKeeperConfig.ZK_ADDRESS, getServiceConfig().getZkURL()))\n                 .build().getConfig(BookKeeperConfig::builder);\n-        this.dataLogFactory = new BookKeeperLogFactory(bkConfig, this.zkClient, executorService);\n-    }\n-\n-    @Override\n-    public void close() throws Exception {\n-        if (this.dataLogFactory != null) {\n-            this.dataLogFactory.close();\n-        }\n-        this.zkClient.close();\n-        this.storage.close();\n-        ExecutorServiceHelpers.shutdown(Duration.ofSeconds(2), executorService);\n-    }\n+        @Cleanup\n+        val dataLogFactory = new BookKeeperLogFactory(bkConfig, zkClient, executorService);\n \n-    @Override\n-    public void execute() throws Exception {\n         outputInfo(\"Container Count = %d\", this.containerCount);\n \n-        try {\n-            this.dataLogFactory.initialize();\n-        } catch (DurableDataLogException ex) {", "originalCommit": "07a10964bc78557a222b78b105ad791d7281dbd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}