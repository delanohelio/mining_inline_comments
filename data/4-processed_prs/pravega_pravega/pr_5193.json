{"pr_number": 5193, "pr_title": "Issue 5192: Copying a segment", "pr_createdAt": "2020-09-15T19:58:49Z", "pr_url": "https://github.com/pravega/pravega/pull/5193", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4OTk1NQ==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r489789955", "bodyText": "Rolling storage is implemented using concept of chunks and a header file that points to them.\nProper implementation will involve following steps\n\nFind name of the header file (see functions in nameutils)\nDeserialize the header file\nFind out list of chunks\n For each chunk in list { \n          parse chunk name to extract offset, \n          using offset+new segment name generate new chunk name\n          rename by calling baseStorage.rename\n          update name in the header data structure\n}\nserialize updated header (so that it points to the recently renamed chunks)\nnow rename the header itself to new name.\n\n\nJust calling this.baseStorage.rename won't work because there is no such segment in base segment.\nJust renaming the header won't work because then we are still pointing to the old chunks. When new segment is created with old name, it will try to create a chunk at offset 0 which will be already existing.", "author": "sachin-j-joshi", "createdAt": "2020-09-16T22:31:12Z", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/rolling/RollingStorage.java", "diffHunk": "@@ -442,6 +442,11 @@ public void concat(SegmentHandle targetHandle, long targetOffset, String sourceS\n         LoggerHelpers.traceLeave(log, \"concat\", traceId, target, targetOffset, sourceSegment);\n     }\n \n+    @Override\n+    public void rename(SegmentHandle handle, String newName) throws StreamSegmentException {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "00ccbbf4d69628c1ebdd897ce64d7e668333e67d", "url": "https://github.com/pravega/pravega/commit/00ccbbf4d69628c1ebdd897ce64d7e668333e67d", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-18T08:30:48Z", "type": "commit"}, {"oid": "28920b18fbc58ae8c6695cda45a3ba40976501ef", "url": "https://github.com/pravega/pravega/commit/28920b18fbc58ae8c6695cda45a3ba40976501ef", "message": "Minor changes.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-18T08:38:29Z", "type": "commit"}, {"oid": "587b334c677421ebbcd899d79d0614a6e93b7015", "url": "https://github.com/pravega/pravega/commit/587b334c677421ebbcd899d79d0614a6e93b7015", "message": "Updating javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-18T10:57:25Z", "type": "commit"}, {"oid": "6f9d360545a3986f03d6374db50b98154ec0a7c5", "url": "https://github.com/pravega/pravega/commit/6f9d360545a3986f03d6374db50b98154ec0a7c5", "message": "Checkstyle Fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-18T16:06:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMDY2NA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492130664", "bodyText": "This is an async method. And so is getStreamSegmentInfo.\nPlease rewrite this entire method to be aynchronous:\n\npublic CompletableFuture<Void> copySegment(...) (remove the throws Exception).\nUse CompletableFuture composition (thenCompose, thenApply, etc.) to chain your futures together.\nUse Futures.loop\nreturn the resulting CompletableFuture.", "author": "andreipaduroiu", "createdAt": "2020-09-21T15:09:46Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -58,4 +62,20 @@\n         ArrayView segmentInfo = MetadataStore.SegmentInfo.recoveredSegment(streamSegmentName, length, isSealed);\n         return metadataStore.createSegment(streamSegmentName, segmentInfo, new TimeoutTimer(TIMEOUT));\n     }\n+\n+    @Override\n+    public void copySegment(Storage storage, String sourceSegment, String targetSegment)\n+            throws Exception {\n+        storage.create(targetSegment, TIMEOUT);", "originalCommit": "6f9d360545a3986f03d6374db50b98154ec0a7c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDIwMQ==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492504201", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-22T06:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMDY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMDkyOA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492130928", "bodyText": "This buffer is too small. I suggest 4/8/16MB or so.", "author": "andreipaduroiu", "createdAt": "2020-09-21T15:10:00Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -17,17 +17,21 @@\n import io.pravega.segmentstore.server.SegmentContainerFactory;\n import io.pravega.segmentstore.server.WriterFactory;\n import io.pravega.segmentstore.server.attributes.AttributeIndexFactory;\n+import io.pravega.segmentstore.storage.Storage;\n import io.pravega.segmentstore.storage.StorageFactory;\n import io.pravega.segmentstore.server.SegmentContainerExtension;\n import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n \n+import java.io.ByteArrayInputStream;\n import java.time.Duration;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ScheduledExecutorService;\n \n @Slf4j\n public class DebugStreamSegmentContainer extends StreamSegmentContainer implements DebugSegmentContainer {\n     private static final Duration TIMEOUT = Duration.ofMinutes(1);\n+    private static final int BUFFER_SIZE = 8 * 1024;", "originalCommit": "6f9d360545a3986f03d6374db50b98154ec0a7c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDA5Mg==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492504092", "bodyText": "made it to 8MB.", "author": "ManishKumarKeshri", "createdAt": "2020-09-22T06:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMDkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMTYxNA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492131614", "bodyText": "Here, you invoke openRead on every loop call. This is highly inefficient. Invoke it once outside of the loop and then reuse the returned handle.", "author": "andreipaduroiu", "createdAt": "2020-09-21T15:10:33Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -58,4 +62,20 @@\n         ArrayView segmentInfo = MetadataStore.SegmentInfo.recoveredSegment(streamSegmentName, length, isSealed);\n         return metadataStore.createSegment(streamSegmentName, segmentInfo, new TimeoutTimer(TIMEOUT));\n     }\n+\n+    @Override\n+    public void copySegment(Storage storage, String sourceSegment, String targetSegment)\n+            throws Exception {\n+        storage.create(targetSegment, TIMEOUT);\n+        val info = storage.getStreamSegmentInfo(sourceSegment, TIMEOUT);\n+        int bytesToRead = (int) info.get().getLength();\n+        int offset = 0;\n+        while (bytesToRead > 0) {\n+            byte[] buffer = new byte[Math.min(BUFFER_SIZE, bytesToRead)];\n+            int size = storage.read(storage.openRead(sourceSegment).join(), offset, buffer, 0, buffer.length, TIMEOUT).join();", "originalCommit": "6f9d360545a3986f03d6374db50b98154ec0a7c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMjQxMg==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492132412", "bodyText": "also verify that size > 0. If it's 0, then you risk getting into an infinite loop.", "author": "andreipaduroiu", "createdAt": "2020-09-21T15:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMTYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNTk2Mg==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492505962", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-22T06:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMTYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMjY1OA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492132658", "bodyText": "openWrite outside of the loop.", "author": "andreipaduroiu", "createdAt": "2020-09-21T15:11:27Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -58,4 +62,20 @@\n         ArrayView segmentInfo = MetadataStore.SegmentInfo.recoveredSegment(streamSegmentName, length, isSealed);\n         return metadataStore.createSegment(streamSegmentName, segmentInfo, new TimeoutTimer(TIMEOUT));\n     }\n+\n+    @Override\n+    public void copySegment(Storage storage, String sourceSegment, String targetSegment)\n+            throws Exception {\n+        storage.create(targetSegment, TIMEOUT);\n+        val info = storage.getStreamSegmentInfo(sourceSegment, TIMEOUT);\n+        int bytesToRead = (int) info.get().getLength();\n+        int offset = 0;\n+        while (bytesToRead > 0) {\n+            byte[] buffer = new byte[Math.min(BUFFER_SIZE, bytesToRead)];\n+            int size = storage.read(storage.openRead(sourceSegment).join(), offset, buffer, 0, buffer.length, TIMEOUT).join();\n+            bytesToRead -= size;\n+            storage.write(storage.openWrite(targetSegment).join(), offset, new ByteArrayInputStream(buffer, 0, size), size, TIMEOUT).join();", "originalCommit": "6f9d360545a3986f03d6374db50b98154ec0a7c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNjAwNw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492506007", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-22T06:46:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMjY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNDQ0Mw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492134443", "bodyText": "Have we thought whether it would be better to put copySegment into the Storage interface? That way we could take advantage of LTS-specific copy features (so that we do not need to read everything and write it back). @sachin-j-joshi what do you think?", "author": "andreipaduroiu", "createdAt": "2020-09-21T15:13:07Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/DebugSegmentContainer.java", "diffHunk": "@@ -25,4 +27,13 @@\n      * completed. If the operation failed, the future will be failed with the causing exception.\n      */\n     CompletableFuture<Void> registerSegment(String streamSegmentName, long length, boolean isSealed);\n+\n+    /**\n+     * Creates a segment with target segment name and copies the contents of the source segment to the target segment.\n+     * @param storage                   A storage instance to create the segment.\n+     * @param sourceSegment             The name of the source segment to copy the contents from.\n+     * @param targetSegment             The name of the segment to write the contents to.\n+     * @throws Exception                In case of an exception occurred while execution.\n+     */\n+    void copySegment(Storage storage, String sourceSegment, String targetSegment) throws Exception;", "originalCommit": "6f9d360545a3986f03d6374db50b98154ec0a7c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTc5OA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r492321798", "bodyText": "Ideally we want rename method implemented in Storage. But that also means implementing  it for RollingStorage with all its corner cases.\nGiven that the rename functionality is needed only in DR tool and only once for a container metadata segment. I suggested this short term work around of copying that segment.\nIn near future we'll implement rename in Storage. But for now I think this is good enough to unblock us.", "author": "sachin-j-joshi", "createdAt": "2020-09-21T20:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNDQ0Mw=="}], "type": "inlineReview"}, {"oid": "21b2d14065e147ea9513935559a75fb7b9b4739e", "url": "https://github.com/pravega/pravega/commit/21b2d14065e147ea9513935559a75fb7b9b4739e", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-22T06:40:58Z", "type": "commit"}, {"oid": "a4f745e9daa7477ee0ca8e5220a7b100532302e8", "url": "https://github.com/pravega/pravega/commit/a4f745e9daa7477ee0ca8e5220a7b100532302e8", "message": "Fixing comment.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-22T06:47:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDAwOA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r493064008", "bodyText": "Need to get rid of these joins as well.\nIt should look something like below .\nAlso you don't need to openWrite again after create.\nreturn storage.create(targetSegment, TIMEOUT).thenCompose(targetHandle -> {\n           return storage.getStreamSegmentInfo(sourceSegment, TIMEOUT).thenCompose(info -> {\n               return storage.openRead(sourceSegment).thenCompose(sourceHandle  ->  {\n                      offset = 0;\n                      return Futures.loop( .....\n              }\n        })\n}})", "author": "sachin-j-joshi", "createdAt": "2020-09-22T22:15:19Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainer.java", "diffHunk": "@@ -58,4 +66,27 @@\n         ArrayView segmentInfo = MetadataStore.SegmentInfo.recoveredSegment(streamSegmentName, length, isSealed);\n         return metadataStore.createSegment(streamSegmentName, segmentInfo, new TimeoutTimer(TIMEOUT));\n     }\n+\n+    @Override\n+    public CompletableFuture<Void> copySegment(Storage storage, String sourceSegment, String targetSegment, ExecutorService executor) {\n+        val targetHandle = storage.create(targetSegment, TIMEOUT).thenCompose(v -> storage.openWrite(targetSegment)).join();", "originalCommit": "a4f745e9daa7477ee0ca8e5220a7b100532302e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NjUyNw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r493196527", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-23T04:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2Njk1MQ==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r493066951", "bodyText": "Does this need to be in loop?", "author": "sachin-j-joshi", "createdAt": "2020-09-22T22:23:11Z", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -247,6 +251,85 @@ public void testEndToEnd() throws Exception {\n         }\n     }\n \n+    /**\n+     * The test creates a segment and then writes some data to it. The method under the test copies the contents of the\n+     * segment to a segment with a different name. At the end, it is verified that the new segment has the accurate\n+     * contents from the first one.\n+     */\n+    @Test\n+    public void testCopySegment() throws Exception {\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage =  new InMemoryStorage();\n+        @Cleanup\n+        val s = new AsyncStorageWrapper(new RollingStorage(baseStorage, new SegmentRollingPolicy(1)), executorService());\n+        s.initialize(1);\n+        log.info(\"Created a storage instance\");\n+\n+        String sourceSegmentName = \"segment-\" + RANDOM.nextInt();\n+        String targetSegmentName = \"segment-\" + RANDOM.nextInt();\n+\n+        // Create source segment\n+        s.create(sourceSegmentName, TIMEOUT).join();\n+        val handle = s.openWrite(sourceSegmentName).join();\n+\n+        // do some writing", "originalCommit": "a4f745e9daa7477ee0ca8e5220a7b100532302e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwMzExMw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r493203113", "bodyText": "Removed loop. Writing 10 MB data at once.", "author": "ManishKumarKeshri", "createdAt": "2020-09-23T05:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2Njk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NzU5Ng==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r493067596", "bodyText": "Does this need to be in loop?", "author": "sachin-j-joshi", "createdAt": "2020-09-22T22:25:02Z", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/DebugStreamSegmentContainerTests.java", "diffHunk": "@@ -247,6 +251,85 @@ public void testEndToEnd() throws Exception {\n         }\n     }\n \n+    /**\n+     * The test creates a segment and then writes some data to it. The method under the test copies the contents of the\n+     * segment to a segment with a different name. At the end, it is verified that the new segment has the accurate\n+     * contents from the first one.\n+     */\n+    @Test\n+    public void testCopySegment() throws Exception {\n+        // Create a storage.\n+        @Cleanup\n+        val baseStorage =  new InMemoryStorage();\n+        @Cleanup\n+        val s = new AsyncStorageWrapper(new RollingStorage(baseStorage, new SegmentRollingPolicy(1)), executorService());\n+        s.initialize(1);\n+        log.info(\"Created a storage instance\");\n+\n+        String sourceSegmentName = \"segment-\" + RANDOM.nextInt();\n+        String targetSegmentName = \"segment-\" + RANDOM.nextInt();\n+\n+        // Create source segment\n+        s.create(sourceSegmentName, TIMEOUT).join();\n+        val handle = s.openWrite(sourceSegmentName).join();\n+\n+        // do some writing\n+        ByteArrayOutputStream writeStream = new ByteArrayOutputStream();\n+        long offset = 0;\n+        for (int j = 0; j < APPENDS_PER_SEGMENT; j++) {\n+            byte[] writeData = populate(APPEND_FORMAT.length());\n+\n+            val dataStream = new ByteArrayInputStream(writeData);\n+            s.write(handle, offset, dataStream, writeData.length, TIMEOUT).join();\n+            writeStream.write(writeData);\n+            offset += writeData.length;\n+        }\n+\n+        // create a debug segment container instance\n+        @Cleanup\n+        TestContext context = createContext(executorService());\n+        OperationLogFactory localDurableLogFactory = new DurableLogFactory(DEFAULT_DURABLE_LOG_CONFIG, context.dataLogFactory,\n+                executorService());\n+\n+        @Cleanup\n+        MetadataCleanupContainer localContainer = new MetadataCleanupContainer(0, CONTAINER_CONFIG, localDurableLogFactory,\n+                context.readIndexFactory, context.attributeIndexFactory, context.writerFactory, context.storageFactory,\n+                context.getDefaultExtensions(), executorService());\n+        Services.startAsync(localContainer, executorService()).join();\n+\n+        // copy segment\n+        localContainer.copySegment(s, sourceSegmentName, targetSegmentName, executorService()).join();\n+\n+        // new segment should exist\n+        Assert.assertTrue(\"Unexpected result for existing segment (no files).\", s.exists(sourceSegmentName, null).join());\n+        // Old segment should exist\n+        Assert.assertTrue(\"Unexpected result for missing segment (no files).\", s.exists(targetSegmentName, null).join());\n+\n+        // Do some reading.\n+        val readHandle = s.openRead(targetSegmentName).join();\n+        byte[] expectedData = writeStream.toByteArray();\n+\n+        for (offset = 0; offset < expectedData.length / 2; offset++) {\n+            int length = (int) (expectedData.length - 2 * offset);\n+            byte[] readBuffer = new byte[length];\n+            int bytesRead = s.read(readHandle, offset, readBuffer, 0, readBuffer.length, TIMEOUT).join();\n+            Assert.assertEquals(String.format(\"Unexpected number of bytes read from offset %d.\", offset),\n+                    length, bytesRead);\n+            AssertExtensions.assertArrayEquals(String.format(\"Unexpected read result from offset %d.\", offset),\n+                    expectedData, (int) offset, readBuffer, 0, bytesRead);\n+        }\n+    }", "originalCommit": "a4f745e9daa7477ee0ca8e5220a7b100532302e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwMzI3Mg==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r493203272", "bodyText": "Removed data. Wrote 10 MB data, and reading all of it at once and verifying.", "author": "ManishKumarKeshri", "createdAt": "2020-09-23T05:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NzU5Ng=="}], "type": "inlineReview"}, {"oid": "f3b114a99180ef63c2ab384e6906fa939ba2ee2e", "url": "https://github.com/pravega/pravega/commit/f3b114a99180ef63c2ab384e6906fa939ba2ee2e", "message": "Fixing comment.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-23T04:53:20Z", "type": "commit"}, {"oid": "247d2d5a4bd7a2a6b68946d95445458d8c45b94f", "url": "https://github.com/pravega/pravega/commit/247d2d5a4bd7a2a6b68946d95445458d8c45b94f", "message": "Fixing comment.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-23T05:18:07Z", "type": "commit"}, {"oid": "038783d94899004b41093cb9710772342ad52eee", "url": "https://github.com/pravega/pravega/commit/038783d94899004b41093cb9710772342ad52eee", "message": "Minor change.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-23T05:25:31Z", "type": "commit"}, {"oid": "c6082e5bcaec5ee6fedda6598998da893c868835", "url": "https://github.com/pravega/pravega/commit/c6082e5bcaec5ee6fedda6598998da893c868835", "message": "Checkstyle.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-23T05:31:52Z", "type": "commit"}, {"oid": "5f81aa49c33af605b1fd22122a453f46b0ef49eb", "url": "https://github.com/pravega/pravega/commit/5f81aa49c33af605b1fd22122a453f46b0ef49eb", "message": "Minor changes.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-23T06:29:03Z", "type": "commit"}, {"oid": "7b339e1657488d7086e651ae6edbaa77c104672c", "url": "https://github.com/pravega/pravega/commit/7b339e1657488d7086e651ae6edbaa77c104672c", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-24T20:07:36Z", "type": "commit"}, {"oid": "d70ca4394eb9d573f02e622f387032353b435715", "url": "https://github.com/pravega/pravega/commit/d70ca4394eb9d573f02e622f387032353b435715", "message": "Updating.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-25T04:46:15Z", "type": "commit"}, {"oid": "9c9b1fd6bb14619a6d23f41932ebab4d6cb43368", "url": "https://github.com/pravega/pravega/commit/9c9b1fd6bb14619a6d23f41932ebab4d6cb43368", "message": "Refactoring.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-25T05:07:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MTI0Mw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495191243", "bodyText": "This can  be done in 259 above, when you initialize the variable.\nActually you can move the declaration of both offset and bytesToRead here.", "author": "andreipaduroiu", "createdAt": "2020-09-25T19:32:04Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -242,4 +245,39 @@ private static void validateContainerIds(Map<Integer, DebugStreamSegmentContaine\n                 storage.openWrite(segmentName).thenCompose(segmentHandle -> storage.delete(segmentHandle, TIMEOUT)),\n                 ex -> ex instanceof StreamSegmentNotExistsException, null);\n     }\n+\n+    /**\n+     * Creates a target segment with the given name and copies the contents of the source segment to the target segment.\n+     * @param storage                   A storage instance to create the segment.\n+     * @param sourceSegment             The name of the source segment to copy the contents from.\n+     * @param targetSegment             The name of the segment to write the contents to.\n+     * @param executor                  A thread pool for execution.\n+     * @return                          A CompletableFuture that, when completed normally, will indicate the operation\n+     * completed. If the operation failed, the future will be failed with the causing exception.\n+     */\n+    protected static CompletableFuture<Void> copySegment(Storage storage, String sourceSegment, String targetSegment, ExecutorService executor) {\n+        AtomicInteger offset = new AtomicInteger();\n+        AtomicInteger bytesToRead = new AtomicInteger();\n+        return storage.create(targetSegment, TIMEOUT).thenCompose(targetHandle -> {\n+            return storage.getStreamSegmentInfo(sourceSegment, TIMEOUT).thenCompose(info -> {\n+                return storage.openRead(sourceSegment).thenCompose(sourceHandle -> {\n+                    offset.set(0);", "originalCommit": "9c9b1fd6bb14619a6d23f41932ebab4d6cb43368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjk3Nw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495706977", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-28T06:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MTI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MTY1Ng==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495191656", "bodyText": "Instead of allocating this buffer every time, do it outside of the loop. Pre-allocate one of BUFFER_SIZE length.", "author": "andreipaduroiu", "createdAt": "2020-09-25T19:33:00Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -242,4 +245,39 @@ private static void validateContainerIds(Map<Integer, DebugStreamSegmentContaine\n                 storage.openWrite(segmentName).thenCompose(segmentHandle -> storage.delete(segmentHandle, TIMEOUT)),\n                 ex -> ex instanceof StreamSegmentNotExistsException, null);\n     }\n+\n+    /**\n+     * Creates a target segment with the given name and copies the contents of the source segment to the target segment.\n+     * @param storage                   A storage instance to create the segment.\n+     * @param sourceSegment             The name of the source segment to copy the contents from.\n+     * @param targetSegment             The name of the segment to write the contents to.\n+     * @param executor                  A thread pool for execution.\n+     * @return                          A CompletableFuture that, when completed normally, will indicate the operation\n+     * completed. If the operation failed, the future will be failed with the causing exception.\n+     */\n+    protected static CompletableFuture<Void> copySegment(Storage storage, String sourceSegment, String targetSegment, ExecutorService executor) {\n+        AtomicInteger offset = new AtomicInteger();\n+        AtomicInteger bytesToRead = new AtomicInteger();\n+        return storage.create(targetSegment, TIMEOUT).thenCompose(targetHandle -> {\n+            return storage.getStreamSegmentInfo(sourceSegment, TIMEOUT).thenCompose(info -> {\n+                return storage.openRead(sourceSegment).thenCompose(sourceHandle -> {\n+                    offset.set(0);\n+                    bytesToRead.set((int) info.getLength());\n+                    return Futures.loop(\n+                            () -> bytesToRead.get() > 0,\n+                            () -> {\n+                                byte[] buffer = new byte[Math.min(BUFFER_SIZE, bytesToRead.get())];", "originalCommit": "9c9b1fd6bb14619a6d23f41932ebab4d6cb43368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjkyMA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495706920", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-28T06:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MTY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MjI0Mg==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495192242", "bodyText": "You can move this in the thenAccept below.", "author": "andreipaduroiu", "createdAt": "2020-09-25T19:34:24Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -242,4 +245,39 @@ private static void validateContainerIds(Map<Integer, DebugStreamSegmentContaine\n                 storage.openWrite(segmentName).thenCompose(segmentHandle -> storage.delete(segmentHandle, TIMEOUT)),\n                 ex -> ex instanceof StreamSegmentNotExistsException, null);\n     }\n+\n+    /**\n+     * Creates a target segment with the given name and copies the contents of the source segment to the target segment.\n+     * @param storage                   A storage instance to create the segment.\n+     * @param sourceSegment             The name of the source segment to copy the contents from.\n+     * @param targetSegment             The name of the segment to write the contents to.\n+     * @param executor                  A thread pool for execution.\n+     * @return                          A CompletableFuture that, when completed normally, will indicate the operation\n+     * completed. If the operation failed, the future will be failed with the causing exception.\n+     */\n+    protected static CompletableFuture<Void> copySegment(Storage storage, String sourceSegment, String targetSegment, ExecutorService executor) {\n+        AtomicInteger offset = new AtomicInteger();\n+        AtomicInteger bytesToRead = new AtomicInteger();\n+        return storage.create(targetSegment, TIMEOUT).thenCompose(targetHandle -> {\n+            return storage.getStreamSegmentInfo(sourceSegment, TIMEOUT).thenCompose(info -> {\n+                return storage.openRead(sourceSegment).thenCompose(sourceHandle -> {\n+                    offset.set(0);\n+                    bytesToRead.set((int) info.getLength());\n+                    return Futures.loop(\n+                            () -> bytesToRead.get() > 0,\n+                            () -> {\n+                                byte[] buffer = new byte[Math.min(BUFFER_SIZE, bytesToRead.get())];\n+                                return storage.read(sourceHandle, offset.get(), buffer, 0, buffer.length, TIMEOUT)\n+                                        .thenComposeAsync(size -> {\n+                                            bytesToRead.addAndGet(-size);", "originalCommit": "9c9b1fd6bb14619a6d23f41932ebab4d6cb43368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjgwOQ==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495706809", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-28T06:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MjI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5Mjc1OA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495192758", "bodyText": "For readability, please be consistent in how you format and indent these callbacks. For best readability, consider moving the .thenXYZ methods on a new line. Then you won't have these weird line wrap-arounds that break the read flow.", "author": "andreipaduroiu", "createdAt": "2020-09-25T19:35:26Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -242,4 +245,39 @@ private static void validateContainerIds(Map<Integer, DebugStreamSegmentContaine\n                 storage.openWrite(segmentName).thenCompose(segmentHandle -> storage.delete(segmentHandle, TIMEOUT)),\n                 ex -> ex instanceof StreamSegmentNotExistsException, null);\n     }\n+\n+    /**\n+     * Creates a target segment with the given name and copies the contents of the source segment to the target segment.\n+     * @param storage                   A storage instance to create the segment.\n+     * @param sourceSegment             The name of the source segment to copy the contents from.\n+     * @param targetSegment             The name of the segment to write the contents to.\n+     * @param executor                  A thread pool for execution.\n+     * @return                          A CompletableFuture that, when completed normally, will indicate the operation\n+     * completed. If the operation failed, the future will be failed with the causing exception.\n+     */\n+    protected static CompletableFuture<Void> copySegment(Storage storage, String sourceSegment, String targetSegment, ExecutorService executor) {\n+        AtomicInteger offset = new AtomicInteger();\n+        AtomicInteger bytesToRead = new AtomicInteger();\n+        return storage.create(targetSegment, TIMEOUT).thenCompose(targetHandle -> {\n+            return storage.getStreamSegmentInfo(sourceSegment, TIMEOUT).thenCompose(info -> {\n+                return storage.openRead(sourceSegment).thenCompose(sourceHandle -> {\n+                    offset.set(0);\n+                    bytesToRead.set((int) info.getLength());\n+                    return Futures.loop(\n+                            () -> bytesToRead.get() > 0,\n+                            () -> {\n+                                byte[] buffer = new byte[Math.min(BUFFER_SIZE, bytesToRead.get())];\n+                                return storage.read(sourceHandle, offset.get(), buffer, 0, buffer.length, TIMEOUT)\n+                                        .thenComposeAsync(size -> {\n+                                            bytesToRead.addAndGet(-size);\n+                                            return (size > 0) ? storage.write(targetHandle, offset.get(), new\n+                                                    ByteArrayInputStream(buffer, 0, size), size, TIMEOUT).thenAcceptAsync(r -> {", "originalCommit": "9c9b1fd6bb14619a6d23f41932ebab4d6cb43368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjc3NQ==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495706775", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-28T06:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5Mjc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5Mzk5Mw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495193993", "bodyText": "What happens when the segment copy is interrupted in the middle (by whatever reason, including a crash)?\nFrom what I can tell, the target segment will be left in an inconsistent state. It will either be empty or have some partial data in it.\nShould we change this method to either:\n\nDelete and recreate the segment (i.e., overwrite)\nThrow (like now)\nResume from where it left off.\n\nIf think #3 is off the table given that it may already contain some other, unrelated data. I would choose between 1 and 2. Does the upstream code handle an exception gracefully? Can it recover from it?", "author": "andreipaduroiu", "createdAt": "2020-09-25T19:38:10Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -242,4 +245,39 @@ private static void validateContainerIds(Map<Integer, DebugStreamSegmentContaine\n                 storage.openWrite(segmentName).thenCompose(segmentHandle -> storage.delete(segmentHandle, TIMEOUT)),\n                 ex -> ex instanceof StreamSegmentNotExistsException, null);\n     }\n+\n+    /**\n+     * Creates a target segment with the given name and copies the contents of the source segment to the target segment.\n+     * @param storage                   A storage instance to create the segment.\n+     * @param sourceSegment             The name of the source segment to copy the contents from.\n+     * @param targetSegment             The name of the segment to write the contents to.\n+     * @param executor                  A thread pool for execution.\n+     * @return                          A CompletableFuture that, when completed normally, will indicate the operation\n+     * completed. If the operation failed, the future will be failed with the causing exception.\n+     */\n+    protected static CompletableFuture<Void> copySegment(Storage storage, String sourceSegment, String targetSegment, ExecutorService executor) {\n+        AtomicInteger offset = new AtomicInteger();\n+        AtomicInteger bytesToRead = new AtomicInteger();\n+        return storage.create(targetSegment, TIMEOUT).thenCompose(targetHandle -> {", "originalCommit": "9c9b1fd6bb14619a6d23f41932ebab4d6cb43368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjcxMw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r495706713", "bodyText": "This method will be used in an upcoming PR(#5180).  Delete & re-copy can be handled there.\nI will be working on renaming the segments, then this method will become obsolete.", "author": "ManishKumarKeshri", "createdAt": "2020-09-28T06:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5Mzk5Mw=="}], "type": "inlineReview"}, {"oid": "2df4610efb8037a43e7cf6189b4bfaf92b49925d", "url": "https://github.com/pravega/pravega/commit/2df4610efb8037a43e7cf6189b4bfaf92b49925d", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-28T06:13:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MzM2Mw==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r497063363", "bodyText": "Suggest that you use composeAsync here and previous line and pass in executor.", "author": "sachin-j-joshi", "createdAt": "2020-09-29T21:13:51Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/ContainerRecoveryUtils.java", "diffHunk": "@@ -242,4 +245,37 @@ private static void validateContainerIds(Map<Integer, DebugStreamSegmentContaine\n                 storage.openWrite(segmentName).thenCompose(segmentHandle -> storage.delete(segmentHandle, TIMEOUT)),\n                 ex -> ex instanceof StreamSegmentNotExistsException, null);\n     }\n+\n+    /**\n+     * Creates a target segment with the given name and copies the contents of the source segment to the target segment.\n+     * @param storage                   A storage instance to create the segment.\n+     * @param sourceSegment             The name of the source segment to copy the contents from.\n+     * @param targetSegment             The name of the segment to write the contents to.\n+     * @param executor                  A thread pool for execution.\n+     * @return                          A CompletableFuture that, when completed normally, will indicate the operation\n+     * completed. If the operation failed, the future will be failed with the causing exception.\n+     */\n+    protected static CompletableFuture<Void> copySegment(Storage storage, String sourceSegment, String targetSegment, ExecutorService executor) {\n+        byte[] buffer = new byte[BUFFER_SIZE];\n+        return storage.create(targetSegment, TIMEOUT).thenCompose(targetHandle -> {\n+            return storage.getStreamSegmentInfo(sourceSegment, TIMEOUT).thenCompose(info -> {", "originalCommit": "2df4610efb8037a43e7cf6189b4bfaf92b49925d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIxNjYyOA==", "url": "https://github.com/pravega/pravega/pull/5193#discussion_r497216628", "bodyText": "Done.", "author": "ManishKumarKeshri", "createdAt": "2020-09-30T03:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MzM2Mw=="}], "type": "inlineReview"}, {"oid": "c2c0307668d6a2cabdd92cbbd4f14bb13b03e99f", "url": "https://github.com/pravega/pravega/commit/c2c0307668d6a2cabdd92cbbd4f14bb13b03e99f", "message": "Fixing comment.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>", "committedDate": "2020-09-30T03:04:06Z", "type": "commit"}]}