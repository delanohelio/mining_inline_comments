{"pr_number": 4479, "pr_title": "Issue 4453: Fix bug in FileSystemStorage.doRead", "pr_createdAt": "2020-01-09T01:22:15Z", "pr_url": "https://github.com/pravega/pravega/pull/4479", "timeline": [{"oid": "322c57d867dbd496632f9480c2adabaae21a6123", "url": "https://github.com/pravega/pravega/commit/322c57d867dbd496632f9480c2adabaae21a6123", "message": "Issue 4453: Fix bug in FileSystemStorage.doRead\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>", "committedDate": "2020-01-09T01:02:48Z", "type": "commit"}, {"oid": "8d9b9f731b435558d81e804f4516f85b33830663", "url": "https://github.com/pravega/pravega/commit/8d9b9f731b435558d81e804f4516f85b33830663", "message": "Issue 4453: Unit tests with FileChannel mocks. Make FileSystemStorage testable.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>", "committedDate": "2020-01-11T01:08:37Z", "type": "commit"}, {"oid": "8d9b9f731b435558d81e804f4516f85b33830663", "url": "https://github.com/pravega/pravega/commit/8d9b9f731b435558d81e804f4516f85b33830663", "message": "Issue 4453: Unit tests with FileChannel mocks. Make FileSystemStorage testable.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>", "committedDate": "2020-01-11T01:08:37Z", "type": "forcePushed"}, {"oid": "04c1411c798d6f7fd26fb212d7c71e59a058d1a6", "url": "https://github.com/pravega/pravega/commit/04c1411c798d6f7fd26fb212d7c71e59a058d1a6", "message": "Merge branch 'master' into issue-4453-FileSystemStorage-doRead-offset-bug", "committedDate": "2020-01-13T11:34:11Z", "type": "commit"}, {"oid": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543", "url": "https://github.com/pravega/pravega/commit/c09ff12a9f6179ae5aea0852a69e66b40e6ca543", "message": "Issue 4453: Fix spotbugs error.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>", "committedDate": "2020-01-13T16:56:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMTI3NQ==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365931275", "bodyText": "Please add @VisibleForTesting for both these methods.", "author": "andreipaduroiu", "createdAt": "2020-01-13T17:30:57Z", "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorage.java", "diffHunk": "@@ -197,6 +197,14 @@ public void close() {\n \n     //endregion\n \n+    protected FileChannel getFileChannel(Path path, StandardOpenOption openOption) throws IOException {", "originalCommit": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NjM5MA==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365966390", "bodyText": "fixed.", "author": "sachin-j-joshi", "createdAt": "2020-01-13T18:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMTI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjMyMg==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365932322", "bodyText": "private static", "author": "andreipaduroiu", "createdAt": "2020-01-13T17:33:06Z", "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {", "originalCommit": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NzU0Ng==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365967546", "bodyText": "fixed", "author": "sachin-j-joshi", "createdAt": "2020-01-13T18:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjM3MQ==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365932371", "bodyText": "private final", "author": "andreipaduroiu", "createdAt": "2020-01-13T17:33:13Z", "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {\n+        FileChannel channel;", "originalCommit": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NjQzNg==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365966436", "bodyText": "fixed.", "author": "sachin-j-joshi", "createdAt": "2020-01-13T18:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjQyMg==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365932422", "bodyText": "private", "author": "andreipaduroiu", "createdAt": "2020-01-13T17:33:19Z", "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    private File baseDir = null;\n+    private FileSystemStorageConfig storageConfig;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.baseDir = Files.createTempDirectory(\"test_nfs\").toFile().getAbsoluteFile();\n+        this.storageConfig = FileSystemStorageConfig\n+                .builder()\n+                .with(FileSystemStorageConfig.ROOT, this.baseDir.getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void doReadTest() throws Exception {\n+        doReadTest(0, 1);\n+\n+        for (int bufferSize : new int[] {2, 3, 4, 1024}) {\n+            for (int i : new int[] {0, 1, bufferSize / 2, bufferSize - 2, bufferSize -1}) {\n+                doReadTest(i, bufferSize);\n+            }\n+        }\n+    }\n+\n+    private void doReadTest(int index, int bufferSize) throws Exception {\n+        // Set up mocks.\n+        FileChannel channel = mock(FileChannel.class);\n+        fixChannelMock(channel);\n+        String segmentName = \"test\";\n+\n+        TestFileSystemStorage testStorage = new TestFileSystemStorage(storageConfig, channel);\n+        testStorage.setSizeToReturn(2L * bufferSize);\n+        SegmentHandle handle = FileSystemSegmentHandle.readHandle(segmentName);\n+\n+        // Force two reads.\n+        ArgumentCaptor<Long> expectedArgs = ArgumentCaptor.forClass(Long.class);\n+        when(channel.read(any(), anyLong())).thenReturn(index, bufferSize - index);\n+\n+        // Call method.\n+        byte[] buffer = new byte[bufferSize];\n+        testStorage.read(handle, 0, buffer, 0, bufferSize);\n+\n+        // Verify.\n+        verify(channel, times(2)).read(any(), expectedArgs.capture());\n+        List<Long> actualArgs = expectedArgs.getAllValues();\n+        assertEquals(2, actualArgs.size());\n+        assertEquals(0, actualArgs.get(0).longValue());\n+        assertEquals(index, actualArgs.get(1).longValue());\n+    }\n+\n+    private static void fixChannelMock(AbstractInterruptibleChannel mockFileChannel) throws Exception {\n+        // Note : This is a workaround for NullPointerException.\n+        // This will break when jdk decides to change implementation.\n+        Field closeLockField = AbstractInterruptibleChannel.class.getDeclaredField(\"closeLock\");\n+        closeLockField.setAccessible(true);\n+        closeLockField.set(mockFileChannel, new Object());\n+    }\n+\n+    /**\n+     * Test Class.\n+     */\n+    class TestFileSystemStorage extends FileSystemStorage {\n+        FileChannel channel;\n+\n+        @Getter\n+        @Setter\n+        long sizeToReturn;", "originalCommit": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NjUxMQ==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365966511", "bodyText": "fixed.", "author": "sachin-j-joshi", "createdAt": "2020-01-13T18:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMjQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzOTA4Mg==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365939082", "bodyText": "Why didn't you put these tests in the FileSystemStorageTests.java class?", "author": "andreipaduroiu", "createdAt": "2020-01-13T17:47:07Z", "path": "bindings/src/test/java/io/pravega/storage/filesystem/FileSystemMockTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.filesystem;\n+\n+import io.pravega.segmentstore.storage.SegmentHandle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class FileSystemMockTests {", "originalCommit": "c09ff12a9f6179ae5aea0852a69e66b40e6ca543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2MDUxOA==", "url": "https://github.com/pravega/pravega/pull/4479#discussion_r365960518", "bodyText": "Because mock based tests are testing in a fundamentally different way. We need to inherit from FileSystemStorage and setup mock and calls explicitly before every test. Therefore keeping them in a separate file. (Plus I'll be adding more mock based tests later.)", "author": "sachin-j-joshi", "createdAt": "2020-01-13T18:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzOTA4Mg=="}], "type": "inlineReview"}, {"oid": "54d321f8d35d251e269d359032ffa2c4911f8e03", "url": "https://github.com/pravega/pravega/commit/54d321f8d35d251e269d359032ffa2c4911f8e03", "message": "Issue 4453: Fix style check issues.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>", "committedDate": "2020-01-13T18:45:40Z", "type": "commit"}]}