{"pr_number": 7708, "pr_title": "[daikin] Add Energy, compressor frequency and special mode channels", "pr_createdAt": "2020-05-20T22:40:11Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7708", "timeline": [{"oid": "39e6030a6caabcde5477cd04b795ff414fd1547f", "url": "https://github.com/openhab/openhab-addons/commit/39e6030a6caabcde5477cd04b795ff414fd1547f", "message": "[daikin] Add Energy, compressor frequency and special mode channels\n\n#6980: Add compressor frequency channel\n#6115: Add energy current year channels\n\nSigned-off-by: Lukas Agethen <lukas83@gmx.de>", "committedDate": "2020-05-20T22:35:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyNzAyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428827027", "bodyText": "The first letter of every word in a label should be capitalized.", "author": "cpmeister", "createdAt": "2020-05-21T18:14:14Z", "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -147,6 +173,172 @@\n \t\t\t</options>\n \t\t</state>\n \t</channel-type>\n+\t\n+\t<channel-type id=\"acunit-cmpfrequency\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Compressor Frequency</label>\n+\t\t<description>Current compressor frequency</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f%%\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"acunit-specialmode\" advanced=\"true\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Special mode</label>", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2ODQ5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428868493", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyNzAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyNzA4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428827080", "bodyText": "here to", "author": "cpmeister", "createdAt": "2020-05-21T18:14:20Z", "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -147,6 +173,172 @@\n \t\t\t</options>\n \t\t</state>\n \t</channel-type>\n+\t\n+\t<channel-type id=\"acunit-cmpfrequency\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Compressor Frequency</label>\n+\t\t<description>Current compressor frequency</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f%%\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"acunit-specialmode\" advanced=\"true\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Special mode</label>\n+\t\t<description>Current special mode</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"acunit-specialmode-powerful\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Powerful mode</label>", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2ODU2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428868561", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyNzA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyODMzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428828338", "bodyText": "Perhaps you should make two channel groups; one for energyheating and another for energycooling.", "author": "cpmeister", "createdAt": "2020-05-21T18:16:35Z", "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -18,6 +18,33 @@\n \t\t\t<channel id=\"homekitmode\" typeId=\"acunit-homekitmode\"/>\n \t\t\t<channel id=\"fanspeed\" typeId=\"acunit-fan\"/>\n \t\t\t<channel id=\"fandir\" typeId=\"acunit-fandir\"/>\n+\t\t\t<channel id=\"cmpfrequency\" typeId=\"acunit-cmpfrequency\"></channel>\n+\t\t\t<channel id=\"specialmode\" typeId=\"acunit-specialmode\"></channel>\n+\t\t\t<channel id=\"specialmode-powerful\" typeId=\"acunit-specialmode-powerful\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-1\" typeId=\"acunit-energyheatingcurrentyear-1\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-2\" typeId=\"acunit-energyheatingcurrentyear-2\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-3\" typeId=\"acunit-energyheatingcurrentyear-3\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-4\" typeId=\"acunit-energyheatingcurrentyear-4\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-5\" typeId=\"acunit-energyheatingcurrentyear-5\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-6\" typeId=\"acunit-energyheatingcurrentyear-6\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-7\" typeId=\"acunit-energyheatingcurrentyear-7\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-8\" typeId=\"acunit-energyheatingcurrentyear-8\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-9\" typeId=\"acunit-energyheatingcurrentyear-9\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-10\" typeId=\"acunit-energyheatingcurrentyear-10\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-11\" typeId=\"acunit-energyheatingcurrentyear-11\"></channel>\n+\t\t\t<channel id=\"energyheatingcurrentyear-12\" typeId=\"acunit-energyheatingcurrentyear-12\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-1\" typeId=\"acunit-energycoolingcurrentyear-1\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-2\" typeId=\"acunit-energycoolingcurrentyear-2\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-3\" typeId=\"acunit-energycoolingcurrentyear-3\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-4\" typeId=\"acunit-energycoolingcurrentyear-4\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-5\" typeId=\"acunit-energycoolingcurrentyear-5\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-6\" typeId=\"acunit-energycoolingcurrentyear-6\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-7\" typeId=\"acunit-energycoolingcurrentyear-7\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-8\" typeId=\"acunit-energycoolingcurrentyear-8\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-9\" typeId=\"acunit-energycoolingcurrentyear-9\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-10\" typeId=\"acunit-energycoolingcurrentyear-10\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-11\" typeId=\"acunit-energycoolingcurrentyear-11\"></channel>\n+\t\t\t<channel id=\"energycoolingcurrentyear-12\" typeId=\"acunit-energycoolingcurrentyear-12\"></channel>", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1OTg3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428859870", "bodyText": "From the openhab documentation my understanding is either direct channels or channel groups. Am I wrong?\nopenhab docs\n\nA thing can only have direct channels or channel groups, but not both", "author": "LukasA83", "createdAt": "2020-05-21T19:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyODMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTQ2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r429029460", "bodyText": "Ok, I was not aware of that restriction. It doesn't make much sense to me why it would be like that so I'll have to look into it. Thanks for pointing that out.", "author": "cpmeister", "createdAt": "2020-05-22T03:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyODMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMDA2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428830064", "bodyText": "I don't know why you are passing in the decimal type into the quantity type. I'm pretty sure you don't need to do that.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    updateState(channel, maybeTemperature.<State>map(t -> new QuantityType<>(new DecimalType(t), SIUnits.CELSIUS))\n          \n          \n            \n                    updateState(channel, maybeTemperature.<State>map(t -> new QuantityType<>(t, SIUnits.CELSIUS))", "author": "cpmeister", "createdAt": "2020-05-21T18:19:43Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinBaseHandler.java", "diffHunk": "@@ -201,7 +203,7 @@ private synchronized void poll() {\n     }\n \n     protected void updateTemperatureChannel(String channel, Optional<Double> maybeTemperature) {\n-        updateState(channel, maybeTemperature.<State> map(t -> new QuantityType<>(new DecimalType(t), SIUnits.CELSIUS))\n+        updateState(channel, maybeTemperature.<State>map(t -> new QuantityType<>(new DecimalType(t), SIUnits.CELSIUS))", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2ODY2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428868664", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMDA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMTU2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428831569", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            t -> new QuantityType<>(new DecimalType(BigDecimal.valueOf(t[i - 1].longValue(), 1)),\n          \n          \n            \n                                            t -> new QuantityType<>(BigDecimal.valueOf(t[i - 1].longValue(), 1),", "author": "cpmeister", "createdAt": "2020-05-21T18:22:31Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinAcUnitHandler.java", "diffHunk": "@@ -160,6 +216,35 @@ protected void changeFanDir(String fanDir) throws DaikinCommunicationException {\n         webTargets.setControlInfo(info);\n     }\n \n+    /**\n+     *\n+     * @param powerfulMode\n+     * @return Is change successful\n+     * @throws DaikinCommunicationException\n+     */\n+    protected boolean changeSpecialModePowerful(boolean powerfulMode) throws DaikinCommunicationException {\n+\n+        return webTargets.setSpecialMode(SpecialModeKind.POWERFUL, powerfulMode);\n+    }\n+\n+    /**\n+     * Updates energy year channels. Values are provided in hundreds of Watt\n+     *\n+     * @param channelPrefix\n+     * @param maybePower\n+     */\n+    protected void updateEnergyYearChannel(String channelPrefix, Optional<Integer[]> maybePower) {\n+        IntStream.range(1, 13).forEach(\n+                i -> updateState(String.format(DaikinBindingConstants.CHANNEL_ENERGY_STRING_FORMAT, channelPrefix, i),\n+                        maybePower.<State>map(\n+                                t -> new QuantityType<>(new DecimalType(BigDecimal.valueOf(t[i - 1].longValue(), 1)),", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2OTMxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428869315", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMjM4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428832385", "bodyText": "remove blank line", "author": "cpmeister", "createdAt": "2020-05-21T18:23:56Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinAcUnitHandler.java", "diffHunk": "@@ -160,6 +216,35 @@ protected void changeFanDir(String fanDir) throws DaikinCommunicationException {\n         webTargets.setControlInfo(info);\n     }\n \n+    /**\n+     *\n+     * @param powerfulMode\n+     * @return Is change successful\n+     * @throws DaikinCommunicationException\n+     */\n+    protected boolean changeSpecialModePowerful(boolean powerfulMode) throws DaikinCommunicationException {\n+", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3MjczNg==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428872736", "bodyText": "Done.", "author": "LukasA83", "createdAt": "2020-05-21T19:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMjM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMzkyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428833920", "bodyText": "Please use units where possible.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Frequency</item-type>\n          \n      \n    \n    \n  \n\nYou will also need to update your code accordingly to use QuantityType for this channel instead.", "author": "cpmeister", "createdAt": "2020-05-21T18:26:48Z", "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -147,6 +173,172 @@\n \t\t\t</options>\n \t\t</state>\n \t</channel-type>\n+\t\n+\t<channel-type id=\"acunit-cmpfrequency\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3MjY2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428872665", "bodyText": "Corrected to dimensionless", "author": "LukasA83", "createdAt": "2020-05-21T19:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMzkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNDk0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428834947", "bodyText": "humidity should use QuantityType with SmartHomeUnits.PERCENT units.\nNote: Changing this might be outside the scope of this PR so you are free to skip this change.", "author": "cpmeister", "createdAt": "2020-05-21T18:28:42Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinAcUnitHandler.java", "diffHunk": "@@ -44,49 +50,93 @@\n  *\n  * @author Tim Waterhouse - Initial Contribution\n  * @author Paul Smedley <paul@smedley.id.au> - Modifications to support Airbase Controllers\n- *\n+ * @author Lukas Agethen - Added support for Energy Year reading, compressor frequency and powerful mode\n  */\n @NonNullByDefault\n public class DaikinAcUnitHandler extends DaikinBaseHandler {\n     private final Logger logger = LoggerFactory.getLogger(DaikinAcUnitHandler.class);\n \n-    public DaikinAcUnitHandler(Thing thing, DaikinDynamicStateDescriptionProvider stateDescriptionProvider, @Nullable HttpClient httpClient) {\n+    public DaikinAcUnitHandler(Thing thing, DaikinDynamicStateDescriptionProvider stateDescriptionProvider,\n+            @Nullable HttpClient httpClient) {\n         super(thing, stateDescriptionProvider, httpClient);\n     }\n \n     @Override\n     protected void pollStatus() throws IOException {\n-        ControlInfo controlInfo = webTargets.getControlInfo();\n-        updateStatus(ThingStatus.ONLINE);\n-        if (controlInfo != null) {\n-            updateState(DaikinBindingConstants.CHANNEL_AC_POWER, controlInfo.power ? OnOffType.ON : OnOffType.OFF);\n-            updateTemperatureChannel(DaikinBindingConstants.CHANNEL_AC_TEMP, controlInfo.temp);\n-\n-            updateState(DaikinBindingConstants.CHANNEL_AC_MODE, new StringType(controlInfo.mode.name()));\n-            updateState(DaikinBindingConstants.CHANNEL_AC_FAN_SPEED, new StringType(controlInfo.fanSpeed.name()));\n-            updateState(DaikinBindingConstants.CHANNEL_AC_FAN_DIR, new StringType(controlInfo.fanMovement.name()));\n-\n-            if (!controlInfo.power) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.OFF.getValue()));\n-            } else if (controlInfo.mode == Mode.COLD) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.COOL.getValue()));\n-            } else if (controlInfo.mode == Mode.HEAT) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.HEAT.getValue()));\n-            } else if (controlInfo.mode == Mode.AUTO) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.AUTO.getValue()));\n+        if (webTargets != null) {\n+            ControlInfo controlInfo = webTargets.getControlInfo();\n+            updateStatus(ThingStatus.ONLINE);\n+            if (controlInfo != null) {\n+                updateState(DaikinBindingConstants.CHANNEL_AC_POWER, controlInfo.power ? OnOffType.ON : OnOffType.OFF);\n+                updateTemperatureChannel(DaikinBindingConstants.CHANNEL_AC_TEMP, controlInfo.temp);\n+\n+                updateState(DaikinBindingConstants.CHANNEL_AC_MODE, new StringType(controlInfo.mode.name()));\n+                updateState(DaikinBindingConstants.CHANNEL_AC_FAN_SPEED, new StringType(controlInfo.fanSpeed.name()));\n+                updateState(DaikinBindingConstants.CHANNEL_AC_FAN_DIR, new StringType(controlInfo.fanMovement.name()));\n+\n+                if (!controlInfo.power) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE,\n+                            new StringType(HomekitMode.OFF.getValue()));\n+                } else if (controlInfo.mode == Mode.COLD) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE,\n+                            new StringType(HomekitMode.COOL.getValue()));\n+                } else if (controlInfo.mode == Mode.HEAT) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE,\n+                            new StringType(HomekitMode.HEAT.getValue()));\n+                } else if (controlInfo.mode == Mode.AUTO) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE,\n+                            new StringType(HomekitMode.AUTO.getValue()));\n+                }\n+\n+                updateState(DaikinBindingConstants.CHANNEL_AC_SPECIALMODE,\n+                        new StringType(controlInfo.specialMode.name()));\n+\n+                if (controlInfo.specialMode.isUndefined()) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_SPECIALMODE_POWERFUL, UnDefType.UNDEF);\n+                } else {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_SPECIALMODE_POWERFUL,\n+                            controlInfo.specialMode.isPowerfulActive() ? OnOffType.ON : OnOffType.OFF);\n+                }\n+\n             }\n-        }\n \n-        SensorInfo sensorInfo = webTargets.getSensorInfo();\n-        if (sensorInfo != null) {\n-            updateTemperatureChannel(DaikinBindingConstants.CHANNEL_INDOOR_TEMP, sensorInfo.indoortemp);\n+            SensorInfo sensorInfo = webTargets.getSensorInfo();\n+            if (sensorInfo != null) {\n+                updateTemperatureChannel(DaikinBindingConstants.CHANNEL_INDOOR_TEMP, sensorInfo.indoortemp);\n+\n+                updateTemperatureChannel(DaikinBindingConstants.CHANNEL_OUTDOOR_TEMP, sensorInfo.outdoortemp);\n \n-            updateTemperatureChannel(DaikinBindingConstants.CHANNEL_OUTDOOR_TEMP, sensorInfo.outdoortemp);\n+                if (sensorInfo.indoorhumidity.isPresent()) {\n+                    updateState(DaikinBindingConstants.CHANNEL_HUMIDITY,\n+                            new DecimalType(sensorInfo.indoorhumidity.get()));", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3MjQxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428872417", "bodyText": "Corrected.", "author": "LukasA83", "createdAt": "2020-05-21T19:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNDk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTY0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428835643", "bodyText": "Please specify specific exceptions if possible. What do you expect to be thrown here anyway?", "author": "cpmeister", "createdAt": "2020-05-21T18:30:00Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinAcUnitHandler.java", "diffHunk": "@@ -44,49 +50,93 @@\n  *\n  * @author Tim Waterhouse - Initial Contribution\n  * @author Paul Smedley <paul@smedley.id.au> - Modifications to support Airbase Controllers\n- *\n+ * @author Lukas Agethen - Added support for Energy Year reading, compressor frequency and powerful mode\n  */\n @NonNullByDefault\n public class DaikinAcUnitHandler extends DaikinBaseHandler {\n     private final Logger logger = LoggerFactory.getLogger(DaikinAcUnitHandler.class);\n \n-    public DaikinAcUnitHandler(Thing thing, DaikinDynamicStateDescriptionProvider stateDescriptionProvider, @Nullable HttpClient httpClient) {\n+    public DaikinAcUnitHandler(Thing thing, DaikinDynamicStateDescriptionProvider stateDescriptionProvider,\n+            @Nullable HttpClient httpClient) {\n         super(thing, stateDescriptionProvider, httpClient);\n     }\n \n     @Override\n     protected void pollStatus() throws IOException {\n-        ControlInfo controlInfo = webTargets.getControlInfo();\n-        updateStatus(ThingStatus.ONLINE);\n-        if (controlInfo != null) {\n-            updateState(DaikinBindingConstants.CHANNEL_AC_POWER, controlInfo.power ? OnOffType.ON : OnOffType.OFF);\n-            updateTemperatureChannel(DaikinBindingConstants.CHANNEL_AC_TEMP, controlInfo.temp);\n-\n-            updateState(DaikinBindingConstants.CHANNEL_AC_MODE, new StringType(controlInfo.mode.name()));\n-            updateState(DaikinBindingConstants.CHANNEL_AC_FAN_SPEED, new StringType(controlInfo.fanSpeed.name()));\n-            updateState(DaikinBindingConstants.CHANNEL_AC_FAN_DIR, new StringType(controlInfo.fanMovement.name()));\n-\n-            if (!controlInfo.power) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.OFF.getValue()));\n-            } else if (controlInfo.mode == Mode.COLD) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.COOL.getValue()));\n-            } else if (controlInfo.mode == Mode.HEAT) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.HEAT.getValue()));\n-            } else if (controlInfo.mode == Mode.AUTO) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.AUTO.getValue()));\n+        if (webTargets != null) {\n+            ControlInfo controlInfo = webTargets.getControlInfo();\n+            updateStatus(ThingStatus.ONLINE);\n+            if (controlInfo != null) {\n+                updateState(DaikinBindingConstants.CHANNEL_AC_POWER, controlInfo.power ? OnOffType.ON : OnOffType.OFF);\n+                updateTemperatureChannel(DaikinBindingConstants.CHANNEL_AC_TEMP, controlInfo.temp);\n+\n+                updateState(DaikinBindingConstants.CHANNEL_AC_MODE, new StringType(controlInfo.mode.name()));\n+                updateState(DaikinBindingConstants.CHANNEL_AC_FAN_SPEED, new StringType(controlInfo.fanSpeed.name()));\n+                updateState(DaikinBindingConstants.CHANNEL_AC_FAN_DIR, new StringType(controlInfo.fanMovement.name()));\n+\n+                if (!controlInfo.power) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE,\n+                            new StringType(HomekitMode.OFF.getValue()));\n+                } else if (controlInfo.mode == Mode.COLD) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE,\n+                            new StringType(HomekitMode.COOL.getValue()));\n+                } else if (controlInfo.mode == Mode.HEAT) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE,\n+                            new StringType(HomekitMode.HEAT.getValue()));\n+                } else if (controlInfo.mode == Mode.AUTO) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE,\n+                            new StringType(HomekitMode.AUTO.getValue()));\n+                }\n+\n+                updateState(DaikinBindingConstants.CHANNEL_AC_SPECIALMODE,\n+                        new StringType(controlInfo.specialMode.name()));\n+\n+                if (controlInfo.specialMode.isUndefined()) {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_SPECIALMODE_POWERFUL, UnDefType.UNDEF);\n+                } else {\n+                    updateState(DaikinBindingConstants.CHANNEL_AC_SPECIALMODE_POWERFUL,\n+                            controlInfo.specialMode.isPowerfulActive() ? OnOffType.ON : OnOffType.OFF);\n+                }\n+\n             }\n-        }\n \n-        SensorInfo sensorInfo = webTargets.getSensorInfo();\n-        if (sensorInfo != null) {\n-            updateTemperatureChannel(DaikinBindingConstants.CHANNEL_INDOOR_TEMP, sensorInfo.indoortemp);\n+            SensorInfo sensorInfo = webTargets.getSensorInfo();\n+            if (sensorInfo != null) {\n+                updateTemperatureChannel(DaikinBindingConstants.CHANNEL_INDOOR_TEMP, sensorInfo.indoortemp);\n+\n+                updateTemperatureChannel(DaikinBindingConstants.CHANNEL_OUTDOOR_TEMP, sensorInfo.outdoortemp);\n \n-            updateTemperatureChannel(DaikinBindingConstants.CHANNEL_OUTDOOR_TEMP, sensorInfo.outdoortemp);\n+                if (sensorInfo.indoorhumidity.isPresent()) {\n+                    updateState(DaikinBindingConstants.CHANNEL_HUMIDITY,\n+                            new DecimalType(sensorInfo.indoorhumidity.get()));\n+                } else {\n+                    updateState(DaikinBindingConstants.CHANNEL_HUMIDITY, UnDefType.UNDEF);\n+                }\n+\n+                if (sensorInfo.compressorfrequency.isPresent()) {\n+                    updateState(DaikinBindingConstants.CHANNEL_CMP_FREQ,\n+                            new DecimalType(sensorInfo.compressorfrequency.get()));\n+                } else {\n+                    updateState(DaikinBindingConstants.CHANNEL_CMP_FREQ, UnDefType.UNDEF);\n+                }\n \n-            if (sensorInfo.indoorhumidity.isPresent()) {\n-                updateState(DaikinBindingConstants.CHANNEL_HUMIDITY, new DecimalType(sensorInfo.indoorhumidity.get()));\n-            } else {\n-                updateState(DaikinBindingConstants.CHANNEL_HUMIDITY, UnDefType.UNDEF);\n+            }\n+\n+            try {\n+                EnergyInfoYear energyInfoYear = webTargets.getEnergyInfoYear();\n+\n+                if (energyInfoYear.energyHeatingThisYear.isPresent()) {\n+                    updateEnergyYearChannel(DaikinBindingConstants.CHANNEL_ENERGY_HEATING_CURRENTYEAR_PREFIX,\n+                            energyInfoYear.energyHeatingThisYear);\n+                }\n+                if (energyInfoYear.energyCoolingThisYear.isPresent()) {\n+                    updateEnergyYearChannel(DaikinBindingConstants.CHANNEL_ENERGY_COOLING_CURRENTYEAR_PREFIX,\n+                            energyInfoYear.energyCoolingThisYear);\n+                }\n+            } catch (Exception e) {", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2ODg1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428868859", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNzAzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428837035", "bodyText": "You are displaying the frequency as a percentage?", "author": "cpmeister", "createdAt": "2020-05-21T18:32:41Z", "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -147,6 +173,172 @@\n \t\t\t</options>\n \t\t</state>\n \t</channel-type>\n+\t\n+\t<channel-type id=\"acunit-cmpfrequency\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Compressor Frequency</label>\n+\t\t<description>Current compressor frequency</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f%%\"></state>", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NzAzNg==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428867036", "bodyText": "Daikin calls it frequency, but it is from my understanding a percentage.", "author": "LukasA83", "createdAt": "2020-05-21T19:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNzAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3MjMyOA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428872328", "bodyText": "I leave it with Dimensionless and show percentage, good point.", "author": "LukasA83", "createdAt": "2020-05-21T19:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNzAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzOTEzMg==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428839132", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } catch (NumberFormatException e) {", "author": "cpmeister", "createdAt": "2020-05-21T18:36:49Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/api/InfoParser.java", "diffHunk": "@@ -62,4 +61,24 @@ private InfoParser() {\n             return Optional.empty();\n         }\n     }\n+\n+    public static Optional<Integer[]> parseArrayofInt(String value) {\n+        if (\"-\".equals(value)) {\n+            return Optional.empty();\n+        }\n+        try {\n+            return Optional.of(Stream.of(value.split(\"/\")).map(val -> Integer.parseInt(val)).toArray(Integer[]::new));\n+\n+        } catch (Exception e) {", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2ODk0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428868940", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzOTEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MDExMg==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428840112", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Arrays.asList(response.split(\",\")).stream().filter(kv -> kv.contains(\"=\")).map(kv -> {\n          \n          \n            \n                    return Stream.of(response.split(\",\")).filter(kv -> kv.contains(\"=\")).map(kv -> {", "author": "cpmeister", "createdAt": "2020-05-21T18:38:33Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/api/InfoParser.java", "diffHunk": "@@ -32,13 +32,12 @@ private InfoParser() {\n     }\n \n     public static Map<String, String> parse(String response) {\n-        return Arrays.asList(response.split(\",\")).stream().filter(kv -> kv.contains(\"=\"))\n-                .map(kv -> {\n-                    String[] keyValue = kv.split(\"=\");\n-                    String key = keyValue[0];\n-                    String value = keyValue.length > 1 ? keyValue[1] : \"\";\n-                    return new String[] { key, value };\n-                }).collect(Collectors.toMap(x -> x[0], x -> x[1]));\n+        return Arrays.asList(response.split(\",\")).stream().filter(kv -> kv.contains(\"=\")).map(kv -> {", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2OTAyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428869020", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MDExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTM5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428841392", "bodyText": "Please add yourself to the author tags for this file.", "author": "cpmeister", "createdAt": "2020-05-21T18:41:07Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/api/Enums.java", "diffHunk": "@@ -138,4 +137,75 @@ public String getValue() {\n             return value;\n         }\n     }\n+", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2OTA3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428869074", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTcyOA==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428841728", "bodyText": "remove this empty java doc", "author": "cpmeister", "createdAt": "2020-05-21T18:41:50Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinCommunicationForbiddenException.java", "diffHunk": "@@ -23,6 +22,11 @@\n  */\n @NonNullByDefault\n public class DaikinCommunicationForbiddenException extends DaikinCommunicationException {\n+    /**\n+     *\n+     */", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2OTExNw==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428869117", "bodyText": "Fixed.", "author": "LukasA83", "createdAt": "2020-05-21T19:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0NjAzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428846039", "bodyText": "Rather than forcing the indentation of every line I would rather you just exit early. And even then you should cache the variable locally to avoid the null checker warning.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (webTargets != null) {\n          \n          \n            \n                        ControlInfo controlInfo = webTargets.getControlInfo();\n          \n          \n            \n                    DaikinWebTargets webTargets = this.webTargets;\n          \n          \n            \n                    if (webTargets == null) {\n          \n          \n            \n                         return;\n          \n          \n            \n                    }\n          \n          \n            \n                    ControlInfo controlInfo = webTargets.getControlInfo();", "author": "cpmeister", "createdAt": "2020-05-21T18:50:02Z", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinAcUnitHandler.java", "diffHunk": "@@ -44,49 +50,93 @@\n  *\n  * @author Tim Waterhouse - Initial Contribution\n  * @author Paul Smedley <paul@smedley.id.au> - Modifications to support Airbase Controllers\n- *\n+ * @author Lukas Agethen - Added support for Energy Year reading, compressor frequency and powerful mode\n  */\n @NonNullByDefault\n public class DaikinAcUnitHandler extends DaikinBaseHandler {\n     private final Logger logger = LoggerFactory.getLogger(DaikinAcUnitHandler.class);\n \n-    public DaikinAcUnitHandler(Thing thing, DaikinDynamicStateDescriptionProvider stateDescriptionProvider, @Nullable HttpClient httpClient) {\n+    public DaikinAcUnitHandler(Thing thing, DaikinDynamicStateDescriptionProvider stateDescriptionProvider,\n+            @Nullable HttpClient httpClient) {\n         super(thing, stateDescriptionProvider, httpClient);\n     }\n \n     @Override\n     protected void pollStatus() throws IOException {\n-        ControlInfo controlInfo = webTargets.getControlInfo();\n-        updateStatus(ThingStatus.ONLINE);\n-        if (controlInfo != null) {\n-            updateState(DaikinBindingConstants.CHANNEL_AC_POWER, controlInfo.power ? OnOffType.ON : OnOffType.OFF);\n-            updateTemperatureChannel(DaikinBindingConstants.CHANNEL_AC_TEMP, controlInfo.temp);\n-\n-            updateState(DaikinBindingConstants.CHANNEL_AC_MODE, new StringType(controlInfo.mode.name()));\n-            updateState(DaikinBindingConstants.CHANNEL_AC_FAN_SPEED, new StringType(controlInfo.fanSpeed.name()));\n-            updateState(DaikinBindingConstants.CHANNEL_AC_FAN_DIR, new StringType(controlInfo.fanMovement.name()));\n-\n-            if (!controlInfo.power) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.OFF.getValue()));\n-            } else if (controlInfo.mode == Mode.COLD) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.COOL.getValue()));\n-            } else if (controlInfo.mode == Mode.HEAT) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.HEAT.getValue()));\n-            } else if (controlInfo.mode == Mode.AUTO) {\n-                updateState(DaikinBindingConstants.CHANNEL_AC_HOMEKITMODE, new StringType(HomekitMode.AUTO.getValue()));\n+        if (webTargets != null) {\n+            ControlInfo controlInfo = webTargets.getControlInfo();", "originalCommit": "39e6030a6caabcde5477cd04b795ff414fd1547f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2OTIxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7708#discussion_r428869215", "bodyText": "Good suggestion - implemented.", "author": "LukasA83", "createdAt": "2020-05-21T19:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0NjAzOQ=="}], "type": "inlineReview"}, {"oid": "b6ca1bf421e5dc9a66aebe620df74bfb74cc2200", "url": "https://github.com/openhab/openhab-addons/commit/b6ca1bf421e5dc9a66aebe620df74bfb74cc2200", "message": "Update small typos and code refactoring as suggested by cpmeister\n\nSigned-off-by: Lukas Agethen <lukas83@gmx.de>", "committedDate": "2020-05-21T19:22:38Z", "type": "commit"}, {"oid": "06eb605d69fae76a85c01f2a52cac578446382d1", "url": "https://github.com/openhab/openhab-addons/commit/06eb605d69fae76a85c01f2a52cac578446382d1", "message": "Update small typos and added units where possible\n\n\n\nSigned-off-by: Lukas Agethen <lukas83@gmx.de>", "committedDate": "2020-05-21T19:41:09Z", "type": "commit"}]}