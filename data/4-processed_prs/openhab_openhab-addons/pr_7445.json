{"pr_number": 7445, "pr_title": "[sonos] Avoid concurrent execution of the polling job", "pr_createdAt": "2020-04-22T14:28:10Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7445", "timeline": [{"oid": "9cdfb07a09373893afb38f2c08150cbd39f6adf7", "url": "https://github.com/openhab/openhab-addons/commit/9cdfb07a09373893afb38f2c08150cbd39f6adf7", "message": "[sonos] Avoid concurrent execution of the polling job\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-04-22T14:25:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMzUyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r413113521", "bodyText": "While you are changing code here anyway: Can you convert the runnable to a private void poll()?", "author": "J-N-K", "createdAt": "2020-04-22T16:05:49Z", "path": "bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/handler/ZonePlayerHandler.java", "diffHunk": "@@ -144,38 +144,42 @@\n \n     private final Object stateLock = new Object();\n \n+    private final Object jobLock = new Object();\n+\n     private final SonosStateDescriptionOptionProvider stateDescriptionProvider;\n \n     private final Runnable pollingRunnable = () -> {", "originalCommit": "9cdfb07a09373893afb38f2c08150cbd39f6adf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1NDEwMg==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r413154102", "bodyText": "Done", "author": "lolodomo", "createdAt": "2020-04-22T16:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMzUyMQ=="}], "type": "inlineReview"}, {"oid": "d091dd330dc75b132b27e4efcda4405ee2c33a02", "url": "https://github.com/openhab/openhab-addons/commit/d091dd330dc75b132b27e4efcda4405ee2c33a02", "message": "Convert the runnable to a method\n\nChange the order of fields declaration\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-04-22T16:54:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4ODc4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r413188787", "bodyText": "I agree that the null-check like it was before does nothing,  but I wonder if removing is the correct way. Are you sure that every access to service is null-safe? Otherwise it would be probably better to throw an IllegalArgumentException.\nThe correct way would obviously be to add proper null-annotations, but that is out-of-scope of this PR.", "author": "J-N-K", "createdAt": "2020-04-22T17:45:56Z", "path": "bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/handler/ZonePlayerHandler.java", "diffHunk": "@@ -100,96 +98,63 @@\n     private static final String STATE_PAUSED_PLAYBACK = \"PAUSED_PLAYBACK\";\n     private static final String STATE_STOPPED = \"STOPPED\";\n \n-    private final ThingRegistry localThingRegistry;\n-    private UpnpIOService service;\n-    private ScheduledFuture<?> pollingJob;\n-    private SonosZonePlayerState savedState = null;\n-\n     private static final Collection<String> SERVICE_SUBSCRIPTIONS = Arrays.asList(\"DeviceProperties\", \"AVTransport\",\n             \"ZoneGroupTopology\", \"GroupManagement\", \"RenderingControl\", \"AudioIn\", \"HTControl\", \"ContentDirectory\");\n-    private Map<String, Boolean> subscriptionState = new HashMap<>();\n     protected static final int SUBSCRIPTION_DURATION = 1800;\n+\n     private static final int SOCKET_TIMEOUT = 5000;\n \n     /**\n-     * Default notification timeout (in seconds)\n+     * The default refresh interval when not specified in channel configuration.\n      */\n-    private static final Integer DEFAULT_NOTIFICATION_TIMEOUT = 20;\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n \n     /**\n-     * configurable notification timeout (in seconds)\n+     * Default notification timeout (in seconds)\n      */\n-    private Integer notificationTimeout = null;\n+    private static final Integer DEFAULT_NOTIFICATION_TIMEOUT = 20;\n \n-    /**\n-     * Intrinsic lock used to synchronize the execution of notification sounds\n-     */\n-    private final Object notificationLock = new Object();\n+    private final Logger logger = LoggerFactory.getLogger(ZonePlayerHandler.class);\n \n-    /**\n-     * {@link ThingHandler} instance of the coordinator speaker used for control delegation\n-     */\n-    private ZonePlayerHandler coordinatorHandler;\n+    private final ThingRegistry localThingRegistry;\n+    private final UpnpIOService service;\n+    private final String opmlUrl;\n+    private final SonosStateDescriptionOptionProvider stateDescriptionProvider;\n \n     /**\n-     * The default refresh interval when not specified in channel configuration.\n+     * Intrinsic lock used to synchronize the execution of notification sounds\n      */\n-    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n-\n-    private final Map<String, String> stateMap = Collections.synchronizedMap(new HashMap<>());\n-\n-    private List<SonosMusicService> musicServices;\n-\n+    private final Object notificationLock = new Object();\n     private final Object upnpLock = new Object();\n-\n     private final Object stateLock = new Object();\n+    private final Object jobLock = new Object();\n \n-    private final SonosStateDescriptionOptionProvider stateDescriptionProvider;\n-\n-    private final Runnable pollingRunnable = () -> {\n-        try {\n-            logger.debug(\"Polling job\");\n+    private final Map<String, String> stateMap = Collections.synchronizedMap(new HashMap<>());\n \n-            // First check if the Sonos zone is set in the UPnP service registry\n-            // If not, set the thing state to OFFLINE and wait for the next poll\n-            if (!isUpnpDeviceRegistered()) {\n-                logger.debug(\"UPnP device {} not yet registered\", getUDN());\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                        \"@text/offline.upnp-device-not-registered [\\\"\" + getUDN() + \"\\\"]\");\n-                synchronized (upnpLock) {\n-                    subscriptionState = new HashMap<>();\n-                }\n-                return;\n-            }\n+    private ScheduledFuture<?> pollingJob;\n+    private SonosZonePlayerState savedState = null;\n \n-            // Check if the Sonos zone can be joined\n-            // If not, set the thing state to OFFLINE and do nothing else\n-            updatePlayerState();\n-            if (getThing().getStatus() != ThingStatus.ONLINE) {\n-                return;\n-            }\n+    private Map<String, Boolean> subscriptionState = new HashMap<>();\n \n-            addSubscription();\n+    /**\n+     * configurable notification timeout (in seconds)\n+     */\n+    private Integer notificationTimeout = null;\n \n-            updateZoneInfo();\n-            updateLed();\n-            updateSleepTimerDuration();\n-        } catch (Exception e) {\n-            logger.debug(\"Exception during poll: {}\", e.getMessage(), e);\n-        }\n-    };\n+    /**\n+     * {@link ThingHandler} instance of the coordinator speaker used for control delegation\n+     */\n+    private ZonePlayerHandler coordinatorHandler;\n \n-    private final String opmlUrl;\n+    private List<SonosMusicService> musicServices;\n \n     public ZonePlayerHandler(ThingRegistry thingRegistry, Thing thing, UpnpIOService upnpIOService, String opmlUrl,\n             SonosStateDescriptionOptionProvider stateDescriptionProvider) {\n         super(thing);\n         this.localThingRegistry = thingRegistry;\n         this.opmlUrl = opmlUrl;\n         logger.debug(\"Creating a ZonePlayerHandler for thing '{}'\", getThing().getUID());\n-        if (upnpIOService != null) {\n-            this.service = upnpIOService;\n-        }\n+        this.service = upnpIOService;", "originalCommit": "d091dd330dc75b132b27e4efcda4405ee2c33a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwNDczOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r413704739", "bodyText": "The Sonos handler factory bundle will not start without this bundle. It is set as a reference:\nhttps://github.com/openhab/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosHandlerFactory.java#L74\nSo it cannot be null at this place, in the constructor of the Sonos thing handler.\nThat is exactly the same thing as for thingRegistry or stateDescriptionProvider.", "author": "lolodomo", "createdAt": "2020-04-23T10:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4ODc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTk3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r413245972", "bodyText": "You should add some logic here to check whether or not this handler was disposed while waiting to acquire the jobLock.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    synchronized (jobLock) {\n          \n          \n            \n                        try {\n          \n          \n            \n                    synchronized (jobLock) {\n          \n          \n            \n                        if (pollingJob == null)  {\n          \n          \n            \n                            return;\n          \n          \n            \n                        }\n          \n          \n            \n                        try {", "author": "cpmeister", "createdAt": "2020-04-22T19:06:44Z", "path": "bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/handler/ZonePlayerHandler.java", "diffHunk": "@@ -230,6 +195,41 @@ public void initialize() {\n         }\n     }\n \n+    private void poll() {\n+        synchronized (jobLock) {\n+            try {", "originalCommit": "d091dd330dc75b132b27e4efcda4405ee2c33a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwOTE5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r413709193", "bodyText": "This method is not called only by the polling job.\nI see what you mean, we should avoid to run it just after the thing handler was disposed.", "author": "lolodomo", "createdAt": "2020-04-23T10:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1OTM5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r414359399", "bodyText": "Done", "author": "lolodomo", "createdAt": "2020-04-24T07:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTk3Mg=="}], "type": "inlineReview"}, {"oid": "8ec80d06d24f7c4ce87e30f044d4d56e81a979d9", "url": "https://github.com/openhab/openhab-addons/commit/8ec80d06d24f7c4ce87e30f044d4d56e81a979d9", "message": "Optimize the UPnP calls in the polling job\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-04-24T07:28:05Z", "type": "commit"}, {"oid": "172754e186536bc1a27ebcce1c920f0e162ec14b", "url": "https://github.com/openhab/openhab-addons/commit/172754e186536bc1a27ebcce1c920f0e162ec14b", "message": "Avoid calling action GetRemainingSleepTimerDuration for a group slave member\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-04-24T12:59:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5MzU4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r414793589", "bodyText": "There is no harm in cancelling more than once, it would already check for you.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!pollingJob.isCancelled()) {\n          \n          \n            \n                            pollingJob.cancel(true);\n          \n          \n            \n                        }\n          \n          \n            \n                        pollingJob.cancel(true);", "author": "cpmeister", "createdAt": "2020-04-24T18:54:30Z", "path": "bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/handler/ZonePlayerHandler.java", "diffHunk": "@@ -100,105 +98,74 @@\n     private static final String STATE_PAUSED_PLAYBACK = \"PAUSED_PLAYBACK\";\n     private static final String STATE_STOPPED = \"STOPPED\";\n \n-    private final ThingRegistry localThingRegistry;\n-    private UpnpIOService service;\n-    private ScheduledFuture<?> pollingJob;\n-    private SonosZonePlayerState savedState = null;\n-\n     private static final Collection<String> SERVICE_SUBSCRIPTIONS = Arrays.asList(\"DeviceProperties\", \"AVTransport\",\n             \"ZoneGroupTopology\", \"GroupManagement\", \"RenderingControl\", \"AudioIn\", \"HTControl\", \"ContentDirectory\");\n-    private Map<String, Boolean> subscriptionState = new HashMap<>();\n     protected static final int SUBSCRIPTION_DURATION = 1800;\n+\n     private static final int SOCKET_TIMEOUT = 5000;\n \n     /**\n-     * Default notification timeout (in seconds)\n+     * The default refresh interval when not specified in channel configuration.\n      */\n-    private static final Integer DEFAULT_NOTIFICATION_TIMEOUT = 20;\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n \n     /**\n-     * configurable notification timeout (in seconds)\n+     * Default notification timeout (in seconds)\n      */\n-    private Integer notificationTimeout = null;\n+    private static final Integer DEFAULT_NOTIFICATION_TIMEOUT = 20;\n \n-    /**\n-     * Intrinsic lock used to synchronize the execution of notification sounds\n-     */\n-    private final Object notificationLock = new Object();\n+    private final Logger logger = LoggerFactory.getLogger(ZonePlayerHandler.class);\n \n-    /**\n-     * {@link ThingHandler} instance of the coordinator speaker used for control delegation\n-     */\n-    private ZonePlayerHandler coordinatorHandler;\n+    private final ThingRegistry localThingRegistry;\n+    private final UpnpIOService service;\n+    private final String opmlUrl;\n+    private final SonosStateDescriptionOptionProvider stateDescriptionProvider;\n \n     /**\n-     * The default refresh interval when not specified in channel configuration.\n+     * Intrinsic lock used to synchronize the execution of notification sounds\n      */\n-    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n-\n-    private final Map<String, String> stateMap = Collections.synchronizedMap(new HashMap<>());\n-\n-    private List<SonosMusicService> musicServices;\n-\n+    private final Object notificationLock = new Object();\n     private final Object upnpLock = new Object();\n-\n     private final Object stateLock = new Object();\n+    private final Object jobLock = new Object();\n \n-    private final SonosStateDescriptionOptionProvider stateDescriptionProvider;\n-\n-    private final Runnable pollingRunnable = () -> {\n-        try {\n-            logger.debug(\"Polling job\");\n+    private final Map<String, String> stateMap = Collections.synchronizedMap(new HashMap<>());\n \n-            // First check if the Sonos zone is set in the UPnP service registry\n-            // If not, set the thing state to OFFLINE and wait for the next poll\n-            if (!isUpnpDeviceRegistered()) {\n-                logger.debug(\"UPnP device {} not yet registered\", getUDN());\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                        \"@text/offline.upnp-device-not-registered [\\\"\" + getUDN() + \"\\\"]\");\n-                synchronized (upnpLock) {\n-                    subscriptionState = new HashMap<>();\n-                }\n-                return;\n-            }\n+    private ScheduledFuture<?> pollingJob;\n+    private SonosZonePlayerState savedState = null;\n \n-            // Check if the Sonos zone can be joined\n-            // If not, set the thing state to OFFLINE and do nothing else\n-            updatePlayerState();\n-            if (getThing().getStatus() != ThingStatus.ONLINE) {\n-                return;\n-            }\n+    private Map<String, Boolean> subscriptionState = new HashMap<>();\n \n-            addSubscription();\n+    /**\n+     * configurable notification timeout (in seconds)\n+     */\n+    private Integer notificationTimeout = null;\n \n-            updateZoneInfo();\n-            updateLed();\n-            updateSleepTimerDuration();\n-        } catch (Exception e) {\n-            logger.debug(\"Exception during poll: {}\", e.getMessage(), e);\n-        }\n-    };\n+    /**\n+     * {@link ThingHandler} instance of the coordinator speaker used for control delegation\n+     */\n+    private ZonePlayerHandler coordinatorHandler;\n \n-    private final String opmlUrl;\n+    private List<SonosMusicService> musicServices;\n \n     public ZonePlayerHandler(ThingRegistry thingRegistry, Thing thing, UpnpIOService upnpIOService, String opmlUrl,\n             SonosStateDescriptionOptionProvider stateDescriptionProvider) {\n         super(thing);\n         this.localThingRegistry = thingRegistry;\n         this.opmlUrl = opmlUrl;\n         logger.debug(\"Creating a ZonePlayerHandler for thing '{}'\", getThing().getUID());\n-        if (upnpIOService != null) {\n-            this.service = upnpIOService;\n-        }\n+        this.service = upnpIOService;\n         this.stateDescriptionProvider = stateDescriptionProvider;\n     }\n \n     @Override\n     public void dispose() {\n         logger.debug(\"Handler disposed for thing {}\", getThing().getUID());\n \n-        if (pollingJob != null && !pollingJob.isCancelled()) {\n-            pollingJob.cancel(true);\n+        if (pollingJob != null) {\n+            if (!pollingJob.isCancelled()) {\n+                pollingJob.cancel(true);\n+            }", "originalCommit": "172754e186536bc1a27ebcce1c920f0e162ec14b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzOTE5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r415239196", "bodyText": "Done", "author": "lolodomo", "createdAt": "2020-04-26T07:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5MzU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MTQ0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r415141442", "bodyText": "Why did you change the way this was implemented? It looks like it was intended to update properties if they haven't changed. Now you are updating the properties every time.", "author": "cpmeister", "createdAt": "2020-04-25T20:50:11Z", "path": "bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/handler/ZonePlayerHandler.java", "diffHunk": "@@ -935,46 +939,31 @@ protected void updateRunningAlarmProperties() {\n         }\n     }\n \n-    protected void updateZoneInfo() {\n+    protected boolean updateZoneInfo() {\n         Map<String, String> result = service.invokeAction(this, \"DeviceProperties\", \"GetZoneInfo\", null);\n-        Map<String, String> result2 = service.invokeAction(this, \"DeviceProperties\", \"GetZoneAttributes\", null);\n-\n-        result.putAll(result2);\n-\n         for (String variable : result.keySet()) {\n             this.onValueReceived(variable, result.get(variable), \"DeviceProperties\");\n         }\n \n         Map<String, String> properties = editProperties();\n-        boolean update = false;\n-        if (StringUtils.isNotEmpty(this.stateMap.get(\"HardwareVersion\"))\n-                && !this.stateMap.get(\"HardwareVersion\").equals(properties.get(Thing.PROPERTY_HARDWARE_VERSION))) {\n-            update = true;\n+        if (StringUtils.isNotEmpty(this.stateMap.get(\"HardwareVersion\"))) {\n             properties.put(Thing.PROPERTY_HARDWARE_VERSION, this.stateMap.get(\"HardwareVersion\"));\n         }\n-        if (StringUtils.isNotEmpty(this.stateMap.get(\"DisplaySoftwareVersion\")) && !this.stateMap\n-                .get(\"DisplaySoftwareVersion\").equals(properties.get(Thing.PROPERTY_FIRMWARE_VERSION))) {\n-            update = true;\n+        if (StringUtils.isNotEmpty(this.stateMap.get(\"DisplaySoftwareVersion\"))) {\n             properties.put(Thing.PROPERTY_FIRMWARE_VERSION, this.stateMap.get(\"DisplaySoftwareVersion\"));\n         }\n-        if (StringUtils.isNotEmpty(this.stateMap.get(\"SerialNumber\"))\n-                && !this.stateMap.get(\"SerialNumber\").equals(properties.get(Thing.PROPERTY_SERIAL_NUMBER))) {\n-            update = true;\n+        if (StringUtils.isNotEmpty(this.stateMap.get(\"SerialNumber\"))) {\n             properties.put(Thing.PROPERTY_SERIAL_NUMBER, this.stateMap.get(\"SerialNumber\"));\n         }\n-        if (StringUtils.isNotEmpty(this.stateMap.get(\"MACAddress\"))\n-                && !this.stateMap.get(\"MACAddress\").equals(properties.get(MAC_ADDRESS))) {\n-            update = true;\n+        if (StringUtils.isNotEmpty(this.stateMap.get(\"MACAddress\"))) {\n             properties.put(MAC_ADDRESS, this.stateMap.get(\"MACAddress\"));\n         }\n-        if (StringUtils.isNotEmpty(this.stateMap.get(\"IPAddress\"))\n-                && !this.stateMap.get(\"IPAddress\").equals(properties.get(IP_ADDRESS))) {\n-            update = true;\n+        if (StringUtils.isNotEmpty(this.stateMap.get(\"IPAddress\"))) {\n             properties.put(IP_ADDRESS, this.stateMap.get(\"IPAddress\"));\n         }\n-        if (update) {\n-            updateProperties(properties);\n-        }\n+        updateProperties(properties);\n+\n+        return !result.isEmpty();", "originalCommit": "172754e186536bc1a27ebcce1c920f0e162ec14b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzODA0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7445#discussion_r415238044", "bodyText": "I changed it because this was useless, the method updateProperties from the core framework is already checking if each property is updated before changing it.", "author": "lolodomo", "createdAt": "2020-04-26T07:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MTQ0Mg=="}], "type": "inlineReview"}, {"oid": "3da4cd62414adf6413c3493aa51245e1edf8633c", "url": "https://github.com/openhab/openhab-addons/commit/3da4cd62414adf6413c3493aa51245e1edf8633c", "message": "Cancel job anyway\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-04-26T07:15:35Z", "type": "commit"}]}