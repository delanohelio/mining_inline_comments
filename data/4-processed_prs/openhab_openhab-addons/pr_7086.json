{"pr_number": 7086, "pr_title": "[satel] Command and events refactoring, communication improvements", "pr_createdAt": "2020-03-01T17:29:42Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7086", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMjA4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7086#discussion_r387002087", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void handleResponseInternal(final EventDispatcher eventDispatcher) {\n          \n          \n            \n                protected abtract void handleResponseInternal(final EventDispatcher eventDispatcher);\n          \n      \n    \n    \n  \n\nThis makes sure that sub-classes implement it.", "author": "J-N-K", "createdAt": "2020-03-03T12:59:10Z", "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/SatelCommandBase.java", "diffHunk": "@@ -115,6 +125,14 @@ protected SatelMessage getResponse() {\n      */\n     protected abstract boolean isResponseValid(SatelMessage response);\n \n+    /**\n+     * Overriden in subclasses allows to execute action specific to given command (i.e. dispatch an event).\n+     *\n+     * @param eventDispatcher event dispatcher\n+     */\n+    protected void handleResponseInternal(final EventDispatcher eventDispatcher) {", "originalCommit": "83b0f17a71cf7404056103d2ed561f6200590eee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NjQ5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7086#discussion_r387246492", "bodyText": "This is on purpose. Not all subclasses need to override this method, so it is empty by default.", "author": "druciak", "createdAt": "2020-03-03T19:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMjA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MDY1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7086#discussion_r387250653", "bodyText": "I guess that\u2018s a personal style question. I prefer \u201edeliberately implement to do nothing in subclass\u201c over \u201eaccidentally forget to implement doing something\u201c. But ok with me.", "author": "J-N-K", "createdAt": "2020-03-03T19:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMjA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwNDA1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7086#discussion_r387004054", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"Missing event handler for event {}. Event discarded.\", event.getClass().getName());\n          \n          \n            \n                        logger.warn(\"Missing event handler for event {}. Event discarded.\", event.getClass().getName());", "author": "J-N-K", "createdAt": "2020-03-03T13:02:56Z", "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/EventDispatcher.java", "diffHunk": "@@ -56,10 +67,19 @@ public void removeEventListener(SatelEventListener eventListener) {\n      * @param event the event to distribute.\n      */\n     public void dispatchEvent(SatelEvent event) {\n-        logger.debug(\"Distributing event: {}\", event);\n-        for (SatelEventListener listener : eventListeners) {\n-            logger.trace(\"Distributing to {}\", listener);\n-            listener.incomingEvent(event);\n+        final Method m = eventHandlers.get(event.getClass());\n+        if (m == null) {\n+            logger.error(\"Missing event handler for event {}. Event discarded.\", event.getClass().getName());", "originalCommit": "83b0f17a71cf7404056103d2ed561f6200590eee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwNDE5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7086#discussion_r387004195", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.error(\"Unable to distribute {} to {}\", event.getClass().getName(), listener, e);\n          \n          \n            \n                                logger.warn(\"Unable to distribute {} to {}\", event.getClass().getName(), listener, e);", "author": "J-N-K", "createdAt": "2020-03-03T13:03:13Z", "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/EventDispatcher.java", "diffHunk": "@@ -56,10 +67,19 @@ public void removeEventListener(SatelEventListener eventListener) {\n      * @param event the event to distribute.\n      */\n     public void dispatchEvent(SatelEvent event) {\n-        logger.debug(\"Distributing event: {}\", event);\n-        for (SatelEventListener listener : eventListeners) {\n-            logger.trace(\"Distributing to {}\", listener);\n-            listener.incomingEvent(event);\n+        final Method m = eventHandlers.get(event.getClass());\n+        if (m == null) {\n+            logger.error(\"Missing event handler for event {}. Event discarded.\", event.getClass().getName());\n+        } else {\n+            logger.debug(\"Distributing event: {}\", event);\n+            for (SatelEventListener listener : eventListeners) {\n+                logger.trace(\"Distributing to {}\", listener);\n+                try {\n+                    m.invoke(listener, event);\n+                } catch (ReflectiveOperationException e) {\n+                    logger.error(\"Unable to distribute {} to {}\", event.getClass().getName(), listener, e);", "originalCommit": "83b0f17a71cf7404056103d2ed561f6200590eee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwNDgwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7086#discussion_r387004801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (SatelEventListener listener : eventListeners) {\n          \n          \n            \n                       eventListeners.forEach(listener -> {", "author": "J-N-K", "createdAt": "2020-03-03T13:04:21Z", "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/EventDispatcher.java", "diffHunk": "@@ -56,10 +67,19 @@ public void removeEventListener(SatelEventListener eventListener) {\n      * @param event the event to distribute.\n      */\n     public void dispatchEvent(SatelEvent event) {\n-        logger.debug(\"Distributing event: {}\", event);\n-        for (SatelEventListener listener : eventListeners) {\n-            logger.trace(\"Distributing to {}\", listener);\n-            listener.incomingEvent(event);\n+        final Method m = eventHandlers.get(event.getClass());\n+        if (m == null) {\n+            logger.error(\"Missing event handler for event {}. Event discarded.\", event.getClass().getName());\n+        } else {\n+            logger.debug(\"Distributing event: {}\", event);\n+            for (SatelEventListener listener : eventListeners) {", "originalCommit": "83b0f17a71cf7404056103d2ed561f6200590eee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3c4a07b1ec3d71e9937299318a0aa559317f8ff5", "url": "https://github.com/openhab/openhab-addons/commit/3c4a07b1ec3d71e9937299318a0aa559317f8ff5", "message": "[satel] Command and events refactoring, communication improvements\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>", "committedDate": "2020-03-03T19:39:33Z", "type": "commit"}, {"oid": "3c4a07b1ec3d71e9937299318a0aa559317f8ff5", "url": "https://github.com/openhab/openhab-addons/commit/3c4a07b1ec3d71e9937299318a0aa559317f8ff5", "message": "[satel] Command and events refactoring, communication improvements\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>", "committedDate": "2020-03-03T19:39:33Z", "type": "forcePushed"}]}