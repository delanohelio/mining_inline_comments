{"pr_number": 8021, "pr_title": "[Astro] Introducing AstroActions service.", "pr_createdAt": "2020-06-27T13:47:14Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8021", "timeline": [{"oid": "d4610bc87593b3803f76f5df2c711c3327e08c33", "url": "https://github.com/openhab/openhab-addons/commit/d4610bc87593b3803f76f5df2c711c3327e08c33", "message": "Introducing AstroActions service.\n\nSigned-off-by: Ga\u00ebl L'hopital <gael@lhopital.org>", "committedDate": "2020-06-27T13:49:29Z", "type": "forcePushed"}, {"oid": "d428d96740f8d38c23e6ad6545de17df242be3d2", "url": "https://github.com/openhab/openhab-addons/commit/d428d96740f8d38c23e6ad6545de17df242be3d2", "message": "Introducing AstroActions service.\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-06-27T13:52:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTYyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453495628", "bodyText": "Why LOGGER in uppercase ?", "author": "lolodomo", "createdAt": "2020-07-13T08:53:41Z", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(AstroActions.class);", "originalCommit": "1cb1a2304653de5e9d5cdb368b8b76b84c94d416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTg2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453495868", "bodyText": "DEBUG level is probably enough here.", "author": "lolodomo", "createdAt": "2020-07-13T08:54:03Z", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        LOGGER.info(\"Astro actions service instanciated\");", "originalCommit": "1cb1a2304653de5e9d5cdb368b8b76b84c94d416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzMDk0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453530940", "bodyText": "And this one ?", "author": "lolodomo", "createdAt": "2020-07-13T09:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MDUzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453550536", "bodyText": "Oups :) ...done.", "author": "clinique", "createdAt": "2020-07-13T10:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTg2OA=="}], "type": "inlineReview"}, {"oid": "9b93c99856135ae1e93a10551ceb4a9258126993", "url": "https://github.com/openhab/openhab-addons/commit/9b93c99856135ae1e93a10551ceb4a9258126993", "message": "Introducing AstroActions service.\nAdding hability to get Azimuth and Elevation for moon also\nCode review corrections\n\nSigned-off-by: Ga\u00ebl L'hopital <gael@lhopital.org>", "committedDate": "2020-07-13T10:21:11Z", "type": "forcePushed"}, {"oid": "cd34ce8b013cc64e9593b75295c35bf3f262a035", "url": "https://github.com/openhab/openhab-addons/commit/cd34ce8b013cc64e9593b75295c35bf3f262a035", "message": "Introducing AstroActions service.\nAdding hability to get Azimuth and Elevation for moon also\nCode review corrections\nEnhancing astro actions loading\n\nSigned-off-by: Ga\u00ebl L'hopital <gael@lhopital.org>", "committedDate": "2020-07-13T14:48:56Z", "type": "commit"}, {"oid": "cd34ce8b013cc64e9593b75295c35bf3f262a035", "url": "https://github.com/openhab/openhab-addons/commit/cd34ce8b013cc64e9593b75295c35bf3f262a035", "message": "Introducing AstroActions service.\nAdding hability to get Azimuth and Elevation for moon also\nCode review corrections\nEnhancing astro actions loading\n\nSigned-off-by: Ga\u00ebl L'hopital <gael@lhopital.org>", "committedDate": "2020-07-13T14:48:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcxNjIxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453716219", "bodyText": "AstroActions instead of LightActions", "author": "lolodomo", "createdAt": "2020-07-13T15:03:21Z", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ * <p>\n+ * <b>Note:</b>The static method <b>invokeMethodOf</b> handles the case where\n+ * the test <i>actions instanceof AstroActions</i> fails. This test can fail\n+ * due to an issue in openHAB core v2.5.0 where the {@link AstroActions} class\n+ * can be loaded by a different classloader than the <i>actions</i> instance.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions, IAstroActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        logger.debug(\"Astro actions service instanciated\");\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof AstroThingHandler) {\n+            this.handler = (AstroThingHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the sun Azimuth at a given moment\")\n+    public @Nullable @ActionOutput(name = \"getAzimuth\", label = \"Azimuth\", type = \"org.eclipse.smarthome.core.library.types.QuantityType<javax.measure.quantity.Angle>\") QuantityType<Angle> getAzimuth(\n+            @ActionInput(name = \"date\", label = \"Date\", required = false, description = \"Considered date\") @Nullable ZonedDateTime date) {\n+        logger.debug(\"Astro action 'getAzimuth' called\");\n+        AstroThingHandler theHandler = this.handler;\n+        if (theHandler != null) {\n+            return theHandler.getAzimuth(date != null ? date : ZonedDateTime.now());\n+        } else {\n+            logger.info(\"Astro Action service ThingHandler is null!\");\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Elevation\", description = \"Get the sun Elevation at a given moment\")\n+    public @Nullable @ActionOutput(name = \"getElevation\", label = \"Elevation\", type = \"org.eclipse.smarthome.core.library.types.QuantityType<javax.measure.quantity.Angle>\") QuantityType<Angle> getElevation(\n+            @ActionInput(name = \"date\", label = \"Date\", required = false, description = \"Considered date\") @Nullable ZonedDateTime date) {\n+        logger.debug(\"Astro action 'getElevation' called\");\n+        AstroThingHandler theHandler = this.handler;\n+        if (theHandler != null) {\n+            return theHandler.getElevation(date != null ? date : ZonedDateTime.now());\n+        } else {\n+            logger.info(\"Astro Action service ThingHandler is null!\");\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Sun : Get Event Time\", description = \"Get the date time of a given planet event\")\n+    public @Nullable @ActionOutput(name = \"getEventTime\", type = \"java.time.ZonedDateTime\") ZonedDateTime getEventTime(\n+            @ActionInput(name = \"phaseName\", label = \"Phase\", required = true, description = \"Requested phase\") String phaseName,\n+            @ActionInput(name = \"date\", label = \"Date\", required = false, description = \"Considered date\") @Nullable ZonedDateTime date,\n+            @ActionInput(name = \"moment\", label = \"Moment\", required = false, defaultValue = \"START\", description = \"Either START or END\") @Nullable String moment) {\n+        logger.debug(\"Sun action 'getEventTime' called\");\n+        try {\n+            if (handler instanceof SunHandler) {\n+                SunHandler handler = (SunHandler) this.handler;\n+                SunPhaseName phase = SunPhaseName.valueOf(phaseName.toUpperCase());\n+                return handler.getEventTime(phase, date != null ? date : ZonedDateTime.now(),\n+                        moment == null || AstroBindingConstants.EVENT_START.equalsIgnoreCase(moment));\n+            } else {\n+                logger.info(\"Astro Action service ThingHandler is not a SunHandler!\");\n+            }\n+        } catch (IllegalArgumentException e) {\n+            logger.info(\"Parameter {} is not a valid phase name\", phaseName);\n+        }\n+        return null;\n+    }\n+\n+    public static @Nullable QuantityType<Angle> getElevation(@Nullable ThingActions actions,\n+            @Nullable ZonedDateTime date) {\n+        return invokeMethodOf(actions).getElevation(date);\n+    }\n+\n+    public static @Nullable QuantityType<Angle> getAzimuth(@Nullable ThingActions actions,\n+            @Nullable ZonedDateTime date) {\n+        return invokeMethodOf(actions).getAzimuth(date);\n+    }\n+\n+    public static @Nullable ZonedDateTime getEventTime(@Nullable ThingActions actions, @Nullable String phaseName,\n+            @Nullable ZonedDateTime date, @Nullable String moment) {\n+        if (phaseName != null) {\n+            return invokeMethodOf(actions).getEventTime(phaseName, date, moment);\n+        } else {\n+            throw new IllegalArgumentException(\"phaseName can not be null\");\n+        }\n+    }\n+\n+    private static IAstroActions invokeMethodOf(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        if (actions.getClass().getName().equals(AstroActions.class.getName())) {\n+            if (actions instanceof IAstroActions) {\n+                return (IAstroActions) actions;\n+            } else {\n+                return (IAstroActions) Proxy.newProxyInstance(IAstroActions.class.getClassLoader(),\n+                        new Class[] { IAstroActions.class }, (Object proxy, Method method, Object[] args) -> {\n+                            Method m = actions.getClass().getDeclaredMethod(method.getName(),\n+                                    method.getParameterTypes());\n+                            return m.invoke(actions, args);\n+                        });\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Actions is not an instance of LightActions\");", "originalCommit": "cd34ce8b013cc64e9593b75295c35bf3f262a035", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f62c8a581624353383e4008e8be7ade91fd83b95", "url": "https://github.com/openhab/openhab-addons/commit/f62c8a581624353383e4008e8be7ade91fd83b95", "message": "Small leftover corrected\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-07-13T15:21:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NTE4OA==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r457585188", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the sun Azimuth at a given moment\")\n          \n          \n            \n                @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the azimuth of the sun for a given time\")", "author": "J-N-K", "createdAt": "2020-07-20T17:46:22Z", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ * <p>\n+ * <b>Note:</b>The static method <b>invokeMethodOf</b> handles the case where\n+ * the test <i>actions instanceof AstroActions</i> fails. This test can fail\n+ * due to an issue in openHAB core v2.5.0 where the {@link AstroActions} class\n+ * can be loaded by a different classloader than the <i>actions</i> instance.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions, IAstroActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        logger.debug(\"Astro actions service instanciated\");\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof AstroThingHandler) {\n+            this.handler = (AstroThingHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the sun Azimuth at a given moment\")", "originalCommit": "f62c8a581624353383e4008e8be7ade91fd83b95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NzA2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r457587067", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @RuleAction(label = \"Astro : Get Elevation\", description = \"Get the sun Elevation at a given moment\")\n          \n          \n            \n                @RuleAction(label = \"Astro : Get Elevation\", description = \"Get the Elevation of the sun for a given time\")", "author": "J-N-K", "createdAt": "2020-07-20T17:49:42Z", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ * <p>\n+ * <b>Note:</b>The static method <b>invokeMethodOf</b> handles the case where\n+ * the test <i>actions instanceof AstroActions</i> fails. This test can fail\n+ * due to an issue in openHAB core v2.5.0 where the {@link AstroActions} class\n+ * can be loaded by a different classloader than the <i>actions</i> instance.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions, IAstroActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        logger.debug(\"Astro actions service instanciated\");\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof AstroThingHandler) {\n+            this.handler = (AstroThingHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the sun Azimuth at a given moment\")\n+    public @Nullable @ActionOutput(name = \"getAzimuth\", label = \"Azimuth\", type = \"org.eclipse.smarthome.core.library.types.QuantityType<javax.measure.quantity.Angle>\") QuantityType<Angle> getAzimuth(\n+            @ActionInput(name = \"date\", label = \"Date\", required = false, description = \"Considered date\") @Nullable ZonedDateTime date) {\n+        logger.debug(\"Astro action 'getAzimuth' called\");\n+        AstroThingHandler theHandler = this.handler;\n+        if (theHandler != null) {\n+            return theHandler.getAzimuth(date != null ? date : ZonedDateTime.now());\n+        } else {\n+            logger.info(\"Astro Action service ThingHandler is null!\");\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Elevation\", description = \"Get the sun Elevation at a given moment\")", "originalCommit": "f62c8a581624353383e4008e8be7ade91fd83b95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5MDM2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r457590366", "bodyText": "What is the benefit of this change?", "author": "J-N-K", "createdAt": "2020-07-20T17:55:16Z", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/config/AstroThingConfig.java", "diffHunk": "@@ -25,10 +25,11 @@\n  */\n @NonNullByDefault\n public class AstroThingConfig {\n+    public static double UNDEFINED = Double.NaN;\n     public @Nullable String geolocation;\n-    public @Nullable Double altitude;\n-    public @Nullable Double latitude;\n-    public @Nullable Double longitude;\n+    private double altitude = UNDEFINED;", "originalCommit": "f62c8a581624353383e4008e8be7ade91fd83b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MTU4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r457891586", "bodyText": "Reverted", "author": "clinique", "createdAt": "2020-07-21T07:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5MDM2Ng=="}], "type": "inlineReview"}, {"oid": "2b3aac20d6790fca8e53d5c457f017f1ffae9c43", "url": "https://github.com/openhab/openhab-addons/commit/2b3aac20d6790fca8e53d5c457f017f1ffae9c43", "message": "Code review corrections\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-07-21T07:26:01Z", "type": "commit"}]}