{"pr_number": 8530, "pr_title": "[zoneminder] Replacement for ZoneMinder binding", "pr_createdAt": "2020-09-21T20:29:46Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8530", "timeline": [{"oid": "25ca85923ac7af88c5bea87e9387a4e8d8df3982", "url": "https://github.com/openhab/openhab-addons/commit/25ca85923ac7af88c5bea87e9387a4e8d8df3982", "message": "Change owner\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-09-22T14:09:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MTkyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r492981926", "bodyText": "Maybe this should be done as part of activate instead?", "author": "cpmeister", "createdAt": "2020-09-22T19:28:49Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/internal/discovery/MonitorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.internal.discovery;\n+\n+import static org.openhab.binding.zoneminder.internal.ZmBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.zoneminder.internal.handler.Monitor;\n+import org.openhab.binding.zoneminder.internal.handler.ZmBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MonitorDiscoveryService} is responsible for discovering the Zoneminder monitors\n+ * associated with a Zoneminder server.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MonitorDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(MonitorDiscoveryService.class);\n+\n+    private @Nullable ZmBridgeHandler bridgeHandler;\n+\n+    public MonitorDiscoveryService() {\n+        super(30);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof ZmBridgeHandler) {\n+            ((ZmBridgeHandler) handler).setDiscoveryService(this);", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYyMzAxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493623013", "bodyText": "I don't know. It's done this way in a number of other bindings. And, I don't think we know the bridge handler in activate.", "author": "mhilbush", "createdAt": "2020-09-23T14:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MTkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MDUzMw==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r492990533", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (auth != null && auth.exception == null && auth.exception == null && auth.accessToken != null) {\n          \n          \n            \n                        if (auth != null && auth.exception == null && auth.accessToken != null) {", "author": "cpmeister", "createdAt": "2020-09-22T19:45:16Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/internal/handler/ZmAuth.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.internal.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.zoneminder.internal.dto.AuthResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link ZmAuth} manages the authentication process when Zoneminder\n+ * authentication is enabled. This class requests access and refresh tokens based\n+ * on the expiration times provided by the Zoneminder server.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZmAuth {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ZmAuth.class);\n+\n+    private ZmBridgeHandler bridgeHandler;\n+    private String authContent;\n+\n+    private @Nullable String refreshToken;\n+    private long refreshTokenExpiresAt;\n+    private @Nullable String accessToken;\n+    private long accessTokenExpiresAt;\n+\n+    private boolean usingAuthorization;\n+    private boolean isAuthorized;\n+\n+    public ZmAuth(ZmBridgeHandler handler) {\n+        this(handler, null, null);\n+    }\n+\n+    public ZmAuth(ZmBridgeHandler handler, @Nullable String user, @Nullable String pass) {\n+        this.bridgeHandler = handler;\n+        if (user == null || pass == null) {\n+            logger.debug(\"ZmAuth: Authorization is disabled\");\n+            usingAuthorization = false;\n+            isAuthorized = true;\n+            authContent = \"\";\n+        } else {\n+            logger.debug(\"ZmAuth: Authorization is enabled\");\n+            usingAuthorization = true;\n+            isAuthorized = false;\n+            try {\n+                authContent = String.format(\"user=%s&pass=%s&stateful=1\",\n+                        URLEncoder.encode(user, StandardCharsets.UTF_8.name()),\n+                        URLEncoder.encode(pass, StandardCharsets.UTF_8.name()));\n+            } catch (UnsupportedEncodingException e) {\n+                logger.warn(\"ZmAuth: Unable to encode user name and password\");\n+                authContent = \"\";\n+            }\n+        }\n+    }\n+\n+    public String getAccessToken() {\n+        String localAccessToken = accessToken;\n+        return localAccessToken != null ? localAccessToken : \"\";\n+    }\n+\n+    public boolean usingAuthorization() {\n+        return usingAuthorization;\n+    }\n+\n+    public boolean isAuthorized() {\n+        if (usingAuthorization()) {\n+            checkTokens();\n+        }\n+        return isAuthorized;\n+    }\n+\n+    private void checkTokens() {\n+        if (isExpired(refreshTokenExpiresAt)) {\n+            getNewRefreshToken();\n+        } else if (isExpired(accessTokenExpiresAt)) {\n+            getNewAccessToken();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private synchronized void getNewRefreshToken() {\n+        // First check to see if another thread has updated it\n+        if (!isExpired(refreshTokenExpiresAt)) {\n+            return;\n+        }\n+        String url = bridgeHandler.buildLoginUrl();\n+        logger.debug(\"ZmAuth: Update expired REFRESH token using url '{}'\", url);\n+        String response = bridgeHandler.executePost(url, authContent, \"application/x-www-form-urlencoded\");\n+        if (response != null) {\n+            Gson gson = bridgeHandler.getGson();\n+            AuthResponseDTO auth = gson.fromJson(response, AuthResponseDTO.class);\n+            if (auth != null && auth.exception == null && auth.refreshToken != null && auth.accessToken != null) {\n+                updateRefreshToken(auth);\n+                updateAccessToken(auth);\n+                isAuthorized = true;\n+                return;\n+            }\n+        }\n+        isAuthorized = false;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private synchronized void getNewAccessToken() {\n+        // First check to see if another thread has updated it\n+        if (!isExpired(accessTokenExpiresAt)) {\n+            return;\n+        }\n+        String url = bridgeHandler.buildLoginUrl(String.format(\"?token=%s\", refreshToken));\n+        logger.debug(\"ZmAuth: Update expired ACCESS token using url '{}'\", url);\n+        String response = bridgeHandler.executeGet(url);\n+        if (response != null) {\n+            Gson gson = bridgeHandler.getGson();\n+            AuthResponseDTO auth = gson.fromJson(response, AuthResponseDTO.class);\n+            if (auth != null && auth.exception == null && auth.exception == null && auth.accessToken != null) {", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU5ODk5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493598996", "bodyText": "No, no. I need to really make sure it's null. lol\nFixed.", "author": "mhilbush", "createdAt": "2020-09-23T13:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MDUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MjQ1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r492992457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ZmBridgeHandler bridgeHandler;\n          \n          \n            \n                private String authContent;\n          \n          \n            \n                private final ZmBridgeHandler bridgeHandler;\n          \n          \n            \n                private final String authContent;", "author": "cpmeister", "createdAt": "2020-09-22T19:48:40Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/internal/handler/ZmAuth.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.internal.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.zoneminder.internal.dto.AuthResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link ZmAuth} manages the authentication process when Zoneminder\n+ * authentication is enabled. This class requests access and refresh tokens based\n+ * on the expiration times provided by the Zoneminder server.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZmAuth {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ZmAuth.class);\n+\n+    private ZmBridgeHandler bridgeHandler;\n+    private String authContent;", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNzM2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493607362", "bodyText": "Done", "author": "mhilbush", "createdAt": "2020-09-23T13:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MjQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MzUxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r492993519", "bodyText": "The default charset varies from system to system so it is better to specify it yourself instead of using the default.", "author": "cpmeister", "createdAt": "2020-09-22T19:50:38Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/internal/handler/ZmBridgeHandler.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.internal.handler;\n+\n+import static org.openhab.binding.zoneminder.internal.ZmBindingConstants.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.zoneminder.internal.ZmStateDescriptionOptionsProvider;\n+import org.openhab.binding.zoneminder.internal.config.ZmBridgeConfig;\n+import org.openhab.binding.zoneminder.internal.discovery.MonitorDiscoveryService;\n+import org.openhab.binding.zoneminder.internal.dto.EventDTO;\n+import org.openhab.binding.zoneminder.internal.dto.EventsDTO;\n+import org.openhab.binding.zoneminder.internal.dto.MonitorDTO;\n+import org.openhab.binding.zoneminder.internal.dto.MonitorItemDTO;\n+import org.openhab.binding.zoneminder.internal.dto.MonitorStateDTO;\n+import org.openhab.binding.zoneminder.internal.dto.MonitorStatusDTO;\n+import org.openhab.binding.zoneminder.internal.dto.MonitorsDTO;\n+import org.openhab.binding.zoneminder.internal.dto.VersionDTO;\n+import org.openhab.core.io.net.http.HttpUtil;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.RawType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.StateOption;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link ZmBridgeHandler} represents the Zoneminder server. It handles all communication\n+ * with the Zoneminder server.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZmBridgeHandler extends BaseBridgeHandler {\n+\n+    private static final int REFRESH_INTERVAL_SECONDS = 1;\n+    private static final int REFRESH_STARTUP_DELAY_SECONDS = 3;\n+\n+    private static final int MONITORS_INTERVAL_SECONDS = 5;\n+    private static final int MONITORS_INITIAL_DELAY_SECONDS = 3;\n+\n+    private static final int DISCOVERY_INTERVAL_SECONDS = 300;\n+    private static final int DISCOVERY_INITIAL_DELAY_SECONDS = 10;\n+\n+    private static final int API_TIMEOUT_MSEC = 10000;\n+\n+    private static final String LOGIN_PATH = \"/api/host/login.json\";\n+\n+    private static final String STREAM_IMAGE = \"single\";\n+    private static final String STREAM_VIDEO = \"jpeg\";\n+\n+    private static final List<String> EMPTY_LIST = Collections.emptyList();\n+\n+    private static final Gson GSON = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n+\n+    private final Logger logger = LoggerFactory.getLogger(ZmBridgeHandler.class);\n+\n+    private @Nullable Future<?> refreshMonitorsJob;\n+    private final AtomicInteger monitorsCounter = new AtomicInteger();\n+\n+    private @Nullable MonitorDiscoveryService discoveryService;\n+    private final AtomicInteger discoveryCounter = new AtomicInteger();\n+\n+    private List<Monitor> savedMonitors = new ArrayList<>();\n+\n+    private String host = \"\";\n+    private boolean useSSL;\n+    private @Nullable String portNumber;\n+    private @NonNullByDefault({}) Boolean useDefaultUrlPath;\n+    private @Nullable String urlPath;\n+    private int monitorsInterval;\n+    private int discoveryInterval;\n+    private boolean discoveryEnabled;\n+    private int defaultAlarmDuration;\n+    private @Nullable Integer defaultImageRefreshInterval;\n+\n+    private final HttpClient httpClient;\n+    private final ZmStateDescriptionOptionsProvider stateDescriptionProvider;\n+\n+    private ZmAuth zmAuth;\n+\n+    // Maintain mapping of handler and monitor id\n+    private final Map<String, ZmMonitorHandler> monitorHandlers = new ConcurrentHashMap<>();\n+\n+    public ZmBridgeHandler(Bridge thing, HttpClient httpClient,\n+            ZmStateDescriptionOptionsProvider stateDescriptionProvider) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        // Default to use no authentication\n+        zmAuth = new ZmAuth(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ZmBridgeConfig config = getConfigAs(ZmBridgeConfig.class);\n+\n+        Integer value;\n+        value = config.refreshInterval;\n+        monitorsInterval = value == null ? MONITORS_INTERVAL_SECONDS : value;\n+\n+        value = config.discoveryInterval;\n+        discoveryInterval = value == null ? DISCOVERY_INTERVAL_SECONDS : value;\n+\n+        value = config.defaultAlarmDuration;\n+        defaultAlarmDuration = value == null ? DEFAULT_ALARM_DURATION_SECONDS : value;\n+\n+        defaultImageRefreshInterval = config.defaultImageRefreshInterval;\n+\n+        discoveryEnabled = config.discoveryEnabled == null ? false : config.discoveryEnabled.booleanValue();\n+\n+        host = config.host;\n+        useSSL = config.useSSL.booleanValue();\n+        portNumber = config.portNumber != null ? Integer.toString(config.portNumber) : null;\n+\n+        // Allows the use of a customized path and/or port number\n+        useDefaultUrlPath = config.useDefaultUrlPath;\n+        urlPath = config.urlPath;\n+\n+        // If user and password are configured, then use Zoneminder authentication\n+        if (config.user != null && config.pass != null) {\n+            zmAuth = new ZmAuth(this, config.user, config.pass);\n+        }\n+        if (isHostValid()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            scheduleRefreshJob();\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+    }\n+\n+    @Override\n+    public void childHandlerInitialized(ThingHandler childHandler, Thing childThing) {\n+        String monitorId = (String) childThing.getConfiguration().get(CONFIG_MONITOR_ID);\n+        monitorHandlers.put(monitorId, (ZmMonitorHandler) childHandler);\n+        logger.debug(\"Bridge: Monitor handler was initialized for {} with id {}\", childThing.getUID(), monitorId);\n+    }\n+\n+    @Override\n+    public void childHandlerDisposed(ThingHandler childHandler, Thing childThing) {\n+        String monitorId = (String) childThing.getConfiguration().get(CONFIG_MONITOR_ID);\n+        monitorHandlers.remove(monitorId);\n+        logger.debug(\"Bridge: Monitor handler was disposed for {} with id {}\", childThing.getUID(), monitorId);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_IMAGE_MONITOR_ID:\n+                handleMonitorIdCommand(command, CHANNEL_IMAGE_MONITOR_ID, CHANNEL_IMAGE_URL, STREAM_IMAGE);\n+                break;\n+            case CHANNEL_VIDEO_MONITOR_ID:\n+                handleMonitorIdCommand(command, CHANNEL_VIDEO_MONITOR_ID, CHANNEL_VIDEO_URL, STREAM_VIDEO);\n+                break;\n+        }\n+    }\n+\n+    private void handleMonitorIdCommand(Command command, String monitorIdChannelId, String urlChannelId, String type) {\n+        if (command instanceof RefreshType || command == OnOffType.OFF) {\n+            updateState(monitorIdChannelId, UnDefType.UNDEF);\n+            updateState(urlChannelId, UnDefType.UNDEF);\n+        } else if (command instanceof StringType) {\n+            String id = command.toString();\n+            if (isMonitorIdValid(id)) {\n+                updateState(urlChannelId, new StringType(buildStreamUrl(id, type)));\n+            } else {\n+                updateState(monitorIdChannelId, UnDefType.UNDEF);\n+                updateState(urlChannelId, UnDefType.UNDEF);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(MonitorDiscoveryService.class);\n+    }\n+\n+    public void setDiscoveryService(MonitorDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public boolean isDiscoveryEnabled() {\n+        return discoveryEnabled;\n+    }\n+\n+    public Integer getDefaultAlarmDuration() {\n+        return defaultAlarmDuration;\n+    }\n+\n+    public @Nullable Integer getDefaultImageRefreshInterval() {\n+        return defaultImageRefreshInterval;\n+    }\n+\n+    public List<Monitor> getSavedMonitors() {\n+        return savedMonitors;\n+    }\n+\n+    public Gson getGson() {\n+        return GSON;\n+    }\n+\n+    public void setFunction(String id, MonitorFunction function) {\n+        if (!zmAuth.isAuthorized()) {\n+            return;\n+        }\n+        logger.debug(\"Bridge: Setting monitor {} function to {}\", id, function);\n+        executePost(buildUrl(String.format(\"/api/monitors/%s.json\", id)),\n+                String.format(\"Monitor[Function]=%s\", function.toString()));\n+    }\n+\n+    public void setEnabled(String id, OnOffType enabled) {\n+        if (!zmAuth.isAuthorized()) {\n+            return;\n+        }\n+        logger.debug(\"Bridge: Setting monitor {} to {}\", id, enabled);\n+        executePost(buildUrl(String.format(\"/api/monitors/%s.json\", id)),\n+                String.format(\"Monitor[Enabled]=%s\", enabled == OnOffType.ON ? \"1\" : \"0\"));\n+    }\n+\n+    public void setAlarmOn(String id) {\n+        if (!zmAuth.isAuthorized()) {\n+            return;\n+        }\n+        logger.debug(\"Bridge: Turning alarm ON for monitor {}\", id);\n+        setAlarm(buildUrl(String.format(\"/api/monitors/alarm/id:%s/command:on.json\", id)));\n+    }\n+\n+    public void setAlarmOff(String id) {\n+        if (!zmAuth.isAuthorized()) {\n+            return;\n+        }\n+        logger.debug(\"Bridge: Turning alarm OFF for monitor {}\", id);\n+        setAlarm(buildUrl(String.format(\"/api/monitors/alarm/id:%s/command:off.json\", id)));\n+    }\n+\n+    public @Nullable RawType getImage(String id, @Nullable Integer imageRefreshIntervalSeconds) {\n+        Integer localRefreshInterval = imageRefreshIntervalSeconds;\n+        if (localRefreshInterval == null || localRefreshInterval.intValue() < 1 || !zmAuth.isAuthorized()) {\n+            return null;\n+        }\n+        // Call should timeout just before the refresh interval\n+        int timeout = Math.min((localRefreshInterval * 1000) - 500, API_TIMEOUT_MSEC);\n+        Request request = httpClient.newRequest(buildStreamUrl(id, STREAM_IMAGE));\n+        request.method(HttpMethod.GET);\n+        request.timeout(timeout, TimeUnit.MILLISECONDS);\n+\n+        String errorMsg;\n+        try {\n+            ContentResponse response = request.send();\n+            if (response.getStatus() == HttpStatus.OK_200) {\n+                RawType image = new RawType(response.getContent(), response.getHeaders().get(HttpHeader.CONTENT_TYPE));\n+                return image;\n+            } else {\n+                errorMsg = String.format(\"HTTP GET failed: %d, %s\", response.getStatus(), response.getReason());\n+            }\n+        } catch (TimeoutException e) {\n+            errorMsg = String.format(\"TimeoutException: Call to Zoneminder API timed out after {} msec\", timeout);\n+        } catch (ExecutionException e) {\n+            errorMsg = String.format(\"ExecutionException: %s\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            errorMsg = String.format(\"InterruptedException: %s\", e.getMessage());\n+            Thread.currentThread().interrupt();\n+        }\n+        logger.debug(\"{}\", errorMsg);\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private synchronized List<Monitor> getMonitors() {\n+        List<Monitor> monitorList = new ArrayList<>();\n+        if (!zmAuth.isAuthorized()) {\n+            return monitorList;\n+        }\n+        try {\n+            String response = executeGet(buildUrl(\"/api/monitors.json\"));\n+            MonitorsDTO monitors = GSON.fromJson(response, MonitorsDTO.class);\n+            if (monitors != null && monitors.monitorItems != null) {\n+                List<StateOption> options = new ArrayList<>();\n+                for (MonitorItemDTO monitorItem : monitors.monitorItems) {\n+                    MonitorDTO m = monitorItem.monitor;\n+                    MonitorStatusDTO mStatus = monitorItem.monitorStatus;\n+                    if (m != null && mStatus != null) {\n+                        Monitor monitor = new Monitor(m.id, m.name, m.function, m.enabled, mStatus.status);\n+                        monitor.setHourEvents(m.hourEvents);\n+                        monitor.setDayEvents(m.dayEvents);\n+                        monitor.setWeekEvents(m.weekEvents);\n+                        monitor.setMonthEvents(m.monthEvents);\n+                        monitor.setTotalEvents(m.totalEvents);\n+                        monitor.setImageUrl(buildStreamUrl(m.id, STREAM_IMAGE));\n+                        monitor.setVideoUrl(buildStreamUrl(m.id, STREAM_VIDEO));\n+                        monitorList.add(monitor);\n+                        options.add(new StateOption(m.id, \"Monitor \" + m.id));\n+                    }\n+                    stateDescriptionProvider\n+                            .setStateOptions(new ChannelUID(getThing().getUID(), CHANNEL_IMAGE_MONITOR_ID), options);\n+                    stateDescriptionProvider\n+                            .setStateOptions(new ChannelUID(getThing().getUID(), CHANNEL_VIDEO_MONITOR_ID), options);\n+                }\n+                // Only update alarm and event info for monitors whose handlers are initialized\n+                Set<String> ids = monitorHandlers.keySet();\n+                for (Monitor m : monitorList) {\n+                    if (ids.contains(m.getId())) {\n+                        m.setState(getState(m.getId()));\n+                        m.setLastEvent(getLastEvent(m.getId()));\n+                    }\n+                }\n+            }\n+        } catch (JsonSyntaxException e) {\n+            logger.debug(\"Bridge: JsonSyntaxException: {}\", e.getMessage(), e);\n+        }\n+        return monitorList;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private @Nullable Event getLastEvent(String id) {\n+        if (!zmAuth.isAuthorized()) {\n+            return null;\n+        }\n+        try {\n+            List<String> parameters = new ArrayList<>();\n+            parameters.add(\"sort=StartTime\");\n+            parameters.add(\"direction=desc\");\n+            parameters.add(\"limit=1\");\n+            String response = executeGet(\n+                    buildUrlWithParameters(String.format(\"/api/events/index/MonitorId:%s.json\", id), parameters));\n+            EventsDTO events = GSON.fromJson(response, EventsDTO.class);\n+            if (events != null && events.eventsList != null && events.eventsList.size() == 1) {\n+                EventDTO e = events.eventsList.get(0).event;\n+                Event event = new Event(e.eventId, e.name, e.cause, e.notes, e.startTime, e.endTime);\n+                event.setFrames(e.frames);\n+                event.setAlarmFrames(e.alarmFrames);\n+                event.setLength(e.length);\n+                return event;\n+            }\n+        } catch (JsonSyntaxException e) {\n+            logger.debug(\"Bridge: JsonSyntaxException: {}\", e.getMessage(), e);\n+        }\n+        return null;\n+    }\n+\n+    private @Nullable VersionDTO getVersion() {\n+        if (!zmAuth.isAuthorized()) {\n+            return null;\n+        }\n+        VersionDTO version = null;\n+        try {\n+            String response = executeGet(buildUrl(\"/api/host/getVersion.json\"));\n+            version = GSON.fromJson(response, VersionDTO.class);\n+        } catch (JsonSyntaxException e) {\n+            logger.debug(\"Bridge: JsonSyntaxException: {}\", e.getMessage(), e);\n+        }\n+        return version;\n+    }\n+\n+    private void setAlarm(String url) {\n+        executeGet(url);\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private MonitorState getState(String id) {\n+        if (!zmAuth.isAuthorized()) {\n+            return MonitorState.UNKNOWN;\n+        }\n+        try {\n+            String response = executeGet(buildUrl(String.format(\"/api/monitors/alarm/id:%s/command:status.json\", id)));\n+            MonitorStateDTO monitorState = GSON.fromJson(response, MonitorStateDTO.class);\n+            if (monitorState != null) {\n+                MonitorState state = monitorState.state;\n+                return state != null ? state : MonitorState.UNKNOWN;\n+            }\n+        } catch (JsonSyntaxException e) {\n+            logger.debug(\"Bridge: JsonSyntaxException: {}\", e.getMessage(), e);\n+        }\n+        return MonitorState.UNKNOWN;\n+    }\n+\n+    public @Nullable String executeGet(String url) {\n+        try {\n+            long startTime = System.currentTimeMillis();\n+            String response = HttpUtil.executeUrl(\"GET\", url, API_TIMEOUT_MSEC);\n+            logger.trace(\"Bridge: Http GET of '{}' returned '{}' in {} ms\", url, response,\n+                    System.currentTimeMillis() - startTime);\n+            return response;\n+        } catch (IOException e) {\n+            logger.debug(\"Bridge: IOException on GET request, url='{}': {}\", url, e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    private @Nullable String executePost(String url, String content) {\n+        return executePost(url, content, \"application/x-www-form-urlencoded\");\n+    }\n+\n+    public @Nullable String executePost(String url, String content, String contentType) {\n+        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(content.getBytes())) {", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3NjMwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493676304", "bodyText": "Agreed. Done.", "author": "mhilbush", "createdAt": "2020-09-23T15:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMDk1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493000952", "bodyText": "refreshImage() is already called asynchronously, why does getImage() need to be asynchronous then?", "author": "cpmeister", "createdAt": "2020-09-22T20:04:43Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/internal/handler/ZmMonitorHandler.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.internal.handler;\n+\n+import static org.openhab.binding.zoneminder.internal.ZmBindingConstants.*;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.zoneminder.action.ZmActions;\n+import org.openhab.binding.zoneminder.internal.config.ZmMonitorConfig;\n+import org.openhab.core.i18n.TimeZoneProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.RawType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ZmMonitorHandler} represents a Zoneminder monitor. The monitor handler\n+ * interacts with the server bridge to communicate with the Zoneminder server.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZmMonitorHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ZmMonitorHandler.class);\n+\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ZmBridgeHandler bridgeHandler;\n+\n+    private @NonNullByDefault({}) String monitorId;\n+    private @Nullable Integer imageRefreshIntervalSeconds;\n+    private Integer alarmDuration = DEFAULT_ALARM_DURATION_SECONDS;\n+\n+    private @Nullable ScheduledFuture<?> imageRefreshJob;\n+    private @Nullable ScheduledFuture<?> alarmOffJob;\n+\n+    private final Map<String, State> monitorStatusCache = Collections.synchronizedMap(new HashMap<>());\n+\n+    public ZmMonitorHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ZmMonitorConfig config = getConfigAs(ZmMonitorConfig.class);\n+        monitorId = config.monitorId;\n+        imageRefreshIntervalSeconds = config.imageRefreshInterval;\n+        Integer value = config.alarmDuration;\n+        alarmDuration = value != null ? value : DEFAULT_ALARM_DURATION_SECONDS;\n+        bridgeHandler = (ZmBridgeHandler) getBridge().getHandler();\n+        monitorStatusCache.clear();\n+        updateStatus(ThingStatus.ONLINE);\n+        startImageRefreshJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        stopAlarmOffJob();\n+        turnAlarmOff();\n+        stopImageRefreshJob();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            State state = monitorStatusCache.get(channelUID.getId());\n+            if (state != null) {\n+                updateState(channelUID, state);\n+            }\n+            return;\n+        }\n+        logger.debug(\"Monitor {}: Received command '{}' for channel '{}'\", monitorId, command, channelUID.getId());\n+        ZmBridgeHandler localHandler = bridgeHandler;\n+        if (localHandler == null) {\n+            logger.info(\"Monitor {}: Can't execute command because bridge handler is null\", monitorId);\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_FUNCTION:\n+                if (command instanceof StringType) {\n+                    try {\n+                        MonitorFunction function = MonitorFunction.forValue(command.toString());\n+                        localHandler.setFunction(monitorId, function);\n+                        logger.debug(\"Monitor {}: Set monitor state to {}\", monitorId, function);\n+                    } catch (IllegalArgumentException e) {\n+                        logger.debug(\"Monitor {}: Invalid function: {}\", monitorId, command);\n+                    }\n+                }\n+                break;\n+            case CHANNEL_ENABLE:\n+                if (command instanceof OnOffType) {\n+                    localHandler.setEnabled(monitorId, (OnOffType) command);\n+                    logger.debug(\"Monitor {}: Set monitor enable to {}\", monitorId, command);\n+                }\n+                break;\n+            case CHANNEL_TRIGGER_ALARM:\n+                if (command instanceof OnOffType) {\n+                    logger.debug(\"Monitor {}: Set monitor alarm to {}\", monitorId, command);\n+                    if (command == OnOffType.ON) {\n+                        localHandler.setAlarmOn(monitorId);\n+                        startAlarmOffJob(alarmDuration.intValue());\n+                    } else {\n+                        stopAlarmOffJob();\n+                        localHandler.setAlarmOff(monitorId);\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(ZmActions.class);\n+    }\n+\n+    public String getId() {\n+        return monitorId;\n+    }\n+\n+    public void actionTriggerAlarm(@Nullable Number duration) {\n+        if (duration == null) {\n+            return;\n+        }\n+        ZmBridgeHandler localHandler = bridgeHandler;\n+        if (localHandler != null) {\n+            logger.debug(\"Monitor {}: Action tell bridge to turn on alarm\", monitorId);\n+            localHandler.setAlarmOn(monitorId);\n+            startAlarmOffJob(duration.intValue());\n+        }\n+    }\n+\n+    public void actionTriggerAlarm() {\n+        actionTriggerAlarm(alarmDuration);\n+    }\n+\n+    public void actionCancelAlarm() {\n+        ZmBridgeHandler localHandler = bridgeHandler;\n+        if (localHandler != null) {\n+            logger.debug(\"Monitor {}: Action tell bridge to turn off alarm\", monitorId);\n+            stopAlarmOffJob();\n+            localHandler.setAlarmOff(monitorId);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    public void updateStatus(Monitor m) {\n+        logger.debug(\"Monitor {}: Updating: {}\", m.getId(), m.toString());\n+        updateChannelState(CHANNEL_ID, new StringType(m.getId()));\n+        updateChannelState(CHANNEL_NAME, new StringType(m.getName()));\n+        updateChannelState(CHANNEL_FUNCTION, new StringType(m.getFunction()));\n+        updateChannelState(CHANNEL_ENABLE, m.isEnabled() ? OnOffType.ON : OnOffType.OFF);\n+        updateChannelState(CHANNEL_HOUR_EVENTS, new DecimalType(m.getHourEvents()));\n+        updateChannelState(CHANNEL_DAY_EVENTS, new DecimalType(m.getDayEvents()));\n+        updateChannelState(CHANNEL_WEEK_EVENTS, new DecimalType(m.getWeekEvents()));\n+        updateChannelState(CHANNEL_MONTH_EVENTS, new DecimalType(m.getMonthEvents()));\n+        updateChannelState(CHANNEL_TOTAL_EVENTS, new DecimalType(m.getTotalEvents()));\n+        updateChannelState(CHANNEL_IMAGE_URL, new StringType(m.getImageUrl()));\n+        updateChannelState(CHANNEL_VIDEO_URL, new StringType(m.getVideoUrl()));\n+        updateChannelState(CHANNEL_ALARM, m.isAlarm() ? OnOffType.ON : OnOffType.OFF);\n+        updateChannelState(CHANNEL_STATE, new StringType(m.getState().toString()));\n+        if (!m.isAlarm()) {\n+            updateChannelState(CHANNEL_TRIGGER_ALARM, m.isAlarm() ? OnOffType.ON : OnOffType.OFF);\n+        }\n+        Event event = m.getLastEvent();\n+        if (event == null) {\n+            clearEventChannels();\n+        } else if (event.getEnd() != null) {\n+            // If end is null, assume event hasn't completed yet\n+            logger.trace(\"Monitor {}: Id:{}, Frames:{}, AlarmFrames:{}, Length:{}\", m.getId(), event.getId(),\n+                    event.getFrames(), event.getAlarmFrames(), event.getLength());\n+            updateChannelState(CHANNEL_EVENT_ID, new StringType(event.getId()));\n+            updateChannelState(CHANNEL_EVENT_NAME, new StringType(event.getName()));\n+            updateChannelState(CHANNEL_EVENT_CAUSE, new StringType(event.getCause()));\n+            updateChannelState(CHANNEL_EVENT_NOTES, new StringType(event.getNotes()));\n+            updateChannelState(CHANNEL_EVENT_START, new DateTimeType(\n+                    ZonedDateTime.ofInstant(event.getStart().toInstant(), timeZoneProvider.getTimeZone())));\n+            updateChannelState(CHANNEL_EVENT_END, new DateTimeType(\n+                    ZonedDateTime.ofInstant(event.getEnd().toInstant(), timeZoneProvider.getTimeZone())));\n+            updateChannelState(CHANNEL_EVENT_FRAMES, new DecimalType(event.getFrames()));\n+            updateChannelState(CHANNEL_EVENT_ALARM_FRAMES, new DecimalType(event.getAlarmFrames()));\n+            updateChannelState(CHANNEL_EVENT_LENGTH, new QuantityType<Time>(event.getLength(), SmartHomeUnits.SECOND));\n+        }\n+    }\n+\n+    private void clearEventChannels() {\n+        updateChannelState(CHANNEL_EVENT_ID, UnDefType.NULL);\n+        updateChannelState(CHANNEL_EVENT_NAME, UnDefType.NULL);\n+        updateChannelState(CHANNEL_EVENT_CAUSE, UnDefType.NULL);\n+        updateChannelState(CHANNEL_EVENT_NOTES, UnDefType.NULL);\n+        updateChannelState(CHANNEL_EVENT_START, UnDefType.NULL);\n+        updateChannelState(CHANNEL_EVENT_END, UnDefType.NULL);\n+        updateChannelState(CHANNEL_EVENT_FRAMES, UnDefType.NULL);\n+        updateChannelState(CHANNEL_EVENT_ALARM_FRAMES, UnDefType.NULL);\n+        updateChannelState(CHANNEL_EVENT_LENGTH, UnDefType.NULL);\n+    }\n+\n+    private void refreshImage() {\n+        if (isLinked(CHANNEL_IMAGE)) {\n+            scheduler.execute(this::getImage);", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1Nzg1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493657852", "bodyText": "My original thinking was that I didn't want refreshImage to block waiting for the image. But, I can't think of a reason why that would be necessary. I've removed it.", "author": "mhilbush", "createdAt": "2020-09-23T14:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMDk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjUwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493002502", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, State> monitorStatusCache = Collections.synchronizedMap(new HashMap<>());\n          \n          \n            \n                private final Map<String, State> monitorStatusCache = new ConcurrentHashMap<>();", "author": "cpmeister", "createdAt": "2020-09-22T20:07:46Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/internal/handler/ZmMonitorHandler.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.internal.handler;\n+\n+import static org.openhab.binding.zoneminder.internal.ZmBindingConstants.*;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.zoneminder.action.ZmActions;\n+import org.openhab.binding.zoneminder.internal.config.ZmMonitorConfig;\n+import org.openhab.core.i18n.TimeZoneProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.RawType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ZmMonitorHandler} represents a Zoneminder monitor. The monitor handler\n+ * interacts with the server bridge to communicate with the Zoneminder server.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZmMonitorHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ZmMonitorHandler.class);\n+\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ZmBridgeHandler bridgeHandler;\n+\n+    private @NonNullByDefault({}) String monitorId;\n+    private @Nullable Integer imageRefreshIntervalSeconds;\n+    private Integer alarmDuration = DEFAULT_ALARM_DURATION_SECONDS;\n+\n+    private @Nullable ScheduledFuture<?> imageRefreshJob;\n+    private @Nullable ScheduledFuture<?> alarmOffJob;\n+\n+    private final Map<String, State> monitorStatusCache = Collections.synchronizedMap(new HashMap<>());", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwODM1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493608359", "bodyText": "Done", "author": "mhilbush", "createdAt": "2020-09-23T13:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNDEzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493004135", "bodyText": "If it isn't required what is the default value?\nAlso shouldn't this have a minimum value?", "author": "cpmeister", "createdAt": "2020-09-22T20:10:55Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,91 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:zoneminder:server\">\n+\t\t<parameter-group name=\"url-info\">\n+\t\t\t<label>ZoneMinder URL Information</label>\n+\t\t</parameter-group>\n+\t\t<parameter-group name=\"config-info\">\n+\t\t\t<label>Bridge Configuration</label>\n+\t\t</parameter-group>\n+\t\t<parameter-group name=\"auth-info\">\n+\t\t\t<label>Authentication Information</label>\n+\t\t</parameter-group>\n+\t\t<parameter name=\"refreshInterval\" type=\"integer\" min=\"2\" required=\"false\" unit=\"s\" groupName=\"config-info\">\n+\t\t\t<label>Refresh Interval (Normal)</label>\n+\t\t\t<description>Interval in seconds at which monitor status is updated</description>\n+\t\t\t<default>5</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"discoveryEnabled\" type=\"boolean\" required=\"false\" groupName=\"config-info\">\n+\t\t\t<label>Discovery Enabled</label>\n+\t\t\t<description>Enable/disable automatic discovery</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"discoveryInterval\" type=\"integer\" min=\"60\" required=\"false\" unit=\"s\"\n+\t\t\tgroupName=\"config-info\">\n+\t\t\t<label>Monitor Discovery Interval</label>\n+\t\t\t<description>Specifies time in seconds in which the binding will attempt to discover monitors</description>\n+\t\t\t<default>300</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"defaultAlarmDuration\" type=\"integer\" unit=\"s\" required=\"false\" groupName=\"config-info\">\n+\t\t\t<label>Default Alarm Duration</label>\n+\t\t\t<description>Duration in seconds after which the alarm will be turned off</description>\n+\t\t\t<default>60</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"defaultImageRefreshInterval\" type=\"integer\" required=\"false\" groupName=\"config-info\">\n+\t\t\t<label>Default Image Refresh Interval</label>\n+\t\t\t<description>Interval in seconds at which monitor image snapshot will be updated</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"host\" type=\"text\" required=\"true\" groupName=\"url-info\">\n+\t\t\t<label>Server</label>\n+\t\t\t<description>ZoneMinder server name or IP address</description>\n+\t\t\t<context>network-address</context>\n+\t\t</parameter>\n+\t\t<parameter name=\"useSSL\" type=\"boolean\" required=\"true\" groupName=\"url-info\">\n+\t\t\t<label>Use https</label>\n+\t\t\t<description>Enables use of https for connection to ZoneMinder</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"portNumber\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\" groupName=\"url-info\">\n+\t\t\t<label>Port Number</label>\n+\t\t\t<description>Port Number</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"useDefaultUrlPath\" type=\"boolean\" required=\"false\" groupName=\"url-info\">\n+\t\t\t<label>Use Default URL Path</label>\n+\t\t\t<description>Use standard URL path (i.e. /zm)</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"urlPath\" type=\"text\" required=\"false\" groupName=\"url-info\">\n+\t\t\t<label>URL Path</label>\n+\t\t\t<description>URL path (Used if ZoneMinder URL starts with something other than /zm)</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"user\" type=\"text\" required=\"false\" groupName=\"auth-info\">\n+\t\t\t<label>User Name</label>\n+\t\t\t<description>User name (if authentication enabled in ZoneMinder)</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"pass\" type=\"text\" required=\"false\" groupName=\"auth-info\">\n+\t\t\t<label>Password</label>\n+\t\t\t<description>Password (if authentication enabled in ZoneMinder)</description>\n+\t\t\t<context>password</context>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:zoneminder:monitor\">\n+\t\t<parameter name=\"monitorId\" type=\"text\" required=\"true\">\n+\t\t\t<label>Monitor Id</label>\n+\t\t\t<description>Id of the monitor</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"imageRefreshInterval\" type=\"integer\" unit=\"s\" required=\"false\">\n+\t\t\t<label>Image Refresh Interval</label>\n+\t\t\t<description>Interval in seconds with which monitor image is refreshed</description>\n+\t\t</parameter>", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMTMwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493611305", "bodyText": "No, the default is to not refresh the image, in which case you leave the field blank.\nYes, I'll add a minimum.", "author": "mhilbush", "createdAt": "2020-09-23T13:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNDEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNTE3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493005176", "bodyText": "I'm not sure that you can have fractional frames.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<state readOnly=\"true\" pattern=\"%.0f\"></state>\n          \n          \n            \n            \t\t<state readOnly=\"true\" pattern=\"%d\"></state>", "author": "cpmeister", "createdAt": "2020-09-22T20:12:54Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"zoneminder\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<bridge-type id=\"server\">\n+\t\t<label>ZoneMinder Server</label>\n+\t\t<description>Represents a ZoneMinder server</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"imageMonitorId\" typeId=\"id\">\n+\t\t\t\t<label>Image Monitor Id</label>\n+\t\t\t\t<description>Monitor ID for Image URL Channel</description>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"imageUrl\" typeId=\"url\">\n+\t\t\t\t<label>Image URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoMonitorId\" typeId=\"id\">\n+\t\t\t\t<label>Video Monitor Id</label>\n+\t\t\t\t<description>Monitor ID for Video URL Channel</description>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoUrl\" typeId=\"url\">\n+\t\t\t\t<label>Video URL</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description-ref uri=\"thing-type:zoneminder:server\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"monitor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"server\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>ZoneMinder Monitor</label>\n+\t\t<description>Represents a ZoneMinder monitor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"id\" typeId=\"id\"/>\n+\t\t\t<channel id=\"name\" typeId=\"name\"/>\n+\t\t\t<channel id=\"image\" typeId=\"image\"/>\n+\t\t\t<channel id=\"enable\" typeId=\"enable\"/>\n+\t\t\t<channel id=\"function\" typeId=\"function\"/>\n+\t\t\t<channel id=\"alarm\" typeId=\"alarm\"/>\n+\t\t\t<channel id=\"state\" typeId=\"state\"/>\n+\t\t\t<channel id=\"triggerAlarm\" typeId=\"triggerAlarm\"/>\n+\t\t\t<channel id=\"hourEvents\" typeId=\"events\">\n+\t\t\t\t<label>Hour Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"dayEvents\" typeId=\"events\">\n+\t\t\t\t<label>Day Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"weekEvents\" typeId=\"events\">\n+\t\t\t\t<label>Week Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"monthEvents\" typeId=\"events\">\n+\t\t\t\t<label>Month Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"totalEvents\" typeId=\"events\">\n+\t\t\t\t<label>Total Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"imageUrl\" typeId=\"url\">\n+\t\t\t\t<label>Image URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoUrl\" typeId=\"url\">\n+\t\t\t\t<label>Video URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"eventId\" typeId=\"eventId\"/>\n+\t\t\t<channel id=\"eventName\" typeId=\"eventName\"/>\n+\t\t\t<channel id=\"eventCause\" typeId=\"eventCause\"/>\n+\t\t\t<channel id=\"eventNotes\" typeId=\"eventNotes\"/>\n+\t\t\t<channel id=\"eventStart\" typeId=\"eventStart\"/>\n+\t\t\t<channel id=\"eventEnd\" typeId=\"eventEnd\"/>\n+\t\t\t<channel id=\"eventFrames\" typeId=\"eventFrames\"/>\n+\t\t\t<channel id=\"eventAlarmFrames\" typeId=\"eventAlarmFrames\"/>\n+\t\t\t<channel id=\"eventLength\" typeId=\"eventLength\"/>\n+\t\t</channels>\n+\t\t<config-description-ref uri=\"thing-type:zoneminder:monitor\"/>\n+\t</thing-type>\n+\n+\t<channel-type id=\"id\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>ID</label>\n+\t\t<description>Monitor ID</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"name\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Name</label>\n+\t\t<description>Monitor name</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"image\">\n+\t\t<item-type>Image</item-type>\n+\t\t<label>Image</label>\n+\t\t<description>A single snapshot image</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"enable\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Enabled</label>\n+\t\t<description>Enable or disable monitor</description>\n+\t\t<state pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"ON\">Enable</option>\n+\t\t\t\t<option value=\"OFF\">Disable</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"function\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Function</label>\n+\t\t<description>State of the monitor (e.g. Nodect, Record)</description>\n+\t\t<state pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"None\">None</option>\n+\t\t\t\t<option value=\"Monitor\">Monitor</option>\n+\t\t\t\t<option value=\"Modect\">Modect</option>\n+\t\t\t\t<option value=\"Record\">Record</option>\n+\t\t\t\t<option value=\"Mocord\">Mocord</option>\n+\t\t\t\t<option value=\"Nodect\">Nodect</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"alarm\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Alarm</label>\n+\t\t<description>Monitor alarm status</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"state\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>State</label>\n+\t\t<description>Current monitor state</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"UNKNOWN\">UNKNOWN</option>\n+\t\t\t\t<option value=\"IDLE\">IDLE</option>\n+\t\t\t\t<option value=\"PREALARM\">PREALARM</option>\n+\t\t\t\t<option value=\"ALARM\">ALARM</option>\n+\t\t\t\t<option value=\"ALERT\">ALERT</option>\n+\t\t\t\t<option value=\"TAPE\">TAPE</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"triggerAlarm\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Trigger Alarm</label>\n+\t\t<description>Triggers an alarm</description>\n+\t\t<state pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"events\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Number of Events</label>\n+\t\t<description>Number of events in time period</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"url\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>URL</label>\n+\t\t<description>URL of image or stream</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventId\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Event Id</label>\n+\t\t<description>Id of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Event Name</label>\n+\t\t<description>Name of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventCause\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Event Cause</label>\n+\t\t<description>Cause of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventNotes\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Event Notes</label>\n+\t\t<description>Notes for the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventStart\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Event Start</label>\n+\t\t<description>Start date/time of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventEnd\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Event End</label>\n+\t\t<description>End date/time of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventFrames\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Event Frames</label>\n+\t\t<description>Number of frames in the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f\"></state>", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjQ5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493612491", "bodyText": "Correct. Fixed.", "author": "mhilbush", "createdAt": "2020-09-23T13:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNTE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNTQzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493005435", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<state readOnly=\"true\" pattern=\"%.0f\"></state>\n          \n          \n            \n            \t\t<state readOnly=\"true\" pattern=\"%d\"></state>", "author": "cpmeister", "createdAt": "2020-09-22T20:13:26Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"zoneminder\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<bridge-type id=\"server\">\n+\t\t<label>ZoneMinder Server</label>\n+\t\t<description>Represents a ZoneMinder server</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"imageMonitorId\" typeId=\"id\">\n+\t\t\t\t<label>Image Monitor Id</label>\n+\t\t\t\t<description>Monitor ID for Image URL Channel</description>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"imageUrl\" typeId=\"url\">\n+\t\t\t\t<label>Image URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoMonitorId\" typeId=\"id\">\n+\t\t\t\t<label>Video Monitor Id</label>\n+\t\t\t\t<description>Monitor ID for Video URL Channel</description>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoUrl\" typeId=\"url\">\n+\t\t\t\t<label>Video URL</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description-ref uri=\"thing-type:zoneminder:server\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"monitor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"server\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>ZoneMinder Monitor</label>\n+\t\t<description>Represents a ZoneMinder monitor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"id\" typeId=\"id\"/>\n+\t\t\t<channel id=\"name\" typeId=\"name\"/>\n+\t\t\t<channel id=\"image\" typeId=\"image\"/>\n+\t\t\t<channel id=\"enable\" typeId=\"enable\"/>\n+\t\t\t<channel id=\"function\" typeId=\"function\"/>\n+\t\t\t<channel id=\"alarm\" typeId=\"alarm\"/>\n+\t\t\t<channel id=\"state\" typeId=\"state\"/>\n+\t\t\t<channel id=\"triggerAlarm\" typeId=\"triggerAlarm\"/>\n+\t\t\t<channel id=\"hourEvents\" typeId=\"events\">\n+\t\t\t\t<label>Hour Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"dayEvents\" typeId=\"events\">\n+\t\t\t\t<label>Day Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"weekEvents\" typeId=\"events\">\n+\t\t\t\t<label>Week Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"monthEvents\" typeId=\"events\">\n+\t\t\t\t<label>Month Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"totalEvents\" typeId=\"events\">\n+\t\t\t\t<label>Total Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"imageUrl\" typeId=\"url\">\n+\t\t\t\t<label>Image URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoUrl\" typeId=\"url\">\n+\t\t\t\t<label>Video URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"eventId\" typeId=\"eventId\"/>\n+\t\t\t<channel id=\"eventName\" typeId=\"eventName\"/>\n+\t\t\t<channel id=\"eventCause\" typeId=\"eventCause\"/>\n+\t\t\t<channel id=\"eventNotes\" typeId=\"eventNotes\"/>\n+\t\t\t<channel id=\"eventStart\" typeId=\"eventStart\"/>\n+\t\t\t<channel id=\"eventEnd\" typeId=\"eventEnd\"/>\n+\t\t\t<channel id=\"eventFrames\" typeId=\"eventFrames\"/>\n+\t\t\t<channel id=\"eventAlarmFrames\" typeId=\"eventAlarmFrames\"/>\n+\t\t\t<channel id=\"eventLength\" typeId=\"eventLength\"/>\n+\t\t</channels>\n+\t\t<config-description-ref uri=\"thing-type:zoneminder:monitor\"/>\n+\t</thing-type>\n+\n+\t<channel-type id=\"id\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>ID</label>\n+\t\t<description>Monitor ID</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"name\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Name</label>\n+\t\t<description>Monitor name</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"image\">\n+\t\t<item-type>Image</item-type>\n+\t\t<label>Image</label>\n+\t\t<description>A single snapshot image</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"enable\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Enabled</label>\n+\t\t<description>Enable or disable monitor</description>\n+\t\t<state pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"ON\">Enable</option>\n+\t\t\t\t<option value=\"OFF\">Disable</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"function\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Function</label>\n+\t\t<description>State of the monitor (e.g. Nodect, Record)</description>\n+\t\t<state pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"None\">None</option>\n+\t\t\t\t<option value=\"Monitor\">Monitor</option>\n+\t\t\t\t<option value=\"Modect\">Modect</option>\n+\t\t\t\t<option value=\"Record\">Record</option>\n+\t\t\t\t<option value=\"Mocord\">Mocord</option>\n+\t\t\t\t<option value=\"Nodect\">Nodect</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"alarm\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Alarm</label>\n+\t\t<description>Monitor alarm status</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"state\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>State</label>\n+\t\t<description>Current monitor state</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"UNKNOWN\">UNKNOWN</option>\n+\t\t\t\t<option value=\"IDLE\">IDLE</option>\n+\t\t\t\t<option value=\"PREALARM\">PREALARM</option>\n+\t\t\t\t<option value=\"ALARM\">ALARM</option>\n+\t\t\t\t<option value=\"ALERT\">ALERT</option>\n+\t\t\t\t<option value=\"TAPE\">TAPE</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"triggerAlarm\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Trigger Alarm</label>\n+\t\t<description>Triggers an alarm</description>\n+\t\t<state pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"events\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Number of Events</label>\n+\t\t<description>Number of events in time period</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"url\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>URL</label>\n+\t\t<description>URL of image or stream</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventId\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Event Id</label>\n+\t\t<description>Id of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Event Name</label>\n+\t\t<description>Name of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventCause\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Event Cause</label>\n+\t\t<description>Cause of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventNotes\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Event Notes</label>\n+\t\t<description>Notes for the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventStart\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Event Start</label>\n+\t\t<description>Start date/time of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventEnd\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Event End</label>\n+\t\t<description>End date/time of the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventFrames\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Event Frames</label>\n+\t\t<description>Number of frames in the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eventAlarmFrames\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Event Alarm Frames</label>\n+\t\t<description>Number of alarm frames in the event</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f\"></state>", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493612672", "bodyText": "Fixed", "author": "mhilbush", "createdAt": "2020-09-23T13:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNTQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjkwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493006909", "bodyText": "Should this be a thing property instead?", "author": "cpmeister", "createdAt": "2020-09-22T20:16:21Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"zoneminder\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<bridge-type id=\"server\">\n+\t\t<label>ZoneMinder Server</label>\n+\t\t<description>Represents a ZoneMinder server</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"imageMonitorId\" typeId=\"id\">\n+\t\t\t\t<label>Image Monitor Id</label>\n+\t\t\t\t<description>Monitor ID for Image URL Channel</description>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"imageUrl\" typeId=\"url\">\n+\t\t\t\t<label>Image URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoMonitorId\" typeId=\"id\">\n+\t\t\t\t<label>Video Monitor Id</label>\n+\t\t\t\t<description>Monitor ID for Video URL Channel</description>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoUrl\" typeId=\"url\">\n+\t\t\t\t<label>Video URL</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description-ref uri=\"thing-type:zoneminder:server\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"monitor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"server\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>ZoneMinder Monitor</label>\n+\t\t<description>Represents a ZoneMinder monitor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"id\" typeId=\"id\"/>\n+\t\t\t<channel id=\"name\" typeId=\"name\"/>\n+\t\t\t<channel id=\"image\" typeId=\"image\"/>\n+\t\t\t<channel id=\"enable\" typeId=\"enable\"/>\n+\t\t\t<channel id=\"function\" typeId=\"function\"/>\n+\t\t\t<channel id=\"alarm\" typeId=\"alarm\"/>\n+\t\t\t<channel id=\"state\" typeId=\"state\"/>\n+\t\t\t<channel id=\"triggerAlarm\" typeId=\"triggerAlarm\"/>\n+\t\t\t<channel id=\"hourEvents\" typeId=\"events\">\n+\t\t\t\t<label>Hour Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"dayEvents\" typeId=\"events\">\n+\t\t\t\t<label>Day Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"weekEvents\" typeId=\"events\">\n+\t\t\t\t<label>Week Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"monthEvents\" typeId=\"events\">\n+\t\t\t\t<label>Month Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"totalEvents\" typeId=\"events\">\n+\t\t\t\t<label>Total Events</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"imageUrl\" typeId=\"url\">\n+\t\t\t\t<label>Image URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"videoUrl\" typeId=\"url\">\n+\t\t\t\t<label>Video URL</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"eventId\" typeId=\"eventId\"/>\n+\t\t\t<channel id=\"eventName\" typeId=\"eventName\"/>\n+\t\t\t<channel id=\"eventCause\" typeId=\"eventCause\"/>\n+\t\t\t<channel id=\"eventNotes\" typeId=\"eventNotes\"/>\n+\t\t\t<channel id=\"eventStart\" typeId=\"eventStart\"/>\n+\t\t\t<channel id=\"eventEnd\" typeId=\"eventEnd\"/>\n+\t\t\t<channel id=\"eventFrames\" typeId=\"eventFrames\"/>\n+\t\t\t<channel id=\"eventAlarmFrames\" typeId=\"eventAlarmFrames\"/>\n+\t\t\t<channel id=\"eventLength\" typeId=\"eventLength\"/>\n+\t\t</channels>\n+\t\t<config-description-ref uri=\"thing-type:zoneminder:monitor\"/>\n+\t</thing-type>\n+\n+\t<channel-type id=\"id\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>ID</label>\n+\t\t<description>Monitor ID</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"></state>\n+\t</channel-type>", "originalCommit": "48db60bb58bef52a99bb3a444ddc4de9e7528ea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxNTU0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493615549", "bodyText": "If you change the monitor id in Zoneminder, you should be able to change it here as well. Otherwise, you would need to delete and readd the thing.", "author": "mhilbush", "createdAt": "2020-09-23T13:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjA3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r498916072", "bodyText": "How would a user do this, as it is read only? Isn't this a configuration parameter, either?\nEDIT: Please see the discussion at this location with Connor for the context.", "author": "fwolter", "createdAt": "2020-10-02T16:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5OTk3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500299971", "bodyText": "Thank you for making me rethink this. I'll try to clarify, then we can figure out what to do.\n\n\nThe above channel contains the monitor id returned by the Zoneminder API. I made it a channel because the user likely will want to include the monitor id in their sitemap or HABpanel UI. As the monitor id is returned by the Zoneminder API, and cannot be changed by the user, I believe it should be readonly.\n\n\nAs for the config parameter, when creating a monitor thing manually, or using a .things file, the user needs to specify the monitor id as part of defining the thing. When the monitor thing is created through discovery, it is set by the binding. Also, the monitor id the representation property.\n\n\nSo, what to do? I'm not sure how to resolve this without impacting one of the two points above. WDYT?", "author": "mhilbush", "createdAt": "2020-10-06T13:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NTEyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500395129", "bodyText": "Your arguments are valid. If I see correctly, the State of the Channel id is updated if the user changes the config parameter monitorId. I think it's good to go.", "author": "fwolter", "createdAt": "2020-10-06T15:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMDg4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500420887", "bodyText": "Perfect. Thanks!", "author": "mhilbush", "createdAt": "2020-10-06T16:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NzQyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493757429", "bodyText": "The config xml specifies that these are not required.", "author": "cpmeister", "createdAt": "2020-09-23T17:14:40Z", "path": "bundles/org.openhab.binding.zoneminder/README.md", "diffHunk": "@@ -1,184 +1,277 @@\n-# Zoneminder Binding\n+# ZoneMinder Binding\n \n-This binding offers integration to a ZoneMinder Server. It currently only offers to integrate to monitors (eg. cameras in ZoneMinder).\n-It also only offers access to a limited set of values, as well as an even more limited option to update values in ZoneMinder.\n-It requires at least ZoneMinder 1.29 with API enabled (option 'OPT_USE_API' in ZoneMinder must be enabled).\n-The option 'OPT_TRIGGERS' must be anabled to allow openHAB to trip the ForceAlarm in ZoneMinder.\n+Supports the ZoneMinder video surveillance system.\n \n ## Supported Things\n \n-This binding supports the following thing types\n+The following thing types are supported:\n \n-<table>\n-<tr><td><b>Thing</b></td><td><b>Thing Type</b></td><td><b>Discovery</b></td><td><b>Description</b></td></tr>\n-<tr><td>ZoneMinder Server</td><td>Bridge</td><td>Manual</td><td>A ZoneMinder Server. Required version is minimum 1.29</td></tr>\n-<tr><td>ZoneMinder Monitor</td><td>Thing</td><td>Automatic</td><td>Monitor as defined in ZoneMinder Server</td></tr>\n-</table>\n+| Thing    | ID       | Discovery | Description |\n+|----------|----------|-----------|-------------|\n+| Server   | server   | Manual    | Server bridge manages all communication with ZoneMinder server |\n+| Monitor  | monitor  | Automatic | Monitor represents a ZoneMinder camera monitor |\n \n-## Getting started /  Discovery\n+## Installation\n \n-The binding consists of a Bridge (the ZoneMinder Server it self), and a number of Things, which relates to the induvidual monitors in ZoneMinder.\n-ZoneMinder things can be configured either through the online configuration utility via discovery, or manually through the 'zoneminder.things' configuration file.\n-The Bridge will not be autodiscovered, this behavior is by design.\n-That is because the ZoneMinder API can be configured to communicate on custom ports, you can even change the url from the default /zm/ to something userdefined.\n-That makes it meaningless to scan for a ZoneMinder Server.\n-The Bridge must therefore be added manually, this can be done from Paper UI.\n-After adding the Bridge it will go ONLINE, and after a short while and the discovery process for monitors will start.\n-When a new monitor is discovered it will appear in the Inbox.\n+The binding requires ZoneMinder version 1.34.0 or greater and API version 2.0 or greater.\n+It also requires that you enable the **OPT_USE_API** parameter in the ZoneMinder configuration.\n \n-### Bridge\n+If your ZoneMinder is installed using a non-standard URL path or port number, that must be specified when you add the ZoneMinder server thing.\n \n-| Channel    | Type   | Description                                  |\n-|------------|--------|----------------------------------------------|\n-| online     | Switch | Parameter indicating if the server is online |\n-| CPU load   | Text   | Current CPU Load of server                   |\n-| Disk Usage | text   | Current Disk Usage on server                 |\n+There are two different styles of operation, depending on whether or not you have ZoneMinder configured to use authentication.\n \n-### Thing\n+### Non-Authenticated\n \n-| Channel         | Type   | Description                                                                                |\n-|-----------------|--------|--------------------------------------------------------------------------------------------|\n-| online          | Switch | Parameter indicating if the monitor is online                                              |\n-| enabled         | Switch | Parameter indicating if the monitor is enabled                                             |\n-| force-alarm     | Switch | Parameter indicating if Force Alarm for the the monitor is active                          |\n-| alarm           | Switch | true if monitor has an active alarm                                                        |\n-| recording       | Text   | true if monitor is recording                                                               |\n-| detailed-status | Text   | Detailed status of monitor (Idle, Pre-alarm, Alarm, Alert, Recording)                      |\n-| event-cause     | Text   | Empty when there is no active event, else it contains the text with the cause of the event |\n-| function        | Text   | Text corresponding the value in ZoneMinder: None, Monitor, Modect, Record, Mocord, Nodect  |\n-| capture-daemon  | Switch | Run state of ZMC Daemon                                                                    |\n-| analysis-daemon | Switch | Run state of ZMA Daemon                                                                    |\n-| frame-daemon    | Switch | Run state of ZMF Daemon                                                                    |\n+If ZoneMinder authentication is not used, the User and Password parameters should be empty in the *ZoneMinder Server* thing configuration.\n+No other configuration is required.\n \n-## Manual configuration\n+### Authenticated\n \n-### Things configuration\n+If ZoneMinder authentication is used, first make sure the ZoneMinder user has the **API Enabled** permission set in the ZoneMinder Users configuration.\n+Then, enter the user name and password into the ZoneMinder Server thing configuration.\n \n+## Discovery\n+\n+The server bridge must be added manually.\n+Once the server bridge is configured with a valid ZoneMinder host name or IP address, \n+all monitors associated with the ZoneMinder server will be discovered.\n+\n+## Thing Configuration\n+\n+### Server Thing\n+\n+The following configuration parameters are available on the Server thing:\n+\n+| Parameter | Parameter ID | Required/Optional | Description |\n+|-----------|--------------|-------------------|-------------|\n+| Host                           | host                        | Required  | Host name or IP address of the ZoneMinder server. |\n+| Use secure connection          | useSSL                      | Required  | Use http or https for connection to ZoneMinder. Default is http. |\n+| Port Number                    | portNumber                  | Optional  | Port number if not on ZoneMinder default port 80. |\n+| Use Default Url Path           | useDefaultUrlPath           | Required  | If ON, use ZoneMinder default of /zm; if OFF, use value from urlPath parameter. |\n+| Url Path                       | urlPath                     | Optional  | Use this parameter when not using the ZoneMinder default path of /zm. |\n+| Refresh Interval               | refreshInterval             | Required  | Frequency at which monitor status will be updated. |\n+| Default Alarm Duration         | defaultAlarmDuration        | Required  | Can be used to set the default alarm duration on discovered monitors. |\n+| Default Image Refresh Interval | defaultImageRefreshInterval | Optional  | Can be used to set the image refresh interval on discovered monitors. Leave empty to not set an image refresh interval. |\n+| Monitor Discovery Enabled      | discoveryEnabled            | Required  | Enable/disable the automatic discovery of monitors. Default is enabled. |\n+| Monitor Discovery Interval     | discoveryInterval           | Required  | Frequency at which the binding will try to discover monitors. |", "originalCommit": "2e02b60df992e5a69bf356a69b4cbb7d03317aa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5ODEwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493798106", "bodyText": "Fixed", "author": "mhilbush", "createdAt": "2020-09-23T18:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NzQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1ODUwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493758502", "bodyText": "This one too", "author": "cpmeister", "createdAt": "2020-09-23T17:16:21Z", "path": "bundles/org.openhab.binding.zoneminder/README.md", "diffHunk": "@@ -1,184 +1,277 @@\n-# Zoneminder Binding\n+# ZoneMinder Binding\n \n-This binding offers integration to a ZoneMinder Server. It currently only offers to integrate to monitors (eg. cameras in ZoneMinder).\n-It also only offers access to a limited set of values, as well as an even more limited option to update values in ZoneMinder.\n-It requires at least ZoneMinder 1.29 with API enabled (option 'OPT_USE_API' in ZoneMinder must be enabled).\n-The option 'OPT_TRIGGERS' must be anabled to allow openHAB to trip the ForceAlarm in ZoneMinder.\n+Supports the ZoneMinder video surveillance system.\n \n ## Supported Things\n \n-This binding supports the following thing types\n+The following thing types are supported:\n \n-<table>\n-<tr><td><b>Thing</b></td><td><b>Thing Type</b></td><td><b>Discovery</b></td><td><b>Description</b></td></tr>\n-<tr><td>ZoneMinder Server</td><td>Bridge</td><td>Manual</td><td>A ZoneMinder Server. Required version is minimum 1.29</td></tr>\n-<tr><td>ZoneMinder Monitor</td><td>Thing</td><td>Automatic</td><td>Monitor as defined in ZoneMinder Server</td></tr>\n-</table>\n+| Thing    | ID       | Discovery | Description |\n+|----------|----------|-----------|-------------|\n+| Server   | server   | Manual    | Server bridge manages all communication with ZoneMinder server |\n+| Monitor  | monitor  | Automatic | Monitor represents a ZoneMinder camera monitor |\n \n-## Getting started /  Discovery\n+## Installation\n \n-The binding consists of a Bridge (the ZoneMinder Server it self), and a number of Things, which relates to the induvidual monitors in ZoneMinder.\n-ZoneMinder things can be configured either through the online configuration utility via discovery, or manually through the 'zoneminder.things' configuration file.\n-The Bridge will not be autodiscovered, this behavior is by design.\n-That is because the ZoneMinder API can be configured to communicate on custom ports, you can even change the url from the default /zm/ to something userdefined.\n-That makes it meaningless to scan for a ZoneMinder Server.\n-The Bridge must therefore be added manually, this can be done from Paper UI.\n-After adding the Bridge it will go ONLINE, and after a short while and the discovery process for monitors will start.\n-When a new monitor is discovered it will appear in the Inbox.\n+The binding requires ZoneMinder version 1.34.0 or greater and API version 2.0 or greater.\n+It also requires that you enable the **OPT_USE_API** parameter in the ZoneMinder configuration.\n \n-### Bridge\n+If your ZoneMinder is installed using a non-standard URL path or port number, that must be specified when you add the ZoneMinder server thing.\n \n-| Channel    | Type   | Description                                  |\n-|------------|--------|----------------------------------------------|\n-| online     | Switch | Parameter indicating if the server is online |\n-| CPU load   | Text   | Current CPU Load of server                   |\n-| Disk Usage | text   | Current Disk Usage on server                 |\n+There are two different styles of operation, depending on whether or not you have ZoneMinder configured to use authentication.\n \n-### Thing\n+### Non-Authenticated\n \n-| Channel         | Type   | Description                                                                                |\n-|-----------------|--------|--------------------------------------------------------------------------------------------|\n-| online          | Switch | Parameter indicating if the monitor is online                                              |\n-| enabled         | Switch | Parameter indicating if the monitor is enabled                                             |\n-| force-alarm     | Switch | Parameter indicating if Force Alarm for the the monitor is active                          |\n-| alarm           | Switch | true if monitor has an active alarm                                                        |\n-| recording       | Text   | true if monitor is recording                                                               |\n-| detailed-status | Text   | Detailed status of monitor (Idle, Pre-alarm, Alarm, Alert, Recording)                      |\n-| event-cause     | Text   | Empty when there is no active event, else it contains the text with the cause of the event |\n-| function        | Text   | Text corresponding the value in ZoneMinder: None, Monitor, Modect, Record, Mocord, Nodect  |\n-| capture-daemon  | Switch | Run state of ZMC Daemon                                                                    |\n-| analysis-daemon | Switch | Run state of ZMA Daemon                                                                    |\n-| frame-daemon    | Switch | Run state of ZMF Daemon                                                                    |\n+If ZoneMinder authentication is not used, the User and Password parameters should be empty in the *ZoneMinder Server* thing configuration.\n+No other configuration is required.\n \n-## Manual configuration\n+### Authenticated\n \n-### Things configuration\n+If ZoneMinder authentication is used, first make sure the ZoneMinder user has the **API Enabled** permission set in the ZoneMinder Users configuration.\n+Then, enter the user name and password into the ZoneMinder Server thing configuration.\n \n+## Discovery\n+\n+The server bridge must be added manually.\n+Once the server bridge is configured with a valid ZoneMinder host name or IP address, \n+all monitors associated with the ZoneMinder server will be discovered.\n+\n+## Thing Configuration\n+\n+### Server Thing\n+\n+The following configuration parameters are available on the Server thing:\n+\n+| Parameter | Parameter ID | Required/Optional | Description |\n+|-----------|--------------|-------------------|-------------|\n+| Host                           | host                        | Required  | Host name or IP address of the ZoneMinder server. |\n+| Use secure connection          | useSSL                      | Required  | Use http or https for connection to ZoneMinder. Default is http. |\n+| Port Number                    | portNumber                  | Optional  | Port number if not on ZoneMinder default port 80. |\n+| Use Default Url Path           | useDefaultUrlPath           | Required  | If ON, use ZoneMinder default of /zm; if OFF, use value from urlPath parameter. |\n+| Url Path                       | urlPath                     | Optional  | Use this parameter when not using the ZoneMinder default path of /zm. |\n+| Refresh Interval               | refreshInterval             | Required  | Frequency at which monitor status will be updated. |", "originalCommit": "2e02b60df992e5a69bf356a69b4cbb7d03317aa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwNjM5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r493806391", "bodyText": "Also fixed.", "author": "mhilbush", "createdAt": "2020-09-23T18:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1ODUwMg=="}], "type": "inlineReview"}, {"oid": "20d9a6d6d8c1b8ac6de1c167ffdf0de1af49b64d", "url": "https://github.com/openhab/openhab-addons/commit/20d9a6d6d8c1b8ac6de1c167ffdf0de1af49b64d", "message": "Replacement for zoneminder binding\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-09-23T20:11:01Z", "type": "commit"}, {"oid": "8b80db5675027f963e824292ea6b878dd9cc4c3c", "url": "https://github.com/openhab/openhab-addons/commit/8b80db5675027f963e824292ea6b878dd9cc4c3c", "message": "Change owner\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-09-23T20:12:17Z", "type": "commit"}, {"oid": "a5a2851830a2186246ec4a579bfc982029ac9f33", "url": "https://github.com/openhab/openhab-addons/commit/a5a2851830a2186246ec4a579bfc982029ac9f33", "message": "Fixes\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-09-23T20:12:18Z", "type": "commit"}, {"oid": "c295c5514348fee55c7e920e03c763e53a87ba1e", "url": "https://github.com/openhab/openhab-addons/commit/c295c5514348fee55c7e920e03c763e53a87ba1e", "message": "Address review comments\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-09-23T20:12:18Z", "type": "commit"}, {"oid": "f6288d2634efa87e7befa54c561683337391b337", "url": "https://github.com/openhab/openhab-addons/commit/f6288d2634efa87e7befa54c561683337391b337", "message": "Fix required parameters\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-09-23T20:12:18Z", "type": "commit"}, {"oid": "669651fcc78e6068dfb618d8c5e9c2dd46609352", "url": "https://github.com/openhab/openhab-addons/commit/669651fcc78e6068dfb618d8c5e9c2dd46609352", "message": "Fix formatting issue to fix build\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-09-23T20:12:18Z", "type": "commit"}, {"oid": "669651fcc78e6068dfb618d8c5e9c2dd46609352", "url": "https://github.com/openhab/openhab-addons/commit/669651fcc78e6068dfb618d8c5e9c2dd46609352", "message": "Fix formatting issue to fix build\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-09-23T20:12:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5ODUyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r498898522", "bodyText": "IIRC, we discussed already something around these parameters in the old PR. I'm wondering what the purpose of this parameter is. Isn't urlPath sufficient with its default value ?", "author": "fwolter", "createdAt": "2020-10-02T15:37:58Z", "path": "bundles/org.openhab.binding.zoneminder/README.md", "diffHunk": "@@ -1,184 +1,277 @@\n-# Zoneminder Binding\n+# ZoneMinder Binding\n \n-This binding offers integration to a ZoneMinder Server. It currently only offers to integrate to monitors (eg. cameras in ZoneMinder).\n-It also only offers access to a limited set of values, as well as an even more limited option to update values in ZoneMinder.\n-It requires at least ZoneMinder 1.29 with API enabled (option 'OPT_USE_API' in ZoneMinder must be enabled).\n-The option 'OPT_TRIGGERS' must be anabled to allow openHAB to trip the ForceAlarm in ZoneMinder.\n+Supports the ZoneMinder video surveillance system.\n \n ## Supported Things\n \n-This binding supports the following thing types\n+The following thing types are supported:\n \n-<table>\n-<tr><td><b>Thing</b></td><td><b>Thing Type</b></td><td><b>Discovery</b></td><td><b>Description</b></td></tr>\n-<tr><td>ZoneMinder Server</td><td>Bridge</td><td>Manual</td><td>A ZoneMinder Server. Required version is minimum 1.29</td></tr>\n-<tr><td>ZoneMinder Monitor</td><td>Thing</td><td>Automatic</td><td>Monitor as defined in ZoneMinder Server</td></tr>\n-</table>\n+| Thing    | ID       | Discovery | Description |\n+|----------|----------|-----------|-------------|\n+| Server   | server   | Manual    | Server bridge manages all communication with ZoneMinder server |\n+| Monitor  | monitor  | Automatic | Monitor represents a ZoneMinder camera monitor |\n \n-## Getting started /  Discovery\n+## Installation\n \n-The binding consists of a Bridge (the ZoneMinder Server it self), and a number of Things, which relates to the induvidual monitors in ZoneMinder.\n-ZoneMinder things can be configured either through the online configuration utility via discovery, or manually through the 'zoneminder.things' configuration file.\n-The Bridge will not be autodiscovered, this behavior is by design.\n-That is because the ZoneMinder API can be configured to communicate on custom ports, you can even change the url from the default /zm/ to something userdefined.\n-That makes it meaningless to scan for a ZoneMinder Server.\n-The Bridge must therefore be added manually, this can be done from Paper UI.\n-After adding the Bridge it will go ONLINE, and after a short while and the discovery process for monitors will start.\n-When a new monitor is discovered it will appear in the Inbox.\n+The binding requires ZoneMinder version 1.34.0 or greater and API version 2.0 or greater.\n+It also requires that you enable the **OPT_USE_API** parameter in the ZoneMinder configuration.\n \n-### Bridge\n+If your ZoneMinder is installed using a non-standard URL path or port number, that must be specified when you add the ZoneMinder server thing.\n \n-| Channel    | Type   | Description                                  |\n-|------------|--------|----------------------------------------------|\n-| online     | Switch | Parameter indicating if the server is online |\n-| CPU load   | Text   | Current CPU Load of server                   |\n-| Disk Usage | text   | Current Disk Usage on server                 |\n+There are two different styles of operation, depending on whether or not you have ZoneMinder configured to use authentication.\n \n-### Thing\n+### Non-Authenticated\n \n-| Channel         | Type   | Description                                                                                |\n-|-----------------|--------|--------------------------------------------------------------------------------------------|\n-| online          | Switch | Parameter indicating if the monitor is online                                              |\n-| enabled         | Switch | Parameter indicating if the monitor is enabled                                             |\n-| force-alarm     | Switch | Parameter indicating if Force Alarm for the the monitor is active                          |\n-| alarm           | Switch | true if monitor has an active alarm                                                        |\n-| recording       | Text   | true if monitor is recording                                                               |\n-| detailed-status | Text   | Detailed status of monitor (Idle, Pre-alarm, Alarm, Alert, Recording)                      |\n-| event-cause     | Text   | Empty when there is no active event, else it contains the text with the cause of the event |\n-| function        | Text   | Text corresponding the value in ZoneMinder: None, Monitor, Modect, Record, Mocord, Nodect  |\n-| capture-daemon  | Switch | Run state of ZMC Daemon                                                                    |\n-| analysis-daemon | Switch | Run state of ZMA Daemon                                                                    |\n-| frame-daemon    | Switch | Run state of ZMF Daemon                                                                    |\n+If ZoneMinder authentication is not used, the User and Password parameters should be empty in the *ZoneMinder Server* thing configuration.\n+No other configuration is required.\n \n-## Manual configuration\n+### Authenticated\n \n-### Things configuration\n+If ZoneMinder authentication is used, first make sure the ZoneMinder user has the **API Enabled** permission set in the ZoneMinder Users configuration.\n+Then, enter the user name and password into the ZoneMinder Server thing configuration.\n \n+## Discovery\n+\n+The server bridge must be added manually.\n+Once the server bridge is configured with a valid ZoneMinder host name or IP address, \n+all monitors associated with the ZoneMinder server will be discovered.\n+\n+## Thing Configuration\n+\n+### Server Thing\n+\n+The following configuration parameters are available on the Server thing:\n+\n+| Parameter | Parameter ID | Required/Optional | Description |\n+|-----------|--------------|-------------------|-------------|\n+| Host                           | host                        | Required  | Host name or IP address of the ZoneMinder server. |\n+| Use secure connection          | useSSL                      | Required  | Use http or https for connection to ZoneMinder. Default is http. |\n+| Port Number                    | portNumber                  | Optional  | Port number if not on ZoneMinder default port 80. |\n+| Use Default Url Path           | useDefaultUrlPath           | Required  | If ON, use ZoneMinder default of /zm; if OFF, use value from urlPath parameter. |", "originalCommit": "669651fcc78e6068dfb618d8c5e9c2dd46609352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4MDI5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500280290", "bodyText": "Sorry @fwolter. I had responded to your question in the old PR, then closed the PR before you had a chance to see my response.\nHere's what I said in the original PR. Perhaps you have a suggestion for how to do it differently.\n\nThis is how I wanted to do it originally. However, if you define the parameter to have a default, I don't believe it's then possible to leave the parameter empty. If you leave it empty, OH will just insert the default. As there are some Zoneminder installations that need the path to be empty, this was the only way I could think to do it.", "author": "mhilbush", "createdAt": "2020-10-06T13:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5ODUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3NzQ5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500377491", "bodyText": "You mean if zoneminder is reachable under the root dir like http://localhost/? I think it's logical if the user simply needs to enter a /, then. WDYT?", "author": "fwolter", "createdAt": "2020-10-06T15:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5ODUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMzgyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500423821", "bodyText": "So, yes, the default Zoneminder installation would be:\nhttp://localhost/zm/path/to/api/endpoint\n\nAnd an alternate would be:\nhttp://localhost/path/to/api/endpoint\n\nHow obvious!!! Sometimes you can't see the forest for the trees. lol\nI'll make the change.", "author": "mhilbush", "createdAt": "2020-10-06T16:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5ODUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMTQ5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r498901495", "bodyText": "You could merge this with the Installation chapter, as these are redundant.", "author": "fwolter", "createdAt": "2020-10-02T15:43:17Z", "path": "bundles/org.openhab.binding.zoneminder/README.md", "diffHunk": "@@ -1,184 +1,277 @@\n-# Zoneminder Binding\n+# ZoneMinder Binding\n \n-This binding offers integration to a ZoneMinder Server. It currently only offers to integrate to monitors (eg. cameras in ZoneMinder).\n-It also only offers access to a limited set of values, as well as an even more limited option to update values in ZoneMinder.\n-It requires at least ZoneMinder 1.29 with API enabled (option 'OPT_USE_API' in ZoneMinder must be enabled).\n-The option 'OPT_TRIGGERS' must be anabled to allow openHAB to trip the ForceAlarm in ZoneMinder.\n+Supports the ZoneMinder video surveillance system.\n \n ## Supported Things\n \n-This binding supports the following thing types\n+The following thing types are supported:\n \n-<table>\n-<tr><td><b>Thing</b></td><td><b>Thing Type</b></td><td><b>Discovery</b></td><td><b>Description</b></td></tr>\n-<tr><td>ZoneMinder Server</td><td>Bridge</td><td>Manual</td><td>A ZoneMinder Server. Required version is minimum 1.29</td></tr>\n-<tr><td>ZoneMinder Monitor</td><td>Thing</td><td>Automatic</td><td>Monitor as defined in ZoneMinder Server</td></tr>\n-</table>\n+| Thing    | ID       | Discovery | Description |\n+|----------|----------|-----------|-------------|\n+| Server   | server   | Manual    | Server bridge manages all communication with ZoneMinder server |\n+| Monitor  | monitor  | Automatic | Monitor represents a ZoneMinder camera monitor |\n \n-## Getting started /  Discovery\n+## Installation\n \n-The binding consists of a Bridge (the ZoneMinder Server it self), and a number of Things, which relates to the induvidual monitors in ZoneMinder.\n-ZoneMinder things can be configured either through the online configuration utility via discovery, or manually through the 'zoneminder.things' configuration file.\n-The Bridge will not be autodiscovered, this behavior is by design.\n-That is because the ZoneMinder API can be configured to communicate on custom ports, you can even change the url from the default /zm/ to something userdefined.\n-That makes it meaningless to scan for a ZoneMinder Server.\n-The Bridge must therefore be added manually, this can be done from Paper UI.\n-After adding the Bridge it will go ONLINE, and after a short while and the discovery process for monitors will start.\n-When a new monitor is discovered it will appear in the Inbox.\n+The binding requires ZoneMinder version 1.34.0 or greater and API version 2.0 or greater.\n+It also requires that you enable the **OPT_USE_API** parameter in the ZoneMinder configuration.\n \n-### Bridge\n+If your ZoneMinder is installed using a non-standard URL path or port number, that must be specified when you add the ZoneMinder server thing.\n \n-| Channel    | Type   | Description                                  |\n-|------------|--------|----------------------------------------------|\n-| online     | Switch | Parameter indicating if the server is online |\n-| CPU load   | Text   | Current CPU Load of server                   |\n-| Disk Usage | text   | Current Disk Usage on server                 |\n+There are two different styles of operation, depending on whether or not you have ZoneMinder configured to use authentication.\n \n-### Thing\n+### Non-Authenticated\n \n-| Channel         | Type   | Description                                                                                |\n-|-----------------|--------|--------------------------------------------------------------------------------------------|\n-| online          | Switch | Parameter indicating if the monitor is online                                              |\n-| enabled         | Switch | Parameter indicating if the monitor is enabled                                             |\n-| force-alarm     | Switch | Parameter indicating if Force Alarm for the the monitor is active                          |\n-| alarm           | Switch | true if monitor has an active alarm                                                        |\n-| recording       | Text   | true if monitor is recording                                                               |\n-| detailed-status | Text   | Detailed status of monitor (Idle, Pre-alarm, Alarm, Alert, Recording)                      |\n-| event-cause     | Text   | Empty when there is no active event, else it contains the text with the cause of the event |\n-| function        | Text   | Text corresponding the value in ZoneMinder: None, Monitor, Modect, Record, Mocord, Nodect  |\n-| capture-daemon  | Switch | Run state of ZMC Daemon                                                                    |\n-| analysis-daemon | Switch | Run state of ZMA Daemon                                                                    |\n-| frame-daemon    | Switch | Run state of ZMF Daemon                                                                    |\n+If ZoneMinder authentication is not used, the User and Password parameters should be empty in the *ZoneMinder Server* thing configuration.\n+No other configuration is required.\n \n-## Manual configuration\n+### Authenticated\n \n-### Things configuration\n+If ZoneMinder authentication is used, first make sure the ZoneMinder user has the **API Enabled** permission set in the ZoneMinder Users configuration.\n+Then, enter the user name and password into the ZoneMinder Server thing configuration.\n \n+## Discovery\n+\n+The server bridge must be added manually.\n+Once the server bridge is configured with a valid ZoneMinder host name or IP address, \n+all monitors associated with the ZoneMinder server will be discovered.\n+\n+## Thing Configuration\n+\n+### Server Thing\n+\n+The following configuration parameters are available on the Server thing:\n+\n+| Parameter | Parameter ID | Required/Optional | Description |\n+|-----------|--------------|-------------------|-------------|\n+| Host                           | host                        | Required  | Host name or IP address of the ZoneMinder server. |\n+| Use secure connection          | useSSL                      | Required  | Use http or https for connection to ZoneMinder. Default is http. |\n+| Port Number                    | portNumber                  | Optional  | Port number if not on ZoneMinder default port 80. |\n+| Use Default Url Path           | useDefaultUrlPath           | Required  | If ON, use ZoneMinder default of /zm; if OFF, use value from urlPath parameter. |\n+| Url Path                       | urlPath                     | Optional  | Use this parameter when not using the ZoneMinder default path of /zm. |\n+| Refresh Interval               | refreshInterval             | Required  | Frequency in seconds at which monitor status will be updated. |\n+| Default Alarm Duration         | defaultAlarmDuration        | Required  | Can be used to set the default alarm duration on discovered monitors. |\n+| Default Image Refresh Interval | defaultImageRefreshInterval | Optional  | Can be used to set the image refresh interval in seconds on discovered monitors. Leave empty to not set an image refresh interval. |\n+| Monitor Discovery Enabled      | discoveryEnabled            | Required  | Enable/disable the automatic discovery of monitors. Default is enabled. |\n+| Monitor Discovery Interval     | discoveryInterval           | Required  | Frequency in seconds at which the binding will try to discover monitors. Default is 300 seconds. |\n+| User ID                        | user                        | Optional  | User ID of ZoneMinder user when using authentication. |\n+| Password                       | pass                        | Optional  | Password of ZoneMinder user when using authentication. |\n+\n+### Monitor Thing\n+\n+The following configuration parameters are available on the Monitor thing:\n+\n+| Parameter | Parameter ID | Required/Optional | Description |\n+|-----------|--------------|-------------------|-------------|\n+| Monitor ID             | monitorId            | Required          | Id of monitor defined in ZoneMinder. |\n+| Image Refresh Interval | imageRefreshInterval | Optional          | Interval in seconds in which snapshot image channel will be updated. |\n+| Alarm Duration         | alarmDuration        | Required          | How long the alarm will run once triggered by the triggerAlarm channel. |\n+\n+## Channels\n+\n+### Server Thing\n+\n+| Channel  | Type   | Description  |\n+|----------|--------|--------------|\n+| imageMonitorId | String      | Monitor ID to use for selecting an image URL. Also, sending an OFF command to this channel will reset the monitor id and url to UNDEF.  |\n+| imageUrl       | String      | Image URL for monitor id specified by imageMonitorId. Channel is UNDEF if the monitor id is not set, or if an OFF command is sent to the imageMonitorId channel. |\n+| videoMonitorId | String      | Monitor ID to use for selecting a video URL. Also, sending an OFF command to this channel will reset the monitor id and url to UNDEF.  |\n+| videoUrl       | String      | Video URL for monitor id specified by videoMonitorId. Channel is UNDEF if the monitor id is not set, or if an OFF command is sent to the videoMonitorId channel. |\n+\n+### Monitor Thing\n+\n+| Channel  | Type   | Description  |\n+|----------|--------|--------------|\n+| id                | String      | Monitor ID  |\n+| name              | String      | Monitor name  |\n+| image             | Image       | Snapshot image  |\n+| enable            | Switch      | Enable/disable monitor  |\n+| function          | String      | Monitor function (e.g. Nodect, Mocord)  |\n+| alarm             | Switch      | Monitor is alarming  |\n+| state             | String      | Monitor state (e.g. IDLE, ALARM, TAPE)  |\n+| triggerAlarm      | Switch      | Turn alarm on/off  |\n+| hourEvents        | Number      | Number of events in last hour |\n+| dayEvents         | Number      | Number of events in last day  |\n+| weekEvents        | Number      | Number of events in last week  |\n+| monthEvents       | Number      | Number of events in last month  |\n+| yearEvents        | Number      | Number of events in last year  |\n+| totalEvents       | Number      | Total number of events  |\n+| imageUrl          | String      | URL for image snapshot  |\n+| videoUrl          | String      | URL for JPEG video stream  |\n+| eventId           | String      | Event ID  |\n+| eventName         | String      | Event name  |\n+| eventCause        | String      | Event cause  |\n+| eventNotes        | String      | Event notes  |\n+| eventStart        | DateTime    | Event start date/time |\n+| eventEnd          | DateTime    | Event end date/time  |\n+| eventFrames       | Number      | Event frames  |\n+| eventAlarmFrames  | Number      | Event alarm frames |\n+| eventLength       | Number:Time | Event length in seconds  |\n+\n+## Thing Actions\n+\n+### triggerAlarm\n+\n+The `triggerAlarm` action triggers an alarm that runs for the number of seconds specified by the parameter `duration`.\n+\n+##### triggerAlarm - trigger an alarm\n+\n+```java\n+void triggerAlarm(Number duration)\n ```\n-Bridge zoneminder:server:ZoneMinderSample [ hostname=\"192.168.1.55\", user=\"<USERNAME>\", password=\"<PASSWORD>\", telnet_port=6802, refresh_interval_disk_usage=1 ]\n-{\n-\tThing monitor monitor_1 [ monitorId=1, monitorTriggerTimeout=120, monitorEventText=\"Trigger activated from openHAB\" ]\n-}\n \n ```\n+Parameters:\n+duration - The number of seconds for which the alarm should run.\n+```\n+\n+### triggerAlarm\n+\n+The `triggerAlarm` action triggers an alarm that runs for the number of seconds specified\n+in the Monitor thing configuration.\n+\n+##### triggerAlarm - trigger an alarm\n+\n+```java\n+void triggerAlarm()\n+```\n+\n+### triggerAlarmOff\n+\n+The `triggerAlarmOff` action cancels a running alarm.\n \n-### Items configuration\n+##### triggerAlarmOff - cancel an alarm\n \n+```java\n+void triggerAlarmOff()\n ```\n-/* *****************************************\n- * SERVER\n- * *****************************************/\n-Switch zmServer_Online \t\t\t\"Zoneminder Online [%s]\"\t\t\t<switch>\t{channel=\"zoneminder:server:ZoneMinderSample:online\"}\n-Number zmServer_CpuLoad \t\t\t\"ZoneMinder Server Load [%s]\"\t\t\t\t{channel=\"zoneminder:server:ZoneMinderSample:cpu-load\"}\n \n-Number zmServer_DiskUsage\t\t\t\"ZoneMinder Disk Usage [%s]\"\t\t\t\t{channel=\"zoneminder:server:ZoneMinderSample:disk-usage\"}\n+### Requirements\n \n-/* *****************************************\n- * MONITOR 1\n- * *****************************************/\n-Switch zmMonitor1_Online \t\t\"Online [%s]\" \t\t\t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:online\"}\n-Switch zmMonitor1_Enabled \t\t\"Enabled [%s]\" \t\t\t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:enabled\"}\n-Switch zmMonitor1_ForceAlarm \t\t\"Force Alarm [%s]\"\t \t\t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:force-alarm\"}\n-Switch zmMonitor1_EventState \t\t\"Alarm [%s]\"\t \t\t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:alarm\"}\n-Switch zmMonitor1_Recording \t\t\"Recording [%s]\"\t \t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:recording\"}\n-String zmMonitor1_DetailedStatus\t\"Detailed Status [%s]\"\t \t\t\t\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:detailed-status\"}\n-String zmMonitor1_EventCause \t\t\"Event Cause [%s]\"\t \t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:event-cause\"}\n-String zmMonitor1_Function \t\t\"Function [%s]\" \t\t\t\t\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:function\"}\n-Switch zmMonitor1_CaptureState\t \t\"Capture Daemon [%s]\" \t\t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:capture-daemon\"}\n-Switch zmMonitor1_AnalysisState \t\"Analysis Daemon [%s]\" \t\t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:analysis-daemon\"}\n-Switch zmMonitor1_FrameState\t\t\"Frame Daemon [%s]\"\t\t\t<switch>\t{channel=\"zoneminder:monitor:ZoneMinderSample:monitor-1:frame-daemon\"}\n+The binding requires ZoneMinder version 1.34.0 or greater, and API version 2.0 or greater.\n+The API must be enabled in the ZoneMinder configuration using the **OPT_USE_API** parameter.\n \n+The binding can access ZoneMinder with or without authentication.\n+If you have authentication enabled in ZoneMinder, set the **user** and **pass** \n+config paremeters in the *server* thing.", "originalCommit": "669651fcc78e6068dfb618d8c5e9c2dd46609352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MzEyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500343126", "bodyText": "Agreed. Merged.", "author": "mhilbush", "createdAt": "2020-10-06T14:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMTQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNDg3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r498904873", "bodyText": "I think the Proxy workaround for Actions isn't needed anymore for OH3. @cweitkamp Please correct me if I'm wrong.", "author": "fwolter", "createdAt": "2020-10-02T15:49:15Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/action/ZmActions.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.action;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.zoneminder.internal.handler.ZmMonitorHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.openhab.core.thing.binding.ThingActions;\n+import org.openhab.core.thing.binding.ThingActionsScope;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ZmActions} defines the thing actions provided by this binding.\n+ *\n+ * <b>Note:</b>The static method <b>invokeMethodOf</b> handles the case where\n+ * the test <i>actions instanceof ZmActions</i> fails. This test can fail\n+ * due to an issue in openHAB core v2.5.0 where the {@link ZmActions} class\n+ * can be loaded by a different classloader than the <i>actions</i> instance.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@ThingActionsScope(name = \"zm\")\n+@NonNullByDefault\n+public class ZmActions implements ThingActions, IZmActions {\n+    private final Logger logger = LoggerFactory.getLogger(ZmActions.class);\n+\n+    private @Nullable ZmMonitorHandler handler;\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof ZmMonitorHandler) {\n+            this.handler = (ZmMonitorHandler) handler;\n+        }\n+    }\n+\n+    private static IZmActions invokeMethodOf(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        if (actions.getClass().getName().equals(ZmActions.class.getName())) {\n+            if (actions instanceof IZmActions) {\n+                return (IZmActions) actions;\n+            } else {\n+                return (IZmActions) Proxy.newProxyInstance(IZmActions.class.getClassLoader(),\n+                        new Class[] { IZmActions.class }, (Object proxy, Method method, Object[] args) -> {\n+                            Method m = actions.getClass().getDeclaredMethod(method.getName(),\n+                                    method.getParameterTypes());\n+                            return m.invoke(actions, args);\n+                        });\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Actions is not an instance of ZmActions\");\n+    }", "originalCommit": "669651fcc78e6068dfb618d8c5e9c2dd46609352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4NTgyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500285820", "bodyText": "Since DSL rules will still be supported in OH3, I don't recall seeing anything that fixes the root cause of the issue. And the issue in core is still open. But @cweitkamp would know for sure. Let wait for his reply.", "author": "mhilbush", "createdAt": "2020-10-06T13:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNDg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NTY5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500395690", "bodyText": "Please correct me if I am wrong, I am not really up-to-date right now: IIRC there was no real confirmation for ThingActions to be working correctly in OH3 NGRE and we wanted to keep those workarounds and bulk remove them later.", "author": "cweitkamp", "createdAt": "2020-10-06T15:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNDg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNTM0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r498905347", "bodyText": "Logging to info should be used rarely. This could be debug or warn. Same for below.", "author": "fwolter", "createdAt": "2020-10-02T15:50:07Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/action/ZmActions.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.action;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.zoneminder.internal.handler.ZmMonitorHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.openhab.core.thing.binding.ThingActions;\n+import org.openhab.core.thing.binding.ThingActionsScope;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ZmActions} defines the thing actions provided by this binding.\n+ *\n+ * <b>Note:</b>The static method <b>invokeMethodOf</b> handles the case where\n+ * the test <i>actions instanceof ZmActions</i> fails. This test can fail\n+ * due to an issue in openHAB core v2.5.0 where the {@link ZmActions} class\n+ * can be loaded by a different classloader than the <i>actions</i> instance.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@ThingActionsScope(name = \"zm\")\n+@NonNullByDefault\n+public class ZmActions implements ThingActions, IZmActions {\n+    private final Logger logger = LoggerFactory.getLogger(ZmActions.class);\n+\n+    private @Nullable ZmMonitorHandler handler;\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof ZmMonitorHandler) {\n+            this.handler = (ZmMonitorHandler) handler;\n+        }\n+    }\n+\n+    private static IZmActions invokeMethodOf(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        if (actions.getClass().getName().equals(ZmActions.class.getName())) {\n+            if (actions instanceof IZmActions) {\n+                return (IZmActions) actions;\n+            } else {\n+                return (IZmActions) Proxy.newProxyInstance(IZmActions.class.getClassLoader(),\n+                        new Class[] { IZmActions.class }, (Object proxy, Method method, Object[] args) -> {\n+                            Method m = actions.getClass().getDeclaredMethod(method.getName(),\n+                                    method.getParameterTypes());\n+                            return m.invoke(actions, args);\n+                        });\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Actions is not an instance of ZmActions\");\n+    }\n+\n+    /**\n+     * The Trigger Alarm function triggers an alarm that will run for the number of seconds\n+     * specified by the supplied parameter duration.\n+     */\n+    @Override\n+    @RuleAction(label = \"TriggerAlarm\", description = \"Trigger an alarm on the monitor.\")\n+    public void triggerAlarm(\n+            @ActionInput(name = \"duration\", description = \"The duration of the alarm in seconds.\") @Nullable Number duration) {\n+        logger.debug(\"ZmActions: Action 'TriggerAlarm' called\");\n+        ZmMonitorHandler localHandler = handler;\n+        if (localHandler == null) {\n+            logger.info(\"ZmActions: Action service ThingHandler is null!\");", "originalCommit": "669651fcc78e6068dfb618d8c5e9c2dd46609352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwMzE2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500303167", "bodyText": "Some bindings use info, but most use warn. I'll make it warn.", "author": "mhilbush", "createdAt": "2020-10-06T13:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNTM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjM1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r498912352", "bodyText": "This could be debug or warn.", "author": "fwolter", "createdAt": "2020-10-02T16:03:21Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/java/org/openhab/binding/zoneminder/internal/handler/ZmMonitorHandler.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.zoneminder.internal.handler;\n+\n+import static org.openhab.binding.zoneminder.internal.ZmBindingConstants.*;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.zoneminder.action.ZmActions;\n+import org.openhab.binding.zoneminder.internal.config.ZmMonitorConfig;\n+import org.openhab.core.i18n.TimeZoneProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.RawType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ZmMonitorHandler} represents a Zoneminder monitor. The monitor handler\n+ * interacts with the server bridge to communicate with the Zoneminder server.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZmMonitorHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ZmMonitorHandler.class);\n+\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ZmBridgeHandler bridgeHandler;\n+\n+    private @NonNullByDefault({}) String monitorId;\n+    private @Nullable Integer imageRefreshIntervalSeconds;\n+    private Integer alarmDuration = DEFAULT_ALARM_DURATION_SECONDS;\n+\n+    private @Nullable ScheduledFuture<?> imageRefreshJob;\n+    private @Nullable ScheduledFuture<?> alarmOffJob;\n+\n+    private final Map<String, State> monitorStatusCache = new ConcurrentHashMap<>();\n+\n+    public ZmMonitorHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ZmMonitorConfig config = getConfigAs(ZmMonitorConfig.class);\n+        monitorId = config.monitorId;\n+        imageRefreshIntervalSeconds = config.imageRefreshInterval;\n+        Integer value = config.alarmDuration;\n+        alarmDuration = value != null ? value : DEFAULT_ALARM_DURATION_SECONDS;\n+        bridgeHandler = (ZmBridgeHandler) getBridge().getHandler();\n+        monitorStatusCache.clear();\n+        updateStatus(ThingStatus.ONLINE);\n+        startImageRefreshJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        stopAlarmOffJob();\n+        turnAlarmOff();\n+        stopImageRefreshJob();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            State state = monitorStatusCache.get(channelUID.getId());\n+            if (state != null) {\n+                updateState(channelUID, state);\n+            }\n+            return;\n+        }\n+        logger.debug(\"Monitor {}: Received command '{}' for channel '{}'\", monitorId, command, channelUID.getId());\n+        ZmBridgeHandler localHandler = bridgeHandler;\n+        if (localHandler == null) {\n+            logger.info(\"Monitor {}: Can't execute command because bridge handler is null\", monitorId);", "originalCommit": "669651fcc78e6068dfb618d8c5e9c2dd46609352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwMzI0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500303240", "bodyText": "Probably should be warn.", "author": "mhilbush", "createdAt": "2020-10-06T13:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzkyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r498913928", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"defaultImageRefreshInterval\" type=\"integer\" required=\"false\" groupName=\"config-info\">\n          \n          \n            \n            \t\t<parameter name=\"defaultImageRefreshInterval\" type=\"integer\" unit=\"s\" required=\"false\" groupName=\"config-info\">", "author": "fwolter", "createdAt": "2020-10-02T16:06:20Z", "path": "bundles/org.openhab.binding.zoneminder/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,90 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:zoneminder:server\">\n+\t\t<parameter-group name=\"url-info\">\n+\t\t\t<label>ZoneMinder URL Information</label>\n+\t\t</parameter-group>\n+\t\t<parameter-group name=\"config-info\">\n+\t\t\t<label>Bridge Configuration</label>\n+\t\t</parameter-group>\n+\t\t<parameter-group name=\"auth-info\">\n+\t\t\t<label>Authentication Information</label>\n+\t\t</parameter-group>\n+\t\t<parameter name=\"refreshInterval\" type=\"integer\" min=\"2\" required=\"true\" unit=\"s\" groupName=\"config-info\">\n+\t\t\t<label>Refresh Interval</label>\n+\t\t\t<description>Interval in seconds at which monitor status is updated</description>\n+\t\t\t<default>5</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"discoveryEnabled\" type=\"boolean\" required=\"true\" groupName=\"config-info\">\n+\t\t\t<label>Discovery Enabled</label>\n+\t\t\t<description>Enable/disable automatic discovery</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"discoveryInterval\" type=\"integer\" min=\"60\" required=\"true\" unit=\"s\" groupName=\"config-info\">\n+\t\t\t<label>Monitor Discovery Interval</label>\n+\t\t\t<description>Specifies time in seconds in which the binding will attempt to discover monitors</description>\n+\t\t\t<default>300</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"defaultAlarmDuration\" type=\"integer\" unit=\"s\" required=\"false\" groupName=\"config-info\">\n+\t\t\t<label>Default Alarm Duration</label>\n+\t\t\t<description>Duration in seconds after which the alarm will be turned off</description>\n+\t\t\t<default>60</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"defaultImageRefreshInterval\" type=\"integer\" required=\"false\" groupName=\"config-info\">", "originalCommit": "669651fcc78e6068dfb618d8c5e9c2dd46609352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0NjE3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8530#discussion_r500346170", "bodyText": "Fixed", "author": "mhilbush", "createdAt": "2020-10-06T14:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzkyOA=="}], "type": "inlineReview"}, {"oid": "374a56eab817d0ec3c95beb91001f4c662cf1ad2", "url": "https://github.com/openhab/openhab-addons/commit/374a56eab817d0ec3c95beb91001f4c662cf1ad2", "message": "Address review feedback\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-10-06T14:47:52Z", "type": "commit"}, {"oid": "0ec771ca07692f13e5915747f0c38d476062cb0f", "url": "https://github.com/openhab/openhab-addons/commit/0ec771ca07692f13e5915747f0c38d476062cb0f", "message": "Rework URL path config parameters\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-10-06T17:04:38Z", "type": "commit"}, {"oid": "32fa39dea64bab5d98e415865312d02ca2d9db42", "url": "https://github.com/openhab/openhab-addons/commit/32fa39dea64bab5d98e415865312d02ca2d9db42", "message": "Fix documentation\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-10-06T17:07:09Z", "type": "commit"}]}