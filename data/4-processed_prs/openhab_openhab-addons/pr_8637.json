{"pr_number": 8637, "pr_title": "[miio] add new map elements", "pr_createdAt": "2020-10-02T21:17:10Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8637", "timeline": [{"oid": "bb2d8c830807acea5fc3d79c41d36123087ad79d", "url": "https://github.com/openhab/openhab-addons/commit/bb2d8c830807acea5fc3d79c41d36123087ad79d", "message": "[miio] add new map elements\n\nAdd newly found mapelements for obstacles\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-10-02T21:12:43Z", "type": "commit"}, {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564", "url": "https://github.com/openhab/openhab-addons/commit/10f101c232716bf1b30a87d1cab7d490c2c64564", "message": "[miio] apply spotless\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-10-02T22:45:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDQyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499090424", "bodyText": "Is there a reason you are only allowing 15 colors instead of the full 16?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            g2d.setColor(ROOM_COLORS[mapId % 15]);\n          \n          \n            \n                                            g2d.setColor(ROOM_COLORS[mapId % ROOM_COLORS.length]);", "author": "cpmeister", "createdAt": "2020-10-02T23:43:48Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -160,7 +165,8 @@ private void drawMap(Graphics2D g2d, float scale) {\n                                 g2d.setColor(Color.BLACK);\n                                 break;\n                             case 7:\n-                                g2d.setColor(ROOM_COLORS[Math.round(mapId / 2)]);\n+                                g2d.setColor(ROOM_COLORS[mapId % 15]);", "originalCommit": "10f101c232716bf1b30a87d1cab7d490c2c64564", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyNjY1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499126655", "bodyText": "yes, I saw that in quite a few occasions somehow both room 1 & 17 were defined. (without many in between)\nThat made the color the same for both rooms, hence not recognizable as separate rooms anymore.\nso this is little hack to avoid that... double colors can obviously still occur, but this seems to reduce the chance.", "author": "marcelrv", "createdAt": "2020-10-03T08:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0Mzc0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499143740", "bodyText": "Can't you just make sure that each room has a unique color?", "author": "cpmeister", "createdAt": "2020-10-03T12:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MTA1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499241056", "bodyText": "not easy to find 32 distinct colors while keeping the path, walls, vacuum etc still properly visible.\nThe Xiaomi app also does not do that.. don't know exactly how many they are using, but certainly not 32.\nHence originally I created 16 colors.. Seeing some of the maps from other (I don't have a vacuum that produces these roomcolor maps) I recognized that several ones had overlapping colors, hence the 16 colors and divide rooms/2 was maybe bit of a unlucky choice.", "author": "marcelrv", "createdAt": "2020-10-04T12:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDgwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499090805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Integer obstacleType : obstacles.keySet()) {\n          \n          \n            \n                        obstacles.get(obstacleType).forEach(obstacle -> {\n          \n          \n            \n                            final float obstacleX = toXCoord(obstacle[0]) * scale;\n          \n          \n            \n                            final float obstacleY = toYCoord(obstacle[1]) * scale;\n          \n          \n            \n                            drawCircle(g2d, obstacleX, obstacleY, radius, true);\n          \n          \n            \n                            if (scale > 1.0) {\n          \n          \n            \n                                drawCenteredImg(g2d, scale / 3, \"obstacle-\" + obstacle[2] + \".png\", obstacleX, obstacleY + 15);\n          \n          \n            \n                            }\n          \n          \n            \n                        });\n          \n          \n            \n            \n          \n          \n            \n                    }\n          \n          \n            \n                    for (ArrayList<int[]> value : obstacles.values()) {\n          \n          \n            \n                        value.forEach(obstacle -> {\n          \n          \n            \n                            final float obstacleX = toXCoord(obstacle[0]) * scale;\n          \n          \n            \n                            final float obstacleY = toYCoord(obstacle[1]) * scale;\n          \n          \n            \n                            drawCircle(g2d, obstacleX, obstacleY, radius, true);\n          \n          \n            \n                            if (scale > 1.0) {\n          \n          \n            \n                                drawCenteredImg(g2d, scale / 3, \"obstacle-\" + obstacle[2] + \".png\", obstacleX, obstacleY + 15);\n          \n          \n            \n                            }\n          \n          \n            \n                        });\n          \n          \n            \n                    }", "author": "cpmeister", "createdAt": "2020-10-02T23:45:53Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -275,31 +288,58 @@ private void drawRobo(Graphics2D g2d, float scale) {\n         g2d.setColor(COLOR_CHARGER_HALO);\n         final float chargerX = toXCoord(rmfp.getChargerX()) * scale;\n         final float chargerY = toYCoord(rmfp.getChargerY()) * scale;\n-        drawCircle(g2d, chargerX, chargerY, radius);\n+        drawCircle(g2d, chargerX, chargerY, radius, false);\n         drawCenteredImg(g2d, scale / 8, \"charger.png\", chargerX, chargerY);\n         radius = 3 * scale;\n         g2d.setColor(COLOR_ROBO);\n         final float roboX = toXCoord(rmfp.getRoboX()) * scale;\n         final float roboY = toYCoord(rmfp.getRoboY()) * scale;\n-        drawCircle(g2d, roboX, roboY, radius);\n+        drawCircle(g2d, roboX, roboY, radius, false);\n         if (scale > 1.5) {\n             drawCenteredImg(g2d, scale / 15, \"robo.png\", roboX, roboY);\n         }\n     }\n \n-    private void drawCircle(Graphics2D g2d, float x, float y, float radius) {\n-        g2d.draw(new Ellipse2D.Double(x - radius, y - radius, 2.0 * radius, 2.0 * radius));\n+    private void drawObstacles(Graphics2D g2d, float scale) {\n+        float radius = 2 * scale;\n+        Stroke stroke = new BasicStroke(3 * scale);\n+        g2d.setStroke(stroke);\n+        g2d.setColor(Color.MAGENTA);\n+\n+        Map<Integer, ArrayList<int[]>> obstacles = rmfp.getObstacles();\n+        for (Integer obstacleType : obstacles.keySet()) {\n+            obstacles.get(obstacleType).forEach(obstacle -> {\n+                final float obstacleX = toXCoord(obstacle[0]) * scale;\n+                final float obstacleY = toYCoord(obstacle[1]) * scale;\n+                drawCircle(g2d, obstacleX, obstacleY, radius, true);\n+                if (scale > 1.0) {\n+                    drawCenteredImg(g2d, scale / 3, \"obstacle-\" + obstacle[2] + \".png\", obstacleX, obstacleY + 15);\n+                }\n+            });\n+\n+        }", "originalCommit": "10f101c232716bf1b30a87d1cab7d490c2c64564", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDg3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499090879", "bodyText": "remove blank line", "author": "cpmeister", "createdAt": "2020-10-02T23:46:14Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -275,31 +288,58 @@ private void drawRobo(Graphics2D g2d, float scale) {\n         g2d.setColor(COLOR_CHARGER_HALO);\n         final float chargerX = toXCoord(rmfp.getChargerX()) * scale;\n         final float chargerY = toYCoord(rmfp.getChargerY()) * scale;\n-        drawCircle(g2d, chargerX, chargerY, radius);\n+        drawCircle(g2d, chargerX, chargerY, radius, false);\n         drawCenteredImg(g2d, scale / 8, \"charger.png\", chargerX, chargerY);\n         radius = 3 * scale;\n         g2d.setColor(COLOR_ROBO);\n         final float roboX = toXCoord(rmfp.getRoboX()) * scale;\n         final float roboY = toYCoord(rmfp.getRoboY()) * scale;\n-        drawCircle(g2d, roboX, roboY, radius);\n+        drawCircle(g2d, roboX, roboY, radius, false);\n         if (scale > 1.5) {\n             drawCenteredImg(g2d, scale / 15, \"robo.png\", roboX, roboY);\n         }\n     }\n \n-    private void drawCircle(Graphics2D g2d, float x, float y, float radius) {\n-        g2d.draw(new Ellipse2D.Double(x - radius, y - radius, 2.0 * radius, 2.0 * radius));\n+    private void drawObstacles(Graphics2D g2d, float scale) {\n+        float radius = 2 * scale;\n+        Stroke stroke = new BasicStroke(3 * scale);\n+        g2d.setStroke(stroke);\n+        g2d.setColor(Color.MAGENTA);\n+\n+        Map<Integer, ArrayList<int[]>> obstacles = rmfp.getObstacles();\n+        for (Integer obstacleType : obstacles.keySet()) {\n+            obstacles.get(obstacleType).forEach(obstacle -> {\n+                final float obstacleX = toXCoord(obstacle[0]) * scale;\n+                final float obstacleY = toYCoord(obstacle[1]) * scale;\n+                drawCircle(g2d, obstacleX, obstacleY, radius, true);\n+                if (scale > 1.0) {\n+                    drawCenteredImg(g2d, scale / 3, \"obstacle-\" + obstacle[2] + \".png\", obstacleX, obstacleY + 15);\n+                }\n+            });\n+\n+        }\n+    }\n+\n+    private void drawCircle(Graphics2D g2d, float x, float y, float radius, boolean fill) {\n+", "originalCommit": "10f101c232716bf1b30a87d1cab7d490c2c64564", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MTE2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499091169", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        pw.printf(\"\\tObstacle coordinates:\");\n          \n          \n            \n                        pw.print(\"\\tObstacle coordinates:\");", "author": "cpmeister", "createdAt": "2020-10-02T23:47:59Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapFileParser.java", "diffHunk": "@@ -309,6 +368,16 @@ private void printAreaDetails(ArrayList<float[]> areas, PrintWriter pw) {\n         });\n     }\n \n+    private void printObstacleDetails(ArrayList<int[]> obstacle, PrintWriter pw) {\n+        obstacle.forEach(area -> {\n+            pw.printf(\"\\tObstacle coordinates:\");", "originalCommit": "10f101c232716bf1b30a87d1cab7d490c2c64564", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7407bdd318a39b666ad8bd57b3b59cd98e668724", "url": "https://github.com/openhab/openhab-addons/commit/7407bdd318a39b666ad8bd57b3b59cd98e668724", "message": "[miio] cleanup based on feedback\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-10-03T08:06:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0Mzg4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499143886", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<Integer, ArrayList<int[]>> obstacles = rmfp.getObstacles();\n          \n          \n            \n                    for (Integer obstacleType : obstacles.keySet()) {\n          \n          \n            \n                        obstacles.get(obstacleType).forEach(obstacle -> {\n          \n          \n            \n                    Map<Integer, ArrayList<int[]>> obstacleMap = rmfp.getObstacles();\n          \n          \n            \n                    for (ArrayList<int[]> obstacles : obstacleMap.values()) {\n          \n          \n            \n                        obstacles.forEach(obstacle -> {", "author": "cpmeister", "createdAt": "2020-10-03T12:30:09Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -275,31 +288,58 @@ private void drawRobo(Graphics2D g2d, float scale) {\n         g2d.setColor(COLOR_CHARGER_HALO);\n         final float chargerX = toXCoord(rmfp.getChargerX()) * scale;\n         final float chargerY = toYCoord(rmfp.getChargerY()) * scale;\n-        drawCircle(g2d, chargerX, chargerY, radius);\n+        drawCircle(g2d, chargerX, chargerY, radius, false);\n         drawCenteredImg(g2d, scale / 8, \"charger.png\", chargerX, chargerY);\n         radius = 3 * scale;\n         g2d.setColor(COLOR_ROBO);\n         final float roboX = toXCoord(rmfp.getRoboX()) * scale;\n         final float roboY = toYCoord(rmfp.getRoboY()) * scale;\n-        drawCircle(g2d, roboX, roboY, radius);\n+        drawCircle(g2d, roboX, roboY, radius, false);\n         if (scale > 1.5) {\n             drawCenteredImg(g2d, scale / 15, \"robo.png\", roboX, roboY);\n         }\n     }\n \n-    private void drawCircle(Graphics2D g2d, float x, float y, float radius) {\n-        g2d.draw(new Ellipse2D.Double(x - radius, y - radius, 2.0 * radius, 2.0 * radius));\n+    private void drawObstacles(Graphics2D g2d, float scale) {\n+        float radius = 2 * scale;\n+        Stroke stroke = new BasicStroke(3 * scale);\n+        g2d.setStroke(stroke);\n+        g2d.setColor(Color.MAGENTA);\n+\n+        Map<Integer, ArrayList<int[]>> obstacles = rmfp.getObstacles();\n+        for (Integer obstacleType : obstacles.keySet()) {\n+            obstacles.get(obstacleType).forEach(obstacle -> {", "originalCommit": "10f101c232716bf1b30a87d1cab7d490c2c64564", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "479c6cbdce4f6858da833786da01ad26a8f54b19", "url": "https://github.com/openhab/openhab-addons/commit/479c6cbdce4f6858da833786da01ad26a8f54b19", "message": "Update bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java\r\n\r\ncommit suggestion cpmeister\r\n\r\nSigned-off-by: Marcel Verpaalen marcel@verpaalen.com\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2020-10-04T12:26:14Z", "type": "commit"}]}