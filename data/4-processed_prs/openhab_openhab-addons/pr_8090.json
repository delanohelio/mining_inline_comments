{"pr_number": 8090, "pr_title": "[amazonechocontrol] Too many requests issue, Parallel and overlapping tts and announcement, Volume, Some fixes", "pr_createdAt": "2020-07-08T18:41:40Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8090", "timeline": [{"oid": "dabd4641037ff0137109d9895f6f26d4c75f398f", "url": "https://github.com/openhab/openhab-addons/commit/dabd4641037ff0137109d9895f6f26d4c75f398f", "message": "added: channel for account announcements (to all devices)\nadded: channel to play sound of Alexa Skills Kit Sound Library\nadded: stacked or grouped announcements (too many request fix)\nadded: sequenced stacked or grouped textToSpeech (too many request fix)\nadded: ttsvolume in stacked or grouped announcements & sequenced textToSpeech (too many request fix)\nremoved: stacked or grouped textToSpeech converted to announcements\nfixed: update or refresh volume immediately after a command (before updated on second command and broke ttsvolume, command, volume sequence)\nfixed: update or refresh volume immediately after manual echo button press (before did not update or refresh anyway)\nfixed: do not show xml tags on echos with display during announcements", "committedDate": "2020-06-20T12:31:36Z", "type": "commit"}, {"oid": "9ae54fec3264cca93cdd10069bf7480bbe352214", "url": "https://github.com/openhab/openhab-addons/commit/9ae54fec3264cca93cdd10069bf7480bbe352214", "message": "added: description of new features to the README\nchanged: the description for the thing type sound", "committedDate": "2020-06-20T12:59:47Z", "type": "commit"}, {"oid": "c599366116ae8a8b176ad06163266c3124e2a639", "url": "https://github.com/openhab/openhab-addons/commit/c599366116ae8a8b176ad06163266c3124e2a639", "message": "changed: .properties encoding to ISO-8859-1\nchanged: @author-tag to real name\napplied: apply spotless-formatter\n\nchanged: sequenced tts to parallel tts\nfixed: parallel websocket messages produces too many requests (queued delay websocket messages)\nfixed: overlapping tts (queued delay tts messages)\nremoved: sound channel, better to use tts ssml\nfixed: do not convert a tts to an announcement if ssml is used, tts can also handle ssml\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-06-27T10:29:59Z", "type": "commit"}, {"oid": "11b0c657d158740a5cf62e56814838382d52c12c", "url": "https://github.com/openhab/openhab-addons/commit/11b0c657d158740a5cf62e56814838382d52c12c", "message": "changed: try to reduce some conflicts (the easy stuff)", "committedDate": "2020-06-27T13:01:09Z", "type": "commit"}, {"oid": "ce1c9e9498159b009f4a4832e80b4367bffe0556", "url": "https://github.com/openhab/openhab-addons/commit/ce1c9e9498159b009f4a4832e80b4367bffe0556", "message": "changed: try to reduce some conflicts (the easy stuff) (2)", "committedDate": "2020-06-27T13:06:38Z", "type": "commit"}, {"oid": "2513b8c6a31d527021efdba3a8ada94bddf16e24", "url": "https://github.com/openhab/openhab-addons/commit/2513b8c6a31d527021efdba3a8ada94bddf16e24", "message": "changed: try to reduce some conflicts (the easy stuff) (3)", "committedDate": "2020-06-27T13:10:06Z", "type": "commit"}, {"oid": "363035de20880a7d07b8fb013974b3656df2c648", "url": "https://github.com/openhab/openhab-addons/commit/363035de20880a7d07b8fb013974b3656df2c648", "message": "changed: channel name accountAnnouncement to sendAnnouncement\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-06-28T09:52:30Z", "type": "commit"}, {"oid": "e9d7da7e28894eb5257aec9df77ed7faad39c37f", "url": "https://github.com/openhab/openhab-addons/commit/e9d7da7e28894eb5257aec9df77ed7faad39c37f", "message": "fixed: unhandled exception stop tts\nfixed: try to reduce crossing requests because of too many requests\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-06-29T15:44:54Z", "type": "commit"}, {"oid": "c56b49b92203a823e241748c2ed3cfad7ee5961b", "url": "https://github.com/openhab/openhab-addons/commit/c56b49b92203a823e241748c2ed3cfad7ee5961b", "message": "added: ttsVolume for every single device (tts)\nfixed: lastKnownVolume and ttsVolume issue (tts)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-01T16:19:17Z", "type": "commit"}, {"oid": "6ff468e7062628011aa9a5467f4b089b37a93314", "url": "https://github.com/openhab/openhab-addons/commit/6ff468e7062628011aa9a5467f4b089b37a93314", "message": "added: ttsVolume for every single device (announcement)\nfixed: lastKnownVolume and ttsVolume issue (announcement)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-01T19:45:59Z", "type": "commit"}, {"oid": "80ee20d538b2bd78439f1e58b7539e16d11e0dfd", "url": "https://github.com/openhab/openhab-addons/commit/80ee20d538b2bd78439f1e58b7539e16d11e0dfd", "message": "fixed: ttsVolume for announcements\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-02T11:55:02Z", "type": "commit"}, {"oid": "691b06a180555e3fd3dc0addf612a2aee0ee496a", "url": "https://github.com/openhab/openhab-addons/commit/691b06a180555e3fd3dc0addf612a2aee0ee496a", "message": "removed: channel for account announcements (better to use grouped or stacked announcements)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-03T15:53:41Z", "type": "commit"}, {"oid": "15079fc9204df85e3c3ca0719c9e39cad95ccaf7", "url": "https://github.com/openhab/openhab-addons/commit/15079fc9204df85e3c3ca0719c9e39cad95ccaf7", "message": "fixed: check for empty text (tts and announcement)\nchanged: the way to extract text from xml (before it did not work for less than 3 chars)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-03T18:28:51Z", "type": "commit"}, {"oid": "51b4874466c7d9b379ffafcf881606872ce8bd43", "url": "https://github.com/openhab/openhab-addons/commit/51b4874466c7d9b379ffafcf881606872ce8bd43", "message": "removed: debug information logging\nfixed: finally fixed crossing requests\nfixed: ttsVolume and lastKnownVolume (tts and announcement) (was still broken before)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-05T08:46:24Z", "type": "commit"}, {"oid": "734990b06eb9d84d856f782fbe331717c7dd03fd", "url": "https://github.com/openhab/openhab-addons/commit/734990b06eb9d84d856f782fbe331717c7dd03fd", "message": "Merge 2.5.x-github_openhab-addons into 2.5.x\n\nConflicts:\n\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java\n\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/channelhandler/ChannelHandlerAnnouncement.java\n\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/channelhandler/ChannelHandlerSendMessage.java\n\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-08T14:40:25Z", "type": "commit"}, {"oid": "7f9e9a23a9f5400337a025b0aaa2c2dd056a7a46", "url": "https://github.com/openhab/openhab-addons/commit/7f9e9a23a9f5400337a025b0aaa2c2dd056a7a46", "message": "fixed: possible nullpointerex\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-08T19:29:03Z", "type": "commit"}, {"oid": "fba610341cca98dd16adb068d90897ddf16ed644", "url": "https://github.com/openhab/openhab-addons/commit/fba610341cca98dd16adb068d90897ddf16ed644", "message": "fixed: possible nullpointerex (2)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-08T19:39:38Z", "type": "commit"}, {"oid": "993de9eba70f9cd9cbdd0f455523b347e1502f00", "url": "https://github.com/openhab/openhab-addons/commit/993de9eba70f9cd9cbdd0f455523b347e1502f00", "message": "Merge 2.5.x-github_openhab-addons into SmartHome", "committedDate": "2020-07-08T19:43:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NTMxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451785317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    announcementTimer = scheduler.schedule(() -> {\n          \n          \n            \n                        sendAnnouncement();\n          \n          \n            \n                    }, 1, TimeUnit.SECONDS);\n          \n          \n            \n                    announcementTimer = scheduler.schedule(this::sendAnnouncement, 1, TimeUnit.SECONDS);", "author": "J-N-K", "createdAt": "2020-07-08T19:45:25Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NzI3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451787270", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (StringUtils.isEmpty(title)) {\n          \n          \n            \n                                content.display.title = \"OpenHAB\";\n          \n          \n            \n                            } else {\n          \n          \n            \n                                content.display.title = title;\n          \n          \n            \n                            }\n          \n          \n            \n                            content.display.title = title == null || title.isEmpty() ? \"openHAB\" : title;\n          \n      \n    \n    \n  \n\nplease do not use StringUtils, we try to remove all occurences", "author": "J-N-K", "createdAt": "2020-07-08T19:49:18Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxODMzMw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451818333", "bodyText": "Never touched this part of code for sure your suggestion looks beter than the current.", "author": "Trinitus01", "createdAt": "2020-07-08T20:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NzI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4OTQ5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451789492", "bodyText": "are you sure that devices is never null and that it's members are never null? Since it seems that it doesn't make sense to do announce to an empty device list, you could check devices == null || devices.isEmpty() after l. 1337 and exit early.", "author": "J-N-K", "createdAt": "2020-07-08T19:53:36Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxODk0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451818944", "bodyText": "I have to check this, will provide a solution tomorrow.", "author": "Trinitus01", "createdAt": "2020-07-08T20:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4OTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5ODEyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451798126", "bodyText": "add a constructor\n        public TargetDevice(JsonDevices.Device device) {\n            deviceSerialNumber= device.serialNumber;\n            deviceTypeId = device.deviceType;\n        }\n\nto JsonAccouncementTarget.TargetDevice and change this part to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n          \n          \n            \n                            for (int i = 0; i < devices.size(); i++) {\n          \n          \n            \n                                Device device = devices.get(i);\n          \n          \n            \n                                TargetDevice deviceTarget = new TargetDevice();\n          \n          \n            \n                                deviceTarget.deviceSerialNumber = device.serialNumber;\n          \n          \n            \n                                deviceTarget.deviceTypeId = device.deviceType;\n          \n          \n            \n                                targetDevices[i] = deviceTarget;\n          \n          \n            \n                            }\n          \n          \n            \n                            target.devices = targetDevices;\n          \n          \n            \n                            TargetDevice[] targetDevices = devices.stream().map(TargetDevice::new).collect(Collectors.toList()).toArray(TargetDevice[]::new);", "author": "J-N-K", "createdAt": "2020-07-08T20:11:17Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;\n+                TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n+                for (int i = 0; i < devices.size(); i++) {\n+                    Device device = devices.get(i);\n+                    TargetDevice deviceTarget = new TargetDevice();\n+                    deviceTarget.deviceSerialNumber = device.serialNumber;\n+                    deviceTarget.deviceTypeId = device.deviceType;\n+                    targetDevices[i] = deviceTarget;\n+                }\n+                target.devices = targetDevices;", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxOTEyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451819124", "bodyText": "I have to check this, will provide a solution tomorrow.", "author": "Trinitus01", "createdAt": "2020-07-08T20:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5ODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNjA3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452316079", "bodyText": "It seems this doesn't work, got a compilation error.", "author": "Trinitus01", "createdAt": "2020-07-09T15:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5ODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MjQzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452372435", "bodyText": "My fault. This is a Java11 feature. Leave it as-is then.", "author": "J-N-K", "createdAt": "2020-07-09T17:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5ODEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5ODM4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451798381", "bodyText": "see above, remove StringUtils", "author": "J-N-K", "createdAt": "2020-07-08T20:11:50Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;\n+                TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n+                for (int i = 0; i < devices.size(); i++) {\n+                    Device device = devices.get(i);\n+                    TargetDevice deviceTarget = new TargetDevice();\n+                    deviceTarget.deviceSerialNumber = device.serialNumber;\n+                    deviceTarget.deviceTypeId = device.deviceType;\n+                    targetDevices[i] = deviceTarget;\n+                }\n+                target.devices = targetDevices;\n+                parameters.put(\"target\", target);\n \n-        String accountCustomerId = this.accountCustomerId;\n-        String customerId = StringUtils.isEmpty(accountCustomerId) ? device.deviceOwnerCustomerId : accountCustomerId;\n+                String accountCustomerId = this.accountCustomerId;\n+                String customerId = StringUtils.isEmpty(accountCustomerId)", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMTMyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451821325", "bodyText": "Never touched this code. StringUtils is still used in the suggested lines!?!", "author": "Trinitus01", "createdAt": "2020-07-08T20:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5ODM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5OTAzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451799039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"AlexaAnnouncement\",\n          \n          \n            \n                                    parameters, ttsVolumes.toArray(new Integer[ttsVolumes.size()]),\n          \n          \n            \n                                    standardVolumes.toArray(new Integer[standardVolumes.size()]));\n          \n          \n            \n                            executeSequenceCommandWithVolume(devices.toArray(Device[]::new), \"AlexaAnnouncement\",\n          \n          \n            \n                                    parameters, ttsVolumes.toArray(Integer[]::new), standardVolumes.toArray(Integer[]::new));", "author": "J-N-K", "createdAt": "2020-07-08T20:13:21Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;\n+                TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n+                for (int i = 0; i < devices.size(); i++) {\n+                    Device device = devices.get(i);\n+                    TargetDevice deviceTarget = new TargetDevice();\n+                    deviceTarget.deviceSerialNumber = device.serialNumber;\n+                    deviceTarget.deviceTypeId = device.deviceType;\n+                    targetDevices[i] = deviceTarget;\n+                }\n+                target.devices = targetDevices;\n+                parameters.put(\"target\", target);\n \n-        String accountCustomerId = this.accountCustomerId;\n-        String customerId = StringUtils.isEmpty(accountCustomerId) ? device.deviceOwnerCustomerId : accountCustomerId;\n+                String accountCustomerId = this.accountCustomerId;\n+                String customerId = StringUtils.isEmpty(accountCustomerId)\n+                        ? devices.toArray(new Device[devices.size()])[0].deviceOwnerCustomerId\n+                        : accountCustomerId;\n \n-        if (customerId != null) {\n-            parameters.put(\"customerId\", customerId);\n+                if (customerId != null) {\n+                    parameters.put(\"customerId\", customerId);\n+                }\n+                executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"AlexaAnnouncement\",\n+                        parameters, ttsVolumes.toArray(new Integer[ttsVolumes.size()]),\n+                        standardVolumes.toArray(new Integer[standardVolumes.size()]));", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNTg5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452315891", "bodyText": "It seems this doesn't work, got a compilation error.", "author": "Trinitus01", "createdAt": "2020-07-09T15:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5OTAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MjYzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452372632", "bodyText": "see above", "author": "J-N-K", "createdAt": "2020-07-09T17:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5OTAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzA1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451803050", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!textToSpeeches.containsKey(json)) {\n          \n          \n            \n                        jsonTextToSpeech.devices = new ArrayList<>();\n          \n          \n            \n                        jsonTextToSpeech.ttsVolumes = new ArrayList<>();\n          \n          \n            \n                        jsonTextToSpeech.standardVolumes = new ArrayList<>();\n          \n          \n            \n                        textToSpeeches.put(json, jsonTextToSpeech);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        jsonTextToSpeech = textToSpeeches.get(json);\n          \n          \n            \n                    }\n          \n          \n            \n                    jsonTextToSpeech = textToSpeeches.computeIfAbsent(json, k -> { \n          \n          \n            \n                        jsonTextToSpeech.devices = new ArrayList<>();\n          \n          \n            \n                        jsonTextToSpeech.ttsVolumes = new ArrayList<>();\n          \n          \n            \n                        jsonTextToSpeech.standardVolumes = new ArrayList<>();\n          \n          \n            \n                    });", "author": "J-N-K", "createdAt": "2020-07-08T20:21:34Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;\n+                TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n+                for (int i = 0; i < devices.size(); i++) {\n+                    Device device = devices.get(i);\n+                    TargetDevice deviceTarget = new TargetDevice();\n+                    deviceTarget.deviceSerialNumber = device.serialNumber;\n+                    deviceTarget.deviceTypeId = device.deviceType;\n+                    targetDevices[i] = deviceTarget;\n+                }\n+                target.devices = targetDevices;\n+                parameters.put(\"target\", target);\n \n-        String accountCustomerId = this.accountCustomerId;\n-        String customerId = StringUtils.isEmpty(accountCustomerId) ? device.deviceOwnerCustomerId : accountCustomerId;\n+                String accountCustomerId = this.accountCustomerId;\n+                String customerId = StringUtils.isEmpty(accountCustomerId)\n+                        ? devices.toArray(new Device[devices.size()])[0].deviceOwnerCustomerId\n+                        : accountCustomerId;\n \n-        if (customerId != null) {\n-            parameters.put(\"customerId\", customerId);\n+                if (customerId != null) {\n+                    parameters.put(\"customerId\", customerId);\n+                }\n+                executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"AlexaAnnouncement\",\n+                        parameters, ttsVolumes.toArray(new Integer[ttsVolumes.size()]),\n+                        standardVolumes.toArray(new Integer[standardVolumes.size()]));\n+            } catch (IOException | URISyntaxException e) {\n+                logger.error(\"send textToSpeech fails with unexpected error\", e);\n+            } finally {\n+                announcementSenderUnblockFuture = scheduler.schedule(this::queuedAnnouncement, speak.length() * 100,\n+                        TimeUnit.MILLISECONDS);\n+            }\n+        } else {\n+            announcementQueueRunning.set(false);\n+            announcementSenderUnblockFuture = null;\n         }\n-        executeSequenceCommandWithVolume(device, \"AlexaAnnouncement\", parameters, ttsVolume, standardVolume);\n     }\n \n-    public void textToSpeech(Device device, String text, @Nullable Integer ttsVolume, int standardVolume)\n-            throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"textToSpeak\", text);\n-        executeSequenceCommandWithVolume(device, \"Alexa.Speak\", parameters, ttsVolume, standardVolume);\n+    public synchronized void textToSpeech(Device device, String text, @Nullable Integer ttsVolume,\n+            @Nullable Integer standardVolume) {\n+        if (text == null || text.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (textToSpeechTimer != null) {\n+            textToSpeechTimer.cancel(true);\n+        }\n+        JsonTextToSpeech jsonTextToSpeech = new JsonTextToSpeech();\n+        jsonTextToSpeech.text = text;\n+        String json = gson.toJson(jsonTextToSpeech);\n+        if (!textToSpeeches.containsKey(json)) {\n+            jsonTextToSpeech.devices = new ArrayList<>();\n+            jsonTextToSpeech.ttsVolumes = new ArrayList<>();\n+            jsonTextToSpeech.standardVolumes = new ArrayList<>();\n+            textToSpeeches.put(json, jsonTextToSpeech);\n+        } else {\n+            jsonTextToSpeech = textToSpeeches.get(json);\n+        }", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMTUxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452331517", "bodyText": "It seems this doesn't work, got a compilation error. Never used this function before.", "author": "Trinitus01", "createdAt": "2020-07-09T16:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MjQwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452382406", "bodyText": "Yeah. Didn't think about effective final. I have mad a suggestions via PR to your repo.", "author": "J-N-K", "createdAt": "2020-07-09T17:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzUyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451803527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    textToSpeechTimer = scheduler.schedule(() -> {\n          \n          \n            \n                        sendTextToSpeech();\n          \n          \n            \n                    }, 1, TimeUnit.SECONDS);\n          \n          \n            \n                    textToSpeechTimer = scheduler.schedule(this::sendTextToSpeech, 1, TimeUnit.SECONDS);", "author": "J-N-K", "createdAt": "2020-07-08T20:22:26Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;\n+                TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n+                for (int i = 0; i < devices.size(); i++) {\n+                    Device device = devices.get(i);\n+                    TargetDevice deviceTarget = new TargetDevice();\n+                    deviceTarget.deviceSerialNumber = device.serialNumber;\n+                    deviceTarget.deviceTypeId = device.deviceType;\n+                    targetDevices[i] = deviceTarget;\n+                }\n+                target.devices = targetDevices;\n+                parameters.put(\"target\", target);\n \n-        String accountCustomerId = this.accountCustomerId;\n-        String customerId = StringUtils.isEmpty(accountCustomerId) ? device.deviceOwnerCustomerId : accountCustomerId;\n+                String accountCustomerId = this.accountCustomerId;\n+                String customerId = StringUtils.isEmpty(accountCustomerId)\n+                        ? devices.toArray(new Device[devices.size()])[0].deviceOwnerCustomerId\n+                        : accountCustomerId;\n \n-        if (customerId != null) {\n-            parameters.put(\"customerId\", customerId);\n+                if (customerId != null) {\n+                    parameters.put(\"customerId\", customerId);\n+                }\n+                executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"AlexaAnnouncement\",\n+                        parameters, ttsVolumes.toArray(new Integer[ttsVolumes.size()]),\n+                        standardVolumes.toArray(new Integer[standardVolumes.size()]));\n+            } catch (IOException | URISyntaxException e) {\n+                logger.error(\"send textToSpeech fails with unexpected error\", e);\n+            } finally {\n+                announcementSenderUnblockFuture = scheduler.schedule(this::queuedAnnouncement, speak.length() * 100,\n+                        TimeUnit.MILLISECONDS);\n+            }\n+        } else {\n+            announcementQueueRunning.set(false);\n+            announcementSenderUnblockFuture = null;\n         }\n-        executeSequenceCommandWithVolume(device, \"AlexaAnnouncement\", parameters, ttsVolume, standardVolume);\n     }\n \n-    public void textToSpeech(Device device, String text, @Nullable Integer ttsVolume, int standardVolume)\n-            throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"textToSpeak\", text);\n-        executeSequenceCommandWithVolume(device, \"Alexa.Speak\", parameters, ttsVolume, standardVolume);\n+    public synchronized void textToSpeech(Device device, String text, @Nullable Integer ttsVolume,\n+            @Nullable Integer standardVolume) {\n+        if (text == null || text.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (textToSpeechTimer != null) {\n+            textToSpeechTimer.cancel(true);\n+        }\n+        JsonTextToSpeech jsonTextToSpeech = new JsonTextToSpeech();\n+        jsonTextToSpeech.text = text;\n+        String json = gson.toJson(jsonTextToSpeech);\n+        if (!textToSpeeches.containsKey(json)) {\n+            jsonTextToSpeech.devices = new ArrayList<>();\n+            jsonTextToSpeech.ttsVolumes = new ArrayList<>();\n+            jsonTextToSpeech.standardVolumes = new ArrayList<>();\n+            textToSpeeches.put(json, jsonTextToSpeech);\n+        } else {\n+            jsonTextToSpeech = textToSpeeches.get(json);\n+        }\n+        jsonTextToSpeech.devices.add(device);\n+        jsonTextToSpeech.ttsVolumes.add(ttsVolume);\n+        jsonTextToSpeech.standardVolumes.add(standardVolume);\n+        textToSpeechTimer = scheduler.schedule(() -> {\n+            sendTextToSpeech();\n+        }, 1, TimeUnit.SECONDS);", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNTU5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451805591", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (String json : textToSpeeches.keySet()) {\n          \n          \n            \n                        JsonTextToSpeech jsonTextToSpeech = textToSpeeches.get(json);\n          \n          \n            \n                        textToSpeechQueue.add(jsonTextToSpeech);\n          \n          \n            \n                        if (textToSpeechQueueRunning.compareAndSet(false, true)) {\n          \n          \n            \n                            queuedTextToSpeech();\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    textToSpeechQueue.addAll(textToSpeeches.values());\n          \n          \n            \n                    if (textToSpeechQueueRunning.compareAndSet(false, true)) {\n          \n          \n            \n                        queuedTextToSpeech();\n          \n          \n            \n                    }", "author": "J-N-K", "createdAt": "2020-07-08T20:26:24Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;\n+                TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n+                for (int i = 0; i < devices.size(); i++) {\n+                    Device device = devices.get(i);\n+                    TargetDevice deviceTarget = new TargetDevice();\n+                    deviceTarget.deviceSerialNumber = device.serialNumber;\n+                    deviceTarget.deviceTypeId = device.deviceType;\n+                    targetDevices[i] = deviceTarget;\n+                }\n+                target.devices = targetDevices;\n+                parameters.put(\"target\", target);\n \n-        String accountCustomerId = this.accountCustomerId;\n-        String customerId = StringUtils.isEmpty(accountCustomerId) ? device.deviceOwnerCustomerId : accountCustomerId;\n+                String accountCustomerId = this.accountCustomerId;\n+                String customerId = StringUtils.isEmpty(accountCustomerId)\n+                        ? devices.toArray(new Device[devices.size()])[0].deviceOwnerCustomerId\n+                        : accountCustomerId;\n \n-        if (customerId != null) {\n-            parameters.put(\"customerId\", customerId);\n+                if (customerId != null) {\n+                    parameters.put(\"customerId\", customerId);\n+                }\n+                executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"AlexaAnnouncement\",\n+                        parameters, ttsVolumes.toArray(new Integer[ttsVolumes.size()]),\n+                        standardVolumes.toArray(new Integer[standardVolumes.size()]));\n+            } catch (IOException | URISyntaxException e) {\n+                logger.error(\"send textToSpeech fails with unexpected error\", e);\n+            } finally {\n+                announcementSenderUnblockFuture = scheduler.schedule(this::queuedAnnouncement, speak.length() * 100,\n+                        TimeUnit.MILLISECONDS);\n+            }\n+        } else {\n+            announcementQueueRunning.set(false);\n+            announcementSenderUnblockFuture = null;\n         }\n-        executeSequenceCommandWithVolume(device, \"AlexaAnnouncement\", parameters, ttsVolume, standardVolume);\n     }\n \n-    public void textToSpeech(Device device, String text, @Nullable Integer ttsVolume, int standardVolume)\n-            throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"textToSpeak\", text);\n-        executeSequenceCommandWithVolume(device, \"Alexa.Speak\", parameters, ttsVolume, standardVolume);\n+    public synchronized void textToSpeech(Device device, String text, @Nullable Integer ttsVolume,\n+            @Nullable Integer standardVolume) {\n+        if (text == null || text.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (textToSpeechTimer != null) {\n+            textToSpeechTimer.cancel(true);\n+        }\n+        JsonTextToSpeech jsonTextToSpeech = new JsonTextToSpeech();\n+        jsonTextToSpeech.text = text;\n+        String json = gson.toJson(jsonTextToSpeech);\n+        if (!textToSpeeches.containsKey(json)) {\n+            jsonTextToSpeech.devices = new ArrayList<>();\n+            jsonTextToSpeech.ttsVolumes = new ArrayList<>();\n+            jsonTextToSpeech.standardVolumes = new ArrayList<>();\n+            textToSpeeches.put(json, jsonTextToSpeech);\n+        } else {\n+            jsonTextToSpeech = textToSpeeches.get(json);\n+        }\n+        jsonTextToSpeech.devices.add(device);\n+        jsonTextToSpeech.ttsVolumes.add(ttsVolume);\n+        jsonTextToSpeech.standardVolumes.add(standardVolume);\n+        textToSpeechTimer = scheduler.schedule(() -> {\n+            sendTextToSpeech();\n+        }, 1, TimeUnit.SECONDS);\n     }\n \n-    private void executeSequenceCommandWithVolume(@Nullable Device device, String command,\n-            @Nullable Map<String, Object> parameters, @Nullable Integer ttsVolume, int standardVolume)\n-            throws IOException, URISyntaxException {\n-        if (ttsVolume != null) {\n-            JsonArray nodesToExecute = new JsonArray();\n-            Map<String, Object> volumeParameters = new HashMap<>();\n-            // add tts volume\n-            volumeParameters.clear();\n-            volumeParameters.put(\"value\", ttsVolume);\n-            nodesToExecute.add(createExecutionNode(device, \"Alexa.DeviceControls.Volume\", volumeParameters));\n-            // add command\n-            nodesToExecute.add(createExecutionNode(device, command, parameters));\n-            // add volume\n-            volumeParameters.clear();\n-            volumeParameters.put(\"value\", standardVolume);\n-            nodesToExecute.add(createExecutionNode(device, \"Alexa.DeviceControls.Volume\", volumeParameters));\n-\n-            executeSequenceNodes(nodesToExecute);\n+    private void sendTextToSpeech() {\n+        if (textToSpeechTimer != null) {\n+            textToSpeechTimer.cancel(true);\n+        }\n+        for (String json : textToSpeeches.keySet()) {\n+            JsonTextToSpeech jsonTextToSpeech = textToSpeeches.get(json);\n+            textToSpeechQueue.add(jsonTextToSpeech);\n+            if (textToSpeechQueueRunning.compareAndSet(false, true)) {\n+                queuedTextToSpeech();\n+            }\n+        }", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNjA0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451806042", "bodyText": "see above", "author": "J-N-K", "createdAt": "2020-07-08T20:27:20Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;\n+                TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n+                for (int i = 0; i < devices.size(); i++) {\n+                    Device device = devices.get(i);\n+                    TargetDevice deviceTarget = new TargetDevice();\n+                    deviceTarget.deviceSerialNumber = device.serialNumber;\n+                    deviceTarget.deviceTypeId = device.deviceType;\n+                    targetDevices[i] = deviceTarget;\n+                }\n+                target.devices = targetDevices;\n+                parameters.put(\"target\", target);\n \n-        String accountCustomerId = this.accountCustomerId;\n-        String customerId = StringUtils.isEmpty(accountCustomerId) ? device.deviceOwnerCustomerId : accountCustomerId;\n+                String accountCustomerId = this.accountCustomerId;\n+                String customerId = StringUtils.isEmpty(accountCustomerId)\n+                        ? devices.toArray(new Device[devices.size()])[0].deviceOwnerCustomerId\n+                        : accountCustomerId;\n \n-        if (customerId != null) {\n-            parameters.put(\"customerId\", customerId);\n+                if (customerId != null) {\n+                    parameters.put(\"customerId\", customerId);\n+                }\n+                executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"AlexaAnnouncement\",\n+                        parameters, ttsVolumes.toArray(new Integer[ttsVolumes.size()]),\n+                        standardVolumes.toArray(new Integer[standardVolumes.size()]));\n+            } catch (IOException | URISyntaxException e) {\n+                logger.error(\"send textToSpeech fails with unexpected error\", e);\n+            } finally {\n+                announcementSenderUnblockFuture = scheduler.schedule(this::queuedAnnouncement, speak.length() * 100,\n+                        TimeUnit.MILLISECONDS);\n+            }\n+        } else {\n+            announcementQueueRunning.set(false);\n+            announcementSenderUnblockFuture = null;\n         }\n-        executeSequenceCommandWithVolume(device, \"AlexaAnnouncement\", parameters, ttsVolume, standardVolume);\n     }\n \n-    public void textToSpeech(Device device, String text, @Nullable Integer ttsVolume, int standardVolume)\n-            throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"textToSpeak\", text);\n-        executeSequenceCommandWithVolume(device, \"Alexa.Speak\", parameters, ttsVolume, standardVolume);\n+    public synchronized void textToSpeech(Device device, String text, @Nullable Integer ttsVolume,\n+            @Nullable Integer standardVolume) {\n+        if (text == null || text.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (textToSpeechTimer != null) {\n+            textToSpeechTimer.cancel(true);\n+        }\n+        JsonTextToSpeech jsonTextToSpeech = new JsonTextToSpeech();\n+        jsonTextToSpeech.text = text;\n+        String json = gson.toJson(jsonTextToSpeech);\n+        if (!textToSpeeches.containsKey(json)) {\n+            jsonTextToSpeech.devices = new ArrayList<>();\n+            jsonTextToSpeech.ttsVolumes = new ArrayList<>();\n+            jsonTextToSpeech.standardVolumes = new ArrayList<>();\n+            textToSpeeches.put(json, jsonTextToSpeech);\n+        } else {\n+            jsonTextToSpeech = textToSpeeches.get(json);\n+        }\n+        jsonTextToSpeech.devices.add(device);\n+        jsonTextToSpeech.ttsVolumes.add(ttsVolume);\n+        jsonTextToSpeech.standardVolumes.add(standardVolume);\n+        textToSpeechTimer = scheduler.schedule(() -> {\n+            sendTextToSpeech();\n+        }, 1, TimeUnit.SECONDS);\n     }\n \n-    private void executeSequenceCommandWithVolume(@Nullable Device device, String command,\n-            @Nullable Map<String, Object> parameters, @Nullable Integer ttsVolume, int standardVolume)\n-            throws IOException, URISyntaxException {\n-        if (ttsVolume != null) {\n-            JsonArray nodesToExecute = new JsonArray();\n-            Map<String, Object> volumeParameters = new HashMap<>();\n-            // add tts volume\n-            volumeParameters.clear();\n-            volumeParameters.put(\"value\", ttsVolume);\n-            nodesToExecute.add(createExecutionNode(device, \"Alexa.DeviceControls.Volume\", volumeParameters));\n-            // add command\n-            nodesToExecute.add(createExecutionNode(device, command, parameters));\n-            // add volume\n-            volumeParameters.clear();\n-            volumeParameters.put(\"value\", standardVolume);\n-            nodesToExecute.add(createExecutionNode(device, \"Alexa.DeviceControls.Volume\", volumeParameters));\n-\n-            executeSequenceNodes(nodesToExecute);\n+    private void sendTextToSpeech() {\n+        if (textToSpeechTimer != null) {\n+            textToSpeechTimer.cancel(true);\n+        }\n+        for (String json : textToSpeeches.keySet()) {\n+            JsonTextToSpeech jsonTextToSpeech = textToSpeeches.get(json);\n+            textToSpeechQueue.add(jsonTextToSpeech);\n+            if (textToSpeechQueueRunning.compareAndSet(false, true)) {\n+                queuedTextToSpeech();\n+            }\n+        }\n+        textToSpeeches.clear();\n+    }\n+\n+    public void queuedTextToSpeech() {\n+        JsonTextToSpeech jsonTextToSpeech = textToSpeechQueue.poll();\n+        if (jsonTextToSpeech != null) {\n+            String text = jsonTextToSpeech.text;\n+            try {\n+                List<Device> devices = jsonTextToSpeech.devices;\n+                List<Integer> ttsVolumes = jsonTextToSpeech.ttsVolumes;\n+                List<Integer> standardVolumes = jsonTextToSpeech.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"textToSpeak\", text);\n+                executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"Alexa.Speak\", parameters,", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNjMxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451806312", "bodyText": "reduce to warn, error is reserved for fatal framework failures", "author": "J-N-K", "createdAt": "2020-07-08T20:27:50Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1243,73 +1286,223 @@ public void sendNotificationToMobileApp(String customerId, String text, @Nullabl\n         executeSequenceCommand(null, \"Alexa.Notifications.SendMobilePush\", parameters);\n     }\n \n-    public void sendAnnouncement(Device device, String speak, String bodyText, @Nullable String title,\n-            @Nullable Integer ttsVolume, int standardVolume) throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"expireAfter\", \"PT5S\");\n-        JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n-        JsonAnnouncementContent content = new JsonAnnouncementContent();\n-        if (StringUtils.isEmpty(title)) {\n-            content.display.title = \"OpenHAB\";\n+    public synchronized void announcement(Device device, String speak, String bodyText, @Nullable String title,\n+            @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (speak == null || speak.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        JsonAnnouncement jsonAnnouncement = new JsonAnnouncement();\n+        jsonAnnouncement.speak = speak;\n+        jsonAnnouncement.bodyText = bodyText;\n+        jsonAnnouncement.title = title;\n+        String json = gson.toJson(jsonAnnouncement);\n+        if (!announcements.containsKey(json)) {\n+            jsonAnnouncement.devices = new ArrayList<>();\n+            jsonAnnouncement.ttsVolumes = new ArrayList<>();\n+            jsonAnnouncement.standardVolumes = new ArrayList<>();\n+            announcements.put(json, jsonAnnouncement);\n         } else {\n-            content.display.title = title;\n+            jsonAnnouncement = announcements.get(json);\n         }\n-        content.display.body = bodyText;\n-        if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n-            content.speak.type = \"ssml\";\n+        jsonAnnouncement.devices.add(device);\n+        jsonAnnouncement.ttsVolumes.add(ttsVolume);\n+        jsonAnnouncement.standardVolumes.add(standardVolume);\n+        announcementTimer = scheduler.schedule(() -> {\n+            sendAnnouncement();\n+        }, 1, TimeUnit.SECONDS);\n+    }\n+\n+    private void sendAnnouncement() {\n+        if (announcementTimer != null) {\n+            announcementTimer.cancel(true);\n+        }\n+        for (String json : announcements.keySet()) {\n+            JsonAnnouncement jsonAnnouncement = announcements.get(json);\n+            announcementQueue.add(jsonAnnouncement);\n+            if (announcementQueueRunning.compareAndSet(false, true)) {\n+                queuedAnnouncement();\n+            }\n         }\n-        content.speak.value = speak;\n+        announcements.clear();\n+    }\n+\n+    public void queuedAnnouncement() {\n+        JsonAnnouncement jsonAnnouncement = announcementQueue.poll();\n+        if (jsonAnnouncement != null) {\n+            String speak = jsonAnnouncement.speak;\n+            try {\n+                List<Device> devices = jsonAnnouncement.devices;\n+                String bodyText = jsonAnnouncement.bodyText;\n+                String title = jsonAnnouncement.title;\n+                List<Integer> ttsVolumes = jsonAnnouncement.ttsVolumes;\n+                List<Integer> standardVolumes = jsonAnnouncement.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"expireAfter\", \"PT5S\");\n+                JsonAnnouncementContent[] contentArray = new JsonAnnouncementContent[1];\n+                JsonAnnouncementContent content = new JsonAnnouncementContent();\n+                if (StringUtils.isEmpty(title)) {\n+                    content.display.title = \"OpenHAB\";\n+                } else {\n+                    content.display.title = title;\n+                }\n+                content.display.body = bodyText;\n+                content.display.body = speak.replaceAll(\"<.+?>\", \"\");\n+                if (speak.startsWith(\"<speak>\") && speak.endsWith(\"</speak>\")) {\n+                    content.speak.type = \"ssml\";\n+                }\n+                content.speak.value = speak;\n \n-        contentArray[0] = content;\n+                contentArray[0] = content;\n \n-        parameters.put(\"content\", contentArray);\n+                parameters.put(\"content\", contentArray);\n \n-        JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n-        target.customerId = device.deviceOwnerCustomerId;\n-        TargetDevice[] devices = new TargetDevice[1];\n-        TargetDevice deviceTarget = new TargetDevice();\n-        deviceTarget.deviceSerialNumber = device.serialNumber;\n-        deviceTarget.deviceTypeId = device.deviceType;\n-        devices[0] = deviceTarget;\n-        target.devices = devices;\n-        parameters.put(\"target\", target);\n+                JsonAnnouncementTarget target = new JsonAnnouncementTarget();\n+                target.customerId = devices.get(0).deviceOwnerCustomerId;\n+                TargetDevice[] targetDevices = new TargetDevice[devices.size()];\n+                for (int i = 0; i < devices.size(); i++) {\n+                    Device device = devices.get(i);\n+                    TargetDevice deviceTarget = new TargetDevice();\n+                    deviceTarget.deviceSerialNumber = device.serialNumber;\n+                    deviceTarget.deviceTypeId = device.deviceType;\n+                    targetDevices[i] = deviceTarget;\n+                }\n+                target.devices = targetDevices;\n+                parameters.put(\"target\", target);\n \n-        String accountCustomerId = this.accountCustomerId;\n-        String customerId = StringUtils.isEmpty(accountCustomerId) ? device.deviceOwnerCustomerId : accountCustomerId;\n+                String accountCustomerId = this.accountCustomerId;\n+                String customerId = StringUtils.isEmpty(accountCustomerId)\n+                        ? devices.toArray(new Device[devices.size()])[0].deviceOwnerCustomerId\n+                        : accountCustomerId;\n \n-        if (customerId != null) {\n-            parameters.put(\"customerId\", customerId);\n+                if (customerId != null) {\n+                    parameters.put(\"customerId\", customerId);\n+                }\n+                executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"AlexaAnnouncement\",\n+                        parameters, ttsVolumes.toArray(new Integer[ttsVolumes.size()]),\n+                        standardVolumes.toArray(new Integer[standardVolumes.size()]));\n+            } catch (IOException | URISyntaxException e) {\n+                logger.error(\"send textToSpeech fails with unexpected error\", e);\n+            } finally {\n+                announcementSenderUnblockFuture = scheduler.schedule(this::queuedAnnouncement, speak.length() * 100,\n+                        TimeUnit.MILLISECONDS);\n+            }\n+        } else {\n+            announcementQueueRunning.set(false);\n+            announcementSenderUnblockFuture = null;\n         }\n-        executeSequenceCommandWithVolume(device, \"AlexaAnnouncement\", parameters, ttsVolume, standardVolume);\n     }\n \n-    public void textToSpeech(Device device, String text, @Nullable Integer ttsVolume, int standardVolume)\n-            throws IOException, URISyntaxException {\n-        Map<String, Object> parameters = new HashMap<>();\n-        parameters.put(\"textToSpeak\", text);\n-        executeSequenceCommandWithVolume(device, \"Alexa.Speak\", parameters, ttsVolume, standardVolume);\n+    public synchronized void textToSpeech(Device device, String text, @Nullable Integer ttsVolume,\n+            @Nullable Integer standardVolume) {\n+        if (text == null || text.replaceAll(\"<.+?>\", \"\").trim().isEmpty() || ttsVolume == null || standardVolume == null) {\n+            return;\n+        }\n+        if (textToSpeechTimer != null) {\n+            textToSpeechTimer.cancel(true);\n+        }\n+        JsonTextToSpeech jsonTextToSpeech = new JsonTextToSpeech();\n+        jsonTextToSpeech.text = text;\n+        String json = gson.toJson(jsonTextToSpeech);\n+        if (!textToSpeeches.containsKey(json)) {\n+            jsonTextToSpeech.devices = new ArrayList<>();\n+            jsonTextToSpeech.ttsVolumes = new ArrayList<>();\n+            jsonTextToSpeech.standardVolumes = new ArrayList<>();\n+            textToSpeeches.put(json, jsonTextToSpeech);\n+        } else {\n+            jsonTextToSpeech = textToSpeeches.get(json);\n+        }\n+        jsonTextToSpeech.devices.add(device);\n+        jsonTextToSpeech.ttsVolumes.add(ttsVolume);\n+        jsonTextToSpeech.standardVolumes.add(standardVolume);\n+        textToSpeechTimer = scheduler.schedule(() -> {\n+            sendTextToSpeech();\n+        }, 1, TimeUnit.SECONDS);\n     }\n \n-    private void executeSequenceCommandWithVolume(@Nullable Device device, String command,\n-            @Nullable Map<String, Object> parameters, @Nullable Integer ttsVolume, int standardVolume)\n-            throws IOException, URISyntaxException {\n-        if (ttsVolume != null) {\n-            JsonArray nodesToExecute = new JsonArray();\n-            Map<String, Object> volumeParameters = new HashMap<>();\n-            // add tts volume\n-            volumeParameters.clear();\n-            volumeParameters.put(\"value\", ttsVolume);\n-            nodesToExecute.add(createExecutionNode(device, \"Alexa.DeviceControls.Volume\", volumeParameters));\n-            // add command\n-            nodesToExecute.add(createExecutionNode(device, command, parameters));\n-            // add volume\n-            volumeParameters.clear();\n-            volumeParameters.put(\"value\", standardVolume);\n-            nodesToExecute.add(createExecutionNode(device, \"Alexa.DeviceControls.Volume\", volumeParameters));\n-\n-            executeSequenceNodes(nodesToExecute);\n+    private void sendTextToSpeech() {\n+        if (textToSpeechTimer != null) {\n+            textToSpeechTimer.cancel(true);\n+        }\n+        for (String json : textToSpeeches.keySet()) {\n+            JsonTextToSpeech jsonTextToSpeech = textToSpeeches.get(json);\n+            textToSpeechQueue.add(jsonTextToSpeech);\n+            if (textToSpeechQueueRunning.compareAndSet(false, true)) {\n+                queuedTextToSpeech();\n+            }\n+        }\n+        textToSpeeches.clear();\n+    }\n+\n+    public void queuedTextToSpeech() {\n+        JsonTextToSpeech jsonTextToSpeech = textToSpeechQueue.poll();\n+        if (jsonTextToSpeech != null) {\n+            String text = jsonTextToSpeech.text;\n+            try {\n+                List<Device> devices = jsonTextToSpeech.devices;\n+                List<Integer> ttsVolumes = jsonTextToSpeech.ttsVolumes;\n+                List<Integer> standardVolumes = jsonTextToSpeech.standardVolumes;\n+\n+                Map<String, Object> parameters = new HashMap<>();\n+                parameters.put(\"textToSpeak\", text);\n+                executeSequenceCommandWithVolume(devices.toArray(new Device[devices.size()]), \"Alexa.Speak\", parameters,\n+                        ttsVolumes.toArray(new Integer[ttsVolumes.size()]),\n+                        standardVolumes.toArray(new Integer[standardVolumes.size()]));\n+            } catch (IOException | URISyntaxException e) {\n+                logger.error(\"send textToSpeech fails with unexpected error\", e);", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMTg1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451821858", "bodyText": "Ok, i wil change it to \"warn\".", "author": "Trinitus01", "createdAt": "2020-07-08T20:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNjMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNjgxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451806810", "bodyText": "see above", "author": "J-N-K", "createdAt": "2020-07-08T20:28:50Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1322,24 +1515,49 @@ public void executeSequenceCommand(@Nullable Device device, String command,\n         executeSequenceNode(nodeToExecute);\n     }\n \n-    private void executeSequenceNode(JsonObject nodeToExecute) throws IOException, URISyntaxException {\n-        JsonObject sequenceJson = new JsonObject();\n-        sequenceJson.addProperty(\"@type\", \"com.amazon.alexa.behaviors.model.Sequence\");\n-        sequenceJson.add(\"startNode\", nodeToExecute);\n-\n-        JsonStartRoutineRequest request = new JsonStartRoutineRequest();\n-        request.sequenceJson = gson.toJson(sequenceJson);\n-        String json = gson.toJson(request);\n-\n-        Map<String, String> headers = new HashMap<>();\n-        headers.put(\"Routines-Version\", \"1.1.218665\");\n+    private void executeSequenceNode(JsonObject nodeToExecute) {\n+        sequenceNodeQueue.add(nodeToExecute);\n+        if (sequenceNodeQueueRunning.compareAndSet(false, true)) {\n+            queuedExecuteSequenceNode();\n+        }\n+    }\n \n-        makeRequest(\"POST\", alexaServer + \"/api/behaviors/preview\", json, true, true, null, 3);\n+    private void queuedExecuteSequenceNode() {\n+        JsonObject nodeToExecute = sequenceNodeQueue.poll();\n+        if (nodeToExecute != null) {\n+            try {\n+                JsonObject sequenceJson = new JsonObject();\n+                sequenceJson.addProperty(\"@type\", \"com.amazon.alexa.behaviors.model.Sequence\");\n+                sequenceJson.add(\"startNode\", nodeToExecute);\n+\n+                JsonStartRoutineRequest request = new JsonStartRoutineRequest();\n+                request.sequenceJson = gson.toJson(sequenceJson);\n+                String json = gson.toJson(request);\n+\n+                Map<String, String> headers = new HashMap<>();\n+                headers.put(\"Routines-Version\", \"1.1.218665\");\n+\n+                makeRequest(\"POST\", alexaServer + \"/api/behaviors/preview\", json, true, true, null, 3);\n+            } catch (IOException | URISyntaxException e) {\n+                logger.error(\"send textToSpeech fails with unexpected error\", e);", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMjAxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451822011", "bodyText": "Same as above.", "author": "Trinitus01", "createdAt": "2020-07-08T20:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTk3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453171974", "bodyText": "this is still open", "author": "J-N-K", "createdAt": "2020-07-11T08:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNjgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451807673", "bodyText": "see above, remove stringutils", "author": "J-N-K", "createdAt": "2020-07-08T20:30:22Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -792,42 +814,62 @@ private void handlePushDeviceCommand(DopplerId dopplerId, String command, String\n         }\n     }\n \n+    // NEED TO RUN IN A DELAYED QUEUE, ELSE TOO MANY REQUESTS\n     private void handlePushActivity(@Nullable String payload) {\n-        JsonCommandPayloadPushActivity pushActivity = gson.fromJson(payload, JsonCommandPayloadPushActivity.class);\n-\n-        Key key = pushActivity.key;\n-        if (key == null) {\n-            return;\n-        }\n-\n-        Connection connection = this.connection;\n-        if (connection == null || !connection.getIsLoggedIn()) {\n-            return;\n-        }\n-        Activity[] activities = connection.getActivities(10, pushActivity.timestamp);\n-        Activity currentActivity = null;\n-        String search = key.registeredUserId + \"#\" + key.entryId;\n-        for (Activity activity : activities) {\n-            if (StringUtils.equals(activity.id, search)) {\n-                currentActivity = activity;\n-                break;\n-            }\n-        }\n-        if (currentActivity == null) {\n-            return;\n+        pushActivityQueue.add(payload);\n+        if (pushActivityQueueRunning.compareAndSet(false, true)) {\n+            queuedPushActivity();\n         }\n+    }\n \n+    private void queuedPushActivity() {\n         @Nullable\n-        SourceDeviceId @Nullable [] sourceDeviceIds = currentActivity.sourceDeviceIds;\n-        if (sourceDeviceIds != null) {\n-            for (SourceDeviceId sourceDeviceId : sourceDeviceIds) {\n-                if (sourceDeviceId != null) {\n-                    EchoHandler echoHandler = findEchoHandlerBySerialNumber(sourceDeviceId.serialNumber);\n-                    if (echoHandler != null) {\n-                        echoHandler.handlePushActivity(currentActivity);\n+        String payload = pushActivityQueue.poll();\n+        if (payload != null) {\n+            try {\n+                JsonCommandPayloadPushActivity pushActivity = gson.fromJson(payload,\n+                        JsonCommandPayloadPushActivity.class);\n+\n+                Key key = pushActivity.key;\n+                if (key == null) {\n+                    return;\n+                }\n+\n+                Connection connection = this.connection;\n+                if (connection == null || !connection.getIsLoggedIn()) {\n+                    return;\n+                }\n+                Activity[] activities = connection.getActivities(10, pushActivity.timestamp);\n+                Activity currentActivity = null;\n+                String search = key.registeredUserId + \"#\" + key.entryId;\n+                for (Activity activity : activities) {\n+                    if (StringUtils.equals(activity.id, search)) {", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMjgxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451822819", "bodyText": "Never touched this code. Will change to a simple string equals?!?", "author": "Trinitus01", "createdAt": "2020-07-08T21:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNDI3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452104275", "bodyText": "changes it to equals will cause Travis warnings because of the null validation check.", "author": "mgeramb", "createdAt": "2020-07-09T09:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MTUxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452291511", "bodyText": "It seems @mgeramb is right because i fully removed the StringUtils from Connection and AccountHandler and got a lot of warnings now. For sure i check for null before the equals but it seems this doesn't matter.\n@J-N-K How to handle this?", "author": "Trinitus01", "createdAt": "2020-07-09T15:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NTE5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452385194", "bodyText": "(search == null && activity.id ==null) || (search != null && search.equals(activity.id))\nwould this work? if one of search and activity.id is guaranteed to be non-null, you can omit the first check.", "author": "J-N-K", "createdAt": "2020-07-09T17:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwNTI3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452905276", "bodyText": "For this case the fact that StringUtils returns true if both variables are null is useless because it will return in any way. So only (search != null && search.equals(activity.id)) is needed but this ends in a Travis warning like @mgeramb wrote. This kind of null check seems to not recognise there is a check for null before the equals. I will take a look how other Bindings handle this, i think its a very common case.", "author": "Trinitus01", "createdAt": "2020-07-10T15:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzkwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452913907", "bodyText": "What is the exact warning?", "author": "J-N-K", "createdAt": "2020-07-10T15:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MjY4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452942687", "bodyText": "if (activity.id != null && activity.id.equals(search)) {\n...\norg/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java:[846,37225] Potential null pointer access: this expression has a '@nullable' type", "author": "Trinitus01", "createdAt": "2020-07-10T16:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NDU2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452944569", "bodyText": "Check for null on activity first. Accessing activity.id when activity is null will fail.", "author": "J-N-K", "createdAt": "2020-07-10T16:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NzU3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452947578", "bodyText": "if (activity != null && activity.id != null && activity.id.equals(search)) {\ncurrentActivity = activity;\nbreak;\n}\nThe warning still appears :(", "author": "Trinitus01", "createdAt": "2020-07-10T16:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0ODc4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452948780", "bodyText": "Is it ok if i push all the changes both of you write in the comments and try to fix the warnings after it. Because there are a lot of warning and it seems this will be a lot of work to remove all the StringUtils.", "author": "Trinitus01", "createdAt": "2020-07-10T16:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0OTQ3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452949470", "bodyText": "Ignore the warnings and push the code, I\u2018ll check what\u2018s wrong then.", "author": "J-N-K", "createdAt": "2020-07-10T16:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4Mjk3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452982974", "bodyText": "Was not that easy, hopefully i have not made any misstake^^", "author": "Trinitus01", "createdAt": "2020-07-10T17:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwODAwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451808009", "bodyText": "use a real email-address", "author": "J-N-K", "createdAt": "2020-07-08T20:31:00Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/jsons/JsonAnnouncement.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.jsons;\n+\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonDevices.Device;\n+\n+/**\n+ *\n+ * @author Tom Blum (Trinitus01) - Initial contribution", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMzI3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451823273", "bodyText": "Was a fail, will add a email address.", "author": "Trinitus01", "createdAt": "2020-07-08T21:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwODAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwODEwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451808107", "bodyText": "see above", "author": "J-N-K", "createdAt": "2020-07-08T20:31:12Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/jsons/JsonTextToSpeech.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.jsons;\n+\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ *\n+ * @author Tom Blum (Trinitus01) - Initial contribution", "originalCommit": "fba610341cca98dd16adb068d90897ddf16ed644", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMzYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r451823611", "bodyText": "Same as above.", "author": "Trinitus01", "createdAt": "2020-07-08T21:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwODEwNw=="}], "type": "inlineReview"}, {"oid": "59be71d19171093f10ecb37d5b0fdeb82014f645", "url": "https://github.com/openhab/openhab-addons/commit/59be71d19171093f10ecb37d5b0fdeb82014f645", "message": "Update bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java\n\nCo-authored-by: J-N-K <J-N-K@users.noreply.github.com>", "committedDate": "2020-07-08T20:48:37Z", "type": "commit"}, {"oid": "cd825d98b197ff01dfbede86c4210d6def824098", "url": "https://github.com/openhab/openhab-addons/commit/cd825d98b197ff01dfbede86c4210d6def824098", "message": "Update bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java\n\nCo-authored-by: J-N-K <J-N-K@users.noreply.github.com>", "committedDate": "2020-07-08T20:52:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwMzUyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452103522", "bodyText": "Just to be sure, have you handled this in another code location? Is is important that the push notification with the new volume will be ignored, in the case of setting them temporary for the TTS.", "author": "mgeramb", "createdAt": "2020-07-09T09:56:59Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/EchoHandler.java", "diffHunk": "@@ -716,15 +716,9 @@ private void startTextToSpeech(Connection connection, Device device, String text\n             throws IOException, URISyntaxException {\n         Integer volume = null;\n         if (textToSpeechVolume != 0) {\n-            startIgnoreVolumeChange();", "originalCommit": "cd825d98b197ff01dfbede86c4210d6def824098", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNDEwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452134107", "bodyText": "First i also thought the volume should be ignored but it produces problems. Currently the ttsVolume is set parallel to all devices in a group, after it the tts is requested and after this the standardVolume is set. Its possible to see this workflow in the log file. So i think it is not necessary to ignore the volume change, there is no major reason to do.", "author": "Trinitus01", "createdAt": "2020-07-09T10:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwMzUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5ODM2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452198361", "bodyText": "Sound perfect", "author": "mgeramb", "createdAt": "2020-07-09T12:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwMzUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNzE2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452107164", "bodyText": "As far as I understand is this class a helper class for the queue. You should not put them in the jsons folder and you should not name it with Json prefix. All the jsons in the folder a the real REST API Jsons of amazon.", "author": "mgeramb", "createdAt": "2020-07-09T10:03:21Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/jsons/JsonAnnouncement.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.jsons;\n+\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonDevices.Device;\n+\n+/**\n+ *\n+ * @author Tom Blum (Trinitus01) - Initial contribution\n+ */\n+@NonNullByDefault\n+public class JsonAnnouncement {\n+", "originalCommit": "cd825d98b197ff01dfbede86c4210d6def824098", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNjI1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452136258", "bodyText": "Ok, else if i need to convert it to json to collect and merge the incomming announcements to only get one request instead of x requests? It is not for the REST API but one of the main parts is to convert it to a json.\nI will try to find a better place for the classes.", "author": "Trinitus01", "createdAt": "2020-07-09T11:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNzE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0NDc3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452144774", "bodyText": "@Trinitus01 Thank you for helping to improve the binding. One optimization would maybe make sense and would be possible now with the queue. In the request for announcements can you specifiy a array of devices. So if we have multiple Announcements with the same content and the same volume, it would be possible to send them with only one request. The sound output would be in this case very synchrone.\n\nMaybe i misunderstand your comment but announcements with the same content are send with only one request at the moment. So i do not understand what to change. Maybe you point to the difference between tts and act, that its necessary to use one device which contains multiple deviceids? This is a very strange structure of amazons act json.", "author": "Trinitus01", "createdAt": "2020-07-09T11:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNzE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMDQzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452210437", "bodyText": "Oh, sorry, have not seen that is should work already in this way. perfect!", "author": "mgeramb", "createdAt": "2020-07-09T13:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNzE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNzQwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r452107406", "bodyText": "Same here, please move it to another folder and rename it", "author": "mgeramb", "createdAt": "2020-07-09T10:03:48Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/jsons/JsonTextToSpeech.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.jsons;\n+\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ *\n+ * @author Tom Blum (Trinitus01) - Initial contribution\n+ */\n+public class JsonTextToSpeech {\n+", "originalCommit": "cd825d98b197ff01dfbede86c4210d6def824098", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "84f65ea5deb86002cd77e57e16e0db13ef3057e3", "url": "https://github.com/openhab/openhab-addons/commit/84f65ea5deb86002cd77e57e16e0db13ef3057e3", "message": "changed: some suggestions of J-N-K\nchanged: some more suggestions of J-N-K\nchanged: scheduler (J-N-K comment)\nremoved: StringUtils (J-N-K comment, still in process)\nadded: some null checks (J-N-K comment)\nchanged: error logging to warn logging (J-N-K comment)\nchanged: author email (removed class) (J-N-K & mgeramb comment)\nchanged: JsonAnnouncement and JsonTextToSpeech (Name and location -> Connection) (mgeramb comment)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-10T16:39:16Z", "type": "commit"}, {"oid": "5bc0fff3baa4ec461efe28805381fb37a5f8efcf", "url": "https://github.com/openhab/openhab-addons/commit/5bc0fff3baa4ec461efe28805381fb37a5f8efcf", "message": "Merge origin/SmartHome into SmartHome\n\nConflicts:\n\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "committedDate": "2020-07-10T17:05:09Z", "type": "commit"}, {"oid": "a00a54fcbe982598243a9b49d5f423acd253c431", "url": "https://github.com/openhab/openhab-addons/commit/a00a54fcbe982598243a9b49d5f423acd253c431", "message": "suggestions (#1)\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-07-10T20:23:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTYwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453171600", "bodyText": "Can you check what happened here? All lines are changed, that usually is either an encoding or line-ending issue", "author": "J-N-K", "createdAt": "2020-07-11T08:23:18Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/AmazonEchoControlBindingConstants.java", "diffHunk": "@@ -1,119 +1,119 @@\n-/**\r\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n- *\r\n- * See the NOTICE file(s) distributed with this work for additional\r\n- * information.\r\n- *\r\n- * This program and the accompanying materials are made available under the\r\n- * terms of the Eclipse Public License 2.0 which is available at\r\n- * http://www.eclipse.org/legal/epl-2.0\r\n- *\r\n- * SPDX-License-Identifier: EPL-2.0\r\n- */\r\n-package org.openhab.binding.amazonechocontrol.internal;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import org.eclipse.jdt.annotation.NonNullByDefault;\r\n-import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n-import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\r\n-\r\n-/**\r\n- * The {@link AmazonEchoControlBindingConstants} class defines common constants, which are\r\n- * used across the whole binding.\r\n- *\r\n- * @author Michael Geramb - Initial contribution\r\n- */\r\n-@NonNullByDefault\r\n-public class AmazonEchoControlBindingConstants {\r\n-    public static final String BINDING_ID = \"amazonechocontrol\";\r\n-    public static final String BINDING_NAME = \"Amazon Echo Control\";\r\n-\r\n-    // List of all Thing Type UIDs\r\n-    public static final ThingTypeUID THING_TYPE_ACCOUNT = new ThingTypeUID(BINDING_ID, \"account\");\r\n-    public static final ThingTypeUID THING_TYPE_ECHO = new ThingTypeUID(BINDING_ID, \"echo\");\r\n-    public static final ThingTypeUID THING_TYPE_ECHO_SPOT = new ThingTypeUID(BINDING_ID, \"echospot\");\r\n-    public static final ThingTypeUID THING_TYPE_ECHO_SHOW = new ThingTypeUID(BINDING_ID, \"echoshow\");\r\n-    public static final ThingTypeUID THING_TYPE_ECHO_WHA = new ThingTypeUID(BINDING_ID, \"wha\");\r\n-\r\n-    public static final ThingTypeUID THING_TYPE_FLASH_BRIEFING_PROFILE = new ThingTypeUID(BINDING_ID,\r\n-            \"flashbriefingprofile\");\r\n-\r\n-    public static final ThingTypeUID THING_TYPE_SMART_HOME_DEVICE = new ThingTypeUID(BINDING_ID, \"smartHomeDevice\");\r\n-    public static final ThingTypeUID THING_TYPE_SMART_HOME_DEVICE_GROUP = new ThingTypeUID(BINDING_ID,\r\n-            \"smartHomeDeviceGroup\");\r\n-\r\n-    public static final Set<ThingTypeUID> SUPPORTED_ECHO_THING_TYPES_UIDS = new HashSet<>(\r\n-            Arrays.asList(THING_TYPE_ACCOUNT, THING_TYPE_ECHO, THING_TYPE_ECHO_SPOT, THING_TYPE_ECHO_SHOW,\r\n-                    THING_TYPE_ECHO_WHA, THING_TYPE_FLASH_BRIEFING_PROFILE));\r\n-\r\n-    public static final Set<ThingTypeUID> SUPPORTED_SMART_HOME_THING_TYPES_UIDS = new HashSet<>(\r\n-            Arrays.asList(THING_TYPE_SMART_HOME_DEVICE, THING_TYPE_SMART_HOME_DEVICE_GROUP));\r\n-\r\n-    // List of all Channel ids\r\n-    public static final String CHANNEL_PLAYER = \"player\";\r\n-    public static final String CHANNEL_VOLUME = \"volume\";\r\n-    public static final String CHANNEL_EQUALIZER_TREBLE = \"equalizerTreble\";\r\n-    public static final String CHANNEL_EQUALIZER_MIDRANGE = \"equalizerMidrange\";\r\n-    public static final String CHANNEL_EQUALIZER_BASS = \"equalizerBass\";\r\n-    public static final String CHANNEL_ERROR = \"error\";\r\n-    public static final String CHANNEL_SHUFFLE = \"shuffle\";\r\n-    public static final String CHANNEL_LOOP = \"loop\";\r\n-    public static final String CHANNEL_IMAGE_URL = \"imageUrl\";\r\n-    public static final String CHANNEL_TITLE = \"title\";\r\n-    public static final String CHANNEL_SUBTITLE1 = \"subtitle1\";\r\n-    public static final String CHANNEL_SUBTITLE2 = \"subtitle2\";\r\n-    public static final String CHANNEL_PROVIDER_DISPLAY_NAME = \"providerDisplayName\";\r\n-    public static final String CHANNEL_BLUETOOTH_MAC = \"bluetoothMAC\";\r\n-    public static final String CHANNEL_BLUETOOTH = \"bluetooth\";\r\n-    public static final String CHANNEL_BLUETOOTH_DEVICE_NAME = \"bluetoothDeviceName\";\r\n-    public static final String CHANNEL_RADIO_STATION_ID = \"radioStationId\";\r\n-    public static final String CHANNEL_RADIO = \"radio\";\r\n-    public static final String CHANNEL_AMAZON_MUSIC_TRACK_ID = \"amazonMusicTrackId\";\r\n-    public static final String CHANNEL_AMAZON_MUSIC = \"amazonMusic\";\r\n-    public static final String CHANNEL_AMAZON_MUSIC_PLAY_LIST_ID = \"amazonMusicPlayListId\";\r\n-    public static final String CHANNEL_TEXT_TO_SPEECH = \"textToSpeech\";\r\n-    public static final String CHANNEL_TEXT_TO_SPEECH_VOLUME = \"textToSpeechVolume\";\r\n-    public static final String CHANNEL_REMIND = \"remind\";\r\n-    public static final String CHANNEL_PLAY_ALARM_SOUND = \"playAlarmSound\";\r\n-    public static final String CHANNEL_START_ROUTINE = \"startRoutine\";\r\n-    public static final String CHANNEL_MUSIC_PROVIDER_ID = \"musicProviderId\";\r\n-    public static final String CHANNEL_PLAY_MUSIC_VOICE_COMMAND = \"playMusicVoiceCommand\";\r\n-    public static final String CHANNEL_START_COMMAND = \"startCommand\";\r\n-    public static final String CHANNEL_LAST_VOICE_COMMAND = \"lastVoiceCommand\";\r\n-    public static final String CHANNEL_MEDIA_PROGRESS = \"mediaProgress\";\r\n-    public static final String CHANNEL_MEDIA_LENGTH = \"mediaLength\";\r\n-    public static final String CHANNEL_MEDIA_PROGRESS_TIME = \"mediaProgressTime\";\r\n-    public static final String CHANNEL_ASCENDING_ALARM = \"ascendingAlarm\";\r\n-    public static final String CHANNEL_NOTIFICATION_VOLUME = \"notificationVolume\";\r\n-    public static final String CHANNEL_NEXT_REMINDER = \"nextReminder\";\r\n-    public static final String CHANNEL_NEXT_ALARM = \"nextAlarm\";\r\n-    public static final String CHANNEL_NEXT_MUSIC_ALARM = \"nextMusicAlarm\";\r\n-    public static final String CHANNEL_NEXT_TIMER = \"nextTimer\";\r\n-\r\n-    public static final String CHANNEL_SAVE = \"save\";\r\n-    public static final String CHANNEL_ACTIVE = \"active\";\r\n-    public static final String CHANNEL_PLAY_ON_DEVICE = \"playOnDevice\";\r\n-\r\n-    // List of channel Type UIDs\r\n-    public static final ChannelTypeUID CHANNEL_TYPE_BLUETHOOTH_MAC = new ChannelTypeUID(BINDING_ID, \"bluetoothMAC\");\r\n-    public static final ChannelTypeUID CHANNEL_TYPE_AMAZON_MUSIC_PLAY_LIST_ID = new ChannelTypeUID(BINDING_ID,\r\n-            \"amazonMusicPlayListId\");\r\n-    public static final ChannelTypeUID CHANNEL_TYPE_PLAY_ALARM_SOUND = new ChannelTypeUID(BINDING_ID, \"playAlarmSound\");\r\n-    public static final ChannelTypeUID CHANNEL_TYPE_CHANNEL_PLAY_ON_DEVICE = new ChannelTypeUID(BINDING_ID,\r\n-            \"playOnDevice\");\r\n-    public static final ChannelTypeUID CHANNEL_TYPE_MUSIC_PROVIDER_ID = new ChannelTypeUID(BINDING_ID,\r\n-            \"musicProviderId\");\r\n-    public static final ChannelTypeUID CHANNEL_TYPE_START_COMMAND = new ChannelTypeUID(BINDING_ID, \"startCommand\");\r\n-\r\n-    // List of all Properties\r\n-    public static final String DEVICE_PROPERTY_SERIAL_NUMBER = \"serialNumber\";\r\n-    public static final String DEVICE_PROPERTY_FAMILY = \"deviceFamily\";\r\n-    public static final String DEVICE_PROPERTY_FLASH_BRIEFING_PROFILE = \"configurationJson\";\r\n-    public static final String DEVICE_PROPERTY_ID = \"id\";\r\n-\r\n-    // Other\r\n-    public static final String FLASH_BRIEFING_COMMAND_PREFIX = \"FlashBriefing.\";\r\n-}\r\n+/**", "originalCommit": "a00a54fcbe982598243a9b49d5f423acd253c431", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3ODU3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453178579", "bodyText": "I use a netbeans plugin for line endings to prevent windows line endings. I also installed this plugin on my mac preventively anyway it should not be necessary on a unix system. Never had any issue with it but maybe it produces line ending problems. I never changed the files you listed, so this is strange. But i have seen them in the commit and ignored it. In the future i will take a closer look before i commit. I reset all three files like you suggested.", "author": "Trinitus01", "createdAt": "2020-07-11T09:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNTYyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453215628", "bodyText": "It seems that didn't work. If you remove the branch protection rule under https://github.com/Trinitus01/openhab-addons/settings/branches and check allow edits by maintainers for this pull request I can fix that myself.", "author": "J-N-K", "createdAt": "2020-07-11T17:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNjkyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453216923", "bodyText": "I removed the branch protection. Allow edits by maintainers is check for this pull request.", "author": "Trinitus01", "createdAt": "2020-07-11T17:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTYyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453171620", "bodyText": "see above", "author": "J-N-K", "createdAt": "2020-07-11T08:23:36Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/AmazonEchoControlHandlerFactory.java", "diffHunk": "@@ -1,157 +1,157 @@\n-/**\r\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n- *\r\n- * See the NOTICE file(s) distributed with this work for additional\r\n- * information.\r\n- *\r\n- * This program and the accompanying materials are made available under the\r\n- * terms of the Eclipse Public License 2.0 which is available at\r\n- * http://www.eclipse.org/legal/epl-2.0\r\n- *\r\n- * SPDX-License-Identifier: EPL-2.0\r\n- */\r\n-package org.openhab.binding.amazonechocontrol.internal;\r\n-\r\n-import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.SUPPORTED_ECHO_THING_TYPES_UIDS;\r\n-import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.SUPPORTED_SMART_HOME_THING_TYPES_UIDS;\r\n-import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_ACCOUNT;\r\n-import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_FLASH_BRIEFING_PROFILE;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.Hashtable;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.eclipse.jdt.annotation.NonNullByDefault;\r\n-import org.eclipse.jdt.annotation.Nullable;\r\n-import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\r\n-import org.eclipse.smarthome.config.discovery.DiscoveryService;\r\n-import org.eclipse.smarthome.core.storage.Storage;\r\n-import org.eclipse.smarthome.core.storage.StorageService;\r\n-import org.eclipse.smarthome.core.thing.Bridge;\r\n-import org.eclipse.smarthome.core.thing.Thing;\r\n-import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n-import org.eclipse.smarthome.core.thing.ThingUID;\r\n-import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\r\n-import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n-import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\r\n-import org.openhab.binding.amazonechocontrol.internal.discovery.AmazonEchoDiscovery;\r\n-import org.openhab.binding.amazonechocontrol.internal.discovery.SmartHomeDevicesDiscovery;\r\n-import org.openhab.binding.amazonechocontrol.internal.handler.AccountHandler;\r\n-import org.openhab.binding.amazonechocontrol.internal.handler.EchoHandler;\r\n-import org.openhab.binding.amazonechocontrol.internal.handler.FlashBriefingProfileHandler;\r\n-import org.openhab.binding.amazonechocontrol.internal.handler.SmartHomeDeviceHandler;\r\n-import org.osgi.framework.ServiceRegistration;\r\n-import org.osgi.service.component.ComponentContext;\r\n-import org.osgi.service.component.annotations.Activate;\r\n-import org.osgi.service.component.annotations.Component;\r\n-import org.osgi.service.component.annotations.Reference;\r\n-import org.osgi.service.http.HttpService;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-import com.google.gson.Gson;\r\n-\r\n-/**\r\n- * The {@link AmazonEchoControlHandlerFactory} is responsible for creating things and thing\r\n- * handlers.\r\n- *\r\n- * @author Michael Geramb - Initial contribution\r\n- */\r\n-@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.amazonechocontrol\")\r\n-@NonNullByDefault\r\n-public class AmazonEchoControlHandlerFactory extends BaseThingHandlerFactory {\r\n-    private final Logger logger = LoggerFactory.getLogger(AmazonEchoControlHandlerFactory.class);\r\n-    private final Map<ThingUID, @Nullable List<ServiceRegistration<?>>> discoveryServiceRegistrations = new HashMap<>();\r\n-\r\n-    private final HttpService httpService;\r\n-    private final StorageService storageService;\r\n-    private final BindingServlet bindingServlet;\r\n-    private final Gson gson;\r\n-\r\n-    @Activate\r\n-    public AmazonEchoControlHandlerFactory(@Reference HttpService httpService,\r\n-            @Reference StorageService storageService) {\r\n-        this.storageService = storageService;\r\n-        this.httpService = httpService;\r\n-        this.gson = new Gson();\r\n-        this.bindingServlet = new BindingServlet(httpService);\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\r\n-        return SUPPORTED_ECHO_THING_TYPES_UIDS.contains(thingTypeUID)\r\n-                || SUPPORTED_SMART_HOME_THING_TYPES_UIDS.contains(thingTypeUID);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected void deactivate(ComponentContext componentContext) {\r\n-        bindingServlet.dispose();\r\n-        super.deactivate(componentContext);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected @Nullable ThingHandler createHandler(Thing thing) {\r\n-        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\r\n-\r\n-        if (thingTypeUID.equals(THING_TYPE_ACCOUNT)) {\r\n-            Storage<String> storage = storageService.getStorage(thing.getUID().toString(),\r\n-                    String.class.getClassLoader());\r\n-            AccountHandler bridgeHandler = new AccountHandler((Bridge) thing, httpService, storage, gson);\r\n-            registerDiscoveryService(bridgeHandler);\r\n-            bindingServlet.addAccountThing(thing);\r\n-            return bridgeHandler;\r\n-        } else if (thingTypeUID.equals(THING_TYPE_FLASH_BRIEFING_PROFILE)) {\r\n-            Storage<String> storage = storageService.getStorage(thing.getUID().toString(),\r\n-                    String.class.getClassLoader());\r\n-            return new FlashBriefingProfileHandler(thing, storage);\r\n-        } else if (SUPPORTED_ECHO_THING_TYPES_UIDS.contains(thingTypeUID)) {\r\n-            return new EchoHandler(thing, gson);\r\n-        } else if (SUPPORTED_SMART_HOME_THING_TYPES_UIDS.contains(thingTypeUID)) {\r\n-            return new SmartHomeDeviceHandler(thing, gson);\r\n-        }\r\n-        return null;\r\n-    }\r\n-\r\n-    private synchronized void registerDiscoveryService(AccountHandler bridgeHandler) {\r\n-        List<ServiceRegistration<?>> discoveryServiceRegistration = discoveryServiceRegistrations\r\n-                .computeIfAbsent(bridgeHandler.getThing().getUID(), k -> new ArrayList<>());\r\n-        SmartHomeDevicesDiscovery smartHomeDevicesDiscovery = new SmartHomeDevicesDiscovery(bridgeHandler);\r\n-        smartHomeDevicesDiscovery.activate();\r\n-        discoveryServiceRegistration.add(bundleContext.registerService(DiscoveryService.class.getName(),\r\n-                smartHomeDevicesDiscovery, new Hashtable<>()));\r\n-\r\n-        AmazonEchoDiscovery discoveryService = new AmazonEchoDiscovery(bridgeHandler);\r\n-        discoveryService.activate();\r\n-        discoveryServiceRegistration.add(\r\n-                bundleContext.registerService(DiscoveryService.class.getName(), discoveryService, new Hashtable<>()));\r\n-    }\r\n-\r\n-    @Override\r\n-    protected synchronized void removeHandler(ThingHandler thingHandler) {\r\n-        if (thingHandler instanceof AccountHandler) {\r\n-            BindingServlet bindingServlet = this.bindingServlet;\r\n-            bindingServlet.removeAccountThing(thingHandler.getThing());\r\n-\r\n-            List<ServiceRegistration<?>> discoveryServiceRegistration = discoveryServiceRegistrations\r\n-                    .remove(thingHandler.getThing().getUID());\r\n-            if (discoveryServiceRegistration != null) {\r\n-                discoveryServiceRegistration.forEach(serviceReg -> {\r\n-                    AbstractDiscoveryService service = (AbstractDiscoveryService) bundleContext\r\n-                            .getService(serviceReg.getReference());\r\n-                    serviceReg.unregister();\r\n-                    if (service != null) {\r\n-                        if (service instanceof AmazonEchoDiscovery) {\r\n-                            ((AmazonEchoDiscovery) service).deactivate();\r\n-                        } else if (service instanceof SmartHomeDevicesDiscovery) {\r\n-                            ((SmartHomeDevicesDiscovery) service).deactivate();\r\n-                        } else {\r\n-                            logger.warn(\"Found unknown discovery-service instance: {}\", service);\r\n-                        }\r\n-                    }\r\n-                });\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/**", "originalCommit": "a00a54fcbe982598243a9b49d5f423acd253c431", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3ODYxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453178613", "bodyText": "see above", "author": "Trinitus01", "createdAt": "2020-07-11T09:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjA2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453172068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private class Announcement {\n          \n          \n            \n                private static class Announcement {", "author": "J-N-K", "createdAt": "2020-07-11T08:29:35Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1629,4 +1820,31 @@ public void setEqualizer(Device device, JsonEqualizer settings) throws IOExcepti\n         makeRequest(\"POST\", alexaServer + \"/api/equalizer/\" + device.serialNumber + \"/\" + device.deviceType, postData,\n                 true, true, null, 0);\n     }\n+\n+    @NonNullByDefault\n+    private class Announcement {", "originalCommit": "a00a54fcbe982598243a9b49d5f423acd253c431", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjA3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453172078", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private class TextToSpeech {\n          \n          \n            \n                private static class TextToSpeech {", "author": "J-N-K", "createdAt": "2020-07-11T08:29:49Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1629,4 +1820,31 @@ public void setEqualizer(Device device, JsonEqualizer settings) throws IOExcepti\n         makeRequest(\"POST\", alexaServer + \"/api/equalizer/\" + device.serialNumber + \"/\" + device.deviceType, postData,\n                 true, true, null, 0);\n     }\n+\n+    @NonNullByDefault\n+    private class Announcement {\n+        public List<Device> devices = new ArrayList<>();\n+        public String speak;\n+        public String bodyText;\n+        public @Nullable String title;\n+        public List<Integer> ttsVolumes = new ArrayList<>();\n+        public List<Integer> standardVolumes = new ArrayList<>();\n+\n+        public Announcement(String speak, String bodyText, @Nullable String title) {\n+            this.speak = speak;\n+            this.bodyText = bodyText;\n+            this.title = title;\n+        }\n+    }\n+\n+    private class TextToSpeech {", "originalCommit": "a00a54fcbe982598243a9b49d5f423acd253c431", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjI3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453172276", "bodyText": "I think the isEmpty-check is useless. if it's not null and startswith something, it can't be empty.", "author": "J-N-K", "createdAt": "2020-07-11T08:32:39Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -770,8 +791,7 @@ void handleWebsocketCommand(JsonPushCommand pushCommand) {\n                     break;\n                 default:\n                     String payload = pushCommand.payload;\n-                    if (payload != null && StringUtils.isNotEmpty(payload) && payload.startsWith(\"{\")\n-                            && payload.endsWith(\"}\")) {\n+                    if (payload != null && !payload.isEmpty() && payload.startsWith(\"{\") && payload.endsWith(\"}\")) {", "originalCommit": "a00a54fcbe982598243a9b49d5f423acd253c431", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3ODA1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453178050", "bodyText": "Yes, your assumption is correct.", "author": "Trinitus01", "createdAt": "2020-07-11T09:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjQ1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453172456", "bodyText": "Please check what happened to this file.", "author": "J-N-K", "createdAt": "2020-07-11T08:35:11Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -1,530 +1,530 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n-\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\r\n-\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n-\t<bridge-type id=\"account\">\r\n-\t\t<label>Amazon Account</label>\r\n-\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\r\n-\t\t<channels>\r\n-\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\r\n-\t\t</channels>\r\n-\t\t<config-description>\r\n-\t\t\t<parameter name=\"discoverSmartHome\" type=\"integer\">\r\n-\t\t\t\t<label>Device Discovery Mode</label>\r\n-\t\t\t\t<description>Defines which devices shall be discovered.</description>\r\n-\t\t\t\t<options>\r\n-\t\t\t\t\t<option value=\"0\">No Discovery</option>\r\n-\t\t\t\t\t<option value=\"1\">Direct connected</option>\r\n-\t\t\t\t\t<option value=\"2\">Direct and over Alexa skill</option>\r\n-\t\t\t\t\t<option value=\"3\">Direct, over Alexa and openHAB skill</option>\r\n-\t\t\t\t</options>\r\n-\t\t\t\t<limitToOptions>true</limitToOptions>\r\n-\t\t\t\t<default>0</default>\r\n-\t\t\t</parameter>\r\n-\t\t\t<parameter name=\"pollingIntervalSmartHomeAlexa\" type=\"decimal\" min=\"10\" unit=\"s\">\r\n-\t\t\t\t<label>Polling Interval Alexa</label>\r\n-\t\t\t\t<description>\r\n-\t\t\t\t\tDefines the time in seconds for openHAB to pull the\r\n-\t\t\t\t\tstate of the directly connected devices. The minimum\r\n-\t\t\t\t\tis 10 seconds.\r\n-\t\t\t\t</description>\r\n-\t\t\t\t<default>30</default>\r\n-\t\t\t</parameter>\r\n-\t\t\t<parameter name=\"pollingIntervalSmartSkills\" type=\"decimal\" min=\"60\" unit=\"s\">\r\n-\t\t\t\t<label>Polling Interval Skill</label>\r\n-\t\t\t\t<description>\r\n-\t\t\t\t\tDefines the time in seconds for openHAB to pull the\r\n-\t\t\t\t\tstate of the over a skill connected devices. The\r\n-\t\t\t\t\tminimum is 60 seconds.\r\n-\t\t\t\t</description>\r\n-\t\t\t\t<default>120</default>\r\n-\t\t\t</parameter>\r\n-\t\t</config-description>\r\n-\t</bridge-type>\r\n-\t<thing-type id=\"echo\">\r\n-\t\t<supported-bridge-type-refs>\r\n-\t\t\t<bridge-type-ref id=\"account\"/>\r\n-\t\t</supported-bridge-type-refs>\r\n-\t\t<label>Amazon Echo</label>\r\n-\t\t<description>Amazon Echo device (Amazon Echo, Amazon Echo Dot, Amazon Echo Plus...)</description>\r\n-\t\t<channels>\r\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\r\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\r\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\r\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\r\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\r\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\r\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\r\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\r\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\r\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\r\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\r\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\r\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\r\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\r\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\r\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\r\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\r\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\r\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\r\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\r\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\r\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\r\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\r\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\r\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\r\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\r\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\r\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\r\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\r\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\r\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\r\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\r\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\r\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\r\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\r\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\r\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\r\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\r\n-\t\t</channels>\r\n-\t\t<representation-property>serialNumber</representation-property>\r\n-\t\t<config-description>\r\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\r\n-\t\t\t\t<label>Serial Number</label>\r\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\r\n-\t\t\t</parameter>\r\n-\t\t</config-description>\r\n-\t</thing-type>\r\n-\t<thing-type id=\"echospot\">\r\n-\t\t<supported-bridge-type-refs>\r\n-\t\t\t<bridge-type-ref id=\"account\"/>\r\n-\t\t</supported-bridge-type-refs>\r\n-\t\t<label>Amazon Echo Spot</label>\r\n-\t\t<description>Amazon Echo Spot device</description>\r\n-\t\t<channels>\r\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\r\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\r\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\r\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\r\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\r\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\r\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\r\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\r\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\r\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\r\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\r\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\r\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\r\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\r\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\r\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\r\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\r\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\r\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\r\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\r\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\r\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\r\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\r\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\r\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\r\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\r\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\r\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\r\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\r\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\r\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\r\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\r\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\r\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\r\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\r\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\r\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\r\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\r\n-\t\t</channels>\r\n-\t\t<representation-property>serialNumber</representation-property>\r\n-\t\t<config-description>\r\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\r\n-\t\t\t\t<label>Serial Number</label>\r\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\r\n-\t\t\t</parameter>\r\n-\t\t</config-description>\r\n-\t</thing-type>\r\n-\t<thing-type id=\"echoshow\">\r\n-\t\t<supported-bridge-type-refs>\r\n-\t\t\t<bridge-type-ref id=\"account\"/>\r\n-\t\t</supported-bridge-type-refs>\r\n-\t\t<label>Amazon Echo Show</label>\r\n-\t\t<description>Amazon Echo Show device</description>\r\n-\t\t<channels>\r\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\r\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\r\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\r\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\r\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\r\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\r\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\r\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\r\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\r\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\r\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\r\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\r\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\r\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\r\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\r\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\r\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\r\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\r\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\r\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\r\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\r\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\r\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\r\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\r\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\r\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\r\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\r\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\r\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\r\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\r\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\r\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\r\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\r\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\r\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\r\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\r\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\r\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\r\n-\t\t</channels>\r\n-\t\t<representation-property>serialNumber</representation-property>\r\n-\t\t<config-description>\r\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\r\n-\t\t\t\t<label>Serial Number</label>\r\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\r\n-\t\t\t</parameter>\r\n-\t\t</config-description>\r\n-\t</thing-type>\r\n-\t<thing-type id=\"wha\">\r\n-\t\t<supported-bridge-type-refs>\r\n-\t\t\t<bridge-type-ref id=\"account\"/>\r\n-\t\t</supported-bridge-type-refs>\r\n-\t\t<label>Amazon Echo Whole House Audio Control</label>\r\n-\t\t<description>Amazon Multiroom Music</description>\r\n-\t\t<channels>\r\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\r\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\r\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\r\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\r\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\r\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\r\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\r\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\r\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\r\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\r\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\r\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\r\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\r\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\r\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\r\n-\t\t</channels>\r\n-\t\t<representation-property>serialNumber</representation-property>\r\n-\t\t<config-description>\r\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\r\n-\t\t\t\t<label>Serial Number</label>\r\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\r\n-\t\t\t</parameter>\r\n-\t\t</config-description>\r\n-\t</thing-type>\r\n-\t<thing-type id=\"flashbriefingprofile\">\r\n-\t\t<supported-bridge-type-refs>\r\n-\t\t\t<bridge-type-ref id=\"account\"/>\r\n-\t\t</supported-bridge-type-refs>\r\n-\t\t<label>Flash Briefing Profile</label>\r\n-\t\t<description>Store and load a flash briefing configuration</description>\r\n-\t\t<channels>\r\n-\t\t\t<channel id=\"save\" typeId=\"save\"/>\r\n-\t\t\t<channel id=\"active\" typeId=\"active\"/>\r\n-\t\t\t<channel id=\"playOnDevice\" typeId=\"playOnDevice\"/>\r\n-\t\t</channels>\r\n-\t</thing-type>\r\n-\t<thing-type id=\"smartHomeDevice\">\r\n-\t\t<supported-bridge-type-refs>\r\n-\t\t\t<bridge-type-ref id=\"account\"/>\r\n-\t\t</supported-bridge-type-refs>\r\n-\t\t<label>Smart Home Device</label>\r\n-\t\t<description>Smart home device connected to Alexa</description>\r\n-\t\t<representation-property>id</representation-property>\r\n-\t\t<config-description>\r\n-\t\t\t<parameter name=\"id\" type=\"text\" required=\"true\">\r\n-\t\t\t\t<label>Device Id</label>\r\n-\t\t\t\t<description>The id of the device (Please use the discover function to get a configured Thing)</description>\r\n-\t\t\t</parameter>\r\n-\t\t</config-description>\r\n-\t</thing-type>\r\n-\t<thing-type id=\"smartHomeDeviceGroup\">\r\n-\t\t<supported-bridge-type-refs>\r\n-\t\t\t<bridge-type-ref id=\"account\"/>\r\n-\t\t</supported-bridge-type-refs>\r\n-\t\t<label>Smart Home Device Group</label>\r\n-\t\t<description>Group of smart home devices in your amazon account</description>\r\n-\t\t<representation-property>id</representation-property>\r\n-\t\t<config-description>\r\n-\t\t\t<parameter name=\"id\" type=\"text\" required=\"true\">\r\n-\t\t\t\t<label>Group Id</label>\r\n-\t\t\t\t<description>The id of the device group (Please use the discover function to get a configured Thing)</description>\r\n-\t\t\t</parameter>\r\n-\t\t</config-description>\r\n-\t</thing-type>\r\n-\t<channel-type id=\"save\">\r\n-\t\t<item-type>Switch</item-type>\r\n-\t\t<label>Save</label>\r\n-\t\t<description>Save the current flash briefing configuration (Write only)</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"active\">\r\n-\t\t<item-type>Switch</item-type>\r\n-\t\t<label>Active</label>\r\n-\t\t<description>Activate this flash briefing configuration</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"playOnDevice\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Play On Device</label>\r\n-\t\t<description>Plays the briefing on the device (serial number or name, write only)</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"bluetoothDeviceName\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Bluetooth Device</label>\r\n-\t\t<description>Connected bluetooth device</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"radioStationId\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>TuneIn Radio Station Id</label>\r\n-\t\t<description>Id of the radio station</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"remind\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Remind</label>\r\n-\t\t<description>Speak the reminder and send a notification to the Alexa app</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"startRoutine\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Start a Routine</label>\r\n-\t\t<description>The command which must be spoken to active the routing without the preceding \"Alexa,\" (Write Only)\r\n-\t\t</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"playAlarmSound\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Alarm Sound</label>\r\n-\t\t<description>Plays an alarm sound</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"amazonMusicTrackId\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Amazon Music Track Id</label>\r\n-\t\t<description>Id of the amazon music track</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"amazonMusic\" advanced=\"true\">\r\n-\t\t<item-type>Switch</item-type>\r\n-\t\t<label>Amazon Music</label>\r\n-\t\t<description>Amazon Music turned on</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"amazonMusicPlayListId\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Amazon Music Play List Id</label>\r\n-\t\t<description>Amazon Music play list id (Write only, no current state)</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"amazonMusicPlayListIdLastUsed\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Amazon Music Last Selected Playlist Id</label>\r\n-\t\t<description>Id of the playlist which was started with openHAB</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"providerDisplayName\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Provider Name</label>\r\n-\t\t<description>Name of music provider</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"bluetoothMAC\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Bluetooth Connection</label>\r\n-\t\t<description>MAC-Address of the bluetooth connected device</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"imageUrl\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Image Url</label>\r\n-\t\t<description>Url of the album image or radio station logo</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"title\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Title</label>\r\n-\t\t<description>Title</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"subtitle1\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Subtitle 1</label>\r\n-\t\t<description>Subtitle 1</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"subtitle2\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Subtitle 2</label>\r\n-\t\t<description>Subtitle 2</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"radio\" advanced=\"true\">\r\n-\t\t<item-type>Switch</item-type>\r\n-\t\t<label>TuneIn Radio</label>\r\n-\t\t<description>Radio turned on</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"bluetooth\" advanced=\"true\">\r\n-\t\t<item-type>Switch</item-type>\r\n-\t\t<label>Bluetooth Connection</label>\r\n-\t\t<description>Connect to last used device</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"loop\">\r\n-\t\t<item-type>Switch</item-type>\r\n-\t\t<label>Loop</label>\r\n-\t\t<description>Loop</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"shuffle\">\r\n-\t\t<item-type>Switch</item-type>\r\n-\t\t<label>Shuffle</label>\r\n-\t\t<description>Shuffle play</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"player\">\r\n-\t\t<item-type>Player</item-type>\r\n-\t\t<label>Player</label>\r\n-\t\t<description>Music Player</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"volume\">\r\n-\t\t<item-type>Dimmer</item-type>\r\n-\t\t<label>Volume</label>\r\n-\t\t<description>Volume of the sound</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"equalizerTreble\">\r\n-\t\t<item-type>Number</item-type>\r\n-\t\t<label>Treble</label>\r\n-\t\t<description>Equalizer Treble</description>\r\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"equalizerMidrange\">\r\n-\t\t<item-type>Number</item-type>\r\n-\t\t<label>Midrange</label>\r\n-\t\t<description>Equalizer Midrange</description>\r\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"equalizerBass\">\r\n-\t\t<item-type>Number</item-type>\r\n-\t\t<label>Bass</label>\r\n-\t\t<description>Equalizer Bass</description>\r\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"musicProviderId\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Music Provider</label>\r\n-\t\t<description>Music provider</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"playMusicVoiceCommand\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Music Voice Command</label>\r\n-\t\t<description>Voice command as text. E.g. 'Yesterday from the Beatles' (Write only)</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"sendMessage\" advanced=\"false\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Send Message</label>\r\n-\t\t<description>Sends a message to the Echo devices (Write only).</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"announcement\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Announcement</label>\r\n-\t\t<description>Display the announcement message on the display (Write only). See in the tutorial section of the binding\r\n-\t\t\tdescription to learn how it's possible to set the title and turn off the sound.</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"textToSpeech\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Speak</label>\r\n-\t\t<description>Speak the text (Write only). It is possible to use plain text or SSML: &lt;speak&gt;I want to tell you a\r\n-\t\t\tsecret.&lt;amazon:effect name=&quot;whispered&quot;&gt;I am not a real human.&lt;/amazon:effect&gt;.Can you believe\r\n-\t\t\tit?&lt;/speak&gt;</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"textToSpeechVolume\" advanced=\"true\">\r\n-\t\t<item-type>Dimmer</item-type>\r\n-\t\t<label>Speak Volume</label>\r\n-\t\t<description>Volume of the Speak channel. If 0, the current volume will be used.</description>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"lastVoiceCommand\" advanced=\"true\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Last Voice Command</label>\r\n-\t\t<description>Last voice command spoken to the device. Writing to the channel starts voice output.</description>\r\n-\t\t<state readOnly=\"false\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"mediaProgress\" advanced=\"false\">\r\n-\t\t<item-type>Dimmer</item-type>\r\n-\t\t<label>Media Progress</label>\r\n-\t\t<description>Media progress in percent</description>\r\n-\t\t<state readOnly=\"false\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"mediaProgressTime\" advanced=\"true\">\r\n-\t\t<item-type>Number:Time</item-type>\r\n-\t\t<label>Media Play Time</label>\r\n-\t\t<description>Media play time</description>\r\n-\t\t<state readOnly=\"false\" pattern=\"%d %unit%\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"mediaLength\" advanced=\"true\">\r\n-\t\t<item-type>Number:Time</item-type>\r\n-\t\t<label>Media Length</label>\r\n-\t\t<description>Media length</description>\r\n-\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"startCommand\">\r\n-\t\t<item-type>String</item-type>\r\n-\t\t<label>Start</label>\r\n-\t\t<description>Start information (Write only)</description>\r\n-\t\t<state pattern=\"String\" readOnly=\"false\">\r\n-\t\t\t<options>\r\n-\t\t\t\t<option value=\"Weather\">Weather</option>\r\n-\t\t\t\t<option value=\"Traffic\">Traffic</option>\r\n-\t\t\t\t<option value=\"GoodMorning\">Good morning</option>\r\n-\t\t\t\t<option value=\"SingASong\">Song</option>\r\n-\t\t\t\t<option value=\"TellStory\">Story</option>\r\n-\t\t\t\t<option value=\"FlashBriefing\">Flash briefing</option>\r\n-\t\t\t</options>\r\n-\t\t</state>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"notificationVolume\" advanced=\"true\">\r\n-\t\t<item-type>Dimmer</item-type>\r\n-\t\t<label>Notification Volume</label>\r\n-\t\t<description>Notification Volume</description>\r\n-\t\t<state readOnly=\"false\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"ascendingAlarm\" advanced=\"true\">\r\n-\t\t<item-type>Switch</item-type>\r\n-\t\t<label>Ascending Alarm</label>\r\n-\t\t<description>Ascending alarm up to the configured volume</description>\r\n-\t\t<state readOnly=\"false\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"nextReminder\" advanced=\"true\">\r\n-\t\t<item-type>DateTime</item-type>\r\n-\t\t<label>Next Reminder</label>\r\n-\t\t<description>Next Reminder</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"nextAlarm\" advanced=\"true\">\r\n-\t\t<item-type>DateTime</item-type>\r\n-\t\t<label>Next Alarm</label>\r\n-\t\t<description>Next alarm</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"nextMusicAlarm\" advanced=\"true\">\r\n-\t\t<item-type>DateTime</item-type>\r\n-\t\t<label>Next Music Alarm</label>\r\n-\t\t<description>Next music alarm</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-\t<channel-type id=\"nextTimer\" advanced=\"true\">\r\n-\t\t<item-type>DateTime</item-type>\r\n-\t\t<label>Next Timer</label>\r\n-\t\t<description>Next timer</description>\r\n-\t\t<state readOnly=\"true\"/>\r\n-\t</channel-type>\r\n-</thing:thing-descriptions>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "a00a54fcbe982598243a9b49d5f423acd253c431", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3ODY2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r453178669", "bodyText": "look above", "author": "Trinitus01", "createdAt": "2020-07-11T09:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjQ1Ng=="}], "type": "inlineReview"}, {"oid": "74f5b611bb933222aafa79247f4e83551450b8dc", "url": "https://github.com/openhab/openhab-addons/commit/74f5b611bb933222aafa79247f4e83551450b8dc", "message": "fixed: some files are changed without any touch of it (J-N-K comment)\nchanged: set another error logging to warn (J-N-K comment)\nchanged: same sub classes to static (J-N-K comment)\nremoved: an unnecessary empty check (J-N-K comment)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-11T10:36:35Z", "type": "commit"}, {"oid": "3b44175d946815ffb88b84a20f1d4e8cbf301d69", "url": "https://github.com/openhab/openhab-addons/commit/3b44175d946815ffb88b84a20f1d4e8cbf301d69", "message": "fixed: wait for next request depending on text length\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-11T16:36:57Z", "type": "commit"}, {"oid": "ff69aaf3f5047ddf4e7f24e239c97fbb2fa5a56c", "url": "https://github.com/openhab/openhab-addons/commit/ff69aaf3f5047ddf4e7f24e239c97fbb2fa5a56c", "message": "reset line-endings\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-07-11T17:18:28Z", "type": "commit"}, {"oid": "d781fa3760bc63cc3783fc7c3b187e048f3bf880", "url": "https://github.com/openhab/openhab-addons/commit/d781fa3760bc63cc3783fc7c3b187e048f3bf880", "message": "fixed: ignore zero ttsvolume (initial value is zero)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-12T12:52:12Z", "type": "commit"}, {"oid": "d109fe2bd932bd4d945ca80ea66b71fcee9346b7", "url": "https://github.com/openhab/openhab-addons/commit/d109fe2bd932bd4d945ca80ea66b71fcee9346b7", "message": "fixed: Work around Amazon Security changes and make proxy working again\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-15T15:47:30Z", "type": "commit"}, {"oid": "823a146cf2f776c9f088416258c79931019201ed", "url": "https://github.com/openhab/openhab-addons/commit/823a146cf2f776c9f088416258c79931019201ed", "message": "fixed: Work around Amazon Security changes and make proxy working again (2)\nchanged: request delays\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-16T16:17:50Z", "type": "commit"}, {"oid": "7a914485aef268bcce21ceb010e73ce6a283a2ac", "url": "https://github.com/openhab/openhab-addons/commit/7a914485aef268bcce21ceb010e73ce6a283a2ac", "message": "removed: StringBuilder (deviceid) (J-N-K comment)\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-16T17:48:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MzY4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r456773680", "bodyText": "move this to the queue processing", "author": "J-N-K", "createdAt": "2020-07-18T10:03:05Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -748,15 +765,19 @@ public void webSocketCommandReceived(JsonPushCommand pushCommand) {\n     void handleWebsocketCommand(JsonPushCommand pushCommand) {\n         String command = pushCommand.command;\n         if (command != null) {\n+            @Nullable\n+            ScheduledFuture<?> refreshDataDelayed = this.refreshAfterCommandJob;\n             switch (command) {\n                 case \"PUSH_ACTIVITY\":\n                     handlePushActivity(pushCommand.payload);\n-                    return;\n+                    if (refreshDataDelayed != null) {\n+                        refreshDataDelayed.cancel(false);\n+                    }\n+                    this.refreshAfterCommandJob = scheduler.schedule(this::refreshAfterCommand, 700,\n+                            TimeUnit.MILLISECONDS);", "originalCommit": "7a914485aef268bcce21ceb010e73ce6a283a2ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3Mzg2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r456773869", "bodyText": "Since this is synchronous anyway, no need to unblock, just call queuedPushActivity.", "author": "J-N-K", "createdAt": "2020-07-18T10:05:26Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -792,42 +812,50 @@ private void handlePushDeviceCommand(DopplerId dopplerId, String command, String\n         }\n     }\n \n+    // NEED TO RUN IN A DELAYED QUEUE, ELSE TOO MANY REQUESTS\n     private void handlePushActivity(@Nullable String payload) {\n-        JsonCommandPayloadPushActivity pushActivity = gson.fromJson(payload, JsonCommandPayloadPushActivity.class);\n-\n-        Key key = pushActivity.key;\n-        if (key == null) {\n-            return;\n-        }\n-\n-        Connection connection = this.connection;\n-        if (connection == null || !connection.getIsLoggedIn()) {\n-            return;\n-        }\n-        Activity[] activities = connection.getActivities(10, pushActivity.timestamp);\n-        Activity currentActivity = null;\n-        String search = key.registeredUserId + \"#\" + key.entryId;\n-        for (Activity activity : activities) {\n-            if (StringUtils.equals(activity.id, search)) {\n-                currentActivity = activity;\n-                break;\n-            }\n-        }\n-        if (currentActivity == null) {\n-            return;\n+        pushActivityQueue.add(payload);\n+        if (pushActivityQueueRunning.compareAndSet(false, true)) {\n+            queuedPushActivity();\n         }\n+    }\n \n+    private void queuedPushActivity() {\n         @Nullable\n-        SourceDeviceId @Nullable [] sourceDeviceIds = currentActivity.sourceDeviceIds;\n-        if (sourceDeviceIds != null) {\n-            for (SourceDeviceId sourceDeviceId : sourceDeviceIds) {\n-                if (sourceDeviceId != null) {\n-                    EchoHandler echoHandler = findEchoHandlerBySerialNumber(sourceDeviceId.serialNumber);\n-                    if (echoHandler != null) {\n-                        echoHandler.handlePushActivity(currentActivity);\n-                    }\n+        String payload = pushActivityQueue.poll();\n+        if (payload != null) {\n+            try {\n+                JsonCommandPayloadPushActivity pushActivity = gson.fromJson(payload,\n+                        JsonCommandPayloadPushActivity.class);\n+\n+                Key key = pushActivity.key;\n+                if (key == null) {\n+                    return;\n+                }\n+\n+                Connection connection = this.connection;\n+                if (connection == null || !connection.getIsLoggedIn()) {\n+                    return;\n                 }\n+\n+                String search = key.registeredUserId + \"#\" + key.entryId;\n+                Arrays.stream(connection.getActivities(10, pushActivity.timestamp))\n+                        .filter(activity -> activity != null && search.equals(activity.id)).findFirst()\n+                        .ifPresent(currentActivity -> {\n+                            SourceDeviceId[] sourceDeviceIds = currentActivity.sourceDeviceIds;\n+                            if (sourceDeviceIds != null) {\n+                                Arrays.stream(sourceDeviceIds).filter(Objects::nonNull).map(\n+                                        sourceDeviceId -> findEchoHandlerBySerialNumber(sourceDeviceId.serialNumber))\n+                                        .filter(Objects::nonNull)\n+                                        .forEach(echoHandler -> echoHandler.handlePushActivity(currentActivity));\n+                            }\n+                        });\n+            } finally {\n+                pushActivitySenderUnblockFuture = scheduler.schedule(this::queuedPushActivity, 5, TimeUnit.SECONDS);", "originalCommit": "7a914485aef268bcce21ceb010e73ce6a283a2ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MzkxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r456773919", "bodyText": "add the refresh scheduling here. it then happens 700ms after the command was processed", "author": "J-N-K", "createdAt": "2020-07-18T10:06:00Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -792,42 +812,50 @@ private void handlePushDeviceCommand(DopplerId dopplerId, String command, String\n         }\n     }\n \n+    // NEED TO RUN IN A DELAYED QUEUE, ELSE TOO MANY REQUESTS\n     private void handlePushActivity(@Nullable String payload) {\n-        JsonCommandPayloadPushActivity pushActivity = gson.fromJson(payload, JsonCommandPayloadPushActivity.class);\n-\n-        Key key = pushActivity.key;\n-        if (key == null) {\n-            return;\n-        }\n-\n-        Connection connection = this.connection;\n-        if (connection == null || !connection.getIsLoggedIn()) {\n-            return;\n-        }\n-        Activity[] activities = connection.getActivities(10, pushActivity.timestamp);\n-        Activity currentActivity = null;\n-        String search = key.registeredUserId + \"#\" + key.entryId;\n-        for (Activity activity : activities) {\n-            if (StringUtils.equals(activity.id, search)) {\n-                currentActivity = activity;\n-                break;\n-            }\n-        }\n-        if (currentActivity == null) {\n-            return;\n+        pushActivityQueue.add(payload);\n+        if (pushActivityQueueRunning.compareAndSet(false, true)) {\n+            queuedPushActivity();\n         }\n+    }\n \n+    private void queuedPushActivity() {\n         @Nullable\n-        SourceDeviceId @Nullable [] sourceDeviceIds = currentActivity.sourceDeviceIds;\n-        if (sourceDeviceIds != null) {\n-            for (SourceDeviceId sourceDeviceId : sourceDeviceIds) {\n-                if (sourceDeviceId != null) {\n-                    EchoHandler echoHandler = findEchoHandlerBySerialNumber(sourceDeviceId.serialNumber);\n-                    if (echoHandler != null) {\n-                        echoHandler.handlePushActivity(currentActivity);\n-                    }\n+        String payload = pushActivityQueue.poll();\n+        if (payload != null) {\n+            try {\n+                JsonCommandPayloadPushActivity pushActivity = gson.fromJson(payload,\n+                        JsonCommandPayloadPushActivity.class);\n+\n+                Key key = pushActivity.key;\n+                if (key == null) {\n+                    return;\n+                }\n+\n+                Connection connection = this.connection;\n+                if (connection == null || !connection.getIsLoggedIn()) {\n+                    return;\n                 }\n+\n+                String search = key.registeredUserId + \"#\" + key.entryId;\n+                Arrays.stream(connection.getActivities(10, pushActivity.timestamp))\n+                        .filter(activity -> activity != null && search.equals(activity.id)).findFirst()\n+                        .ifPresent(currentActivity -> {\n+                            SourceDeviceId[] sourceDeviceIds = currentActivity.sourceDeviceIds;\n+                            if (sourceDeviceIds != null) {\n+                                Arrays.stream(sourceDeviceIds).filter(Objects::nonNull).map(\n+                                        sourceDeviceId -> findEchoHandlerBySerialNumber(sourceDeviceId.serialNumber))\n+                                        .filter(Objects::nonNull)\n+                                        .forEach(echoHandler -> echoHandler.handlePushActivity(currentActivity));\n+                            }\n+                        });", "originalCommit": "7a914485aef268bcce21ceb010e73ce6a283a2ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aea66bc7e6283821a46bdcd752b4ee0401cc5e86", "url": "https://github.com/openhab/openhab-addons/commit/aea66bc7e6283821a46bdcd752b4ee0401cc5e86", "message": "removed: push activity queue\nremoved: tts queue\nremoved: announcement (act) queue\nchanged: back to ignore volume during tts and act\nadded: too many requests response code to retry in makeRequest\nadded: redirect the return value of the retried makeRequest\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-19T14:36:14Z", "type": "commit"}, {"oid": "3dc617b84389ca0ae4c64119b5ba3cfa62006a2b", "url": "https://github.com/openhab/openhab-addons/commit/3dc617b84389ca0ae4c64119b5ba3cfa62006a2b", "message": "fixed: EOL for some files\nfixed: file formatting\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-20T16:30:37Z", "type": "commit"}, {"oid": "d36c73893969f7454b59ed02ccd853154fe8710f", "url": "https://github.com/openhab/openhab-addons/commit/d36c73893969f7454b59ed02ccd853154fe8710f", "message": "fixed: tts and act stop working because of scheduler\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-21T13:07:14Z", "type": "commit"}, {"oid": "ccb4c234cdb8a2c9d63421dfdc64e46059c96632", "url": "https://github.com/openhab/openhab-addons/commit/ccb4c234cdb8a2c9d63421dfdc64e46059c96632", "message": "changed: synchronized sendTextToSpeech to prevent multiple iteration of textToSpeeches\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-21T15:07:53Z", "type": "commit"}, {"oid": "e51e3303ca5f2304e120f12fdea892755dbf9238", "url": "https://github.com/openhab/openhab-addons/commit/e51e3303ca5f2304e120f12fdea892755dbf9238", "message": "changed: log message for execute sequence node\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-21T15:18:39Z", "type": "commit"}, {"oid": "cb6273e5167778e31802d07c640cbd5c4898e9c5", "url": "https://github.com/openhab/openhab-addons/commit/cb6273e5167778e31802d07c640cbd5c4898e9c5", "message": "added: sort devices into queues\nfixed: group and non group tts/act conflicts\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-23T16:00:10Z", "type": "commit"}, {"oid": "614d4dc3351f0e180ffc9dafee0534181132568f", "url": "https://github.com/openhab/openhab-addons/commit/614d4dc3351f0e180ffc9dafee0534181132568f", "message": "changed: spotless code format\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-23T19:28:57Z", "type": "commit"}, {"oid": "cd96c8a70672329c93debfb27cbb7de42e936382", "url": "https://github.com/openhab/openhab-addons/commit/cd96c8a70672329c93debfb27cbb7de42e936382", "message": "added: group volume change (to prevent too many requests)\nchanged: ttsVolume included in tts or act request (not standardVolume)\nfixed: single and group device conflict\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-26T10:10:31Z", "type": "commit"}, {"oid": "35df7497281cd3fdb198207bf5462f9a1b3d4e83", "url": "https://github.com/openhab/openhab-addons/commit/35df7497281cd3fdb198207bf5462f9a1b3d4e83", "message": "fixed: @Nullable and @NonNull Tests failed\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-26T10:58:07Z", "type": "commit"}, {"oid": "bb65d60908aea22b7ff899fb2ad1553557b0b83a", "url": "https://github.com/openhab/openhab-addons/commit/bb65d60908aea22b7ff899fb2ad1553557b0b83a", "message": "Merge 2.5.x-github_openhab-addons into SmartHome\n\nConflicts:\n\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "committedDate": "2020-07-26T11:48:00Z", "type": "commit"}, {"oid": "004117a55e371241582b9faf0a607648acea754a", "url": "https://github.com/openhab/openhab-addons/commit/004117a55e371241582b9faf0a607648acea754a", "message": "added: cancle and null timers (necessary?)", "committedDate": "2020-07-28T10:53:58Z", "type": "commit"}, {"oid": "d4bbc80ff23e23b2ebd5d35d422c51f0494ab248", "url": "https://github.com/openhab/openhab-addons/commit/d4bbc80ff23e23b2ebd5d35d422c51f0494ab248", "message": "Merge 2.5.x-github_openhab-addons into SmartHome\n\nConflicts:\n\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/AmazonEchoControlHandlerFactory.java", "committedDate": "2020-07-28T10:59:29Z", "type": "commit"}, {"oid": "7b3aab11047efcf3b2736266e12ffe60ed5684a1", "url": "https://github.com/openhab/openhab-addons/commit/7b3aab11047efcf3b2736266e12ffe60ed5684a1", "message": "fixed: if makeRequest fails wait anyway, often the request is executed\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-07-30T17:43:26Z", "type": "commit"}, {"oid": "da2c3358a2dd7b2cf3c152d5be425a74293470a8", "url": "https://github.com/openhab/openhab-addons/commit/da2c3358a2dd7b2cf3c152d5be425a74293470a8", "message": "added: name to binding.xml\n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-08-05T14:44:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMDkyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r468100922", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Optional<Device> device = this.jsonSerialNumberDeviceMapping.values().stream().filter(\n          \n          \n            \n                            d -> serialOrName.equalsIgnoreCase(d.serialNumber) || serialOrName.equalsIgnoreCase(d.accountName))\n          \n          \n            \n                            .findFirst();\n          \n          \n            \n            \n          \n          \n            \n                    if (device.isPresent()) {\n          \n          \n            \n                        return device.get();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }\n          \n          \n            \n                   return this.jsonSerialNumberDeviceMapping.values().stream().filter(\n          \n          \n            \n                            d -> serialOrName.equalsIgnoreCase(d.serialNumber) || serialOrName.equalsIgnoreCase(d.accountName))\n          \n          \n            \n                            .findFirst().orElse(null);", "author": "J-N-K", "createdAt": "2020-08-10T18:36:24Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -591,28 +598,27 @@ private void refreshData() {\n \n     public @Nullable Device findDeviceJson(@Nullable String serialNumber) {\n         Device result = null;\n-        if (StringUtils.isNotEmpty(serialNumber)) {\n+        if (serialNumber != null && !serialNumber.isEmpty()) {\n             Map<String, Device> jsonSerialNumberDeviceMapping = this.jsonSerialNumberDeviceMapping;\n             result = jsonSerialNumberDeviceMapping.get(serialNumber);\n         }\n         return result;\n     }\n \n     public @Nullable Device findDeviceJsonBySerialOrName(@Nullable String serialOrName) {\n-        if (StringUtils.isNotEmpty(serialOrName)) {\n-            Map<String, Device> currentJsonSerialNumberDeviceMapping = this.jsonSerialNumberDeviceMapping;\n-            for (Device device : currentJsonSerialNumberDeviceMapping.values()) {\n-                if (StringUtils.equalsIgnoreCase(device.serialNumber, serialOrName)) {\n-                    return device;\n-                }\n-            }\n-            for (Device device : currentJsonSerialNumberDeviceMapping.values()) {\n-                if (StringUtils.equalsIgnoreCase(device.accountName, serialOrName)) {\n-                    return device;\n-                }\n-            }\n+        if (serialOrName == null || serialOrName.isEmpty()) {\n+            return null;\n+        }\n+\n+        Optional<Device> device = this.jsonSerialNumberDeviceMapping.values().stream().filter(\n+                d -> serialOrName.equalsIgnoreCase(d.serialNumber) || serialOrName.equalsIgnoreCase(d.accountName))\n+                .findFirst();\n+\n+        if (device.isPresent()) {\n+            return device.get();\n+        } else {\n+            return null;\n         }", "originalCommit": "da2c3358a2dd7b2cf3c152d5be425a74293470a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY3MzQ1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r468673451", "bodyText": "Turns into: Null type mismatch: required 'JsonDevices.@nonnull Device' but the provided value is null\nI do not have any experience about this @nonnull and @nullable Annotations, sadly.", "author": "Trinitus01", "createdAt": "2020-08-11T15:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMDkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNDMzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r469414334", "bodyText": "Then leave it as it is. Obviously it's the same but the null annotations do not properly handle Optionals.", "author": "J-N-K", "createdAt": "2020-08-12T17:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMDkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMTI5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8090#discussion_r468101292", "bodyText": "not needed, local variables are always nullable", "author": "J-N-K", "createdAt": "2020-08-10T18:36:59Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -748,15 +754,19 @@ public void webSocketCommandReceived(JsonPushCommand pushCommand) {\n     void handleWebsocketCommand(JsonPushCommand pushCommand) {\n         String command = pushCommand.command;\n         if (command != null) {\n+            @Nullable", "originalCommit": "da2c3358a2dd7b2cf3c152d5be425a74293470a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8406fbb5d2b2f5acc4b9040b51c1fb2ccce9ed45", "url": "https://github.com/openhab/openhab-addons/commit/8406fbb5d2b2f5acc4b9040b51c1fb2ccce9ed45", "message": "removed: nullable for local variables (J-N-K comment)\nchanged: text delay to 150ms (sometimes 100ms was too short) \n\nSigned-off-by: Tom Blum (Trinitus01) <trinitus01@googlemail.com>", "committedDate": "2020-08-15T11:27:10Z", "type": "commit"}]}