{"pr_number": 9375, "pr_title": "[epsonprojector] Add ESC/VP.net handshake for projectors with built-in ethernet", "pr_createdAt": "2020-12-14T00:12:13Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9375", "timeline": [{"oid": "146b199b3cb2b065f7b43ed713c16d6e19d3e0a0", "url": "https://github.com/openhab/openhab-addons/commit/146b199b3cb2b065f7b43ed713c16d6e19d3e0a0", "message": "Add ESC/VP.net handshake for projectors with built-in ethernet\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-12-14T00:03:41Z", "type": "commit"}, {"oid": "fca989bb0644076a31f952f88a53e067489b0413", "url": "https://github.com/openhab/openhab-addons/commit/fca989bb0644076a31f952f88a53e067489b0413", "message": "update README.md\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-12-15T04:27:31Z", "type": "commit"}, {"oid": "765cfe14d593cf2997e04b51f65177a3e36f2822", "url": "https://github.com/openhab/openhab-addons/commit/765cfe14d593cf2997e04b51f65177a3e36f2822", "message": "Add discovery service\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-12-15T07:50:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3ODczNw==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543678737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(\n          \n          \n            \n                        Stream.of(THING_TYPE_PROJECTOR_SERIAL, THING_TYPE_PROJECTOR_TCP).collect(Collectors.toSet()));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_PROJECTOR_SERIAL, THING_TYPE_PROJECTOR_TCP);", "author": "fwolter", "createdAt": "2020-12-15T20:53:56Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorBindingConstants.java", "diffHunk": "@@ -20,18 +25,27 @@\n  * used across the whole binding.\n  *\n  * @author Yannick Schaus - Initial contribution\n+ * @author Michael Lobstein - Updated for OH3\n  */\n @NonNullByDefault\n public class EpsonProjectorBindingConstants {\n \n-    private static final String BINDING_ID = \"epsonprojector\";\n+    public static final String BINDING_ID = \"epsonprojector\";\n+    public static final int DEFAULT_PORT = 3629;\n \n     // List of all Thing Type UIDs\n     public static final ThingTypeUID THING_TYPE_PROJECTOR_SERIAL = new ThingTypeUID(BINDING_ID, \"projector-serial\");\n     public static final ThingTypeUID THING_TYPE_PROJECTOR_TCP = new ThingTypeUID(BINDING_ID, \"projector-tcp\");\n \n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(\n+            Stream.of(THING_TYPE_PROJECTOR_SERIAL, THING_TYPE_PROJECTOR_TCP).collect(Collectors.toSet()));", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3OTE2NA==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543679164", "bodyText": "Can you make this a constant?", "author": "fwolter", "createdAt": "2020-12-15T20:54:35Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorTcpConnector.java", "diffHunk": "@@ -58,6 +59,16 @@ public void connect() throws EpsonProjectorException {\n         } catch (IOException e) {\n             throw new EpsonProjectorException(e);\n         }\n+\n+        // Projectors with built in Ethernet listen on 3629, we must send the handshake to initialize the connection\n+        if (port == 3629) {", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1MzcxMw==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543953713", "bodyText": "done", "author": "mlobstein", "createdAt": "2020-12-16T04:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3OTE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3OTUyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543679529", "bodyText": "This shouldn't be necessary.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")\n          \n          \n            \n            @Component(service = DiscoveryService.class, configurationPid = \"discovery.epsonprojector\")", "author": "fwolter", "createdAt": "2020-12-15T20:55:08Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/EpsonProjectorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectoreDiscoveryService} class implements a service\n+ * for discovering Epson projectors using the AMX Device Discovery protocol.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3OTg3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543679871", "bodyText": "Is there a reason not using the discovery's scheduler?", "author": "fwolter", "createdAt": "2020-12-15T20:55:42Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/EpsonProjectorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectoreDiscoveryService} class implements a service\n+ * for discovering Epson projectors using the AMX Device Discovery protocol.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")\n+public class EpsonProjectorDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorDiscoveryService.class);\n+\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1NDI3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543954272", "bodyText": "It was late at night while I was coding this ;)", "author": "mlobstein", "createdAt": "2020-12-16T04:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3OTg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3OTk5OA==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543679998", "bodyText": "It's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "author": "fwolter", "createdAt": "2020-12-15T20:55:53Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/EpsonProjectorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectoreDiscoveryService} class implements a service\n+ * for discovering Epson projectors using the AMX Device Discovery protocol.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")\n+public class EpsonProjectorDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorDiscoveryService.class);\n+\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n+    private @Nullable ScheduledFuture<?> epsonDiscoveryJob;\n+\n+    // Discovery parameters\n+    public static final boolean BACKGROUND_DISCOVERY_ENABLED = true;\n+    public static final int BACKGROUND_DISCOVERY_DELAY = 10;", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MDc2OA==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543680768", "bodyText": "Are these necessary?", "author": "fwolter", "createdAt": "2020-12-15T20:57:12Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/EpsonProjectorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectoreDiscoveryService} class implements a service\n+ * for discovering Epson projectors using the AMX Device Discovery protocol.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")\n+public class EpsonProjectorDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorDiscoveryService.class);\n+\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n+    private @Nullable ScheduledFuture<?> epsonDiscoveryJob;\n+\n+    // Discovery parameters\n+    public static final boolean BACKGROUND_DISCOVERY_ENABLED = true;\n+    public static final int BACKGROUND_DISCOVERY_DELAY = 10;\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private boolean terminate = false;\n+\n+    public EpsonProjectorDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, 0, BACKGROUND_DISCOVERY_ENABLED);\n+        epsonDiscoveryJob = null;\n+        terminate = false;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    protected void activate(@Nullable Map<String, Object> configProperties) {\n+        logger.debug(\"Epson Projector discovery service activated\");\n+        super.activate(configProperties);\n+    }\n+\n+    @Override\n+    protected void deactivate() {\n+        logger.debug(\"Epson projector discovery service deactivated\");\n+        stopBackgroundDiscovery();\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    @Modified\n+    protected void modified(@Nullable Map<String, Object> configProperties) {\n+        super.modified(configProperties);\n+    }", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAxMDgzMw==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r544010833", "bodyText": "I guess not, removed.", "author": "mlobstein", "createdAt": "2020-12-16T06:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MDc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MTExMg==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543681112", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-12-15T20:57:42Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/EpsonProjectorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectoreDiscoveryService} class implements a service\n+ * for discovering Epson projectors using the AMX Device Discovery protocol.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")\n+public class EpsonProjectorDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorDiscoveryService.class);\n+\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n+    private @Nullable ScheduledFuture<?> epsonDiscoveryJob;\n+\n+    // Discovery parameters\n+    public static final boolean BACKGROUND_DISCOVERY_ENABLED = true;\n+    public static final int BACKGROUND_DISCOVERY_DELAY = 10;\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private boolean terminate = false;\n+\n+    public EpsonProjectorDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, 0, BACKGROUND_DISCOVERY_ENABLED);\n+        epsonDiscoveryJob = null;\n+        terminate = false;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    protected void activate(@Nullable Map<String, Object> configProperties) {\n+        logger.debug(\"Epson Projector discovery service activated\");\n+        super.activate(configProperties);\n+    }\n+\n+    @Override\n+    protected void deactivate() {\n+        logger.debug(\"Epson projector discovery service deactivated\");\n+        stopBackgroundDiscovery();\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    @Modified\n+    protected void modified(@Nullable Map<String, Object> configProperties) {\n+        super.modified(configProperties);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        if (epsonDiscoveryJob == null) {\n+            terminate = false;\n+            logger.debug(\"Starting background discovery job in {} seconds\", BACKGROUND_DISCOVERY_DELAY);\n+            epsonDiscoveryJob = scheduledExecutorService.schedule(this::discover, BACKGROUND_DISCOVERY_DELAY,\n+                    TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        ScheduledFuture<?> epsonDiscoveryJob = this.epsonDiscoveryJob;\n+        if (epsonDiscoveryJob != null) {\n+            logger.debug(\"Canceling background discovery job\");", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MTYwNg==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543681606", "bodyText": "You could inject this in the constructor to get rid of the Nullable annotation.", "author": "fwolter", "createdAt": "2020-12-15T20:58:36Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/EpsonProjectorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectoreDiscoveryService} class implements a service\n+ * for discovering Epson projectors using the AMX Device Discovery protocol.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")\n+public class EpsonProjectorDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorDiscoveryService.class);\n+\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n+    private @Nullable ScheduledFuture<?> epsonDiscoveryJob;\n+\n+    // Discovery parameters\n+    public static final boolean BACKGROUND_DISCOVERY_ENABLED = true;\n+    public static final int BACKGROUND_DISCOVERY_DELAY = 10;\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private boolean terminate = false;\n+\n+    public EpsonProjectorDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, 0, BACKGROUND_DISCOVERY_ENABLED);\n+        epsonDiscoveryJob = null;\n+        terminate = false;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    protected void activate(@Nullable Map<String, Object> configProperties) {\n+        logger.debug(\"Epson Projector discovery service activated\");\n+        super.activate(configProperties);\n+    }\n+\n+    @Override\n+    protected void deactivate() {\n+        logger.debug(\"Epson projector discovery service deactivated\");\n+        stopBackgroundDiscovery();\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    @Modified\n+    protected void modified(@Nullable Map<String, Object> configProperties) {\n+        super.modified(configProperties);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        if (epsonDiscoveryJob == null) {\n+            terminate = false;\n+            logger.debug(\"Starting background discovery job in {} seconds\", BACKGROUND_DISCOVERY_DELAY);\n+            epsonDiscoveryJob = scheduledExecutorService.schedule(this::discover, BACKGROUND_DISCOVERY_DELAY,\n+                    TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        ScheduledFuture<?> epsonDiscoveryJob = this.epsonDiscoveryJob;\n+        if (epsonDiscoveryJob != null) {\n+            logger.debug(\"Canceling background discovery job\");\n+            terminate = true;\n+            epsonDiscoveryJob.cancel(false);\n+            this.epsonDiscoveryJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void startScan() {\n+    }\n+\n+    @Override\n+    public void stopScan() {\n+    }\n+\n+    private synchronized void discover() {\n+        logger.debug(\"Discovery job is running\");\n+\n+        MulticastListener epsonMulticastListener;\n+        NetworkAddressService networkAddressService = this.networkAddressService;\n+\n+        if (networkAddressService != null) {\n+            String local = \"127.0.0.1\";\n+            try {\n+                String ip = networkAddressService.getPrimaryIpv4HostAddress();\n+                epsonMulticastListener = new MulticastListener((ip != null ? ip : local));\n+            } catch (SocketException se) {\n+                logger.error(\"Discovery job got Socket exception creating multicast socket: {}\", se.getMessage());\n+                return;\n+            } catch (IOException ioe) {\n+                logger.error(\"Discovery job got IO exception creating multicast socket: {}\", ioe.getMessage());\n+                return;\n+            }\n+\n+            while (!terminate) {\n+                boolean beaconReceived;\n+                try {\n+                    // Wait for a discovery beacon.\n+                    beaconReceived = epsonMulticastListener.waitForBeacon();\n+                } catch (IOException ioe) {\n+                    logger.debug(\"Discovery job got exception waiting for beacon: {}\", ioe.getMessage());\n+                    beaconReceived = false;\n+                }\n+\n+                if (beaconReceived) {\n+                    // We got a discovery beacon. Process it as a potential new thing\n+                    Map<String, Object> properties = new HashMap<>();\n+\n+                    properties.put(THING_PROPERTY_HOST, epsonMulticastListener.getIPAddress());\n+                    properties.put(THING_PROPERTY_PORT, DEFAULT_PORT);\n+\n+                    logger.trace(\"Projector with UID {} discovered at IP: {}\", epsonMulticastListener.getUID(),\n+                            epsonMulticastListener.getIPAddress());\n+\n+                    ThingUID uid = new ThingUID(THING_TYPE_PROJECTOR_TCP, epsonMulticastListener.getUID());\n+                    logger.trace(\"Creating epson projector discovery result for: {}, IP={}\", uid,\n+                            epsonMulticastListener.getIPAddress());\n+                    thingDiscovered(DiscoveryResultBuilder.create(uid).withProperties(properties)\n+                            .withLabel(\"Epson Projector \" + epsonMulticastListener.getUID()).build());\n+                }\n+            }\n+            epsonMulticastListener.shutdown();\n+            logger.debug(\"Discovery job is exiting\");\n+        }\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    protected void unsetNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = null;\n+    }", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAxMDY4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r544010687", "bodyText": "done", "author": "mlobstein", "createdAt": "2020-12-16T06:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MTYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MTc1MA==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543681750", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be debug. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nSame for below.", "author": "fwolter", "createdAt": "2020-12-15T20:58:51Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/EpsonProjectorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectoreDiscoveryService} class implements a service\n+ * for discovering Epson projectors using the AMX Device Discovery protocol.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")\n+public class EpsonProjectorDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorDiscoveryService.class);\n+\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n+    private @Nullable ScheduledFuture<?> epsonDiscoveryJob;\n+\n+    // Discovery parameters\n+    public static final boolean BACKGROUND_DISCOVERY_ENABLED = true;\n+    public static final int BACKGROUND_DISCOVERY_DELAY = 10;\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private boolean terminate = false;\n+\n+    public EpsonProjectorDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, 0, BACKGROUND_DISCOVERY_ENABLED);\n+        epsonDiscoveryJob = null;\n+        terminate = false;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    protected void activate(@Nullable Map<String, Object> configProperties) {\n+        logger.debug(\"Epson Projector discovery service activated\");\n+        super.activate(configProperties);\n+    }\n+\n+    @Override\n+    protected void deactivate() {\n+        logger.debug(\"Epson projector discovery service deactivated\");\n+        stopBackgroundDiscovery();\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    @Modified\n+    protected void modified(@Nullable Map<String, Object> configProperties) {\n+        super.modified(configProperties);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        if (epsonDiscoveryJob == null) {\n+            terminate = false;\n+            logger.debug(\"Starting background discovery job in {} seconds\", BACKGROUND_DISCOVERY_DELAY);\n+            epsonDiscoveryJob = scheduledExecutorService.schedule(this::discover, BACKGROUND_DISCOVERY_DELAY,\n+                    TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        ScheduledFuture<?> epsonDiscoveryJob = this.epsonDiscoveryJob;\n+        if (epsonDiscoveryJob != null) {\n+            logger.debug(\"Canceling background discovery job\");\n+            terminate = true;\n+            epsonDiscoveryJob.cancel(false);\n+            this.epsonDiscoveryJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void startScan() {\n+    }\n+\n+    @Override\n+    public void stopScan() {\n+    }\n+\n+    private synchronized void discover() {\n+        logger.debug(\"Discovery job is running\");\n+\n+        MulticastListener epsonMulticastListener;\n+        NetworkAddressService networkAddressService = this.networkAddressService;\n+\n+        if (networkAddressService != null) {\n+            String local = \"127.0.0.1\";\n+            try {\n+                String ip = networkAddressService.getPrimaryIpv4HostAddress();\n+                epsonMulticastListener = new MulticastListener((ip != null ? ip : local));\n+            } catch (SocketException se) {\n+                logger.error(\"Discovery job got Socket exception creating multicast socket: {}\", se.getMessage());", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MjUzMw==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543682533", "bodyText": "Can you add the representation property?", "author": "fwolter", "createdAt": "2020-12-15T21:00:08Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/EpsonProjectorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectoreDiscoveryService} class implements a service\n+ * for discovering Epson projectors using the AMX Device Discovery protocol.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.epsonprojector\")\n+public class EpsonProjectorDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorDiscoveryService.class);\n+\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n+    private @Nullable ScheduledFuture<?> epsonDiscoveryJob;\n+\n+    // Discovery parameters\n+    public static final boolean BACKGROUND_DISCOVERY_ENABLED = true;\n+    public static final int BACKGROUND_DISCOVERY_DELAY = 10;\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private boolean terminate = false;\n+\n+    public EpsonProjectorDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, 0, BACKGROUND_DISCOVERY_ENABLED);\n+        epsonDiscoveryJob = null;\n+        terminate = false;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    protected void activate(@Nullable Map<String, Object> configProperties) {\n+        logger.debug(\"Epson Projector discovery service activated\");\n+        super.activate(configProperties);\n+    }\n+\n+    @Override\n+    protected void deactivate() {\n+        logger.debug(\"Epson projector discovery service deactivated\");\n+        stopBackgroundDiscovery();\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    @Modified\n+    protected void modified(@Nullable Map<String, Object> configProperties) {\n+        super.modified(configProperties);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        if (epsonDiscoveryJob == null) {\n+            terminate = false;\n+            logger.debug(\"Starting background discovery job in {} seconds\", BACKGROUND_DISCOVERY_DELAY);\n+            epsonDiscoveryJob = scheduledExecutorService.schedule(this::discover, BACKGROUND_DISCOVERY_DELAY,\n+                    TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        ScheduledFuture<?> epsonDiscoveryJob = this.epsonDiscoveryJob;\n+        if (epsonDiscoveryJob != null) {\n+            logger.debug(\"Canceling background discovery job\");\n+            terminate = true;\n+            epsonDiscoveryJob.cancel(false);\n+            this.epsonDiscoveryJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void startScan() {\n+    }\n+\n+    @Override\n+    public void stopScan() {\n+    }\n+\n+    private synchronized void discover() {\n+        logger.debug(\"Discovery job is running\");\n+\n+        MulticastListener epsonMulticastListener;\n+        NetworkAddressService networkAddressService = this.networkAddressService;\n+\n+        if (networkAddressService != null) {\n+            String local = \"127.0.0.1\";\n+            try {\n+                String ip = networkAddressService.getPrimaryIpv4HostAddress();\n+                epsonMulticastListener = new MulticastListener((ip != null ? ip : local));\n+            } catch (SocketException se) {\n+                logger.error(\"Discovery job got Socket exception creating multicast socket: {}\", se.getMessage());\n+                return;\n+            } catch (IOException ioe) {\n+                logger.error(\"Discovery job got IO exception creating multicast socket: {}\", ioe.getMessage());\n+                return;\n+            }\n+\n+            while (!terminate) {\n+                boolean beaconReceived;\n+                try {\n+                    // Wait for a discovery beacon.\n+                    beaconReceived = epsonMulticastListener.waitForBeacon();\n+                } catch (IOException ioe) {\n+                    logger.debug(\"Discovery job got exception waiting for beacon: {}\", ioe.getMessage());\n+                    beaconReceived = false;\n+                }\n+\n+                if (beaconReceived) {\n+                    // We got a discovery beacon. Process it as a potential new thing\n+                    Map<String, Object> properties = new HashMap<>();\n+\n+                    properties.put(THING_PROPERTY_HOST, epsonMulticastListener.getIPAddress());\n+                    properties.put(THING_PROPERTY_PORT, DEFAULT_PORT);\n+\n+                    logger.trace(\"Projector with UID {} discovered at IP: {}\", epsonMulticastListener.getUID(),\n+                            epsonMulticastListener.getIPAddress());\n+\n+                    ThingUID uid = new ThingUID(THING_TYPE_PROJECTOR_TCP, epsonMulticastListener.getUID());\n+                    logger.trace(\"Creating epson projector discovery result for: {}, IP={}\", uid,\n+                            epsonMulticastListener.getIPAddress());\n+                    thingDiscovered(DiscoveryResultBuilder.create(uid).withProperties(properties)\n+                            .withLabel(\"Epson Projector \" + epsonMulticastListener.getUID()).build());", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2MTE3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543961178", "bodyText": "done", "author": "mlobstein", "createdAt": "2020-12-16T05:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MjUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MjY4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543682681", "bodyText": "It's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "author": "fwolter", "createdAt": "2020-12-15T21:00:28Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/MulticastListener.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.MulticastSocket;\n+import java.net.NetworkInterface;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MulticastListener} class is responsible for listening for the Epson projector device announcement\n+ * beacons on the multicast address, and then extracting the data fields out of the received datagram.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+public class MulticastListener {\n+    private final Logger logger = LoggerFactory.getLogger(MulticastListener.class);\n+\n+    private MulticastSocket socket;\n+\n+    // Epson-specific properties defined in this binding\n+    private String uid = \"\";\n+    private String ipAddress = \"\";\n+\n+    // Epson projector devices announce themselves on a multicast port\n+    private static final String EPSON_MULTICAST_GROUP = \"239.255.250.250\";\n+    private static final int EPSON_MULTICAST_PORT = 9131;\n+\n+    // How long to wait in milliseconds for a discovery beacon\n+    public static final int DEFAULT_SOCKET_TIMEOUT = 3000;", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MzI2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9375#discussion_r543683269", "bodyText": "Can you specify the encoding you expect? E.g. StandardCharsets.UTF_8", "author": "fwolter", "createdAt": "2020-12-15T21:01:29Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/discovery/MulticastListener.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.discovery;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.MulticastSocket;\n+import java.net.NetworkInterface;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MulticastListener} class is responsible for listening for the Epson projector device announcement\n+ * beacons on the multicast address, and then extracting the data fields out of the received datagram.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Epson Projector binding\n+ */\n+@NonNullByDefault\n+public class MulticastListener {\n+    private final Logger logger = LoggerFactory.getLogger(MulticastListener.class);\n+\n+    private MulticastSocket socket;\n+\n+    // Epson-specific properties defined in this binding\n+    private String uid = \"\";\n+    private String ipAddress = \"\";\n+\n+    // Epson projector devices announce themselves on a multicast port\n+    private static final String EPSON_MULTICAST_GROUP = \"239.255.250.250\";\n+    private static final int EPSON_MULTICAST_PORT = 9131;\n+\n+    // How long to wait in milliseconds for a discovery beacon\n+    public static final int DEFAULT_SOCKET_TIMEOUT = 3000;\n+\n+    /*\n+     * Constructor joins the multicast group, throws IOException on failure.\n+     */\n+    public MulticastListener(String ipv4Address) throws IOException, SocketException {\n+        InetAddress ifAddress = InetAddress.getByName(ipv4Address);\n+        logger.debug(\"Discovery job using address {} on network interface {}\", ifAddress.getHostAddress(),\n+                NetworkInterface.getByInetAddress(ifAddress).getName());\n+        socket = new MulticastSocket(EPSON_MULTICAST_PORT);\n+        socket.setInterface(ifAddress);\n+        socket.setSoTimeout(DEFAULT_SOCKET_TIMEOUT);\n+        InetAddress mcastAddress = InetAddress.getByName(EPSON_MULTICAST_GROUP);\n+        socket.joinGroup(mcastAddress);\n+        logger.debug(\"Multicast listener joined multicast group {}:{}\", EPSON_MULTICAST_GROUP, EPSON_MULTICAST_PORT);\n+    }\n+\n+    public void shutdown() {\n+        logger.debug(\"Multicast listener closing down multicast socket\");\n+        socket.close();\n+    }\n+\n+    /*\n+     * Wait on the multicast socket for an announcement beacon. Return false on socket timeout or error.\n+     * Otherwise, parse the beacon for information about the device.\n+     */\n+    public boolean waitForBeacon() throws IOException {\n+        byte[] bytes = new byte[600];\n+        boolean beaconFound;\n+\n+        // Wait for a device to announce itself\n+        logger.trace(\"Multicast listener waiting for datagram on multicast port\");\n+        DatagramPacket msgPacket = new DatagramPacket(bytes, bytes.length);\n+        try {\n+            socket.receive(msgPacket);\n+            beaconFound = true;\n+            logger.trace(\"Multicast listener got datagram of length {} from multicast port: {}\", msgPacket.getLength(),\n+                    msgPacket.toString());\n+        } catch (SocketTimeoutException e) {\n+            beaconFound = false;\n+        }\n+\n+        if (beaconFound) {\n+            // Get the device properties from the announcement beacon\n+            parseAnnouncementBeacon(msgPacket);\n+        }\n+\n+        return beaconFound;\n+    }\n+\n+    /*\n+     * Parse the announcement beacon into the elements needed to create the thing.\n+     *\n+     * Example Epson beacon:\n+     * AMXB<-UUID=000048746B33><-SDKClass=VideoProjector><-GUID=EPSON_EMP001><-Revision=1.0.0>\n+     */\n+    private void parseAnnouncementBeacon(DatagramPacket packet) {\n+        String beacon = (new String(packet.getData())).trim();", "originalCommit": "765cfe14d593cf2997e04b51f65177a3e36f2822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f50bbc55c233448789737414fc84cfb72eca8e7e", "url": "https://github.com/openhab/openhab-addons/commit/f50bbc55c233448789737414fc84cfb72eca8e7e", "message": "review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-12-16T06:12:46Z", "type": "commit"}, {"oid": "619d8a7c46f1b1c1b7fba7c827945798e7bc5a17", "url": "https://github.com/openhab/openhab-addons/commit/619d8a7c46f1b1c1b7fba7c827945798e7bc5a17", "message": "minor wording fix in README\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-12-24T05:26:02Z", "type": "commit"}]}