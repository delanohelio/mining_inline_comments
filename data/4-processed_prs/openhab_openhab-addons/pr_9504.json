{"pr_number": 9504, "pr_title": "[plugwiseha] Initial contribution", "pr_createdAt": "2020-12-24T11:43:06Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9504", "timeline": [{"oid": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "url": "https://github.com/openhab/openhab-addons/commit/ef8f66ea4fa7c814811d62051f4a616af4bea327", "message": "Minor style fix\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2020-12-27T09:19:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczMzUzNg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549733536", "bodyText": "Please put each sentence on a single line.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n          \n          \n            \n            The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control).\n          \n          \n            \n            This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n          \n      \n    \n    \n  \n\nAlso check the other sentences.", "author": "Hilbrand", "createdAt": "2020-12-29T14:53:53Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczNDYzNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549734637", "bodyText": "The indentation seems to be a combination between tabs and spaces. Can you make it all spaces.", "author": "Hilbrand", "createdAt": "2020-12-29T14:56:47Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.\n+\n+## Supported Things\n+\n+| Device Type                                              | Description                                                                                                        | Thing Type      |\n+| -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------ | --------------- |\n+| -                                                        | A Plugwise heating zone configured with at least 1 of the devices below                                            | zone            |\n+| [Adam](https://www.plugwise.com/en_US/products/adam-ha)  | The Plugwise Home Automation Bridge is needed to connect to the Adam boiler gateway                                | gateway         |\n+| [Tom](https://www.plugwise.com/en_US/products/tom)       | A Plugwise Home Automation radiator valve                                                                          | appliance_valve |\n+| [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve |\n+| [Circle](https://www.plugwise.com/en_US/products/circle) | A power outlet plug that provides energy measurement and switching control of appliances (e.g. floor heating pump) | appliance_pump  |\n+| [Lisa](https://www.plugwise.com/en_US/products/lisa)     | A room thermostat (also supports the 'Anna' room thermostat)                                                       | appliance_thermostat |\n+| [Boiler]                                                 | A central boiler used for heating and/or domestic hot water                                                        | appliance_boiler |\n+\n+\n+\n+## Discovery\n+\n+After setting up the Plugwise Home Automation bridge you can start a manual scan to find all devices registered on the gateway. You can also manually add things by entering the corresponding device id as a configuration parameter. The device id's can be found be enabling TRACE logging in the Karaf console.\n+\n+## Thing Configuration\n+\n+You must define a Plugwise Home Automation gateway (Bridge) before defining zones or appliances (Things) for this binding to work.\n+\n+#### Plugwise Home Automation gateway (Bridge):\n+\n+| Parameter | Description                                                             | Config   | Default |\n+| --------- | ----------------------------------------------------------------------- | -------- | ------- |\n+| host      | The IP address or hostname of the Adam HA gateway                       | Required | 'adam'  |\n+| username  | The username for the Adam HA gateway                                    | Optional | 'smile' |\n+| smileID   | The 8 letter code on the sticker on the back of the Adam boiler gateway | Required | -       |\n+| refresh   | The refresh interval in seconds                                         | Optional | 15      |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description               | Config   | Default |\n+| --------- | ------------------------- | -------- | ------- |\n+| id        | The unique ID of the zone | Required | -       |\n+\n+#### Plugwise Home Automation appliance (`appliance_valve`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the radiator valve appliance                                                                      | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+#### Plugwise Home Automation appliance (`appliance_thermostat`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the room thermostat appliance                                                                     | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+\n+#### Plugwise Home Automation appliance (`appliance_pump`):\n+\n+| Parameter | Description                         | Config   | Default |\n+| --------- | ----------------------------------- | -------- | ------- |\n+| id        | The unique ID of the pump appliance | Required | -       |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description                 | Config   | Default |\n+| --------- | --------------------------- | -------- | ------- |\n+| id        | The unique ID of the boiler | Required | -       |\n+\n+## Channels\n+\n+| channel | type   | Read-only?  | description                 |\n+| ------- | ------ | ------------ | --------------- |\n+| temperature | Number:Temperature | Yes | This channel is used to read the temperature of an appliance that supports the thermostat functionality |\n+| setpointTemperature | Number:Temperature | No | This channel is used to read or write the setpoint temperature of an appliance that supports the thermostat functionality |\n+| power | Switch | No | This channel is used to toggle an appliance ON/OFF that supports the relay functionality |\n+| lock | Switch | No | This channel is used to toggle an appliance lock ON/OFF that supports the relay functionality.(*When the lock is ON the gateway will not automatically control the corresponding relay switch depending on thermostat mode*) |\n+| powerUsage | Number | Yes | This channel is used to read the current power usage in Watts of an appliance that supports this |\n+| batteryLevel | Number | Yes | This channel is used to read the current battery level of an appliance that is battery operated |\n+| batteryLevelLow | Switch | Yes | This channel will switch ON when the battery level of an appliance that is battery operated drops below a certain threshold |\n+| chState | Switch | Yes | This channel is used to read the current central heating state of the boiler |\n+| dhwState | Switch | Yes | This channel is used to read the current domestic hot water state of the boiler |\n+| waterPressure | Number | Yes | This channel is used to read the current water pressure of the boiler |\n+| presetScene | String | Yes | This channel is used to read the current active scene for the zone |\n+\n+\n+## Full Example\n+\n+**things/plugwiseha.things**\n+\n+```\n+Bridge plugwiseha:gateway:home \"Plugwise Home Automation Gateway\" [ smileId=\"abcdefgh\" ] {\n+\tThing zone living_room_zone \"Living room\" [ id=\"$device_id\" ]\n+    Thing appliance_valve living_room_radiator \"Living room radiator valve\" [ id=\"$device_id\" ]\n+\tThing appliance_thermostat living_room_thermostat \"Living room thermostat\" [ id=\"$device_id\" ]\n+    Thing appliance_pump living_room_pump \"Floor heating pump\" [ id=\"$device_id\" ]\n+\tThing appliance_boiler main_boiler \"Main boiler\" [ id=\"$device_id\" ]", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MDAzMw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549740033", "bodyText": "remove", "author": "Hilbrand", "createdAt": "2020-12-29T15:12:19Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private final PlugwiseHABridgeHandler handler;\n+    private static final int TIMEOUT = 5;\n+    private static final int REFRESH = 600;\n+\n+    private @Nullable ScheduledFuture<?> discoveryFuture;\n+\n+    public PlugwiseHADiscoveryService(PlugwiseHABridgeHandler bridgeHandler) {\n+        super(SUPPORTED_THING_TYPES_UIDS, TIMEOUT, true);\n+        this.handler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        try {\n+            discoverDomainObjects();\n+        } catch (PlugwiseHAException e) {\n+            // Ignore silently\n+        }\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"Start Plugwise Home Automation background discovery\");\n+\n+        if (this.discoveryFuture != null) {\n+            if (this.discoveryFuture.isCancelled()) {\n+                if (this.handler.getThing().getStatus() == ThingStatus.ONLINE) {\n+                    logger.debug(\"Start Scan\");\n+                    this.discoveryFuture = scheduler.scheduleWithFixedDelay(this::startScan, 30, REFRESH,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    stopBackgroundDiscovery();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        logger.debug(\"Stopping Plugwise Home Automation background discovery\");\n+        ScheduledFuture<?> localDiscoveryFuture = discoveryFuture;\n+        if (localDiscoveryFuture != null && !localDiscoveryFuture.isCancelled()) {\n+            localDiscoveryFuture.cancel(true);\n+            discoveryFuture = null;\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    // @Override\n+    // public void accountStatusChanged(ThingStatus status) {\n+    // if (status == ThingStatus.ONLINE) {\n+    // discoverLocations();\n+    // discoverAppliances();\n+    // }\n+    // }", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MDU3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549740572", "bodyText": "This is not really necessary. Because it's never called before a stopBackgroundDiscovery is called.", "author": "Hilbrand", "createdAt": "2020-12-29T15:13:44Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private final PlugwiseHABridgeHandler handler;\n+    private static final int TIMEOUT = 5;\n+    private static final int REFRESH = 600;\n+\n+    private @Nullable ScheduledFuture<?> discoveryFuture;\n+\n+    public PlugwiseHADiscoveryService(PlugwiseHABridgeHandler bridgeHandler) {\n+        super(SUPPORTED_THING_TYPES_UIDS, TIMEOUT, true);\n+        this.handler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        try {\n+            discoverDomainObjects();\n+        } catch (PlugwiseHAException e) {\n+            // Ignore silently\n+        }\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"Start Plugwise Home Automation background discovery\");\n+\n+        if (this.discoveryFuture != null) {\n+            if (this.discoveryFuture.isCancelled()) {", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MDk4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549740986", "bodyText": "Background discovery should not check for status. This status check is just a one time check, while background runs for the whole lifetime of the binding. So if you would want to do a check it should be within the startScan method.", "author": "Hilbrand", "createdAt": "2020-12-29T15:14:59Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private final PlugwiseHABridgeHandler handler;\n+    private static final int TIMEOUT = 5;\n+    private static final int REFRESH = 600;\n+\n+    private @Nullable ScheduledFuture<?> discoveryFuture;\n+\n+    public PlugwiseHADiscoveryService(PlugwiseHABridgeHandler bridgeHandler) {\n+        super(SUPPORTED_THING_TYPES_UIDS, TIMEOUT, true);\n+        this.handler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        try {\n+            discoverDomainObjects();\n+        } catch (PlugwiseHAException e) {\n+            // Ignore silently\n+        }\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"Start Plugwise Home Automation background discovery\");\n+\n+        if (this.discoveryFuture != null) {\n+            if (this.discoveryFuture.isCancelled()) {\n+                if (this.handler.getThing().getStatus() == ThingStatus.ONLINE) {", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTI4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549741285", "bodyText": "Also add the representation property here.", "author": "Hilbrand", "createdAt": "2020-12-29T15:15:46Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private final PlugwiseHABridgeHandler handler;\n+    private static final int TIMEOUT = 5;\n+    private static final int REFRESH = 600;\n+\n+    private @Nullable ScheduledFuture<?> discoveryFuture;\n+\n+    public PlugwiseHADiscoveryService(PlugwiseHABridgeHandler bridgeHandler) {\n+        super(SUPPORTED_THING_TYPES_UIDS, TIMEOUT, true);\n+        this.handler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        try {\n+            discoverDomainObjects();\n+        } catch (PlugwiseHAException e) {\n+            // Ignore silently\n+        }\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"Start Plugwise Home Automation background discovery\");\n+\n+        if (this.discoveryFuture != null) {\n+            if (this.discoveryFuture.isCancelled()) {\n+                if (this.handler.getThing().getStatus() == ThingStatus.ONLINE) {\n+                    logger.debug(\"Start Scan\");\n+                    this.discoveryFuture = scheduler.scheduleWithFixedDelay(this::startScan, 30, REFRESH,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    stopBackgroundDiscovery();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        logger.debug(\"Stopping Plugwise Home Automation background discovery\");\n+        ScheduledFuture<?> localDiscoveryFuture = discoveryFuture;\n+        if (localDiscoveryFuture != null && !localDiscoveryFuture.isCancelled()) {\n+            localDiscoveryFuture.cancel(true);\n+            discoveryFuture = null;\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    // @Override\n+    // public void accountStatusChanged(ThingStatus status) {\n+    // if (status == ThingStatus.ONLINE) {\n+    // discoverLocations();\n+    // discoverAppliances();\n+    // }\n+    // }\n+\n+    private void discoverDomainObjects() throws PlugwiseHAException {\n+        PlugwiseHAController controller = this.handler.getController();\n+\n+        if (controller != null) {\n+            DomainObjects domainObjects = controller.getDomainObjects();\n+\n+            if (domainObjects != null) {\n+                for (Location location : domainObjects.getLocations().values()) {\n+                    // Only add locations with at least 1 appliance (this ignores the 'root' (home)\n+                    // location which is the parent of all other locations.)\n+                    if (location.applianceCount() > 0) {\n+                        locationDiscovery(location);\n+                    }\n+                }\n+\n+                for (Appliance appliance : domainObjects.getAppliances().values()) {\n+                    // Only add appliances that are required/supported for this binding\n+                    if (PlugwiseHABindingConstants.SUPPORTED_APPLIANCE_TYPES.contains(appliance.getType())) {\n+                        applianceDiscovery(appliance);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void applianceDiscovery(Appliance appliance) {\n+        String applianceId = appliance.getId();\n+        String applianceName = appliance.getName();\n+        String applianceType = appliance.getType();\n+        ThingUID bridgeUID = this.handler.getThing().getUID();\n+        ThingUID uid;\n+\n+        Map<String, Object> configProperties = new HashMap<>();\n+\n+        configProperties.put(APPLIANCE_CONFIG_ID, applianceId);\n+\n+        switch (applianceType) {\n+            case \"thermostatic_radiator_valve\":\n+                uid = new ThingUID(PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE, bridgeUID, applianceId);\n+                configProperties.put(APPLIANCE_CONFIG_LOWBATTERY, 15);\n+                break;\n+            case \"central_heating_pump\":\n+                uid = new ThingUID(PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP, bridgeUID, applianceId);\n+                break;\n+            case \"heater_central\":\n+                uid = new ThingUID(PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER, bridgeUID, applianceId);\n+                break;\n+            case \"zone_thermostat\":\n+                uid = new ThingUID(PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT, bridgeUID, applianceId);\n+                configProperties.put(APPLIANCE_CONFIG_LOWBATTERY, 15);\n+                break;\n+            default:\n+                return;\n+        }\n+\n+        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(uid).withBridge(bridgeUID)\n+                .withLabel(applianceName).withProperties(configProperties).build();", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNjY3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561006678", "bodyText": "add withRepresentationProperty", "author": "Hilbrand", "createdAt": "2021-01-20T14:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NjkxNg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624496916", "bodyText": "Do you have any questions concerning Hilbrand's comments?", "author": "fwolter", "createdAt": "2021-05-01T11:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM0NDQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r625344478", "bodyText": "Not at all, somehow missed that one, Sorry. Fixed.", "author": "lsiepel", "createdAt": "2021-05-03T20:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MTg4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549741882", "bodyText": "It's preferred to add time unit to these constants:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int TIMEOUT = 5;\n          \n          \n            \n                private static final int REFRESH = 600;\n          \n          \n            \n                private static final int TIMEOUT_SECONDS = 5;\n          \n          \n            \n                private static final int REFRESH_SECONDS = 600;\n          \n      \n    \n    \n  \n\nprivate static final int TIMEOUT_SECONDS = 5;", "author": "Hilbrand", "createdAt": "2020-12-29T15:17:21Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private final PlugwiseHABridgeHandler handler;\n+    private static final int TIMEOUT = 5;\n+    private static final int REFRESH = 600;", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MjE5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549742193", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .withType(CHANNEL_TYPE_BATTERYLEVEL).withKind(ChannelKind.STATE).withLabel(\"Battery level\")\n          \n          \n            \n                                .withType(CHANNEL_TYPE_BATTERYLEVEL).withKind(ChannelKind.STATE).withLabel(\"Battery Level\")", "author": "Hilbrand", "createdAt": "2020-12-29T15:18:16Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                        updateState(APPLIANCE_LOCK_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setOffsetTemperature(entity, state.doubleValue());\n+                        updateState(APPLIANCE_OFFSET_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayOn(entity);\n+                        } else {\n+                            controller.switchRelayOff(entity);\n+                        }\n+                        updateState(APPLIANCE_POWER_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setThermostat(entity, state.doubleValue());\n+                        updateState(APPLIANCE_SETPOINT_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for appliance '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL:\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+            case APPLIANCE_OFFSET_CHANNEL:\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL:\n+            case APPLIANCE_LOCK_CHANNEL:\n+            case APPLIANCE_POWER_CHANNEL:\n+                state = UnDefType.UNDEF;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Appliance entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+\n+        // TODO Fetch appliance from API to force refresh - use synchronized block to\n+        // prevent multiple threads from calling\n+\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel = batteryLevel * 100;\n+                    state = new DecimalType(batteryLevel.intValue());\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.ON);\n+                    } else {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.OFF);\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel *= 100;\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+                if (entity.getCHState().isPresent()) {\n+                    if (entity.getCHState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+                if (entity.getDHWState().isPresent()) {\n+                    if (entity.getDHWState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_LOCK_CHANNEL:\n+                Boolean relayLockState = entity.getRelayLockState().orElse(null);\n+\n+                if (relayLockState != null) {\n+                    if (relayLockState) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (entity.getOffsetTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getOffsetTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (entity.getRelayState().isPresent()) {\n+                    if (entity.getRelayState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+                if (entity.getPowerUsage().isPresent()) {\n+                    state = new DecimalType(entity.getPowerUsage().get());\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (entity.getSetpointTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getSetpointTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+                if (entity.getTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+                if (entity.getValvePosition().isPresent()) {\n+                    state = new DecimalType(entity.getValvePosition().get());\n+                }\n+                break;\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                if (entity.getWaterPressure().isPresent()) {\n+                    state = new DecimalType(entity.getWaterPressure().get());\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        if (state != UnDefType.NULL && state != UnDefType.UNDEF) {\n+            updateState(channelID, state);\n+        }\n+    }\n+\n+    protected synchronized void addBatteryChannels() {\n+        logger.debug(\"Battery operated appliance detected: adding 'Battery level' and 'Battery low level' channels\");\n+\n+        ChannelUID channelUIDBatteryLevel = new ChannelUID(getThing().getUID(), APPLIANCE_BATTERYLEVEL_CHANNEL);\n+        ChannelUID channelUIDBatteryLevelLow = new ChannelUID(getThing().getUID(), APPLIANCE_BATTERYLEVELLOW_CHANNEL);\n+\n+        boolean channelBatteryLevelExists = false;\n+        boolean channelBatteryLowExists = false;\n+\n+        List<Channel> channels = getThing().getChannels();\n+        for (Channel channel : channels) {\n+            if (channel.getUID().equals(channelUIDBatteryLevel)) {\n+                channelBatteryLevelExists = true;\n+            } else if (channel.getUID().equals(channelUIDBatteryLevelLow)) {\n+                channelBatteryLowExists = true;\n+            }\n+            if (channelBatteryLevelExists && channelBatteryLowExists) {\n+                break;\n+            }\n+        }\n+\n+        if (!channelBatteryLevelExists) {\n+            ThingBuilder thingBuilder = editThing();\n+\n+            Channel channelBatteryLevel = ChannelBuilder.create(channelUIDBatteryLevel, \"Number\")\n+                    .withType(CHANNEL_TYPE_BATTERYLEVEL).withKind(ChannelKind.STATE).withLabel(\"Battery level\")", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MjUyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549742527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .withType(CHANNEL_TYPE_BATTERYLEVELLOW).withKind(ChannelKind.STATE).withLabel(\"Battery low level\")\n          \n          \n            \n                                .withType(CHANNEL_TYPE_BATTERYLEVELLOW).withKind(ChannelKind.STATE).withLabel(\"Battery Low Level\")", "author": "Hilbrand", "createdAt": "2020-12-29T15:19:06Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                        updateState(APPLIANCE_LOCK_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setOffsetTemperature(entity, state.doubleValue());\n+                        updateState(APPLIANCE_OFFSET_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayOn(entity);\n+                        } else {\n+                            controller.switchRelayOff(entity);\n+                        }\n+                        updateState(APPLIANCE_POWER_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setThermostat(entity, state.doubleValue());\n+                        updateState(APPLIANCE_SETPOINT_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for appliance '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL:\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+            case APPLIANCE_OFFSET_CHANNEL:\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL:\n+            case APPLIANCE_LOCK_CHANNEL:\n+            case APPLIANCE_POWER_CHANNEL:\n+                state = UnDefType.UNDEF;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Appliance entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+\n+        // TODO Fetch appliance from API to force refresh - use synchronized block to\n+        // prevent multiple threads from calling\n+\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel = batteryLevel * 100;\n+                    state = new DecimalType(batteryLevel.intValue());\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.ON);\n+                    } else {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.OFF);\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel *= 100;\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+                if (entity.getCHState().isPresent()) {\n+                    if (entity.getCHState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+                if (entity.getDHWState().isPresent()) {\n+                    if (entity.getDHWState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_LOCK_CHANNEL:\n+                Boolean relayLockState = entity.getRelayLockState().orElse(null);\n+\n+                if (relayLockState != null) {\n+                    if (relayLockState) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (entity.getOffsetTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getOffsetTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (entity.getRelayState().isPresent()) {\n+                    if (entity.getRelayState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+                if (entity.getPowerUsage().isPresent()) {\n+                    state = new DecimalType(entity.getPowerUsage().get());\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (entity.getSetpointTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getSetpointTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+                if (entity.getTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+                if (entity.getValvePosition().isPresent()) {\n+                    state = new DecimalType(entity.getValvePosition().get());\n+                }\n+                break;\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                if (entity.getWaterPressure().isPresent()) {\n+                    state = new DecimalType(entity.getWaterPressure().get());\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        if (state != UnDefType.NULL && state != UnDefType.UNDEF) {\n+            updateState(channelID, state);\n+        }\n+    }\n+\n+    protected synchronized void addBatteryChannels() {\n+        logger.debug(\"Battery operated appliance detected: adding 'Battery level' and 'Battery low level' channels\");\n+\n+        ChannelUID channelUIDBatteryLevel = new ChannelUID(getThing().getUID(), APPLIANCE_BATTERYLEVEL_CHANNEL);\n+        ChannelUID channelUIDBatteryLevelLow = new ChannelUID(getThing().getUID(), APPLIANCE_BATTERYLEVELLOW_CHANNEL);\n+\n+        boolean channelBatteryLevelExists = false;\n+        boolean channelBatteryLowExists = false;\n+\n+        List<Channel> channels = getThing().getChannels();\n+        for (Channel channel : channels) {\n+            if (channel.getUID().equals(channelUIDBatteryLevel)) {\n+                channelBatteryLevelExists = true;\n+            } else if (channel.getUID().equals(channelUIDBatteryLevelLow)) {\n+                channelBatteryLowExists = true;\n+            }\n+            if (channelBatteryLevelExists && channelBatteryLowExists) {\n+                break;\n+            }\n+        }\n+\n+        if (!channelBatteryLevelExists) {\n+            ThingBuilder thingBuilder = editThing();\n+\n+            Channel channelBatteryLevel = ChannelBuilder.create(channelUIDBatteryLevel, \"Number\")\n+                    .withType(CHANNEL_TYPE_BATTERYLEVEL).withKind(ChannelKind.STATE).withLabel(\"Battery level\")\n+                    .withDescription(\"Represents the battery level as a percentage (0-100%)\").build();\n+\n+            thingBuilder.withChannel(channelBatteryLevel);\n+\n+            updateThing(thingBuilder.build());\n+        }\n+\n+        if (!channelBatteryLowExists) {\n+            ThingBuilder thingBuilder = editThing();\n+\n+            Channel channelBatteryLow = ChannelBuilder.create(channelUIDBatteryLevelLow, \"Switch:Battery\")\n+                    .withType(CHANNEL_TYPE_BATTERYLEVELLOW).withKind(ChannelKind.STATE).withLabel(\"Battery low level\")", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0Mzc0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549743749", "bodyText": "I'm assuming this is not correct and should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Channel channelBatteryLow = ChannelBuilder.create(channelUIDBatteryLevelLow, \"Switch:Battery\")\n          \n          \n            \n                        Channel channelBatteryLow = ChannelBuilder.create(channelUIDBatteryLevelLow, \"Switch\")", "author": "Hilbrand", "createdAt": "2020-12-29T15:22:35Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                        updateState(APPLIANCE_LOCK_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setOffsetTemperature(entity, state.doubleValue());\n+                        updateState(APPLIANCE_OFFSET_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayOn(entity);\n+                        } else {\n+                            controller.switchRelayOff(entity);\n+                        }\n+                        updateState(APPLIANCE_POWER_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setThermostat(entity, state.doubleValue());\n+                        updateState(APPLIANCE_SETPOINT_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for appliance '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL:\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+            case APPLIANCE_OFFSET_CHANNEL:\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL:\n+            case APPLIANCE_LOCK_CHANNEL:\n+            case APPLIANCE_POWER_CHANNEL:\n+                state = UnDefType.UNDEF;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Appliance entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+\n+        // TODO Fetch appliance from API to force refresh - use synchronized block to\n+        // prevent multiple threads from calling\n+\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel = batteryLevel * 100;\n+                    state = new DecimalType(batteryLevel.intValue());\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.ON);\n+                    } else {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.OFF);\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel *= 100;\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+                if (entity.getCHState().isPresent()) {\n+                    if (entity.getCHState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+                if (entity.getDHWState().isPresent()) {\n+                    if (entity.getDHWState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_LOCK_CHANNEL:\n+                Boolean relayLockState = entity.getRelayLockState().orElse(null);\n+\n+                if (relayLockState != null) {\n+                    if (relayLockState) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (entity.getOffsetTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getOffsetTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (entity.getRelayState().isPresent()) {\n+                    if (entity.getRelayState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+                if (entity.getPowerUsage().isPresent()) {\n+                    state = new DecimalType(entity.getPowerUsage().get());\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (entity.getSetpointTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getSetpointTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+                if (entity.getTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+                if (entity.getValvePosition().isPresent()) {\n+                    state = new DecimalType(entity.getValvePosition().get());\n+                }\n+                break;\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                if (entity.getWaterPressure().isPresent()) {\n+                    state = new DecimalType(entity.getWaterPressure().get());\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        if (state != UnDefType.NULL && state != UnDefType.UNDEF) {\n+            updateState(channelID, state);\n+        }\n+    }\n+\n+    protected synchronized void addBatteryChannels() {\n+        logger.debug(\"Battery operated appliance detected: adding 'Battery level' and 'Battery low level' channels\");\n+\n+        ChannelUID channelUIDBatteryLevel = new ChannelUID(getThing().getUID(), APPLIANCE_BATTERYLEVEL_CHANNEL);\n+        ChannelUID channelUIDBatteryLevelLow = new ChannelUID(getThing().getUID(), APPLIANCE_BATTERYLEVELLOW_CHANNEL);\n+\n+        boolean channelBatteryLevelExists = false;\n+        boolean channelBatteryLowExists = false;\n+\n+        List<Channel> channels = getThing().getChannels();\n+        for (Channel channel : channels) {\n+            if (channel.getUID().equals(channelUIDBatteryLevel)) {\n+                channelBatteryLevelExists = true;\n+            } else if (channel.getUID().equals(channelUIDBatteryLevelLow)) {\n+                channelBatteryLowExists = true;\n+            }\n+            if (channelBatteryLevelExists && channelBatteryLowExists) {\n+                break;\n+            }\n+        }\n+\n+        if (!channelBatteryLevelExists) {\n+            ThingBuilder thingBuilder = editThing();\n+\n+            Channel channelBatteryLevel = ChannelBuilder.create(channelUIDBatteryLevel, \"Number\")\n+                    .withType(CHANNEL_TYPE_BATTERYLEVEL).withKind(ChannelKind.STATE).withLabel(\"Battery level\")\n+                    .withDescription(\"Represents the battery level as a percentage (0-100%)\").build();\n+\n+            thingBuilder.withChannel(channelBatteryLevel);\n+\n+            updateThing(thingBuilder.build());\n+        }\n+\n+        if (!channelBatteryLowExists) {\n+            ThingBuilder thingBuilder = editThing();\n+\n+            Channel channelBatteryLow = ChannelBuilder.create(channelUIDBatteryLevelLow, \"Switch:Battery\")", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0NDA3MA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549744070", "bodyText": "Methods should be below the constructor.", "author": "Hilbrand", "createdAt": "2020-12-29T15:23:33Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    // Private Static error messages\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    // private @Nullable C config;\n+\n+    protected final Logger logger = LoggerFactory.getLogger(PlugwiseHABaseHandler.class);\n+\n+    // Abstract methods\n+\n+    protected abstract void initialize(C config);\n+\n+    protected abstract @Nullable E getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException;\n+\n+    protected abstract void refreshChannel(E entity, ChannelUID channelUID);\n+\n+    protected abstract void handleCommand(E entity, ChannelUID channelUID, Command command) throws PlugwiseHAException;", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0NTY2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549745661", "bodyText": "The Nullable annotations can be placed inline:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private PlugwiseHABridgeThingConfig config;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                private GatewayInfo gatewayInfo;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> refreshJob;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                private volatile PlugwiseHAController controller;\n          \n          \n            \n                private @Nullable PlugwiseHABridgeThingConfig config;\n          \n          \n            \n                private @Nullable GatewayInfo gatewayInfo;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> refreshJob;\n          \n          \n            \n                private volatile @Nullable PlugwiseHAController controller;", "author": "Hilbrand", "createdAt": "2020-12-29T15:27:26Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    @Nullable\n+    private PlugwiseHABridgeThingConfig config;\n+    @Nullable\n+    private GatewayInfo gatewayInfo;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+    @Nullable\n+    private volatile PlugwiseHAController controller;", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0NjIwMw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549746203", "bodyText": "The check if trace is enabled is a bit redundant if the logging is only a static string. In general these checks are only needed if the parameters to the logger are expensive to calculate.", "author": "Hilbrand", "createdAt": "2020-12-29T15:28:58Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    @Nullable\n+    private PlugwiseHABridgeThingConfig config;\n+    @Nullable\n+    private GatewayInfo gatewayInfo;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+    @Nullable\n+    private volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        // This method is also called whenever config changes\n+        cancelRefreshJob();\n+        this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig()) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, config.getHost(), config.getPort(),\n+                        config.getUsername(), config.getsmileId());\n+                this.controller.start(() -> {\n+                    setBridgeProperties();\n+                    updateStatus(ONLINE);\n+                });\n+            } catch (PlugwiseHAInvalidHostException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+            } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+            } catch (PlugwiseHACommunicationException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            } catch (PlugwiseHAException e) {\n+                logger.error(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid config for the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        this.logger.warn(\n+                \"Ignoring command = {} for channel = {} - this channel for the Plugwise Home Automation binding is read-only!\",\n+                command, channelUID);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+        if (this.controller != null) {\n+            this.controller.stop();\n+            this.controller = null;\n+        }\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_BRIDGE_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    // Getters & setters\n+\n+    public @Nullable PlugwiseHAController getController() {\n+        return this.controller;\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig() {\n+        if (this.config == null || !this.config.isValid()) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_CONFIGURATION_ERROR);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void scheduleRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob == null) {\n+                logger.debug(\"Scheduling refresh job every {}s\", config.getRefresh());\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::run, 0, config.getRefresh(), TimeUnit.SECONDS);\n+            }\n+        }\n+    }\n+\n+    private void run() {\n+        try {\n+            if (logger.isTraceEnabled()) {\n+                logger.trace(\"Executing refresh job\");\n+            }", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0NjM4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549746381", "bodyText": "Can this be changed to the specific exception or RuntimeException?", "author": "Hilbrand", "createdAt": "2020-12-29T15:29:25Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    @Nullable\n+    private PlugwiseHABridgeThingConfig config;\n+    @Nullable\n+    private GatewayInfo gatewayInfo;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+    @Nullable\n+    private volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        // This method is also called whenever config changes\n+        cancelRefreshJob();\n+        this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig()) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, config.getHost(), config.getPort(),\n+                        config.getUsername(), config.getsmileId());\n+                this.controller.start(() -> {\n+                    setBridgeProperties();\n+                    updateStatus(ONLINE);\n+                });\n+            } catch (PlugwiseHAInvalidHostException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+            } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+            } catch (PlugwiseHACommunicationException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            } catch (PlugwiseHAException e) {\n+                logger.error(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid config for the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        this.logger.warn(\n+                \"Ignoring command = {} for channel = {} - this channel for the Plugwise Home Automation binding is read-only!\",\n+                command, channelUID);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+        if (this.controller != null) {\n+            this.controller.stop();\n+            this.controller = null;\n+        }\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_BRIDGE_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    // Getters & setters\n+\n+    public @Nullable PlugwiseHAController getController() {\n+        return this.controller;\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig() {\n+        if (this.config == null || !this.config.isValid()) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_CONFIGURATION_ERROR);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void scheduleRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob == null) {\n+                logger.debug(\"Scheduling refresh job every {}s\", config.getRefresh());\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::run, 0, config.getRefresh(), TimeUnit.SECONDS);\n+            }\n+        }\n+    }\n+\n+    private void run() {\n+        try {\n+            if (logger.isTraceEnabled()) {\n+                logger.trace(\"Executing refresh job\");\n+            }\n+\n+            refresh();\n+            updateStatus(ONLINE);\n+        } catch (PlugwiseHAInvalidHostException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+        } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+        } catch (PlugwiseHACommunicationException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+        } catch (PlugwiseHATimeoutException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_TIMEOUT);\n+        } catch (Exception e) {", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY3MDI3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550670279", "bodyText": "Changed it to PlugwiseHAException. Please check if this needs more changes, i thought the Exception was fine, but not sure why this needs to change.", "author": "lsiepel", "createdAt": "2020-12-31T19:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0NjM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0NzY3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549747678", "bodyText": "If you want to do this check here. I would expect it should only be done when the status is actually changed. So I would expect this code to be inside the if below.", "author": "Hilbrand", "createdAt": "2020-12-29T15:33:21Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    @Nullable\n+    private PlugwiseHABridgeThingConfig config;\n+    @Nullable\n+    private GatewayInfo gatewayInfo;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+    @Nullable\n+    private volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        // This method is also called whenever config changes\n+        cancelRefreshJob();\n+        this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig()) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, config.getHost(), config.getPort(),\n+                        config.getUsername(), config.getsmileId());\n+                this.controller.start(() -> {\n+                    setBridgeProperties();\n+                    updateStatus(ONLINE);\n+                });\n+            } catch (PlugwiseHAInvalidHostException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+            } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+            } catch (PlugwiseHACommunicationException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            } catch (PlugwiseHAException e) {\n+                logger.error(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid config for the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        this.logger.warn(\n+                \"Ignoring command = {} for channel = {} - this channel for the Plugwise Home Automation binding is read-only!\",\n+                command, channelUID);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+        if (this.controller != null) {\n+            this.controller.stop();\n+            this.controller = null;\n+        }\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_BRIDGE_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    // Getters & setters\n+\n+    public @Nullable PlugwiseHAController getController() {\n+        return this.controller;\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig() {\n+        if (this.config == null || !this.config.isValid()) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_CONFIGURATION_ERROR);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void scheduleRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob == null) {\n+                logger.debug(\"Scheduling refresh job every {}s\", config.getRefresh());\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::run, 0, config.getRefresh(), TimeUnit.SECONDS);\n+            }\n+        }\n+    }\n+\n+    private void run() {\n+        try {\n+            if (logger.isTraceEnabled()) {\n+                logger.trace(\"Executing refresh job\");\n+            }\n+\n+            refresh();\n+            updateStatus(ONLINE);\n+        } catch (PlugwiseHAInvalidHostException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+        } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+        } catch (PlugwiseHACommunicationException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+        } catch (PlugwiseHATimeoutException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_TIMEOUT);\n+        } catch (Exception e) {\n+            logger.debug(\"Unhandled exception while refreshing the Plugwise Home Automation Controller {} - {}\",\n+                    getThing().getUID(), e.getMessage());\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void refresh() throws PlugwiseHAException {\n+        if (this.getController() != null) {\n+            logger.debug(\"Refreshing the Plugwise Home Automation Controller {}\", getThing().getUID());\n+            this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+            PlugwiseHAController controller = this.getController();\n+            if (controller != null) {\n+                controller.refresh();\n+            }\n+\n+            getThing().getThings().forEach((thing) -> {\n+                ThingHandler thingHandler = thing.getHandler();\n+                if (thingHandler instanceof PlugwiseHABaseHandler) {\n+                    ((PlugwiseHABaseHandler<PlugwiseHAModel, PlugwiseHAThingConfig>) thingHandler).refresh();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void cancelRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob != null) {\n+                logger.debug(\"Cancelling refresh job\");\n+                this.refreshJob.cancel(true);\n+                this.refreshJob = null;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        if (status == ONLINE || (status == OFFLINE && statusDetail == COMMUNICATION_ERROR)) {\n+            scheduleRefreshJob();\n+        } else if (status == OFFLINE && statusDetail == CONFIGURATION_ERROR) {\n+            cancelRefreshJob();\n+        }", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0ODA4MA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549748080", "bodyText": "remove", "author": "Hilbrand", "createdAt": "2020-12-29T15:34:30Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAZoneHandler.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAZoneHandler} class is responsible for handling commands\n+ * and status updates for the Plugwise Home Automation zones/locations.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHAZoneHandler extends PlugwiseHABaseHandler<Location, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0OTI3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549749276", "bodyText": "You should get the temperature value by using the method with the unit you want. Otherwise it will return the value in the unit passed as command. In other words. If the value is stored in Fahrenheit and you expect to pass Celsius. By just getting the doubleValue you would get the value in Farhenheit.", "author": "Hilbrand", "createdAt": "2020-12-29T15:37:33Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAZoneHandler.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAZoneHandler} class is responsible for handling commands\n+ * and status updates for the Plugwise Home Automation zones/locations.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHAZoneHandler extends PlugwiseHABaseHandler<Location, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Location location;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAZoneHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_ZONE.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation zone handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation zone handler.\");\n+                return;\n+            }\n+\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.location = getEntity(controller, true);\n+\n+                        setLocationProperties();\n+                        updateStatus(ONLINE);\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable Location getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Location location = controller.getLocation(config.getId(), forceRefresh);\n+\n+        return location;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Location entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        switch (channelID) {\n+            case ZONE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+\n+                    PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                    if (bridge != null) {\n+                        PlugwiseHAController controller = bridge.getController();\n+                        if (controller != null) {\n+                            try {\n+                                controller.setLocationThermostat(entity, state.doubleValue());", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0OTg5MA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549749890", "bodyText": "Unless you pass a different value, why set the value on the channel?", "author": "Hilbrand", "createdAt": "2020-12-29T15:39:11Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAZoneHandler.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAZoneHandler} class is responsible for handling commands\n+ * and status updates for the Plugwise Home Automation zones/locations.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHAZoneHandler extends PlugwiseHABaseHandler<Location, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Location location;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAZoneHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_ZONE.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation zone handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation zone handler.\");\n+                return;\n+            }\n+\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.location = getEntity(controller, true);\n+\n+                        setLocationProperties();\n+                        updateStatus(ONLINE);\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable Location getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Location location = controller.getLocation(config.getId(), forceRefresh);\n+\n+        return location;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Location entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        switch (channelID) {\n+            case ZONE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+\n+                    PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                    if (bridge != null) {\n+                        PlugwiseHAController controller = bridge.getController();\n+                        if (controller != null) {\n+                            try {\n+                                controller.setLocationThermostat(entity, state.doubleValue());\n+                                updateState(ZONE_SETPOINT_CHANNEL, (State) command);", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1MDEzOA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549750138", "bodyText": "This should be a QuantityType . Also check other places in the code.", "author": "Hilbrand", "createdAt": "2020-12-29T15:39:51Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAZoneHandler.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAZoneHandler} class is responsible for handling commands\n+ * and status updates for the Plugwise Home Automation zones/locations.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHAZoneHandler extends PlugwiseHABaseHandler<Location, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Location location;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAZoneHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_ZONE.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation zone handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation zone handler.\");\n+                return;\n+            }\n+\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.location = getEntity(controller, true);\n+\n+                        setLocationProperties();\n+                        updateStatus(ONLINE);\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable Location getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Location location = controller.getLocation(config.getId(), forceRefresh);\n+\n+        return location;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Location entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        switch (channelID) {\n+            case ZONE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+\n+                    PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                    if (bridge != null) {\n+                        PlugwiseHAController controller = bridge.getController();\n+                        if (controller != null) {\n+                            try {\n+                                controller.setLocationThermostat(entity, state.doubleValue());\n+                                updateState(ZONE_SETPOINT_CHANNEL, (State) command);\n+                            } catch (PlugwiseHAException e) {\n+                                logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                        entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                            }\n+                        }\n+                    }\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case ZONE_PRESETSCENE_CHANNEL:\n+            case ZONE_SETPOINT_CHANNEL:\n+            case ZONE_TEMPERATURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Location entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+\n+        // TODO Fetch location from API to force refresh - use synchronized block to prevent multiple threads from\n+        // calling\n+\n+        switch (channelID) {\n+            case ZONE_PRESETSCENE_CHANNEL:\n+                state = new StringType(entity.getPreset());\n+                break;\n+            case ZONE_SETPOINT_CHANNEL:\n+                if (entity.getSetpointTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getSetpointTemperature().get());", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1MDUyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r549750529", "bodyText": "Labels should use uppercase first characters on words in general. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Refresh interval</label>\n          \n          \n            \n            \t\t\t<label>Refresh Interval</label>\n          \n      \n    \n    \n  \n\nThis comment applies to all other labels too.", "author": "Hilbrand", "createdAt": "2020-12-29T15:40:57Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<!-- Bridge -->\n+\t<config-description uri=\"bridge-type:plugwiseha:gateway\">\n+\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>Host</label>\n+\t\t\t<description>Hostname or IP address of the boiler gateway</description>\n+\t\t\t<default>adam</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"username\" type=\"text\" required=\"true\">\n+\t\t\t<label>Username</label>\n+\t\t\t<description>Adam HA gateway username (default: smile)</description>\n+\t\t\t<default>smile</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"smileId\" type=\"text\" required=\"true\">\n+\t\t\t<context>password</context>\n+\t\t\t<label>Smile ID</label>\n+\t\t\t<description>The Smile ID is the 8 letter code on the sticker on the back of the Adam boiler gateway</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" max=\"120\" required=\"true\" unit=\"s\">\n+\t\t\t<label>Refresh interval</label>", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NDA3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550484077", "bodyText": "Please remove commented out parts.", "author": "Hilbrand", "createdAt": "2020-12-31T13:32:53Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<!-- Bridge -->\n+\t<config-description uri=\"bridge-type:plugwiseha:gateway\">\n+\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>Host</label>\n+\t\t\t<description>Hostname or IP address of the boiler gateway</description>\n+\t\t\t<default>adam</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"username\" type=\"text\" required=\"true\">\n+\t\t\t<label>Username</label>\n+\t\t\t<description>Adam HA gateway username (default: smile)</description>\n+\t\t\t<default>smile</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"smileId\" type=\"text\" required=\"true\">\n+\t\t\t<context>password</context>\n+\t\t\t<label>Smile ID</label>\n+\t\t\t<description>The Smile ID is the 8 letter code on the sticker on the back of the Adam boiler gateway</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" max=\"120\" required=\"true\" unit=\"s\">\n+\t\t\t<label>Refresh interval</label>\n+\t\t\t<unitLabel>seconds</unitLabel>\n+\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t<default>5</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<!-- Zone thing -->\n+\t<config-description uri=\"thing-type:plugwiseha:zone\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Location ID for the zone</description>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_boiler\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<!-- Appliance: Radiator valve -->\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_valve\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"lowBatteryPercentage\" type=\"integer\" min=\"1\" max=\"50\" required=\"true\" unit=\"s\">\n+\t\t\t<label>Low battery threshold</label>\n+\t\t\t<unitLabel>%</unitLabel>\n+\t\t\t<description>Battery charge remaining at which to trigger battery low warning</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<!-- <parameter name=\"name\" type=\"text\" required=\"true\" readOnly=\"true\">\n+\t\t\t<label>Name</label>\n+\t\t\t<description>Name of the radiator valve</description>\n+\t\t\t</parameter> -->\n+\t</config-description>\n+\n+\t<!-- Appliance: Pump switch -->\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_pump\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t\t<!-- <parameter name=\"name\" type=\"text\" required=\"true\" readOnly=\"true\">\n+\t\t\t<label>Name</label>\n+\t\t\t<description>Name of the central heating pump</description>\n+\t\t\t</parameter> -->", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NDIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550484204", "bodyText": "This doesn't look like the unit should be s(econds):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"lowBatteryPercentage\" type=\"integer\" min=\"1\" max=\"50\" required=\"true\" unit=\"s\">\n          \n          \n            \n            \t\t<parameter name=\"lowBatteryPercentage\" type=\"integer\" min=\"1\" max=\"50\" required=\"true\">", "author": "Hilbrand", "createdAt": "2020-12-31T13:33:38Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<!-- Bridge -->\n+\t<config-description uri=\"bridge-type:plugwiseha:gateway\">\n+\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>Host</label>\n+\t\t\t<description>Hostname or IP address of the boiler gateway</description>\n+\t\t\t<default>adam</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"username\" type=\"text\" required=\"true\">\n+\t\t\t<label>Username</label>\n+\t\t\t<description>Adam HA gateway username (default: smile)</description>\n+\t\t\t<default>smile</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"smileId\" type=\"text\" required=\"true\">\n+\t\t\t<context>password</context>\n+\t\t\t<label>Smile ID</label>\n+\t\t\t<description>The Smile ID is the 8 letter code on the sticker on the back of the Adam boiler gateway</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" max=\"120\" required=\"true\" unit=\"s\">\n+\t\t\t<label>Refresh interval</label>\n+\t\t\t<unitLabel>seconds</unitLabel>\n+\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t<default>5</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<!-- Zone thing -->\n+\t<config-description uri=\"thing-type:plugwiseha:zone\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Location ID for the zone</description>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_boiler\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<!-- Appliance: Radiator valve -->\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_valve\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"lowBatteryPercentage\" type=\"integer\" min=\"1\" max=\"50\" required=\"true\" unit=\"s\">\n+\t\t\t<label>Low battery threshold</label>\n+\t\t\t<unitLabel>%</unitLabel>\n+\t\t\t<description>Battery charge remaining at which to trigger battery low warning</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<!-- <parameter name=\"name\" type=\"text\" required=\"true\" readOnly=\"true\">\n+\t\t\t<label>Name</label>\n+\t\t\t<description>Name of the radiator valve</description>\n+\t\t\t</parameter> -->\n+\t</config-description>\n+\n+\t<!-- Appliance: Pump switch -->\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_pump\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t\t<!-- <parameter name=\"name\" type=\"text\" required=\"true\" readOnly=\"true\">\n+\t\t\t<label>Name</label>\n+\t\t\t<description>Name of the central heating pump</description>\n+\t\t\t</parameter> -->\n+\t</config-description>\n+\n+\t<!-- Appliance: Radiator valve -->\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_thermostat\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"lowBatteryPercentage\" type=\"integer\" min=\"1\" max=\"50\" required=\"true\" unit=\"s\">", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NDMyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550484325", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"lowBatteryPercentage\" type=\"integer\" min=\"1\" max=\"50\" required=\"true\" unit=\"s\">\n          \n          \n            \n            \t\t<parameter name=\"lowBatteryPercentage\" type=\"integer\" min=\"1\" max=\"50\" required=\"true\">", "author": "Hilbrand", "createdAt": "2020-12-31T13:34:19Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<!-- Bridge -->\n+\t<config-description uri=\"bridge-type:plugwiseha:gateway\">\n+\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>Host</label>\n+\t\t\t<description>Hostname or IP address of the boiler gateway</description>\n+\t\t\t<default>adam</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"username\" type=\"text\" required=\"true\">\n+\t\t\t<label>Username</label>\n+\t\t\t<description>Adam HA gateway username (default: smile)</description>\n+\t\t\t<default>smile</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"smileId\" type=\"text\" required=\"true\">\n+\t\t\t<context>password</context>\n+\t\t\t<label>Smile ID</label>\n+\t\t\t<description>The Smile ID is the 8 letter code on the sticker on the back of the Adam boiler gateway</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" max=\"120\" required=\"true\" unit=\"s\">\n+\t\t\t<label>Refresh interval</label>\n+\t\t\t<unitLabel>seconds</unitLabel>\n+\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t<default>5</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<!-- Zone thing -->\n+\t<config-description uri=\"thing-type:plugwiseha:zone\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Location ID for the zone</description>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_boiler\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<!-- Appliance: Radiator valve -->\n+\t<config-description uri=\"thing-type:plugwiseha:appliance_valve\">\n+\t\t<parameter name=\"id\" type=\"text\" required=\"true\" readOnly=\"false\">\n+\t\t\t<label>ID</label>\n+\t\t\t<description>Appliance ID</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"lowBatteryPercentage\" type=\"integer\" min=\"1\" max=\"50\" required=\"true\" unit=\"s\">", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NTk0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550485949", "bodyText": "You can probably also add a pattern for the smile id. I don't know the possible variables but it could be something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"smileId\" type=\"text\" required=\"true\">\n          \n          \n            \n            \t\t<parameter name=\"smileId\" type=\"text\" pattern=\"[a-z]{8}\" required=\"true\">", "author": "Hilbrand", "createdAt": "2020-12-31T13:43:28Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<!-- Bridge -->\n+\t<config-description uri=\"bridge-type:plugwiseha:gateway\">\n+\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>Host</label>\n+\t\t\t<description>Hostname or IP address of the boiler gateway</description>\n+\t\t\t<default>adam</default>\n+\t\t</parameter>\n+\t\t<parameter name=\"username\" type=\"text\" required=\"true\">\n+\t\t\t<label>Username</label>\n+\t\t\t<description>Adam HA gateway username (default: smile)</description>\n+\t\t\t<default>smile</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"smileId\" type=\"text\" required=\"true\">", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NzQyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550487427", "bodyText": "This should be a UoM type:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Power</item-type>", "author": "Hilbrand", "createdAt": "2020-12-31T13:51:40Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/resources/OH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"plugwiseha\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"setpointTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Setpoint temperature</label>\n+\t\t<description>Gets or sets the set point of this zone</description>\n+\t\t<category>heating</category>\n+\t\t<state min=\"0.0\" max=\"35.0\" step=\"0.5\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Zone temperature</label>\n+\t\t<description>Gets the temperature of this zone</description>\n+\t\t<category>heating</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Switch the Plugwise Smart plug ON or OFF</description>\n+\t\t<category>switch</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"lock\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Lock</label>\n+\t\t<description>Locks the switch state of the Plugwise Smart plug</description>\n+\t\t<category>switch</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"powerUsage\">\n+\t\t<item-type>Number</item-type>", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NzUyOA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550487528", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | waterPressure | Number | Yes | This channel is used to read the current water pressure of the boiler |\n          \n          \n            \n            | waterPressure | Number:Pressure | Yes | This channel is used to read the current water pressure of the boiler |", "author": "Hilbrand", "createdAt": "2020-12-31T13:52:14Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.\n+\n+## Supported Things\n+\n+| Device Type                                              | Description                                                                                                        | Thing Type      |\n+| -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------ | --------------- |\n+| -                                                        | A Plugwise heating zone configured with at least 1 of the devices below                                            | zone            |\n+| [Adam](https://www.plugwise.com/en_US/products/adam-ha)  | The Plugwise Home Automation Bridge is needed to connect to the Adam boiler gateway                                | gateway         |\n+| [Tom](https://www.plugwise.com/en_US/products/tom)       | A Plugwise Home Automation radiator valve                                                                          | appliance_valve |\n+| [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve |\n+| [Circle](https://www.plugwise.com/en_US/products/circle) | A power outlet plug that provides energy measurement and switching control of appliances (e.g. floor heating pump) | appliance_pump  |\n+| [Lisa](https://www.plugwise.com/en_US/products/lisa)     | A room thermostat (also supports the 'Anna' room thermostat)                                                       | appliance_thermostat |\n+| [Boiler]                                                 | A central boiler used for heating and/or domestic hot water                                                        | appliance_boiler |\n+\n+\n+\n+## Discovery\n+\n+After setting up the Plugwise Home Automation bridge you can start a manual scan to find all devices registered on the gateway. You can also manually add things by entering the corresponding device id as a configuration parameter. The device id's can be found be enabling TRACE logging in the Karaf console.\n+\n+## Thing Configuration\n+\n+You must define a Plugwise Home Automation gateway (Bridge) before defining zones or appliances (Things) for this binding to work.\n+\n+#### Plugwise Home Automation gateway (Bridge):\n+\n+| Parameter | Description                                                             | Config   | Default |\n+| --------- | ----------------------------------------------------------------------- | -------- | ------- |\n+| host      | The IP address or hostname of the Adam HA gateway                       | Required | 'adam'  |\n+| username  | The username for the Adam HA gateway                                    | Optional | 'smile' |\n+| smileID   | The 8 letter code on the sticker on the back of the Adam boiler gateway | Required | -       |\n+| refresh   | The refresh interval in seconds                                         | Optional | 15      |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description               | Config   | Default |\n+| --------- | ------------------------- | -------- | ------- |\n+| id        | The unique ID of the zone | Required | -       |\n+\n+#### Plugwise Home Automation appliance (`appliance_valve`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the radiator valve appliance                                                                      | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+#### Plugwise Home Automation appliance (`appliance_thermostat`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the room thermostat appliance                                                                     | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+\n+#### Plugwise Home Automation appliance (`appliance_pump`):\n+\n+| Parameter | Description                         | Config   | Default |\n+| --------- | ----------------------------------- | -------- | ------- |\n+| id        | The unique ID of the pump appliance | Required | -       |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description                 | Config   | Default |\n+| --------- | --------------------------- | -------- | ------- |\n+| id        | The unique ID of the boiler | Required | -       |\n+\n+## Channels\n+\n+| channel | type   | Read-only?  | description                 |\n+| ------- | ------ | ------------ | --------------- |\n+| temperature | Number:Temperature | Yes | This channel is used to read the temperature of an appliance that supports the thermostat functionality |\n+| setpointTemperature | Number:Temperature | No | This channel is used to read or write the setpoint temperature of an appliance that supports the thermostat functionality |\n+| power | Switch | No | This channel is used to toggle an appliance ON/OFF that supports the relay functionality |\n+| lock | Switch | No | This channel is used to toggle an appliance lock ON/OFF that supports the relay functionality.(*When the lock is ON the gateway will not automatically control the corresponding relay switch depending on thermostat mode*) |\n+| powerUsage | Number | Yes | This channel is used to read the current power usage in Watts of an appliance that supports this |\n+| batteryLevel | Number | Yes | This channel is used to read the current battery level of an appliance that is battery operated |\n+| batteryLevelLow | Switch | Yes | This channel will switch ON when the battery level of an appliance that is battery operated drops below a certain threshold |\n+| chState | Switch | Yes | This channel is used to read the current central heating state of the boiler |\n+| dhwState | Switch | Yes | This channel is used to read the current domestic hot water state of the boiler |\n+| waterPressure | Number | Yes | This channel is used to read the current water pressure of the boiler |", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NzYwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550487607", "bodyText": "Can you  format this table (for example with http://markdowntable.com/)", "author": "Hilbrand", "createdAt": "2020-12-31T13:52:46Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.\n+\n+## Supported Things\n+\n+| Device Type                                              | Description                                                                                                        | Thing Type      |\n+| -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------ | --------------- |\n+| -                                                        | A Plugwise heating zone configured with at least 1 of the devices below                                            | zone            |\n+| [Adam](https://www.plugwise.com/en_US/products/adam-ha)  | The Plugwise Home Automation Bridge is needed to connect to the Adam boiler gateway                                | gateway         |\n+| [Tom](https://www.plugwise.com/en_US/products/tom)       | A Plugwise Home Automation radiator valve                                                                          | appliance_valve |\n+| [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve |\n+| [Circle](https://www.plugwise.com/en_US/products/circle) | A power outlet plug that provides energy measurement and switching control of appliances (e.g. floor heating pump) | appliance_pump  |\n+| [Lisa](https://www.plugwise.com/en_US/products/lisa)     | A room thermostat (also supports the 'Anna' room thermostat)                                                       | appliance_thermostat |\n+| [Boiler]                                                 | A central boiler used for heating and/or domestic hot water                                                        | appliance_boiler |\n+\n+\n+\n+## Discovery\n+\n+After setting up the Plugwise Home Automation bridge you can start a manual scan to find all devices registered on the gateway. You can also manually add things by entering the corresponding device id as a configuration parameter. The device id's can be found be enabling TRACE logging in the Karaf console.\n+\n+## Thing Configuration\n+\n+You must define a Plugwise Home Automation gateway (Bridge) before defining zones or appliances (Things) for this binding to work.\n+\n+#### Plugwise Home Automation gateway (Bridge):\n+\n+| Parameter | Description                                                             | Config   | Default |\n+| --------- | ----------------------------------------------------------------------- | -------- | ------- |\n+| host      | The IP address or hostname of the Adam HA gateway                       | Required | 'adam'  |\n+| username  | The username for the Adam HA gateway                                    | Optional | 'smile' |\n+| smileID   | The 8 letter code on the sticker on the back of the Adam boiler gateway | Required | -       |\n+| refresh   | The refresh interval in seconds                                         | Optional | 15      |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description               | Config   | Default |\n+| --------- | ------------------------- | -------- | ------- |\n+| id        | The unique ID of the zone | Required | -       |\n+\n+#### Plugwise Home Automation appliance (`appliance_valve`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the radiator valve appliance                                                                      | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+#### Plugwise Home Automation appliance (`appliance_thermostat`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the room thermostat appliance                                                                     | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+\n+#### Plugwise Home Automation appliance (`appliance_pump`):\n+\n+| Parameter | Description                         | Config   | Default |\n+| --------- | ----------------------------------- | -------- | ------- |\n+| id        | The unique ID of the pump appliance | Required | -       |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description                 | Config   | Default |\n+| --------- | --------------------------- | -------- | ------- |\n+| id        | The unique ID of the boiler | Required | -       |\n+\n+## Channels\n+\n+| channel | type   | Read-only?  | description                 |", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NzcxNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550487717", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Number living_room_zone_temperature \"Zone temperature\" {channel=\"plugwiseha:zone:home:living_room_zone:temperature\"}\n          \n          \n            \n            Number:Temperature living_room_zone_temperature \"Zone temperature\" {channel=\"plugwiseha:zone:home:living_room_zone:temperature\"}\n          \n      \n    \n    \n  \n\nSame comment for all other UoM channels.", "author": "Hilbrand", "createdAt": "2020-12-31T13:53:27Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,162 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.\n+\n+## Supported Things\n+\n+| Device Type                                              | Description                                                                                                        | Thing Type      |\n+| -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------ | --------------- |\n+| -                                                        | A Plugwise heating zone configured with at least 1 of the devices below                                            | zone            |\n+| [Adam](https://www.plugwise.com/en_US/products/adam-ha)  | The Plugwise Home Automation Bridge is needed to connect to the Adam boiler gateway                                | gateway         |\n+| [Tom](https://www.plugwise.com/en_US/products/tom)       | A Plugwise Home Automation radiator valve                                                                          | appliance_valve |\n+| [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve |\n+| [Circle](https://www.plugwise.com/en_US/products/circle) | A power outlet plug that provides energy measurement and switching control of appliances (e.g. floor heating pump) | appliance_pump  |\n+| [Lisa](https://www.plugwise.com/en_US/products/lisa)     | A room thermostat (also supports the 'Anna' room thermostat)                                                       | appliance_thermostat |\n+| [Boiler]                                                 | A central boiler used for heating and/or domestic hot water                                                        | appliance_boiler |\n+\n+\n+\n+## Discovery\n+\n+After setting up the Plugwise Home Automation bridge you can start a manual scan to find all devices registered on the gateway. You can also manually add things by entering the corresponding device id as a configuration parameter. The device id's can be found be enabling TRACE logging in the Karaf console.\n+\n+## Thing Configuration\n+\n+You must define a Plugwise Home Automation gateway (Bridge) before defining zones or appliances (Things) for this binding to work.\n+\n+#### Plugwise Home Automation gateway (Bridge):\n+\n+| Parameter | Description                                                             | Config   | Default |\n+| --------- | ----------------------------------------------------------------------- | -------- | ------- |\n+| host      | The IP address or hostname of the Adam HA gateway                       | Required | 'adam'  |\n+| username  | The username for the Adam HA gateway                                    | Optional | 'smile' |\n+| smileID   | The 8 letter code on the sticker on the back of the Adam boiler gateway | Required | -       |\n+| refresh   | The refresh interval in seconds                                         | Optional | 15      |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description               | Config   | Default |\n+| --------- | ------------------------- | -------- | ------- |\n+| id        | The unique ID of the zone | Required | -       |\n+\n+#### Plugwise Home Automation appliance (`appliance_valve`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the radiator valve appliance                                                                      | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+#### Plugwise Home Automation appliance (`appliance_thermostat`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the room thermostat appliance                                                                     | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+\n+#### Plugwise Home Automation appliance (`appliance_pump`):\n+\n+| Parameter | Description                         | Config   | Default |\n+| --------- | ----------------------------------- | -------- | ------- |\n+| id        | The unique ID of the pump appliance | Required | -       |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description                 | Config   | Default |\n+| --------- | --------------------------- | -------- | ------- |\n+| id        | The unique ID of the boiler | Required | -       |\n+\n+## Channels\n+\n+| channel | type   | Read-only?  | description                 |\n+| ------- | ------ | ------------ | --------------- |\n+| temperature | Number:Temperature | Yes | This channel is used to read the temperature of an appliance that supports the thermostat functionality |\n+| setpointTemperature | Number:Temperature | No | This channel is used to read or write the setpoint temperature of an appliance that supports the thermostat functionality |\n+| power | Switch | No | This channel is used to toggle an appliance ON/OFF that supports the relay functionality |\n+| lock | Switch | No | This channel is used to toggle an appliance lock ON/OFF that supports the relay functionality.(*When the lock is ON the gateway will not automatically control the corresponding relay switch depending on thermostat mode*) |\n+| powerUsage | Number | Yes | This channel is used to read the current power usage in Watts of an appliance that supports this |\n+| batteryLevel | Number | Yes | This channel is used to read the current battery level of an appliance that is battery operated |\n+| batteryLevelLow | Switch | Yes | This channel will switch ON when the battery level of an appliance that is battery operated drops below a certain threshold |\n+| chState | Switch | Yes | This channel is used to read the current central heating state of the boiler |\n+| dhwState | Switch | Yes | This channel is used to read the current domestic hot water state of the boiler |\n+| waterPressure | Number | Yes | This channel is used to read the current water pressure of the boiler |\n+| presetScene | String | Yes | This channel is used to read the current active scene for the zone |\n+\n+\n+## Full Example\n+\n+**things/plugwiseha.things**\n+\n+```\n+Bridge plugwiseha:gateway:home \"Plugwise Home Automation Gateway\" [ smileId=\"abcdefgh\" ] {\n+\tThing zone living_room_zone \"Living room\" [ id=\"$device_id\" ]\n+    Thing appliance_valve living_room_radiator \"Living room radiator valve\" [ id=\"$device_id\" ]\n+\tThing appliance_thermostat living_room_thermostat \"Living room thermostat\" [ id=\"$device_id\" ]\n+    Thing appliance_pump living_room_pump \"Floor heating pump\" [ id=\"$device_id\" ]\n+\tThing appliance_boiler main_boiler \"Main boiler\" [ id=\"$device_id\" ]\n+}\n+```\n+\n+Replace `$device_id` accordingly.\n+\n+**items/plugwiseha.items**\n+\n+```\n+Number living_room_zone_temperature \"Zone temperature\" {channel=\"plugwiseha:zone:home:living_room_zone:temperature\"}", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4Nzk5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550487996", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (entity.getDHWState().get()) {\n          \n          \n            \n                                    state = OnOffType.ON;\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    state = OnOffType.OFF;\n          \n          \n            \n                                }\n          \n          \n            \n                                state = OnOffType.from(entity.getDHWState().get());", "author": "Hilbrand", "createdAt": "2020-12-31T13:54:51Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                        updateState(APPLIANCE_LOCK_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setOffsetTemperature(entity, state.doubleValue());\n+                        updateState(APPLIANCE_OFFSET_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayOn(entity);\n+                        } else {\n+                            controller.switchRelayOff(entity);\n+                        }\n+                        updateState(APPLIANCE_POWER_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setThermostat(entity, state.doubleValue());\n+                        updateState(APPLIANCE_SETPOINT_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for appliance '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL:\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+            case APPLIANCE_OFFSET_CHANNEL:\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL:\n+            case APPLIANCE_LOCK_CHANNEL:\n+            case APPLIANCE_POWER_CHANNEL:\n+                state = UnDefType.UNDEF;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Appliance entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+\n+        // TODO Fetch appliance from API to force refresh - use synchronized block to\n+        // prevent multiple threads from calling\n+\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel = batteryLevel * 100;\n+                    state = new DecimalType(batteryLevel.intValue());\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.ON);\n+                    } else {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.OFF);\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel *= 100;\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+                if (entity.getCHState().isPresent()) {\n+                    if (entity.getCHState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+                if (entity.getDHWState().isPresent()) {\n+                    if (entity.getDHWState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4ODE1NA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550488154", "bodyText": "For Uom Types you should use QuantityType with the unit of the data.", "author": "Hilbrand", "createdAt": "2020-12-31T13:55:43Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                        updateState(APPLIANCE_LOCK_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setOffsetTemperature(entity, state.doubleValue());\n+                        updateState(APPLIANCE_OFFSET_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayOn(entity);\n+                        } else {\n+                            controller.switchRelayOff(entity);\n+                        }\n+                        updateState(APPLIANCE_POWER_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setThermostat(entity, state.doubleValue());\n+                        updateState(APPLIANCE_SETPOINT_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for appliance '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL:\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+            case APPLIANCE_OFFSET_CHANNEL:\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL:\n+            case APPLIANCE_LOCK_CHANNEL:\n+            case APPLIANCE_POWER_CHANNEL:\n+                state = UnDefType.UNDEF;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Appliance entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+\n+        // TODO Fetch appliance from API to force refresh - use synchronized block to\n+        // prevent multiple threads from calling\n+\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel = batteryLevel * 100;\n+                    state = new DecimalType(batteryLevel.intValue());\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.ON);\n+                    } else {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.OFF);\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel *= 100;\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+                if (entity.getCHState().isPresent()) {\n+                    if (entity.getCHState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+                if (entity.getDHWState().isPresent()) {\n+                    if (entity.getDHWState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_LOCK_CHANNEL:\n+                Boolean relayLockState = entity.getRelayLockState().orElse(null);\n+\n+                if (relayLockState != null) {\n+                    if (relayLockState) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (entity.getOffsetTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getOffsetTemperature().get());", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4ODc3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550488778", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, T> map = new HashMap<String, T>();\n          \n          \n            \n                private final Map<String, T> map = new HashMap<String, T>();", "author": "Hilbrand", "createdAt": "2020-12-31T13:58:49Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/DTO/PlugwiseHACollection.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.model.dto;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * @author B. van Wetten - Initial contribution\n+ */\n+public abstract class PlugwiseHACollection<T> implements Map<String, T> {\n+\n+    private Map<String, T> map = new HashMap<String, T>();", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4OTQ4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550489483", "bodyText": "The keyset already seems to be a String. Why do the toString()?  This can also be done with join method:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.appliance.getActuatorFunctionalities().keySet().stream().map(e -> e.toString())\n          \n          \n            \n                                    .collect(Collectors.joining(\", \")));\n          \n          \n            \n                            String.join(\", \", this.appliance.getActuatorFunctionalities().keySet());", "author": "Hilbrand", "createdAt": "2020-12-31T14:03:10Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                        updateState(APPLIANCE_LOCK_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setOffsetTemperature(entity, state.doubleValue());\n+                        updateState(APPLIANCE_OFFSET_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {\n+                            controller.switchRelayOn(entity);\n+                        } else {\n+                            controller.switchRelayOff(entity);\n+                        }\n+                        updateState(APPLIANCE_POWER_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay {} for appliance '{}'\", state, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        controller.setThermostat(entity, state.doubleValue());\n+                        updateState(APPLIANCE_SETPOINT_CHANNEL, (State) command);\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for appliance '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL:\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+            case APPLIANCE_OFFSET_CHANNEL:\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL:\n+            case APPLIANCE_LOCK_CHANNEL:\n+            case APPLIANCE_POWER_CHANNEL:\n+                state = UnDefType.UNDEF;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Appliance entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+\n+        // TODO Fetch appliance from API to force refresh - use synchronized block to\n+        // prevent multiple threads from calling\n+\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel = batteryLevel * 100;\n+                    state = new DecimalType(batteryLevel.intValue());\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.ON);\n+                    } else {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.OFF);\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel *= 100;\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+                if (entity.getCHState().isPresent()) {\n+                    if (entity.getCHState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+                if (entity.getDHWState().isPresent()) {\n+                    if (entity.getDHWState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_LOCK_CHANNEL:\n+                Boolean relayLockState = entity.getRelayLockState().orElse(null);\n+\n+                if (relayLockState != null) {\n+                    if (relayLockState) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (entity.getOffsetTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getOffsetTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (entity.getRelayState().isPresent()) {\n+                    if (entity.getRelayState().get()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+                if (entity.getPowerUsage().isPresent()) {\n+                    state = new DecimalType(entity.getPowerUsage().get());\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (entity.getSetpointTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getSetpointTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+                if (entity.getTemperature().isPresent()) {\n+                    state = new DecimalType(entity.getTemperature().get());\n+                }\n+                break;\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+                if (entity.getValvePosition().isPresent()) {\n+                    state = new DecimalType(entity.getValvePosition().get());\n+                }\n+                break;\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                if (entity.getWaterPressure().isPresent()) {\n+                    state = new DecimalType(entity.getWaterPressure().get());\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        if (state != UnDefType.NULL && state != UnDefType.UNDEF) {\n+            updateState(channelID, state);\n+        }\n+    }\n+\n+    protected synchronized void addBatteryChannels() {\n+        logger.debug(\"Battery operated appliance detected: adding 'Battery level' and 'Battery low level' channels\");\n+\n+        ChannelUID channelUIDBatteryLevel = new ChannelUID(getThing().getUID(), APPLIANCE_BATTERYLEVEL_CHANNEL);\n+        ChannelUID channelUIDBatteryLevelLow = new ChannelUID(getThing().getUID(), APPLIANCE_BATTERYLEVELLOW_CHANNEL);\n+\n+        boolean channelBatteryLevelExists = false;\n+        boolean channelBatteryLowExists = false;\n+\n+        List<Channel> channels = getThing().getChannels();\n+        for (Channel channel : channels) {\n+            if (channel.getUID().equals(channelUIDBatteryLevel)) {\n+                channelBatteryLevelExists = true;\n+            } else if (channel.getUID().equals(channelUIDBatteryLevelLow)) {\n+                channelBatteryLowExists = true;\n+            }\n+            if (channelBatteryLevelExists && channelBatteryLowExists) {\n+                break;\n+            }\n+        }\n+\n+        if (!channelBatteryLevelExists) {\n+            ThingBuilder thingBuilder = editThing();\n+\n+            Channel channelBatteryLevel = ChannelBuilder.create(channelUIDBatteryLevel, \"Number\")\n+                    .withType(CHANNEL_TYPE_BATTERYLEVEL).withKind(ChannelKind.STATE).withLabel(\"Battery level\")\n+                    .withDescription(\"Represents the battery level as a percentage (0-100%)\").build();\n+\n+            thingBuilder.withChannel(channelBatteryLevel);\n+\n+            updateThing(thingBuilder.build());\n+        }\n+\n+        if (!channelBatteryLowExists) {\n+            ThingBuilder thingBuilder = editThing();\n+\n+            Channel channelBatteryLow = ChannelBuilder.create(channelUIDBatteryLevelLow, \"Switch:Battery\")\n+                    .withType(CHANNEL_TYPE_BATTERYLEVELLOW).withKind(ChannelKind.STATE).withLabel(\"Battery low level\")\n+                    .withDescription(\"Switches ON when battery level gets below threshold level\").build();\n+\n+            thingBuilder.withChannel(channelBatteryLow);\n+\n+            updateThing(thingBuilder.build());\n+        }\n+    }\n+\n+    protected void setApplianceProperties() {\n+        Map<String, String> properties = editProperties();\n+        logger.debug(\"Setting thing properties\");\n+\n+        properties.put(PlugwiseHABindingConstants.APPLIANCE_PROPERTY_DESCRIPTION, this.appliance.getDescription());\n+        properties.put(PlugwiseHABindingConstants.APPLIANCE_PROPERTY_TYPE, this.appliance.getType());\n+        properties.put(PlugwiseHABindingConstants.APPLIANCE_PROPERTY_FUNCTIONALITIES,\n+                this.appliance.getActuatorFunctionalities().keySet().stream().map(e -> e.toString())\n+                        .collect(Collectors.joining(\", \")));", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4OTkwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550489907", "bodyText": "If you don't use specific methods of the OnOffType it's not needed to put it into a variable, and you can directly use the command variable:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                OnOffType state = (OnOffType) command;\n          \n          \n            \n                                try {\n          \n          \n            \n                                    if (state == OnOffType.ON) {\n          \n          \n            \n                                try {\n          \n          \n            \n                                    if (command == OnOffType.ON) {", "author": "Hilbrand", "createdAt": "2020-12-31T14:05:32Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    OnOffType state = (OnOffType) command;\n+                    try {\n+                        if (state == OnOffType.ON) {", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MDU0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550490545", "bodyText": "Are these method used? Otherwise they might be removed.", "author": "Hilbrand", "createdAt": "2020-12-31T14:08:48Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/xml/PlugwiseHAXStream.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.xml;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.OutputStreamWriter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.plugwiseha.internal.api.model.converter.DateTimeConverter;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.*;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Module;\n+\n+import com.thoughtworks.xstream.XStream;\n+import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;\n+import com.thoughtworks.xstream.io.xml.StaxDriver;\n+import com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder;\n+import com.thoughtworks.xstream.security.NoTypePermission;\n+import com.thoughtworks.xstream.security.NullPermission;\n+\n+/**\n+ * The {@link PlugwiseHAXStream} class is a utility class that wraps an XStream\n+ * object and provide additional functionality specific to the PlugwiseHA\n+ * binding. It automatically load the correct converter classes and processes\n+ * the XStream annotions used by the object classes.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHAXStream extends XStream {\n+\n+    private static XmlFriendlyNameCoder customCoder = new XmlFriendlyNameCoder(\"_-\", \"_\");\n+\n+    public PlugwiseHAXStream() {\n+        super(new StaxDriver(PlugwiseHAXStream.customCoder));\n+\n+        initialize();\n+    }\n+\n+    // Protected methods\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    protected void allowClass(Class clz) {\n+        this.processAnnotations(clz);\n+        this.allowTypeHierarchy(clz);\n+    }\n+\n+    protected void initialize() {\n+        // Configure XStream\n+        this.ignoreUnknownElements();\n+        this.setClassLoader(getClass().getClassLoader());\n+\n+        // Clear out existing\n+        this.addPermission(NoTypePermission.NONE);\n+        this.addPermission(NullPermission.NULL);\n+\n+        // Whitelist classes\n+        this.allowClass(GatewayInfo.class);\n+        this.allowClass(GatewayEnvironment.class);\n+        this.allowClass(Appliances.class);\n+        this.allowClass(Appliance.class);\n+        this.allowClass(Modules.class);\n+        this.allowClass(Module.class);\n+        this.allowClass(Locations.class);\n+        this.allowClass(Location.class);\n+        this.allowClass(Logs.class);\n+        this.allowClass(Log.class);\n+        this.allowClass(Services.class);\n+        this.allowClass(Service.class);\n+        this.allowClass(ZigBeeNode.class);\n+        this.allowClass(ActuatorFunctionalities.class);\n+        this.allowClass(ActuatorFunctionality.class);\n+        this.allowClass(ActuatorFunctionalityThermostat.class);\n+        this.allowClass(ActuatorFunctionalityOffsetTemperature.class);\n+        this.allowClass(ActuatorFunctionalityRelay.class);\n+        this.allowClass(ActuatorFunctionalityTimer.class);\n+        this.allowClass(ActuatorFunctionalityThreshold.class);\n+        this.allowClass(ActuatorFunctionalityToggle.class);\n+        this.allowClass(DomainObjects.class);\n+\n+        // Register custom converters\n+        this.registerConverter(new DateTimeConverter());\n+    }\n+\n+    // Public methods\n+\n+    public void prettyPrint(Object object) {\n+        BufferedOutputStream stdout = new BufferedOutputStream(System.out);\n+        prettyPrint(object, new OutputStreamWriter(stdout));\n+    }\n+\n+    public void prettyPrint(Object object, OutputStreamWriter outputStreamWriter) {\n+        this.marshal(object, new PrettyPrintWriter(outputStreamWriter, PlugwiseHAXStream.customCoder));\n+    }", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MTUwMA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550491500", "bodyText": "This can all be removed by implementing the discovery as a ThingHandlerService See this preview documentation: https://deploy-preview-1262--openhab-docs-preview.netlify.app/docs/developer/bindings/#discovery-that-is-bound-to-a-thing", "author": "Hilbrand", "createdAt": "2020-12-31T14:14:34Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/PlugwiseHAHandlerFactory.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal;\n+\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHAApplianceHandler;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHAZoneHandler;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.plugwiseha\")\n+public class PlugwiseHAHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Map<ThingUID, @Nullable ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAHandlerFactory.class);\n+    private final HttpClient httpClient;\n+\n+    // Constructor\n+\n+    @Activate\n+    public PlugwiseHAHandlerFactory(@Reference final HttpClientFactory httpClientFactory) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+    }\n+\n+    // Public methods\n+\n+    /**\n+     * Returns whether the handler is able to create a thing or register a thing\n+     * handler for the given type.\n+     *\n+     * @param thingTypeUID the thing type UID\n+     * @return true, if the handler supports the thing type, false otherwise\n+     */\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return (PlugwiseHABridgeHandler.supportsThingType(thingTypeUID)\n+                || PlugwiseHAZoneHandler.supportsThingType(thingTypeUID))\n+                || PlugwiseHAApplianceHandler.supportsThingType(thingTypeUID);\n+    }\n+\n+    /**\n+     * Creates a thing for given arguments.\n+     *\n+     * @param thingTypeUID thing type uid (not null)\n+     * @param configuration configuration\n+     * @param thingUID thing uid, which can be null\n+     * @param bridgeUID bridge uid, which can be null\n+     * @return created thing\n+     */\n+    @Override\n+    public @Nullable Thing createThing(ThingTypeUID thingTypeUID, Configuration configuration,\n+            @Nullable ThingUID thingUID, @Nullable ThingUID bridgeUID) {\n+        if (PlugwiseHABridgeHandler.supportsThingType(thingTypeUID)) {\n+            return super.createThing(thingTypeUID, configuration, thingUID, null);\n+        } else if (PlugwiseHAZoneHandler.supportsThingType(thingTypeUID)) {\n+            return super.createThing(thingTypeUID, configuration, thingUID, bridgeUID);\n+        } else if (PlugwiseHAApplianceHandler.supportsThingType(thingTypeUID)) {\n+            return super.createThing(thingTypeUID, configuration, thingUID, bridgeUID);\n+        }\n+\n+        throw new IllegalArgumentException(\n+                \"The thing type \" + thingTypeUID + \" is not supported by the plugwiseha binding.\");\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Creates a {@link ThingHandler} for the given thing.\n+     *\n+     * @param thing the thing\n+     * @return thing the created handler\n+     */\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (PlugwiseHABridgeHandler.supportsThingType(thingTypeUID)) {\n+            this.logger.debug(\"Creating new Plugwise Home Automation Bridge\");\n+            PlugwiseHABridgeHandler bridge = new PlugwiseHABridgeHandler((Bridge) thing, this.httpClient);\n+            registerPlugwiseHADiscoveryService(bridge);\n+            return bridge;\n+        } else if (PlugwiseHAZoneHandler.supportsThingType(thingTypeUID)) {\n+            logger.debug(\"Creating new Plugwise Home Automation Zone\");\n+            return new PlugwiseHAZoneHandler(thing);\n+        } else if (PlugwiseHAApplianceHandler.supportsThingType(thingTypeUID)) {\n+            logger.debug(\"Creating new Plugwise Home Automation Appliance\");\n+            return new PlugwiseHAApplianceHandler(thing);\n+        }\n+        return null;\n+    }\n+\n+    private synchronized void registerPlugwiseHADiscoveryService(PlugwiseHABridgeHandler bridgeHandler) {\n+        Hashtable<String, Object> properties = new Hashtable<String, Object>();\n+        PlugwiseHADiscoveryService discoveryService = new PlugwiseHADiscoveryService(bridgeHandler);\n+\n+        ServiceRegistration<?> serviceRegistration = bundleContext.registerService(DiscoveryService.class.getName(),\n+                discoveryService, properties);\n+\n+        this.discoveryServiceRegs.put(bridgeHandler.getThing().getUID(), serviceRegistration);\n+\n+        discoveryService.activate();\n+    }\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof PlugwiseHABridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+            if (serviceReg != null) {\n+                PlugwiseHADiscoveryService service = (PlugwiseHADiscoveryService) bundleContext\n+                        .getService(serviceReg.getReference());\n+\n+                if (service != null) {\n+                    service.deactivate();\n+                }\n+                serviceReg.unregister();\n+                discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+            }\n+        }\n+    }", "originalCommit": "ef8f66ea4fa7c814811d62051f4a616af4bea327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc1NTc5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r550755793", "bodyText": "If i do so i get this warning:\nRedundant superinterface DiscoveryService for the type PlugwiseHADiscoveryService, already defined by AbstractDiscoveryService\nI looked at some other bindings, but without success. Sorry, but could you help me in the good direction?", "author": "lsiepel", "createdAt": "2021-01-01T10:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MTUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYzNjQ3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r553636479", "bodyText": "I tried to use that documentation as well and had an error too.   I think that may need to be revisited from a documentation standpoint, what is there doesn't work without error in the latest code.", "author": "bigbasec", "createdAt": "2021-01-07T22:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MTUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYyMjk3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r558622979", "bodyText": "Does discovery still works if you remove it? Because asaik it was/is required to make it work using the ThingHanderService.", "author": "Hilbrand", "createdAt": "2021-01-15T22:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MTUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYyNjc1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r558626756", "bodyText": "Yes, seem to work just removed al things, performed a scan and it found all missing things. J-N-K suggested to just remove it: #9742", "author": "lsiepel", "createdAt": "2021-01-15T22:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MTUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4NTk1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r551385953", "bodyText": "Never compare strings with ==.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Unit<Temperature> unit = entity.getOffsetTemperatureUnit().orElse(UNIT_CELSIUS) == UNIT_CELSIUS\n          \n          \n            \n                                    Unit<Temperature> unit = UNIT_CELSIUS.equals(entity.getOffsetTemperatureUnit().orElse(UNIT_CELSIUS))\n          \n      \n    \n    \n  \n\nMaybe also check other occurrences.", "author": "Hilbrand", "createdAt": "2021-01-04T15:29:23Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    try {\n+                        if (command == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", (State) command,\n+                                entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        Unit<Temperature> unit = entity.getOffsetTemperatureUnit().orElse(UNIT_CELSIUS) == UNIT_CELSIUS", "originalCommit": "5e94fd9f439b6807da7c8112ac6061d7a2eb2d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyOTA3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r551429076", "bodyText": "Sorry and thanks, this is due to my lack of java experience. Learned something here ;-)", "author": "lsiepel", "createdAt": "2021-01-04T16:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4NTk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2NzAwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560967002", "bodyText": "Apparently updateDate can be null or possible the parameter hsUpdatedDate can be null?: https://community.openhab.org/t/plugwise-home-automation-binding-for-openhab/81299/105", "author": "Hilbrand", "createdAt": "2021-01-20T13:41:03Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/DTO/ActuatorFunctionality.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.model.dto;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import com.thoughtworks.xstream.annotations.XStreamAlias;\n+\n+/**\n+ * The {@link ActuatorFunctionality} class is an object model class that mirrors\n+ * the XML structure provided by the Plugwise Home Automation controller for the\n+ * any actuator functionality. It implements the {@link PlugwiseComparableDate}\n+ * interface and extends the abstract class {@link PlugwiseBaseModel}.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+@XStreamAlias(\"actuator_functionality\")\n+public class ActuatorFunctionality extends PlugwiseBaseModel implements PlugwiseComparableDate<ActuatorFunctionality> {\n+\n+    private String type;\n+    private String duration;\n+    private String setpoint;\n+    private String resolution;\n+    private String lock;\n+\n+    @XStreamAlias(\"preheating_allowed\")\n+    private String preHeat;\n+\n+    @XStreamAlias(\"lower_bound\")\n+    private String lowerBound;\n+\n+    @XStreamAlias(\"upper_bound\")\n+    private String upperBound;\n+\n+    @XStreamAlias(\"updated_date\")\n+    private ZonedDateTime updatedDate;\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getDuration() {\n+        return duration;\n+    }\n+\n+    public String getSetpoint() {\n+        return setpoint;\n+    }\n+\n+    public String getResolution() {\n+        return resolution;\n+    }\n+\n+    public String getLowerBound() {\n+        return lowerBound;\n+    }\n+\n+    public String getUpperBound() {\n+        return upperBound;\n+    }\n+\n+    public ZonedDateTime getUpdatedDate() {\n+        return updatedDate;\n+    }\n+\n+    public Optional<String> getPreHeatState() {\n+        return Optional.ofNullable(preHeat);\n+    }\n+\n+    public Optional<String> getRelayLockState() {\n+        return Optional.ofNullable(lock);\n+    }\n+\n+    @Override\n+    public int compareDateWith(ActuatorFunctionality hasUpdatedDate) {\n+        return this.getUpdatedDate().compareTo(hasUpdatedDate.getUpdatedDate());", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk3NTQwNA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560975404", "bodyText": "If you use an Optional then i would expect you to also use it as an optional. Otherwise you could just return null instead of an Optional. So I would expect something like this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Boolean preHeatState = entity.getPreHeatState().orElse(null);\n          \n          \n            \n                            if (preHeatState != null) {\n          \n          \n            \n                                state = OnOffType.from(preHeatState);\n          \n          \n            \n                            }\n          \n          \n            \n                            Optional<Boolean> preHeatState = entity.getPreHeatState();\n          \n          \n            \n                            if (preHeatState.isPresent()) {\n          \n          \n            \n                                state = OnOffType.from(preHeatState.get());\n          \n          \n            \n                            }", "author": "Hilbrand", "createdAt": "2021-01-20T13:53:33Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAZoneHandler.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAZoneHandler} class is responsible for handling commands\n+ * and status updates for the Plugwise Home Automation zones/locations.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHAZoneHandler extends PlugwiseHABaseHandler<Location, PlugwiseHAThingConfig> {\n+\n+    private @Nullable Location location;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAZoneHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_ZONE.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation zone handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation zone handler.\");\n+                return;\n+            }\n+\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.location = getEntity(controller, true);\n+\n+                        setLocationProperties();\n+                        updateStatus(ONLINE);\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable Location getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Location location = controller.getLocation(config.getId(), forceRefresh);\n+\n+        return location;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Location entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge != null) {\n+            PlugwiseHAController controller = bridge.getController();\n+            if (controller != null) {\n+                switch (channelID) {\n+                    case ZONE_SETPOINT_CHANNEL:\n+                        if (command instanceof QuantityType) {\n+                            QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                            try {\n+                                Unit<Temperature> unit = location.getSetpointTemperatureUnit().orElse(UNIT_CELSIUS)\n+                                        .equals(UNIT_CELSIUS) ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                                controller.setLocationThermostat(entity, state.toUnit(unit).doubleValue());\n+                            } catch (PlugwiseHAException e) {\n+                                logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                        entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                            }\n+                        }\n+                        break;\n+                    case ZONE_PREHEAT_CHANNEL:\n+                        if (command instanceof OnOffType) {\n+                            try {\n+                                controller.setPreHeating(entity, command == OnOffType.ON);\n+                            } catch (PlugwiseHAException e) {\n+                                logger.warn(\"Unable to switch zone pre heating {} for zone '{}'\", (State) command,\n+                                        entity.getName());\n+                            }\n+                        }\n+                        break;\n+                    default:\n+                        logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+                }\n+            }\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case ZONE_PREHEAT_CHANNEL:\n+            case ZONE_PRESETSCENE_CHANNEL:\n+            case ZONE_SETPOINT_CHANNEL:\n+            case ZONE_TEMPERATURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Location entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+\n+        switch (channelID) {\n+            case ZONE_PREHEAT_CHANNEL:\n+                Boolean preHeatState = entity.getPreHeatState().orElse(null);\n+                if (preHeatState != null) {\n+                    state = OnOffType.from(preHeatState);\n+                }", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk3ODA3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560978073", "bodyText": "cancelRefreshJob here should not be needed as dispose is called before initialize is called if it's reinitialized", "author": "Hilbrand", "createdAt": "2021-01-20T13:57:23Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    private @Nullable PlugwiseHABridgeThingConfig config;\n+    private @Nullable GatewayInfo gatewayInfo;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        // This method is also called whenever config changes\n+        cancelRefreshJob();", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE5NDUzOA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562194538", "bodyText": "And you are sure the handler is disposed when the config changes? Couldn't find documentation, so just asking to be sure.", "author": "lsiepel", "createdAt": "2021-01-21T21:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk3ODA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE5NzQwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562197401", "bodyText": "yes it is disposed. I you look into the code of BaseThingHandler you can see this.", "author": "Hilbrand", "createdAt": "2021-01-21T21:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk3ODA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk3ODk2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560978969", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        discoveryFuture = scheduler.scheduleWithFixedDelay(() -> {\n          \n          \n            \n                            startScan();\n          \n          \n            \n                        }, 30, REFRESH_SECONDS, TimeUnit.SECONDS);\n          \n          \n            \n                        discoveryFuture = scheduler.scheduleWithFixedDelay(this::startScan, 30, REFRESH_SECONDS, TimeUnit.SECONDS);", "author": "Hilbrand", "createdAt": "2021-01-20T13:58:32Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService implements ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private static final int TIMEOUT_SECONDS = 5;\n+    private static final int REFRESH_SECONDS = 600;\n+    private @Nullable PlugwiseHABridgeHandler bridgeHandler;\n+    private @Nullable ScheduledFuture<?> discoveryFuture;\n+\n+    public PlugwiseHADiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, TIMEOUT_SECONDS, true);\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        try {\n+            discoverDomainObjects();\n+        } catch (PlugwiseHAException e) {\n+            // Ignore silently\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"Start Plugwise Home Automation background discovery\");\n+        if (discoveryFuture == null || discoveryFuture.isCancelled()) {\n+            discoveryFuture = scheduler.scheduleWithFixedDelay(() -> {\n+                startScan();\n+            }, 30, REFRESH_SECONDS, TimeUnit.SECONDS);", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4MzQwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560983407", "bodyText": "Isn't the orElse redundant. If the logEntry would be null or not present map already returns a Optional.empty():\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.getLogTemperature().map(logEntry -> logEntry.getMeasurementAsDouble()).orElse(Optional.empty());\n          \n          \n            \n                    return this.getLogTemperature().map(logEntry -> logEntry.getMeasurementAsDouble());", "author": "Hilbrand", "createdAt": "2021-01-20T14:04:58Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/DTO/Logs.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.model.dto;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Logs} class is an object model class that\n+ * mirrors the XML structure provided by the Plugwise Home Automation\n+ * controller for the collection of logs.\n+ * It extends the {@link PlugwiseHACollection} class.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+public class Logs extends PlugwiseHACollection<Log> {\n+\n+    private static final String THERMOSTAT = \"thermostat\";\n+    private static final String TEMPERATURE = \"temperature\";\n+    private static final String TEMPERATURE_OFFSET = \"temperature_offset\";\n+    private static final String BATTERY = \"battery\";\n+    private static final String POWER_USAGE = \"electricity_consumed\";\n+    private static final String RELAY = \"relay\";\n+    private static final String DHWSTATE = \"domestic_hot_water_state\";\n+    private static final String CHSTATE = \"central_heating_state\";\n+    private static final String VALVE_POSITION = \"valve_position\";\n+    private static final String WATER_PRESSURE = \"central_heater_water_pressure\";\n+\n+    public Optional<Double> getTemperature() {\n+        return this.getLogTemperature().map(logEntry -> logEntry.getMeasurementAsDouble()).orElse(Optional.empty());", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIxMjA4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562212083", "bodyText": "I thought so, but than i get a type mismatch:\nType mismatch: cannot convert from Optional to Optional", "author": "lsiepel", "createdAt": "2021-01-21T21:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4MzQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwMjg2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563202865", "bodyText": "Ok, probably due to the map.", "author": "Hilbrand", "createdAt": "2021-01-23T21:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4MzQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4NDI4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560984289", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (unit != null) {\n          \n          \n            \n                        return Optional.of(unit);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return Optional.empty();\n          \n          \n            \n                    }\n          \n          \n            \n                    return Optional.ofNullable(unit);", "author": "Hilbrand", "createdAt": "2021-01-20T14:06:04Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/DTO/Log.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.model.dto;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import com.thoughtworks.xstream.annotations.XStreamAlias;\n+\n+/**\n+ * @author B. van Wetten - Initial contribution\n+ */\n+@XStreamAlias(\"point_log\")\n+public class Log extends PlugwiseBaseModel implements PlugwiseComparableDate<Log> {\n+\n+    private String type;\n+\n+    private String unit;\n+\n+    private String measurement;\n+\n+    @XStreamAlias(\"measurement_date\")\n+    private ZonedDateTime measurementDate;\n+\n+    @XStreamAlias(\"updated_date\")\n+    private ZonedDateTime updatedDate;\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getUnit() {\n+        return unit;\n+    }\n+\n+    public Optional<String> getMeasurement() {\n+        return Optional.ofNullable(measurement);\n+    }\n+\n+    public Optional<Boolean> getMeasurementAsBoolean() {\n+        if (measurement != null) {\n+            switch (measurement.toLowerCase()) {\n+                case \"on\":\n+                    return Optional.of(true);\n+                case \"off\":\n+                    return Optional.of(false);\n+                default:\n+                    return Optional.empty();\n+            }\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public Optional<Double> getMeasurementAsDouble() {\n+        try {\n+            if (measurement != null) {\n+                return Optional.of(Double.parseDouble(measurement));\n+            } else {\n+                return Optional.empty();\n+            }\n+        } catch (NumberFormatException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public Optional<String> getMeasurementUnit() {\n+        if (unit != null) {\n+            return Optional.of(unit);\n+        } else {\n+            return Optional.empty();\n+        }", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4NTEzOA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560985138", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return this.measurementDate.compareTo(hasMeasurementDate.getMeasurementDate());\n          \n          \n            \n                        return localcompareFromDate.compareTo(compareToDate);", "author": "Hilbrand", "createdAt": "2021-01-20T14:07:13Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/DTO/Log.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.model.dto;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import com.thoughtworks.xstream.annotations.XStreamAlias;\n+\n+/**\n+ * @author B. van Wetten - Initial contribution\n+ */\n+@XStreamAlias(\"point_log\")\n+public class Log extends PlugwiseBaseModel implements PlugwiseComparableDate<Log> {\n+\n+    private String type;\n+\n+    private String unit;\n+\n+    private String measurement;\n+\n+    @XStreamAlias(\"measurement_date\")\n+    private ZonedDateTime measurementDate;\n+\n+    @XStreamAlias(\"updated_date\")\n+    private ZonedDateTime updatedDate;\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getUnit() {\n+        return unit;\n+    }\n+\n+    public Optional<String> getMeasurement() {\n+        return Optional.ofNullable(measurement);\n+    }\n+\n+    public Optional<Boolean> getMeasurementAsBoolean() {\n+        if (measurement != null) {\n+            switch (measurement.toLowerCase()) {\n+                case \"on\":\n+                    return Optional.of(true);\n+                case \"off\":\n+                    return Optional.of(false);\n+                default:\n+                    return Optional.empty();\n+            }\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public Optional<Double> getMeasurementAsDouble() {\n+        try {\n+            if (measurement != null) {\n+                return Optional.of(Double.parseDouble(measurement));\n+            } else {\n+                return Optional.empty();\n+            }\n+        } catch (NumberFormatException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public Optional<String> getMeasurementUnit() {\n+        if (unit != null) {\n+            return Optional.of(unit);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public ZonedDateTime getMeasurementDate() {\n+        return measurementDate;\n+    }\n+\n+    public ZonedDateTime getUpdatedDate() {\n+        return updatedDate;\n+    }\n+\n+    public int compareDateWith(Log hasMeasurementDate) {\n+        if (hasMeasurementDate == null) {\n+            return -1;\n+        }\n+        ZonedDateTime compareToDate = hasMeasurementDate.getMeasurementDate();\n+        ZonedDateTime localcompareFromDate = this.measurementDate;\n+        if (localcompareFromDate == null) {\n+            return -1;\n+        } else if (compareToDate == null) {\n+            return 1;\n+        } else {\n+            return this.measurementDate.compareTo(hasMeasurementDate.getMeasurementDate());", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjEzNzYyNg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562137626", "bodyText": "good spot!", "author": "lsiepel", "createdAt": "2021-01-21T19:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4NTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4ODA0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560988048", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Boolean preheating_allowed;\n          \n          \n            \n                @XStreamAlias(\"preheating_allowed\")\n          \n          \n            \n                private Boolean preheatingAllowed;", "author": "Hilbrand", "createdAt": "2021-01-20T14:10:51Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/DTO/ActuatorFunctionalityThermostat.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.model.dto;\n+\n+import com.thoughtworks.xstream.annotations.XStreamAlias;\n+\n+/**\n+ * @author B. van Wetten - Initial contribution\n+ */\n+@XStreamAlias(\"thermostat_functionality\")\n+public class ActuatorFunctionalityThermostat extends ActuatorFunctionality {\n+\n+    @SuppressWarnings(\"unused\")\n+    private Double setpoint;\n+\n+    @SuppressWarnings(\"unused\")\n+    private Boolean preheating_allowed;", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4OTQxMA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r560989410", "bodyText": "Do you need to override this method? It doesn't seem to add anything.", "author": "Hilbrand", "createdAt": "2021-01-20T14:12:33Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/PlugwiseHAHandlerFactory.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHAApplianceHandler;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHAZoneHandler;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.plugwiseha\")\n+public class PlugwiseHAHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAHandlerFactory.class);\n+    private final HttpClient httpClient;\n+\n+    // Constructor\n+\n+    @Activate\n+    public PlugwiseHAHandlerFactory(@Reference final HttpClientFactory httpClientFactory) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+    }\n+\n+    // Public methods\n+\n+    /**\n+     * Returns whether the handler is able to create a thing or register a thing\n+     * handler for the given type.\n+     *\n+     * @param thingTypeUID the thing type UID\n+     * @return true, if the handler supports the thing type, false otherwise\n+     */\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return (PlugwiseHABridgeHandler.supportsThingType(thingTypeUID)\n+                || PlugwiseHAZoneHandler.supportsThingType(thingTypeUID))\n+                || PlugwiseHAApplianceHandler.supportsThingType(thingTypeUID);\n+    }\n+\n+    /**\n+     * Creates a thing for given arguments.\n+     *\n+     * @param thingTypeUID thing type uid (not null)\n+     * @param configuration configuration\n+     * @param thingUID thing uid, which can be null\n+     * @param bridgeUID bridge uid, which can be null\n+     * @return created thing\n+     */\n+    @Override\n+    public @Nullable Thing createThing(ThingTypeUID thingTypeUID, Configuration configuration,", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY0NTQ2NA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562645464", "bodyText": "It checks if the thing is supported by this handler. That is not done in the base handler, so it does add something, not sure if that is mandatory. I assume that per your comment i understand that such a check is not needed. I'll remove it if my assumption is right.", "author": "lsiepel", "createdAt": "2021-01-22T13:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY1MDM1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562650357", "bodyText": "The framework uses the method above supportsThingType to check if the thingTypeUID is supported. If not if will not create a handler.And even if that would not happen it would fall-through the method createHander and return null (below) which will trigger the framework to report it can't create a handler.", "author": "Hilbrand", "createdAt": "2021-01-22T14:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY1MTMyOA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562651328", "bodyText": "Great thanks for the details!", "author": "lsiepel", "createdAt": "2021-01-22T14:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NTY5NA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624495694", "bodyText": "So, are you gonna remove it?", "author": "fwolter", "createdAt": "2021-05-01T11:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzMzI3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632933279", "bodyText": "Can you comment on this?", "author": "fwolter", "createdAt": "2021-05-15T11:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4OTQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNDE3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561004171", "bodyText": "If you use getCommonHttpClient you don't need or should call start on the httpclient.", "author": "Hilbrand", "createdAt": "2021-01-20T14:31:47Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/PlugwiseHAController.java", "diffHunk": "@@ -0,0 +1,438 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.model;\n+\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.*;\n+import org.openhab.binding.plugwiseha.internal.api.xml.PlugwiseHAXStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAController} class provides the interface to the Plugwise\n+ * Home Automation API and stores/caches the object model for use by the various\n+ * ThingHandlers of this binding.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAController {\n+\n+    // Private member variables/constants\n+\n+    private static final int MAX_AGE_MINUTES_REFRESH = 10;\n+    private static final int MAX_AGE_MINUTES_FULL_REFRESH = 30;\n+    private static final DateTimeFormatter FORMAT = DateTimeFormatter.RFC_1123_DATE_TIME; // default Date format that\n+                                                                                          // will be used in conversion\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAController.class);\n+\n+    private final HttpClient httpClient;\n+    private final PlugwiseHAXStream xStream;\n+    private final Transformer domainObjectsTransformer;\n+\n+    private final String host;\n+    private final int port;\n+    private final String username;\n+    private final String smileId;\n+\n+    private @Nullable ZonedDateTime gatewayUpdateDateTime;\n+    private @Nullable ZonedDateTime gatewayFullUpdateDateTime;\n+    private @Nullable DomainObjects domainObjects;\n+\n+    public PlugwiseHAController(HttpClient httpClient, String host, int port, String username, String smileId)\n+            throws PlugwiseHAException {\n+        this.httpClient = httpClient;\n+        this.host = host;\n+        this.port = port;\n+        this.username = username;\n+        this.smileId = smileId;\n+\n+        this.xStream = new PlugwiseHAXStream();\n+        this.domainObjectsTransformer = PlugwiseHAController\n+                .setXSLT(new StreamSource(getClass().getClassLoader().getResourceAsStream(\"domain_objects.xslt\")));\n+    }\n+\n+    // Public methods\n+\n+    public void start(Runnable callback) throws PlugwiseHAException {\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            logger.error(\"Could not start http client\", e);\n+            throw new PlugwiseHAException(\"Could not start http client\", e);\n+        }", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNDMyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561004327", "bodyText": "Same here. If you use getCommonHttpClient you don't need or should call stop on the httpclient.", "author": "Hilbrand", "createdAt": "2021-01-20T14:32:02Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/PlugwiseHAController.java", "diffHunk": "@@ -0,0 +1,438 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.api.model;\n+\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.*;\n+import org.openhab.binding.plugwiseha.internal.api.xml.PlugwiseHAXStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAController} class provides the interface to the Plugwise\n+ * Home Automation API and stores/caches the object model for use by the various\n+ * ThingHandlers of this binding.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAController {\n+\n+    // Private member variables/constants\n+\n+    private static final int MAX_AGE_MINUTES_REFRESH = 10;\n+    private static final int MAX_AGE_MINUTES_FULL_REFRESH = 30;\n+    private static final DateTimeFormatter FORMAT = DateTimeFormatter.RFC_1123_DATE_TIME; // default Date format that\n+                                                                                          // will be used in conversion\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAController.class);\n+\n+    private final HttpClient httpClient;\n+    private final PlugwiseHAXStream xStream;\n+    private final Transformer domainObjectsTransformer;\n+\n+    private final String host;\n+    private final int port;\n+    private final String username;\n+    private final String smileId;\n+\n+    private @Nullable ZonedDateTime gatewayUpdateDateTime;\n+    private @Nullable ZonedDateTime gatewayFullUpdateDateTime;\n+    private @Nullable DomainObjects domainObjects;\n+\n+    public PlugwiseHAController(HttpClient httpClient, String host, int port, String username, String smileId)\n+            throws PlugwiseHAException {\n+        this.httpClient = httpClient;\n+        this.host = host;\n+        this.port = port;\n+        this.username = username;\n+        this.smileId = smileId;\n+\n+        this.xStream = new PlugwiseHAXStream();\n+        this.domainObjectsTransformer = PlugwiseHAController\n+                .setXSLT(new StreamSource(getClass().getClassLoader().getResourceAsStream(\"domain_objects.xslt\")));\n+    }\n+\n+    // Public methods\n+\n+    public void start(Runnable callback) throws PlugwiseHAException {\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            logger.error(\"Could not start http client\", e);\n+            throw new PlugwiseHAException(\"Could not start http client\", e);\n+        }\n+\n+        refresh();\n+        callback.run();\n+    }\n+\n+    public void stop() {\n+        if (httpClient.isStarted()) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.debug(\"Could not stop http client.\", e);\n+            }\n+        }\n+    }", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNTg2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561005869", "bodyText": "Are these overrides of active and deactivate still needed?", "author": "Hilbrand", "createdAt": "2021-01-20T14:33:58Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService implements ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private static final int TIMEOUT_SECONDS = 5;\n+    private static final int REFRESH_SECONDS = 600;\n+    private @Nullable PlugwiseHABridgeHandler bridgeHandler;\n+    private @Nullable ScheduledFuture<?> discoveryFuture;\n+\n+    public PlugwiseHADiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, TIMEOUT_SECONDS, true);\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        try {\n+            discoverDomainObjects();\n+        } catch (PlugwiseHAException e) {\n+            // Ignore silently\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"Start Plugwise Home Automation background discovery\");\n+        if (discoveryFuture == null || discoveryFuture.isCancelled()) {\n+            discoveryFuture = scheduler.scheduleWithFixedDelay(() -> {\n+                startScan();\n+            }, 30, REFRESH_SECONDS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        logger.debug(\"Stopping Plugwise Home Automation background discovery\");\n+        if (discoveryFuture != null && !discoveryFuture.isCancelled()) {\n+            discoveryFuture.cancel(true);\n+            discoveryFuture = null;\n+        }\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwNjc4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562206781", "bodyText": "If i do so the class throws an error:\nThe inherited method AbstractDiscoveryService.deactivate() cannot hide the public abstract method in ThingHandlerService\nI don't conrol those classes so the only option i have is to do this override.", "author": "lsiepel", "createdAt": "2021-01-21T21:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNTg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIzNzE1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562237156", "bodyText": "Ah. that is right. you do need to override deactive, but activate is probably not needed to be overridden.", "author": "Hilbrand", "createdAt": "2021-01-21T22:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNTg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0ODMyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561248321", "bodyText": "You should use the openHAB Units class:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import tec.uom.se.unit.Units;\n          \n          \n            \n            import org.openhab.core.library.unit.Units;", "author": "Hilbrand", "createdAt": "2021-01-20T20:12:05Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE5MTc5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563191791", "bodyText": "If i do, i get NoClassDefFoundError caused by ClassNotFoundException. When the line hits:\norg.openhab.binding.plugwiseha.internal.handler.PlugwiseHAApplianceHandler.refreshChannel(PlugwiseHAApplianceHandler.java:336) I can't get this fixed. Any advice?", "author": "lsiepel", "createdAt": "2021-01-23T19:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0ODMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0ODY2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561248665", "bodyText": "Remove dead code.", "author": "Hilbrand", "createdAt": "2021-01-20T20:12:23Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI1MTc4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561251782", "bodyText": "You should make sure every path results in setting the status of the thing. For example if this if is false the status is not set. (Or is this handled somewhere else?)", "author": "Hilbrand", "createdAt": "2021-01-20T20:14:52Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI1NDA0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561254048", "bodyText": "Overriding this method should normally not be needed. When a thing configuration is updated initialize is called and you can do everthing in there. So maybe this method can be removed.", "author": "Hilbrand", "createdAt": "2021-01-20T20:16:40Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI1ODYyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561258621", "bodyText": "If the state for the channel can't be set it does make sense to set to UNDEF. So not sure why it's excluded here?", "author": "Hilbrand", "createdAt": "2021-01-20T20:20:22Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    // private PlugwiseHAThingConfig config = new PlugwiseHAThingConfig();\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+            try {\n+                PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+                if (bridge != null) {\n+                    PlugwiseHAController controller = bridge.getController();\n+                    if (controller != null) {\n+                        this.appliance = getEntity(controller, true);\n+                        if (this.appliance != null) {\n+                            if (this.appliance.isBatteryOperated()) {\n+                                addBatteryChannels();\n+                            }\n+                            setApplianceProperties();\n+                            updateStatus(ONLINE);\n+                        }\n+                    }\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void thingUpdated(Thing thing) {\n+        super.thingUpdated(thing);\n+\n+        if (this.appliance.isBatteryOperated()) {\n+            addBatteryChannels();\n+        }\n+\n+        ThingHandler thingHandler = thing.getHandler();\n+\n+        if (thingHandler != null) {\n+            for (Channel channel : thing.getChannels()) {\n+                if (this.isLinked(channel.getUID())) {\n+                    Appliance appliance = this.appliance;\n+                    if (appliance != null) {\n+                        this.refreshChannel(appliance, channel.getUID());\n+                    }\n+                }\n+            }\n+        }\n+\n+        setApplianceProperties();\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    try {\n+                        if (command == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", (State) command,\n+                                entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        Unit<Temperature> unit = entity.getOffsetTemperatureUnit().orElse(UNIT_CELSIUS)\n+                                .equals(UNIT_CELSIUS) ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                        controller.setOffsetTemperature(entity, state.toUnit(unit).doubleValue());\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    try {\n+                        if (command == OnOffType.ON) {\n+                            controller.switchRelayOn(entity);\n+                        } else {\n+                            controller.switchRelayOff(entity);\n+                        }\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay {} for appliance '{}'\", (State) command, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        Unit<Temperature> unit = entity.getSetpointTemperatureUnit().orElse(UNIT_CELSIUS)\n+                                .equals(UNIT_CELSIUS) ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                        controller.setThermostat(entity, state.toUnit(unit).doubleValue());\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for appliance '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Ignoring unsupported command = {} for channel = {}\", command, channelUID);\n+        }\n+    }\n+\n+    private State getDefaultState(String channelID) {\n+        State state = UnDefType.NULL;\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL:\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+            case APPLIANCE_OFFSET_CHANNEL:\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                state = UnDefType.NULL;\n+                break;\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL:\n+            case APPLIANCE_LOCK_CHANNEL:\n+            case APPLIANCE_POWER_CHANNEL:\n+                state = UnDefType.UNDEF;\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    @Override\n+    protected void refreshChannel(Appliance entity, ChannelUID channelUID) {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        State state = getDefaultState(channelID);\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+\n+        switch (channelID) {\n+            case APPLIANCE_BATTERYLEVEL_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel = batteryLevel * 100;\n+                    state = new QuantityType<Dimensionless>(batteryLevel.intValue(), Units.PERCENT);\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.ON);\n+                    } else {\n+                        updateState(APPLIANCE_BATTERYLEVELLOW_CHANNEL, OnOffType.OFF);\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_BATTERYLEVELLOW_CHANNEL: {\n+                Double batteryLevel = entity.getBatteryLevel().orElse(null);\n+\n+                if (batteryLevel != null) {\n+                    batteryLevel *= 100;\n+                    if (batteryLevel <= config.getLowBatteryPercentage()) {\n+                        state = OnOffType.ON;\n+                    } else {\n+                        state = OnOffType.OFF;\n+                    }\n+                }\n+                break;\n+            }\n+            case APPLIANCE_CHSTATE_CHANNEL:\n+                if (entity.getCHState().isPresent()) {\n+                    state = OnOffType.from(entity.getCHState().get());\n+                }\n+                break;\n+            case APPLIANCE_DHWSTATE_CHANNEL:\n+                if (entity.getDHWState().isPresent()) {\n+                    state = OnOffType.from(entity.getDHWState().get());\n+                }\n+                break;\n+            case APPLIANCE_LOCK_CHANNEL:\n+                Boolean relayLockState = entity.getRelayLockState().orElse(null);\n+                if (relayLockState != null) {\n+                    state = OnOffType.from(relayLockState);\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (entity.getOffsetTemperature().isPresent()) {\n+                    Unit<Temperature> unit = entity.getOffsetTemperatureUnit().orElse(UNIT_CELSIUS).equals(UNIT_CELSIUS)\n+                            ? SIUnits.CELSIUS\n+                            : ImperialUnits.FAHRENHEIT;\n+                    state = new QuantityType<Temperature>(entity.getOffsetTemperature().get(), unit);\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (entity.getRelayState().isPresent()) {\n+                    state = OnOffType.from(entity.getRelayState().get());\n+                }\n+                break;\n+            case APPLIANCE_POWER_USAGE_CHANNEL:\n+                if (entity.getPowerUsage().isPresent()) {\n+                    state = new QuantityType<Power>(entity.getPowerUsage().get(), Units.WATT);\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (entity.getSetpointTemperature().isPresent()) {\n+                    Unit<Temperature> unit = entity.getSetpointTemperatureUnit().orElse(UNIT_CELSIUS)\n+                            .equals(UNIT_CELSIUS) ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                    state = new QuantityType<Temperature>(entity.getSetpointTemperature().get(), unit);\n+                }\n+                break;\n+            case APPLIANCE_TEMPERATURE_CHANNEL:\n+                if (entity.getTemperature().isPresent()) {\n+                    Unit<Temperature> unit = entity.getTemperatureUnit().orElse(UNIT_CELSIUS).equals(UNIT_CELSIUS)\n+                            ? SIUnits.CELSIUS\n+                            : ImperialUnits.FAHRENHEIT;\n+                    state = new QuantityType<Temperature>(entity.getTemperature().get(), unit);\n+                }\n+                break;\n+            case APPLIANCE_VALVEPOSITION_CHANNEL:\n+                if (entity.getValvePosition().isPresent()) {\n+                    state = new QuantityType<Dimensionless>((int) (entity.getValvePosition().get() * 100),\n+                            Units.PERCENT);\n+                }\n+                break;\n+            case APPLIANCE_WATERPRESSURE_CHANNEL:\n+                if (entity.getWaterPressure().isPresent()) {\n+                    Unit<Pressure> unit = HECTO(SIUnits.PASCAL);\n+                    state = new QuantityType<Pressure>(entity.getWaterPressure().get(), unit);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        if (state != UnDefType.NULL && state != UnDefType.UNDEF) {", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI1OTQxOA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561259418", "bodyText": "Remove dead code", "author": "Hilbrand", "createdAt": "2021-01-20T20:21:04Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    // Private Static error messages", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI1OTYxNg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561259616", "bodyText": "Remove deadd code.", "author": "Hilbrand", "createdAt": "2021-01-20T20:21:14Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    // Private Static error messages\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    // private @Nullable C config;", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI2MDU5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561260591", "bodyText": "Can you add some javadoc to these abstract methods on what they are intended to do?", "author": "Hilbrand", "createdAt": "2021-01-20T20:22:03Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    // Private Static error messages\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    // private @Nullable C config;\n+\n+    protected final Logger logger = LoggerFactory.getLogger(PlugwiseHABaseHandler.class);\n+\n+    private Class<?> clazz;\n+\n+    // Constructor\n+\n+    public PlugwiseHABaseHandler(Thing thing) {\n+        super(thing);\n+        clazz = (Class<?>) (((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[1]);\n+    }\n+\n+    // Abstract methods\n+\n+    protected abstract void initialize(C config);", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI2MzM4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561263383", "bodyText": "If you pass the bridge to initialize and have a guaranteed non null object you don't need to check for null in the sub classes.", "author": "Hilbrand", "createdAt": "2021-01-20T20:24:18Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    // Private Static error messages\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    // private @Nullable C config;\n+\n+    protected final Logger logger = LoggerFactory.getLogger(PlugwiseHABaseHandler.class);\n+\n+    private Class<?> clazz;\n+\n+    // Constructor\n+\n+    public PlugwiseHABaseHandler(Thing thing) {\n+        super(thing);\n+        clazz = (Class<?>) (((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[1]);\n+    }\n+\n+    // Abstract methods\n+\n+    protected abstract void initialize(C config);\n+\n+    protected abstract @Nullable E getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException;\n+\n+    protected abstract void refreshChannel(E entity, ChannelUID channelUID);\n+\n+    protected abstract void handleCommand(E entity, ChannelUID channelUID, Command command) throws PlugwiseHAException;\n+\n+    // Overrides\n+\n+    @Override\n+    public void initialize() {\n+        C config = getPlugwiseThingConfig();\n+\n+        if (checkConfig(config)) {\n+            // logger.debug(\"Initializing Plugwise Home Automation thing handler with config = {}\", config);\n+\n+            Bridge bridge = getBridge();\n+            if (bridge == null || bridge.getHandler() == null\n+                    || !(bridge.getHandler() instanceof PlugwiseHABridgeHandler)) {\n+                updateStatus(OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"You must choose a Plugwise Home Automation bridge for this thing.\");\n+                return;\n+            }\n+\n+            if (bridge.getStatus() == OFFLINE) {\n+                updateStatus(OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                        \"The Plugwise Home Automation bridge is currently offline.\");\n+            }\n+\n+            initialize(config);", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg4NzQ0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562887445", "bodyText": "That's better. I would also like to get getPlugwiseHABridge() to be non null, as that would take away many null checks in the subclasses. But because it uses Bridge bridge = this.getBridge(); that is nullable, so what would the approach be to get this non null.", "author": "lsiepel", "createdAt": "2021-01-22T20:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI2MzM4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI2NTk3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561265977", "bodyText": "Maybe use getPlugwiseHABridge() here?", "author": "Hilbrand", "createdAt": "2021-01-20T20:26:25Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    // Private Static error messages\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    // private @Nullable C config;\n+\n+    protected final Logger logger = LoggerFactory.getLogger(PlugwiseHABaseHandler.class);\n+\n+    private Class<?> clazz;\n+\n+    // Constructor\n+\n+    public PlugwiseHABaseHandler(Thing thing) {\n+        super(thing);\n+        clazz = (Class<?>) (((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[1]);\n+    }\n+\n+    // Abstract methods\n+\n+    protected abstract void initialize(C config);\n+\n+    protected abstract @Nullable E getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException;\n+\n+    protected abstract void refreshChannel(E entity, ChannelUID channelUID);\n+\n+    protected abstract void handleCommand(E entity, ChannelUID channelUID, Command command) throws PlugwiseHAException;\n+\n+    // Overrides\n+\n+    @Override\n+    public void initialize() {\n+        C config = getPlugwiseThingConfig();\n+\n+        if (checkConfig(config)) {\n+            // logger.debug(\"Initializing Plugwise Home Automation thing handler with config = {}\", config);\n+\n+            Bridge bridge = getBridge();\n+            if (bridge == null || bridge.getHandler() == null\n+                    || !(bridge.getHandler() instanceof PlugwiseHABridgeHandler)) {\n+                updateStatus(OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"You must choose a Plugwise Home Automation bridge for this thing.\");\n+                return;\n+            }\n+\n+            if (bridge.getStatus() == OFFLINE) {\n+                updateStatus(OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                        \"The Plugwise Home Automation bridge is currently offline.\");\n+            }\n+\n+            initialize(config);\n+        } else {\n+            logger.warn(\"Invalid config for Plugwise Home Automation thing handler with config = {}\", config);\n+        }\n+    }\n+\n+    @Override\n+    public final void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Handling command = {} for channel = {}\", command, channelUID);\n+\n+        if (getThing().getStatus() == ONLINE) {\n+            PlugwiseHAController controller = getController();\n+            if (controller != null) {\n+                try {\n+                    E entity = getEntity(controller, false);\n+                    if (entity != null) {\n+                        if (this.isLinked(channelUID)) {\n+                            if (command instanceof RefreshType) {\n+                                refreshChannel(entity, channelUID);\n+                            } else {\n+                                handleCommand(entity, channelUID, command);\n+                            }\n+                        }\n+                    }\n+                } catch (PlugwiseHAException e) {\n+                    logger.warn(\"Unexpected error handling command = {} for channel = {} : {}\", command, channelUID,\n+                            e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    // Public member methods\n+\n+    public @Nullable PlugwiseHABridgeHandler getPlugwiseHABridge() {\n+        Bridge bridge = this.getBridge();\n+        if (bridge != null) {\n+            return (PlugwiseHABridgeHandler) bridge.getHandler();\n+        }\n+\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public C getPlugwiseThingConfig() {\n+        return (C) getConfigAs(clazz);\n+    }\n+\n+    // Private & protected methods\n+\n+    private final @Nullable PlugwiseHAController getController() {\n+        Bridge bridge = getBridge();", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3MTE4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561271187", "bodyText": "You might want to catch RuntimeException to catch unexpected errors. Sometimes due to a communication problem something can go wrong. And if you don't catch RuntimeException it will stop the refresh process and the binding has to be restarted by the user to get things going.", "author": "Hilbrand", "createdAt": "2021-01-20T20:30:32Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    private @Nullable PlugwiseHABridgeThingConfig config;\n+    private @Nullable GatewayInfo gatewayInfo;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        // This method is also called whenever config changes\n+        cancelRefreshJob();\n+        this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig()) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, config.getHost(), config.getPort(),\n+                        config.getUsername(), config.getsmileId());\n+                this.controller.start(() -> {\n+                    setBridgeProperties();\n+                    updateStatus(ONLINE);\n+                });\n+            } catch (PlugwiseHAInvalidHostException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+            } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+            } catch (PlugwiseHACommunicationException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            } catch (PlugwiseHAException e) {\n+                logger.error(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid config for the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(PlugwiseHADiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        this.logger.warn(\n+                \"Ignoring command = {} for channel = {} - this channel for the Plugwise Home Automation binding is read-only!\",\n+                command, channelUID);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+        if (this.controller != null) {\n+            this.controller.stop();\n+            this.controller = null;\n+        }\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_BRIDGE_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    // Getters & setters\n+\n+    public @Nullable PlugwiseHAController getController() {\n+        return this.controller;\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig() {\n+        if (this.config == null || !this.config.isValid()) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_CONFIGURATION_ERROR);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void scheduleRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob == null) {\n+                logger.debug(\"Scheduling refresh job every {}s\", config.getRefresh());\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::run, 0, config.getRefresh(), TimeUnit.SECONDS);\n+            }\n+        }\n+    }\n+\n+    private void run() {\n+        try {\n+            logger.trace(\"Executing refresh job\");\n+            refresh();\n+            updateStatus(ONLINE);\n+        } catch (PlugwiseHAInvalidHostException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+        } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+        } catch (PlugwiseHACommunicationException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+        } catch (PlugwiseHATimeoutException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_TIMEOUT);\n+        } catch (PlugwiseHAException e) {\n+            logger.debug(\"Unhandled exception while refreshing the Plugwise Home Automation Controller {} - {}\",\n+                    getThing().getUID(), e.getMessage());\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+        }", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE5MDUwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562190507", "bodyText": "Wat would the right level be? warn?", "author": "lsiepel", "createdAt": "2021-01-21T20:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3MTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE5OTc0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562199745", "bodyText": "In such cases I set the thing to offline with the exception message as description and log the exception to debug.", "author": "Hilbrand", "createdAt": "2021-01-21T21:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3MTE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3NTAwOA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561275008", "bodyText": "I would assume if there is a configuration error the refresh job is never started. So why cancel it here?", "author": "Hilbrand", "createdAt": "2021-01-20T20:33:36Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    private @Nullable PlugwiseHABridgeThingConfig config;\n+    private @Nullable GatewayInfo gatewayInfo;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        // This method is also called whenever config changes\n+        cancelRefreshJob();\n+        this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig()) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, config.getHost(), config.getPort(),\n+                        config.getUsername(), config.getsmileId());\n+                this.controller.start(() -> {\n+                    setBridgeProperties();\n+                    updateStatus(ONLINE);\n+                });\n+            } catch (PlugwiseHAInvalidHostException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+            } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+            } catch (PlugwiseHACommunicationException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            } catch (PlugwiseHAException e) {\n+                logger.error(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid config for the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(PlugwiseHADiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        this.logger.warn(\n+                \"Ignoring command = {} for channel = {} - this channel for the Plugwise Home Automation binding is read-only!\",\n+                command, channelUID);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+        if (this.controller != null) {\n+            this.controller.stop();\n+            this.controller = null;\n+        }\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_BRIDGE_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    // Getters & setters\n+\n+    public @Nullable PlugwiseHAController getController() {\n+        return this.controller;\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig() {\n+        if (this.config == null || !this.config.isValid()) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_CONFIGURATION_ERROR);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void scheduleRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob == null) {\n+                logger.debug(\"Scheduling refresh job every {}s\", config.getRefresh());\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::run, 0, config.getRefresh(), TimeUnit.SECONDS);\n+            }\n+        }\n+    }\n+\n+    private void run() {\n+        try {\n+            logger.trace(\"Executing refresh job\");\n+            refresh();\n+            updateStatus(ONLINE);\n+        } catch (PlugwiseHAInvalidHostException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+        } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+        } catch (PlugwiseHACommunicationException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+        } catch (PlugwiseHATimeoutException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_TIMEOUT);\n+        } catch (PlugwiseHAException e) {\n+            logger.debug(\"Unhandled exception while refreshing the Plugwise Home Automation Controller {} - {}\",\n+                    getThing().getUID(), e.getMessage());\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void refresh() throws PlugwiseHAException {\n+        if (this.getController() != null) {\n+            logger.debug(\"Refreshing the Plugwise Home Automation Controller {}\", getThing().getUID());\n+            this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+            PlugwiseHAController controller = this.getController();\n+            if (controller != null) {\n+                controller.refresh();\n+            }\n+\n+            getThing().getThings().forEach((thing) -> {\n+                ThingHandler thingHandler = thing.getHandler();\n+                if (thingHandler instanceof PlugwiseHABaseHandler) {\n+                    ((PlugwiseHABaseHandler<PlugwiseHAModel, PlugwiseHAThingConfig>) thingHandler).refresh();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void cancelRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob != null) {\n+                logger.debug(\"Cancelling refresh job\");\n+                this.refreshJob.cancel(true);\n+                this.refreshJob = null;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        // Only update bridge status if statusInfo has changed\n+        ThingStatusInfo statusInfo = ThingStatusInfoBuilder.create(status, statusDetail).withDescription(description)\n+                .build();\n+        if (!statusInfo.equals(getThing().getStatusInfo())) {\n+            if (status == ONLINE || (status == OFFLINE && statusDetail == COMMUNICATION_ERROR)) {\n+                scheduleRefreshJob();\n+            } else if (status == OFFLINE && statusDetail == CONFIGURATION_ERROR) {\n+                cancelRefreshJob();", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3NzE2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561277161", "bodyText": "I would assume the scheduled job is always started and keeps on running. So why is it needed to start it here?", "author": "Hilbrand", "createdAt": "2021-01-20T20:35:21Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    private @Nullable PlugwiseHABridgeThingConfig config;\n+    private @Nullable GatewayInfo gatewayInfo;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        // This method is also called whenever config changes\n+        cancelRefreshJob();\n+        this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig()) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, config.getHost(), config.getPort(),\n+                        config.getUsername(), config.getsmileId());\n+                this.controller.start(() -> {\n+                    setBridgeProperties();\n+                    updateStatus(ONLINE);\n+                });\n+            } catch (PlugwiseHAInvalidHostException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+            } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+            } catch (PlugwiseHACommunicationException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            } catch (PlugwiseHAException e) {\n+                logger.error(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid config for the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(PlugwiseHADiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        this.logger.warn(\n+                \"Ignoring command = {} for channel = {} - this channel for the Plugwise Home Automation binding is read-only!\",\n+                command, channelUID);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+        if (this.controller != null) {\n+            this.controller.stop();\n+            this.controller = null;\n+        }\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_BRIDGE_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    // Getters & setters\n+\n+    public @Nullable PlugwiseHAController getController() {\n+        return this.controller;\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig() {\n+        if (this.config == null || !this.config.isValid()) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_CONFIGURATION_ERROR);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void scheduleRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob == null) {\n+                logger.debug(\"Scheduling refresh job every {}s\", config.getRefresh());\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::run, 0, config.getRefresh(), TimeUnit.SECONDS);\n+            }\n+        }\n+    }\n+\n+    private void run() {\n+        try {\n+            logger.trace(\"Executing refresh job\");\n+            refresh();\n+            updateStatus(ONLINE);\n+        } catch (PlugwiseHAInvalidHostException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+        } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+        } catch (PlugwiseHACommunicationException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+        } catch (PlugwiseHATimeoutException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_TIMEOUT);\n+        } catch (PlugwiseHAException e) {\n+            logger.debug(\"Unhandled exception while refreshing the Plugwise Home Automation Controller {} - {}\",\n+                    getThing().getUID(), e.getMessage());\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void refresh() throws PlugwiseHAException {\n+        if (this.getController() != null) {\n+            logger.debug(\"Refreshing the Plugwise Home Automation Controller {}\", getThing().getUID());\n+            this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+            PlugwiseHAController controller = this.getController();\n+            if (controller != null) {\n+                controller.refresh();\n+            }\n+\n+            getThing().getThings().forEach((thing) -> {\n+                ThingHandler thingHandler = thing.getHandler();\n+                if (thingHandler instanceof PlugwiseHABaseHandler) {\n+                    ((PlugwiseHABaseHandler<PlugwiseHAModel, PlugwiseHAThingConfig>) thingHandler).refresh();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void cancelRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob != null) {\n+                logger.debug(\"Cancelling refresh job\");\n+                this.refreshJob.cancel(true);\n+                this.refreshJob = null;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        // Only update bridge status if statusInfo has changed\n+        ThingStatusInfo statusInfo = ThingStatusInfoBuilder.create(status, statusDetail).withDescription(description)\n+                .build();\n+        if (!statusInfo.equals(getThing().getStatusInfo())) {\n+            if (status == ONLINE || (status == OFFLINE && statusDetail == COMMUNICATION_ERROR)) {\n+                scheduleRefreshJob();", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3ODM0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561278348", "bodyText": "Given my comment I wonder if this override is really needed. It's general not done this why and makes it a bit more complex to understand when scheduling is started/stopped.", "author": "Hilbrand", "createdAt": "2021-01-20T20:36:17Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    private @Nullable PlugwiseHABridgeThingConfig config;\n+    private @Nullable GatewayInfo gatewayInfo;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        // This method is also called whenever config changes\n+        cancelRefreshJob();\n+        this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig()) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, config.getHost(), config.getPort(),\n+                        config.getUsername(), config.getsmileId());\n+                this.controller.start(() -> {\n+                    setBridgeProperties();\n+                    updateStatus(ONLINE);\n+                });\n+            } catch (PlugwiseHAInvalidHostException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+            } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+            } catch (PlugwiseHACommunicationException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            } catch (PlugwiseHAException e) {\n+                logger.error(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid config for the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(PlugwiseHADiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        this.logger.warn(\n+                \"Ignoring command = {} for channel = {} - this channel for the Plugwise Home Automation binding is read-only!\",\n+                command, channelUID);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+        if (this.controller != null) {\n+            this.controller.stop();\n+            this.controller = null;\n+        }\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_BRIDGE_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    // Getters & setters\n+\n+    public @Nullable PlugwiseHAController getController() {\n+        return this.controller;\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig() {\n+        if (this.config == null || !this.config.isValid()) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_CONFIGURATION_ERROR);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void scheduleRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob == null) {\n+                logger.debug(\"Scheduling refresh job every {}s\", config.getRefresh());\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::run, 0, config.getRefresh(), TimeUnit.SECONDS);\n+            }\n+        }\n+    }\n+\n+    private void run() {\n+        try {\n+            logger.trace(\"Executing refresh job\");\n+            refresh();\n+            updateStatus(ONLINE);\n+        } catch (PlugwiseHAInvalidHostException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+        } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+        } catch (PlugwiseHACommunicationException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+        } catch (PlugwiseHATimeoutException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_TIMEOUT);\n+        } catch (PlugwiseHAException e) {\n+            logger.debug(\"Unhandled exception while refreshing the Plugwise Home Automation Controller {} - {}\",\n+                    getThing().getUID(), e.getMessage());\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void refresh() throws PlugwiseHAException {\n+        if (this.getController() != null) {\n+            logger.debug(\"Refreshing the Plugwise Home Automation Controller {}\", getThing().getUID());\n+            this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+            PlugwiseHAController controller = this.getController();\n+            if (controller != null) {\n+                controller.refresh();\n+            }\n+\n+            getThing().getThings().forEach((thing) -> {\n+                ThingHandler thingHandler = thing.getHandler();\n+                if (thingHandler instanceof PlugwiseHABaseHandler) {\n+                    ((PlugwiseHABaseHandler<PlugwiseHAModel, PlugwiseHAThingConfig>) thingHandler).refresh();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void cancelRefreshJob() {\n+        synchronized (this) {\n+            if (this.refreshJob != null) {\n+                logger.debug(\"Cancelling refresh job\");\n+                this.refreshJob.cancel(true);\n+                this.refreshJob = null;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkwOTM2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r562909367", "bodyText": "The previous dev added a comment: Only update bridge status if statusInfo has changed\nI guess that if that check is mandatory it is handled by the framework? So in that case, yes i'll remove the override.", "author": "lsiepel", "createdAt": "2021-01-22T21:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3ODM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwMjM0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563202348", "bodyText": "openHAB has a ThingStatusInfoEvent which is triggered when the status is updated. And it has a ThingStatusInfoChangedEvent when the status changes. By only updating when status is changed it effectively eliminates the use case of the ThingStatusInfoEvent. So it should not block updating when only changing.", "author": "Hilbrand", "createdAt": "2021-01-23T21:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3ODM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM1MTA1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563351053", "bodyText": "Thanks for the explanation. Really starting to learn more about the framework here :-)", "author": "lsiepel", "createdAt": "2021-01-24T21:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3ODM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI4NTE2MA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561285160", "bodyText": "Because status is already set. This message should be a debug log.", "author": "Hilbrand", "createdAt": "2021-01-20T20:41:37Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    // Private Static error messages\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    // private @Nullable C config;\n+\n+    protected final Logger logger = LoggerFactory.getLogger(PlugwiseHABaseHandler.class);\n+\n+    private Class<?> clazz;\n+\n+    // Constructor\n+\n+    public PlugwiseHABaseHandler(Thing thing) {\n+        super(thing);\n+        clazz = (Class<?>) (((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[1]);\n+    }\n+\n+    // Abstract methods\n+\n+    protected abstract void initialize(C config);\n+\n+    protected abstract @Nullable E getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException;\n+\n+    protected abstract void refreshChannel(E entity, ChannelUID channelUID);\n+\n+    protected abstract void handleCommand(E entity, ChannelUID channelUID, Command command) throws PlugwiseHAException;\n+\n+    // Overrides\n+\n+    @Override\n+    public void initialize() {\n+        C config = getPlugwiseThingConfig();\n+\n+        if (checkConfig(config)) {\n+            // logger.debug(\"Initializing Plugwise Home Automation thing handler with config = {}\", config);\n+\n+            Bridge bridge = getBridge();\n+            if (bridge == null || bridge.getHandler() == null\n+                    || !(bridge.getHandler() instanceof PlugwiseHABridgeHandler)) {\n+                updateStatus(OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"You must choose a Plugwise Home Automation bridge for this thing.\");\n+                return;\n+            }\n+\n+            if (bridge.getStatus() == OFFLINE) {\n+                updateStatus(OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                        \"The Plugwise Home Automation bridge is currently offline.\");\n+            }\n+\n+            initialize(config);\n+        } else {\n+            logger.warn(\"Invalid config for Plugwise Home Automation thing handler with config = {}\", config);", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI4ODU4NA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r561288584", "bodyText": "You might want to look into the default behavior of bridgeStatusChanged` in this class and what that means for the status of the thing here,", "author": "Hilbrand", "createdAt": "2021-01-20T20:44:21Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    // Private Static error messages\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    // private @Nullable C config;\n+\n+    protected final Logger logger = LoggerFactory.getLogger(PlugwiseHABaseHandler.class);\n+\n+    private Class<?> clazz;\n+\n+    // Constructor\n+\n+    public PlugwiseHABaseHandler(Thing thing) {\n+        super(thing);\n+        clazz = (Class<?>) (((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[1]);\n+    }\n+\n+    // Abstract methods\n+\n+    protected abstract void initialize(C config);\n+\n+    protected abstract @Nullable E getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException;\n+\n+    protected abstract void refreshChannel(E entity, ChannelUID channelUID);\n+\n+    protected abstract void handleCommand(E entity, ChannelUID channelUID, Command command) throws PlugwiseHAException;\n+\n+    // Overrides\n+\n+    @Override\n+    public void initialize() {\n+        C config = getPlugwiseThingConfig();\n+\n+        if (checkConfig(config)) {\n+            // logger.debug(\"Initializing Plugwise Home Automation thing handler with config = {}\", config);\n+\n+            Bridge bridge = getBridge();\n+            if (bridge == null || bridge.getHandler() == null\n+                    || !(bridge.getHandler() instanceof PlugwiseHABridgeHandler)) {\n+                updateStatus(OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"You must choose a Plugwise Home Automation bridge for this thing.\");\n+                return;\n+            }\n+\n+            if (bridge.getStatus() == OFFLINE) {\n+                updateStatus(OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                        \"The Plugwise Home Automation bridge is currently offline.\");\n+            }\n+\n+            initialize(config);\n+        } else {\n+            logger.warn(\"Invalid config for Plugwise Home Automation thing handler with config = {}\", config);\n+        }\n+    }\n+\n+    @Override\n+    public final void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Handling command = {} for channel = {}\", command, channelUID);\n+\n+        if (getThing().getStatus() == ONLINE) {\n+            PlugwiseHAController controller = getController();\n+            if (controller != null) {\n+                try {\n+                    E entity = getEntity(controller, false);\n+                    if (entity != null) {\n+                        if (this.isLinked(channelUID)) {\n+                            if (command instanceof RefreshType) {\n+                                refreshChannel(entity, channelUID);\n+                            } else {\n+                                handleCommand(entity, channelUID, command);\n+                            }\n+                        }\n+                    }\n+                } catch (PlugwiseHAException e) {\n+                    logger.warn(\"Unexpected error handling command = {} for channel = {} : {}\", command, channelUID,\n+                            e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    // Public member methods\n+\n+    public @Nullable PlugwiseHABridgeHandler getPlugwiseHABridge() {\n+        Bridge bridge = this.getBridge();\n+        if (bridge != null) {\n+            return (PlugwiseHABridgeHandler) bridge.getHandler();\n+        }\n+\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public C getPlugwiseThingConfig() {\n+        return (C) getConfigAs(clazz);\n+    }\n+\n+    // Private & protected methods\n+\n+    private final @Nullable PlugwiseHAController getController() {\n+        Bridge bridge = getBridge();\n+\n+        if (bridge != null) {\n+            if (bridge.getHandler() instanceof PlugwiseHABridgeHandler) {\n+                PlugwiseHABridgeHandler handler = (PlugwiseHABridgeHandler) bridge.getHandler();\n+                return handler.getController();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig(C config) {\n+        if (config == null || !config.isValid()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Configuration is missing or corrupted\");\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    protected final void refresh() {\n+        if (getThing().getStatus() == ONLINE) {", "originalCommit": "ceba92b000d999ae46b3660679b028e2517972f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE5MTUyMw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563191523", "bodyText": "Not sure what you mean. Could you give some more hints?", "author": "lsiepel", "createdAt": "2021-01-23T19:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI4ODU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwNDc4NA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563204784", "bodyText": "Yes this is a bit vague \ud83d\ude04 . What I meant, if I read it correctly, is that if the bridge is offline the bridge will set the childhandlers offline. However when offline you still might want to set the channels to something like undef. Because otherwise the channels will keep showing the last value, and than the user might not see somethings is not right by just looking at the values.  Also it can be helpful to set a thing offline when there is a except. But than if there is new data and it's all ok again the thing has to be set online again.", "author": "Hilbrand", "createdAt": "2021-01-23T22:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI4ODU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM5NjQ2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563396465", "bodyText": "If bindings should set all channels to UnDefType.UNDEF when the bridge goes offline, shouldn't that be the default behavior of bridgeStatusChanged?", "author": "lsiepel", "createdAt": "2021-01-24T22:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI4ODU4NA=="}], "type": "inlineReview"}, {"oid": "164a3d0d13db568a425409055196ada882b2bea6", "url": "https://github.com/openhab/openhab-addons/commit/164a3d0d13db568a425409055196ada882b2bea6", "message": "Fix license\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-01-22T21:45:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwMjkwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563202902", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, T> map = new HashMap<String, T>();\n          \n          \n            \n                private final Map<String, T> map = new HashMap<>();", "author": "Hilbrand", "createdAt": "2021-01-23T21:42:01Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/DTO/PlugwiseHACollection.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.api.model.dto;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * @author B. van Wetten - Initial contribution\n+ */\n+public abstract class PlugwiseHACollection<T> implements Map<String, T> {\n+\n+    private final Map<String, T> map = new HashMap<String, T>();", "originalCommit": "3d9b59e5669bdb7aa41b1621d1bc4f778334fd91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwNDg0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563204846", "bodyText": "If you return here the initialize method below will never be called when the bridge goes online.", "author": "Hilbrand", "createdAt": "2021-01-23T22:02:34Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    protected final Logger logger = LoggerFactory.getLogger(PlugwiseHABaseHandler.class);\n+\n+    private Class<?> clazz;\n+\n+    // Constructor\n+\n+    public PlugwiseHABaseHandler(Thing thing) {\n+        super(thing);\n+        clazz = (Class<?>) (((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[1]);\n+    }\n+\n+    // Abstract methods\n+\n+    /**\n+     * Initializes the Plugwise Entity that this class handles.\n+     *\n+     * @param config the thing configuration\n+     * @param bridge the bridge that this thing is part of\n+     */\n+    protected abstract void initialize(C config, PlugwiseHABridgeHandler bridge);\n+\n+    /**\n+     * Get the Plugwise Entity that this class handles.\n+     *\n+     * @param controller the controller for this ThingHandler\n+     * @param forceRefresh indicated if the entity should be refreshed from the Plugwise API\n+     */\n+    protected abstract @Nullable E getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException;\n+\n+    /**\n+     * Handles a {@link RefreshType} command for a given channel.\n+     *\n+     * @param entity the Plugwise Entity\n+     * @param channelUID the channel uid the command is for\n+     */\n+    protected abstract void refreshChannel(E entity, ChannelUID channelUID);\n+\n+    /**\n+     * Handles a command for a given channel.\n+     * \n+     * @param entity the Plugwise Entity\n+     * @param channelUID the channel uid the command is for\n+     * @param command the command\n+     */\n+    protected abstract void handleCommand(E entity, ChannelUID channelUID, Command command) throws PlugwiseHAException;\n+\n+    // Overrides\n+\n+    @Override\n+    public void initialize() {\n+        C config = getPlugwiseThingConfig();\n+\n+        if (checkConfig(config)) {\n+            Bridge bridge = getBridge();\n+            if (bridge == null || bridge.getHandler() == null\n+                    || !(bridge.getHandler() instanceof PlugwiseHABridgeHandler)) {\n+                updateStatus(OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"You must choose a Plugwise Home Automation bridge for this thing.\");\n+                return;\n+            }\n+\n+            if (bridge.getStatus() == OFFLINE) {\n+                updateStatus(OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                        \"The Plugwise Home Automation bridge is currently offline.\");\n+                return;\n+            }", "originalCommit": "3d9b59e5669bdb7aa41b1621d1bc4f778334fd91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwNDk5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r563204992", "bodyText": "If you're making calls to external services in initialize you should schedule the method because initialize is expected to finish fast. And external services might block for some time.", "author": "Hilbrand", "createdAt": "2021-01-23T22:04:42Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+\n+    private @Nullable PlugwiseHABridgeThingConfig config;\n+    private @Nullable GatewayInfo gatewayInfo;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        this.config = getConfig().as(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig()) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", this.config);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, config.getHost(), config.getPort(),\n+                        config.getUsername(), config.getsmileId());\n+                this.controller.start(() -> {\n+                    setBridgeProperties();", "originalCommit": "3d9b59e5669bdb7aa41b1621d1bc4f778334fd91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "url": "https://github.com/openhab/openhab-addons/commit/492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "message": "Improve comparison logic\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-02-10T11:21:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5MTI4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624491286", "bodyText": "You could add a word, what's the difference to the plugwise binding.", "author": "fwolter", "createdAt": "2021-05-01T10:42:24Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,215 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). \n+This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. \n+The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. \n+The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. \n+The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY0OTIzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624649235", "bodyText": "When you look at both bindings, the first two lines show the difference. I don't see other bindings (with similar name) that explicitly tell the user the binding differences.", "author": "lsiepel", "createdAt": "2021-05-02T07:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5MTI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5MTM0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624491342", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve      |\n          \n          \n            \n            | [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specifically used for floor heating                                       | appliance_valve      |", "author": "fwolter", "createdAt": "2021-05-01T10:43:00Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,215 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). \n+This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. \n+The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. \n+The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. \n+The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.\n+\n+## Supported Things\n+\n+| Device Type                                              | Description                                                                                                        | Thing Type           |\n+|----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|----------------------|\n+| -                                                        | A Plugwise heating zone configured with at least 1 of the devices below                                            | zone                 |\n+| [Adam](https://www.plugwise.com/en_US/products/adam-ha)  | The Plugwise Home Automation Bridge is needed to connect to the Adam boiler gateway                                | gateway              |\n+| [Tom](https://www.plugwise.com/en_US/products/tom)       | A Plugwise Home Automation radiator valve                                                                          | appliance_valve      |\n+| [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve      |", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5MTQxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624491415", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The device id's can be found be enabling TRACE logging in the Karaf console.\n          \n          \n            \n            The device IDs can be found be enabling TRACE logging in the Karaf console.", "author": "fwolter", "createdAt": "2021-05-01T10:43:36Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,215 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). \n+This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. \n+The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. \n+The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. \n+The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.\n+\n+## Supported Things\n+\n+| Device Type                                              | Description                                                                                                        | Thing Type           |\n+|----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|----------------------|\n+| -                                                        | A Plugwise heating zone configured with at least 1 of the devices below                                            | zone                 |\n+| [Adam](https://www.plugwise.com/en_US/products/adam-ha)  | The Plugwise Home Automation Bridge is needed to connect to the Adam boiler gateway                                | gateway              |\n+| [Tom](https://www.plugwise.com/en_US/products/tom)       | A Plugwise Home Automation radiator valve                                                                          | appliance_valve      |\n+| [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve      |\n+| [Circle](https://www.plugwise.com/en_US/products/circle) | A power outlet plug that provides energy measurement and switching control of appliances (e.g. floor heating pump) | appliance_pump       |\n+| [Lisa](https://www.plugwise.com/en_US/products/lisa)     | A room thermostat (also supports the 'Anna' room thermostat)                                                       | appliance_thermostat |\n+| [Boiler]                                                 | A central boiler used for heating and/or domestic hot water                                                        | appliance_boiler     |\n+\n+\n+\n+## Discovery\n+\n+After setting up the Plugwise Home Automation bridge you can start a manual scan to find all devices registered on the gateway. \n+You can also manually add things by entering the corresponding device id as a configuration parameter. \n+The device id's can be found be enabling TRACE logging in the Karaf console.", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5MTY0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624491648", "bodyText": "You could remove the redundant parts to make the documentation more concise.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | temperature          | Number:Temperature | Yes        | This channel is used to read the temperature of an appliance that supports the thermostat functionality                                                                                                                      |\n          \n          \n            \n            | temperature          | Number:Temperature | Yes        | The temperature of an appliance that supports the thermostat functionality                                                                                                                      |", "author": "fwolter", "createdAt": "2021-05-01T10:46:06Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,215 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). \n+This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. \n+The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. \n+The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. \n+The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.\n+\n+## Supported Things\n+\n+| Device Type                                              | Description                                                                                                        | Thing Type           |\n+|----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|----------------------|\n+| -                                                        | A Plugwise heating zone configured with at least 1 of the devices below                                            | zone                 |\n+| [Adam](https://www.plugwise.com/en_US/products/adam-ha)  | The Plugwise Home Automation Bridge is needed to connect to the Adam boiler gateway                                | gateway              |\n+| [Tom](https://www.plugwise.com/en_US/products/tom)       | A Plugwise Home Automation radiator valve                                                                          | appliance_valve      |\n+| [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve      |\n+| [Circle](https://www.plugwise.com/en_US/products/circle) | A power outlet plug that provides energy measurement and switching control of appliances (e.g. floor heating pump) | appliance_pump       |\n+| [Lisa](https://www.plugwise.com/en_US/products/lisa)     | A room thermostat (also supports the 'Anna' room thermostat)                                                       | appliance_thermostat |\n+| [Boiler]                                                 | A central boiler used for heating and/or domestic hot water                                                        | appliance_boiler     |\n+\n+\n+\n+## Discovery\n+\n+After setting up the Plugwise Home Automation bridge you can start a manual scan to find all devices registered on the gateway. \n+You can also manually add things by entering the corresponding device id as a configuration parameter. \n+The device id's can be found be enabling TRACE logging in the Karaf console.\n+\n+## Thing Configuration\n+\n+You must define a Plugwise Home Automation gateway (Bridge) before defining zones or appliances (Things) for this binding to work.\n+\n+#### Plugwise Home Automation gateway (Bridge):\n+\n+| Parameter | Description                                                             | Config   | Default |\n+| --------- | ----------------------------------------------------------------------- | -------- | ------- |\n+| host      | The IP address or hostname of the Adam HA gateway                       | Required | 'adam'  |\n+| username  | The username for the Adam HA gateway                                    | Optional | 'smile' |\n+| smileID   | The 8 letter code on the sticker on the back of the Adam boiler gateway | Required | -       |\n+| refresh   | The refresh interval in seconds                                         | Optional | 15      |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description               | Config   | Default |\n+| --------- | ------------------------- | -------- | ------- |\n+| id        | The unique ID of the zone | Required | -       |\n+\n+#### Plugwise Home Automation appliance (`appliance_valve`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the radiator valve appliance                                                                      | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+#### Plugwise Home Automation appliance (`appliance_thermostat`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the room thermostat appliance                                                                     | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+\n+#### Plugwise Home Automation appliance (`appliance_pump`):\n+\n+| Parameter | Description                         | Config   | Default |\n+| --------- | ----------------------------------- | -------- | ------- |\n+| id        | The unique ID of the pump appliance | Required | -       |\n+\n+#### Plugwise Home Automation boiler (`appliance_boiler`):\n+\n+| Parameter | Description                 | Config   | Default |\n+| --------- | --------------------------- | -------- | ------- |\n+| id        | The unique ID of the boiler | Required | -       |\n+\n+## Channels\n+\n+| channel              | type               | Read-only? | description                                                                                                                                                                                                                  |\n+|----------------------|--------------------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| temperature          | Number:Temperature | Yes        | This channel is used to read the temperature of an appliance that supports the thermostat functionality                                                                                                                      |", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDU2MDYyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624560629", "bodyText": "Fixed", "author": "lsiepel", "createdAt": "2021-05-01T20:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5MTY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NDM4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624494387", "bodyText": "The indentation is done by spaces and and tabs in different lines. Better use the same type.", "author": "fwolter", "createdAt": "2021-05-01T11:10:29Z", "path": "bundles/org.openhab.binding.plugwiseha/README.md", "diffHunk": "@@ -0,0 +1,215 @@\n+# PlugwiseHA Binding\n+\n+The Plugwise Home Automation binding adds support to openHAB for the [Plugwise Home Automation ecosystem](https://www.plugwise.com/en_US/adam_zone_control). \n+This system is built around a gateway from Plugwise called the 'Adam' which incorporates a ZigBee controller to manage thermostatic radiator valves, room thermostats, floor heating pumps, et cetera.\n+\n+Users can manage and control this system either via a web app or a mobile phone app developed by Plugwise. \n+The (web) app allows users to define heating zone's (e.g. rooms) and add radiator valves to those rooms to manage and control their heating irrespective of other rooms.\n+\n+Using the Plugwise Home Automation binding you can incorporate the management of these devices and heating zones into openHAB. \n+The binding uses the same RESTfull API that both the mobile phone app and the web app use.\n+\n+The binding requires users to have a working Plugwise Home Automation setup consisting of at least 1 gateway device (the 'Adam') and preferably 1 radiator valve as a bare minimum. \n+The 'Adam' (from hereon called the gateway) needs to be accessible from the openHAB instance via a TCP/IP connection.\n+\n+## Supported Things\n+\n+| Device Type                                              | Description                                                                                                        | Thing Type           |\n+|----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|----------------------|\n+| -                                                        | A Plugwise heating zone configured with at least 1 of the devices below                                            | zone                 |\n+| [Adam](https://www.plugwise.com/en_US/products/adam-ha)  | The Plugwise Home Automation Bridge is needed to connect to the Adam boiler gateway                                | gateway              |\n+| [Tom](https://www.plugwise.com/en_US/products/tom)       | A Plugwise Home Automation radiator valve                                                                          | appliance_valve      |\n+| [Floor](https://www.plugwise.com/en_US/products/floor)   | A Plugwise Home Automation radiator valve specificaly used for floor heating                                       | appliance_valve      |\n+| [Circle](https://www.plugwise.com/en_US/products/circle) | A power outlet plug that provides energy measurement and switching control of appliances (e.g. floor heating pump) | appliance_pump       |\n+| [Lisa](https://www.plugwise.com/en_US/products/lisa)     | A room thermostat (also supports the 'Anna' room thermostat)                                                       | appliance_thermostat |\n+| [Boiler]                                                 | A central boiler used for heating and/or domestic hot water                                                        | appliance_boiler     |\n+\n+\n+\n+## Discovery\n+\n+After setting up the Plugwise Home Automation bridge you can start a manual scan to find all devices registered on the gateway. \n+You can also manually add things by entering the corresponding device id as a configuration parameter. \n+The device id's can be found be enabling TRACE logging in the Karaf console.\n+\n+## Thing Configuration\n+\n+You must define a Plugwise Home Automation gateway (Bridge) before defining zones or appliances (Things) for this binding to work.\n+\n+#### Plugwise Home Automation gateway (Bridge):\n+\n+| Parameter | Description                                                             | Config   | Default |\n+| --------- | ----------------------------------------------------------------------- | -------- | ------- |\n+| host      | The IP address or hostname of the Adam HA gateway                       | Required | 'adam'  |\n+| username  | The username for the Adam HA gateway                                    | Optional | 'smile' |\n+| smileID   | The 8 letter code on the sticker on the back of the Adam boiler gateway | Required | -       |\n+| refresh   | The refresh interval in seconds                                         | Optional | 15      |\n+\n+#### Plugwise Home Automation zone (`zone`):\n+\n+| Parameter | Description               | Config   | Default |\n+| --------- | ------------------------- | -------- | ------- |\n+| id        | The unique ID of the zone | Required | -       |\n+\n+#### Plugwise Home Automation appliance (`appliance_valve`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the radiator valve appliance                                                                      | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+#### Plugwise Home Automation appliance (`appliance_thermostat`):\n+\n+| Parameter            | Description                                                                                                        | Config   | Default |\n+| -------------------- | ------------------------------------------------------------------------------------------------------------------ | -------- | ------- |\n+| id                   | The unique ID of the room thermostat appliance                                                                     | Required | -       |\n+| lowBatteryPercentage | Battery charge remaining at which to trigger battery low warning. (*Only applicable for battery operated devices*) | Optional | 15      |\n+\n+\n+#### Plugwise Home Automation appliance (`appliance_pump`):\n+\n+| Parameter | Description                         | Config   | Default |\n+| --------- | ----------------------------------- | -------- | ------- |\n+| id        | The unique ID of the pump appliance | Required | -       |\n+\n+#### Plugwise Home Automation boiler (`appliance_boiler`):\n+\n+| Parameter | Description                 | Config   | Default |\n+| --------- | --------------------------- | -------- | ------- |\n+| id        | The unique ID of the boiler | Required | -       |\n+\n+## Channels\n+\n+| channel              | type               | Read-only? | description                                                                                                                                                                                                                  |\n+|----------------------|--------------------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| temperature          | Number:Temperature | Yes        | This channel is used to read the temperature of an appliance that supports the thermostat functionality                                                                                                                      |\n+| setpointTemperature  | Number:Temperature | No         | This channel is used to read or write the setpoint temperature of an appliance that supports the thermostat functionality                                                                                                    |\n+| power                | Switch             | No         | This channel is used to toggle an appliance ON/OFF that supports the relay functionality                                                                                                                                     |\n+| lock                 | Switch             | No         | This channel is used to toggle an appliance lock ON/OFF that supports the relay functionality.(*When the lock is ON the gateway will not automatically control the corresponding relay switch depending on thermostat mode*) |\n+| powerUsage           | Number:Power       | Yes        | This channel is used to read the current power usage in Watts of an appliance that supports this                                                                                                                             |\n+| batteryLevel         | Number             | Yes        | This channel is used to read the current battery level of an appliance that is battery operated                                                                                                                              |\n+| batteryLevelLow      | Switch             | Yes        | This channel will switch ON when the battery level of an appliance that is battery operated drops below a certain threshold                                                                                                  |\n+| chState              | Switch             | Yes        | This channel is used to read the current central heating state of the boiler                                                                                                                                                 |\n+| dhwState             | Switch             | Yes        | This channel is used to read the current domestic hot water state of the boiler                                                                                                                                              |\n+| waterPressure        | Number:Pressure    | Yes        | This channel is used to read the current water pressure of the boiler                                                                                                                                                        |\n+| presetScene          | String             | Yes        | This channel is used to read the current active scene for the zone                                                                                                                                                           |\n+| valvePosition        | Number             | Yes        | This channel is used to read the current position of the valve                                                                                                                                                               |\n+| preHeat              | Switch             | Yes        | This channel is used to toggle the pre heating of a zone ON/OFF                                                                                                                                                              |\n+| coolingState         | Switch             | Yes        | This channel is used to read the current cooling state of the boiler                                                                                                                                                         |\n+| intendedBoilerTemp   | Number:Temperature | Yes        | This channel is used to read the intended boiler temperature                                                                                                                                                                 |\n+| flameState           | Switch             | Yes        | This channel is used to read the flame state of the boiler                                                                                                                                                                   |\n+| intendedHeatingState | Switch             | Yes        | This channel is used to read the intended heating state of the boiler                                                                                                                                                        |\n+| modulationLevel      | Number             | Yes        | This channel is used to read the current modulation level of the boiler                                                                                                                                                      |\n+| otAppFaultCode       | Number             | Yes        | This channel is used to read the Opentherm application fault code of the boiler                                                                                                                                              |\n+| dhwTemperature       | Number:Temperature | Yes        | This channel is used to read the current central heating state of the boiler                                                                                                                                                 |\n+| otOEMFaultCode       | Number             | Yes        | This channel is used to read the Opentherm OEM fault code of the boiler                                                                                                                                                      |\n+| boilerTemperature    | Number:Temperature | Yes        | This channel is used to read the current temperature of the boiler                                                                                                                                                           |\n+| dhwSetpoint          | Number:Temperature | Yes        | This channel is used to read the domestic hot water setpoint                                                                                                                                                                 |\n+| maxBoilerTemperature | Number:Temperature | Yes        | This channel is used to read the maximum temperature of the boiler                                                                                                                                                           |\n+| dhwComfortMode       | Switch             | Yes        | This channel is used to read the domestic hot water confortmode                                                                                                                                                              |\n+\n+\n+\n+## Full Example\n+\n+**things/plugwiseha.things**\n+\n+```\n+Bridge plugwiseha:gateway:home \"Plugwise Home Automation Gateway\" [ smileId=\"abcdefgh\" ] {\n+    Thing zone living_room_zone \"Living room\" [ id=\"$device_id\" ]\n+    Thing appliance_valve living_room_radiator \"Living room radiator valve\" [ id=\"$device_id\" ]\n+    Thing appliance_thermostat living_room_thermostat \"Living room thermostat\" [ id=\"$device_id\" ]\n+    Thing appliance_pump living_room_pump \"Floor heating pump\" [ id=\"$device_id\" ]\n+    Thing appliance_boiler main_boiler \"Main boiler\" [ id=\"$device_id\" ]\n+}\n+```\n+\n+Replace `$device_id` accordingly.\n+\n+**items/plugwiseha.items**\n+\n+```\n+Number:Temperature living_room_zone_temperature \"Zone temperature\" {channel=\"plugwiseha:zone:home:living_room_zone:temperature\"}\n+Number:Temperature living_room_zone_temperature_setpoint \"Zone temperature setpoint\" {channel=\"plugwiseha:zone:home:living_room_zone:setpointTemperature\"}\n+Number:Temperature living_room_zone_preset_scene \"Zone preset scene\" {channel=\"plugwiseha:zone:home:living_room_zone:presetScene\"}\n+Switch living_room_zone_preheat \"Zone preheat enabled\" {channel=\"plugwiseha:zone:home:living_room_zone:preHeat\"}\n+\n+Number:Temperature living_room_radiator_temperature \"Radiator valve temperature\" {channel=\"plugwiseha:appliance_valve:home:living_room_radiator:temperature\"}\n+Number:Temperature living_room_radiator_temperature_setpoint \"Radiator valve temperature setpoint\" {channel=\"plugwiseha:appliance_valve:home:living_room_radiator:setpointTemperature\"}\n+Number living_room_radiator_valve_position \"Radiator valve position\" {channel=\"plugwiseha:appliance_valve:home:living_room_radiator:valvePosition\"}\n+\n+Number:Temperature living_room_thermostat_temperature \"Room thermostat temperature\" {channel=\"plugwiseha:appliance_valve:home:living_room_thermostat:temperature\"}\n+Number:Temperature living_room_thermostat_temperature_setpoint \"Room thermostat temperature setpoint\" {channel=\"plugwiseha:appliance_valve:home:living_room_thermostat:setpointTemperature\"}\n+Number:Temperature living_room_thermostat_temperature_offset \"Room thermostat temperature offset\" {channel=\"plugwiseha:appliance_valve:home:living_room_thermostat:offsetTemperature\"}\n+\n+Switch living_room_pump_power \"Floor heating pump power\" {channel=\"plugwiseha:appliance_pump:home:living_room_pump:power\"}\n+Switch living_room_pump_lock \"Floor heating pump lock [MAP:(plugwiseha.map):%s]\" {channel=\"plugwiseha:appliance_pump:home:living_room_pump:lock\"}\n+Number:Power living_room_pump_power_usage \"Floor heating pump power [%0.2fW]\" {channel=\"plugwiseha:appliance_pump:home:living_room_pump:powerUsage\"}\n+\n+Number:Pressure\tmain_boiler_waterpressure \"Waterpressure\" { channel=\"plugwiseha:appliance_boiler:home:main_boiler:waterPressure\"}\n+Switch\tmain_boiler_chState \"Heating active\" { channel=\"plugwiseha:appliance_boiler:home:main_boiler:chActive\"}\n+Switch\tmain_boiler_dhwState \"Domestic hot water active\" { channel=\"plugwiseha:appliance_boiler:home:main_boiler:dhwActive\"}\n+\n+Switch main_boiler_coolingState \"Cooling state\" { channel=\"plugwiseha:appliance_boiler:home:main_boiler:coolingState\"}\n+Number:Temperature main_boiler_intendedBoilerTemp \"Intended boiler temperature\" {channel=\"plugwiseha:appliance_boiler:home:living_room_thermostat:intendedBoilerTemp\"}\n+Switch main_boiler_flameState \"Flame state\" { channel=\"plugwiseha:appliance_boiler:home:main_boiler:flameState\"}\n+Switch main_boiler_intendedHeatingState \"Intended heating state\" { channel=\"plugwiseha:appliance_boiler:home:main_boiler:intendedHeatingState\"}\n+Number main_boiler_modulationLevel \"Modulation level\" {channel=\"plugwiseha:appliance_boiler:home:living_room_radiator:modulationLevel\"}\n+Number main_boiler_otAppFaultCode \"Opentherm app. faultcode\" {channel=\"plugwiseha:appliance_boiler:home:living_room_radiator:otAppFaultCode\"}\n+Number:Temperature main_boiler_dhwTemperature \"DHW temperature\" {channel=\"plugwiseha:appliance_boiler:home:living_room_thermostat:dhwTemperature\"}\n+Number main_boiler_otOEMFaultCode \"Opentherm OEM faultcode\" {channel=\"plugwiseha:appliance_boiler:home:living_room_radiator:otOEMFaultCode\"}\n+Number:Temperature main_boiler_boilerTemperature \"Boiler temperature\" {channel=\"plugwiseha:appliance_boiler:home:living_room_thermostat:boilerTemperature\"}\n+Number:Temperature main_boiler_dhwSetpoint \"DHW setpoint\" {channel=\"plugwiseha:appliance_boiler:home:living_room_thermostat:dhwSetpoint\"}\n+Number:Temperature main_boiler_maxBoilerTemperature \"Max. boiler temperature\" {channel=\"plugwiseha:appliance_boiler:home:living_room_thermostat:maxBoilerTemperature\"}\n+Switch main_boiler_dhwComfortMode \"DHW comfort mode\" { channel=\"plugwiseha:appliance_boiler:home:main_boiler:dhwComfortMode\"}\n+```\n+\n+**transform/plugwiseha.map**\n+\n+```\n+ON=Locked\n+OFF=Unlocked\n+```\n+\n+**sitemaps/plugwiseha.sitemap**\n+\n+```\n+sitemap plugwiseha label=\"PlugwiseHA Binding\"\n+{\n+\tFrame {\n+        Text item=living_room_zone_temperature\n+        Setpoint item=living_room_zone_temperature_setpoint label=\"Living room [%.1f \u00b0C]\" minValue=5.0 maxValue=25 step=0.5\n+\t\tText item=living_room_zone_presetScene\n+\t\tSwitch item=living_room_zone_preheat\n+\n+\t\tText item=living_room_radiator_temperature\n+        Setpoint item=living_room_radiator_temperature_setpoint label=\"Living room [%.1f \u00b0C]\" minValue=5.0 maxValue=25 step=0.5", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDU2MTAwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624561005", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-01T20:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NDM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NTEyMw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624495123", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_INTERFACE_TYPES_UIDS_EMPTY = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.<ThingTypeUID> empty().collect(Collectors.toSet()));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_INTERFACE_TYPES_UIDS_EMPTY = Set.of();", "author": "fwolter", "createdAt": "2021-05-01T11:17:00Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/PlugwiseHABindingConstants.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+\n+/**\n+ * The {@link PlugwiseHABindingConstants} class defines common constants, which\n+ * are used across the whole binding.\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHABindingConstants {\n+\n+    public static final String BINDING_ID = \"plugwiseha\";\n+\n+    // List of PlugwiseHA services, related urls, information\n+\n+    public static final String PLUGWISEHA_API_URL = \"http://%s\";\n+    public static final String PLUGWISEHA_API_APPLIANCES_URL = PLUGWISEHA_API_URL + \"/core/appliances\";\n+    public static final String PLUGWISEHA_API_APPLIANCE_URL = PLUGWISEHA_API_URL + \"/core/appliances;id=%s\";\n+    public static final String PLUGWISEHA_API_LOCATIONS_URL = PLUGWISEHA_API_URL + \"/core/locations\";\n+    public static final String PLUGWISEHA_API_LOCATION_URL = PLUGWISEHA_API_URL + \"/core/locations;id=%s\";\n+\n+    // Bridge\n+    public static final ThingTypeUID THING_TYPE_GATEWAY = new ThingTypeUID(BINDING_ID, \"gateway\");\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_ZONE = new ThingTypeUID(BINDING_ID, \"zone\");\n+    public static final ThingTypeUID THING_TYPE_APPLIANCE_VALVE = new ThingTypeUID(BINDING_ID, \"appliance_valve\");\n+    public static final ThingTypeUID THING_TYPE_APPLIANCE_PUMP = new ThingTypeUID(BINDING_ID, \"appliance_pump\");\n+    public static final ThingTypeUID THING_TYPE_APPLIANCE_THERMOSTAT = new ThingTypeUID(BINDING_ID,\n+            \"appliance_thermostat\");\n+    public static final ThingTypeUID THING_TYPE_APPLIANCE_BOILER = new ThingTypeUID(BINDING_ID, \"appliance_boiler\");\n+\n+    // List of channel Type UIDs\n+    public static final ChannelTypeUID CHANNEL_TYPE_BATTERYLEVEL = new ChannelTypeUID(\"system:battery-level\");\n+    public static final ChannelTypeUID CHANNEL_TYPE_BATTERYLEVELLOW = new ChannelTypeUID(\"system:low-battery\");\n+\n+    // Empty set\n+    public static final Set<ThingTypeUID> SUPPORTED_INTERFACE_TYPES_UIDS_EMPTY = Collections\n+            .unmodifiableSet(Stream.<ThingTypeUID> empty().collect(Collectors.toSet()));", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY1MTY1MA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624651650", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-02T08:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NTEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NTI2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624495266", "bodyText": "Syntactical sugar. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<String> KNOWN_APPLIANCE_TYPES = Stream.of(APPLIANCE_TYPE_THERMOSTAT, APPLIANCE_TYPE_GATEWAY,\n          \n          \n            \n                        APPLIANCE_TYPE_CENTRALHEATINGPUMP, APPLIANCE_TYPE_OPENTHERMGATEWAY, APPLIANCE_TYPE_ZONETHERMOSTAT,\n          \n          \n            \n                        APPLIANCE_TYPE_HEATERCENTRAL, APPLIANCE_TYPE_THERMOSTATICRADIATORVALUE).collect(Collectors.toSet());\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_ZONE,\n          \n          \n            \n                        THING_TYPE_APPLIANCE_VALVE, THING_TYPE_APPLIANCE_PUMP, THING_TYPE_APPLIANCE_BOILER);", "author": "fwolter", "createdAt": "2021-05-01T11:18:18Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/PlugwiseHABindingConstants.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+\n+/**\n+ * The {@link PlugwiseHABindingConstants} class defines common constants, which\n+ * are used across the whole binding.\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHABindingConstants {\n+\n+    public static final String BINDING_ID = \"plugwiseha\";\n+\n+    // List of PlugwiseHA services, related urls, information\n+\n+    public static final String PLUGWISEHA_API_URL = \"http://%s\";\n+    public static final String PLUGWISEHA_API_APPLIANCES_URL = PLUGWISEHA_API_URL + \"/core/appliances\";\n+    public static final String PLUGWISEHA_API_APPLIANCE_URL = PLUGWISEHA_API_URL + \"/core/appliances;id=%s\";\n+    public static final String PLUGWISEHA_API_LOCATIONS_URL = PLUGWISEHA_API_URL + \"/core/locations\";\n+    public static final String PLUGWISEHA_API_LOCATION_URL = PLUGWISEHA_API_URL + \"/core/locations;id=%s\";\n+\n+    // Bridge\n+    public static final ThingTypeUID THING_TYPE_GATEWAY = new ThingTypeUID(BINDING_ID, \"gateway\");\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_ZONE = new ThingTypeUID(BINDING_ID, \"zone\");\n+    public static final ThingTypeUID THING_TYPE_APPLIANCE_VALVE = new ThingTypeUID(BINDING_ID, \"appliance_valve\");\n+    public static final ThingTypeUID THING_TYPE_APPLIANCE_PUMP = new ThingTypeUID(BINDING_ID, \"appliance_pump\");\n+    public static final ThingTypeUID THING_TYPE_APPLIANCE_THERMOSTAT = new ThingTypeUID(BINDING_ID,\n+            \"appliance_thermostat\");\n+    public static final ThingTypeUID THING_TYPE_APPLIANCE_BOILER = new ThingTypeUID(BINDING_ID, \"appliance_boiler\");\n+\n+    // List of channel Type UIDs\n+    public static final ChannelTypeUID CHANNEL_TYPE_BATTERYLEVEL = new ChannelTypeUID(\"system:battery-level\");\n+    public static final ChannelTypeUID CHANNEL_TYPE_BATTERYLEVELLOW = new ChannelTypeUID(\"system:low-battery\");\n+\n+    // Empty set\n+    public static final Set<ThingTypeUID> SUPPORTED_INTERFACE_TYPES_UIDS_EMPTY = Collections\n+            .unmodifiableSet(Stream.<ThingTypeUID> empty().collect(Collectors.toSet()));\n+\n+    // List of all Gateway configuration properties\n+    public static final String GATEWAY_CONFIG_HOST = \"host\";\n+    public static final String GATEWAY_CONFIG_USERNAME = \"username\";\n+    public static final String GATEWAY_CONFIG_SMILEID = \"smileId\";\n+    public static final String GATEWAY_CONFIG_REFRESH = \"refresh\";\n+\n+    // List of all Zone configuration properties\n+    public static final String ZONE_CONFIG_ID = \"id\";\n+    public static final String ZONE_CONFIG_NAME = \"zoneName\";\n+\n+    // List of all Appliance configuration properties\n+    public static final String APPLIANCE_CONFIG_ID = \"id\";\n+    public static final String APPLIANCE_CONFIG_NAME = \"applianceName\";\n+    public static final String APPLIANCE_CONFIG_LOWBATTERY = \"lowBatteryPercentage\";\n+\n+    // List of all Appliance properties\n+    public static final String APPLIANCE_PROPERTY_DESCRIPTION = \"description\";\n+    public static final String APPLIANCE_PROPERTY_TYPE = \"type\";\n+    public static final String APPLIANCE_PROPERTY_FUNCTIONALITIES = \"functionalities\";\n+    public static final String APPLIANCE_PROPERTY_ZB_TYPE = \"zigbee type\";\n+    public static final String APPLIANCE_PROPERTY_ZB_REACHABLE = \"zigbee reachable\";\n+    public static final String APPLIANCE_PROPERTY_ZB_POWERSOURCE = \"zigboo power source\";\n+\n+    // List of all Location properties\n+    public static final String LOCATION_PROPERTY_DESCRIPTION = \"description\";\n+    public static final String LOCATION_PROPERTY_TYPE = \"type\";\n+    public static final String LOCATION_PROPERTY_FUNCTIONALITIES = \"functionalities\";\n+\n+    // List of all Channel IDs\n+    public static final String ZONE_SETPOINT_CHANNEL = \"setpointTemperature\";\n+    public static final String ZONE_TEMPERATURE_CHANNEL = \"temperature\";\n+    public static final String ZONE_PRESETSCENE_CHANNEL = \"presetScene\";\n+    public static final String ZONE_PREHEAT_CHANNEL = \"preHeat\";\n+\n+    public static final String APPLIANCE_SETPOINT_CHANNEL = \"setpointTemperature\";\n+    public static final String APPLIANCE_TEMPERATURE_CHANNEL = \"temperature\";\n+    public static final String APPLIANCE_BATTERYLEVEL_CHANNEL = \"batteryLevel\";\n+    public static final String APPLIANCE_BATTERYLEVELLOW_CHANNEL = \"batteryLevelLow\";\n+    public static final String APPLIANCE_POWER_USAGE_CHANNEL = \"powerUsage\";\n+    public static final String APPLIANCE_POWER_CHANNEL = \"power\";\n+    public static final String APPLIANCE_LOCK_CHANNEL = \"lock\";\n+    public static final String APPLIANCE_WATERPRESSURE_CHANNEL = \"waterPressure\";\n+    public static final String APPLIANCE_DHWSTATE_CHANNEL = \"dhwState\";\n+    public static final String APPLIANCE_CHSTATE_CHANNEL = \"chState\";\n+    public static final String APPLIANCE_OFFSET_CHANNEL = \"offsetTemperature\";\n+    public static final String APPLIANCE_VALVEPOSITION_CHANNEL = \"valvePosition\";\n+    public static final String APPLIANCE_COOLINGSTATE_CHANNEL = \"coolingState\";\n+    public static final String APPLIANCE_INTENDEDBOILERTEMP_CHANNEL = \"intendedBoilerTemp\";\n+    public static final String APPLIANCE_FLAMESTATE_CHANNEL = \"flameState\";\n+    public static final String APPLIANCE_INTENDEDHEATINGSTATE_CHANNEL = \"intendedHeatingState\";\n+    public static final String APPLIANCE_MODULATIONLEVEL_CHANNEL = \"modulationLevel\";\n+    public static final String APPLIANCE_OTAPPLICATIONFAULTCODE_CHANNEL = \"otAppFaultCode\";\n+    public static final String APPLIANCE_DHWTEMPERATURE_CHANNEL = \"dhwTemperature\";\n+    public static final String APPLIANCE_OTOEMFAULTCODE_CHANNEL = \"otOEMFaultCode\";\n+    public static final String APPLIANCE_BOILERTEMPERATURE_CHANNEL = \"boilerTemperature\";\n+    public static final String APPLIANCE_DHWSETPOINT_CHANNEL = \"dhwSetpoint\";\n+    public static final String APPLIANCE_MAXBOILERTEMPERATURE_CHANNEL = \"maxBoilerTemperature\";\n+    public static final String APPLIANCE_DHWCOMFORTMODE_CHANNEL = \"dhwComfortMode\";\n+\n+    // List of all Appliance Types\n+    public static final String APPLIANCE_TYPE_THERMOSTAT = \"thermostat\";\n+    public static final String APPLIANCE_TYPE_GATEWAY = \"gateway\";\n+    public static final String APPLIANCE_TYPE_CENTRALHEATINGPUMP = \"central_heating_pump\";\n+    public static final String APPLIANCE_TYPE_OPENTHERMGATEWAY = \"open_therm_gateway\";\n+    public static final String APPLIANCE_TYPE_ZONETHERMOSTAT = \"zone_thermostat\";\n+    public static final String APPLIANCE_TYPE_HEATERCENTRAL = \"heater_central\";\n+    public static final String APPLIANCE_TYPE_THERMOSTATICRADIATORVALUE = \"thermostatic_radiator_valve\";\n+\n+    // List of Plugwise Maesure Units\n+    public static final String UNIT_CELSIUS = \"C\";\n+\n+    // Supported things\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(THING_TYPE_ZONE, THING_TYPE_APPLIANCE_VALVE, THING_TYPE_APPLIANCE_PUMP, THING_TYPE_APPLIANCE_BOILER)\n+            .collect(Collectors.toSet()));\n+\n+    // Appliance types known to binding\n+    public static final Set<String> KNOWN_APPLIANCE_TYPES = Stream.of(APPLIANCE_TYPE_THERMOSTAT, APPLIANCE_TYPE_GATEWAY,\n+            APPLIANCE_TYPE_CENTRALHEATINGPUMP, APPLIANCE_TYPE_OPENTHERMGATEWAY, APPLIANCE_TYPE_ZONETHERMOSTAT,\n+            APPLIANCE_TYPE_HEATERCENTRAL, APPLIANCE_TYPE_THERMOSTATICRADIATORVALUE).collect(Collectors.toSet());", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY1MTcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624651715", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-02T08:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NTg3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624495875", "bodyText": "This is already logged by the framework and can therefore be removed. Same for below.", "author": "fwolter", "createdAt": "2021-05-01T11:23:30Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/PlugwiseHAHandlerFactory.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHAApplianceHandler;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHAZoneHandler;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.plugwiseha\")\n+public class PlugwiseHAHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAHandlerFactory.class);\n+    private final HttpClient httpClient;\n+\n+    // Constructor\n+\n+    @Activate\n+    public PlugwiseHAHandlerFactory(@Reference final HttpClientFactory httpClientFactory) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+    }\n+\n+    // Public methods\n+\n+    /**\n+     * Returns whether the handler is able to create a thing or register a thing\n+     * handler for the given type.\n+     *\n+     * @param thingTypeUID the thing type UID\n+     * @return true, if the handler supports the thing type, false otherwise\n+     */\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return (PlugwiseHABridgeHandler.supportsThingType(thingTypeUID)\n+                || PlugwiseHAZoneHandler.supportsThingType(thingTypeUID))\n+                || PlugwiseHAApplianceHandler.supportsThingType(thingTypeUID);\n+    }\n+\n+    /**\n+     * Creates a thing for given arguments.\n+     *\n+     * @param thingTypeUID thing type uid (not null)\n+     * @param configuration configuration\n+     * @param thingUID thing uid, which can be null\n+     * @param bridgeUID bridge uid, which can be null\n+     * @return created thing\n+     */\n+    @Override\n+    public @Nullable Thing createThing(ThingTypeUID thingTypeUID, Configuration configuration,\n+            @Nullable ThingUID thingUID, @Nullable ThingUID bridgeUID) {\n+        if (PlugwiseHABridgeHandler.supportsThingType(thingTypeUID)) {\n+            return super.createThing(thingTypeUID, configuration, thingUID, null);\n+        } else if (PlugwiseHAZoneHandler.supportsThingType(thingTypeUID)) {\n+            return super.createThing(thingTypeUID, configuration, thingUID, bridgeUID);\n+        } else if (PlugwiseHAApplianceHandler.supportsThingType(thingTypeUID)) {\n+            return super.createThing(thingTypeUID, configuration, thingUID, bridgeUID);\n+        }\n+\n+        throw new IllegalArgumentException(\n+                \"The thing type \" + thingTypeUID + \" is not supported by the plugwiseha binding.\");\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Creates a {@link ThingHandler} for the given thing.\n+     *\n+     * @param thing the thing\n+     * @return thing the created handler\n+     */\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (PlugwiseHABridgeHandler.supportsThingType(thingTypeUID)) {\n+            this.logger.debug(\"Creating new Plugwise Home Automation Bridge: {}\", thing.getLabel());", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY1MTcwMw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624651703", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-02T08:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NTg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NjQzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624496435", "bodyText": "Can this be removed? same for below.", "author": "fwolter", "createdAt": "2021-05-01T11:28:50Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/PlugwiseHAController.java", "diffHunk": "@@ -0,0 +1,427 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.api.model;\n+\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.*;\n+import org.openhab.binding.plugwiseha.internal.api.xml.PlugwiseHAXStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAController} class provides the interface to the Plugwise\n+ * Home Automation API and stores/caches the object model for use by the various\n+ * ThingHandlers of this binding.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAController {\n+\n+    // Private member variables/constants\n+\n+    private static final int MAX_AGE_MINUTES_REFRESH = 10;\n+    private static final int MAX_AGE_MINUTES_FULL_REFRESH = 30;\n+    private static final DateTimeFormatter FORMAT = DateTimeFormatter.RFC_1123_DATE_TIME; // default Date format that\n+                                                                                          // will be used in conversion\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAController.class);\n+\n+    private final HttpClient httpClient;\n+    private final PlugwiseHAXStream xStream;\n+    private final Transformer domainObjectsTransformer;\n+\n+    private final String host;\n+    private final int port;\n+    private final String username;\n+    private final String smileId;\n+\n+    private @Nullable ZonedDateTime gatewayUpdateDateTime;\n+    private @Nullable ZonedDateTime gatewayFullUpdateDateTime;\n+    private @Nullable DomainObjects domainObjects;\n+\n+    public PlugwiseHAController(HttpClient httpClient, String host, int port, String username, String smileId)\n+            throws PlugwiseHAException {\n+        this.httpClient = httpClient;\n+        this.host = host;\n+        this.port = port;\n+        this.username = username;\n+        this.smileId = smileId;\n+\n+        this.xStream = new PlugwiseHAXStream();\n+        this.domainObjectsTransformer = PlugwiseHAController\n+                .setXSLT(new StreamSource(getClass().getClassLoader().getResourceAsStream(\"domain_objects.xslt\")));\n+    }\n+\n+    // Public methods\n+\n+    public void start(Runnable callback) throws PlugwiseHAException {\n+        refresh();\n+        callback.run();\n+    }\n+\n+    public void refresh() throws PlugwiseHAException {\n+        synchronized (this) {\n+            this.getUpdatedDomainObjects();\n+        }\n+    }\n+\n+    // Public API methods\n+\n+    public GatewayInfo getGatewayInfo() throws PlugwiseHAException {\n+        return getGatewayInfo(false);\n+    }\n+\n+    public GatewayInfo getGatewayInfo(Boolean forceRefresh) throws PlugwiseHAException {\n+        GatewayInfo gatewayInfo = this.domainObjects.getGatewayInfo();\n+\n+        if (!forceRefresh && gatewayInfo != null) {\n+            this.logger.debug(\"Found Plugwise Home Automation gateway\");\n+            return gatewayInfo;\n+        } else {\n+            PlugwiseHAControllerRequest<DomainObjects> request;\n+\n+            request = newRequest(DomainObjects.class, this.domainObjectsTransformer);\n+\n+            request.setPath(\"/core/domain_objects\");\n+            request.addPathParameter(\"class\", \"Gateway\");\n+\n+            DomainObjects domainObjects = executeRequest(request);\n+            this.gatewayUpdateDateTime = ZonedDateTime.parse(request.getServerDateTime(), PlugwiseHAController.FORMAT);\n+\n+            return mergeDomainObjects(domainObjects).getGatewayInfo();\n+        }\n+    }\n+\n+    public Appliances getAppliances() throws PlugwiseHAException {\n+        return getAppliances(false);\n+    }\n+\n+    public Appliances getAppliances(Boolean forceRefresh) throws PlugwiseHAException {\n+        Appliances appliances = this.domainObjects.getAppliances();\n+\n+        if (!forceRefresh && appliances != null) {\n+            return appliances;\n+        } else {\n+            PlugwiseHAControllerRequest<DomainObjects> request;\n+\n+            request = newRequest(DomainObjects.class, this.domainObjectsTransformer);\n+\n+            request.setPath(\"/core/domain_objects\");\n+            request.addPathParameter(\"class\", \"Appliance\");\n+\n+            DomainObjects domainObjects = executeRequest(request);\n+            this.gatewayUpdateDateTime = ZonedDateTime.parse(request.getServerDateTime(), PlugwiseHAController.FORMAT);\n+            int size = 0;\n+            if (!(domainObjects == null || domainObjects.getAppliances() == null)) {\n+                size = domainObjects.getAppliances().size();\n+            }\n+            this.logger.debug(\"Found {} Plugwise Home Automation appliance(s)\", size);\n+\n+            return mergeDomainObjects(domainObjects).getAppliances();\n+        }\n+    }\n+\n+    public @Nullable Appliance getAppliance(String id, Boolean forceRefresh) throws PlugwiseHAException {\n+        Appliances appliances = this.getAppliances(forceRefresh);\n+        if (!appliances.containsKey(id)) {\n+            this.logger.debug(\"Plugwise Home Automation Appliance with id {} is not known\", id);\n+            return null;\n+        } else {\n+            return appliances.get(id);\n+        }\n+    }\n+\n+    public Locations getLocations() throws PlugwiseHAException {\n+        return getLocations(false);\n+    }\n+\n+    public Locations getLocations(Boolean forceRefresh) throws PlugwiseHAException {\n+        Locations locations = this.domainObjects.getLocations();\n+\n+        if (!forceRefresh && locations != null) {\n+            return locations;\n+        } else {\n+            PlugwiseHAControllerRequest<DomainObjects> request;\n+\n+            request = newRequest(DomainObjects.class, this.domainObjectsTransformer);\n+\n+            request.setPath(\"/core/domain_objects\");\n+            request.addPathParameter(\"class\", \"Location\");\n+\n+            DomainObjects domainObjects = executeRequest(request);\n+            this.gatewayUpdateDateTime = ZonedDateTime.parse(request.getServerDateTime(), PlugwiseHAController.FORMAT);\n+            int size = 0;\n+            if (!(domainObjects == null || domainObjects.getLocations() == null)) {\n+                size = domainObjects.getLocations().size();\n+            }\n+            this.logger.debug(\"Found {} Plugwise Home Automation Zone(s)\", size);\n+            return mergeDomainObjects(domainObjects).getLocations();\n+        }\n+    }\n+\n+    public @Nullable Location getLocation(String id, Boolean forceRefresh) throws PlugwiseHAException {\n+        Locations locations = this.getLocations(forceRefresh);\n+\n+        if (!locations.containsKey(id)) {\n+            this.logger.debug(\"Plugwise Home Automation Zone with {} is not known\", id);\n+            return null;\n+        } else {\n+            return locations.get(id);\n+        }\n+    }\n+\n+    public @Nullable DomainObjects getDomainObjects() throws PlugwiseHAException {\n+        PlugwiseHAControllerRequest<DomainObjects> request;\n+\n+        request = newRequest(DomainObjects.class, this.domainObjectsTransformer);\n+\n+        request.setPath(\"/core/domain_objects\");\n+        request.addPathParameter(\"@locale\", \"en-US\");\n+\n+        DomainObjects domainObjects = executeRequest(request);\n+        this.gatewayUpdateDateTime = ZonedDateTime.parse(request.getServerDateTime(), PlugwiseHAController.FORMAT);\n+        this.gatewayFullUpdateDateTime = this.gatewayUpdateDateTime;\n+\n+        return mergeDomainObjects(domainObjects);\n+    }\n+\n+    public @Nullable DomainObjects getUpdatedDomainObjects() throws PlugwiseHAException {\n+        if (this.gatewayUpdateDateTime == null || this.gatewayFullUpdateDateTime == null\n+                || this.gatewayUpdateDateTime.isBefore(ZonedDateTime.now().minusMinutes(MAX_AGE_MINUTES_REFRESH))\n+                || this.gatewayFullUpdateDateTime\n+                        .isBefore(ZonedDateTime.now().minusMinutes(MAX_AGE_MINUTES_FULL_REFRESH))) {\n+            return getDomainObjects();\n+        } else {\n+            return getUpdatedDomainObjects(this.gatewayUpdateDateTime);\n+        }\n+    }\n+\n+    public @Nullable DomainObjects getUpdatedDomainObjects(@Nullable ZonedDateTime since) throws PlugwiseHAException {\n+        return getUpdatedDomainObjects(since.toEpochSecond());\n+    }\n+\n+    public @Nullable DomainObjects getUpdatedDomainObjects(Long since) throws PlugwiseHAException {\n+        PlugwiseHAControllerRequest<DomainObjects> request;\n+\n+        request = newRequest(DomainObjects.class, this.domainObjectsTransformer);\n+\n+        request.setPath(\"/core/domain_objects\");\n+        request.addPathFilter(\"modified_date\", \"ge\", since);\n+        request.addPathFilter(\"deleted_date\", \"ge\", \"0\");\n+        request.addPathParameter(\"@memberModifiedDate\", since);\n+        request.addPathParameter(\"@locale\", \"en-US\");\n+\n+        DomainObjects domainObjects = executeRequest(request);\n+        this.gatewayUpdateDateTime = ZonedDateTime.parse(request.getServerDateTime(), PlugwiseHAController.FORMAT);\n+\n+        return mergeDomainObjects(domainObjects);\n+    }\n+\n+    public void setLocationThermostat(Location location, Double temperature) throws PlugwiseHAException {\n+        PlugwiseHAControllerRequest<Void> request = newRequest(Void.class);\n+        Optional<ActuatorFunctionality> thermostat = location.getActuatorFunctionalities().getFunctionalityThermostat();\n+\n+        if (thermostat.isPresent()) {\n+            request.setPath(\"/core/locations\");\n+\n+            request.addPathParameter(\"id\", String.format(\"%s/thermostat\", location.getId()));\n+            request.addPathParameter(\"id\", String.format(\"%s\", thermostat.get().getId()));\n+            request.setBodyParameter(new ActuatorFunctionalityThermostat(temperature));\n+\n+            executeRequest(request);\n+        }\n+    }\n+\n+    public void setThermostat(Appliance appliance, Double temperature) throws PlugwiseHAException {\n+        PlugwiseHAControllerRequest<Void> request = newRequest(Void.class);\n+        Optional<ActuatorFunctionality> thermostat = appliance.getActuatorFunctionalities()\n+                .getFunctionalityThermostat();\n+\n+        if (thermostat.isPresent()) {\n+            request.setPath(\"/core/appliances\");\n+\n+            request.addPathParameter(\"id\", String.format(\"%s/thermostat\", appliance.getId()));\n+            request.addPathParameter(\"id\", String.format(\"%s\", thermostat.get().getId()));\n+            request.setBodyParameter(new ActuatorFunctionalityThermostat(temperature));\n+\n+            executeRequest(request);\n+        }\n+    }\n+\n+    public void setOffsetTemperature(Appliance appliance, Double temperature) throws PlugwiseHAException {\n+        PlugwiseHAControllerRequest<Void> request = newRequest(Void.class);\n+        Optional<ActuatorFunctionality> offsetTemperatureFunctionality = appliance.getActuatorFunctionalities()\n+                .getFunctionalityOffsetTemperature();\n+\n+        if (offsetTemperatureFunctionality.isPresent()) {\n+            request.setPath(\"/core/appliances\");\n+\n+            request.addPathParameter(\"id\", String.format(\"%s/offset\", appliance.getId()));\n+            request.addPathParameter(\"id\", String.format(\"%s\", offsetTemperatureFunctionality.get().getId()));\n+            request.setBodyParameter(new ActuatorFunctionalityOffsetTemperature(temperature));\n+\n+            executeRequest(request);\n+        }\n+    }\n+\n+    public void switchRelay(Appliance appliance, String state) throws PlugwiseHAException {\n+        List<String> allowStates = Arrays.asList(\"on\", \"off\");\n+        if (allowStates.contains(state.toLowerCase())) {\n+            if (state.toLowerCase().equals(\"on\")) {\n+                switchRelayOn(appliance);\n+            } else {\n+                switchRelayOff(appliance);\n+            }\n+        }\n+    }\n+\n+    public void setPreHeating(Location location, Boolean state) throws PlugwiseHAException {\n+        PlugwiseHAControllerRequest<Void> request = newRequest(Void.class);\n+        Optional<ActuatorFunctionality> thermostat = location.getActuatorFunctionalities().getFunctionalityThermostat();\n+\n+        request.setPath(\"/core/locations\");\n+        request.addPathParameter(\"id\", String.format(\"%s/thermostat\", location.getId()));\n+        request.addPathParameter(\"id\", String.format(\"%s\", thermostat.get().getId()));\n+        request.setBodyParameter(new ActuatorFunctionalityThermostat(state));\n+\n+        executeRequest(request);\n+    }\n+\n+    public void switchRelayOn(Appliance appliance) throws PlugwiseHAException {\n+        PlugwiseHAControllerRequest<Void> request = newRequest(Void.class);\n+        // Boolean relayLockState = appliance.getRelayLockState().orElse(null);", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY1MjQ3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624652479", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-02T08:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NjQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NjYwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624496602", "bodyText": "Can you specify the encoding you expect? E.g. StandardCharsets.UTF_8", "author": "fwolter", "createdAt": "2021-05-01T11:30:07Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/PlugwiseHAControllerRequest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.api.model;\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.net.ConnectException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentProvider;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpScheme;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.http.HttpURI;\n+import org.eclipse.jetty.http.MimeTypes;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHABadRequestException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAForbiddenException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * The {@link PlugwiseHAControllerRequest} class is a utility class to create\n+ * API requests to the Plugwise Home Automation controller and to deserialize\n+ * incoming XML into the appropriate model objects to be used by the {@link\n+ * PlugwiseHAController}.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAControllerRequest<T> {\n+\n+    private static final String CONTENT_TYPE_TEXT_XML = MimeTypes.Type.TEXT_XML_8859_1.toString();\n+    private static final long TIMEOUT_SECONDS = 5;\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAControllerRequest.class);\n+    private final XStream xStream;\n+    private final HttpClient httpClient;\n+    private final String host;\n+    private final int port;\n+    private final Class<T> resultType;\n+    private final @Nullable Transformer transformer;\n+\n+    private Map<String, String> headers = new HashMap<>();\n+    private Map<String, String> queryParameters = new HashMap<>();\n+    private @Nullable Object bodyParameter;\n+    private String serverDateTime = \"\";\n+    private String path = \"/\";\n+\n+    // Constructor\n+\n+    <X extends XStream> PlugwiseHAControllerRequest(Class<T> resultType, X xStream, @Nullable Transformer transformer,\n+            HttpClient httpClient, String host, int port, String username, String password) {\n+        this.resultType = resultType;\n+        this.xStream = xStream;\n+        this.transformer = transformer;\n+        this.httpClient = httpClient;\n+        this.host = host;\n+        this.port = port;\n+\n+        setHeader(HttpHeader.ACCEPT.toString(), CONTENT_TYPE_TEXT_XML);\n+\n+        // Create Basic Auth header if username and password are supplied\n+        if (!username.isBlank() && !password.isBlank()) {\n+            setHeader(HttpHeader.AUTHORIZATION.toString(), \"Basic \"\n+                    + Base64.getEncoder().encodeToString(String.format(\"%s:%s\", username, password).getBytes()));", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY2MjQ3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624662473", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-02T09:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NjYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NzUxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624497519", "bodyText": "You could include the exception's message in updateStatus to display it in the UI. Then you could also remove the log message as it is already logged by the framework.", "author": "fwolter", "createdAt": "2021-05-01T11:37:36Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,491 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.BRIDGE_OFFLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.*;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config, PlugwiseHABridgeHandler bridgeHandler) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+\n+            try {\n+                PlugwiseHAController controller = bridgeHandler.getController();\n+                if (controller != null) {\n+                    this.appliance = getEntity(controller, true);\n+                    if (this.appliance != null) {\n+                        if (this.appliance.isBatteryOperated()) {\n+                            addBatteryChannels();\n+                        }\n+                        setApplianceProperties();\n+                        updateStatus(ONLINE);\n+                    } else {\n+                        updateStatus(OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(OFFLINE, BRIDGE_OFFLINE);\n+                }\n+            } catch (PlugwiseHAException e) {\n+                logger.debug(\"Failed initializing appliance handler with config = {} message = {}\", config,\n+                        e.getMessage());\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY2NDg3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624664877", "bodyText": "fixed. same in PlugwiseHAZoneHandler", "author": "lsiepel", "createdAt": "2021-05-02T09:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5NzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5ODcxMg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624498712", "bodyText": "toUnit() can return null if the unit can't be converted.", "author": "fwolter", "createdAt": "2021-05-01T11:48:16Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,491 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.BRIDGE_OFFLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.*;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config, PlugwiseHABridgeHandler bridgeHandler) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+\n+            try {\n+                PlugwiseHAController controller = bridgeHandler.getController();\n+                if (controller != null) {\n+                    this.appliance = getEntity(controller, true);\n+                    if (this.appliance != null) {\n+                        if (this.appliance.isBatteryOperated()) {\n+                            addBatteryChannels();\n+                        }\n+                        setApplianceProperties();\n+                        updateStatus(ONLINE);\n+                    } else {\n+                        updateStatus(OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(OFFLINE, BRIDGE_OFFLINE);\n+                }\n+            } catch (PlugwiseHAException e) {\n+                logger.debug(\"Failed initializing appliance handler with config = {} message = {}\", config,\n+                        e.getMessage());\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    try {\n+                        if (command == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", (State) command,\n+                                entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        Unit<Temperature> unit = entity.getOffsetTemperatureUnit().orElse(UNIT_CELSIUS)\n+                                .equals(UNIT_CELSIUS) ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                        controller.setOffsetTemperature(entity, state.toUnit(unit).doubleValue());\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to update setpoint for zone '{}': {} -> {}\", entity.getName(),\n+                                entity.getSetpointTemperature().orElse(null), state.doubleValue());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_POWER_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    try {\n+                        if (command == OnOffType.ON) {\n+                            controller.switchRelayOn(entity);\n+                        } else {\n+                            controller.switchRelayOff(entity);\n+                        }\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay {} for appliance '{}'\", (State) command, entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_SETPOINT_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    QuantityType<Temperature> state = (QuantityType<Temperature>) command;\n+                    try {\n+                        Unit<Temperature> unit = entity.getSetpointTemperatureUnit().orElse(UNIT_CELSIUS)\n+                                .equals(UNIT_CELSIUS) ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                        controller.setThermostat(entity, state.toUnit(unit).doubleValue());", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM0NTA0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r625345047", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-03T20:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5ODcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5OTcxNA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624499714", "bodyText": "See above. Remove.", "author": "fwolter", "createdAt": "2021-05-01T11:56:53Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABaseHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.core.thing.ThingStatus.*;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABaseHandler} abstract class provides common methods and\n+ * properties for the ThingHandlers of this binding. Extends @{link\n+ * BaseThingHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ * @param <E> entity - the Plugwise Home Automation entity class used by this\n+ *            thing handler\n+ * @param <C> config - the Plugwise Home Automation config class used by this\n+ *            thing handler\n+ */\n+\n+@NonNullByDefault\n+public abstract class PlugwiseHABaseHandler<E, C extends PlugwiseHAThingConfig> extends BaseThingHandler {\n+\n+    protected static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+\n+    protected final Logger logger = LoggerFactory.getLogger(PlugwiseHABaseHandler.class);\n+\n+    private Class<?> clazz;\n+\n+    // Constructor\n+\n+    public PlugwiseHABaseHandler(Thing thing) {\n+        super(thing);\n+        clazz = (Class<?>) (((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[1]);\n+    }\n+\n+    // Abstract methods\n+\n+    /**\n+     * Initializes the Plugwise Entity that this class handles.\n+     *\n+     * @param config the thing configuration\n+     * @param bridge the bridge that this thing is part of\n+     */\n+    protected abstract void initialize(C config, PlugwiseHABridgeHandler bridge);\n+\n+    /**\n+     * Get the Plugwise Entity that belongs to this ThingHandler\n+     *\n+     * @param controller the controller for this ThingHandler\n+     * @param forceRefresh indicated if the entity should be refreshed from the Plugwise API\n+     */\n+    protected abstract @Nullable E getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException;\n+\n+    /**\n+     * Handles a {@link RefreshType} command for a given channel.\n+     *\n+     * @param entity the Plugwise Entity\n+     * @param channelUID the channel uid the command is for\n+     */\n+    protected abstract void refreshChannel(E entity, ChannelUID channelUID);\n+\n+    /**\n+     * Handles a command for a given channel.\n+     * \n+     * @param entity the Plugwise Entity\n+     * @param channelUID the channel uid the command is for\n+     * @param command the command\n+     */\n+    protected abstract void handleCommand(E entity, ChannelUID channelUID, Command command) throws PlugwiseHAException;\n+\n+    // Overrides\n+\n+    @Override\n+    public void initialize() {\n+        C config = getPlugwiseThingConfig();\n+\n+        if (checkConfig(config)) {\n+            Bridge bridge = getBridge();\n+            if (bridge == null || bridge.getHandler() == null\n+                    || !(bridge.getHandler() instanceof PlugwiseHABridgeHandler)) {\n+                updateStatus(OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"You must choose a Plugwise Home Automation bridge for this thing.\");\n+                return;\n+            }\n+\n+            if (bridge.getStatus() == OFFLINE) {\n+                updateStatus(OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                        \"The Plugwise Home Automation bridge is currently offline.\");\n+            }\n+\n+            PlugwiseHABridgeHandler bridgeHandler = (PlugwiseHABridgeHandler) bridge.getHandler();\n+            if (bridgeHandler != null) {\n+                initialize(config, bridgeHandler);\n+            }\n+        } else {\n+            logger.debug(\"Invalid config for Plugwise Home Automation thing handler with config = {}\", config);\n+        }\n+    }\n+\n+    @Override\n+    public final void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Handling command = {} for channel = {}\", command, channelUID);\n+\n+        if (getThing().getStatus() == ONLINE) {\n+            PlugwiseHAController controller = getController();\n+            if (controller != null) {\n+                try {\n+                    E entity = getEntity(controller, false);\n+                    if (entity != null) {\n+                        if (this.isLinked(channelUID)) {\n+                            if (command instanceof RefreshType) {\n+                                refreshChannel(entity, channelUID);\n+                            } else {\n+                                handleCommand(entity, channelUID, command);\n+                            }\n+                        }\n+                    }\n+                } catch (PlugwiseHAException e) {\n+                    logger.warn(\"Unexpected error handling command = {} for channel = {} : {}\", command, channelUID,\n+                            e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    // Public member methods\n+\n+    public @Nullable PlugwiseHABridgeHandler getPlugwiseHABridge() {\n+        Bridge bridge = this.getBridge();\n+        if (bridge != null) {\n+            return (PlugwiseHABridgeHandler) bridge.getHandler();\n+        }\n+\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public C getPlugwiseThingConfig() {\n+        return (C) getConfigAs(clazz);\n+    }\n+\n+    // Private & protected methods\n+\n+    private @Nullable PlugwiseHAController getController() {\n+        PlugwiseHABridgeHandler bridgeHandler = getPlugwiseHABridge();\n+\n+        if (bridgeHandler != null) {\n+            return bridgeHandler.getController();\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig(C config) {\n+        if (config == null || !config.isValid()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Configuration is missing or corrupted\");\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n+            setLinkedChannelsUndef();\n+        }\n+    }\n+\n+    private void setLinkedChannelsUndef() {\n+        for (Channel channel : getThing().getChannels()) {\n+            ChannelUID channelUID = channel.getUID();\n+            if (this.isLinked(channelUID)) {\n+                updateState(channelUID, UnDefType.UNDEF);\n+            }\n+        }\n+    }\n+\n+    protected final void refresh() {\n+        PlugwiseHABridgeHandler bridgeHandler = getPlugwiseHABridge();\n+        if (bridgeHandler.getThing().getStatusInfo().getStatus() == ThingStatus.ONLINE) {\n+            PlugwiseHAController controller = getController();\n+            if (controller != null) {\n+                E entity = null;\n+                try {\n+                    entity = getEntity(controller, false);\n+                } catch (PlugwiseHAException e) {\n+                    logger.debug(\"Unexpected error handling refresh {}\", e.getMessage());", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY2NTA0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624665049", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-02T09:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ5OTcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMDc2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624500766", "bodyText": "Did you test whether this works when your binding is loaded by Karaf? I.e. when you drop your jar into the addons folder.", "author": "fwolter", "createdAt": "2021-05-01T12:06:09Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/PlugwiseHAController.java", "diffHunk": "@@ -0,0 +1,427 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.api.model;\n+\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.*;\n+import org.openhab.binding.plugwiseha.internal.api.xml.PlugwiseHAXStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAController} class provides the interface to the Plugwise\n+ * Home Automation API and stores/caches the object model for use by the various\n+ * ThingHandlers of this binding.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAController {\n+\n+    // Private member variables/constants\n+\n+    private static final int MAX_AGE_MINUTES_REFRESH = 10;\n+    private static final int MAX_AGE_MINUTES_FULL_REFRESH = 30;\n+    private static final DateTimeFormatter FORMAT = DateTimeFormatter.RFC_1123_DATE_TIME; // default Date format that\n+                                                                                          // will be used in conversion\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAController.class);\n+\n+    private final HttpClient httpClient;\n+    private final PlugwiseHAXStream xStream;\n+    private final Transformer domainObjectsTransformer;\n+\n+    private final String host;\n+    private final int port;\n+    private final String username;\n+    private final String smileId;\n+\n+    private @Nullable ZonedDateTime gatewayUpdateDateTime;\n+    private @Nullable ZonedDateTime gatewayFullUpdateDateTime;\n+    private @Nullable DomainObjects domainObjects;\n+\n+    public PlugwiseHAController(HttpClient httpClient, String host, int port, String username, String smileId)\n+            throws PlugwiseHAException {\n+        this.httpClient = httpClient;\n+        this.host = host;\n+        this.port = port;\n+        this.username = username;\n+        this.smileId = smileId;\n+\n+        this.xStream = new PlugwiseHAXStream();\n+        this.domainObjectsTransformer = PlugwiseHAController\n+                .setXSLT(new StreamSource(getClass().getClassLoader().getResourceAsStream(\"domain_objects.xslt\")));", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM2MzY1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r625363656", "bodyText": "Tested and worked flawless", "author": "lsiepel", "createdAt": "2021-05-03T20:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMDc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMDg0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624500843", "bodyText": "The folder name needs to be all lowercase.", "author": "fwolter", "createdAt": "2021-05-01T12:07:09Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/DTO/ActuatorFunctionalities.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwOTY0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624509649", "bodyText": "When it was lowercase, it started to warn about null annotations, maybe that has been fixed in the mean while, will test!", "author": "lsiepel", "createdAt": "2021-05-01T13:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMDg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY1Mjc4OA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624652788", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-02T08:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMDg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMTEyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624501127", "bodyText": "rawType doesn't exist.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @SuppressWarnings(\"rawType\")\n          \n          \n            \n                public boolean canConvert(Class type) {\n          \n          \n            \n                @Override\n          \n          \n            \n                public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class type) {", "author": "fwolter", "createdAt": "2021-05-01T12:08:54Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/api/model/converter/DateTimeConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.api.model.converter;\n+\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+\n+import com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter;\n+\n+/**\n+ * The {@link DateTimeConverter} provides a SingleValueConverter for use by XStream when converting\n+ * XML documents with a zoned date/time field.\n+ * \n+ * @author B. van Wetten - Initial contribution\n+ */\n+\n+public class DateTimeConverter extends AbstractSingleValueConverter {\n+\n+    private static final DateTimeFormatter FORMAT = DateTimeFormatter.ISO_OFFSET_DATE_TIME; // default Date format that\n+\n+    @Override\n+    @SuppressWarnings(\"rawType\")\n+    public boolean canConvert(Class type) {", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY1MzMwNg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624653306", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-02T08:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMTI5NA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624501294", "bodyText": "The field can be null at this point, because it isn't inittialized in the constructor. So, you need to check if it is not null before accessing it: Example: if (job != null). But this would result in a compiler warning, as it is a field and could theoretically be modified by another thread exactly between the null check and the access in the next line. To mitigate this, you can store the field to a local variable before checking it:\nFuture<?> localPollingJob = pollingJob;\nif (localPollingJob != null) {\n    localPollingJob.cancel(true);\n}", "author": "fwolter", "createdAt": "2021-05-01T12:10:20Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService implements ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private static final int TIMEOUT_SECONDS = 5;\n+    private static final int REFRESH_SECONDS = 600;\n+    private @Nullable PlugwiseHABridgeHandler bridgeHandler;\n+    private @Nullable ScheduledFuture<?> discoveryFuture;\n+\n+    public PlugwiseHADiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, TIMEOUT_SECONDS, true);\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        try {\n+            discoverDomainObjects();\n+        } catch (PlugwiseHAException e) {\n+            // Ignore silently\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"Start Plugwise Home Automation background discovery\");\n+        if (discoveryFuture == null || discoveryFuture.isCancelled()) {\n+            discoveryFuture = scheduler.scheduleWithFixedDelay(this::startScan, 30, REFRESH_SECONDS, TimeUnit.SECONDS);\n+        }", "originalCommit": "492f7f00b3a7fc3fe5c5688af7ed638c1647db38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDY1NDYyMg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r624654622", "bodyText": "I think the example is about cancelling. The comments are placed at scheduling. I think i fixed it, but could you please double check if this is what you meant?", "author": "lsiepel", "createdAt": "2021-05-02T08:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMTI5NA=="}], "type": "inlineReview"}, {"oid": "7fc4353a6e109a5a73351b755f39edb2550e0de6", "url": "https://github.com/openhab/openhab-addons/commit/7fc4353a6e109a5a73351b755f39edb2550e0de6", "message": "Update bundles/org.openhab.binding.plugwiseha/README.md\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-05-01T17:11:49Z", "type": "forcePushed"}, {"oid": "5ccf819ca82178bc79186d4e0ddf5f10d41d0fbd", "url": "https://github.com/openhab/openhab-addons/commit/5ccf819ca82178bc79186d4e0ddf5f10d41d0fbd", "message": "test\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:17Z", "type": "commit"}, {"oid": "a5a49eb159eba4e8ce3c30d3aa28ec29a96f4b45", "url": "https://github.com/openhab/openhab-addons/commit/a5a49eb159eba4e8ce3c30d3aa28ec29a96f4b45", "message": "continuing initial contribution\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:18Z", "type": "commit"}, {"oid": "59e34d9655549a44d3ccdcbd962f43f0ab8da5e4", "url": "https://github.com/openhab/openhab-addons/commit/59e34d9655549a44d3ccdcbd962f43f0ab8da5e4", "message": "updated documentation\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:18Z", "type": "commit"}, {"oid": "a24020db3ac9476d8b724b1c18bf3179551e687f", "url": "https://github.com/openhab/openhab-addons/commit/a24020db3ac9476d8b724b1c18bf3179551e687f", "message": "fix some sat warnings\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:18Z", "type": "commit"}, {"oid": "e655b1b6724b1c7afc75500d80ca737f30be7cb5", "url": "https://github.com/openhab/openhab-addons/commit/e655b1b6724b1c7afc75500d80ca737f30be7cb5", "message": "spotless fix\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:18Z", "type": "commit"}, {"oid": "38a0b007b828171ed7a73d373f65e19521ee8bc2", "url": "https://github.com/openhab/openhab-addons/commit/38a0b007b828171ed7a73d373f65e19521ee8bc2", "message": "remove deprecated import\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:19Z", "type": "commit"}, {"oid": "cff8a80aef13aebbfceff9390f66357fb806ab71", "url": "https://github.com/openhab/openhab-addons/commit/cff8a80aef13aebbfceff9390f66357fb806ab71", "message": "Fix more cade analysis errors\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:19Z", "type": "commit"}, {"oid": "e7fe40bd97cd856263cb82b292a35d15f01cffbd", "url": "https://github.com/openhab/openhab-addons/commit/e7fe40bd97cd856263cb82b292a35d15f01cffbd", "message": "Minor style fix\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:19Z", "type": "commit"}, {"oid": "9f223e7e31f2ded27eb27e4eb90bd97e6690e12a", "url": "https://github.com/openhab/openhab-addons/commit/9f223e7e31f2ded27eb27e4eb90bd97e6690e12a", "message": "address most feedback\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:19Z", "type": "commit"}, {"oid": "e4b7a9d1eb961612c58646afc244dcb41d7262ef", "url": "https://github.com/openhab/openhab-addons/commit/e4b7a9d1eb961612c58646afc244dcb41d7262ef", "message": "Fixed more feedback\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:20Z", "type": "commit"}, {"oid": "00767843c8ab8c67910619258d8299e28225ca42", "url": "https://github.com/openhab/openhab-addons/commit/00767843c8ab8c67910619258d8299e28225ca42", "message": "Fix copy/pasted typo\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:20Z", "type": "commit"}, {"oid": "97ce0c6fcaf380adc1b7e0c58513e64809db41e9", "url": "https://github.com/openhab/openhab-addons/commit/97ce0c6fcaf380adc1b7e0c58513e64809db41e9", "message": "Remove not used methods\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:20Z", "type": "commit"}, {"oid": "08ac8054f14bc890c11ccd73ebcc161fa6f14b89", "url": "https://github.com/openhab/openhab-addons/commit/08ac8054f14bc890c11ccd73ebcc161fa6f14b89", "message": "Typo\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:20Z", "type": "commit"}, {"oid": "975f3b18b680d1244cf6066b0b24cdf7996ed102", "url": "https://github.com/openhab/openhab-addons/commit/975f3b18b680d1244cf6066b0b24cdf7996ed102", "message": "Fix minor bug\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:21Z", "type": "commit"}, {"oid": "48eada7377c687978ea780d881a40d9680f2b6af", "url": "https://github.com/openhab/openhab-addons/commit/48eada7377c687978ea780d881a40d9680f2b6af", "message": "Fix some more feedback\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:21Z", "type": "commit"}, {"oid": "74d814e0586e552ac12c9cd43cf9eaf63a7e9e44", "url": "https://github.com/openhab/openhab-addons/commit/74d814e0586e552ac12c9cd43cf9eaf63a7e9e44", "message": "Implemented DiscoveryService, ThingHandlerService\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:21Z", "type": "commit"}, {"oid": "9fa2ff0ac0f6d126ea2d73e1425f0183e427b585", "url": "https://github.com/openhab/openhab-addons/commit/9fa2ff0ac0f6d126ea2d73e1425f0183e427b585", "message": "Fix NPE at bridge init\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:21Z", "type": "commit"}, {"oid": "ee6e71150adde130368a1f9b6d055ff81859a46a", "url": "https://github.com/openhab/openhab-addons/commit/ee6e71150adde130368a1f9b6d055ff81859a46a", "message": "Added missing channels\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:22Z", "type": "commit"}, {"oid": "498f9c5e4aa3c6fcdf6d06879e393b7513f52212", "url": "https://github.com/openhab/openhab-addons/commit/498f9c5e4aa3c6fcdf6d06879e393b7513f52212", "message": "Fix String comparison\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:22Z", "type": "commit"}, {"oid": "c64a294dff89ee28b13157594f7313da0c4da3f1", "url": "https://github.com/openhab/openhab-addons/commit/c64a294dff89ee28b13157594f7313da0c4da3f1", "message": "Added Temperature Offset Channel\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:22Z", "type": "commit"}, {"oid": "6833ba3efa6d90b198573f5906a45062b33e4503", "url": "https://github.com/openhab/openhab-addons/commit/6833ba3efa6d90b198573f5906a45062b33e4503", "message": "Remove unused property\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:22Z", "type": "commit"}, {"oid": "faec3d6ed47cde50aa938faeaa995f75910a4894", "url": "https://github.com/openhab/openhab-addons/commit/faec3d6ed47cde50aa938faeaa995f75910a4894", "message": "Remove unused imports\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:23Z", "type": "commit"}, {"oid": "fc2ccd5d75aec54052a9e0dc9cc9dacc4db3545d", "url": "https://github.com/openhab/openhab-addons/commit/fc2ccd5d75aec54052a9e0dc9cc9dacc4db3545d", "message": "Add preHeat channel\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:23Z", "type": "commit"}, {"oid": "8bc6fbcc9851845af44df3381fceb0ff8cdcf774", "url": "https://github.com/openhab/openhab-addons/commit/8bc6fbcc9851845af44df3381fceb0ff8cdcf774", "message": "Removed DiscoveryService as advised in issue 9742\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:23Z", "type": "commit"}, {"oid": "6e5805ec657b828ff5bf50d9c1be7b123c04c923", "url": "https://github.com/openhab/openhab-addons/commit/6e5805ec657b828ff5bf50d9c1be7b123c04c923", "message": "valvePosition float fix\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:23Z", "type": "commit"}, {"oid": "7f00a71f230b884e20242ec3a181a7b345b7184f", "url": "https://github.com/openhab/openhab-addons/commit/7f00a71f230b884e20242ec3a181a7b345b7184f", "message": "Adress some feedback\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:24Z", "type": "commit"}, {"oid": "983ce53264f36c5e9d12651d46859cbe175f1bae", "url": "https://github.com/openhab/openhab-addons/commit/983ce53264f36c5e9d12651d46859cbe175f1bae", "message": "Fix NPE from community\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:24Z", "type": "commit"}, {"oid": "76b25abe3d750af31b6144ebbfbda19b79dd8fa1", "url": "https://github.com/openhab/openhab-addons/commit/76b25abe3d750af31b6144ebbfbda19b79dd8fa1", "message": "Fix some possible NPE's\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:24Z", "type": "commit"}, {"oid": "081ad5f21251f01349069c576674bec8eab1b361", "url": "https://github.com/openhab/openhab-addons/commit/081ad5f21251f01349069c576674bec8eab1b361", "message": "pom bom codeowners\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:24Z", "type": "commit"}, {"oid": "32e705c6f81fe714454372ed8f327e451c75f2b3", "url": "https://github.com/openhab/openhab-addons/commit/32e705c6f81fe714454372ed8f327e451c75f2b3", "message": "Fix more review comments\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:25Z", "type": "commit"}, {"oid": "3036034edafef95828f091bbc955b459dae1bdce", "url": "https://github.com/openhab/openhab-addons/commit/3036034edafef95828f091bbc955b459dae1bdce", "message": "Fix license\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:25Z", "type": "commit"}, {"oid": "f2220631bea9ee385442874b78af73d34434f838", "url": "https://github.com/openhab/openhab-addons/commit/f2220631bea9ee385442874b78af73d34434f838", "message": "Reduce logging loudness\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:25Z", "type": "commit"}, {"oid": "0d43c56fc9d6d226da69fddcac94dc52656354c3", "url": "https://github.com/openhab/openhab-addons/commit/0d43c56fc9d6d226da69fddcac94dc52656354c3", "message": "Valveposition classnotfound fix\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:25Z", "type": "commit"}, {"oid": "522c4d9b06c3ba6e08a822fe9e3063d4a5954b8b", "url": "https://github.com/openhab/openhab-addons/commit/522c4d9b06c3ba6e08a822fe9e3063d4a5954b8b", "message": "Add javadoc\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:26Z", "type": "commit"}, {"oid": "cbd761359e4caca734f9f28db273ed5c6aa21b5c", "url": "https://github.com/openhab/openhab-addons/commit/cbd761359e4caca734f9f28db273ed5c6aa21b5c", "message": "cleanup\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:26Z", "type": "commit"}, {"oid": "f359dc38dcf5c4c0f5f046e26ffe46b9118daf85", "url": "https://github.com/openhab/openhab-addons/commit/f359dc38dcf5c4c0f5f046e26ffe46b9118daf85", "message": "Address review comments\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:26Z", "type": "commit"}, {"oid": "d328b34ea94661e22402416791945edd6e000c53", "url": "https://github.com/openhab/openhab-addons/commit/d328b34ea94661e22402416791945edd6e000c53", "message": "Fix remaining feedback\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:26Z", "type": "commit"}, {"oid": "9d72b088f6a086fe80281924ab111a048be59557", "url": "https://github.com/openhab/openhab-addons/commit/9d72b088f6a086fe80281924ab111a048be59557", "message": "Improve error handling/logging\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:27Z", "type": "commit"}, {"oid": "8acb1ec6f5790a6f8405938a478ff70f3e143efd", "url": "https://github.com/openhab/openhab-addons/commit/8acb1ec6f5790a6f8405938a478ff70f3e143efd", "message": "Satisfy maven / spotless\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:27Z", "type": "commit"}, {"oid": "f81ab7a241f3636a75ff41c4eb7a3e06fed270a9", "url": "https://github.com/openhab/openhab-addons/commit/f81ab7a241f3636a75ff41c4eb7a3e06fed270a9", "message": "Add 12 channels to boiler appliance\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:27Z", "type": "commit"}, {"oid": "d06b21d63659d8bfc8cef9ccab7c08739a9f0eb0", "url": "https://github.com/openhab/openhab-addons/commit/d06b21d63659d8bfc8cef9ccab7c08739a9f0eb0", "message": "Missing channel definition\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:27Z", "type": "commit"}, {"oid": "102c5704ecaeb132ba2228a1bd7c83cc2789d1d2", "url": "https://github.com/openhab/openhab-addons/commit/102c5704ecaeb132ba2228a1bd7c83cc2789d1d2", "message": "Added channel constants\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:28Z", "type": "commit"}, {"oid": "2485d752f9dfdaea723af09c10745f0f4ac530b9", "url": "https://github.com/openhab/openhab-addons/commit/2485d752f9dfdaea723af09c10745f0f4ac530b9", "message": "Fix not updating channel values\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:28Z", "type": "commit"}, {"oid": "4b51159e2da4fb3ee2dd1290d0e8a3bbc47401c9", "url": "https://github.com/openhab/openhab-addons/commit/4b51159e2da4fb3ee2dd1290d0e8a3bbc47401c9", "message": "Improve var naming and logging\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:28Z", "type": "commit"}, {"oid": "9489f301cce963cd639cd0985ffde935208a95d0", "url": "https://github.com/openhab/openhab-addons/commit/9489f301cce963cd639cd0985ffde935208a95d0", "message": "Fix channel patterns\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:28Z", "type": "commit"}, {"oid": "37f922c349e6a4a6a4e3116b3bb4ccd32a1bcf62", "url": "https://github.com/openhab/openhab-addons/commit/37f922c349e6a4a6a4e3116b3bb4ccd32a1bcf62", "message": "Improve comparison logic\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:29Z", "type": "commit"}, {"oid": "de3e6d8e7528b9a56c499ec9f3cfc4ad7887e432", "url": "https://github.com/openhab/openhab-addons/commit/de3e6d8e7528b9a56c499ec9f3cfc4ad7887e432", "message": "Update bundles/org.openhab.binding.plugwiseha/README.md\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:29Z", "type": "commit"}, {"oid": "e314812755cad6fe11eaf37b158485fd715ccfa8", "url": "https://github.com/openhab/openhab-addons/commit/e314812755cad6fe11eaf37b158485fd715ccfa8", "message": "Update bundles/org.openhab.binding.plugwiseha/README.md\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:29Z", "type": "commit"}, {"oid": "26893699092d31ee1c8fc7d961dd41cdcc2761ef", "url": "https://github.com/openhab/openhab-addons/commit/26893699092d31ee1c8fc7d961dd41cdcc2761ef", "message": "update readme\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:29Z", "type": "commit"}, {"oid": "26893699092d31ee1c8fc7d961dd41cdcc2761ef", "url": "https://github.com/openhab/openhab-addons/commit/26893699092d31ee1c8fc7d961dd41cdcc2761ef", "message": "update readme\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-01T20:20:29Z", "type": "forcePushed"}, {"oid": "e09a2e3a0f7a7562dc4e982f0731cc97e33b9b85", "url": "https://github.com/openhab/openhab-addons/commit/e09a2e3a0f7a7562dc4e982f0731cc97e33b9b85", "message": "Fix some review comments\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-02T08:30:27Z", "type": "commit"}, {"oid": "e09a2e3a0f7a7562dc4e982f0731cc97e33b9b85", "url": "https://github.com/openhab/openhab-addons/commit/e09a2e3a0f7a7562dc4e982f0731cc97e33b9b85", "message": "Fix some review comments\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-02T08:30:27Z", "type": "forcePushed"}, {"oid": "0f823febb09dbef4a337e802e16530e99fc87a00", "url": "https://github.com/openhab/openhab-addons/commit/0f823febb09dbef4a337e802e16530e99fc87a00", "message": "Fix some review comments\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-02T10:11:28Z", "type": "commit"}, {"oid": "bbdccac12d8f1655b7aba517279e892710600458", "url": "https://github.com/openhab/openhab-addons/commit/bbdccac12d8f1655b7aba517279e892710600458", "message": "Satisfy spotless\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-02T10:14:06Z", "type": "commit"}, {"oid": "78cd1b88b4af58d9bd00672418baf393b0f91833", "url": "https://github.com/openhab/openhab-addons/commit/78cd1b88b4af58d9bd00672418baf393b0f91833", "message": "Fixed checkstyle\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-02T20:42:36Z", "type": "commit"}, {"oid": "cd421f5f608c66762a4c1a29c4964b0440ea5f6c", "url": "https://github.com/openhab/openhab-addons/commit/cd421f5f608c66762a4c1a29c4964b0440ea5f6c", "message": "Fix allmost all warnings\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-03T12:21:30Z", "type": "commit"}, {"oid": "fbaffd318fe15509b54154e466913abbc22c7830", "url": "https://github.com/openhab/openhab-addons/commit/fbaffd318fe15509b54154e466913abbc22c7830", "message": "fix some more warnings\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-03T20:03:49Z", "type": "commit"}, {"oid": "fc03080ec3ec7f0bbd6fbc69efa19f7ecfcdada0", "url": "https://github.com/openhab/openhab-addons/commit/fc03080ec3ec7f0bbd6fbc69efa19f7ecfcdada0", "message": "checkstyle\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-03T20:14:07Z", "type": "commit"}, {"oid": "5adef940be52d3c38346ebe33079d434668ce974", "url": "https://github.com/openhab/openhab-addons/commit/5adef940be52d3c38346ebe33079d434668ce974", "message": "Fixed missed feedback\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-03T20:23:00Z", "type": "commit"}, {"oid": "f3534ac4aae79c692ead2813b72f53f0214d48a1", "url": "https://github.com/openhab/openhab-addons/commit/f3534ac4aae79c692ead2813b72f53f0214d48a1", "message": "Fix spotless\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-05T12:14:52Z", "type": "commit"}, {"oid": "3b7e8284abc8a967d23e04ad8e83a19a24819469", "url": "https://github.com/openhab/openhab-addons/commit/3b7e8284abc8a967d23e04ad8e83a19a24819469", "message": "Typo\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-06T19:30:12Z", "type": "commit"}, {"oid": "6c24951bf821a1d77f69d7daf0be017b41ce2ae3", "url": "https://github.com/openhab/openhab-addons/commit/6c24951bf821a1d77f69d7daf0be017b41ce2ae3", "message": "Cleanup\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-06T20:31:22Z", "type": "commit"}, {"oid": "3c40586f9406d25b988bc2c18f1c7b4450f936fe", "url": "https://github.com/openhab/openhab-addons/commit/3c40586f9406d25b988bc2c18f1c7b4450f936fe", "message": "Fix AvoidThrowingRawExceptionTypes warning\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-13T18:16:04Z", "type": "commit"}, {"oid": "1986063a1579af24148c0f220862dbd5f4495f99", "url": "https://github.com/openhab/openhab-addons/commit/1986063a1579af24148c0f220862dbd5f4495f99", "message": "Last review commits\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-13T18:55:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzMzc4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632933782", "bodyText": "The representation property must be the name of the property, not its value.", "author": "fwolter", "createdAt": "2021-05-15T11:30:01Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/discovery/PlugwiseHADiscoveryService.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.discovery;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.DomainObjects;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.handler.PlugwiseHABridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHADiscoveryService} class is capable of discovering the\n+ * available data from the Plugwise Home Automation gateway\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ */\n+@NonNullByDefault\n+public class PlugwiseHADiscoveryService extends AbstractDiscoveryService implements ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHADiscoveryService.class);\n+    private static final int TIMEOUT_SECONDS = 5;\n+    private static final int REFRESH_SECONDS = 600;\n+    private @Nullable PlugwiseHABridgeHandler bridgeHandler;\n+    private @Nullable ScheduledFuture<?> discoveryFuture;\n+\n+    public PlugwiseHADiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, TIMEOUT_SECONDS, true);\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        try {\n+            discoverDomainObjects();\n+        } catch (PlugwiseHAException e) {\n+            // Ignore silently\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"Start Plugwise Home Automation background discovery\");\n+\n+        ScheduledFuture<?> localDiscoveryFuture = discoveryFuture;\n+        if (localDiscoveryFuture == null || localDiscoveryFuture.isCancelled()) {\n+            discoveryFuture = scheduler.scheduleWithFixedDelay(this::startScan, 30, REFRESH_SECONDS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        logger.debug(\"Stopping Plugwise Home Automation background discovery\");\n+\n+        ScheduledFuture<?> localDiscoveryFuture = discoveryFuture;\n+        if (localDiscoveryFuture != null) {\n+            if (!localDiscoveryFuture.isCancelled()) {\n+                localDiscoveryFuture.cancel(true);\n+                localDiscoveryFuture = null;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof PlugwiseHABridgeHandler) {\n+            bridgeHandler = (PlugwiseHABridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    private void discoverDomainObjects() throws PlugwiseHAException {\n+        PlugwiseHAController controller = null;\n+        PlugwiseHABridgeHandler localBridgeHandler = this.bridgeHandler;\n+        if (localBridgeHandler != null) {\n+            controller = localBridgeHandler.getController();\n+        }\n+\n+        if (controller != null) {\n+            DomainObjects domainObjects = controller.getDomainObjects();\n+\n+            if (domainObjects != null) {\n+                for (Location location : domainObjects.getLocations().values()) {\n+                    // Only add locations with at least 1 appliance (this ignores the 'root' (home)\n+                    // location which is the parent of all other locations.)\n+                    if (location.applianceCount() > 0) {\n+                        locationDiscovery(location);\n+                    }\n+                }\n+\n+                for (Appliance appliance : domainObjects.getAppliances().values()) {\n+                    // Only add appliances that are required/supported for this binding\n+                    if (PlugwiseHABindingConstants.SUPPORTED_APPLIANCE_TYPES.contains(appliance.getType())) {\n+                        applianceDiscovery(appliance);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void applianceDiscovery(Appliance appliance) {\n+        String applianceId = appliance.getId();\n+        String applianceName = appliance.getName();\n+        String applianceType = appliance.getType();\n+\n+        PlugwiseHABridgeHandler localBridgeHandler = this.bridgeHandler;\n+        if (localBridgeHandler != null) {\n+            ThingUID bridgeUID = localBridgeHandler.getThing().getUID();\n+\n+            ThingUID uid;\n+\n+            Map<String, Object> configProperties = new HashMap<>();\n+\n+            configProperties.put(APPLIANCE_CONFIG_ID, applianceId);\n+\n+            switch (applianceType) {\n+                case \"thermostatic_radiator_valve\":\n+                    uid = new ThingUID(PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE, bridgeUID, applianceId);\n+                    configProperties.put(APPLIANCE_CONFIG_LOWBATTERY, 15);\n+                    break;\n+                case \"central_heating_pump\":\n+                    uid = new ThingUID(PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP, bridgeUID, applianceId);\n+                    break;\n+                case \"heater_central\":\n+                    uid = new ThingUID(PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER, bridgeUID, applianceId);\n+                    break;\n+                case \"zone_thermostat\":\n+                    uid = new ThingUID(PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT, bridgeUID,\n+                            applianceId);\n+                    configProperties.put(APPLIANCE_CONFIG_LOWBATTERY, 15);\n+                    break;\n+                default:\n+                    return;\n+            }\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(uid).withBridge(bridgeUID)\n+                    .withLabel(applianceName).withProperties(configProperties).withRepresentationProperty(applianceId)", "originalCommit": "1986063a1579af24148c0f220862dbd5f4495f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk0Mjg3NA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632942874", "bodyText": "Sorry, fixed", "author": "lsiepel", "createdAt": "2021-05-15T12:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzMzc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNDQ0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632934445", "bodyText": "You could use the wildcard, then the warning suppression can be removed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                QuantityType<Temperature> state = ((QuantityType<Temperature>) command).toUnit(unit);\n          \n          \n            \n                                QuantityType<?> state = ((QuantityType<?>) command).toUnit(unit);", "author": "fwolter", "createdAt": "2021-05-15T11:36:29Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAApplianceHandler.java", "diffHunk": "@@ -0,0 +1,497 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.library.unit.MetricPrefix.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.BRIDGE_OFFLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+import javax.measure.quantity.Pressure;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Appliance;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAApplianceHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation appliances.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class PlugwiseHAApplianceHandler extends PlugwiseHABaseHandler<Appliance, PlugwiseHAThingConfig> {\n+\n+    private @Nullable Appliance appliance;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAApplianceHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAApplianceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_VALVE.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_PUMP.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_BOILER.equals(thingTypeUID)\n+                || PlugwiseHABindingConstants.THING_TYPE_APPLIANCE_THERMOSTAT.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config, PlugwiseHABridgeHandler bridgeHandler) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation appliance handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation appliance handler.\");\n+                return;\n+            }\n+\n+            try {\n+                PlugwiseHAController controller = bridgeHandler.getController();\n+                if (controller != null) {\n+                    this.appliance = getEntity(controller, true);\n+                    Appliance localAppliance = this.appliance;\n+                    if (localAppliance != null) {\n+                        if (localAppliance.isBatteryOperated()) {\n+                            addBatteryChannels();\n+                        }\n+                        setApplianceProperties();\n+                        updateStatus(ONLINE);\n+                    } else {\n+                        updateStatus(OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(OFFLINE, BRIDGE_OFFLINE);\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable Appliance getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Appliance appliance = controller.getAppliance(config.getId(), forceRefresh);\n+\n+        return appliance;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Appliance entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge == null) {\n+            return;\n+        }\n+\n+        PlugwiseHAController controller = bridge.getController();\n+        if (controller == null) {\n+            return;\n+        }\n+\n+        switch (channelID) {\n+            case APPLIANCE_LOCK_CHANNEL:\n+                if (command instanceof OnOffType) {\n+                    try {\n+                        if (command == OnOffType.ON) {\n+                            controller.switchRelayLockOn(entity);\n+                        } else {\n+                            controller.switchRelayLockOff(entity);\n+                        }\n+                    } catch (PlugwiseHAException e) {\n+                        logger.warn(\"Unable to switch relay lock {} for appliance '{}'\", (State) command,\n+                                entity.getName());\n+                    }\n+                }\n+                break;\n+            case APPLIANCE_OFFSET_CHANNEL:\n+                if (command instanceof QuantityType) {\n+                    Unit<Temperature> unit = entity.getOffsetTemperatureUnit().orElse(UNIT_CELSIUS).equals(UNIT_CELSIUS)\n+                            ? SIUnits.CELSIUS\n+                            : ImperialUnits.FAHRENHEIT;\n+                    QuantityType<Temperature> state = ((QuantityType<Temperature>) command).toUnit(unit);", "originalCommit": "1986063a1579af24148c0f220862dbd5f4495f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk0MzEyNg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632943126", "bodyText": "Fixed", "author": "lsiepel", "createdAt": "2021-05-15T12:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNDQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNDgzMg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632934832", "bodyText": "The log message could be remvoed as the framework is alread logging the message in updateStatus().", "author": "fwolter", "createdAt": "2021-05-15T11:41:05Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        PlugwiseHABridgeThingConfig bridgeConfig = getConfigAs(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig(bridgeConfig)) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", bridgeConfig);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, bridgeConfig.getHost(), bridgeConfig.getPort(),\n+                        bridgeConfig.getUsername(), bridgeConfig.getsmileId());\n+                scheduleRefreshJob(bridgeConfig);\n+            } catch (PlugwiseHAException e) {\n+                logger.debug(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());", "originalCommit": "1986063a1579af24148c0f220862dbd5f4495f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk0MzI4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632943286", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-15T12:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNDgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNDk0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632934941", "bodyText": "Unchecked exceptions don't need to be cought here. The framework will do it and set the Thing status accordingly.", "author": "fwolter", "createdAt": "2021-05-15T11:41:50Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        PlugwiseHABridgeThingConfig bridgeConfig = getConfigAs(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig(bridgeConfig)) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", bridgeConfig);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, bridgeConfig.getHost(), bridgeConfig.getPort(),\n+                        bridgeConfig.getUsername(), bridgeConfig.getsmileId());\n+                scheduleRefreshJob(bridgeConfig);\n+            } catch (PlugwiseHAException e) {\n+                logger.debug(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            } catch (RuntimeException e) {\n+                logger.debug(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+            }", "originalCommit": "1986063a1579af24148c0f220862dbd5f4495f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk0MzQzOA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632943438", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-15T12:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNDk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNTAxMg==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632935012", "bodyText": "See above. Remove log message.", "author": "fwolter", "createdAt": "2021-05-15T11:42:43Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHABridgeHandler.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.OFFLINE;\n+import static org.openhab.core.thing.ThingStatus.ONLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHACommunicationException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAInvalidHostException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHANotAuthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHATimeoutException;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAUnauthorizedException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAModel;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.GatewayInfo;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHABridgeThingConfig;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.binding.plugwiseha.internal.discovery.PlugwiseHADiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHABridgeHandler} class is responsible for handling\n+ * commands and status updates for the Plugwise Home Automation bridge.\n+ * Extends @{link BaseBridgeHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ * \n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHABridgeHandler extends BaseBridgeHandler {\n+\n+    // Private Static error messages\n+\n+    private static final String STATUS_DESCRIPTION_COMMUNICATION_ERROR = \"Error communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_TIMEOUT = \"Communication timeout while communicating with the Plugwise Home Automation controller\";\n+    private static final String STATUS_DESCRIPTION_CONFIGURATION_ERROR = \"Invalid or missing configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_CREDENTIALS = \"Invalid username and/or password - please double-check your configuration\";\n+    private static final String STATUS_DESCRIPTION_INVALID_HOSTNAME = \"Invalid hostname - please double-check your configuration\";\n+\n+    // Private member variables/constants\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable volatile PlugwiseHAController controller;\n+\n+    private final HttpClient httpClient;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHABridgeHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHABridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    // Public methods\n+\n+    @Override\n+    public void initialize() {\n+        PlugwiseHABridgeThingConfig bridgeConfig = getConfigAs(PlugwiseHABridgeThingConfig.class);\n+\n+        if (this.checkConfig(bridgeConfig)) {\n+            logger.debug(\"Initializing the Plugwise Home Automation bridge handler with config = {}\", bridgeConfig);\n+            try {\n+                this.controller = new PlugwiseHAController(httpClient, bridgeConfig.getHost(), bridgeConfig.getPort(),\n+                        bridgeConfig.getUsername(), bridgeConfig.getsmileId());\n+                scheduleRefreshJob(bridgeConfig);\n+            } catch (PlugwiseHAException e) {\n+                logger.debug(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR, e.getMessage());\n+            } catch (RuntimeException e) {\n+                logger.debug(\"Unknown error while configuring the Plugwise Home Automation Controller\", e);\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+            }\n+\n+        } else {\n+            logger.warn(\"Invalid config for the Plugwise Home Automation bridge handler with config = {}\",\n+                    bridgeConfig);\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(PlugwiseHADiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        this.logger.warn(\n+                \"Ignoring command = {} for channel = {} - this channel for the Plugwise Home Automation binding is read-only!\",\n+                command, channelUID);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefreshJob();\n+        if (this.controller != null) {\n+            this.controller = null;\n+        }\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_BRIDGE_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    // Getters & setters\n+\n+    public @Nullable PlugwiseHAController getController() {\n+        return this.controller;\n+    }\n+\n+    // Protected and private methods\n+\n+    /**\n+     * Checks the configuration for validity, result is reflected in the status of\n+     * the Thing\n+     */\n+    private boolean checkConfig(PlugwiseHABridgeThingConfig bridgeConfig) {\n+        if (!bridgeConfig.isValid()) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_CONFIGURATION_ERROR);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void scheduleRefreshJob(PlugwiseHABridgeThingConfig bridgeConfig) {\n+        synchronized (this) {\n+            if (this.refreshJob == null) {\n+                logger.debug(\"Scheduling refresh job every {}s\", bridgeConfig.getRefresh());\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::run, 0, bridgeConfig.getRefresh(),\n+                        TimeUnit.SECONDS);\n+            }\n+        }\n+    }\n+\n+    private void run() {\n+        try {\n+            logger.trace(\"Executing refresh job\");\n+            refresh();\n+\n+            if (super.thing.getStatus() == ThingStatus.INITIALIZING) {\n+                setBridgeProperties();\n+            }\n+\n+        } catch (PlugwiseHAInvalidHostException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_HOSTNAME);\n+        } catch (PlugwiseHAUnauthorizedException | PlugwiseHANotAuthorizedException e) {\n+            updateStatus(OFFLINE, CONFIGURATION_ERROR, STATUS_DESCRIPTION_INVALID_CREDENTIALS);\n+        } catch (PlugwiseHACommunicationException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_COMMUNICATION_ERROR);\n+        } catch (PlugwiseHATimeoutException e) {\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, STATUS_DESCRIPTION_TIMEOUT);\n+        } catch (PlugwiseHAException e) {\n+            logger.debug(\"Unhandled exception while refreshing the Plugwise Home Automation Controller {} - {}\",\n+                    getThing().getUID(), e.getMessage());\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+        } catch (RuntimeException e) {\n+            logger.debug(\"Unhandled RunTimeException while refreshing the Plugwise Home Automation Controller {} - {}\",\n+                    getThing().getUID(), e.getMessage());\n+            updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());", "originalCommit": "1986063a1579af24148c0f220862dbd5f4495f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk0MzUzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632943535", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-15T12:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNTAxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNTE3NA==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632935174", "bodyText": "See above. Use wildcard.", "author": "fwolter", "createdAt": "2021-05-15T11:44:06Z", "path": "bundles/org.openhab.binding.plugwiseha/src/main/java/org/openhab/binding/plugwiseha/internal/handler/PlugwiseHAZoneHandler.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.plugwiseha.internal.handler;\n+\n+import static org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants.*;\n+import static org.openhab.core.thing.ThingStatus.*;\n+import static org.openhab.core.thing.ThingStatusDetail.BRIDGE_OFFLINE;\n+import static org.openhab.core.thing.ThingStatusDetail.COMMUNICATION_ERROR;\n+import static org.openhab.core.thing.ThingStatusDetail.CONFIGURATION_ERROR;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.plugwiseha.internal.PlugwiseHABindingConstants;\n+import org.openhab.binding.plugwiseha.internal.api.exception.PlugwiseHAException;\n+import org.openhab.binding.plugwiseha.internal.api.model.PlugwiseHAController;\n+import org.openhab.binding.plugwiseha.internal.api.model.dto.Location;\n+import org.openhab.binding.plugwiseha.internal.config.PlugwiseHAThingConfig;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PlugwiseHAZoneHandler} class is responsible for handling commands\n+ * and status updates for the Plugwise Home Automation zones/locations.\n+ * Extends @{link PlugwiseHABaseHandler}\n+ *\n+ * @author Bas van Wetten - Initial contribution\n+ * @author Leo Siepel - finish initial contribution\n+ *\n+ */\n+\n+@NonNullByDefault\n+public class PlugwiseHAZoneHandler extends PlugwiseHABaseHandler<Location, PlugwiseHAThingConfig> {\n+\n+    private @Nullable Location location;\n+    private final Logger logger = LoggerFactory.getLogger(PlugwiseHAZoneHandler.class);\n+\n+    // Constructor\n+\n+    public PlugwiseHAZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public static boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return PlugwiseHABindingConstants.THING_TYPE_ZONE.equals(thingTypeUID);\n+    }\n+\n+    // Overrides\n+\n+    @Override\n+    protected synchronized void initialize(PlugwiseHAThingConfig config, PlugwiseHABridgeHandler bridgeHandler) {\n+        if (thing.getStatus() == INITIALIZING) {\n+            logger.debug(\"Initializing Plugwise Home Automation zone handler with config = {}\", config);\n+            if (!config.isValid()) {\n+                updateStatus(OFFLINE, CONFIGURATION_ERROR,\n+                        \"Invalid configuration for Plugwise Home Automation zone handler.\");\n+                return;\n+            }\n+\n+            try {\n+                PlugwiseHAController controller = bridgeHandler.getController();\n+                if (controller != null) {\n+                    this.location = getEntity(controller, true);\n+                    if (this.location != null) {\n+                        setLocationProperties();\n+                        updateStatus(ONLINE);\n+                    } else {\n+                        updateStatus(OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(OFFLINE, BRIDGE_OFFLINE);\n+                }\n+            } catch (PlugwiseHAException e) {\n+                updateStatus(OFFLINE, COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable Location getEntity(PlugwiseHAController controller, Boolean forceRefresh)\n+            throws PlugwiseHAException {\n+        PlugwiseHAThingConfig config = getPlugwiseThingConfig();\n+        Location location = controller.getLocation(config.getId(), forceRefresh);\n+\n+        return location;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected void handleCommand(Location entity, ChannelUID channelUID, Command command) throws PlugwiseHAException {\n+        String channelID = channelUID.getIdWithoutGroup();\n+        PlugwiseHABridgeHandler bridge = this.getPlugwiseHABridge();\n+        if (bridge != null) {\n+            PlugwiseHAController controller = bridge.getController();\n+            if (controller != null) {\n+                switch (channelID) {\n+                    case ZONE_SETPOINT_CHANNEL:\n+                        if (command instanceof QuantityType) {\n+                            Unit<Temperature> unit = entity.getSetpointTemperatureUnit().orElse(UNIT_CELSIUS)\n+                                    .equals(UNIT_CELSIUS) ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                            QuantityType<Temperature> state = ((QuantityType<Temperature>) command).toUnit(unit);", "originalCommit": "1986063a1579af24148c0f220862dbd5f4495f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk0MzYxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9504#discussion_r632943615", "bodyText": "fixed", "author": "lsiepel", "createdAt": "2021-05-15T12:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNTE3NA=="}], "type": "inlineReview"}, {"oid": "5f509a528b8813728d9eeeabbd3c8cd21e7eb5c1", "url": "https://github.com/openhab/openhab-addons/commit/5f509a528b8813728d9eeeabbd3c8cd21e7eb5c1", "message": "Fixed fwolter comments\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-15T12:34:35Z", "type": "commit"}, {"oid": "4302c2309159a7e035cab410b10df07e46745507", "url": "https://github.com/openhab/openhab-addons/commit/4302c2309159a7e035cab410b10df07e46745507", "message": "DTO => intermediate\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-15T18:38:56Z", "type": "commit"}, {"oid": "3c563dcf8ebdc51d2897f518aa6af74f9af68160", "url": "https://github.com/openhab/openhab-addons/commit/3c563dcf8ebdc51d2897f518aa6af74f9af68160", "message": "intermediate => dto\n\nSigned-off-by: Leo Siepel <leosiepel@gmail.com>", "committedDate": "2021-05-15T18:39:49Z", "type": "commit"}]}