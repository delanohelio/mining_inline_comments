{"pr_number": 8780, "pr_title": "[dbquery] Initial contribution", "pr_createdAt": "2020-10-17T17:15:49Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8780", "timeline": [{"oid": "0895e0391820ab994ab21cc2a8b4d8d9cc368bab", "url": "https://github.com/openhab/openhab-addons/commit/0895e0391820ab994ab21cc2a8b4d8d9cc368bab", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-09-30T20:27:32Z", "type": "commit"}, {"oid": "cf1155ae555b8f31c8466ce06d0b7c7c4f230b62", "url": "https://github.com/openhab/openhab-addons/commit/cf1155ae555b8f31c8466ce06d0b7c7c4f230b62", "message": "README documentation imporovements\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2021-09-30T21:08:21Z", "type": "commit"}, {"oid": "fc2be943c926f2e26bea5a03434c68de6133b7de", "url": "https://github.com/openhab/openhab-addons/commit/fc2be943c926f2e26bea5a03434c68de6133b7de", "message": "Fix format issue\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2021-09-30T21:33:29Z", "type": "commit"}, {"id": "PRRC_kwDOAS1o684q88Et", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r720617773", "bodyText": "Can you remove this library and use Java 11 methods instead? See #7722", "author": "Skinah", "createdAt": "2021-10-02T03:17:52Z", "path": "bundles/org.openhab.binding.dbquery/pom.xml", "diffHunk": "@@ -0,0 +1,107 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.2.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.dbquery</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: DBQuery Binding</name>\n+\n+  <properties>\n+    <bnd.importpackage>\n+      !javax.annotation;!android.*,!com.android.*,!com.google.appengine.*,!dalvik.system,!kotlin.*,!kotlinx.*,!org.conscrypt,!sun.security.ssl,!org.apache.harmony.*,!org.apache.http.*,!rx.*,!org.msgpack.*\n+    </bnd.importpackage>\n+  </properties>\n+\n+  <dependencies>\n+    <!-- influxdb-client-java -->\n+    <dependency>\n+      <groupId>com.influxdb</groupId>\n+      <artifactId>influxdb-client-java</artifactId>\n+      <version>1.6.0</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>influxdb-client-core</artifactId>\n+      <groupId>com.influxdb</groupId>\n+      <version>1.6.0</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>converter-gson</artifactId>\n+      <groupId>com.squareup.retrofit2</groupId>\n+      <version>2.5.0</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>converter-scalars</artifactId>\n+      <groupId>com.squareup.retrofit2</groupId>\n+      <version>2.5.0</version>\n+    </dependency>\n+    <dependency> <!-- also used for querydb library -->\n+      <artifactId>gson</artifactId>\n+      <groupId>com.google.code.gson</groupId>\n+      <version>2.8.5</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>gson-fire</artifactId>\n+      <groupId>io.gsonfire</groupId>\n+      <version>1.8.0</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>okio</artifactId>\n+      <groupId>com.squareup.okio</groupId>\n+      <version>1.17.3</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>commons-csv</artifactId>\n+      <groupId>org.apache.commons</groupId>\n+      <version>1.6</version>\n+    </dependency>", "originalCommit": "fc2be943c926f2e26bea5a03434c68de6133b7de", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684q8-bS", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r720627410", "bodyText": "@Skinah I'm sorry but it's not possible to do it in a safe way.\nThe addon doesn't use commons code at all, but the influxdb driver uses it and it's not documented as an optional dependency.\nAlso, I don't know if it applied to that dependency because up to my knowledge  there isn't any support for csv parsing in Java 11", "author": "lujop", "createdAt": "2021-10-02T05:00:18Z", "replyToReviewId": "PRRC_kwDOAS1o684q88Et"}, {"id": "PRRC_kwDOAS1o684q8_bP", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r720631503", "bodyText": "@fwolter can you comment on this one please? thanks.", "author": "Skinah", "createdAt": "2021-10-02T05:43:49Z", "replyToReviewId": "PRRC_kwDOAS1o684q88Et"}, {"id": "PRRC_kwDOAS1o684q9AUJ", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r720635145", "bodyText": "Seems to be a reasonable usage of Apache commons in this case.", "author": "fwolter", "createdAt": "2021-10-02T06:19:26Z", "replyToReviewId": "PRRC_kwDOAS1o684q88Et"}], "type": "inlineReview"}, {"oid": "32ce39538cc1aa14f1cd263d0ba9cf11c5cb7d5b", "url": "https://github.com/openhab/openhab-addons/commit/32ce39538cc1aa14f1cd263d0ba9cf11c5cb7d5b", "message": "Initial commit\n\nIntial work history lost due to the repository shrunk done at c53e4aed2627ec899c083170430399f8925e3345 (intially started from old unshrunked repo)\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:17Z", "type": "commit"}, {"oid": "93acd408cd537508547c9149117bb744c7fcf24a", "url": "https://github.com/openhab/openhab-addons/commit/93acd408cd537508547c9149117bb744c7fcf24a", "message": "Implement reconnect attempts\n\nIf database can be connected at bridge initialization schedule retry attempts.\nPrevent  query execution scheduling if bridge isn't online\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "c60896ea342424250539a7393e9de16c84a9297d", "url": "https://github.com/openhab/openhab-addons/commit/c60896ea342424250539a7393e9de16c84a9297d", "message": "Minor documentation changes and fix trigger channel name\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "7974e3abb1fc5def1532546ae0afa2c9223675fc", "url": "https://github.com/openhab/openhab-addons/commit/7974e3abb1fc5def1532546ae0afa2c9223675fc", "message": "Fix NPE bug initializing ThingActions\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "ac330aec2a248312dc7d55e05d0ca156733d6761", "url": "https://github.com/openhab/openhab-addons/commit/ac330aec2a248312dc7d55e05d0ca156733d6761", "message": "Implement query actions and another fixes\n\nImplement actions to execute query and get last query result\nCorrectly serialize as JSON non scalar results to result channels\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "a27571308eec177d4800228d72ff1c33d7a3f9f3", "url": "https://github.com/openhab/openhab-addons/commit/a27571308eec177d4800228d72ff1c33d7a3f9f3", "message": "Update parameters and correct channel\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "98a55ada5822bb52964b6d575efec3d6041df945", "url": "https://github.com/openhab/openhab-addons/commit/98a55ada5822bb52964b6d575efec3d6041df945", "message": "Fix formatting and forgot part on previous commit\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "587426847088bf87d4a01eb29bf8d5a4804120f8", "url": "https://github.com/openhab/openhab-addons/commit/587426847088bf87d4a01eb29bf8d5a4804120f8", "message": "Improve documentation\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "4e75253fba16cc2cba455eedab1bfd0fd7ec4713", "url": "https://github.com/openhab/openhab-addons/commit/4e75253fba16cc2cba455eedab1bfd0fd7ec4713", "message": "Add javadoc comment and license to all classes\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "99f4dbfb1478472c94f4f74deacc65f056386e43", "url": "https://github.com/openhab/openhab-addons/commit/99f4dbfb1478472c94f4f74deacc65f056386e43", "message": "Code cleanup\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "e7ee6b2df898ee542e9fc8a260141006d6db8a23", "url": "https://github.com/openhab/openhab-addons/commit/e7ee6b2df898ee542e9fc8a260141006d6db8a23", "message": "Untrack unused i18n file\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "f219a4af13a3b331fffe77b4e4504491c5779748", "url": "https://github.com/openhab/openhab-addons/commit/f219a4af13a3b331fffe77b4e4504491c5779748", "message": "Fix log level for query actions trace information\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "41e78270abc6c7ab37ba6ad8da10f8d576ddf2e7", "url": "https://github.com/openhab/openhab-addons/commit/41e78270abc6c7ab37ba6ad8da10f8d576ddf2e7", "message": "Add dbquery addon to bundles pom\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "21c09957b5850230e1cf1bd2a83a42a088641a45", "url": "https://github.com/openhab/openhab-addons/commit/21c09957b5850230e1cf1bd2a83a42a088641a45", "message": "Temporary remove mqtt bindings that make travis build to fail\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:18Z", "type": "commit"}, {"oid": "b4ac7b56677617f1e2e743de4e0b891e46937a20", "url": "https://github.com/openhab/openhab-addons/commit/b4ac7b56677617f1e2e743de4e0b891e46937a20", "message": "Fix formatting issue\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:19Z", "type": "commit"}, {"oid": "b4ac7b56677617f1e2e743de4e0b891e46937a20", "url": "https://github.com/openhab/openhab-addons/commit/b4ac7b56677617f1e2e743de4e0b891e46937a20", "message": "Fix formatting issue\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-17T21:32:19Z", "type": "forcePushed"}, {"oid": "06802a8cc1e0cb1b17fe0a1a5f86e5b9c1a9d0ff", "url": "https://github.com/openhab/openhab-addons/commit/06802a8cc1e0cb1b17fe0a1a5f86e5b9c1a9d0ff", "message": "Revert \"Temporary remove mqtt bindings that make travis build to fail\"\n\nThis reverts commit 21c09957b5850230e1cf1bd2a83a42a088641a45.\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-18T07:21:45Z", "type": "commit"}, {"oid": "06802a8cc1e0cb1b17fe0a1a5f86e5b9c1a9d0ff", "url": "https://github.com/openhab/openhab-addons/commit/06802a8cc1e0cb1b17fe0a1a5f86e5b9c1a9d0ff", "message": "Revert \"Temporary remove mqtt bindings that make travis build to fail\"\n\nThis reverts commit 21c09957b5850230e1cf1bd2a83a42a088641a45.\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-18T07:21:45Z", "type": "forcePushed"}, {"oid": "2a6fec89a24c8c2264f5e1ae88b2d77719635f31", "url": "https://github.com/openhab/openhab-addons/commit/2a6fec89a24c8c2264f5e1ae88b2d77719635f31", "message": "Code clean up from static analysis\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2020-10-18T21:33:29Z", "type": "commit"}, {"oid": "ba2ae9f3d63f3e648f119f1274335f2016e75874", "url": "https://github.com/openhab/openhab-addons/commit/ba2ae9f3d63f3e648f119f1274335f2016e75874", "message": "Merge branch 'main' into dbquery_initial_submission", "committedDate": "2021-02-25T07:52:31Z", "type": "commit"}, {"oid": "c7efbcf0b019098c842e2530b6453b67c6ee301c", "url": "https://github.com/openhab/openhab-addons/commit/c7efbcf0b019098c842e2530b6453b67c6ee301c", "message": "Update code to be compatible with 3.1.0\n\nUpdate dependencies version\nUpdate Copyright\nOther minor changes for new static analysis validations.\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2021-03-05T20:44:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NTU5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r632995599", "bodyText": "If you want to release it without JDBC support first, better don't mention it here.", "author": "fwolter", "createdAt": "2021-05-15T19:12:52Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,214 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently supports InfluxDB 2.0 and will support major relational databases through JDBC.", "originalCommit": "c7efbcf0b019098c842e2530b6453b67c6ee301c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzU5NTMzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r637595336", "bodyText": "Ok, I will remove it.\nIf I found some time, and now that you are reviewing it, and I hope it can be accepted after making desired corrections. I hope to work on the SQL binding soon but I think it's better to be able to integrate current work just In case I found little time and it comes later.\nIn fact, I want to try TimescaleDB for measurements and will need to implement that part because being able to integrate iotawatt readings is a must for me.", "author": "lujop", "createdAt": "2021-05-23T20:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NTU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NTYwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r632995609", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Integrate a device that stores it's data in a database\n          \n          \n            \n            - Integrate a device that stores its data in a database", "author": "fwolter", "createdAt": "2021-05-15T19:13:00Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,214 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently supports InfluxDB 2.0 and will support major relational databases through JDBC.\n+\n+You can use the addon in any situation where you want to create an item from a native SQL query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in InfluxDB.\n+Some use cases can be:\n+\n+- Integrate a device that stores it's data in a database", "originalCommit": "c7efbcf0b019098c842e2530b6453b67c6ee301c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NTY0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r632995641", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Query derived data from you OpenHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n          \n          \n            \n            - Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one", "author": "fwolter", "createdAt": "2021-05-15T19:13:10Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,214 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently supports InfluxDB 2.0 and will support major relational databases through JDBC.\n+\n+You can use the addon in any situation where you want to create an item from a native SQL query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in InfluxDB.\n+Some use cases can be:\n+\n+- Integrate a device that stores it's data in a database\n+- Query derived data from you OpenHAB persistence, for example with Influx2 tasks you can process your data to create a new one   ", "originalCommit": "c7efbcf0b019098c842e2530b6453b67c6ee301c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NTY4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r632995689", "bodyText": "Thing type UIDs should start with lower case. Also, the real Thing Type UIDs should be mentioned here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are two types of supported things: `DatabaseBridge` and a `Query`.\n          \n          \n            \n            There are two types of supported things: `Influx2Bridge` and `Query`.", "author": "fwolter", "createdAt": "2021-05-15T19:13:46Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,214 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently supports InfluxDB 2.0 and will support major relational databases through JDBC.\n+\n+You can use the addon in any situation where you want to create an item from a native SQL query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in InfluxDB.\n+Some use cases can be:\n+\n+- Integrate a device that stores it's data in a database\n+- Query derived data from you OpenHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current OpenHAb persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `DatabaseBridge` and a `Query`.", "originalCommit": "c7efbcf0b019098c842e2530b6453b67c6ee301c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NjIwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r632996207", "bodyText": "If it's not implemented, better remove it from here.", "author": "fwolter", "createdAt": "2021-05-15T19:19:19Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,214 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently supports InfluxDB 2.0 and will support major relational databases through JDBC.\n+\n+You can use the addon in any situation where you want to create an item from a native SQL query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in InfluxDB.\n+Some use cases can be:\n+\n+- Integrate a device that stores it's data in a database\n+- Query derived data from you OpenHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current OpenHAb persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `DatabaseBridge` and a `Query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `Influx2Bridge`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### Influx2Bridge\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### Query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `Influx2Bridge`\n+ - SQL for `JDBCBridge`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do it's best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.", "originalCommit": "c7efbcf0b019098c842e2530b6453b67c6ee301c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NjMzMw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r632996333", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | correct         | Switch    | True if the result of last executed query was correct |\n          \n          \n            \n            | correct         | Switch    | ON if the result of last executed query was correct |", "author": "fwolter", "createdAt": "2021-05-15T19:20:42Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,214 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently supports InfluxDB 2.0 and will support major relational databases through JDBC.\n+\n+You can use the addon in any situation where you want to create an item from a native SQL query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in InfluxDB.\n+Some use cases can be:\n+\n+- Integrate a device that stores it's data in a database\n+- Query derived data from you OpenHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current OpenHAb persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `DatabaseBridge` and a `Query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `Influx2Bridge`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### Influx2Bridge\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### Query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `Influx2Bridge`\n+ - SQL for `JDBCBridge`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do it's best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |\n+| resultNumber    | Number    | Result of last executed query as a Number, query must have `scalarResult=true` |\n+| resultDateTime  | DateTime  | Result of last executed query as a DateTime, query must have `scalarResult=true` |\n+| resultContact   | Contact   | Result of last executed query as Contact, query must have `scalarResult=true` |\n+| resultSwitch    | Switch    | Result of last executed query as Switch, query must have `scalarResult=true` |\n+| parameters      | String    | Contains parameters of last executed query as JSON|\n+| correct         | Switch    | True if the result of last executed query was correct |", "originalCommit": "c7efbcf0b019098c842e2530b6453b67c6ee301c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r632997341", "bodyText": "Did you consider adding the dependencies via Karaf (feature.xml), so that the dependencies need to be downloaded only once if the influxdb persistence is also installed? (To make this work, the same adjustment needs to be done to the persistence addon)", "author": "fwolter", "createdAt": "2021-05-15T19:31:02Z", "path": "bundles/org.openhab.binding.dbquery/pom.xml", "diffHunk": "@@ -0,0 +1,107 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.dbquery</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: DBQuery Binding</name>\n+\n+  <properties>\n+    <bnd.importpackage>\n+      !javax.annotation;!android.*,!com.android.*,!com.google.appengine.*,!dalvik.system,!kotlin.*,!kotlinx.*,!org.conscrypt,!sun.security.ssl,!org.apache.harmony.*,!org.apache.http.*,!rx.*,!org.msgpack.*\n+    </bnd.importpackage>\n+  </properties>\n+\n+  <dependencies>\n+    <!-- influxdb-client-java -->\n+    <dependency>\n+      <groupId>com.influxdb</groupId>", "originalCommit": "c7efbcf0b019098c842e2530b6453b67c6ee301c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzYwMTU5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r637601593", "bodyText": "My intent, if it's possible, is to maintain independence between the persistence plugins.\nTo be able to evolve differently if needed and use different versions or implementations in the future if it's desired.", "author": "lujop", "createdAt": "2021-05-23T21:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA0ODE5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r640048199", "bodyText": "If the versions differ, both versions will be used. But if the versions are identical, the dependency will be reused. You won't introduce a dependency between the two.", "author": "fwolter", "createdAt": "2021-05-26T19:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjEwMjE0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r642102147", "bodyText": "You're right.\nOk, I will try then but will need some support and guidance on that.\nIs there any recent PR or documentation that I can take as a reference on how to do it?\nAlso, I will try to do all corrections in a row when you finish the review.", "author": "lujop", "createdAt": "2021-05-30T16:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTk4NDM4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r645984389", "bodyText": "You could take a look here:  \n  \n    \n      openhab-addons/bundles/org.openhab.binding.ahawastecollection/src/main/feature/feature.xml\n    \n    \n         Line 7\n      in\n      d36e1f1\n    \n    \n    \n    \n\n        \n          \n           <bundle dependency=\"true\">mvn:org.jsoup/jsoup/1.8.3</bundle>", "author": "fwolter", "createdAt": "2021-06-05T12:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU1MjI0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693552244", "bodyText": "@fwolter: It's only adding that line and leaving the pom the same way?\nOr it's needed to create the bundle too?", "author": "lujop", "createdAt": "2021-08-22T20:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODcxMzEzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r698713137", "bodyText": "You don't need to create any bundle. But you need to change the scope in the pom.xml from compile to provided.", "author": "fwolter", "createdAt": "2021-08-30T18:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ=="}, {"id": "PRRC_kwDOAS1o684qakgw", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711608368", "bodyText": "If it's possible I prefer to leave this as it is for this first version.\nBecause I prefer to don't put more changes including modification of persistence addon.", "author": "lujop", "createdAt": "2021-09-18T16:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ=="}, {"id": "PRRC_kwDOAS1o684qbAE3", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711721271", "bodyText": "OK", "author": "fwolter", "createdAt": "2021-09-19T10:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5NzM0MQ=="}], "type": "inlineReview"}, {"oid": "6f0c1144e51b82af7b013335aa2f3d3cc9508ef7", "url": "https://github.com/openhab/openhab-addons/commit/6f0c1144e51b82af7b013335aa2f3d3cc9508ef7", "message": "Merge branch 'main' into dbquery_initial_submission", "committedDate": "2021-05-23T20:33:04Z", "type": "commit"}, {"oid": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "url": "https://github.com/openhab/openhab-addons/commit/4afe2afe92b85efe8ab0821f7cc78792347351d4", "message": "Requested PR changes\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2021-05-23T21:09:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODIxNzQ1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648217453", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n          \n          \n            \n            be any supported database, and don't need to be the one you use as persistence service in openHAB.\n          \n          \n            \n            You can use the addon in any situation where you want to create an item from a native query.\n          \n          \n            \n            The source of the query can be any supported database, and doesn't need to be the one you use as the persistence service in openHAB.", "author": "Skinah", "createdAt": "2021-06-09T11:37:24Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODIxNzcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648217715", "bodyText": "2.0 or 2.x ?", "author": "Skinah", "createdAt": "2021-06-09T11:37:46Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjM3ODE4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r692378183", "bodyText": "At the moment there is only 2.0 version, but hope to be compatible with 2.x\nI will change.", "author": "lujop", "createdAt": "2021-08-19T18:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODIxNzcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODIyNjU5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648226599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n      \n    \n    \n  \n\nI think the code analysis report will flag this. Only one empty line.", "author": "Skinah", "createdAt": "2021-06-09T11:51:17Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODIzNTk3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648235978", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For each different database, you want to connect you must define a `Bridge` thing for that database.\n          \n          \n            \n            For each different database you want to connect to, you must define a `Bridge` thing for that database.", "author": "Skinah", "createdAt": "2021-06-09T12:05:26Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODIzNjg5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648236892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n          \n          \n            \n            Then each `Bridge` can define as many `Query` things that you want to execute.", "author": "Skinah", "createdAt": "2021-06-09T12:06:51Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODI0MjI1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648242253", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Current supported `Bridge` is:\n          \n          \n            \n            \n          \n          \n            \n            - `influxdb2`\n          \n      \n    \n    \n  \n\nNot needed as the text above and below are enough.", "author": "Skinah", "createdAt": "2021-06-09T12:14:31Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODI1NjEzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648256138", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            that are described further in the following subsections\n          \n          \n            \n            These are described further in the following subsections.", "author": "Skinah", "createdAt": "2021-06-09T12:33:33Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODI1NzMwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648257307", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n          \n          \n            \n            A time-out in seconds to wait for the query result, if it's exceeded, the result will be discarded and the addon will do its best to cancel the query.", "author": "Skinah", "createdAt": "2021-06-09T12:35:10Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgyMDE1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648820159", "bodyText": "How often does this run? Consider creating a single static constant BigDecimal and reusing it in any of your classes that need it... Example\npublic static final BigDecimal BIG_DECIMAL_182_04 = new BigDecimal(182.04);\nYou are also using a similar line of code a new lines lower down in this same file so same comment applies. This appears to be parsing a String to create the BigDecimal which is costly to do , when you can provide a number instead that is not a string.", "author": "Skinah", "createdAt": "2021-06-10T03:18:36Z", "path": "bundles/org.openhab.binding.dbquery/src/test/java/org/openhab/binding/dbquery/internal/Value2StateConverterTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.hamcrest.CoreMatchers.anyOf;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.number.IsCloseTo.closeTo;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.Charset;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Base64;\n+import java.util.Date;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault({})\n+class Value2StateConverterTest {\n+    private Value2StateConverter instance;\n+\n+    @BeforeEach\n+    void setUp() {\n+        instance = new Value2StateConverter();\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        instance = null;\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(classes = { StringType.class, DecimalType.class, DateTimeType.class, OpenClosedType.class,\n+            OnOffType.class })\n+    void given_null_value_return_undef(Class<State> classe) {\n+        assertThat(instance.convertValue(null, classe), is(UnDefType.NULL));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = { \"\", \"stringValue\" })\n+    void given_string_value_and_string_target_return_stringtype(String value) {\n+        var converted = instance.convertValue(value, StringType.class);\n+        assertThat(converted.toFullString(), is(value));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideValuesOfAllSupportedResultRowTypesExceptBytes\")\n+    void given_valid_object_types_and_string_target_return_stringtype_with_string(Object value) {\n+        var converted = instance.convertValue(value, StringType.class);\n+        assertThat(converted.toFullString(), is(value.toString()));\n+    }\n+\n+    @Test\n+    void given_byte_array_and_string_target_return_encoded_base64() {\n+        var someBytes = \"Hello world\".getBytes(Charset.defaultCharset());\n+        var someBytesB64 = Base64.getEncoder().encodeToString(someBytes);\n+        var converted = instance.convertValue(someBytes, StringType.class);\n+        assertThat(converted.toFullString(), is(someBytesB64));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideNumericTypes\")\n+    void given_numeric_type_and_decimal_target_return_decimaltype(Number value) {\n+        var converted = instance.convertValue(value, DecimalType.class);\n+        assertThat(converted, instanceOf(DecimalType.class));\n+        assertThat(((DecimalType) converted).doubleValue(), closeTo(value.doubleValue(), 0.01d));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideNumericTypes\")\n+    void given_numeric_string_and_decimal_target_return_decimaltype(Number value) {\n+        var numberString = value.toString();\n+        var converted = instance.convertValue(numberString, DecimalType.class);\n+        assertThat(converted, instanceOf(DecimalType.class));\n+        assertThat(((DecimalType) converted).doubleValue(), closeTo(value.doubleValue(), 0.01d));\n+    }\n+\n+    @Test\n+    void given_duration_and_decimal_target_return_decimaltype_with_milliseconds() {\n+        var duration = Duration.ofDays(1);\n+        var converted = instance.convertValue(duration, DecimalType.class);\n+        assertThat(converted, instanceOf(DecimalType.class));\n+        assertThat(((DecimalType) converted).longValue(), is(duration.toMillis()));\n+    }\n+\n+    @Test\n+    void given_instant_and_datetime_target_return_datetype() {\n+        var instant = Instant.now();\n+        var converted = instance.convertValue(instant, DateTimeType.class);\n+        assertThat(converted, instanceOf(DateTimeType.class));\n+        assertThat(((DateTimeType) converted).getZonedDateTime(),\n+                is(ZonedDateTime.ofInstant(instant, ZoneId.systemDefault()).withFixedOffsetZone()));\n+    }\n+\n+    @Test\n+    void given_date_and_datetime_target_return_datetype() {\n+        var date = new Date();\n+        var converted = instance.convertValue(date, DateTimeType.class);\n+        assertThat(converted, instanceOf(DateTimeType.class));\n+        assertThat(((DateTimeType) converted).getZonedDateTime(),\n+                is(ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault()).withFixedOffsetZone()));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = { \"2019-10-12T07:20:50.52Z\", \"2019-10-12\" })\n+    void given_valid_string_date_and_datetime_target_return_datetype(String date) {\n+        var converted = instance.convertValue(date, DateTimeType.class);\n+        assertThat(converted, instanceOf(DateTimeType.class));\n+        var convertedDateTime = ((DateTimeType) converted).getZonedDateTime();\n+        assertThat(convertedDateTime.getYear(), is(2019));\n+        assertThat(convertedDateTime.getMonthValue(), is(10));\n+        assertThat(convertedDateTime.getDayOfMonth(), is(12));\n+        assertThat(convertedDateTime.getHour(), anyOf(is(7), is(0)));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"trueValues\")\n+    void given_values_considerated_true_and_on_off_target_return_on(Object value) {\n+        var converted = instance.convertValue(value, OnOffType.class);\n+        assertThat(converted, instanceOf(OnOffType.class));\n+        assertThat(converted, is(OnOffType.ON));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"falseValues\")\n+    void given_values_considerated_false_and_on_off_target_return_off(Object value) {\n+        var converted = instance.convertValue(value, OnOffType.class);\n+        assertThat(converted, instanceOf(OnOffType.class));\n+        assertThat(converted, is(OnOffType.OFF));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"trueValues\")\n+    void given_values_considerated_true_and_open_closed_target_return_open(Object value) {\n+        var converted = instance.convertValue(value, OpenClosedType.class);\n+        assertThat(converted, instanceOf(OpenClosedType.class));\n+        assertThat(converted, is(OpenClosedType.OPEN));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"falseValues\")\n+    void given_values_considerated_false_and_open_closed_target_return_closed(Object value) {\n+        var converted = instance.convertValue(value, OpenClosedType.class);\n+        assertThat(converted, instanceOf(OpenClosedType.class));\n+        assertThat(converted, is(OpenClosedType.CLOSED));\n+    }\n+\n+    private static Stream<Object> trueValues() {\n+        return Stream.of(\"true\", \"True\", 1, 2, \"On\", \"on\", -1, 0.3);\n+    }\n+\n+    private static Stream<Object> falseValues() {\n+        return Stream.of(\"false\", \"False\", 0, 0.0d, \"off\", \"Off\", \"\", \"a value\");\n+    }\n+\n+    private static Stream<Number> provideNumericTypes() {\n+        return Stream.of(1L, 1.2, 1.2f, -1, 0, new BigDecimal(\"212321213123123123123123\"));", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU0ODU2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693548563", "bodyText": "Done the static part, about the string it's used because I want to test a real big number that can't be expressed in a long literal string.\nAs this is a test I think that is best to test edge cases than premature optimization", "author": "lujop", "createdAt": "2021-08-22T19:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgyMDE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODg1MjY4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648852682", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When a query has `hasParameters=true` it fires the `calculateParameters` channel trigger and pause the execution until `setQueryParameters` action is call in\n          \n          \n            \n            When a query has `hasParameters=true` it fires the `calculateParameters` channel trigger and pauses the execution until `setQueryParameters` action is call in", "author": "Skinah", "createdAt": "2021-06-10T05:06:56Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |\n+| resultNumber    | Number    | Result of last executed query as a Number, query must have `scalarResult=true` |\n+| resultDateTime  | DateTime  | Result of last executed query as a DateTime, query must have `scalarResult=true` |\n+| resultContact   | Contact   | Result of last executed query as Contact, query must have `scalarResult=true` |\n+| resultSwitch    | Switch    | Result of last executed query as Switch, query must have `scalarResult=true` |\n+| parameters      | String    | Contains parameters of last executed query as JSON|\n+| correct         | Switch    | `ON` if the result of last executed query was correct |\n+\n+All the channels, except `execute`, are updated when the query execution finishes, and while there is a query in execution they have the values from\n+last previous executed query.\n+\n+The `resultString` channel is the only valid one if `scalarResult=false`, and in that case it contains the query result serialized to JSON in that format:\n+\n+    {\n+        correct : true,\n+        data : [\n+            { \n+                column1 : value,\n+                column2 : value\n+            },\n+            { ... }, //row2        \n+            { ... }  //row3\n+        ]\n+    }\n+    \n+### Channel Triggers\n+\n+#### calculateParameters\n+\n+Triggers when there's a need to calculate parameters before query execution.\n+When a query has `hasParameters=true` it fires the `calculateParameters` channel trigger and pause the execution until `setQueryParameters` action is call in", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODg1MzY3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648853675", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the case a query has parameters it's expected that there is some rule that catch the `calculateParameters` trigger, calculate the parameters\n          \n          \n            \n             with the corresponding logic and then call the `setQueryParameters` action, after that the query will be really executed.\n          \n          \n            \n            In the case a query has parameters, it's expected that there is a rule that catches the `calculateParameters` trigger, calculate the parameters with the corresponding logic and then calls the `setQueryParameters` action, after that the query will be executed.", "author": "Skinah", "createdAt": "2021-06-10T05:10:19Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |\n+| resultNumber    | Number    | Result of last executed query as a Number, query must have `scalarResult=true` |\n+| resultDateTime  | DateTime  | Result of last executed query as a DateTime, query must have `scalarResult=true` |\n+| resultContact   | Contact   | Result of last executed query as Contact, query must have `scalarResult=true` |\n+| resultSwitch    | Switch    | Result of last executed query as Switch, query must have `scalarResult=true` |\n+| parameters      | String    | Contains parameters of last executed query as JSON|\n+| correct         | Switch    | `ON` if the result of last executed query was correct |\n+\n+All the channels, except `execute`, are updated when the query execution finishes, and while there is a query in execution they have the values from\n+last previous executed query.\n+\n+The `resultString` channel is the only valid one if `scalarResult=false`, and in that case it contains the query result serialized to JSON in that format:\n+\n+    {\n+        correct : true,\n+        data : [\n+            { \n+                column1 : value,\n+                column2 : value\n+            },\n+            { ... }, //row2        \n+            { ... }  //row3\n+        ]\n+    }\n+    \n+### Channel Triggers\n+\n+#### calculateParameters\n+\n+Triggers when there's a need to calculate parameters before query execution.\n+When a query has `hasParameters=true` it fires the `calculateParameters` channel trigger and pause the execution until `setQueryParameters` action is call in\n+ that query.\n+ \n+In the case a query has parameters it's expected that there is some rule that catch the `calculateParameters` trigger, calculate the parameters\n+ with the corresponding logic and then call the `setQueryParameters` action, after that the query will be really executed.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODg1NDY5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648854691", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Define a InfluxDB2 database thing and a query with an interval execution. That executes the query every 15 seconds and punts the result in `myItem`\n          \n          \n            \n            Define a InfluxDB2 database thing and a query with an interval execution.\n          \n          \n            \n            That executes the query every 15 seconds and punts the result in `myItem`.\n          \n      \n    \n    \n  \n\nNew line for each new sentence", "author": "Skinah", "createdAt": "2021-06-10T05:13:18Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |\n+| resultNumber    | Number    | Result of last executed query as a Number, query must have `scalarResult=true` |\n+| resultDateTime  | DateTime  | Result of last executed query as a DateTime, query must have `scalarResult=true` |\n+| resultContact   | Contact   | Result of last executed query as Contact, query must have `scalarResult=true` |\n+| resultSwitch    | Switch    | Result of last executed query as Switch, query must have `scalarResult=true` |\n+| parameters      | String    | Contains parameters of last executed query as JSON|\n+| correct         | Switch    | `ON` if the result of last executed query was correct |\n+\n+All the channels, except `execute`, are updated when the query execution finishes, and while there is a query in execution they have the values from\n+last previous executed query.\n+\n+The `resultString` channel is the only valid one if `scalarResult=false`, and in that case it contains the query result serialized to JSON in that format:\n+\n+    {\n+        correct : true,\n+        data : [\n+            { \n+                column1 : value,\n+                column2 : value\n+            },\n+            { ... }, //row2        \n+            { ... }  //row3\n+        ]\n+    }\n+    \n+### Channel Triggers\n+\n+#### calculateParameters\n+\n+Triggers when there's a need to calculate parameters before query execution.\n+When a query has `hasParameters=true` it fires the `calculateParameters` channel trigger and pause the execution until `setQueryParameters` action is call in\n+ that query.\n+ \n+In the case a query has parameters it's expected that there is some rule that catch the `calculateParameters` trigger, calculate the parameters\n+ with the corresponding logic and then call the `setQueryParameters` action, after that the query will be really executed.\n+ \n+## Actions\n+\n+### For DatabaseBridge\n+\n+#### executeQuery \n+\n+It allows executing a query synchronously from a script/rule without defining it in a Thing.\n+\n+To execute the action you need to pass the following parameters:\n+\n+- String query: The query to execute\n+- Map<String,Object>: Query parameters (empty map if not needed)\n+- int timeout: Query timeout in seconds\n+\n+And it returns an `ActionQueryResult` that has the following properties:\n+\n+- correct (boolean) : True if the query was executed correctly, false otherwise\n+- data (List<Map<String,Object>>): A list where each element is a row that is stored in a map with (columnName,value) entries  \n+- isScalarResult: It returns if the result is scalar one (only one row with one column)\n+- resultAsScalar: It returns the result as a scalar if possible, if not returns null\n+\n+\n+Example (using Jython script):\n+\n+     from core.log import logging, LOG_PREFIX \n+     log = logging.getLogger(\"{}.action_example\".format(LOG_PREFIX))\n+     map = {\"time\" : \"-2h\"}\n+     influxdb = actions.get(\"dbquery\",\"dbquery:influxdb2:sampleQuery\") //Get bridge thing\n+     result = influxdb.executeQuery(\"from(bucket: \\\"default\\\") |> range(start:-2h)  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"go_memstats_frees_total\\\")  |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"counter\\\")  |> mean()\",{},5)\n+     log.info(\"execute query result is \"+str(result.data))\n+    \n+\n+Use this action with care, because as the query is executed synchronously is not good to execute long-running queries and block script execution.\n+\n+### For Queries\n+\n+#### setQueryParameters\n+\n+It's used for queries with parameters to set them. To execute the action you need to pass the parameters as a Map.\n+\n+Example (using Jython script):\n+\n+    params = {\"time\" : \"-2h\"}\n+    dbquery = actions.get(\"dbquery\",\"dbquery:query:queryWithParams\")  //Get query thing\n+    dbquery.setQueryParameters(params)\n+\n+#### getLastQueryResult\n+\n+It can be used in scripts to get the last query result. It doesn't have any parameters and returns an `ActionQueryResult` as defined in `executeQuery` action.\n+\n+Example (using Jython script):\n+\n+    dbquery = actions.get(\"dbquery\",\"dbquery:query:queryWithParams\")  //Get query thing\n+    result = dbquery.getLastQueryResult()\n+    \n+\n+## Examples\n+\n+### The Simplest case \n+\n+Define a InfluxDB2 database thing and a query with an interval execution. That executes the query every 15 seconds and punts the result in `myItem`", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODg1NTMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648855319", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use this action with care, because as the query is executed synchronously is not good to execute long-running queries and block script execution.\n          \n          \n            \n            Use this action with care, because as the query is executed synchronously, it is not good to execute long-running queries that can block script execution.", "author": "Skinah", "createdAt": "2021-06-10T05:15:15Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |\n+| resultNumber    | Number    | Result of last executed query as a Number, query must have `scalarResult=true` |\n+| resultDateTime  | DateTime  | Result of last executed query as a DateTime, query must have `scalarResult=true` |\n+| resultContact   | Contact   | Result of last executed query as Contact, query must have `scalarResult=true` |\n+| resultSwitch    | Switch    | Result of last executed query as Switch, query must have `scalarResult=true` |\n+| parameters      | String    | Contains parameters of last executed query as JSON|\n+| correct         | Switch    | `ON` if the result of last executed query was correct |\n+\n+All the channels, except `execute`, are updated when the query execution finishes, and while there is a query in execution they have the values from\n+last previous executed query.\n+\n+The `resultString` channel is the only valid one if `scalarResult=false`, and in that case it contains the query result serialized to JSON in that format:\n+\n+    {\n+        correct : true,\n+        data : [\n+            { \n+                column1 : value,\n+                column2 : value\n+            },\n+            { ... }, //row2        \n+            { ... }  //row3\n+        ]\n+    }\n+    \n+### Channel Triggers\n+\n+#### calculateParameters\n+\n+Triggers when there's a need to calculate parameters before query execution.\n+When a query has `hasParameters=true` it fires the `calculateParameters` channel trigger and pause the execution until `setQueryParameters` action is call in\n+ that query.\n+ \n+In the case a query has parameters it's expected that there is some rule that catch the `calculateParameters` trigger, calculate the parameters\n+ with the corresponding logic and then call the `setQueryParameters` action, after that the query will be really executed.\n+ \n+## Actions\n+\n+### For DatabaseBridge\n+\n+#### executeQuery \n+\n+It allows executing a query synchronously from a script/rule without defining it in a Thing.\n+\n+To execute the action you need to pass the following parameters:\n+\n+- String query: The query to execute\n+- Map<String,Object>: Query parameters (empty map if not needed)\n+- int timeout: Query timeout in seconds\n+\n+And it returns an `ActionQueryResult` that has the following properties:\n+\n+- correct (boolean) : True if the query was executed correctly, false otherwise\n+- data (List<Map<String,Object>>): A list where each element is a row that is stored in a map with (columnName,value) entries  \n+- isScalarResult: It returns if the result is scalar one (only one row with one column)\n+- resultAsScalar: It returns the result as a scalar if possible, if not returns null\n+\n+\n+Example (using Jython script):\n+\n+     from core.log import logging, LOG_PREFIX \n+     log = logging.getLogger(\"{}.action_example\".format(LOG_PREFIX))\n+     map = {\"time\" : \"-2h\"}\n+     influxdb = actions.get(\"dbquery\",\"dbquery:influxdb2:sampleQuery\") //Get bridge thing\n+     result = influxdb.executeQuery(\"from(bucket: \\\"default\\\") |> range(start:-2h)  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"go_memstats_frees_total\\\")  |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"counter\\\")  |> mean()\",{},5)\n+     log.info(\"execute query result is \"+str(result.data))\n+    \n+\n+Use this action with care, because as the query is executed synchronously is not good to execute long-running queries and block script execution.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODg1NTY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648855645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It's used for queries with parameters to set them. To execute the action you need to pass the parameters as a Map.\n          \n          \n            \n            It's used for queries with parameters to set them.\n          \n          \n            \n            To execute the action you need to pass the parameters as a Map.", "author": "Skinah", "createdAt": "2021-06-10T05:16:18Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |\n+| resultNumber    | Number    | Result of last executed query as a Number, query must have `scalarResult=true` |\n+| resultDateTime  | DateTime  | Result of last executed query as a DateTime, query must have `scalarResult=true` |\n+| resultContact   | Contact   | Result of last executed query as Contact, query must have `scalarResult=true` |\n+| resultSwitch    | Switch    | Result of last executed query as Switch, query must have `scalarResult=true` |\n+| parameters      | String    | Contains parameters of last executed query as JSON|\n+| correct         | Switch    | `ON` if the result of last executed query was correct |\n+\n+All the channels, except `execute`, are updated when the query execution finishes, and while there is a query in execution they have the values from\n+last previous executed query.\n+\n+The `resultString` channel is the only valid one if `scalarResult=false`, and in that case it contains the query result serialized to JSON in that format:\n+\n+    {\n+        correct : true,\n+        data : [\n+            { \n+                column1 : value,\n+                column2 : value\n+            },\n+            { ... }, //row2        \n+            { ... }  //row3\n+        ]\n+    }\n+    \n+### Channel Triggers\n+\n+#### calculateParameters\n+\n+Triggers when there's a need to calculate parameters before query execution.\n+When a query has `hasParameters=true` it fires the `calculateParameters` channel trigger and pause the execution until `setQueryParameters` action is call in\n+ that query.\n+ \n+In the case a query has parameters it's expected that there is some rule that catch the `calculateParameters` trigger, calculate the parameters\n+ with the corresponding logic and then call the `setQueryParameters` action, after that the query will be really executed.\n+ \n+## Actions\n+\n+### For DatabaseBridge\n+\n+#### executeQuery \n+\n+It allows executing a query synchronously from a script/rule without defining it in a Thing.\n+\n+To execute the action you need to pass the following parameters:\n+\n+- String query: The query to execute\n+- Map<String,Object>: Query parameters (empty map if not needed)\n+- int timeout: Query timeout in seconds\n+\n+And it returns an `ActionQueryResult` that has the following properties:\n+\n+- correct (boolean) : True if the query was executed correctly, false otherwise\n+- data (List<Map<String,Object>>): A list where each element is a row that is stored in a map with (columnName,value) entries  \n+- isScalarResult: It returns if the result is scalar one (only one row with one column)\n+- resultAsScalar: It returns the result as a scalar if possible, if not returns null\n+\n+\n+Example (using Jython script):\n+\n+     from core.log import logging, LOG_PREFIX \n+     log = logging.getLogger(\"{}.action_example\".format(LOG_PREFIX))\n+     map = {\"time\" : \"-2h\"}\n+     influxdb = actions.get(\"dbquery\",\"dbquery:influxdb2:sampleQuery\") //Get bridge thing\n+     result = influxdb.executeQuery(\"from(bucket: \\\"default\\\") |> range(start:-2h)  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"go_memstats_frees_total\\\")  |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"counter\\\")  |> mean()\",{},5)\n+     log.info(\"execute query result is \"+str(result.data))\n+    \n+\n+Use this action with care, because as the query is executed synchronously is not good to execute long-running queries and block script execution.\n+\n+### For Queries\n+\n+#### setQueryParameters\n+\n+It's used for queries with parameters to set them. To execute the action you need to pass the parameters as a Map.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODg1NTc3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648855779", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It can be used in scripts to get the last query result. It doesn't have any parameters and returns an `ActionQueryResult` as defined in `executeQuery` action.\n          \n          \n            \n            It can be used in scripts to get the last query result.\n          \n          \n            \n            It doesn't have any parameters and returns an `ActionQueryResult` as defined in `executeQuery` action.", "author": "Skinah", "createdAt": "2021-06-10T05:16:40Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |\n+| resultNumber    | Number    | Result of last executed query as a Number, query must have `scalarResult=true` |\n+| resultDateTime  | DateTime  | Result of last executed query as a DateTime, query must have `scalarResult=true` |\n+| resultContact   | Contact   | Result of last executed query as Contact, query must have `scalarResult=true` |\n+| resultSwitch    | Switch    | Result of last executed query as Switch, query must have `scalarResult=true` |\n+| parameters      | String    | Contains parameters of last executed query as JSON|\n+| correct         | Switch    | `ON` if the result of last executed query was correct |\n+\n+All the channels, except `execute`, are updated when the query execution finishes, and while there is a query in execution they have the values from\n+last previous executed query.\n+\n+The `resultString` channel is the only valid one if `scalarResult=false`, and in that case it contains the query result serialized to JSON in that format:\n+\n+    {\n+        correct : true,\n+        data : [\n+            { \n+                column1 : value,\n+                column2 : value\n+            },\n+            { ... }, //row2        \n+            { ... }  //row3\n+        ]\n+    }\n+    \n+### Channel Triggers\n+\n+#### calculateParameters\n+\n+Triggers when there's a need to calculate parameters before query execution.\n+When a query has `hasParameters=true` it fires the `calculateParameters` channel trigger and pause the execution until `setQueryParameters` action is call in\n+ that query.\n+ \n+In the case a query has parameters it's expected that there is some rule that catch the `calculateParameters` trigger, calculate the parameters\n+ with the corresponding logic and then call the `setQueryParameters` action, after that the query will be really executed.\n+ \n+## Actions\n+\n+### For DatabaseBridge\n+\n+#### executeQuery \n+\n+It allows executing a query synchronously from a script/rule without defining it in a Thing.\n+\n+To execute the action you need to pass the following parameters:\n+\n+- String query: The query to execute\n+- Map<String,Object>: Query parameters (empty map if not needed)\n+- int timeout: Query timeout in seconds\n+\n+And it returns an `ActionQueryResult` that has the following properties:\n+\n+- correct (boolean) : True if the query was executed correctly, false otherwise\n+- data (List<Map<String,Object>>): A list where each element is a row that is stored in a map with (columnName,value) entries  \n+- isScalarResult: It returns if the result is scalar one (only one row with one column)\n+- resultAsScalar: It returns the result as a scalar if possible, if not returns null\n+\n+\n+Example (using Jython script):\n+\n+     from core.log import logging, LOG_PREFIX \n+     log = logging.getLogger(\"{}.action_example\".format(LOG_PREFIX))\n+     map = {\"time\" : \"-2h\"}\n+     influxdb = actions.get(\"dbquery\",\"dbquery:influxdb2:sampleQuery\") //Get bridge thing\n+     result = influxdb.executeQuery(\"from(bucket: \\\"default\\\") |> range(start:-2h)  |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"go_memstats_frees_total\\\")  |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"counter\\\")  |> mean()\",{},5)\n+     log.info(\"execute query result is \"+str(result.data))\n+    \n+\n+Use this action with care, because as the query is executed synchronously is not good to execute long-running queries and block script execution.\n+\n+### For Queries\n+\n+#### setQueryParameters\n+\n+It's used for queries with parameters to set them. To execute the action you need to pass the parameters as a Map.\n+\n+Example (using Jython script):\n+\n+    params = {\"time\" : \"-2h\"}\n+    dbquery = actions.get(\"dbquery\",\"dbquery:query:queryWithParams\")  //Get query thing\n+    dbquery.setQueryParameters(params)\n+\n+#### getLastQueryResult\n+\n+It can be used in scripts to get the last query result. It doesn't have any parameters and returns an `ActionQueryResult` as defined in `executeQuery` action.", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODkzNDkzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648934932", "bodyText": "What is the point of these? They dont seem to serve a purpose as there is no code... See guidelines here on not using the logs instead of the debugger.\nhttps://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "Skinah", "createdAt": "2021-06-10T07:47:14Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/action/DBQueryActions.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.action;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.DatabaseBridgeHandler;\n+import org.openhab.binding.dbquery.internal.QueryHandler;\n+import org.openhab.binding.dbquery.internal.domain.ExecuteNonConfiguredQuery;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.ResultRow;\n+import org.openhab.binding.dbquery.internal.error.UnnexpectedCondition;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.openhab.core.thing.binding.ThingActions;\n+import org.openhab.core.thing.binding.ThingActionsScope;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@ThingActionsScope(name = \"dbquery\")\n+@NonNullByDefault\n+public class DBQueryActions implements IDBQueryActions, ThingActions {\n+    private final Logger logger = LoggerFactory.getLogger(DBQueryActions.class);\n+\n+    private @Nullable QueryHandler queryHandler;\n+    private @Nullable DatabaseBridgeHandler databaseBridgeHandler;\n+\n+    @Override\n+    public void activate() {\n+        logger.trace(\"activate actions\");\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        logger.trace(\"deactivate actions\");\n+    }", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjM4Nzc0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r692387740", "bodyText": "Oks, will remove them", "author": "lujop", "createdAt": "2021-08-19T18:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODkzNDkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODkzNjcyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648936726", "bodyText": "info logging should not be used very often, suggest this should be debug or trace?\nhttps://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "Skinah", "createdAt": "2021-06-10T07:49:33Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/action/DBQueryActions.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.action;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.DatabaseBridgeHandler;\n+import org.openhab.binding.dbquery.internal.QueryHandler;\n+import org.openhab.binding.dbquery.internal.domain.ExecuteNonConfiguredQuery;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.ResultRow;\n+import org.openhab.binding.dbquery.internal.error.UnnexpectedCondition;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.openhab.core.thing.binding.ThingActions;\n+import org.openhab.core.thing.binding.ThingActionsScope;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@ThingActionsScope(name = \"dbquery\")\n+@NonNullByDefault\n+public class DBQueryActions implements IDBQueryActions, ThingActions {\n+    private final Logger logger = LoggerFactory.getLogger(DBQueryActions.class);\n+\n+    private @Nullable QueryHandler queryHandler;\n+    private @Nullable DatabaseBridgeHandler databaseBridgeHandler;\n+\n+    @Override\n+    public void activate() {\n+        logger.trace(\"activate actions\");\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        logger.trace(\"deactivate actions\");\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Execute query\", description = \"Execute query synchronously (use with care)\")\n+    public ActionQueryResult executeQuery(String query, Map<String, @Nullable Object> parameters,\n+            int timeoutInSeconds) {\n+        logger.debug(\"executeQuery from action {} params={}\", query, parameters);\n+        var currentDatabaseBridgeHandler = databaseBridgeHandler;\n+        if (currentDatabaseBridgeHandler != null) {\n+            QueryResult queryResult = new ExecuteNonConfiguredQuery(currentDatabaseBridgeHandler.getDatabase())\n+                    .executeSynchronously(query, parameters, Duration.ofSeconds(timeoutInSeconds));\n+            logger.debug(\"executeQuery from action result {}\", queryResult);\n+            return queryResult2ActionQueryResult(queryResult);\n+        } else {\n+            logger.warn(\"Execute queried ignored as databaseBridgeHandler is null\");\n+            return new ActionQueryResult(false, null);\n+        }\n+    }\n+\n+    private ActionQueryResult queryResult2ActionQueryResult(QueryResult queryResult) {\n+        return new ActionQueryResult(queryResult.isCorrect(),\n+                queryResult.getData().stream().map(DBQueryActions::resultRow2Map).collect(Collectors.toList()));\n+    }\n+\n+    private static Map<String, @Nullable Object> resultRow2Map(ResultRow resultRow) {\n+        Map<String, @Nullable Object> map = new HashMap<>();\n+        for (String column : resultRow.getColumnNames()) {\n+            map.put(column, resultRow.getValue(column));\n+        }\n+        return map;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Set query parameters\", description = \"Set query parameters for a query\")\n+    public void setQueryParameters(@ActionInput(name = \"parameters\") Map<String, @Nullable Object> parameters) {\n+        logger.info(\"setQueryParameters {}\", parameters);", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjM4ODE0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r692388141", "bodyText": "\ud83d\udc4d", "author": "lujop", "createdAt": "2021-08-19T18:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODkzNjcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODkzOTI2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648939264", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private DBQueryBindingConstants() {\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nIt can be removed.", "author": "Skinah", "createdAt": "2021-06-10T07:52:58Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DBQueryBindingConstants.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * Common constants, which are used across the whole binding.\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DBQueryBindingConstants {\n+\n+    private static final String BINDING_ID = \"dbquery\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_INFLUXDB2_BRIDGE = new ThingTypeUID(BINDING_ID, \"influxdb2\");\n+    public static final ThingTypeUID THING_TYPE_JDBC_BRIDGE = new ThingTypeUID(BINDING_ID, \"jdbc\");\n+    public static final ThingTypeUID THING_TYPE_QUERY = new ThingTypeUID(BINDING_ID, \"query\");\n+\n+    // List of all Channel ids\n+    public static final String CHANNEL_EXECUTE = \"execute\";\n+    public static final String CHANNEL_RESULT_STRING = \"resultString\";\n+    public static final String CHANNEL_RESULT_NUMBER = \"resultNumber\";\n+    public static final String CHANNEL_RESULT_DATETIME = \"resultDateTime\";\n+    public static final String CHANNEL_RESULT_CONTACT = \"resultContact\";\n+    public static final String CHANNEL_RESULT_SWITCH = \"resultSwitch\";\n+\n+    public static final String CHANNEL_PARAMETERS = \"parameters\";\n+    public static final String CHANNEL_CORRECT = \"correct\";\n+    public static final String TRIGGER_CHANNEL_CALCULATE_PARAMETERS = \"calculateParameters\";\n+\n+    public static final String RESULT_STRING_CHANNEL_TYPE = \"result-channel-string\";\n+    public static final String RESULT_NUMBER_CHANNEL_TYPE = \"result-channel-number\";\n+    public static final String RESULT_DATETIME_CHANNEL_TYPE = \"result-channel-datetime\";\n+    public static final String RESULT_CONTACT_CHANNEL_TYPE = \"result-channel-contact\";\n+    public static final String RESULT_SWITCH_CHANNEL_TYPE = \"result-channel-switch\";\n+\n+    private DBQueryBindingConstants() {\n+    }", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjM4ODkxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r692388917", "bodyText": "It's not fine to leave the private constructor to prevent class instantiation?", "author": "lujop", "createdAt": "2021-08-19T18:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODkzOTI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0MTgxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648941815", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"createHandler for thing {}\", thing.getUID());\n          \n      \n    \n    \n  \n\nInfo should be used very sparingly. The event log will tell you already when a thing changes to initializing, so this would be doubled up logging if you changed it to debug or trace. Hence why I suggest it is removed.", "author": "Skinah", "createdAt": "2021-06-10T07:56:24Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DBQueryHandlerFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_INFLUXDB2_BRIDGE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_JDBC_BRIDGE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_QUERY;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.error.UnnexpectedCondition;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DBQuery binding factory that is responsible for creating things and thing handlers.\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.dbquery\", service = ThingHandlerFactory.class)\n+public class DBQueryHandlerFactory extends BaseThingHandlerFactory {\n+    private static final Logger logger = LoggerFactory.getLogger(DBQueryHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_INFLUXDB2_BRIDGE,\n+            THING_TYPE_JDBC_BRIDGE, THING_TYPE_QUERY);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        logger.info(\"createHandler for thing {}\", thing.getUID());\n+", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjM4OTkwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r692389905", "bodyText": "If it's ok I prefer to leave at debug level. But if it's needed I understand the point and remove it completely", "author": "lujop", "createdAt": "2021-08-19T18:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0MTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0MzA2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648943064", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.trace(\"initialize bridge {}\", getThing().getUID());\n          \n      \n    \n    \n  \n\nIMHO should be removed as the event log already does this.", "author": "Skinah", "createdAt": "2021-06-10T07:58:03Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DatabaseBridgeHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base implementation common to all implementation of database bridge\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class DatabaseBridgeHandler extends BaseBridgeHandler {\n+    private static final long RETRY_CONNECTION_ATTEMPT_TIME_SECONDS = 60;\n+    private final Logger logger = LoggerFactory.getLogger(DatabaseBridgeHandler.class);\n+    private Database database = Database.EMPTY;\n+    private @Nullable ScheduledFuture<?> retryConnectionAttemptFuture;\n+\n+    public DatabaseBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize bridge {}\", getThing().getUID());", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0NTMzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648945336", "bodyText": "IMHO this should be removed you don't need to log this, then log if it is successful or not successful as well.", "author": "Skinah", "createdAt": "2021-06-10T08:00:59Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DatabaseBridgeHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base implementation common to all implementation of database bridge\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class DatabaseBridgeHandler extends BaseBridgeHandler {\n+    private static final long RETRY_CONNECTION_ATTEMPT_TIME_SECONDS = 60;\n+    private final Logger logger = LoggerFactory.getLogger(DatabaseBridgeHandler.class);\n+    private Database database = Database.EMPTY;\n+    private @Nullable ScheduledFuture<?> retryConnectionAttemptFuture;\n+\n+    public DatabaseBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize bridge {}\", getThing().getUID());\n+        initConfig();\n+\n+        database = createDatabase();\n+\n+        connectDatabase();\n+    }\n+\n+    private void connectDatabase() {\n+        logger.debug(\"connectDatabase {}\", database);", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjM3NDk2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r692374965", "bodyText": "I do not completely agree with this for the following reasons:\n\nIt doesn't do any warm to the user as to have it logged has to explicitly enable the debug level for the addon category.\nConnect to the database can come from initialization, retry attempts,...\nWhen a user reports a strange issue that is non easily reproducible, asking him to enable trace for the addon category is very useful as you can't debug his machine. I needed it in some difficult bugs in influxdb persistence addon and has been proven to be very useful.\nI see mainly all the persistence addons logging when connected, disconnected,...\nFinally, although is true that you can have the item status changelog, it's for all the items, isn't it? Having that info only for the addon, and with addon language, it's a valuable information.\n\nWould using trace level will be fine for this?", "author": "lujop", "createdAt": "2021-08-19T18:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0NTMzNg=="}, {"id": "PRRC_kwDOAS1o684q3B1L", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r719068491", "bodyText": "Leave as is then if it will help fault find for users, as changing it to trace does nothing as most people run at INFO level.", "author": "Skinah", "createdAt": "2021-09-30T05:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0NTMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0NjQxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648946419", "bodyText": "Does it only change to ONLINE if it connects? if so then remove this logging as it is redundant.", "author": "Skinah", "createdAt": "2021-06-10T08:02:26Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DatabaseBridgeHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base implementation common to all implementation of database bridge\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class DatabaseBridgeHandler extends BaseBridgeHandler {\n+    private static final long RETRY_CONNECTION_ATTEMPT_TIME_SECONDS = 60;\n+    private final Logger logger = LoggerFactory.getLogger(DatabaseBridgeHandler.class);\n+    private Database database = Database.EMPTY;\n+    private @Nullable ScheduledFuture<?> retryConnectionAttemptFuture;\n+\n+    public DatabaseBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize bridge {}\", getThing().getUID());\n+        initConfig();\n+\n+        database = createDatabase();\n+\n+        connectDatabase();\n+    }\n+\n+    private void connectDatabase() {\n+        logger.debug(\"connectDatabase {}\", database);\n+        var completable = database.connect();\n+        updateStatus(ThingStatus.UNKNOWN);\n+        completable.thenAccept(result -> {\n+            if (result) {\n+                logger.trace(\"Succesfully connected to database {}\", getThing().getUID());", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684q5lC2", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r719737014", "bodyText": "This is one of the only logs that I left, I hope that it's ok because IMO establishing a connection is very relevant for a DB addon and only is trace level", "author": "lujop", "createdAt": "2021-09-30T20:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0NjQxOQ=="}, {"id": "PRRC_kwDOAS1o684q9A6z", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r720637619", "bodyText": "Since it does not occur very often I don't see it as a big deal to leave as is. If it was once a second, then you would see savings on not having to constantly check if trace was on or off.", "author": "Skinah", "createdAt": "2021-10-02T06:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0NjQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0NzMzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648947330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.trace(\"Connect to database {} failed\", getThing().getUID());\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n      \n    \n    \n  \n\nDont log when you change thing status. The event log can supply a reason for the error. See\nhttps://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "Skinah", "createdAt": "2021-06-10T08:03:43Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DatabaseBridgeHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base implementation common to all implementation of database bridge\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class DatabaseBridgeHandler extends BaseBridgeHandler {\n+    private static final long RETRY_CONNECTION_ATTEMPT_TIME_SECONDS = 60;\n+    private final Logger logger = LoggerFactory.getLogger(DatabaseBridgeHandler.class);\n+    private Database database = Database.EMPTY;\n+    private @Nullable ScheduledFuture<?> retryConnectionAttemptFuture;\n+\n+    public DatabaseBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize bridge {}\", getThing().getUID());\n+        initConfig();\n+\n+        database = createDatabase();\n+\n+        connectDatabase();\n+    }\n+\n+    private void connectDatabase() {\n+        logger.debug(\"connectDatabase {}\", database);\n+        var completable = database.connect();\n+        updateStatus(ThingStatus.UNKNOWN);\n+        completable.thenAccept(result -> {\n+            if (result) {\n+                logger.trace(\"Succesfully connected to database {}\", getThing().getUID());\n+                updateStatus(ThingStatus.ONLINE);\n+            } else {\n+                logger.trace(\"Connect to database {} failed\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684qbAHv", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711721455", "bodyText": "I fully agree. The error message should be displayed in the UI. That can be achieved by adding it as an argument to updateStatus(). Although, the current error message might not very helpful for the user. Feel free to improve that in a later version.", "author": "fwolter", "createdAt": "2021-09-19T10:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk0NzMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MTQ0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648951440", "bodyText": "Same as above. Provide clear and helpful reasons why the error or device went offline if possible and dont log it when the status changes.", "author": "Skinah", "createdAt": "2021-06-10T08:09:13Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DatabaseBridgeHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base implementation common to all implementation of database bridge\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class DatabaseBridgeHandler extends BaseBridgeHandler {\n+    private static final long RETRY_CONNECTION_ATTEMPT_TIME_SECONDS = 60;\n+    private final Logger logger = LoggerFactory.getLogger(DatabaseBridgeHandler.class);\n+    private Database database = Database.EMPTY;\n+    private @Nullable ScheduledFuture<?> retryConnectionAttemptFuture;\n+\n+    public DatabaseBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize bridge {}\", getThing().getUID());\n+        initConfig();\n+\n+        database = createDatabase();\n+\n+        connectDatabase();\n+    }\n+\n+    private void connectDatabase() {\n+        logger.debug(\"connectDatabase {}\", database);\n+        var completable = database.connect();\n+        updateStatus(ThingStatus.UNKNOWN);\n+        completable.thenAccept(result -> {\n+            if (result) {\n+                logger.trace(\"Succesfully connected to database {}\", getThing().getUID());\n+                updateStatus(ThingStatus.ONLINE);\n+            } else {\n+                logger.trace(\"Connect to database {} failed\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                if (retryConnectionAttemptFuture == null) {\n+                    scheduleRetryConnectionAttempt();\n+                }\n+            }\n+        });\n+    }\n+\n+    protected void scheduleRetryConnectionAttempt() {\n+        logger.trace(\"Scheduled retry connection attempt every {}\", RETRY_CONNECTION_ATTEMPT_TIME_SECONDS);\n+        retryConnectionAttemptFuture = Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(\n+                this::connectDatabase, RETRY_CONNECTION_ATTEMPT_TIME_SECONDS, RETRY_CONNECTION_ATTEMPT_TIME_SECONDS,\n+                TimeUnit.SECONDS);\n+    }\n+\n+    protected abstract void initConfig();\n+\n+    @Override\n+    public void dispose() {\n+        cancelRetryConnectionAttemptIfPresent();\n+        disconnectDatabase();\n+    }\n+\n+    protected void cancelRetryConnectionAttemptIfPresent() {\n+        ScheduledFuture<?> currentFuture = retryConnectionAttemptFuture;\n+        if (currentFuture != null)\n+            currentFuture.cancel(true);\n+    }\n+\n+    private void disconnectDatabase() {\n+        var completable = database.disconnect();\n+        updateStatus(ThingStatus.UNKNOWN);\n+        completable.thenAccept(result -> {\n+            Bridge bridge = getBridge();\n+            if (result) {\n+                logger.trace(\"Successfully disconnected to database {}\", bridge != null ? bridge.getUID() : \"null\");\n+                updateStatus(ThingStatus.OFFLINE);\n+            } else {\n+                logger.trace(\"Disconnect to database {} failed\", bridge != null ? bridge.getUID() : \"null\");\n+                updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.COMMUNICATION_ERROR);", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjM3NjcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r692376715", "bodyText": "The same justification as above, I think that connection-disconnection are very important messages, and a very low-level debug category is used.\nIn case of problems, I think that will be very useful.", "author": "lujop", "createdAt": "2021-08-19T18:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MTQ0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzM3OTkyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693379922", "bodyText": "I understand your points, but keeping the logs clean from redundant messages is important. See https://next.openhab.org/docs/developer/guidelines.html#f-logging\nvoid myFun() {\n    logger.debug(\"And now the thing goes online\"); // DONT, DONT, really DONT do that\n    updateState(ThingState.ONLINE);\n}", "author": "fwolter", "createdAt": "2021-08-21T17:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MTQ0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU0MDIyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693540227", "bodyText": "I see in another logs of the PR that I will remove because they clearly break the rules you linked.\nBut I think that these logs about connections  in trace are very important ones that don't contradict the rules and will be useful when problems arise.\nIn fact, I looked at other database/persistence addons and all include those logs.\nAny possibility to leave them?", "author": "lujop", "createdAt": "2021-08-22T18:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MTQ0MA=="}, {"id": "PRRC_kwDOAS1o684qbAe1", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711722933", "bodyText": "The way to go is to include the error message as the status detail message in updateStatus().\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.\nI think that does exactly what you want. WDYT?", "author": "fwolter", "createdAt": "2021-09-19T10:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MTQ0MA=="}, {"id": "PRRC_kwDOAS1o684qbTCv", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711798959", "bodyText": "I see your point and I will remove but I don't agree, I think that mainly all the persistence bindings had logs like this.\nAnd the problem with the events.log is that if you do that way you can't have that relevant debug/trace logs only for an addon, can you?\nFor me is very useful to ask a user without a reproducible problem clear instructions, like set dbquery category log category to trace and send me the logs.", "author": "lujop", "createdAt": "2021-09-19T20:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MTQ0MA=="}, {"id": "PRRC_kwDOAS1o684qb96d", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711974557", "bodyText": "That's right, the events.log contains the thing status detail messages of all Things.", "author": "fwolter", "createdAt": "2021-09-20T08:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MTQ0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MjI0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648952249", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO: implement", "author": "Skinah", "createdAt": "2021-06-10T08:10:22Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/JDBCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * Concrete implementation of {@link DatabaseBridgeHandler} for Influx2\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class JDBCBridgeHandler extends BaseBridgeHandler {\n+    public JDBCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // TODO: implement", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1MjM0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648952346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO: implement", "author": "Skinah", "createdAt": "2021-06-10T08:10:30Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/JDBCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * Concrete implementation of {@link DatabaseBridgeHandler} for Influx2\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class JDBCBridgeHandler extends BaseBridgeHandler {\n+    public JDBCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // TODO: implement", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1NDk5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648954997", "bodyText": "As above", "author": "Skinah", "createdAt": "2021-06-10T08:13:56Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryHandler.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.CHANNEL_EXECUTE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.TRIGGER_CHANNEL_CALCULATE_PARAMETERS;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.QueryResultExtractor;\n+import org.openhab.binding.dbquery.internal.domain.ResultValue;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manages query thing, handling it's commands and updating it's channels\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(QueryHandler.class);\n+    // Relax nullable rules as config can be only null when not initialized\n+    private @NonNullByDefault({}) QueryConfiguration config;\n+    private @NonNullByDefault({}) QueryResultExtractor queryResultExtractor;\n+\n+    private @Nullable ScheduledFuture<?> scheduledQueryExecutionInterval;\n+    private @Nullable QueryResultChannelUpdater queryResultChannelUpdater;\n+    private Database database = Database.EMPTY;\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    private @Nullable QueryExecution currentQueryExecution;\n+    private QueryResult lastQueryResult = QueryResult.NO_RESULT;\n+\n+    public QueryHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize query handler for {}\", getQueryIdentifier());", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU0MDI0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693540249", "bodyText": "\ud83d\udc4d", "author": "lujop", "createdAt": "2021-08-22T18:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1NDk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1NTYwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648955602", "bodyText": "See https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "Skinah", "createdAt": "2021-06-10T08:14:39Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryHandler.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.CHANNEL_EXECUTE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.TRIGGER_CHANNEL_CALCULATE_PARAMETERS;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.QueryResultExtractor;\n+import org.openhab.binding.dbquery.internal.domain.ResultValue;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manages query thing, handling it's commands and updating it's channels\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(QueryHandler.class);\n+    // Relax nullable rules as config can be only null when not initialized\n+    private @NonNullByDefault({}) QueryConfiguration config;\n+    private @NonNullByDefault({}) QueryResultExtractor queryResultExtractor;\n+\n+    private @Nullable ScheduledFuture<?> scheduledQueryExecutionInterval;\n+    private @Nullable QueryResultChannelUpdater queryResultChannelUpdater;\n+    private Database database = Database.EMPTY;\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    private @Nullable QueryExecution currentQueryExecution;\n+    private QueryResult lastQueryResult = QueryResult.NO_RESULT;\n+\n+    public QueryHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize query handler for {}\", getQueryIdentifier());\n+        config = getConfigAs(QueryConfiguration.class);\n+        queryResultExtractor = new QueryResultExtractor(config);\n+\n+        initQueryResultChannelUpdater();\n+        updateStateWithParentBridgeStatus();\n+    }\n+\n+    private void initQueryResultChannelUpdater() {\n+        ChannelStateUpdater channelStateUpdater = (channel, state) -> updateState(channel.getUID(), state);\n+        queryResultChannelUpdater = new QueryResultChannelUpdater(channelStateUpdater, this::getResultChannels2Update);\n+    }\n+\n+    private void scheduleQueryExecutionIntervalIfNeeded() {\n+        int interval = config.getInterval();\n+        if (interval != QueryConfiguration.NO_INTERVAL && scheduledQueryExecutionInterval == null) {\n+            logger.trace(\"Scheduling query execution every {} seconds for {}\", interval, getQueryIdentifier());\n+            scheduledQueryExecutionInterval = Executors.newSingleThreadScheduledExecutor()\n+                    .scheduleAtFixedRate(this::executeQuery, 0, interval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @NonNull\n+    private ThingUID getQueryIdentifier() {\n+        return getThing().getUID();\n+    }\n+\n+    private void cancelQueryExecutionIntervalIfNeeded() {\n+        @Nullable\n+        ScheduledFuture<?> currentFuture = scheduledQueryExecutionInterval;\n+        if (currentFuture != null) {\n+            currentFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.trace(\"dispose query handler for {}\", getQueryIdentifier());", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1NjYyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648956628", "bodyText": "Should this be warn level?", "author": "Skinah", "createdAt": "2021-06-10T08:16:01Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryHandler.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.CHANNEL_EXECUTE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.TRIGGER_CHANNEL_CALCULATE_PARAMETERS;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.QueryResultExtractor;\n+import org.openhab.binding.dbquery.internal.domain.ResultValue;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manages query thing, handling it's commands and updating it's channels\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(QueryHandler.class);\n+    // Relax nullable rules as config can be only null when not initialized\n+    private @NonNullByDefault({}) QueryConfiguration config;\n+    private @NonNullByDefault({}) QueryResultExtractor queryResultExtractor;\n+\n+    private @Nullable ScheduledFuture<?> scheduledQueryExecutionInterval;\n+    private @Nullable QueryResultChannelUpdater queryResultChannelUpdater;\n+    private Database database = Database.EMPTY;\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    private @Nullable QueryExecution currentQueryExecution;\n+    private QueryResult lastQueryResult = QueryResult.NO_RESULT;\n+\n+    public QueryHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize query handler for {}\", getQueryIdentifier());\n+        config = getConfigAs(QueryConfiguration.class);\n+        queryResultExtractor = new QueryResultExtractor(config);\n+\n+        initQueryResultChannelUpdater();\n+        updateStateWithParentBridgeStatus();\n+    }\n+\n+    private void initQueryResultChannelUpdater() {\n+        ChannelStateUpdater channelStateUpdater = (channel, state) -> updateState(channel.getUID(), state);\n+        queryResultChannelUpdater = new QueryResultChannelUpdater(channelStateUpdater, this::getResultChannels2Update);\n+    }\n+\n+    private void scheduleQueryExecutionIntervalIfNeeded() {\n+        int interval = config.getInterval();\n+        if (interval != QueryConfiguration.NO_INTERVAL && scheduledQueryExecutionInterval == null) {\n+            logger.trace(\"Scheduling query execution every {} seconds for {}\", interval, getQueryIdentifier());\n+            scheduledQueryExecutionInterval = Executors.newSingleThreadScheduledExecutor()\n+                    .scheduleAtFixedRate(this::executeQuery, 0, interval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @NonNull\n+    private ThingUID getQueryIdentifier() {\n+        return getThing().getUID();\n+    }\n+\n+    private void cancelQueryExecutionIntervalIfNeeded() {\n+        @Nullable\n+        ScheduledFuture<?> currentFuture = scheduledQueryExecutionInterval;\n+        if (currentFuture != null) {\n+            currentFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.trace(\"dispose query handler for {}\", getQueryIdentifier());\n+        cancelQueryExecutionIntervalIfNeeded();\n+        cancelCurrentQueryExecution();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"handleCommand for channel {} with command {}\", channelUID, command);\n+\n+        if (command instanceof RefreshType) {\n+            if (CHANNEL_EXECUTE.equals(channelUID.getId())) {\n+                executeQuery();\n+            }\n+        } else {\n+            logger.debug(\"Query Thing can only handle RefreshType commands as the thing is read-only\");", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU0MDU4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693540581", "bodyText": "\ud83d\udc4d", "author": "lujop", "createdAt": "2021-08-22T18:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1NjYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1ODM4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648958380", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.trace(\"bridgeStatusChanged to {} for {}\", bridgeStatusInfo.getStatus(), getQueryIdentifier());\n          \n      \n    \n    \n  \n\nThe event log does this.", "author": "Skinah", "createdAt": "2021-06-10T08:18:23Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryHandler.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.CHANNEL_EXECUTE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.TRIGGER_CHANNEL_CALCULATE_PARAMETERS;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.QueryResultExtractor;\n+import org.openhab.binding.dbquery.internal.domain.ResultValue;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manages query thing, handling it's commands and updating it's channels\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(QueryHandler.class);\n+    // Relax nullable rules as config can be only null when not initialized\n+    private @NonNullByDefault({}) QueryConfiguration config;\n+    private @NonNullByDefault({}) QueryResultExtractor queryResultExtractor;\n+\n+    private @Nullable ScheduledFuture<?> scheduledQueryExecutionInterval;\n+    private @Nullable QueryResultChannelUpdater queryResultChannelUpdater;\n+    private Database database = Database.EMPTY;\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    private @Nullable QueryExecution currentQueryExecution;\n+    private QueryResult lastQueryResult = QueryResult.NO_RESULT;\n+\n+    public QueryHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize query handler for {}\", getQueryIdentifier());\n+        config = getConfigAs(QueryConfiguration.class);\n+        queryResultExtractor = new QueryResultExtractor(config);\n+\n+        initQueryResultChannelUpdater();\n+        updateStateWithParentBridgeStatus();\n+    }\n+\n+    private void initQueryResultChannelUpdater() {\n+        ChannelStateUpdater channelStateUpdater = (channel, state) -> updateState(channel.getUID(), state);\n+        queryResultChannelUpdater = new QueryResultChannelUpdater(channelStateUpdater, this::getResultChannels2Update);\n+    }\n+\n+    private void scheduleQueryExecutionIntervalIfNeeded() {\n+        int interval = config.getInterval();\n+        if (interval != QueryConfiguration.NO_INTERVAL && scheduledQueryExecutionInterval == null) {\n+            logger.trace(\"Scheduling query execution every {} seconds for {}\", interval, getQueryIdentifier());\n+            scheduledQueryExecutionInterval = Executors.newSingleThreadScheduledExecutor()\n+                    .scheduleAtFixedRate(this::executeQuery, 0, interval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @NonNull\n+    private ThingUID getQueryIdentifier() {\n+        return getThing().getUID();\n+    }\n+\n+    private void cancelQueryExecutionIntervalIfNeeded() {\n+        @Nullable\n+        ScheduledFuture<?> currentFuture = scheduledQueryExecutionInterval;\n+        if (currentFuture != null) {\n+            currentFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.trace(\"dispose query handler for {}\", getQueryIdentifier());\n+        cancelQueryExecutionIntervalIfNeeded();\n+        cancelCurrentQueryExecution();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"handleCommand for channel {} with command {}\", channelUID, command);\n+\n+        if (command instanceof RefreshType) {\n+            if (CHANNEL_EXECUTE.equals(channelUID.getId())) {\n+                executeQuery();\n+            }\n+        } else {\n+            logger.debug(\"Query Thing can only handle RefreshType commands as the thing is read-only\");\n+        }\n+    }\n+\n+    private synchronized void executeQuery() {\n+        if (getThing().getStatus() == ThingStatus.ONLINE) {\n+            @Nullable\n+            QueryExecution queryExecution = currentQueryExecution;\n+            if (queryExecution != null) {\n+                logger.debug(\"Previous query execution for {} discarded as a new one is requested\",\n+                        getQueryIdentifier());\n+                cancelCurrentQueryExecution();\n+            }\n+\n+            queryExecution = new QueryExecution(database, config, queryResultReceived);\n+            this.currentQueryExecution = queryExecution;\n+\n+            if (config.isHasParameters()) {\n+                logger.trace(\"{} triggered to set parameters for {}\", TRIGGER_CHANNEL_CALCULATE_PARAMETERS,\n+                        queryExecution);\n+                updateParametersChannel(QueryParameters.EMPTY);\n+                triggerChannel(TRIGGER_CHANNEL_CALCULATE_PARAMETERS);\n+            } else {\n+                queryExecution.execute();\n+            }\n+        } else {\n+            logger.debug(\"Execute query ignored because thing status is {}\", getThing().getStatus());\n+        }\n+    }\n+\n+    private synchronized void cancelCurrentQueryExecution() {\n+        @Nullable\n+        QueryExecution current = currentQueryExecution;\n+        if (current != null) {\n+            current.cancel();\n+            currentQueryExecution = null;\n+        }\n+    }\n+\n+    private void updateStateWithQueryResult(QueryResult queryResult) {\n+        var currentQueryResultChannelUpdater = queryResultChannelUpdater;\n+        var localCurrentQueryExecution = this.currentQueryExecution;\n+        lastQueryResult = queryResult;\n+        if (currentQueryResultChannelUpdater != null && localCurrentQueryExecution != null) {\n+            ResultValue resultValue = queryResultExtractor.extractResult(queryResult);\n+            updateCorrectChannel(resultValue.isCorrect());\n+            updateParametersChannel(localCurrentQueryExecution.getQueryParameters());\n+            if (resultValue.isCorrect()) {\n+                currentQueryResultChannelUpdater.updateChannelResults(resultValue.getResult());\n+            } else {\n+                currentQueryResultChannelUpdater.clearChannelResults();\n+            }\n+        } else {\n+            logger.warn(\n+                    \"QueryResult discarded as queryResultChannelUpdater nor currentQueryExecution are not expected to be null\");\n+        }\n+    }\n+\n+    private void updateCorrectChannel(boolean correct) {\n+        updateState(DBQueryBindingConstants.CHANNEL_CORRECT, OnOffType.from(correct));\n+    }\n+\n+    private void updateParametersChannel(QueryParameters queryParameters) {\n+        updateState(DBQueryBindingConstants.CHANNEL_PARAMETERS, new StringType(jsonEncoder.encode(queryParameters)));\n+    }\n+\n+    private void updateStateWithParentBridgeStatus() {\n+        final @Nullable Bridge bridge = getBridge();\n+        DatabaseBridgeHandler databaseBridgeHandler;\n+\n+        if (bridge != null) {\n+            @Nullable\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof DatabaseBridgeHandler) {\n+                databaseBridgeHandler = (DatabaseBridgeHandler) bridgeHandler;\n+                database = databaseBridgeHandler.getDatabase();\n+                if (bridge.getStatus() == ThingStatus.ONLINE) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        super.updateStatus(status, statusDetail, description);\n+        if (status == ThingStatus.ONLINE)\n+            scheduleQueryExecutionIntervalIfNeeded();\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        logger.trace(\"bridgeStatusChanged to {} for {}\", bridgeStatusInfo.getStatus(), getQueryIdentifier());", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU0MDY2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693540660", "bodyText": "\ud83d\udc4d", "author": "lujop", "createdAt": "2021-08-22T18:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1ODM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1OTQ5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r648959492", "bodyText": "Does this change the state of the thing or channel and get logged in the event log? if so please remove the logger.trace line.", "author": "Skinah", "createdAt": "2021-06-10T08:19:54Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryHandler.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.CHANNEL_EXECUTE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.TRIGGER_CHANNEL_CALCULATE_PARAMETERS;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.QueryResultExtractor;\n+import org.openhab.binding.dbquery.internal.domain.ResultValue;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manages query thing, handling it's commands and updating it's channels\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(QueryHandler.class);\n+    // Relax nullable rules as config can be only null when not initialized\n+    private @NonNullByDefault({}) QueryConfiguration config;\n+    private @NonNullByDefault({}) QueryResultExtractor queryResultExtractor;\n+\n+    private @Nullable ScheduledFuture<?> scheduledQueryExecutionInterval;\n+    private @Nullable QueryResultChannelUpdater queryResultChannelUpdater;\n+    private Database database = Database.EMPTY;\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    private @Nullable QueryExecution currentQueryExecution;\n+    private QueryResult lastQueryResult = QueryResult.NO_RESULT;\n+\n+    public QueryHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize query handler for {}\", getQueryIdentifier());\n+        config = getConfigAs(QueryConfiguration.class);\n+        queryResultExtractor = new QueryResultExtractor(config);\n+\n+        initQueryResultChannelUpdater();\n+        updateStateWithParentBridgeStatus();\n+    }\n+\n+    private void initQueryResultChannelUpdater() {\n+        ChannelStateUpdater channelStateUpdater = (channel, state) -> updateState(channel.getUID(), state);\n+        queryResultChannelUpdater = new QueryResultChannelUpdater(channelStateUpdater, this::getResultChannels2Update);\n+    }\n+\n+    private void scheduleQueryExecutionIntervalIfNeeded() {\n+        int interval = config.getInterval();\n+        if (interval != QueryConfiguration.NO_INTERVAL && scheduledQueryExecutionInterval == null) {\n+            logger.trace(\"Scheduling query execution every {} seconds for {}\", interval, getQueryIdentifier());\n+            scheduledQueryExecutionInterval = Executors.newSingleThreadScheduledExecutor()\n+                    .scheduleAtFixedRate(this::executeQuery, 0, interval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @NonNull\n+    private ThingUID getQueryIdentifier() {\n+        return getThing().getUID();\n+    }\n+\n+    private void cancelQueryExecutionIntervalIfNeeded() {\n+        @Nullable\n+        ScheduledFuture<?> currentFuture = scheduledQueryExecutionInterval;\n+        if (currentFuture != null) {\n+            currentFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.trace(\"dispose query handler for {}\", getQueryIdentifier());\n+        cancelQueryExecutionIntervalIfNeeded();\n+        cancelCurrentQueryExecution();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"handleCommand for channel {} with command {}\", channelUID, command);\n+\n+        if (command instanceof RefreshType) {\n+            if (CHANNEL_EXECUTE.equals(channelUID.getId())) {\n+                executeQuery();\n+            }\n+        } else {\n+            logger.debug(\"Query Thing can only handle RefreshType commands as the thing is read-only\");\n+        }\n+    }\n+\n+    private synchronized void executeQuery() {\n+        if (getThing().getStatus() == ThingStatus.ONLINE) {\n+            @Nullable\n+            QueryExecution queryExecution = currentQueryExecution;\n+            if (queryExecution != null) {\n+                logger.debug(\"Previous query execution for {} discarded as a new one is requested\",\n+                        getQueryIdentifier());\n+                cancelCurrentQueryExecution();\n+            }\n+\n+            queryExecution = new QueryExecution(database, config, queryResultReceived);\n+            this.currentQueryExecution = queryExecution;\n+\n+            if (config.isHasParameters()) {\n+                logger.trace(\"{} triggered to set parameters for {}\", TRIGGER_CHANNEL_CALCULATE_PARAMETERS,\n+                        queryExecution);\n+                updateParametersChannel(QueryParameters.EMPTY);\n+                triggerChannel(TRIGGER_CHANNEL_CALCULATE_PARAMETERS);\n+            } else {\n+                queryExecution.execute();\n+            }\n+        } else {\n+            logger.debug(\"Execute query ignored because thing status is {}\", getThing().getStatus());\n+        }\n+    }\n+\n+    private synchronized void cancelCurrentQueryExecution() {\n+        @Nullable\n+        QueryExecution current = currentQueryExecution;\n+        if (current != null) {\n+            current.cancel();\n+            currentQueryExecution = null;\n+        }\n+    }\n+\n+    private void updateStateWithQueryResult(QueryResult queryResult) {\n+        var currentQueryResultChannelUpdater = queryResultChannelUpdater;\n+        var localCurrentQueryExecution = this.currentQueryExecution;\n+        lastQueryResult = queryResult;\n+        if (currentQueryResultChannelUpdater != null && localCurrentQueryExecution != null) {\n+            ResultValue resultValue = queryResultExtractor.extractResult(queryResult);\n+            updateCorrectChannel(resultValue.isCorrect());\n+            updateParametersChannel(localCurrentQueryExecution.getQueryParameters());\n+            if (resultValue.isCorrect()) {\n+                currentQueryResultChannelUpdater.updateChannelResults(resultValue.getResult());\n+            } else {\n+                currentQueryResultChannelUpdater.clearChannelResults();\n+            }\n+        } else {\n+            logger.warn(\n+                    \"QueryResult discarded as queryResultChannelUpdater nor currentQueryExecution are not expected to be null\");\n+        }\n+    }\n+\n+    private void updateCorrectChannel(boolean correct) {\n+        updateState(DBQueryBindingConstants.CHANNEL_CORRECT, OnOffType.from(correct));\n+    }\n+\n+    private void updateParametersChannel(QueryParameters queryParameters) {\n+        updateState(DBQueryBindingConstants.CHANNEL_PARAMETERS, new StringType(jsonEncoder.encode(queryParameters)));\n+    }\n+\n+    private void updateStateWithParentBridgeStatus() {\n+        final @Nullable Bridge bridge = getBridge();\n+        DatabaseBridgeHandler databaseBridgeHandler;\n+\n+        if (bridge != null) {\n+            @Nullable\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof DatabaseBridgeHandler) {\n+                databaseBridgeHandler = (DatabaseBridgeHandler) bridgeHandler;\n+                database = databaseBridgeHandler.getDatabase();\n+                if (bridge.getStatus() == ThingStatus.ONLINE) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        super.updateStatus(status, statusDetail, description);\n+        if (status == ThingStatus.ONLINE)\n+            scheduleQueryExecutionIntervalIfNeeded();\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        logger.trace(\"bridgeStatusChanged to {} for {}\", bridgeStatusInfo.getStatus(), getQueryIdentifier());\n+        cancelCurrentQueryExecution();\n+        updateStateWithParentBridgeStatus();\n+    }\n+\n+    public void setParameters(Map<String, @Nullable Object> parameters) {\n+        final @Nullable QueryExecution queryExecution = currentQueryExecution;\n+        if (queryExecution != null) {\n+            QueryParameters queryParameters = new QueryParameters(parameters);\n+            queryExecution.setQueryParameters(queryParameters);\n+            queryExecution.execute();\n+        } else {\n+            logger.trace(\"setParameters ignored as there is any executing query for {}\", getQueryIdentifier());\n+        }\n+    }\n+\n+    private final QueryExecution.QueryResultListener queryResultReceived = (QueryResult queryResult) -> {\n+        synchronized (QueryHandler.this) {\n+            logger.trace(\"queryResultReceived for {} : {}\", getQueryIdentifier(), queryResult);\n+            updateStateWithQueryResult(queryResult);", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU0MDkxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693540919", "bodyText": "That one it's an important one also. Because the logger part is the result from the database as it is received, and to detect bugs it's very useful, what is updated in the state is further processed result.", "author": "lujop", "createdAt": "2021-08-22T18:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1OTQ5Mg=="}, {"id": "PRRC_kwDOAS1o684q3B93", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r719069047", "bodyText": "Leave as is.", "author": "Skinah", "createdAt": "2021-09-30T05:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODk1OTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MDUzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650470535", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.trace(\"Channel {} state updated to {}\", channel.getUID(), state);\n          \n      \n    \n    \n  \n\nstate changes already get logged to the event.log", "author": "Skinah", "createdAt": "2021-06-13T05:09:51Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryResultChannelUpdater.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.error.UnnexpectedCondition;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Updates a query result to needed channels doing needed conversions\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryResultChannelUpdater {\n+    private final Logger logger = LoggerFactory.getLogger(QueryResultChannelUpdater.class);\n+\n+    private final ChannelStateUpdater channelStateUpdater;\n+    private final ChannelsToUpdateQueryResult channels2Update;\n+    private final Value2StateConverter value2StateConverter;\n+\n+    public QueryResultChannelUpdater(ChannelStateUpdater channelStateUpdater,\n+            ChannelsToUpdateQueryResult channelsToUpdate) {\n+        this.channelStateUpdater = channelStateUpdater;\n+        this.channels2Update = channelsToUpdate;\n+        this.value2StateConverter = new Value2StateConverter();\n+    }\n+\n+    public void clearChannelResults() {\n+        for (Channel channel : channels2Update.getChannels()) {\n+            channelStateUpdater.updateChannelState(channel, UnDefType.NULL);\n+        }\n+    }\n+\n+    public void updateChannelResults(@Nullable Object extractedResult) {\n+        for (Channel channel : channels2Update.getChannels()) {\n+            Class<? extends State> targetType = calculateItemType(channel);\n+            State state = value2StateConverter.convertValue(extractedResult, targetType);\n+            channelStateUpdater.updateChannelState(channel, state);\n+            logger.trace(\"Channel {} state updated to {}\", channel.getUID(), state);", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MDgxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650470816", "bodyText": "The code analysis reports this as a WARNING.\nsvalue.equals(\"1\")\nshould be \"1\".equals(svalue)\nreason is only the value in the brackets is checked safely for NULL and wont throw a NPE. Please change all occurrences of this to remove the warnings.", "author": "Skinah", "createdAt": "2021-06-13T05:13:38Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/Value2StateConverter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Base64;\n+import java.util.Date;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.error.UnnexpectedCondition;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage conversion from a value to needed State target type\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Value2StateConverter {\n+    private final Logger logger = LoggerFactory.getLogger(Value2StateConverter.class);\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    public State convertValue(@Nullable Object value, Class<? extends State> targetType) {\n+        if (value == null) {\n+            return UnDefType.NULL;\n+        } else {\n+            if (targetType == StringType.class) {\n+                return convert2String(value);\n+            } else if (targetType == DecimalType.class) {\n+                return convert2Decimal(value);\n+            } else if (targetType == DateTimeType.class) {\n+                return convert2DateTime(value);\n+            } else if (targetType == OnOffType.class) {\n+                @Nullable\n+                Boolean bool = convert2Boolean(value);\n+                return bool != null ? OnOffType.from(bool) : UnDefType.NULL;\n+            } else if (targetType == OpenClosedType.class) {\n+                @Nullable\n+                Boolean bool = convert2Boolean(value);\n+                if (bool != null)\n+                    return bool ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+                else\n+                    return UnDefType.NULL;\n+            } else {\n+                throw new UnnexpectedCondition(\"Not expected targetType \" + targetType);\n+            }\n+        }\n+    }\n+\n+    private State convert2DateTime(Object value) {\n+        if (value instanceof Instant)\n+            return new DateTimeType(ZonedDateTime.ofInstant((Instant) value, ZoneId.systemDefault()));\n+        else if (value instanceof Date)\n+            return new DateTimeType(ZonedDateTime.ofInstant(((Date) value).toInstant(), ZoneId.systemDefault()));\n+        else if (value instanceof String)\n+            return new DateTimeType((String) value);\n+        else {\n+            logger.warn(\"Can't convert {} to DateTimeType\", value);\n+            return UnDefType.NULL;\n+        }\n+    }\n+\n+    private State convert2Decimal(Object value) {\n+        if (value instanceof Integer)\n+            return new DecimalType((Integer) value);\n+        else if (value instanceof Long)\n+            return new DecimalType((Long) value);\n+        else if (value instanceof Float)\n+            return new DecimalType((Float) value);\n+        else if (value instanceof Double)\n+            return new DecimalType((Double) value);\n+        else if (value instanceof BigDecimal)\n+            return new DecimalType((BigDecimal) value);\n+        else if (value instanceof BigInteger)\n+            return new DecimalType(new BigDecimal((BigInteger) value));\n+        else if (value instanceof Number)\n+            return new DecimalType(((Number) value).longValue());\n+        else if (value instanceof String)\n+            return DecimalType.valueOf((String) value);\n+        else if (value instanceof Duration)\n+            return new DecimalType(((Duration) value).toMillis());\n+        else {\n+            logger.warn(\"Can't convert {} to DecimalType\", value);\n+            return UnDefType.NULL;\n+        }\n+    }\n+\n+    private State convert2String(Object value) {\n+        if (value instanceof String) {\n+            return new StringType((String) value);\n+        } else if (value instanceof byte[]) {\n+            return new StringType(Base64.getEncoder().encodeToString((byte[]) value));\n+        } else if (value instanceof QueryResult) {\n+            return new StringType(jsonEncoder.encode((QueryResult) value));\n+        } else {\n+            return new StringType(String.valueOf(value));\n+        }\n+    }\n+\n+    private @Nullable Boolean convert2Boolean(Object value) {\n+        if (value instanceof Boolean)\n+            return (Boolean) value;\n+        else if (value instanceof Number)\n+            return ((Number) value).doubleValue() != 0d;\n+        else if (value instanceof String) {\n+            var svalue = (String) value;\n+            return Boolean.parseBoolean(svalue) || (svalue.equalsIgnoreCase(\"on\")) || svalue.equals(\"1\");", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU0MTIwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693541207", "bodyText": "Why does it report it?\nBecause instanceof garants that result isn't null and as it is a local variable it must be notnull there too.", "author": "lujop", "createdAt": "2021-08-22T18:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MDgxNg=="}, {"id": "PRRC_kwDOAS1o684qbA43", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711724599", "bodyText": "Hm, I don't get any warning on that.", "author": "fwolter", "createdAt": "2021-09-19T10:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MDgxNg=="}, {"id": "PRRC_kwDOAS1o684q3CPZ", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r719070169", "bodyText": "ignore then as I have not compiled it, only guessed this would be an issue for the code analysis report that is found in the target folder. If it does not show up in the report then ignore.", "author": "Skinah", "createdAt": "2021-09-30T05:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MDgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MTc5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650471798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Executed query channel</label>\n          \n          \n            \n            \t\t<label>Execute Query</label>\n          \n      \n    \n    \n  \n\nlabels should be:\n\nShort, less than 25 characters.\nEach word starts in capitals unless it is a joining word like or, and, a ...\nIt will get used to auto name the items with when the framework does the feature \"creates equipment from a thing\".", "author": "Skinah", "createdAt": "2021-06-13T05:26:33Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query channel</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MjgwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650472803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Executed query result channel with String type</label>\n          \n          \n            \n            \t\t<label>String Result</label>", "author": "Skinah", "createdAt": "2021-06-13T05:38:21Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query channel</label>\n+\t\t<description>Send ON to execute the query, the current state tells if the query is running</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-string\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Executed query result channel with String type</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MjkwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650472908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Executed query result channel with Number type</label>\n          \n          \n            \n            \t\t<label>Number Result</label>", "author": "Skinah", "createdAt": "2021-06-13T05:39:58Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query channel</label>\n+\t\t<description>Send ON to execute the query, the current state tells if the query is running</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-string\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Executed query result channel with String type</label>\n+\t\t<description>Execute query and binds result value to channel as a String</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-number\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Executed query result channel with Number type</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzAyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650473023", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | resultString    | String    | Result of last executed query as an String |\n          \n          \n            \n            | resultString    | String    | Result of last executed query as a String |", "author": "Skinah", "createdAt": "2021-06-13T05:41:23Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzMzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650473334", "bodyText": "Can you make this clearer as I am not sure how this is different to resultSwitch channel? Do you mean correct, or do you mean true like a boolean?", "author": "Skinah", "createdAt": "2021-06-13T05:44:56Z", "path": "bundles/org.openhab.binding.dbquery/README.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# DBQuery Binding\n+\n+This binding allows creating items from the result of native database queries.\n+It currently only supports InfluxDB 2.0.\n+\n+You can use the addon in any situation where you want to create an item from a native query, the source of the query can\n+be any supported database, and don't need to be the one you use as persistence service in openHAB.\n+Some use cases can be:\n+\n+- Integrate a device that stores its data in a database\n+- Query derived data from you openHAB persistence, for example with Influx2 tasks you can process your data to create a new one   \n+- Bypass limitations of current openHAB persistence queries\n+\n+\n+## Supported Things\n+\n+There are two types of supported things: `influxdb2` and a `query`.\n+For each different database, you want to connect you must define a `Bridge` thing for that database.\n+Then each `Bridge` can define as much as wanted `Query` things you want to execute.\n+\n+Current supported `Bridge` is:\n+\n+- `influxdb2`\n+\n+## Thing Configuration\n+\n+### Bridges\n+\n+#### influxdb2\n+\n+Defines a connection to an Influx2 database and allows creating queries on it.\n+\n+| Parameter    | Required | Description                               |\n+|--------------|----------|-----------------------------------------  |\n+| url          | Yes      | database url                              |\n+| user         | Yes      | name of the database user                 |\n+| token        | Yes      | token to authenticate to the database  ([Intructions about how to create one](https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/))   |\n+| organization | Yes      | database organization name               |\n+| bucket       | Yes      | database bucket name                      |\n+\n+### query\n+\n+The `Query` thing defines a native query that provides several channels that you can bind to items. \n+\n+#### Query parameters\n+\n+The query items support the following parameters:\n+\n+| Parameter    | Required | Default  | Description                                                           |\n+|--------------|----------|----------|-----------------------------------------------------------------------|\n+| query        | true     |          | Query string in native syntax                                         |\n+| interval     | false    | 0        | Interval in seconds in which the query is automatically executed      |\n+| hasParameters| false    | false    | True if the query has parameters, false otherwise                         | \n+| timeout      | false    | 0        | Query execution timeout in seconds                                    |\n+| scalarResult | false    | true     | If query always returns a single value or not                         |\n+| scalarColumn | false    |          | In case of multiple columns, it indicates which to use for scalarResult|\n+\n+that are described further in the following subsections\n+\n+##### query  \n+\n+The query the items represents in the native language of your database:\n+\n+ - Flux for `influxdb2`\n+ \n+#### hasParameters\n+\n+If `hasParameters=true` you can use parameters in the query string that can be dynamically set with the `setQueryParameters` action.\n+ \n+ For InfluxDB use the `${paramName}` syntax for each parameter, and keep in mind that the values from that parameters must be from a trusted source as current\n+ parameter substitution is subject to query injection attacks.\n+ \n+#### timeout\n+\n+A time-out in seconds to wait for the query result, if it's exceeded, result will be discarded and the addon will do its best effort to cancel the query.\n+Currently it's ignored and it will be implemented in a future version.\n+\n+#### scalarResult \n+\n+If `true` the query is expected to return a single scalar value that will be available to `result` channels as string, number, boolean,...\n+If the query can return several rows and/or several columns per row then it needs to be set to `false` and the result can be retrieved in `resultString`\n+channel as JSON or using the `getLastQueryResult` action.   \n+\n+#### scalarColumn\n+\n+In case `scalarResult` is `true` and the select returns multiple columns you can use that parameter to choose which column to use to extract the result.\n+\n+## Channels\n+\n+Query items offer the following channels to be able to query / bind them to items:\n+\n+| Channel Type ID | Item Type | Description                                                                                                                        |\n+|-----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------|\n+| execute         | Switch    | Send `ON` to execute the query manually. It also indicates if query is currently running (`ON`) or not running (`OFF`)          |\n+| resultString    | String    | Result of last executed query as an String |\n+| resultNumber    | Number    | Result of last executed query as a Number, query must have `scalarResult=true` |\n+| resultDateTime  | DateTime  | Result of last executed query as a DateTime, query must have `scalarResult=true` |\n+| resultContact   | Contact   | Result of last executed query as Contact, query must have `scalarResult=true` |\n+| resultSwitch    | Switch    | Result of last executed query as Switch, query must have `scalarResult=true` |\n+| parameters      | String    | Contains parameters of last executed query as JSON|\n+| correct         | Switch    | `ON` if the result of last executed query was correct |", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjM4NTY1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r692385652", "bodyText": "The correct channel show if the last query was executed correctly.\nWhile the switch and contact ones are for queries that return a value that can be evaluated as a boolean.\nThere is some conversion logic at org.openhab.binding.dbquery.internal.Value2StateConverter#convertValue to convert the query result to the requested type", "author": "lujop", "createdAt": "2021-08-19T18:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzMzNA=="}, {"id": "PRRC_kwDOAS1o684q3DTQ", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r719074512", "bodyText": "So do I understand it if I suggest this wording?\n`ON` if the last executed query completed successfully, `OFF` if the query failed.\n\nI feel the description does not explain what the channel is for when someone is new to the binding, perhaps I am a slow learner :)", "author": "Skinah", "createdAt": "2021-09-30T05:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzMzNA=="}, {"id": "PRRC_kwDOAS1o684q5kyz", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r719735987", "bodyText": "Thanks, sounds better", "author": "lujop", "createdAt": "2021-09-30T20:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzQ4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650473484", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Executed query result channel with DateTime type</label>\n          \n          \n            \n            \t\t<label>DateTime Result</label>", "author": "Skinah", "createdAt": "2021-06-13T05:46:44Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query channel</label>\n+\t\t<description>Send ON to execute the query, the current state tells if the query is running</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-string\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Executed query result channel with String type</label>\n+\t\t<description>Execute query and binds result value to channel as a String</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-number\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Executed query result channel with Number type</label>\n+\t\t<description>Execute query and binds result value to channel as a Number</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-datetime\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with DateTime type</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzYwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650473605", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Last query parameters exposed as a JSON object</label>\n          \n          \n            \n            \t\t<label>JSON Result</label>", "author": "Skinah", "createdAt": "2021-06-13T05:48:01Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query channel</label>\n+\t\t<description>Send ON to execute the query, the current state tells if the query is running</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-string\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Executed query result channel with String type</label>\n+\t\t<description>Execute query and binds result value to channel as a String</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-number\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Executed query result channel with Number type</label>\n+\t\t<description>Execute query and binds result value to channel as a Number</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-datetime\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with DateTime type</label>\n+\t\t<description>Execute query and binds result value to channel as a DateTime</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-contact\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with Contact type</label>\n+\t\t<description>Execute query and binds result value to channel as a Contact</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-switch\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query result channel with Switch type</label>\n+\t\t<description>Execute query and binds result value to channel as a Switch</description>\n+\t</channel-type>\n+\t<channel-type id=\"parameters-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Last query parameters exposed as a JSON object</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650473645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Executed query result channel with Switch type</label>\n          \n          \n            \n            \t\t<label>Switch Result</label>", "author": "Skinah", "createdAt": "2021-06-13T05:48:26Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query channel</label>\n+\t\t<description>Send ON to execute the query, the current state tells if the query is running</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-string\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Executed query result channel with String type</label>\n+\t\t<description>Execute query and binds result value to channel as a String</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-number\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Executed query result channel with Number type</label>\n+\t\t<description>Execute query and binds result value to channel as a Number</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-datetime\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with DateTime type</label>\n+\t\t<description>Execute query and binds result value to channel as a DateTime</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-contact\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with Contact type</label>\n+\t\t<description>Execute query and binds result value to channel as a Contact</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-switch\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query result channel with Switch type</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzcyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650473725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Executed query result channel with Contact type</label>\n          \n          \n            \n            \t\t<label>Contact Result</label>", "author": "Skinah", "createdAt": "2021-06-13T05:49:03Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query channel</label>\n+\t\t<description>Send ON to execute the query, the current state tells if the query is running</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-string\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Executed query result channel with String type</label>\n+\t\t<description>Execute query and binds result value to channel as a String</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-number\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Executed query result channel with Number type</label>\n+\t\t<description>Execute query and binds result value to channel as a Number</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-datetime\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with DateTime type</label>\n+\t\t<description>Execute query and binds result value to channel as a DateTime</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-contact\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with Contact type</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3Mzc5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650473792", "bodyText": "Too long and not in Capitals, see above comments and examples.", "author": "Skinah", "createdAt": "2021-06-13T05:49:56Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query channel</label>\n+\t\t<description>Send ON to execute the query, the current state tells if the query is running</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-string\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Executed query result channel with String type</label>\n+\t\t<description>Execute query and binds result value to channel as a String</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-number\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Executed query result channel with Number type</label>\n+\t\t<description>Execute query and binds result value to channel as a Number</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-datetime\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with DateTime type</label>\n+\t\t<description>Execute query and binds result value to channel as a DateTime</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-contact\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Executed query result channel with Contact type</label>\n+\t\t<description>Execute query and binds result value to channel as a Contact</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-switch\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Executed query result channel with Switch type</label>\n+\t\t<description>Execute query and binds result value to channel as a Switch</description>\n+\t</channel-type>\n+\t<channel-type id=\"parameters-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Last query parameters exposed as a JSON object</label>\n+\t</channel-type>\n+\t<channel-type id=\"correct-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>True if last query executed correctly, otherwise false</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzU0MTUzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r693541537", "bodyText": "It's not the same case, and I think that is important to leave it clear, as you already reported confusion to distinguish this and the result ones.\nBut as I'm not a native English speaker any help in rewriting it clearly will be very appreciated.", "author": "lujop", "createdAt": "2021-08-22T18:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3Mzc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3MzkzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650473939", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>Query definition</label>\n          \n          \n            \n            \t\t\t\t<label>Query Definition</label>", "author": "Skinah", "createdAt": "2021-06-13T05:51:13Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ3NDA1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r650474051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>Query has parameters</label>\n          \n          \n            \n            \t\t\t\t<label>Query has Parameters</label>", "author": "Skinah", "createdAt": "2021-06-13T05:52:25Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has parameters</label>", "originalCommit": "4afe2afe92b85efe8ab0821f7cc78792347351d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c5ec59e570aa2727a728fb083718871d53bc7444", "url": "https://github.com/openhab/openhab-addons/commit/c5ec59e570aa2727a728fb083718871d53bc7444", "message": "Update bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/JDBCBridgeHandler.java\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:19:32Z", "type": "commit"}, {"oid": "a05e81a4e45d12cdbcbf9d7d1d8452780d5a727d", "url": "https://github.com/openhab/openhab-addons/commit/a05e81a4e45d12cdbcbf9d7d1d8452780d5a727d", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:22:43Z", "type": "commit"}, {"oid": "318e4e7256bd53af4c3776b8019b14d9a4a610f4", "url": "https://github.com/openhab/openhab-addons/commit/318e4e7256bd53af4c3776b8019b14d9a4a610f4", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:23:00Z", "type": "commit"}, {"oid": "89a4ac04e697a297fb857172049a5d6a8f4999ed", "url": "https://github.com/openhab/openhab-addons/commit/89a4ac04e697a297fb857172049a5d6a8f4999ed", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:23:15Z", "type": "commit"}, {"oid": "dae8934a2a4df3b990b771f12c13105b2713a203", "url": "https://github.com/openhab/openhab-addons/commit/dae8934a2a4df3b990b771f12c13105b2713a203", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:23:26Z", "type": "commit"}, {"oid": "2fb00ab6042bdc7b9e007f36678f93a0893034b9", "url": "https://github.com/openhab/openhab-addons/commit/2fb00ab6042bdc7b9e007f36678f93a0893034b9", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:23:53Z", "type": "commit"}, {"oid": "143ac55d769ed2452affd9275290d1dd95c5abd2", "url": "https://github.com/openhab/openhab-addons/commit/143ac55d769ed2452affd9275290d1dd95c5abd2", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:24:08Z", "type": "commit"}, {"oid": "fdf75a0a3a6b107f1ea0fadc3389dad3b5d774de", "url": "https://github.com/openhab/openhab-addons/commit/fdf75a0a3a6b107f1ea0fadc3389dad3b5d774de", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:24:30Z", "type": "commit"}, {"oid": "851327164ff6d5cc6055cccd5a7c03b27eeab306", "url": "https://github.com/openhab/openhab-addons/commit/851327164ff6d5cc6055cccd5a7c03b27eeab306", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:24:47Z", "type": "commit"}, {"oid": "c0abd282062e52ca783855caf87aa6fa05e71344", "url": "https://github.com/openhab/openhab-addons/commit/c0abd282062e52ca783855caf87aa6fa05e71344", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:33:09Z", "type": "commit"}, {"oid": "729b1a25030a4f769013f811743a50fce0a07236", "url": "https://github.com/openhab/openhab-addons/commit/729b1a25030a4f769013f811743a50fce0a07236", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:33:29Z", "type": "commit"}, {"oid": "ef8d6d04f829c6c1de57ada384d07e8d04be96fd", "url": "https://github.com/openhab/openhab-addons/commit/ef8d6d04f829c6c1de57ada384d07e8d04be96fd", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:33:45Z", "type": "commit"}, {"oid": "701583f472362d66d6dd364e3cba3953ab69c5eb", "url": "https://github.com/openhab/openhab-addons/commit/701583f472362d66d6dd364e3cba3953ab69c5eb", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:34:02Z", "type": "commit"}, {"oid": "24d9a18460081a1456b101e45adb5896f09e288d", "url": "https://github.com/openhab/openhab-addons/commit/24d9a18460081a1456b101e45adb5896f09e288d", "message": "Update bundles/org.openhab.binding.dbquery/README.md\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:34:17Z", "type": "commit"}, {"oid": "0ea5efe50d4ebf02ec882386173342ba2c093d0a", "url": "https://github.com/openhab/openhab-addons/commit/0ea5efe50d4ebf02ec882386173342ba2c093d0a", "message": "Update bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DatabaseBridgeHandler.java\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-19T18:39:39Z", "type": "commit"}, {"oid": "2a696b0fb910d5f821073502dd24f912cc466636", "url": "https://github.com/openhab/openhab-addons/commit/2a696b0fb910d5f821073502dd24f912cc466636", "message": "Apply suggestions from code review\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-08-22T19:54:31Z", "type": "commit"}, {"oid": "e900721b1419d51163353950ce965b01ed5b5c21", "url": "https://github.com/openhab/openhab-addons/commit/e900721b1419d51163353950ce965b01ed5b5c21", "message": "Suggestions from code review\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2021-08-22T19:58:09Z", "type": "commit"}, {"oid": "255e5619096b6a93f62d619f29772c41bf6f16d3", "url": "https://github.com/openhab/openhab-addons/commit/255e5619096b6a93f62d619f29772c41bf6f16d3", "message": "Merge remote-tracking branch 'openhab/main' into dbquery_initial_submission", "committedDate": "2021-08-22T19:58:34Z", "type": "commit"}, {"oid": "7a9ec0b2acd7ace24081b33bd763607e70c45fde", "url": "https://github.com/openhab/openhab-addons/commit/7a9ec0b2acd7ace24081b33bd763607e70c45fde", "message": "Update parent version\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2021-08-23T17:54:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDA2MTM0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r704061343", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>True if last query executed correctly, otherwise false</label>\n          \n          \n            \n            \t\t<label>Last Query Worked</label>\n          \n          \n            \n            \t\t<description>True if last query executed correctly</description>\n          \n      \n    \n    \n  \n\nNote the label is short (less then 25 characters) and each word starts with a captial. Description can be longer and give more detail.", "author": "Skinah", "createdAt": "2021-09-08T05:36:05Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query Definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has Parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Timeout Query</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tA time-out in seconds to wait for the query result, if it's exceeded result will be discarded.\n+\t\t\t\t\tUse 0 for\n+\t\t\t\t\tno timeout\n+\t\t\t\t</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n+\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"execute-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Execute Query</label>\n+\t\t<description>Send ON to execute the query, the current state tells if the query is running</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-string\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>String Result</label>\n+\t\t<description>Execute query and binds result value to channel as a String</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-number\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Number Result</label>\n+\t\t<description>Execute query and binds result value to channel as a Number</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-datetime\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>DateTime Result</label>\n+\t\t<description>Execute query and binds result value to channel as a DateTime</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-contact\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Contact Result</label>\n+\t\t<description>Execute query and binds result value to channel as a Contact</description>\n+\t</channel-type>\n+\t<channel-type id=\"result-channel-switch\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Switch Result</label>\n+\t\t<description>Execute query and binds result value to channel as a Switch</description>\n+\t</channel-type>\n+\t<channel-type id=\"parameters-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>JSON Result</label>\n+\t</channel-type>\n+\t<channel-type id=\"correct-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>True if last query executed correctly, otherwise false</label>", "originalCommit": "7a9ec0b2acd7ace24081b33bd763607e70c45fde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDA2MzIzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r704063236", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>Database type</label>\n          \n          \n            \n            \t\t\t\t<label>Database Type</label>", "author": "Skinah", "createdAt": "2021-09-08T05:40:44Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/jdbc-bridge.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<bridge-type id=\"jdbc\">\n+\t\t<label>JDBC Bridge</label>\n+\t\t<description>The JDBC bridge represents a connection to a JDBC 2.0 server. It's only possible\n+\t\t\tto connect to supported\n+\t\t\tdatabase for which a driver is provided in the addon\n+\t\t</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"url\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<label>Url</label>\n+\t\t\t\t<description>JDBC url to connecto to the database i.e. jdbc:mysql://localhost:33060/openhab </description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"user\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Username</label>\n+\t\t\t\t<description>Name of the database user</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<context>password</context>\n+\t\t\t\t<description>Password to authenticate to the database</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"type\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Database type</label>", "originalCommit": "7a9ec0b2acd7ace24081b33bd763607e70c45fde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDA2NDA3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r704064075", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>Scalar result</label>\n          \n          \n            \n            \t\t\t\t<label>Scalar Result</label>", "author": "Skinah", "createdAt": "2021-09-08T05:42:40Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query Definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has Parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>", "originalCommit": "7a9ec0b2acd7ace24081b33bd763607e70c45fde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDA2NDMyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r704064329", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>Scalar column name</label>\n          \n          \n            \n            \t\t\t\t<label>Scalar Column Name</label>", "author": "Skinah", "createdAt": "2021-09-08T05:43:11Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query Definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has Parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>", "originalCommit": "7a9ec0b2acd7ace24081b33bd763607e70c45fde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDA2NTI3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r704065272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)\n          \n          \n            \n            \t\t\t\t\tquery is never executed automatically. You need to send the ON command each time you wish to execute.\n          \n      \n    \n    \n  \n\nDoes this make more sense, or did I get it wrong?", "author": "Skinah", "createdAt": "2021-09-08T05:45:26Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query Definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"hasParameters\" type=\"boolean\">\n+\t\t\t\t<label>Query has Parameters</label>\n+\t\t\t\t<description>True if the query has parameters, otherwise false</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarResult\" type=\"boolean\">\n+\t\t\t\t<label>Scalar result</label>\n+\t\t\t\t<description>True if the query always return only one single scalar value (only one row and one value-column in this\n+\t\t\t\t\trow), otherwise false</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"scalarColumn\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Scalar column name</label>\n+\t\t\t\t<description>The column's name that is used to extract scalarResult. If only one column is returned this\n+\t\t\t\t\tparameter\n+\t\t\t\t\tcan be blank</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"interval\" type=\"integer\" min=\"0\">\n+\t\t\t\t<label>Interval</label>\n+\t\t\t\t<description>\n+\t\t\t\t\tAn interval, in seconds, the query will be repeatedly executed. Default values is 0, which means that\n+\t\t\t\t\tquery is never executed manually (you need to send ON to execute channel)", "originalCommit": "7a9ec0b2acd7ace24081b33bd763607e70c45fde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDI2MzU1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r704263553", "bodyText": "Yes it's absolutely correct.", "author": "lujop", "createdAt": "2021-09-08T09:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDA2NTI3Mg=="}], "type": "inlineReview"}, {"oid": "0abdf2fe52d4519f0ea502cc76514468f06530e8", "url": "https://github.com/openhab/openhab-addons/commit/0abdf2fe52d4519f0ea502cc76514468f06530e8", "message": "Update bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-09-08T09:51:56Z", "type": "commit"}, {"oid": "dd2ec87447682ffe6e27644b1e836a0c384718a9", "url": "https://github.com/openhab/openhab-addons/commit/dd2ec87447682ffe6e27644b1e836a0c384718a9", "message": "Update bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-09-08T09:52:08Z", "type": "commit"}, {"oid": "e5cc8c14dc7de152a8d75222285f48663b4ee3f0", "url": "https://github.com/openhab/openhab-addons/commit/e5cc8c14dc7de152a8d75222285f48663b4ee3f0", "message": "Update bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-09-08T09:52:16Z", "type": "commit"}, {"oid": "2f58d26312ceebff4c4b90bcc4a82d0914994e3a", "url": "https://github.com/openhab/openhab-addons/commit/2f58d26312ceebff4c4b90bcc4a82d0914994e3a", "message": "Update bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/jdbc-bridge.xml\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-09-08T09:52:22Z", "type": "commit"}, {"oid": "e1453e0d53a68b3a932d091a7920311456c9647e", "url": "https://github.com/openhab/openhab-addons/commit/e1453e0d53a68b3a932d091a7920311456c9647e", "message": "Update bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml\n\nCo-authored-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-09-08T09:52:38Z", "type": "commit"}, {"id": "PRRC_kwDOAS1o684qbAAV", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711720981", "bodyText": "This file doesn't need a license header.", "author": "fwolter", "createdAt": "2021-09-19T10:21:47Z", "path": "bundles/org.openhab.binding.dbquery/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+\tCopyright (c) 2010-2020 Contributors to the openHAB project\n+\n+\tSee the NOTICE file(s) distributed with this work for additional\n+\tinformation.\n+\n+\tThis program and the accompanying materials are made available under the\n+\tterms of the Eclipse Public License 2.0 which is available at\n+\thttp://www.eclipse.org/legal/epl-2.0\n+\n+\tSPDX-License-Identifier: EPL-2.0\n+\n+-->\n+<features name=\"org.openhab.binding.dbquery-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbADy", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711721202", "bodyText": "This is already logged by the framework and can therefore be removed.", "author": "fwolter", "createdAt": "2021-09-19T10:23:53Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DBQueryHandlerFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_INFLUXDB2_BRIDGE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_JDBC_BRIDGE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_QUERY;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.error.UnnexpectedCondition;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DBQuery binding factory that is responsible for creating things and thing handlers.\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.dbquery\", service = ThingHandlerFactory.class)\n+public class DBQueryHandlerFactory extends BaseThingHandlerFactory {\n+    private static final Logger logger = LoggerFactory.getLogger(DBQueryHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_INFLUXDB2_BRIDGE,\n+            THING_TYPE_JDBC_BRIDGE, THING_TYPE_QUERY);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        logger.trace(\"createHandler for thing {}\", thing.getUID());", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbAEj", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711721251", "bodyText": "This method is expected to return null if a handler couldn't be found.", "author": "fwolter", "createdAt": "2021-09-19T10:24:30Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DBQueryHandlerFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_INFLUXDB2_BRIDGE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_JDBC_BRIDGE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.THING_TYPE_QUERY;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.error.UnnexpectedCondition;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DBQuery binding factory that is responsible for creating things and thing handlers.\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.dbquery\", service = ThingHandlerFactory.class)\n+public class DBQueryHandlerFactory extends BaseThingHandlerFactory {\n+    private static final Logger logger = LoggerFactory.getLogger(DBQueryHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_INFLUXDB2_BRIDGE,\n+            THING_TYPE_JDBC_BRIDGE, THING_TYPE_QUERY);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        logger.trace(\"createHandler for thing {}\", thing.getUID());\n+\n+        if (THING_TYPE_QUERY.equals(thingTypeUID)) {\n+            return new QueryHandler(thing);\n+        } else if (THING_TYPE_INFLUXDB2_BRIDGE.equals(thingTypeUID)) {\n+            return new InfluxDB2BridgeHandler((Bridge) thing);\n+        } else if (THING_TYPE_JDBC_BRIDGE.equals(thingTypeUID)) {\n+            return new JDBCBridgeHandler((Bridge) thing);\n+        } else {\n+            throw new UnnexpectedCondition(\"thingTypeUID \" + thingTypeUID + \" not expected\");", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684qbSUr", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711796011", "bodyText": "But is that possible that the factory it's called for a binding it doesn't know about?\nUsually, I prefer to program that defensively to allow fail-fast behavior", "author": "lujop", "createdAt": "2021-09-19T20:07:08Z", "replyToReviewId": "PRRC_kwDOAS1o684qbAEj"}, {"id": "PRRC_kwDOAS1o684qb9Bv", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711970927", "bodyText": "I think the factory can be called for a Thing type, which doesn't exist.\nFail-fast is good! In this case the framework takes care of it. Returning null is a common pattern in all bindings.", "author": "fwolter", "createdAt": "2021-09-20T08:34:18Z", "replyToReviewId": "PRRC_kwDOAS1o684qbAEj"}], "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbAXh", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711722465", "bodyText": "This will create a new thread each time this method is called and these threads won't be shut down when this handler is disposed. Is there any reason not using the framework scheduler? You can access it via the scheduler field of the super class.", "author": "fwolter", "createdAt": "2021-09-19T10:33:31Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/DatabaseBridgeHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base implementation common to all implementation of database bridge\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class DatabaseBridgeHandler extends BaseBridgeHandler {\n+    private static final long RETRY_CONNECTION_ATTEMPT_TIME_SECONDS = 60;\n+    private final Logger logger = LoggerFactory.getLogger(DatabaseBridgeHandler.class);\n+    private Database database = Database.EMPTY;\n+    private @Nullable ScheduledFuture<?> retryConnectionAttemptFuture;\n+\n+    public DatabaseBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        initConfig();\n+\n+        database = createDatabase();\n+\n+        connectDatabase();\n+    }\n+\n+    private void connectDatabase() {\n+        logger.debug(\"connectDatabase {}\", database);\n+        var completable = database.connect();\n+        updateStatus(ThingStatus.UNKNOWN);\n+        completable.thenAccept(result -> {\n+            if (result) {\n+                logger.trace(\"Succesfully connected to database {}\", getThing().getUID());\n+                updateStatus(ThingStatus.ONLINE);\n+            } else {\n+                logger.trace(\"Connect to database {} failed\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                if (retryConnectionAttemptFuture == null) {\n+                    scheduleRetryConnectionAttempt();\n+                }\n+            }\n+        });\n+    }\n+\n+    protected void scheduleRetryConnectionAttempt() {\n+        logger.trace(\"Scheduled retry connection attempt every {}\", RETRY_CONNECTION_ATTEMPT_TIME_SECONDS);\n+        retryConnectionAttemptFuture = Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(\n+                this::connectDatabase, RETRY_CONNECTION_ATTEMPT_TIME_SECONDS, RETRY_CONNECTION_ATTEMPT_TIME_SECONDS,\n+                TimeUnit.SECONDS);", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684qbTpB", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711801409", "bodyText": "Thanks @fwolter, I see a big mistake here on my part controlling the future but not the scheduler.\nI didn't know about the framework schedulers, is there any documentation about what I can expect from them (sharing, min/max number of threads,...) and what are fair uses for them?\nAre ok with large IO operations on edge cases like big connection timeouts?", "author": "lujop", "createdAt": "2021-09-19T20:52:54Z", "replyToReviewId": "PRRC_kwDOAS1o684qbAXh"}, {"id": "PRRC_kwDOAS1o684qb-xl", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711978085", "bodyText": "The documentation doesn't answer these questions in detail. You may run network operations in the framework's scheduler. Many bindings use 30s for HTTP requests. But in general they should return fast. So, for example Thread.sleep() is a no go.\nThe number of threads in this pool can be configured by the user, but there's a reasonable default value (which I don't have in mind).", "author": "fwolter", "createdAt": "2021-09-20T08:44:53Z", "replyToReviewId": "PRRC_kwDOAS1o684qbAXh"}], "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbAkh", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711723297", "bodyText": "See above. Use framework scheduler.\nscheduleAtFixedRate should only be used if necessary. Use scheduleWithFixedDelay. See https://next.openhab.org/docs/developer/guidelines.html#e-runtime-behavior", "author": "fwolter", "createdAt": "2021-09-19T10:40:21Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryHandler.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.CHANNEL_EXECUTE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.TRIGGER_CHANNEL_CALCULATE_PARAMETERS;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.QueryResultExtractor;\n+import org.openhab.binding.dbquery.internal.domain.ResultValue;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manages query thing, handling it's commands and updating it's channels\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(QueryHandler.class);\n+    // Relax nullable rules as config can be only null when not initialized\n+    private @NonNullByDefault({}) QueryConfiguration config;\n+    private @NonNullByDefault({}) QueryResultExtractor queryResultExtractor;\n+\n+    private @Nullable ScheduledFuture<?> scheduledQueryExecutionInterval;\n+    private @Nullable QueryResultChannelUpdater queryResultChannelUpdater;\n+    private Database database = Database.EMPTY;\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    private @Nullable QueryExecution currentQueryExecution;\n+    private QueryResult lastQueryResult = QueryResult.NO_RESULT;\n+\n+    public QueryHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(QueryConfiguration.class);\n+        queryResultExtractor = new QueryResultExtractor(config);\n+\n+        initQueryResultChannelUpdater();\n+        updateStateWithParentBridgeStatus();\n+    }\n+\n+    private void initQueryResultChannelUpdater() {\n+        ChannelStateUpdater channelStateUpdater = (channel, state) -> updateState(channel.getUID(), state);\n+        queryResultChannelUpdater = new QueryResultChannelUpdater(channelStateUpdater, this::getResultChannels2Update);\n+    }\n+\n+    private void scheduleQueryExecutionIntervalIfNeeded() {\n+        int interval = config.getInterval();\n+        if (interval != QueryConfiguration.NO_INTERVAL && scheduledQueryExecutionInterval == null) {\n+            logger.trace(\"Scheduling query execution every {} seconds for {}\", interval, getQueryIdentifier());\n+            scheduledQueryExecutionInterval = Executors.newSingleThreadScheduledExecutor()\n+                    .scheduleAtFixedRate(this::executeQuery, 0, interval, TimeUnit.SECONDS);", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684qbTso", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711801640", "bodyText": "Ok on framework scheduler, but here, the scheduleAtFixedRate is \"necessary\" because it's the documented and intended behavior.\nPossibly an improvement can be to allow the user to setup the fixedDelay behaviour in config.", "author": "lujop", "createdAt": "2021-09-19T20:54:48Z", "replyToReviewId": "PRRC_kwDOAS1o684qbAkh"}, {"id": "PRRC_kwDOAS1o684qb_Vr", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711980395", "bodyText": "If binding documentation talks about refresh intervals, they use scheduleWithFixedDelay. Usually you don't notice a difference and it makes it a lot easier for the scheduler.", "author": "fwolter", "createdAt": "2021-09-20T08:48:23Z", "replyToReviewId": "PRRC_kwDOAS1o684qbAkh"}], "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbAlq", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711723370", "bodyText": "The compiler is more intelligent on local variables. Therefore, the Nullable could be removed. Please check all.", "author": "fwolter", "createdAt": "2021-09-19T10:40:56Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryHandler.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.CHANNEL_EXECUTE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.TRIGGER_CHANNEL_CALCULATE_PARAMETERS;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.QueryResultExtractor;\n+import org.openhab.binding.dbquery.internal.domain.ResultValue;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manages query thing, handling it's commands and updating it's channels\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(QueryHandler.class);\n+    // Relax nullable rules as config can be only null when not initialized\n+    private @NonNullByDefault({}) QueryConfiguration config;\n+    private @NonNullByDefault({}) QueryResultExtractor queryResultExtractor;\n+\n+    private @Nullable ScheduledFuture<?> scheduledQueryExecutionInterval;\n+    private @Nullable QueryResultChannelUpdater queryResultChannelUpdater;\n+    private Database database = Database.EMPTY;\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    private @Nullable QueryExecution currentQueryExecution;\n+    private QueryResult lastQueryResult = QueryResult.NO_RESULT;\n+\n+    public QueryHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(QueryConfiguration.class);\n+        queryResultExtractor = new QueryResultExtractor(config);\n+\n+        initQueryResultChannelUpdater();\n+        updateStateWithParentBridgeStatus();\n+    }\n+\n+    private void initQueryResultChannelUpdater() {\n+        ChannelStateUpdater channelStateUpdater = (channel, state) -> updateState(channel.getUID(), state);\n+        queryResultChannelUpdater = new QueryResultChannelUpdater(channelStateUpdater, this::getResultChannels2Update);\n+    }\n+\n+    private void scheduleQueryExecutionIntervalIfNeeded() {\n+        int interval = config.getInterval();\n+        if (interval != QueryConfiguration.NO_INTERVAL && scheduledQueryExecutionInterval == null) {\n+            logger.trace(\"Scheduling query execution every {} seconds for {}\", interval, getQueryIdentifier());\n+            scheduledQueryExecutionInterval = Executors.newSingleThreadScheduledExecutor()\n+                    .scheduleAtFixedRate(this::executeQuery, 0, interval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @NonNull\n+    private ThingUID getQueryIdentifier() {\n+        return getThing().getUID();\n+    }\n+\n+    private void cancelQueryExecutionIntervalIfNeeded() {\n+        @Nullable\n+        ScheduledFuture<?> currentFuture = scheduledQueryExecutionInterval;", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbAoU", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711723540", "bodyText": "The compiler is more intelligent on private methods. Therefore, the Nullable could be removed. This even generates a compiler warning if adding NonNull.", "author": "fwolter", "createdAt": "2021-09-19T10:42:08Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryHandler.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.CHANNEL_EXECUTE;\n+import static org.openhab.binding.dbquery.internal.DBQueryBindingConstants.TRIGGER_CHANNEL_CALCULATE_PARAMETERS;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.action.DBQueryActions;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.DBQueryJSONEncoder;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.domain.QueryResultExtractor;\n+import org.openhab.binding.dbquery.internal.domain.ResultValue;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manages query thing, handling it's commands and updating it's channels\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(QueryHandler.class);\n+    // Relax nullable rules as config can be only null when not initialized\n+    private @NonNullByDefault({}) QueryConfiguration config;\n+    private @NonNullByDefault({}) QueryResultExtractor queryResultExtractor;\n+\n+    private @Nullable ScheduledFuture<?> scheduledQueryExecutionInterval;\n+    private @Nullable QueryResultChannelUpdater queryResultChannelUpdater;\n+    private Database database = Database.EMPTY;\n+    private final DBQueryJSONEncoder jsonEncoder = new DBQueryJSONEncoder();\n+\n+    private @Nullable QueryExecution currentQueryExecution;\n+    private QueryResult lastQueryResult = QueryResult.NO_RESULT;\n+\n+    public QueryHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(QueryConfiguration.class);\n+        queryResultExtractor = new QueryResultExtractor(config);\n+\n+        initQueryResultChannelUpdater();\n+        updateStateWithParentBridgeStatus();\n+    }\n+\n+    private void initQueryResultChannelUpdater() {\n+        ChannelStateUpdater channelStateUpdater = (channel, state) -> updateState(channel.getUID(), state);\n+        queryResultChannelUpdater = new QueryResultChannelUpdater(channelStateUpdater, this::getResultChannels2Update);\n+    }\n+\n+    private void scheduleQueryExecutionIntervalIfNeeded() {\n+        int interval = config.getInterval();\n+        if (interval != QueryConfiguration.NO_INTERVAL && scheduledQueryExecutionInterval == null) {\n+            logger.trace(\"Scheduling query execution every {} seconds for {}\", interval, getQueryIdentifier());\n+            scheduledQueryExecutionInterval = Executors.newSingleThreadScheduledExecutor()\n+                    .scheduleAtFixedRate(this::executeQuery, 0, interval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @NonNull\n+    private ThingUID getQueryIdentifier() {", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbAvb", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711723995", "bodyText": "This is never used and could therefore be removed.", "author": "fwolter", "createdAt": "2021-09-19T10:45:55Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/QueryResultChannelUpdater.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.error.UnnexpectedCondition;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Updates a query result to needed channels doing needed conversions\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class QueryResultChannelUpdater {\n+    private final Logger logger = LoggerFactory.getLogger(QueryResultChannelUpdater.class);", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbA8U", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711724820", "bodyText": "Logging to info should be used sparsely e.g. a newly started component or a user file that has been loaded. This could be debug or warn.", "author": "fwolter", "createdAt": "2021-09-19T10:52:35Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/dbimpl/influx2/InfluxDBClientFacadeImpl.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal.dbimpl.influx2;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.config.InfluxDB2BridgeConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.influxdb.Cancellable;\n+import com.influxdb.client.InfluxDBClient;\n+import com.influxdb.client.InfluxDBClientFactory;\n+import com.influxdb.client.InfluxDBClientOptions;\n+import com.influxdb.client.QueryApi;\n+import com.influxdb.client.domain.Ready;\n+import com.influxdb.query.FluxRecord;\n+\n+/**\n+ * Real implementation of {@link InfluxDBClientFacade}\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDBClientFacadeImpl implements InfluxDBClientFacade {\n+    private static final Logger logger = LoggerFactory.getLogger(InfluxDBClientFacadeImpl.class);\n+\n+    private final InfluxDB2BridgeConfiguration config;\n+\n+    private @Nullable InfluxDBClient client;\n+    private @Nullable QueryApi queryAPI;\n+\n+    public InfluxDBClientFacadeImpl(InfluxDB2BridgeConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public boolean connect() {\n+        var clientOptions = InfluxDBClientOptions.builder().url(config.getUrl()).org(config.getOrganization())\n+                .bucket(config.getBucket()).authenticateToken(config.getToken().toCharArray()).build();\n+\n+        final InfluxDBClient createdClient = InfluxDBClientFactory.create(clientOptions);\n+        this.client = createdClient;\n+        var currentQueryAPI = createdClient.getQueryApi();\n+        this.queryAPI = currentQueryAPI;\n+\n+        boolean connected = checkConnectionStatus();\n+        if (connected)\n+            logger.debug(\"Successfully connected to InfluxDB. Instance ready={}\", createdClient.ready());\n+        else\n+            logger.info(\"Not able to connect to InfluxDB with config {}\", config);", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbBAR", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711725073", "bodyText": "Please add braces around if and else branches. Please check all. You can use the provided code formatter to add these automatically.", "author": "fwolter", "createdAt": "2021-09-19T10:54:46Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/dbimpl/influx2/InfluxDBClientFacadeImpl.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal.dbimpl.influx2;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.config.InfluxDB2BridgeConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.influxdb.Cancellable;\n+import com.influxdb.client.InfluxDBClient;\n+import com.influxdb.client.InfluxDBClientFactory;\n+import com.influxdb.client.InfluxDBClientOptions;\n+import com.influxdb.client.QueryApi;\n+import com.influxdb.client.domain.Ready;\n+import com.influxdb.query.FluxRecord;\n+\n+/**\n+ * Real implementation of {@link InfluxDBClientFacade}\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDBClientFacadeImpl implements InfluxDBClientFacade {\n+    private static final Logger logger = LoggerFactory.getLogger(InfluxDBClientFacadeImpl.class);\n+\n+    private final InfluxDB2BridgeConfiguration config;\n+\n+    private @Nullable InfluxDBClient client;\n+    private @Nullable QueryApi queryAPI;\n+\n+    public InfluxDBClientFacadeImpl(InfluxDB2BridgeConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public boolean connect() {\n+        var clientOptions = InfluxDBClientOptions.builder().url(config.getUrl()).org(config.getOrganization())\n+                .bucket(config.getBucket()).authenticateToken(config.getToken().toCharArray()).build();\n+\n+        final InfluxDBClient createdClient = InfluxDBClientFactory.create(clientOptions);\n+        this.client = createdClient;\n+        var currentQueryAPI = createdClient.getQueryApi();\n+        this.queryAPI = currentQueryAPI;\n+\n+        boolean connected = checkConnectionStatus();\n+        if (connected)\n+            logger.debug(\"Successfully connected to InfluxDB. Instance ready={}\", createdClient.ready());\n+        else\n+            logger.info(\"Not able to connect to InfluxDB with config {}\", config);\n+\n+        return connected;\n+    }\n+\n+    private boolean checkConnectionStatus() {\n+        final InfluxDBClient currentClient = client;\n+        if (currentClient != null) {\n+            Ready ready = currentClient.ready();\n+            boolean isUp = ready != null && ready.getStatus() == Ready.StatusEnum.READY;\n+            if (isUp) {\n+                logger.debug(\"database status is OK\");\n+            } else {\n+                logger.warn(\"database not ready\");\n+            }\n+            return isUp;\n+        } else {\n+            logger.warn(\"checkConnection: database is not connected\");\n+            return false;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return checkConnectionStatus();\n+    }\n+\n+    @Override\n+    public boolean disconnect() {\n+        final InfluxDBClient currentClient = client;\n+        if (currentClient != null) {\n+            currentClient.close();\n+            client = null;\n+            queryAPI = null;\n+            logger.debug(\"Succesfully disconnected from InfluxDB\");\n+        } else {\n+            logger.debug(\"Already disconnected\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void query(String query, BiConsumer<Cancellable, FluxRecord> onNext, Consumer<? super Throwable> onError,\n+            Runnable onComplete) {\n+        var currentQueryAPI = queryAPI;\n+        if (currentQueryAPI != null)\n+            currentQueryAPI.query(query, onNext, onError, onComplete);\n+        else\n+            logger.warn(\"Query ignored as current queryAPI is null\");", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684qbTzy", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711802098", "bodyText": "Added, but it seems that the formatter doesn't do that.\nIs not the provided and enforced formatter the one that is invoked by spotless apply ?", "author": "lujop", "createdAt": "2021-09-19T20:58:55Z", "replyToReviewId": "PRRC_kwDOAS1o684qbBAR"}, {"id": "PRRC_kwDOAS1o684qb_f2", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711981046", "bodyText": "Spotless doesn't add these braces, but the eclipse formatter do.", "author": "fwolter", "createdAt": "2021-09-20T08:49:19Z", "replyToReviewId": "PRRC_kwDOAS1o684qbBAR"}], "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbBEA", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711725312", "bodyText": "Where are these classes used?", "author": "fwolter", "createdAt": "2021-09-19T10:56:42Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/dbimpl/mock/MockDatabase.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal.dbimpl.mock;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.dbquery.internal.config.QueryConfiguration;\n+import org.openhab.binding.dbquery.internal.domain.Database;\n+import org.openhab.binding.dbquery.internal.domain.Query;\n+import org.openhab.binding.dbquery.internal.domain.QueryFactory;\n+import org.openhab.binding.dbquery.internal.domain.QueryParameters;\n+import org.openhab.binding.dbquery.internal.domain.QueryResult;\n+import org.openhab.binding.dbquery.internal.error.DatabaseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Mock implementation of {@link Database}\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MockDatabase implements Database {", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684qbT5e", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711802462", "bodyText": "It was used by me as a neutral implementation.\nI will check moving to test and implement a little test if I've time", "author": "lujop", "createdAt": "2021-09-19T21:01:44Z", "replyToReviewId": "PRRC_kwDOAS1o684qbBEA"}, {"id": "PRRC_kwDOAS1o684qb_qW", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711981718", "bodyText": "Dead code shouldn't be part of the binding. You could use git stash to save it for future use.", "author": "fwolter", "createdAt": "2021-09-20T08:50:18Z", "replyToReviewId": "PRRC_kwDOAS1o684qbBEA"}], "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbBJC", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711725634", "bodyText": "This annotation doesn't seem to have any effect and can therefore be removed. Same for below.", "author": "fwolter", "createdAt": "2021-09-19T10:59:06Z", "path": "bundles/org.openhab.binding.dbquery/src/main/java/org/openhab/binding/dbquery/internal/domain/DBQueryJSONEncoder.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.dbquery.internal.domain;\n+\n+import java.lang.reflect.Type;\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+/**\n+ * Encodes domain objects to JSON\n+ *\n+ * @author Joan Pujol - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DBQueryJSONEncoder {\n+    private final Gson gson;\n+\n+    public DBQueryJSONEncoder() {\n+        gson = new GsonBuilder().registerTypeAdapter(QueryResult.class, new QueryResultGSONSerializer())\n+                .registerTypeAdapter(ResultRow.class, new ResultRowGSONSerializer())\n+                .registerTypeAdapter(QueryParameters.class, new QueryParametersGSONSerializer()).create();\n+    }\n+\n+    public String encode(QueryResult queryResult) {\n+        return gson.toJson(queryResult);\n+    }\n+\n+    public String encode(QueryParameters parameters) {\n+        return gson.toJson(parameters);\n+    }\n+\n+    @NonNullByDefault({})\n+    private static class QueryResultGSONSerializer implements JsonSerializer<QueryResult> {\n+        @Override\n+        public JsonElement serialize(QueryResult src, Type typeOfSrc, JsonSerializationContext context) {\n+            JsonObject jsonObject = new JsonObject();\n+            jsonObject.addProperty(\"correct\", src.isCorrect());\n+            if (src.getErrorMessage() != null)\n+                jsonObject.addProperty(\"errorMessage\", src.getErrorMessage());\n+            jsonObject.add(\"data\", context.serialize(src.getData()));\n+            return jsonObject;\n+        }\n+    }\n+\n+    @NonNullByDefault({})", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbBPb", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711726043", "bodyText": "Could you be a bit more verbose, so that somebody who hasn't heard about it gets a clue what this is about?", "author": "fwolter", "createdAt": "2021-09-19T11:02:02Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"dbquery\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>DBQuery Binding</name>\n+\t<description>This is the binding for DBQuery.</description>", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbBPp", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711726057", "bodyText": "The author tag is deprecated and should therefore be removed. See openhab/openhab-core#1844.", "author": "fwolter", "createdAt": "2021-09-19T11:02:07Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"dbquery\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>DBQuery Binding</name>\n+\t<description>This is the binding for DBQuery.</description>\n+\t<author>Joan Pujol Espinar</author>", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbBRo", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711726184", "bodyText": "If JDBC is not implemented, yet, this file should be removed. You can use git stash to save it for further versions.", "author": "fwolter", "createdAt": "2021-09-19T11:03:31Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/jdbc-bridge.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<bridge-type id=\"jdbc\">", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "PRRC_kwDOAS1o684qbBUO", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711726350", "bodyText": "Are you sure this context exists? It is not documented. See https://www.openhab.org/docs/developer/bindings/config-xml.html#xml-structure-for-configuration-descriptions", "author": "fwolter", "createdAt": "2021-09-19T11:05:23Z", "path": "bundles/org.openhab.binding.dbquery/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,126 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"dbquery\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"query\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"influxdb2\"/>\n+\t\t\t<bridge-type-ref id=\"jdbc\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Query Thing</label>\n+\t\t<description>Thing that represents a native query</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"execute\" typeId=\"execute-channel\"/>\n+\t\t\t<channel id=\"resultString\" typeId=\"result-channel-string\"/>\n+\t\t\t<channel id=\"resultNumber\" typeId=\"result-channel-number\"/>\n+\t\t\t<channel id=\"resultDateTime\" typeId=\"result-channel-datetime\"/>\n+\t\t\t<channel id=\"resultContact\" typeId=\"result-channel-contact\"/>\n+\t\t\t<channel id=\"resultSwitch\" typeId=\"result-channel-switch\"/>\n+\n+\t\t\t<channel id=\"parameters\" typeId=\"parameters-channel\"/>\n+\t\t\t<channel id=\"correct\" typeId=\"correct-channel\"/>\n+\t\t\t<channel id=\"calculateParameters\" typeId=\"calculate-parameters-channel\"/>\n+\t\t</channels>\n+\n+\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"query\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Query Definition</label>\n+\t\t\t\t<description>Query definition using native query language</description>\n+\t\t\t\t<context>script</context>", "originalCommit": "e1453e0d53a68b3a932d091a7920311456c9647e", "replyToReviewId": null, "replies": [{"id": "PRRC_kwDOAS1o684qbSlM", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711797068", "bodyText": "Yes and it works:\nhttps://community.openhab.org/t/is-it-possible-to-define-a-thing-parameter-to-be-multiline/102832/2", "author": "lujop", "createdAt": "2021-09-19T20:15:28Z", "replyToReviewId": "PRRC_kwDOAS1o684qbBUO"}, {"id": "PRRC_kwDOAS1o684qb9fj", "url": "https://github.com/openhab/openhab-addons/pull/8780#discussion_r711972835", "bodyText": "Cool, would be awesome if you could file a PR extending the documentation!", "author": "fwolter", "createdAt": "2021-09-20T08:37:08Z", "replyToReviewId": "PRRC_kwDOAS1o684qbBUO"}], "type": "inlineReview"}, {"oid": "b175337cf840ec69fb2d7df99262efe43782d036", "url": "https://github.com/openhab/openhab-addons/commit/b175337cf840ec69fb2d7df99262efe43782d036", "message": "Changes asked in PR review\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>", "committedDate": "2021-09-24T19:57:28Z", "type": "commit"}]}