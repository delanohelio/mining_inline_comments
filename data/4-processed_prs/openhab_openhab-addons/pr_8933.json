{"pr_number": 8933, "pr_title": "[touchwand]- Added support for AlarmSensor and WallController", "pr_createdAt": "2020-11-01T18:49:29Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8933", "timeline": [{"oid": "129d4b0247331237e73023e019a86acc62cdfb83", "url": "https://github.com/openhab/openhab-addons/commit/129d4b0247331237e73023e019a86acc62cdfb83", "message": "catch exceptions more corner scenarios handling\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-01T14:30:04Z", "type": "forcePushed"}, {"oid": "fd179ba36b531e5577f8a19229c0ceeb2fbe5357", "url": "https://github.com/openhab/openhab-addons/commit/fd179ba36b531e5577f8a19229c0ceeb2fbe5357", "message": "trying to rebase properly to main\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-04T11:24:24Z", "type": "forcePushed"}, {"oid": "32521023038138cdf15dcb6ba128932d39b1f305", "url": "https://github.com/openhab/openhab-addons/commit/32521023038138cdf15dcb6ba128932d39b1f305", "message": "yet another try to merge\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-04T11:33:29Z", "type": "forcePushed"}, {"oid": "878464c760f84ca60089d746f2d44f11502d4456", "url": "https://github.com/openhab/openhab-addons/commit/878464c760f84ca60089d746f2d44f11502d4456", "message": "Add AlarmSensor and WallController support - clean commit\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-04T13:33:56Z", "type": "forcePushed"}, {"oid": "05110dda7788af8c4a8979ec44e76872457d485a", "url": "https://github.com/openhab/openhab-addons/commit/05110dda7788af8c4a8979ec44e76872457d485a", "message": "Added AlarmSensor and Wallcontroller , clean merge\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-04T13:58:06Z", "type": "forcePushed"}, {"oid": "e238c3d83a8611fa85502548b0032f18fa8356b9", "url": "https://github.com/openhab/openhab-addons/commit/e238c3d83a8611fa85502548b0032f18fa8356b9", "message": "Added support for AlarmSensor and WallController\n\nClean merge\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-04T14:13:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5Nzc4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517597784", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateBatteryLevel((TouchWandUnitDataAlarmSensor) unitData);\n          \n          \n            \n                        updateIllumination((TouchWandUnitDataAlarmSensor) unitData);\n          \n          \n            \n                        updateChannelLeak((TouchWandUnitDataAlarmSensor) unitData);\n          \n          \n            \n                        updateChannelDoorWindow((TouchWandUnitDataAlarmSensor) unitData);\n          \n          \n            \n                        updateChannelMotion((TouchWandUnitDataAlarmSensor) unitData);\n          \n          \n            \n                        updateChannelTemprature((TouchWandUnitDataAlarmSensor) unitData);\n          \n          \n            \n                        TouchWandUnitDataAlarmSensor sensor = (TouchWandUnitDataAlarmSensor) unitData;\n          \n          \n            \n                        updateBatteryLevel(sensor);\n          \n          \n            \n                        updateIllumination(sensor);\n          \n          \n            \n                        updateChannelLeak(sensor);\n          \n          \n            \n                        updateChannelDoorWindow(sensor);\n          \n          \n            \n                        updateChannelMotion(sensor);\n          \n          \n            \n                        updateChannelTemprature(sensor);", "author": "cpmeister", "createdAt": "2020-11-04T20:00:41Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandAlarmSensorHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.Iterator;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Sensor;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.bSensorEvent;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitDataAlarmSensor;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorHandler} is responsible for handling command for Alarm Sensor unit\n+ *\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class TouchWandAlarmSensorHandler extends TouchWandBaseUnitHandler {\n+\n+    private static final int BATT_LEVEL_LOW = 20;\n+    private static final int BATT_LEVEL_LOW_HYS = 5;\n+\n+    private boolean isBatteryLow = false;\n+\n+    public TouchWandAlarmSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    void updateTouchWandUnitState(TouchWandUnitData unitData) {\n+        if (unitData instanceof TouchWandUnitDataAlarmSensor) {\n+            updateBatteryLevel((TouchWandUnitDataAlarmSensor) unitData);\n+            updateIllumination((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelLeak((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelDoorWindow((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelMotion((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelTemprature((TouchWandUnitDataAlarmSensor) unitData);", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NzkzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517597938", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void updateChannelTemprature(TouchWandUnitDataAlarmSensor unitData) {\n          \n          \n            \n                void updateChannelTemperature(TouchWandUnitDataAlarmSensor unitData) {", "author": "cpmeister", "createdAt": "2020-11-04T20:00:57Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandAlarmSensorHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.Iterator;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Sensor;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.bSensorEvent;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitDataAlarmSensor;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorHandler} is responsible for handling command for Alarm Sensor unit\n+ *\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class TouchWandAlarmSensorHandler extends TouchWandBaseUnitHandler {\n+\n+    private static final int BATT_LEVEL_LOW = 20;\n+    private static final int BATT_LEVEL_LOW_HYS = 5;\n+\n+    private boolean isBatteryLow = false;\n+\n+    public TouchWandAlarmSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    void updateTouchWandUnitState(TouchWandUnitData unitData) {\n+        if (unitData instanceof TouchWandUnitDataAlarmSensor) {\n+            updateBatteryLevel((TouchWandUnitDataAlarmSensor) unitData);\n+            updateIllumination((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelLeak((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelDoorWindow((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelMotion((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelTemprature((TouchWandUnitDataAlarmSensor) unitData);\n+        } else {\n+            logger.warn(\"updateTouchWandUnitState incompatible TouchWandUnitData instance\");\n+        }\n+    }\n+\n+    @Override\n+    void touchWandUnitHandleCommand(Command command) {\n+    }\n+\n+    void updateBatteryLevel(TouchWandUnitDataAlarmSensor unitData) {\n+        Integer battLevel = unitData.getCurrStatus().getBatt();\n+        updateState(CHANNEL_BATTERY_LEVEL, new DecimalType(battLevel));\n+        int lowThreshold = isBatteryLow ? BATT_LEVEL_LOW + BATT_LEVEL_LOW_HYS : BATT_LEVEL_LOW;\n+        boolean lowBattery = (battLevel <= lowThreshold);\n+        updateState(CHANNEL_BATTERY_LOW, OnOffType.from(lowBattery));\n+        isBatteryLow = (battLevel <= lowThreshold);\n+    }\n+\n+    void updateIllumination(TouchWandUnitDataAlarmSensor unitData) {\n+        Iterator<Sensor> iter = unitData.getCurrStatus().getSensorsStatus().iterator();\n+        while (iter.hasNext()) {\n+            Sensor mySensor = iter.next();\n+            if (mySensor.type == SENSOR_TYPE_LUMINANCE) {\n+                updateState(CHANNEL_ILLUMINATION, new DecimalType(mySensor.value));\n+            }\n+        }\n+    }\n+\n+    void updateChannelLeak(TouchWandUnitDataAlarmSensor unitData) {\n+        Iterator<bSensorEvent> iter = unitData.getCurrStatus().getbSensorsStatus().iterator();\n+        while (iter.hasNext()) {\n+            bSensorEvent mySensor = iter.next();\n+            if (mySensor.sensorType == SENSOR_TYPE_LEAK) {\n+                boolean isLeak = mySensor.sensor.state;\n+                updateState(CHANNEL_LEAK, OnOffType.from(isLeak));\n+            }\n+        }\n+    }\n+\n+    void updateChannelDoorWindow(TouchWandUnitDataAlarmSensor unitData) {\n+        Iterator<bSensorEvent> iter = unitData.getCurrStatus().getbSensorsStatus().iterator();\n+        while (iter.hasNext()) {\n+            bSensorEvent mySensor = iter.next();\n+            if (mySensor.sensorType == SENSOR_TYPE_DOOR_WINDOW) {\n+                boolean isOpen = mySensor.sensor.state;\n+                OpenClosedType myOpenClose;\n+                myOpenClose = isOpen ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+                updateState(CHANNEL_DOORWINDOW, myOpenClose);\n+            }\n+        }\n+    }\n+\n+    void updateChannelMotion(TouchWandUnitDataAlarmSensor unitData) {\n+        Iterator<bSensorEvent> iter = unitData.getCurrStatus().getbSensorsStatus().iterator();\n+        while (iter.hasNext()) {\n+            bSensorEvent mySensor = iter.next();\n+            if (mySensor.sensorType == SENSOR_TYPE_MOTION) {\n+                boolean hasMotion = mySensor.sensor.state;\n+                updateState(CHANNEL_MOTION, OnOffType.from(hasMotion));\n+            }\n+        }\n+    }\n+\n+    void updateChannelTemprature(TouchWandUnitDataAlarmSensor unitData) {", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5ODgzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517598831", "bodyText": "All class names should start with a capital letter.", "author": "cpmeister", "createdAt": "2020-11-04T20:02:34Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/dto/TouchWandAlarmSensorCurrentStatus.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.dto;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorCurrentStatus} implements Alarm Sensor unit\n+ * CurrentStatus data property.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class TouchWandAlarmSensorCurrentStatus {\n+\n+    private int batt;\n+    private List<Sensor> sensorsStatus = new ArrayList<Sensor>();\n+    private List<AlarmEvent> alarmsStatus = new ArrayList<AlarmEvent>();\n+    private List<bSensorEvent> bSensorsStatus = new ArrayList<bSensorEvent>();\n+\n+    public void setBatt(Integer batt) {\n+        this.batt = batt;\n+    }\n+\n+    public int getBatt() {\n+        return batt;\n+    }\n+\n+    public void setSensorsStatus(List<Sensor> sensorsStatus) {\n+        this.sensorsStatus = sensorsStatus;\n+    }\n+\n+    public List<Sensor> getSensorsStatus() {\n+        return sensorsStatus;\n+    }\n+\n+    public List<bSensorEvent> getbSensorsStatus() {\n+        return bSensorsStatus;\n+    }\n+\n+    public void setbSensorsStatus(List<bSensorEvent> bSensorsStatus) {\n+        this.bSensorsStatus = bSensorsStatus;\n+    }\n+\n+    public List<AlarmEvent> getAlarmsStatus() {\n+        return alarmsStatus;\n+    }\n+\n+    public void setAlarmsStatus(List<AlarmEvent> alarmsStatus) {\n+        this.alarmsStatus = alarmsStatus;\n+    }\n+\n+    public class Alarm {\n+        public int event;\n+        public long ts;\n+    }\n+\n+    public class AlarmEvent {\n+        int alarmType;\n+        Alarm alarm = new Alarm();\n+    }\n+\n+    public class Sensor {\n+        public int type;\n+        public float value;\n+    }\n+\n+    public class bSensor {\n+        public long ts;\n+        public boolean state;\n+    }\n+\n+    public class bSensorEvent {", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5OTU1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517599551", "bodyText": "Your class is already annotated with @NonNullByDefault so this change shouldn't be necessary.", "author": "cpmeister", "createdAt": "2020-11-04T20:04:01Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java", "diffHunk": "@@ -70,7 +71,7 @@ protected void stopScan() {\n     }\n \n     @Override\n-    public void activate(@Nullable Map<String, Object> configProperties) {\n+    public void activate(@Nullable Map<@NonNull String, @NonNull Object> configProperties) {", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwMTk5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517601995", "bodyText": "Please don't use Iterator unless you are going to take advantage of remove().\nI suggest using either for-each or streaming here instead.\nFor-each:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator<Sensor> iter = unitData.getCurrStatus().getSensorsStatus().iterator();\n          \n          \n            \n                    while (iter.hasNext()) {\n          \n          \n            \n                        Sensor mySensor = iter.next();\n          \n          \n            \n                        if (mySensor.type == SENSOR_TYPE_LUMINANCE) {\n          \n          \n            \n                            updateState(CHANNEL_ILLUMINATION, new DecimalType(mySensor.value));\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    for(Sensor sensor : unitData.getCurrStatus().getSensorsStatus()){\n          \n          \n            \n                        if (sensor.type == SENSOR_TYPE_LUMINANCE) {\n          \n          \n            \n                            updateState(CHANNEL_ILLUMINATION, new DecimalType(sensor.value));\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nStreaming:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator<Sensor> iter = unitData.getCurrStatus().getSensorsStatus().iterator();\n          \n          \n            \n                    while (iter.hasNext()) {\n          \n          \n            \n                        Sensor mySensor = iter.next();\n          \n          \n            \n                        if (mySensor.type == SENSOR_TYPE_LUMINANCE) {\n          \n          \n            \n                            updateState(CHANNEL_ILLUMINATION, new DecimalType(mySensor.value));\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    unitData.getCurrStatus().getSensorsStatus().stream()\n          \n          \n            \n                        .filter(sensor -> sensor.type == SENSOR_TYPE_LUMINANCE)\n          \n          \n            \n                        .forEach(sensor -> updateState(CHANNEL_ILLUMINATION, new DecimalType(sensor.value)));\n          \n      \n    \n    \n  \n\nPlease update the other methods as well.", "author": "cpmeister", "createdAt": "2020-11-04T20:08:47Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandAlarmSensorHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.Iterator;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Sensor;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.bSensorEvent;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitDataAlarmSensor;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorHandler} is responsible for handling command for Alarm Sensor unit\n+ *\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class TouchWandAlarmSensorHandler extends TouchWandBaseUnitHandler {\n+\n+    private static final int BATT_LEVEL_LOW = 20;\n+    private static final int BATT_LEVEL_LOW_HYS = 5;\n+\n+    private boolean isBatteryLow = false;\n+\n+    public TouchWandAlarmSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    void updateTouchWandUnitState(TouchWandUnitData unitData) {\n+        if (unitData instanceof TouchWandUnitDataAlarmSensor) {\n+            updateBatteryLevel((TouchWandUnitDataAlarmSensor) unitData);\n+            updateIllumination((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelLeak((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelDoorWindow((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelMotion((TouchWandUnitDataAlarmSensor) unitData);\n+            updateChannelTemprature((TouchWandUnitDataAlarmSensor) unitData);\n+        } else {\n+            logger.warn(\"updateTouchWandUnitState incompatible TouchWandUnitData instance\");\n+        }\n+    }\n+\n+    @Override\n+    void touchWandUnitHandleCommand(Command command) {\n+    }\n+\n+    void updateBatteryLevel(TouchWandUnitDataAlarmSensor unitData) {\n+        Integer battLevel = unitData.getCurrStatus().getBatt();\n+        updateState(CHANNEL_BATTERY_LEVEL, new DecimalType(battLevel));\n+        int lowThreshold = isBatteryLow ? BATT_LEVEL_LOW + BATT_LEVEL_LOW_HYS : BATT_LEVEL_LOW;\n+        boolean lowBattery = (battLevel <= lowThreshold);\n+        updateState(CHANNEL_BATTERY_LOW, OnOffType.from(lowBattery));\n+        isBatteryLow = (battLevel <= lowThreshold);\n+    }\n+\n+    void updateIllumination(TouchWandUnitDataAlarmSensor unitData) {\n+        Iterator<Sensor> iter = unitData.getCurrStatus().getSensorsStatus().iterator();\n+        while (iter.hasNext()) {\n+            Sensor mySensor = iter.next();\n+            if (mySensor.type == SENSOR_TYPE_LUMINANCE) {\n+                updateState(CHANNEL_ILLUMINATION, new DecimalType(mySensor.value));\n+            }\n+        }", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwNTU1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517605552", "bodyText": "Openhab supports lux units.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<channel-type id=\"illumination\">\n          \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t<channel-type id=\"illumination\">\n          \n          \n            \n            \t\t<item-type>Number:Illuminance</item-type>\n          \n      \n    \n    \n  \n\nplease adjust the state pattern as well.", "author": "cpmeister", "createdAt": "2020-11-04T20:15:30Z", "path": "bundles/org.openhab.binding.touchwand/src/main/resources/OH-INF/thing/alarmsensor.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"touchwand\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"alarmsensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\"></bridge-type-ref>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>TouchWand Alarm Sensor Unit</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"battery_level\" typeId=\"system.battery-level\"/>\n+\t\t\t<channel id=\"battery_low\" typeId=\"system.low-battery\"/>\n+\t\t\t<channel id=\"leak\" typeId=\"leak\"></channel>\n+\t\t\t<channel id=\"motion\" typeId=\"motion\"/>\n+\t\t\t<channel id=\"illumination\" typeId=\"illumination\"/>\n+\t\t\t<channel id=\"isOpen\" typeId=\"isOpen\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</thing-type>\n+\t<channel-type id=\"leak\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Leak Detected</label>\n+\t\t<state readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"illumination\">\n+\t\t<item-type>Number</item-type>", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwNjYyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517606625", "bodyText": "Why are you creating a new Gson instance each time? Please create your Gson instance statically and make it a static final field.", "author": "cpmeister", "createdAt": "2020-11-04T20:17:36Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/dto/AlarmSensorUnitDataDeserializer.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Alarm;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.bSensor;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link AlarmSensorUnitDataDeserializer} implements AlarmSensorUnitData unit\n+ * Json De-serializer.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AlarmSensorUnitDataDeserializer implements JsonDeserializer<TouchWandUnitDataAlarmSensor> {\n+\n+    @Override\n+    public TouchWandUnitDataAlarmSensor deserialize(@Nullable JsonElement json, @Nullable Type typeOfT,\n+            @Nullable JsonDeserializationContext context) throws JsonParseException {\n+\n+        TouchWandUnitDataAlarmSensor touchWandUnitDataAlarmSensor = new TouchWandUnitDataAlarmSensor();\n+\n+        JsonElement myJson = json;\n+        if (myJson != null) {\n+            JsonObject jsonObject = myJson.getAsJsonObject();\n+            touchWandUnitDataAlarmSensor.setId(jsonObject.get(\"id\").getAsInt());\n+            touchWandUnitDataAlarmSensor.setName(jsonObject.get(\"name\").getAsString());\n+            touchWandUnitDataAlarmSensor.setConnectivity(jsonObject.get(\"connectivity\").getAsString());\n+            touchWandUnitDataAlarmSensor.setType(jsonObject.get(\"type\").getAsString());\n+            touchWandUnitDataAlarmSensor.setHasBattery(jsonObject.get(\"hasBattery\").getAsBoolean());\n+            JsonElement powerMeterElement = jsonObject.get(\"hasPowerMeter\");\n+            if (!powerMeterElement.isJsonNull()) {\n+                touchWandUnitDataAlarmSensor.setHasPowerMeter(powerMeterElement.getAsBoolean());\n+            } else {\n+                touchWandUnitDataAlarmSensor.setHasPowerMeter(false);\n+            }\n+\n+            if (!jsonObject.get(\"status\").isJsonNull()) { // Sometimes status in null\n+                touchWandUnitDataAlarmSensor.setStatus(jsonObject.get(\"status\").getAsString());\n+            }\n+\n+            GsonBuilder builder = new GsonBuilder();\n+            JsonObject currentStatusObj = builder.create().fromJson(jsonObject.get(\"currStatus\").getAsJsonObject(),\n+                    JsonObject.class);\n+\n+            TouchWandAlarmSensorCurrentStatus touchWandUnitDataAlarmSensorCurrentStatus = touchWandUnitDataAlarmSensor\n+                    .getCurrStatus();\n+\n+            for (Entry<String, JsonElement> entry : currentStatusObj.entrySet()) {\n+                String key = entry.getKey();\n+                String splits[] = key.split(\"_\"); // the key is xxxx_n where xxx is sensor type and n is\n+                String keyName = splits[0];\n+                int index = 0;\n+\n+                if (splits.length > 1 && !splits[1].isEmpty()) {\n+                    try {\n+                        index = Integer.parseInt(splits[1]);\n+                    } catch (final NumberFormatException e) {\n+                        index = 0;\n+                    }\n+                }\n+\n+                final Gson gson = new Gson();", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwNzM5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517607391", "bodyText": "This should use the shared Gson instance instead.", "author": "cpmeister", "createdAt": "2020-11-04T20:19:15Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/dto/AlarmSensorUnitDataDeserializer.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Alarm;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.bSensor;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link AlarmSensorUnitDataDeserializer} implements AlarmSensorUnitData unit\n+ * Json De-serializer.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AlarmSensorUnitDataDeserializer implements JsonDeserializer<TouchWandUnitDataAlarmSensor> {\n+\n+    @Override\n+    public TouchWandUnitDataAlarmSensor deserialize(@Nullable JsonElement json, @Nullable Type typeOfT,\n+            @Nullable JsonDeserializationContext context) throws JsonParseException {\n+\n+        TouchWandUnitDataAlarmSensor touchWandUnitDataAlarmSensor = new TouchWandUnitDataAlarmSensor();\n+\n+        JsonElement myJson = json;\n+        if (myJson != null) {\n+            JsonObject jsonObject = myJson.getAsJsonObject();\n+            touchWandUnitDataAlarmSensor.setId(jsonObject.get(\"id\").getAsInt());\n+            touchWandUnitDataAlarmSensor.setName(jsonObject.get(\"name\").getAsString());\n+            touchWandUnitDataAlarmSensor.setConnectivity(jsonObject.get(\"connectivity\").getAsString());\n+            touchWandUnitDataAlarmSensor.setType(jsonObject.get(\"type\").getAsString());\n+            touchWandUnitDataAlarmSensor.setHasBattery(jsonObject.get(\"hasBattery\").getAsBoolean());\n+            JsonElement powerMeterElement = jsonObject.get(\"hasPowerMeter\");\n+            if (!powerMeterElement.isJsonNull()) {\n+                touchWandUnitDataAlarmSensor.setHasPowerMeter(powerMeterElement.getAsBoolean());\n+            } else {\n+                touchWandUnitDataAlarmSensor.setHasPowerMeter(false);\n+            }\n+\n+            if (!jsonObject.get(\"status\").isJsonNull()) { // Sometimes status in null\n+                touchWandUnitDataAlarmSensor.setStatus(jsonObject.get(\"status\").getAsString());\n+            }\n+\n+            GsonBuilder builder = new GsonBuilder();\n+            JsonObject currentStatusObj = builder.create().fromJson(jsonObject.get(\"currStatus\").getAsJsonObject(),", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTI2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517609261", "bodyText": "Why are you creating a timestamp instance just to get back the time you put into it?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Timestamp timestamp = new Timestamp(System.currentTimeMillis()); // need unique id\n          \n          \n            \n                            String controllerIdStr = String.format(\"{\\\"contId\\\": \\\"openhab%d\\\"}\", timestamp.getTime());\n          \n          \n            \n                            long timestamp = System.currentTimeMillis(); // need unique id\n          \n          \n            \n                            String controllerIdStr = String.format(\"{\\\"contId\\\": \\\"openhab%d\\\"}\", timestamp);", "author": "cpmeister", "createdAt": "2020-11-04T20:22:56Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java", "diffHunk": "@@ -136,7 +138,9 @@ public void onClose(int statusCode, String reason) {\n         public void onConnect(Session session) {\n             logger.debug(\"TouchWandWebSockets connected to {}\", session.getRemoteAddress().toString());\n             try {\n-                session.getRemote().sendString(\"{\\\"myopenhab\\\": \\\"myopenhab\\\"}\");\n+                Timestamp timestamp = new Timestamp(System.currentTimeMillis()); // need unique id\n+                String controllerIdStr = String.format(\"{\\\"contId\\\": \\\"openhab%d\\\"}\", timestamp.getTime());", "originalCommit": "e238c3d83a8611fa85502548b0032f18fa8356b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NTgyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517665828", "bodyText": "This channel type is already defined above", "author": "cpmeister", "createdAt": "2020-11-04T22:22:21Z", "path": "bundles/org.openhab.binding.touchwand/src/main/resources/OH-INF/thing/alarmsensor.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"touchwand\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"alarmsensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\"></bridge-type-ref>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>TouchWand Alarm Sensor Unit</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"battery_level\" typeId=\"system.battery-level\"/>\n+\t\t\t<channel id=\"battery_low\" typeId=\"system.low-battery\"/>\n+\t\t\t<channel id=\"leak\" typeId=\"leak\"></channel>\n+\t\t\t<channel id=\"motion\" typeId=\"motion\"/>\n+\t\t\t<channel id=\"illumination\" typeId=\"illumination\"/>\n+\t\t\t<channel id=\"isOpen\" typeId=\"isOpen\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</thing-type>\n+\t<channel-type id=\"leak\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Leak Detected</label>\n+\t\t<state readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"illumination\">\n+\t\t<item-type>Number:Illuminance</item-type>\n+\t\t<label>Illumination</label>\n+\t\t<description>\n+\t\t\tThis channel shows the brightness of the environment of the device in Lux.\n+\t\t</description>\n+\t\t<state readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"isOpen\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Open Status</label>\n+\t\t<category>Contact</category>\n+\t\t<state readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"motion\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Motion Status</label>\n+\t\t<category>Motion</category>\n+\t\t<state readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\">\n+\t\t</state>\n+\t</channel-type>", "originalCommit": "ba5c54d2dfda06b89d6c0d11a6ed0e45ba9712b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NjU2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517666565", "bodyText": "Since you defined this channel as Number:Illuminance you should be using QuantityType<Illuminance> here instead of DecimalType.", "author": "cpmeister", "createdAt": "2020-11-04T22:24:07Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandAlarmSensorHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.BinarySensorEvent;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Sensor;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitDataAlarmSensor;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorHandler} is responsible for handling command for Alarm Sensor unit\n+ *\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class TouchWandAlarmSensorHandler extends TouchWandBaseUnitHandler {\n+\n+    private static final int BATT_LEVEL_LOW = 20;\n+    private static final int BATT_LEVEL_LOW_HYS = 5;\n+\n+    private boolean isBatteryLow = false;\n+\n+    public TouchWandAlarmSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    void updateTouchWandUnitState(TouchWandUnitData unitData) {\n+        if (unitData instanceof TouchWandUnitDataAlarmSensor) {\n+            TouchWandUnitDataAlarmSensor sensor = (TouchWandUnitDataAlarmSensor) unitData;\n+            updateBatteryLevel(sensor);\n+            updateIllumination(sensor);\n+            updateChannelLeak(sensor);\n+            updateChannelDoorWindow(sensor);\n+            updateChannelMotion(sensor);\n+            updateChannelTemperature(sensor);\n+        } else {\n+            logger.warn(\"updateTouchWandUnitState incompatible TouchWandUnitData instance\");\n+        }\n+    }\n+\n+    @Override\n+    void touchWandUnitHandleCommand(Command command) {\n+    }\n+\n+    void updateBatteryLevel(TouchWandUnitDataAlarmSensor unitData) {\n+        Integer battLevel = unitData.getCurrStatus().getBatt();\n+        updateState(CHANNEL_BATTERY_LEVEL, new DecimalType(battLevel));\n+        int lowThreshold = isBatteryLow ? BATT_LEVEL_LOW + BATT_LEVEL_LOW_HYS : BATT_LEVEL_LOW;\n+        boolean lowBattery = (battLevel <= lowThreshold);\n+        updateState(CHANNEL_BATTERY_LOW, OnOffType.from(lowBattery));\n+        isBatteryLow = (battLevel <= lowThreshold);\n+    }\n+\n+    void updateIllumination(TouchWandUnitDataAlarmSensor unitData) {\n+        for (Sensor sensor : unitData.getCurrStatus().getSensorsStatus()) {\n+            if (sensor.type == SENSOR_TYPE_LUMINANCE) {\n+                updateState(CHANNEL_ILLUMINATION, new DecimalType(sensor.value));", "originalCommit": "ba5c54d2dfda06b89d6c0d11a6ed0e45ba9712b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Njg1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517666852", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    isBatteryLow = (battLevel <= lowThreshold);\n          \n          \n            \n                    isBatteryLow = lowBattery;", "author": "cpmeister", "createdAt": "2020-11-04T22:24:44Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandAlarmSensorHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.BinarySensorEvent;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Sensor;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitDataAlarmSensor;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorHandler} is responsible for handling command for Alarm Sensor unit\n+ *\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class TouchWandAlarmSensorHandler extends TouchWandBaseUnitHandler {\n+\n+    private static final int BATT_LEVEL_LOW = 20;\n+    private static final int BATT_LEVEL_LOW_HYS = 5;\n+\n+    private boolean isBatteryLow = false;\n+\n+    public TouchWandAlarmSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    void updateTouchWandUnitState(TouchWandUnitData unitData) {\n+        if (unitData instanceof TouchWandUnitDataAlarmSensor) {\n+            TouchWandUnitDataAlarmSensor sensor = (TouchWandUnitDataAlarmSensor) unitData;\n+            updateBatteryLevel(sensor);\n+            updateIllumination(sensor);\n+            updateChannelLeak(sensor);\n+            updateChannelDoorWindow(sensor);\n+            updateChannelMotion(sensor);\n+            updateChannelTemperature(sensor);\n+        } else {\n+            logger.warn(\"updateTouchWandUnitState incompatible TouchWandUnitData instance\");\n+        }\n+    }\n+\n+    @Override\n+    void touchWandUnitHandleCommand(Command command) {\n+    }\n+\n+    void updateBatteryLevel(TouchWandUnitDataAlarmSensor unitData) {\n+        Integer battLevel = unitData.getCurrStatus().getBatt();\n+        updateState(CHANNEL_BATTERY_LEVEL, new DecimalType(battLevel));\n+        int lowThreshold = isBatteryLow ? BATT_LEVEL_LOW + BATT_LEVEL_LOW_HYS : BATT_LEVEL_LOW;\n+        boolean lowBattery = (battLevel <= lowThreshold);\n+        updateState(CHANNEL_BATTERY_LOW, OnOffType.from(lowBattery));\n+        isBatteryLow = (battLevel <= lowThreshold);", "originalCommit": "ba5c54d2dfda06b89d6c0d11a6ed0e45ba9712b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NzQ5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517667490", "bodyText": "Please use QuantityType<Temperature> here.", "author": "cpmeister", "createdAt": "2020-11-04T22:26:16Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandAlarmSensorHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.BinarySensorEvent;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Sensor;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitDataAlarmSensor;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorHandler} is responsible for handling command for Alarm Sensor unit\n+ *\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class TouchWandAlarmSensorHandler extends TouchWandBaseUnitHandler {\n+\n+    private static final int BATT_LEVEL_LOW = 20;\n+    private static final int BATT_LEVEL_LOW_HYS = 5;\n+\n+    private boolean isBatteryLow = false;\n+\n+    public TouchWandAlarmSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    void updateTouchWandUnitState(TouchWandUnitData unitData) {\n+        if (unitData instanceof TouchWandUnitDataAlarmSensor) {\n+            TouchWandUnitDataAlarmSensor sensor = (TouchWandUnitDataAlarmSensor) unitData;\n+            updateBatteryLevel(sensor);\n+            updateIllumination(sensor);\n+            updateChannelLeak(sensor);\n+            updateChannelDoorWindow(sensor);\n+            updateChannelMotion(sensor);\n+            updateChannelTemperature(sensor);\n+        } else {\n+            logger.warn(\"updateTouchWandUnitState incompatible TouchWandUnitData instance\");\n+        }\n+    }\n+\n+    @Override\n+    void touchWandUnitHandleCommand(Command command) {\n+    }\n+\n+    void updateBatteryLevel(TouchWandUnitDataAlarmSensor unitData) {\n+        Integer battLevel = unitData.getCurrStatus().getBatt();\n+        updateState(CHANNEL_BATTERY_LEVEL, new DecimalType(battLevel));\n+        int lowThreshold = isBatteryLow ? BATT_LEVEL_LOW + BATT_LEVEL_LOW_HYS : BATT_LEVEL_LOW;\n+        boolean lowBattery = (battLevel <= lowThreshold);\n+        updateState(CHANNEL_BATTERY_LOW, OnOffType.from(lowBattery));\n+        isBatteryLow = (battLevel <= lowThreshold);\n+    }\n+\n+    void updateIllumination(TouchWandUnitDataAlarmSensor unitData) {\n+        for (Sensor sensor : unitData.getCurrStatus().getSensorsStatus()) {\n+            if (sensor.type == SENSOR_TYPE_LUMINANCE) {\n+                updateState(CHANNEL_ILLUMINATION, new DecimalType(sensor.value));\n+            }\n+        }\n+    }\n+\n+    void updateChannelLeak(TouchWandUnitDataAlarmSensor unitData) {\n+        for (BinarySensorEvent bSensor : unitData.getCurrStatus().getbSensorsStatus()) {\n+            if (bSensor.sensorType == SENSOR_TYPE_LEAK) {\n+                boolean isLeak = bSensor.sensor.state;\n+                updateState(CHANNEL_LEAK, OnOffType.from(isLeak));\n+            }\n+        }\n+    }\n+\n+    void updateChannelDoorWindow(TouchWandUnitDataAlarmSensor unitData) {\n+        for (BinarySensorEvent bSensor : unitData.getCurrStatus().getbSensorsStatus()) {\n+            if (bSensor.sensorType == SENSOR_TYPE_DOOR_WINDOW) {\n+                boolean isOpen = bSensor.sensor.state;\n+                OpenClosedType myOpenClose;\n+                myOpenClose = isOpen ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+                updateState(CHANNEL_DOORWINDOW, myOpenClose);\n+            }\n+        }\n+    }\n+\n+    void updateChannelMotion(TouchWandUnitDataAlarmSensor unitData) {\n+        for (BinarySensorEvent bSensor : unitData.getCurrStatus().getbSensorsStatus()) {\n+            if (bSensor.sensorType == SENSOR_TYPE_MOTION) {\n+                boolean hasMotion = bSensor.sensor.state;\n+                updateState(CHANNEL_MOTION, OnOffType.from(hasMotion));\n+            }\n+        }\n+    }\n+\n+    void updateChannelTemperature(TouchWandUnitDataAlarmSensor unitData) {\n+        for (Sensor sensor : unitData.getCurrStatus().getSensorsStatus()) {\n+            if (sensor.type == SENSOR_TYPE_TEMPERATURE) {\n+                updateState(CHANNEL_TEMPERATURE, new DecimalType(sensor.value));", "originalCommit": "ba5c54d2dfda06b89d6c0d11a6ed0e45ba9712b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2ODQzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517668434", "bodyText": "Please make these nested classes static.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public class Alarm {\n          \n          \n            \n                    public int event;\n          \n          \n            \n                    public long ts;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public class AlarmEvent {\n          \n          \n            \n                    int alarmType;\n          \n          \n            \n                    Alarm alarm = new Alarm();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public class Sensor {\n          \n          \n            \n                    public int type;\n          \n          \n            \n                    public float value;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public class BinarySensor {\n          \n          \n            \n                    public long ts;\n          \n          \n            \n                    public boolean state;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public class BinarySensorEvent {\n          \n          \n            \n                    public int sensorType;\n          \n          \n            \n                    public BinarySensor sensor = new BinarySensor();\n          \n          \n            \n                }\n          \n          \n            \n                public static class Alarm {\n          \n          \n            \n                    public int event;\n          \n          \n            \n                    public long ts;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public static class AlarmEvent {\n          \n          \n            \n                    int alarmType;\n          \n          \n            \n                    Alarm alarm = new Alarm();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public static class Sensor {\n          \n          \n            \n                    public int type;\n          \n          \n            \n                    public float value;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public static class BinarySensor {\n          \n          \n            \n                    public long ts;\n          \n          \n            \n                    public boolean state;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public static class BinarySensorEvent {\n          \n          \n            \n                    public int sensorType;\n          \n          \n            \n                    public BinarySensor sensor = new BinarySensor();\n          \n          \n            \n                }", "author": "cpmeister", "createdAt": "2020-11-04T22:28:31Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/dto/TouchWandAlarmSensorCurrentStatus.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.dto;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorCurrentStatus} implements Alarm Sensor unit\n+ * CurrentStatus data property.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class TouchWandAlarmSensorCurrentStatus {\n+\n+    private int batt;\n+    private List<Sensor> sensorsStatus = new ArrayList<Sensor>();\n+    private List<AlarmEvent> alarmsStatus = new ArrayList<AlarmEvent>();\n+    private List<BinarySensorEvent> bSensorsStatus = new ArrayList<BinarySensorEvent>();\n+\n+    public void setBatt(Integer batt) {\n+        this.batt = batt;\n+    }\n+\n+    public int getBatt() {\n+        return batt;\n+    }\n+\n+    public void setSensorsStatus(List<Sensor> sensorsStatus) {\n+        this.sensorsStatus = sensorsStatus;\n+    }\n+\n+    public List<Sensor> getSensorsStatus() {\n+        return sensorsStatus;\n+    }\n+\n+    public List<BinarySensorEvent> getbSensorsStatus() {\n+        return bSensorsStatus;\n+    }\n+\n+    public void setbSensorsStatus(List<BinarySensorEvent> bSensorsStatus) {\n+        this.bSensorsStatus = bSensorsStatus;\n+    }\n+\n+    public List<AlarmEvent> getAlarmsStatus() {\n+        return alarmsStatus;\n+    }\n+\n+    public void setAlarmsStatus(List<AlarmEvent> alarmsStatus) {\n+        this.alarmsStatus = alarmsStatus;\n+    }\n+\n+    public class Alarm {\n+        public int event;\n+        public long ts;\n+    }\n+\n+    public class AlarmEvent {\n+        int alarmType;\n+        Alarm alarm = new Alarm();\n+    }\n+\n+    public class Sensor {\n+        public int type;\n+        public float value;\n+    }\n+\n+    public class BinarySensor {\n+        public long ts;\n+        public boolean state;\n+    }\n+\n+    public class BinarySensorEvent {\n+        public int sensorType;\n+        public BinarySensor sensor = new BinarySensor();\n+    }", "originalCommit": "ba5c54d2dfda06b89d6c0d11a6ed0e45ba9712b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2MjQ3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r517862474", "bodyText": "I would like to keep those non static since I need to create new instances of Sensors , Binary sensors end add it to the sensors status ArrayList during Json deserialization for example\nChanging the inner classes to static will require using adding access methods in the outer class (which is possible but not sure if it is needed)", "author": "roieg", "createdAt": "2020-11-05T08:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2ODQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NjExMA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r518276110", "bodyText": "You can create static instances like new TouchWandAlarmSensorCurrentStatus.AlarmEvent().", "author": "cpmeister", "createdAt": "2020-11-05T18:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2ODQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMzNjM2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r518336366", "bodyText": "Thanks , done", "author": "roieg", "createdAt": "2020-11-05T20:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2ODQzNA=="}], "type": "inlineReview"}, {"oid": "149763c0435f7c1ae52f7d35421e76485e9c61d0", "url": "https://github.com/openhab/openhab-addons/commit/149763c0435f7c1ae52f7d35421e76485e9c61d0", "message": "Added support for AlarmSensor and WallController\n\nClean merge\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-05T07:18:40Z", "type": "commit"}, {"oid": "2f8d3910057def08fa2c780afb3e9d2978328775", "url": "https://github.com/openhab/openhab-addons/commit/2f8d3910057def08fa2c780afb3e9d2978328775", "message": "fixes after review\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-05T07:18:40Z", "type": "commit"}, {"oid": "b206f344a941fe7cbb7d1563cb4db01bc0d1cb5c", "url": "https://github.com/openhab/openhab-addons/commit/b206f344a941fe7cbb7d1563cb4db01bc0d1cb5c", "message": "more fixes after second review\n\nFix small compiler warning regard potential null access\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-05T08:30:29Z", "type": "commit"}, {"oid": "b206f344a941fe7cbb7d1563cb4db01bc0d1cb5c", "url": "https://github.com/openhab/openhab-addons/commit/b206f344a941fe7cbb7d1563cb4db01bc0d1cb5c", "message": "more fixes after second review\n\nFix small compiler warning regard potential null access\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-05T08:30:29Z", "type": "forcePushed"}, {"oid": "86f7fcd90c5e2e927973efc1ce1c899a659f2cf8", "url": "https://github.com/openhab/openhab-addons/commit/86f7fcd90c5e2e927973efc1ce1c899a659f2cf8", "message": "remove uneeded null check\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-05T12:50:31Z", "type": "commit"}, {"oid": "96d3894f3aac0e40c3f746a1b78d6dbeb6fb89ad", "url": "https://github.com/openhab/openhab-addons/commit/96d3894f3aac0e40c3f746a1b78d6dbeb6fb89ad", "message": "changed inner classes to static\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-05T20:10:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM0NDc5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r518344799", "bodyText": "Please don't create a QuantityType from a string. If you know the type of unit the device uses you should specify it as the second argument in the QuantityType constructor. For temperature most devices use SIUnits.CELCIUS.", "author": "cpmeister", "createdAt": "2020-11-05T20:28:28Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandAlarmSensorHandler.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import javax.measure.quantity.Illuminance;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.BinarySensorEvent;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Sensor;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitDataAlarmSensor;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorHandler} is responsible for handling command for Alarm Sensor unit\n+ *\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class TouchWandAlarmSensorHandler extends TouchWandBaseUnitHandler {\n+\n+    private static final int BATT_LEVEL_LOW = 20;\n+    private static final int BATT_LEVEL_LOW_HYS = 5;\n+\n+    private boolean isBatteryLow = false;\n+\n+    public TouchWandAlarmSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    void updateTouchWandUnitState(TouchWandUnitData unitData) {\n+        if (unitData instanceof TouchWandUnitDataAlarmSensor) {\n+            TouchWandUnitDataAlarmSensor sensor = (TouchWandUnitDataAlarmSensor) unitData;\n+            updateBatteryLevel(sensor);\n+            updateIllumination(sensor);\n+            updateChannelLeak(sensor);\n+            updateChannelDoorWindow(sensor);\n+            updateChannelMotion(sensor);\n+            updateChannelTemperature(sensor);\n+        } else {\n+            logger.warn(\"updateTouchWandUnitState incompatible TouchWandUnitData instance\");\n+        }\n+    }\n+\n+    @Override\n+    void touchWandUnitHandleCommand(Command command) {\n+    }\n+\n+    void updateBatteryLevel(TouchWandUnitDataAlarmSensor unitData) {\n+        Integer battLevel = unitData.getCurrStatus().getBatt();\n+        updateState(CHANNEL_BATTERY_LEVEL, new DecimalType(battLevel));\n+        int lowThreshold = isBatteryLow ? BATT_LEVEL_LOW + BATT_LEVEL_LOW_HYS : BATT_LEVEL_LOW;\n+        boolean lowBattery = (battLevel <= lowThreshold);\n+        updateState(CHANNEL_BATTERY_LOW, OnOffType.from(lowBattery));\n+        isBatteryLow = lowBattery;\n+    }\n+\n+    void updateIllumination(TouchWandUnitDataAlarmSensor unitData) {\n+        for (Sensor sensor : unitData.getCurrStatus().getSensorsStatus()) {\n+            if (sensor.type == SENSOR_TYPE_LUMINANCE) {\n+                updateState(CHANNEL_ILLUMINATION, new QuantityType<Illuminance>(String.valueOf(sensor.value)));\n+            }\n+        }\n+    }\n+\n+    void updateChannelLeak(TouchWandUnitDataAlarmSensor unitData) {\n+        for (BinarySensorEvent bSensor : unitData.getCurrStatus().getbSensorsStatus()) {\n+            if (bSensor.sensorType == SENSOR_TYPE_LEAK) {\n+                boolean isLeak = bSensor.sensor.state;\n+                updateState(CHANNEL_LEAK, OnOffType.from(isLeak));\n+            }\n+        }\n+    }\n+\n+    void updateChannelDoorWindow(TouchWandUnitDataAlarmSensor unitData) {\n+        for (BinarySensorEvent bSensor : unitData.getCurrStatus().getbSensorsStatus()) {\n+            if (bSensor.sensorType == SENSOR_TYPE_DOOR_WINDOW) {\n+                boolean isOpen = bSensor.sensor.state;\n+                OpenClosedType myOpenClose;\n+                myOpenClose = isOpen ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+                updateState(CHANNEL_DOORWINDOW, myOpenClose);\n+            }\n+        }\n+    }\n+\n+    void updateChannelMotion(TouchWandUnitDataAlarmSensor unitData) {\n+        for (BinarySensorEvent bSensor : unitData.getCurrStatus().getbSensorsStatus()) {\n+            if (bSensor.sensorType == SENSOR_TYPE_MOTION) {\n+                boolean hasMotion = bSensor.sensor.state;\n+                updateState(CHANNEL_MOTION, OnOffType.from(hasMotion));\n+            }\n+        }\n+    }\n+\n+    void updateChannelTemperature(TouchWandUnitDataAlarmSensor unitData) {\n+        for (Sensor sensor : unitData.getCurrStatus().getSensorsStatus()) {\n+            if (sensor.type == SENSOR_TYPE_TEMPERATURE) {\n+                updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(String.valueOf(sensor.value)));", "originalCommit": "96d3894f3aac0e40c3f746a1b78d6dbeb6fb89ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM0NzAxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r518347015", "bodyText": "It is standard in other bindings to make a table of possible channels here that includes their item types and descriptions.", "author": "cpmeister", "createdAt": "2020-11-05T20:32:41Z", "path": "bundles/org.openhab.binding.touchwand/README.md", "diffHunk": "@@ -40,6 +41,12 @@ After adding TouchWand Hub the auto discovery will add all switches dimmers and\n \n No thing configuration is needed\n \n+## AlarmSensor channels \n+\n+**Touchwand Wanderfull\u2122** supports various types of alarm sensors for example water leak sensors , door/window sensor , motion sensor.\n+Trying to develop a generic Alarm Sensor support all AlarmSensor types has all the channels avaible but only the relevant ones will updates with the relevant values.\n+It is the user responsibility to use the proper channels for the sensors.\n+", "originalCommit": "96d3894f3aac0e40c3f746a1b78d6dbeb6fb89ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NjIwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r518686207", "bodyText": "done", "author": "roieg", "createdAt": "2020-11-06T11:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM0NzAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM0ODA1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r518348056", "bodyText": "as above, but you should use the SmartHomeUnits.LUX here instead.", "author": "cpmeister", "createdAt": "2020-11-05T20:34:43Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandAlarmSensorHandler.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import javax.measure.quantity.Illuminance;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.BinarySensorEvent;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Sensor;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitDataAlarmSensor;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * The {@link TouchWandAlarmSensorHandler} is responsible for handling command for Alarm Sensor unit\n+ *\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class TouchWandAlarmSensorHandler extends TouchWandBaseUnitHandler {\n+\n+    private static final int BATT_LEVEL_LOW = 20;\n+    private static final int BATT_LEVEL_LOW_HYS = 5;\n+\n+    private boolean isBatteryLow = false;\n+\n+    public TouchWandAlarmSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    void updateTouchWandUnitState(TouchWandUnitData unitData) {\n+        if (unitData instanceof TouchWandUnitDataAlarmSensor) {\n+            TouchWandUnitDataAlarmSensor sensor = (TouchWandUnitDataAlarmSensor) unitData;\n+            updateBatteryLevel(sensor);\n+            updateIllumination(sensor);\n+            updateChannelLeak(sensor);\n+            updateChannelDoorWindow(sensor);\n+            updateChannelMotion(sensor);\n+            updateChannelTemperature(sensor);\n+        } else {\n+            logger.warn(\"updateTouchWandUnitState incompatible TouchWandUnitData instance\");\n+        }\n+    }\n+\n+    @Override\n+    void touchWandUnitHandleCommand(Command command) {\n+    }\n+\n+    void updateBatteryLevel(TouchWandUnitDataAlarmSensor unitData) {\n+        Integer battLevel = unitData.getCurrStatus().getBatt();\n+        updateState(CHANNEL_BATTERY_LEVEL, new DecimalType(battLevel));\n+        int lowThreshold = isBatteryLow ? BATT_LEVEL_LOW + BATT_LEVEL_LOW_HYS : BATT_LEVEL_LOW;\n+        boolean lowBattery = (battLevel <= lowThreshold);\n+        updateState(CHANNEL_BATTERY_LOW, OnOffType.from(lowBattery));\n+        isBatteryLow = lowBattery;\n+    }\n+\n+    void updateIllumination(TouchWandUnitDataAlarmSensor unitData) {\n+        for (Sensor sensor : unitData.getCurrStatus().getSensorsStatus()) {\n+            if (sensor.type == SENSOR_TYPE_LUMINANCE) {\n+                updateState(CHANNEL_ILLUMINATION, new QuantityType<Illuminance>(String.valueOf(sensor.value)));", "originalCommit": "96d3894f3aac0e40c3f746a1b78d6dbeb6fb89ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ba70ff87a5082c4f703cf904b271f68bbfc49831", "url": "https://github.com/openhab/openhab-addons/commit/ba70ff87a5082c4f703cf904b271f68bbfc49831", "message": "use proper QuantityType\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-06T09:44:50Z", "type": "commit"}, {"oid": "ff2d85f78ba96d3f6463db6419980741383de619", "url": "https://github.com/openhab/openhab-addons/commit/ff2d85f78ba96d3f6463db6419980741383de619", "message": "update Readme.md\n\nadd channels description\nsome typos fixes\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-06T11:14:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIxNTE5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r519215194", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!jsonObject.get(\"status\").isJsonNull()) { // Sometimes status in null\n          \n          \n            \n                        if (!jsonObject.get(\"status\").isJsonNull()) { // Sometimes status is null", "author": "cpmeister", "createdAt": "2020-11-07T20:28:43Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/dto/AlarmSensorUnitDataDeserializer.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.Alarm;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandAlarmSensorCurrentStatus.BinarySensor;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link AlarmSensorUnitDataDeserializer} implements AlarmSensorUnitData unit\n+ * Json De-serializer.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AlarmSensorUnitDataDeserializer implements JsonDeserializer<TouchWandUnitDataAlarmSensor> {\n+\n+    static final Gson gson = new Gson();\n+    static GsonBuilder builder = new GsonBuilder();\n+\n+    @Override\n+    public TouchWandUnitDataAlarmSensor deserialize(@Nullable JsonElement json, @Nullable Type typeOfT,\n+            @Nullable JsonDeserializationContext context) throws JsonParseException {\n+\n+        TouchWandUnitDataAlarmSensor touchWandUnitDataAlarmSensor = new TouchWandUnitDataAlarmSensor();\n+\n+        JsonElement myJson = json;\n+        if (myJson != null) {\n+            JsonObject jsonObject = myJson.getAsJsonObject();\n+            touchWandUnitDataAlarmSensor.setId(jsonObject.get(\"id\").getAsInt());\n+            touchWandUnitDataAlarmSensor.setName(jsonObject.get(\"name\").getAsString());\n+            touchWandUnitDataAlarmSensor.setConnectivity(jsonObject.get(\"connectivity\").getAsString());\n+            touchWandUnitDataAlarmSensor.setType(jsonObject.get(\"type\").getAsString());\n+            touchWandUnitDataAlarmSensor.setHasBattery(jsonObject.get(\"hasBattery\").getAsBoolean());\n+            JsonElement powerMeterElement = jsonObject.get(\"hasPowerMeter\");\n+            if (!powerMeterElement.isJsonNull()) {\n+                touchWandUnitDataAlarmSensor.setHasPowerMeter(powerMeterElement.getAsBoolean());\n+            } else {\n+                touchWandUnitDataAlarmSensor.setHasPowerMeter(false);\n+            }\n+\n+            if (!jsonObject.get(\"status\").isJsonNull()) { // Sometimes status in null", "originalCommit": "ff2d85f78ba96d3f6463db6419980741383de619", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIxNTIxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r519215210", "bodyText": "remove blank line", "author": "cpmeister", "createdAt": "2020-11-07T20:29:00Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java", "diffHunk": "@@ -139,6 +139,7 @@ public void onDataReceived(TouchWandUnitData unitData) {\n         if (unitUpdateListeners.containsKey(unitData.getId().toString())) {\n             TouchWandUnitUpdateListener updateListener = unitUpdateListeners.get(unitData.getId().toString());\n             updateListener.onItemStatusUpdate(unitData);\n+", "originalCommit": "ff2d85f78ba96d3f6463db6419980741383de619", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMzA0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r519233041", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<state readOnly=\"true\"></state>\n          \n          \n            \n            \t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>", "author": "cpmeister", "createdAt": "2020-11-07T23:30:25Z", "path": "bundles/org.openhab.binding.touchwand/src/main/resources/OH-INF/thing/alarmsensor.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"touchwand\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"alarmsensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\"></bridge-type-ref>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>TouchWand Alarm Sensor Unit</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"battery_level\" typeId=\"system.battery-level\"/>\n+\t\t\t<channel id=\"battery_low\" typeId=\"system.low-battery\"/>\n+\t\t\t<channel id=\"leak\" typeId=\"leak\"></channel>\n+\t\t\t<channel id=\"motion\" typeId=\"motion\"/>\n+\t\t\t<channel id=\"illumination\" typeId=\"illumination\"/>\n+\t\t\t<channel id=\"isOpen\" typeId=\"isOpen\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</thing-type>\n+\t<channel-type id=\"leak\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Leak Detected</label>\n+\t\t<state readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"illumination\">\n+\t\t<item-type>Number:Illuminance</item-type>\n+\t\t<label>Illumination</label>\n+\t\t<description>\n+\t\t\tThis channel shows the brightness of the environment of the device in Lux.\n+\t\t</description>\n+\t\t<state readOnly=\"true\"></state>", "originalCommit": "ff2d85f78ba96d3f6463db6419980741383de619", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMzUxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r519233519", "bodyText": "Do you know at runtime what channels a sensor actually supports? You can remove channels dynamically if a sensor doesn't support them. I would suggest doing that instead of putting the burden on the user to figure out which ones work.", "author": "cpmeister", "createdAt": "2020-11-07T23:35:40Z", "path": "bundles/org.openhab.binding.touchwand/README.md", "diffHunk": "@@ -40,6 +41,32 @@ After adding TouchWand Hub the auto discovery will add all switches dimmers and\n \n No thing configuration is needed\n \n+## Channels \n+\n+\n+note **Touchwand Wanderfull\u2122** supports various types of alarm sensors such as water leak, door/window sensor and motion sensor.\n+in order to keep the Alarm Sensor generic and support all AlarmSensor types, All the alarm sensor channels are available for each sensor\n+but only the relevant ones will be updates with the relevant values.\n+It is the user responsibility to use the proper channels for the sensors.", "originalCommit": "ff2d85f78ba96d3f6463db6419980741383de619", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI3NDY2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r519274662", "bodyText": "@cpmeister  , I thought about it too but could not find a way to do it .\nIs there a documentation on how to add/remove per defined channels  dynamically ?", "author": "roieg", "createdAt": "2020-11-08T07:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMzUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4MDAyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r519280020", "bodyText": "@cpmeister  , ok found a thread https://community.openhab.org/t/dynamically-add-channels-defined-in-xml/103940 , I believe it is a good starting point , please let me know if there are other sources I can use", "author": "roieg", "createdAt": "2020-11-08T07:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMzUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3MTQwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r519471408", "bodyText": "I would just like to add that to remove a channel you would call thingBuilder.withoutChannel(channel);", "author": "cpmeister", "createdAt": "2020-11-08T20:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMzUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNDM0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8933#discussion_r523424343", "bodyText": "done", "author": "roieg", "createdAt": "2020-11-14T14:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMzUxOQ=="}], "type": "inlineReview"}, {"oid": "e4c9bafd2ddd9d24374d8d81018e2f9f7a59ab9e", "url": "https://github.com/openhab/openhab-addons/commit/e4c9bafd2ddd9d24374d8d81018e2f9f7a59ab9e", "message": "Add unit type to alarmsensor.xml\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-12T15:28:25Z", "type": "commit"}, {"oid": "3c4b46bf5701cd5d1e3698acfc4547b022bb9a14", "url": "https://github.com/openhab/openhab-addons/commit/3c4b46bf5701cd5d1e3698acfc4547b022bb9a14", "message": "typos and style\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-12T15:42:30Z", "type": "commit"}, {"oid": "5369365804cb5917156a997a250bf1e44bf30dea", "url": "https://github.com/openhab/openhab-addons/commit/5369365804cb5917156a997a250bf1e44bf30dea", "message": "display only relevent Alarm sensors channels\n\nShow only supported channes in the Alarm sensor\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-14T14:14:00Z", "type": "commit"}, {"oid": "1c4f862d72cb17b450b2c7ce7851ff853acf7123", "url": "https://github.com/openhab/openhab-addons/commit/1c4f862d72cb17b450b2c7ce7851ff853acf7123", "message": "remove NonNullBeDefault\nAs i cause compile error\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-16T07:19:14Z", "type": "commit"}, {"oid": "842ce1d4a1ed7559b27ad92da95d1032b55111ca", "url": "https://github.com/openhab/openhab-addons/commit/842ce1d4a1ed7559b27ad92da95d1032b55111ca", "message": "Remove @nullable anotation\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-16T07:29:28Z", "type": "commit"}, {"oid": "a719cd7fb307f6719465fcb24bb328edae872e6e", "url": "https://github.com/openhab/openhab-addons/commit/a719cd7fb307f6719465fcb24bb328edae872e6e", "message": "Fix @Null related errors\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-11-16T17:29:07Z", "type": "commit"}]}